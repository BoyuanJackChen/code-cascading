[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = set(test_tup1)\n    list2 = set(test_tup2)\n    list3 = list1.intersection(list2)\n    return list3\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for x in test_tup1:\n        if x in test_tup2:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    final_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            final_list.append(test_tup1[i])\n    print(final_list)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = []\n    list2 = []\n    for i in test_tup1:\n        list1.append(i)\n    for j in test_tup2:\n        list2.append(j)\n    for k in list1:\n        if k in list2:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list_1 = test_tup1\n    list_2 = test_tup2\n    # list_1 = list(test_tup1)\n    # list_2 = list(test_tup2)\n    list_1.sort()\n    list_2.sort()\n    for i in range(len(list_1)):\n        if list_1[i] == list_2[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in range(len(test_tup1)):\n        lst1.append(test_tup1[i])\n    for j in range(len(test_tup2)):\n        lst2.append(test_tup2[j])\n    set1 = set(lst1)\n    set2 = set(lst2)\n    result = list(set1.intersection(set2))\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    def find_shared(lst1,lst2):\n        common_elements = []\n        for i in lst1:\n            if i in lst2:\n                common_elements.append(i)\n        return common_elements\n    return find_shared(test_tup1,test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    elements1 = []\n    elements2 = []\n    for i in test_tup1:\n        if i in test_tup2:\n            elements1.append(i)\n    for j in test_tup2:\n        if j in test_tup1:\n            elements2.append(j)\n    print(\"Elements present in both the lists:\", elements1)\n    print(\"Elements present in only one of the lists:\", elements2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element1 in test_tup1:\n        if element1 in test_tup2:\n            shared_elements.append(element1)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    i = 0\n    j = 0\n    common = []\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] == test_tup2[j]:\n            common.append(test_tup1[i])\n            i += 1\n            j += 1\n        elif test_tup1[i] < test_tup2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not is_prime(n)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    count = 0\n    for i in range(1,n):\n        if(n%i==0):\n            count+=1\n            if(count>1):\n                break\n    if(count==1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n < 2:\n        return True\n    if n % 2 == 0:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n==1):\n        return True\n    else:\n        for i in range(2,n):\n            if(n%i==0):\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n%2==0):\n        return False\n    else:\n        i=3\n        while(i*i<=n):\n            if(n%i==0):\n                return False\n            i+=2\n        return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    if n == 5 or n == 7:\n        return True\n    for i in range(2, math.ceil(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #initializing a max heap with n+1 elements\n    #the last element of the heap is a dummy node to store the -infinity element\n    hq.heapify(nums)\n    result = []\n    for _ in range(n):\n        #pop out the top element in the heap\n        result.append(hq.heappop(nums))\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    print(nums)\n    s=[]\n    for i in range(n):\n        s.append(hq.heappop(nums))\n    return s[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums or n>len(nums):\n        return []\n    max_heap = []\n    for i in range(n):\n        hq.heappush(max_heap,(-nums[i],i))\n    while n>0:\n        nums[n],n = hq.heappop(max_heap)\n        n-=1\n    return nums\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums or n>len(nums):\n        return []\n    min_heap = []\n    for i in range(n):\n        hq.heappush(min_heap,nums[i])\n    while n>0:\n        nums[n],n = hq.heappop(min_heap)\n        n-=1\n    return nums\ndef max_heapify(A,n,i):\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and A[i] < A[left]:\n        largest = left\n    if right < n and A[largest] < A[right]:\n        largest = right\n    if largest!= i:\n        A[i],A[largest] = A[largest],A[i]\n        max_heapify(A,n,largest)\ndef min_heapify(A,n,i):\n    smallest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and A[i] > A[left]:\n        smallest = left\n    if right < n and A[smallest] > A[right]:\n        smallest = right\n    if smallest!= i:\n        A[i],A[smallest] = A[smallest],A[i]\n        min_heapify(A,n,smallest)\ndef build_max_heap(A):\n    '''\n    Write a function to convert a max heap to a min heap.\n    '''\n    n = len(A)\n    for i in range(n//2,-1,-1):\n        max_heapify(A,n,i)\ndef build_min_heap(A):\n    '''\n    Write a function to convert a min heap to a max heap.\n    '''\n    n = len(A)\n    for i in range(n//2,-1,-1):\n        min_heapify(A,n,i)\ndef heapsort_min_heap(A):\n    '''\n    Write a function to sort a min heap.\n    '''\n    n = len(A)\n    build_min_heap(A)\n    for i in range(n-1):\n        A[0],A[i] = A[i],A[0]\n        min_heapify(A,n,0)\ndef heapsort_max_heap(A):\n    '''\n    Write a function to sort a max heap.\n    '''\n    n = len(A)\n    build_max_heap(A)\n    for i in range(n-1):\n        A[0],A[i] = A[i],A[0]\n        max_heapify(A,n,0)\ndef heapsort_min_heap_unstable(A):\n    '''\n    Write a function to sort a min heap, without stable sort.\n    '''\n    n = len(A)\n    build_min_heap(A)\n    for i in range(n-1):\n        A[0],A[i] = A[i],A[0]\n        min_heapify(A,n,0)\ndef heapsort_max_heap_unstable(A):\n    '''\n    Write a function to sort a max heap, without stable sort.\n    '''\n    n = len(A)\n    build_max_heap(A)\n    for i in range(n-1):\n        A[0],A[i] = A[i],A[0]\n        max_heapify(A,n,0)\ndef heapsort_min_heap_quick(A):\n    '''\n    Write a function to sort a min heap using heap sort.\n    '''\n    n = len(A)\n    build_min_heap(A)\n    for i in range(n//2,0,-1):\n        A[0],A[i] = A[i],A[0]\n        min_heapify(A,n,0)\ndef heapsort_max_heap_quick(A):\n    '''\n    Write a function to sort a max heap using heap sort.\n    '''\n    n = len(A)\n    build_max_heap(A)\n    for i in range(n//2,0,-1):\n        A[0],A[i] = A[i],A[0]\n        max_heapify(A,n,0)\ndef heapsort_min_heap_quick_unstable(A):\n    '''\n    Write a function to sort a min heap, using heap sort.\n    '''\n    n = len(A)\n    build_min_heap(A)\n    for i in range(n//2,0,-1):\n        A[0],A[i] = A[i],A[0]\n        min_heapify(A,n,0)\ndef heapsort_max_heap_quick_unstable(A):\n    '''\n    Write a function to sort a max heap, using heap sort.\n    '''\n    n = len(A)\n    build_max_heap(A)\n    for i in range(n//2,0,-1):\n        A[0],A[i] = A[i],A[0]\n        max_heapify(A,n,0)\ndef heapsort_min_heap_quick_stable(A):\n    '''\n    Write a function to sort a min heap, using heap sort.\n    '''\n    n = len(A)\n    build_min_heap(A)\n    for i in range(n//2,0,-1):\n        A[0],A[i] = A[i],A[0]\n        min_heapify(A,n,0)\ndef heapsort_max_heap_quick_stable(A):\n    '''\n    Write a function to sort a max heap, using heap sort.\n    '''\n    n = len(A)\n    build_max_heap(A)\n    for i in range(n//2,0,-1):\n        A[0],A[i] = A[i],A[0]\n        max_heapify(A,n,0)\ndef heapsort_min_heap_quick_stable(A):\n    '''\n    Write a function to sort a min heap, using heap sort.\n    '''\n    n = len(A)\n    build_min_heap(A)\n    for i in range(n//2,0,-1):\n        A[0],A[i] = A[i],A[0]\n        min_heapify(A,n,0)\ndef max_heap_insert(A,n,i):\n    '''\n    Write a function to insert a value into a max heap.\n    '''\n    if i>=n:\n        return\n    A.append(-float('inf'))\n    heapq.heappush(A,(-float('inf'),i))\n    n+=1\ndef min_heap_insert(A,n,i):\n    '''\n    Write a function to insert a value into a min heap.\n    '''\n    if i>=n:\n        return\n    A.append(float('inf'))\n    heapq.heappush(A,(float('inf'),i))\n    n+=1\ndef print_heap_sorted(A,i,n):\n    if i<0 or i>=n:\n        return\n    print(A[i],end=\" \")\n    if i*2+1<n:\n        print_heap_sorted(A,i*2"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted(nums[:n],reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    result = []\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n    for i in range(n):\n        result.append(hq.heappop(heap))\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    nums_q=nums[:n]\n    for i in range(n,len(nums)):\n        if nums[i]>nums[0]:\n            nums[0]=nums[i]\n            hq.heapify(nums)\n    return nums_q\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n,len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>=heap[0]:\n            hq.heapreplace(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr = nums\n    arr.sort(reverse=True)\n    return arr[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest=[]\n    hq.heapify(largest)\n    for i in nums:\n        hq.heappush(largest,i)\n        if len(largest)>n:\n            hq.heappop(largest)\n    return largest[::-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # initialize the result variable as false \n    result = False\n    # do bitwise and for the two numbers \n    res = x & (x-1)\n    # if two numbers differ at one bit only then return true else return false \n    if res == 0:\n        result = True\n    # return the result \n    return result \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    while x % 2 == 0: \n        x >>= 1\n    return x == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x%2 == 0:\n            x = x/2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x > 0 and (x & (x-1)) == 0 \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while (x!=0):\n        count+=1\n        x = x>>1\n    return count == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x > 0 and (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!= 0):\n        if (x % 2 == 0):\n            return False\n        x = x >> 1\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Assuming two numbers differ at one bit position only\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a = re.findall(r\"\\b[A-Za-z]{4,}\\b\", text)\n    return a\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    pattern = re.compile(r'\\w{4,}')\n    for line in text:\n        res = pattern.findall(line)\n        result.extend(res)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}',text)\n    print(f'{result}')\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = input('Enter text: ')\n    x = re.findall('\\w+', text)\n    y = []\n    for i in x:\n        if len(i) >= 4:\n            y.append(i)\n    print(y)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w+')\n    words = re.findall(pattern, text)\n    return words\n    \n    \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    with open(\"blah.txt\", 'r', encoding='utf-8') as f:\n        text = f.read()\n        result = re.findall(r'\\w+', text)\n        return(result)\nprint(find_char_long(\"blah bla bla\"))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Your code here\n    words = re.findall('\\w{4,}', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'[a-zA-Z]{4,}', text)\n    print(result)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_words = []\n    words = re.split('\\W+', text)\n    for word in words:\n        if len(word) >= 4:\n            char_words.append(word)\n    print('Characters words:', char_words)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for n in nums:\n        squared_nums.append(n**2)\n    return squared_nums\nprint(square_nums([1, 2, 3, 4]))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sq_nums = []\n    for num in nums:\n        sq_nums.append(num**2)\n    return sq_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = []\n    for i in nums:\n        square_nums.append(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    print(squares)\n    \ndef fun_map(func, *iterables):\n    '''\n    map() accepts zero or more iterables, and returns a map object that \n    iterates over each element in all of them.\n    '''\n    return map(func, *iterables)\n    \ndef square_map(func):\n    '''\n    This function receives a function and returns a new function which\n    will apply the given function to each element in a list. The new\n    function will square each element of the list.\n    '''\n    def square_func(lst):\n        return map(func, lst)\n    return square_func\n    \ndef square_filter(func):\n    '''\n    This function receives a function and returns a new function which\n    will apply the given function to each element in a list. The new\n    function will filter out the elements which are less than 50.\n    '''\n    def square_filter(lst):\n        return filter(func, lst)\n    return square_filter\n    \ndef square_filter_lambda(func):\n    '''\n    This function uses the lambda operator to receive a function and \n    returns a new function which will apply the given function to each\n    element in a list. The new function will filter out the elements which\n    are less than 50.\n    '''\n    return lambda lst: filter(func, lst)\n    \ndef map_filter(func):\n    '''\n    This function receives a function and returns a new function which\n    will apply the given function to each element in a list. The new\n    function will map the given function to each element in the list.\n    '''\n    return lambda lst: map(func, lst)\n    \ndef map_filter_lambda(func):\n    '''\n    This function uses the lambda operator to receive a function and \n    returns a new function which will map the given function to each\n    element in a list. The new function will filter out the elements which\n    are less than 50.\n    '''\n    return lambda lst: map(func, lst)\n    "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    str = str.lower()\n    count = 0\n    for i in range(0,len(str)):\n        if str[i]!= str[len(str)-1-i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #len of str\n    len_str = len(str)\n    #check if str is in dict\n    if str not in rotations:\n        #if not add string\n        rotations[str] = len_str\n        return len_str\n    #if str is in dict and len_str > rotations[str]:\n    #    return len_str\n    #else\n    return rotations[str]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) <= 1:\n        return 0\n    count = 0\n    \n    # Sort the letters of string\n    str = sorted(str)\n    \n    # traverse the string and count the number of occurences of each letter\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Declare the string and the number of rotations\n    s = str\n    n = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = []\n    for i in range(n):\n        str_reversed = str[i:] + str[0:i]\n        if str == str_reversed:\n            rotations.append(0)\n        else:\n            rotations.append(n + 1)\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    if str_len == 1: return 0\n    arr = list(str)\n    arr.sort()\n    print(arr)\n    for i in range(str_len - 1):\n        if arr[i]!= arr[i+1]:\n            return i\n    return str_len\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    lst_ans = []\n    lst_ans_ans = []\n    if str == '':\n        lst_ans.append(0)\n        lst_ans_ans.append(str)\n    else:\n        for i in range(0, len(str)):\n            lst_i = list(str)\n            lst_i.insert(i, '')\n            lst_i = ''.join(lst_i)\n            lst_ans.append(len(lst_i))\n            lst_ans_ans.append(lst_i)\n        lst_ans.sort()\n        for i in range(0, len(lst_ans)):\n            lst_ans[i] = int(lst_ans[i])\n        lst_ans = set(lst_ans)\n        lst_ans = list(lst_ans)\n        for i in range(0, len(lst_ans)):\n            lst_ans[i] = str(lst_ans[i])\n        lst_ans_ans = list(lst_ans_ans)\n        for i in range(0, len(lst_ans)):\n            lst_ans_ans[i] = ''.join(lst_ans_ans[i])\n        for i in range(0, len(lst_ans)):\n            lst_ans_ans[i] = lst_ans_ans[i].replace(' ','')\n        return(lst_ans)\n    \ndef find_Rotations2(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    lst_ans = []\n    lst_ans_ans = []\n    if str == '':\n        lst_ans.append(0)\n        lst_ans_ans.append(str)\n    else:\n        for i in range(0, len(str)):\n            lst_i = list(str)\n            lst_i.insert(i, '')\n            lst_i = ''.join(lst_i)\n            lst_ans.append(len(lst_i))\n            lst_ans_ans.append(lst_i)\n        lst_ans.sort()\n        for i in range(0, len(lst_ans)):\n            lst_ans[i] = int(lst_ans[i])\n        lst_ans = set(lst_ans)\n        lst_ans = list(lst_ans)\n        for i in range(0, len(lst_ans)):\n            lst_ans[i] = str(lst_ans[i])\n        lst_ans_ans = list(lst_ans_ans)\n        for i in range(0, len(lst_ans)):\n            lst_ans_ans[i] = ''.join(lst_ans_ans[i])\n        for i in range(0, len(lst_ans)):\n            lst_ans_ans[i] = lst_ans_ans[i].replace(' ','')\n        return(lst_ans)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # str = input(\"Please enter the string\")\n    # print(str)\n    # print(len(str))\n    lst = []\n    for i in range(len(str)):\n        lst.append([str[i], 0])\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if str[i]!= str[j]:\n                lst[i][1] += 1\n                break\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #Algorithms\n    '''\n    1. First we will iterate over the string and store each value of the array in a dictionary\n    2. Then we will check the key of the dictionary if it is 0 then we can increase the value of the key by 1 and add 1 to the value \n    3. If the key is not 0 then we will check the value of the key if it is 1 we will add 1 to the value and add 1 to the key.\n    4. If the value is greater than 0 and the key is 1 then we will increase the key and add 1 to the value and add 1 to the key\n    5. If the value is not greater than 0 and the key is 1 then we will increase the key and add 1 to the value.\n    6. If the key is not 0 and the key is 0 then we will increase the key by 1 and add 1 to the key and add 1 to the value.\n    '''\n    #code\n    d = {}\n    for char in str:\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n    key = d.keys()\n    key = list(key)\n    key = sorted(key)\n    ans = 0\n    for i in range(len(key)):\n        if d[key[i]] == 0:\n            ans += 1\n        else:\n            if d[key[i]] == 1:\n                d[key[i]] = 1\n                ans += 1\n            else:\n                d[key[i]] = d[key[i]] - 1\n                ans += 2\n    return ans\n    \n    #function call\nprint(find_Rotations('abbc'))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    res = 0\n    for i in range(len(str)):\n        j = i\n        while str[j]!= str[i]:\n            res += 1\n            temp = str[i]\n            str = str[:i] + str[i+1:]\n            str = temp + str\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip()\n    index = 0\n    l = len(s)\n    res = ''\n    while index < l:\n        if s[index] == ch:\n            #print('index: ',index)\n            i = index+1\n            while i < l:\n                if s[i] == ch:\n                    index = i+1\n                else:\n                    break\n            continue\n        res = res + s[index]\n        index = index + 1\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = list(s) \n    l.remove(ch) \n    l.remove(ch) \n    return \"\".join(l)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(0,len(s)):\n        if s[i]==ch:\n            s=s[:i]+s[i+1:]\n            return s\n    "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    s = s.strip()\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    a = s.find(ch)\n    b = s.rfind(ch)\n    c = s.find(ch,a+1)\n    d = s.rfind(ch,b-1)\n    e = s.find(ch,d)\n    f = s.rfind(ch,b+1)\n    \n    if a > -1:\n        if d > -1:\n            if e > -1:\n                s = s[:a]+s[d+1:]\n            else:\n                s = s[:a]+s[b+1:]\n        else:\n            s = s[:a]+s[b+1:]\n    elif b > -1:\n        if e > -1:\n            s = s[:b]+s[e+1:]\n        else:\n            s = s[:b]+s[f+1:]\n    else:\n        s = s[:e]+s[f+1:]\n        \n    return s\n    \ndef palindrome(str1): \n    '''\n    Write a python function to check if a string is a palindrome or not. A palindrome is a word, phrase, or sequence that reads the same forwards and backwards.\n    '''\n    if str1[::-1] == str1:\n        return True\n    else:\n        return False\n        \ndef move(str1):\n    '''\n    Write a python function to get the size of a given string.\n    '''\n    return len(str1)\n    \ndef roman_numeral(str1):\n    '''\n    Write a python function to convert a given string into a roman numeral.\n    '''\n    ar = ['I','II','III','IV','V','VI','VII','VIII','IX','X','XI','XII','XIII','XIV','XV','XVI','XVII','XVIII','XIX','XX','XXI']\n    num1 = 0\n    r = ''\n    for i in range(len(str1)):\n        if i < len(str1)-1:\n            if str1[i] == 'I' and str1[i+1] == 'V':\n                num1 = 4\n            elif str1[i] == 'I' and str1[i+1] == 'X':\n                num1 = 9\n            elif str1[i] == 'X' and str1[i+1] == 'I':\n                num1 = 1\n            elif str1[i] == 'X' and str1[i+1] == 'V':\n                num1 = 5\n            else:\n                num1 = int(ar[int(str1[i])-1])\n        else:\n            num1 = int(ar[int(str1[i])-1])\n        \n        r = r + str(num1)\n    return r\n        \ndef rotational_array(arr):\n    '''\n    Write a python function to rotate array elements by one position.\n    '''\n    r = arr\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-1):\n            t = r[j]\n            r[j] = r[j+1]\n            r[j+1] = t\n    return r\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    str1 = s\n    for i in range(len(s)):\n        if s[i]==ch:\n            count+=1\n        if count == 2:\n            str1 = str1.replace(s[i],\"\",1)\n    return str1"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'',1)\n        s = s.replace(ch,'')\n    return s\n    \ns = \"geeksforgeeks\"\nprint('string after removing geeks',remove_Occ(s,'e'))\nprint('string after removing k',remove_Occ(s,'k'))\nprint('string after removing f',remove_Occ(s,'f'))\nprint('string after removing s',remove_Occ(s,'s'))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    \n    \ndef remove_all(s,ch): \n    '''\n    Write a python function to remove all occurrences of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    \n    \ndef remove_string_chars(s,ch): \n    '''\n    Write a python function to remove all occurrences of a given character from the string.\n    '''\n    return s.translate(str.maketrans('','','abcdefghijklmnopqrstuvwxyz'))\n    \n    \ndef remove_str_chars(s,ch): \n    '''\n    Write a python function to remove all occurrences of a given character from the string.\n    '''\n    return s.translate(str.maketrans('','','abcdefghijklmnopqrstuvwxyz0123456789'))\n    \n    \ndef reverse_string(s): \n    '''\n    Write a python function to reverse the string.\n    '''\n    return s[::-1]\n    \n    \ndef string_compression(s): \n    '''\n    Write a python function to compute the count of repeating characters in a string.\n    '''\n    return len(s) - len(set(s))\n    \n    \ndef string_compression_2(s): \n    '''\n    Write a python function to compute the count of repeating characters in a string.\n    '''\n    return len(s) - len(set(s))\n    \n    \ndef substring_check(s,ch): \n    '''\n    Write a python function to check whether a given string contains a given substring or not.\n    '''\n    return ch.upper() in s.upper()\n    \n    \ndef swap_numbers(s,index1,index2): \n    '''\n    Write a python function to swap the values of two given numbers in the list.\n    '''\n    return s[index1],s[index2]\n    \n    \ndef swap_numbers_2(s,index1,index2): \n    '''\n    Write a python function to swap the values of two given numbers in the list.\n    '''\n    a=s[index1]\n    s[index1]=s[index2]\n    s[index2]=a\n    return s\n    \n    \ndef swap_string(s1,s2): \n    '''\n    Write a python function to swap the values of two given strings.\n    '''\n    return s1[::-1],s2[::-1]\n    \n    \ndef swap_string_2(s1,s2): \n    '''\n    Write a python function to swap the values of two given strings.\n    '''\n    return s1.swapcase(),s2.swapcase()\n    \n    \ndef swap_characters_in_string(s,ch1,ch2): \n    '''\n    Write a python function to swap the values of two given characters in a given string.\n    '''\n    return s.replace(ch1,ch2).replace(ch2,ch1)\n    \n    \ndef swap_characters_in_string_2(s,ch1,ch2): \n    '''\n    Write a python function to swap the values of two given characters in a given string.\n    '''\n    return s.replace(ch1.upper(),ch2.upper()).replace(ch2.upper(),ch1.upper())\n    \n    \ndef check_palindrome(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s[::-1]==s\n    \n    \ndef check_palindrome_2(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_rotated(s, ch): \n    '''\n    Write a python function to check whether a given string is rotated or not.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_rotated_2(s, ch): \n    '''\n    Write a python function to check whether a given string is rotated or not.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_palindrome_string(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_palindrome_string_2(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_palindrome_string_3(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_palindrome_string_4(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_palindrome_string_5(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s==s[::-1]\n    \n    \ndef string_rotation(s1,s2): \n    '''\n    Write a python function to check whether two strings are rotation or not.\n    '''\n    if len(s1)==len(s2):\n        return s1==s2\n    else:\n        return False\n        \n        \ndef string_rotation_2(s1,s2): \n    '''\n    Write a python function to check whether two strings are rotation or not.\n    '''\n    if len(s1)==len(s2):\n        return s1==s2\n    else:\n        return False\n        \n        \ndef rotate_string(s,c): \n    '''\n    Write a python function to rotate a given string by counting the number of characters in a string.\n    '''\n    return s[c:]+s[:c]\n    \n    \ndef rotate_string_2(s,c): \n    '''\n    Write a python function to rotate a given string by counting the number of characters in a string.\n    '''\n    return s[c:]+s[:c]\n    \n    \ndef rotate_string_3(s,c): \n    '''\n    Write a python function to rotate a given string by counting the number of characters in a string.\n    '''\n    return s[c:]+s[:c]\n    \n    \ndef rotate_string_4(s,c): \n    '''\n    Write a python function to rotate a given string by counting the number of characters in a string.\n    '''\n    return s[c:]+s[:c]\n    \n    \ndef rotate_string_5(s,c): \n    '''\n    Write a python function to rotate a given string by counting the number of characters in a string.\n    '''\n    return s[c:]+s[:c]\n    \n    \ndef rotate_string_6(s,c): \n    '''\n    Write a python function to rotate a given string by counting the number of characters in a string.\n    '''\n    return s[c:]+s[:c]\n    \n    \ndef rotate_string_7(s,c): \n    '''\n    Write a python function to rotate a given string by counting the number of characters in a string.\n    '''\n    return s[c:]+s[:c]\n    \n    \ndef rotate_string_8(s,c): \n    '''\n    Write a python function to rotate a given string by counting the number of characters in a string.\n    '''\n    return s[c:]+s[:c]\n    \n    \ndef rotate_string_9(s,c): \n    '''\n    Write a python function to rotate a given string by counting the number of characters in a string.\n    '''\n    return s[c:]"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    c=s.split(ch)\n    return c[1]+c[0]"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    from bisect import bisect_left\n    # pre-compute sums\n    sums = []\n    for row in M:\n        sums.append(sum(row))\n    \n    # now sort\n    M.sort(key=lambda row: sums[row])\n    \n    # finally, take into account rows (see lecture slides)\n    return [[M[i][j] for j in range(len(M[0]))] for i in range(len(M))]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create empty lists to hold all the sums of rows\n    total_row = []\n    total_col = []\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a empty matrix for the sums to be inserted into\n    sums = []\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    col_sum = []\n    for col in range(len(M[0])):\n        col_sum.append(sum([M[i][col] for i in range(len(M))]))\n    col_sum.sort()\n    sorted_matrix = []\n    for i in range(len(M)):\n        sorted_matrix.append([])\n        for j in range(len(M[0])):\n            if col_sum[j] == sum(col_sum):\n                sorted_matrix[i].append(M[i][j])\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Create a list to hold the values of the matrix\n    matrix = []\n    \n    # Create a sorted list to hold the sorted values\n    sorted_matrix = []\n    \n    # Create a variable to store the sum of the rows\n    row_sum = 0\n    \n    # Loop through each row of the matrix and append it to the sorted_matrix\n    for row in M:\n        matrix.append(row)\n        row_sum += sum(row)\n        \n    # Use a for loop to sort the matrix\n    for i in range(len(matrix)):\n        # Add the first index to the sorted_matrix\n        sorted_matrix.append(matrix[i])\n        \n        # Search for the next index\n        for j in range(i, len(matrix)):\n            # Add the next index\n            sorted_matrix.append(matrix[j])\n            \n            # Check if the sum of the next index is less than that of the previous index\n            if sum(sorted_matrix[i]) < sum(sorted_matrix[i - 1]):\n                # Swap the indexes if the sum of the next index is less than that of the previous index\n                sorted_matrix[i], sorted_matrix[i - 1] = sorted_matrix[i - 1], sorted_matrix[i]\n                \n    # Return the sorted matrix\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M)-1):\n            if M[i][j] + M[i][j+1] < M[i][j+1] + M[i][j]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    matrix = []\n    for i in range(len(M)):\n        matrix.append([int(j) for j in input().split()])\n    for i in range(len(M)):\n        matrix[i].sort()\n        sorted_matrix.append(matrix[i])\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    col = len(M[0])\n    for i in range(col):\n        sum = 0\n        for j in range(len(M)):\n            sum += M[j][i]\n        M.sort(key=lambda x: x[i], reverse=True)\n        for j in range(len(M)):\n            M[j][i] = sum - M[j][i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sort_by_row(matrix):\n        # Swap columns so that rows with small sum are at the top.\n        column_to_row_index = {}\n        rows = len(matrix)\n        for row in range(rows):\n            for column in range(columns):\n                if matrix[row][column] in column_to_row_index:\n                    column_to_row_index[matrix[row][column]].append(row)\n                else:\n                    column_to_row_index[matrix[row][column]] = [row]\n        sorted_matrix = [[0] * columns for _ in range(rows)]\n        sorted_rows = sorted(column_to_row_index.keys())\n        for i, sorted_row in enumerate(sorted_rows):\n            for j in range(columns):\n                sorted_matrix[i][j] = matrix[column_to_row_index[sorted_row][0]][j]\n        return sorted_matrix\n    \n    M = sort_by_row(M)\n    \n    rows = len(M)\n    columns = len(M[0])\n    return sorted(M, key=lambda row: sum(row))\n    \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = M.tolist()\n    for i in range(len(M)):\n        M[i].sort()\n    for i in range(len(M)-1):\n        M[i+1] = sorted(M[i+1], key=lambda x: x[0], reverse=True)\n    M = np.array(M)\n    M = M.astype(int)\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*h*b\n    print(\"The volume of the triangle is:\", volume)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    x = l * h\n    y = b * h\n    z = l * b\n    return x * y * z\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*h*b)/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    volume = 0.5*l*h*b\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if type(l) is not int : \n        raise TypeError\n    if type(h) is not int : \n        raise TypeError\n    if type(b) is not int : \n        raise TypeError\n    if type(l) and type(b) and type(h)!= int : \n        raise TypeError\n    volume = (b*h)/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (h * l) * b\n    print(\"The volume of the prism is\",vol)\ndef find_total_surface(l,b,h) : \n    '''\n    Write a python function to find the total surface area of a triangular prism.\n    '''\n    surf = (2 * (h * l) + 2 * (h * l * b))\n    print(\"The total surface area of the prism is\",surf)\ndef find_perimeter(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    perimeter = (2 * (l + b + h))\n    print(\"The perimeter of the triangle is\",perimeter)\ndef find_total_area(l,b,h) : \n    '''\n    Write a python function to find the total area of a triangular prism.\n    '''\n    total_area = (2 * (h * l) + 2 * (h * l * b) + 2 * (h * l * b * b))\n    print(\"The total area of the prism is\",total_area)\ndef find_volume_recursive(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l == 0 :\n        return 0\n    elif b == 0 :\n        return 0\n    elif h == 0 :\n        return 0\n    else :\n        vol = (h * l) * b\n        return vol + find_volume_recursive(l-1,b,h) + find_volume_recursive(l,b-1,h) + find_volume_recursive(l,b,h-1)\ndef find_total_surface_recursive(l,b,h) : \n    '''\n    Write a python function to find the total surface area of a triangular prism.\n    '''\n    if l == 0 :\n        return 0\n    elif b == 0 :\n        return 0\n    elif h == 0 :\n        return 0\n    else :\n        surf = (2 * (h * l) + 2 * (h * l * b))\n        return surf + find_total_surface_recursive(l-1,b,h) + find_total_surface_recursive(l,b-1,h) + find_total_surface_recursive(l,b,h-1)\ndef find_perimeter_recursive(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    if l == 0 :\n        return 0\n    elif b == 0 :\n        return 0\n    elif h == 0 :\n        return 0\n    else :\n        perimeter = (2 * (l + b + h))\n        return perimeter + find_perimeter_recursive(l-1,b,h) + find_perimeter_recursive(l,b-1,h) + find_perimeter_recursive(l,b,h-1)\ndef find_total_area_recursive(l,b,h) : \n    '''\n    Write a python function to find the total area of a triangular prism.\n    '''\n    if l == 0 :\n        return 0\n    elif b == 0 :\n        return 0\n    elif h == 0 :\n        return 0\n    else :\n        total_area = (2 * (h * l) + 2 * (h * l * b) + 2 * (h * l * b * b))\n        return total_area + find_total_area_recursive(l-1,b,h) + find_total_area_recursive(l,b-1,h) + find_total_area_recursive(l,b,h-1)\n    \ndef get_input():\n    '''\n    Read the input from user.\n    '''\n    while True :\n        try :\n            l = int(input(\"Enter the length of the triangle side : \"))\n            b = int(input(\"Enter the breadth of the triangle side : \"))\n            h = int(input(\"Enter the height of the triangle side : \"))\n            break\n        except :\n            print(\"Enter the number only\")\n    return l,b,h\ndef print_output(l,b,h,vol,surf,perimeter,total_area,vol_rec,surf_rec,perimeter_rec,total_area_rec) :\n    '''\n    Print the output to the screen.\n    '''\n    print(\"\\nThe volume of the triangle is %d\"%vol)\n    print(\"The total surface area of the triangle is %d\"%surf)\n    print(\"The perimeter of the triangle is %d\"%perimeter)\n    print(\"The total area of the triangle is %d\"%total_area)\n    print(\"The volume of the triangle using recursion is %d\"%vol_rec)\n    print(\"The total surface area of the triangle using recursion is %d\"%surf_rec)\n    print(\"The perimeter of the triangle using recursion is %d\"%perimeter_rec)\n    print(\"The total area of the triangle using recursion is %d\"%total_area_rec)\ndef main() :\n    '''\n    Main function to run the program.\n    '''\n    l,b,h = get_input()\n    vol = find_Volume(l,b,h)\n    surf = find_total_surface(l,b,h)\n    perimeter = find_perimeter(l,b,h)\n    total_area = find_total_area(l,b,h)\n    vol_rec = find_volume_recursive(l,b,h)\n    surf_rec = find_total_surface_recursive(l,b,h)\n    perimeter_rec = find_perimeter_recursive(l,b,h)\n    total_area_rec = find_total_area_recursive(l,b,h)\n    print_output(l,b,h,vol,surf,perimeter,total_area,vol_rec,surf_rec,perimeter_rec,total_area_rec)\nmain()"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if (b<=0) or (h<=0) or (l<=0):\n        return(0)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    x = re.findall(r\"\\w+_\\w+\", text)\n    if x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.findall(r'\\w*[a-z]+_\\w*', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('^([a-zA-Z]+)_([a-zA-Z])+')\n    return pattern.match(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # text = 'A_tJUfJ'\n    # 'A_tJUfJ'.islower() -> False\n    return text.islower() and '_'.join(text.split('_')).islower()\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #return re.findall('[a-z]+_[a-z]+', text)\n    \n    return True if re.findall('[a-z]+_[a-z]+', text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall(r'[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.lower().replace(' ', '_').replace('-', '_')\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'^[a-z]+_[a-z]+$')\n    if pattern.match(text):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    x = text.split(\" \")\n    for item in x:\n        if re.search('[a-z]', item):\n            print(\"True\")\n            break\n        else:\n            print(\"False\")\n            continue\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]*',text)!= None\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\nprint(square_perimeter(3))\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a) is not int:\n        raise TypeError('Input is not a whole number')\n    if a < 1:\n        raise ValueError('Input should be greater than 0')\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\nprint(square_perimeter(4))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = list(string)\n    str2 = list(string)\n    for i in range(len(str1)):\n        if str2.count(str1[i])>0:\n            str2.remove(str1[i])\n    str1 = ''.join(str1)\n    return str1\nif __name__ == \"__main__\":\n    string = input()\n    print(str_to_list(string))"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    lst = list(string)\n    for i in lst:\n        if i in string:\n            lst.remove(i)\n    return lst\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = ''\n    for char in string:\n        if char not in result:\n            result += char\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    \n    for i in string:\n        if i in string_list:\n            string_list.remove(i)\n    string = \"\".join(string_list)\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count = 0\n    list1 = []\n    list2 = list(string)\n    for i in list2:\n        if i not in list1:\n            list1.append(i)\n    list1 = ''.join(list1)\n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_dict = {}\n    char_set = set(string)\n    no_of_chars = len(char_set)\n    for char in char_set:\n        char_dict[char] = string.count(char)\n    string_list = []\n    for k, v in char_dict.items():\n        if v!= no_of_chars:\n            for i in range(v):\n                string_list.append(k)\n    print(\"List of characters in string is:\", string_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count = 0\n    for i in string:\n        if i in string:\n            count += 1\n    if count == 1:\n        return string\n    else:\n        return string[:count]\n        \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count = 0\n    if len(string) > len(string1):\n        string = string[:len(string1)]\n    if len(string) < len(string1):\n        string1 = string[:len(string)]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp_str = ''\n    temp_str_list = []\n    \n    for ch in string:\n        temp_str = temp_str + ch\n        \n    for ch in temp_str:\n        if ch in temp_str:\n            temp_str_list.append(ch)\n            \n    return temp_str_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # code here\n    string_length = len(string)\n    list1 = list(string)\n    list2 = list(string.replace(string[0],''))\n    if string_length > 256:\n        string = string[:256]\n    list1 = list(string)\n    list2 = list(string.replace(string[0],''))\n    list2 = ''.join(list(set(list2)-set(list1)))\n    return list2\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for x in arraynums:\n        if arraynums.count(x)>1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            if arraynums[i] in arraynums[i+1:]:\n                return True\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0, len(arraynums)-1):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n    \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"\\n--------DUPE---------\")\n    result = find_dupe_in_array(arraynums)\n    if result!= False:\n        print(f\"array contains duplicates : {result}\")\n    else:\n        print(\"No Duplicates\")\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    nums.sort()\n    nums_dict = dict()\n    for i in range(len(nums)):\n        if nums[i] in nums_dict.keys():\n            return True\n        else:\n            nums_dict[nums[i]] = 1\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums: return False\n    arraynums.sort()\n    # if we have duplicates, then there is only one duplicate\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(f'Expected: False; Got: {test_duplicate.__doc__}([\"duplicate\", arraynums])')\n    if duplicate(arraynums) == False:\n        print(\"SUCCESS!\")\n    else:\n        print(\"FAILED!\")\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(a == arraynums[i] for i, a in enumerate(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #arraynums = [1,2,3,4,5,5,6,7,8,9]\n    #returns false\n    seen = []\n    for i in range(0, len(arraynums)):\n        if arraynums[i] not in seen:\n            seen.append(arraynums[i])\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 3 == 0 and x % 5 == 0:\n        return 'Woodall'\n    else:\n        return 'Not a Woodall'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%2==0\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in [11, 22, 33]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x % 3 == 0) or (x % 5 == 0):\n        return True\n    else:\n        return False\n    \nis_woodall(10)\nis_woodall(15)\nis_woodall(20)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # your code here\n    return x % 4 == 3\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0 and (x>50 and x<=100):\n        return True\n    else:\n        return False\nprint(is_woodall(10))\nprint(is_woodall(100))\nprint(is_woodall(20))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(49))\nprint(is_woodall(5))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(23))\nprint(is_woodall(1))\nprint(is_woodall(50))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(49))\nprint(is_woodall(4))\nprint(is_woodall(48))\nprint(is_woodall(3))\nprint(is_woodall(23))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(50))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(50))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(50))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(50))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(0))\nprint(is_woodall(49))\nprint(is_woodall(23))\nprint(is_woodall(5))\nprint(is_woodall(51))\nprint(is_woodall(6))\nprint(is_woodall(48))\nprint(is_woodall(4))\nprint(is_woodall(3))\nprint"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==1:\n        print('{} is Woodall'.format(x))\n    elif x==2:\n        print('{} is Woodall'.format(x))\n    elif x==3:\n        print('{} is Woodall'.format(x))\n    elif x==4:\n        print('{} is Woodall'.format(x))\n    elif x==5:\n        print('{} is Woodall'.format(x))\n    elif x==6:\n        print('{} is Woodall'.format(x))\n    elif x==7:\n        print('{} is Woodall'.format(x))\n    elif x==8:\n        print('{} is Woodall'.format(x))\n    elif x==9:\n        print('{} is Woodall'.format(x))\n    elif x==10:\n        print('{} is Woodall'.format(x))\n    elif x==11:\n        print('{} is Woodall'.format(x))\n    elif x==12:\n        print('{} is Woodall'.format(x))\n    elif x==13:\n        print('{} is Woodall'.format(x))\n    elif x==14:\n        print('{} is Woodall'.format(x))\n    elif x==15:\n        print('{} is Woodall'.format(x))\n    elif x==16:\n        print('{} is Woodall'.format(x))\n    elif x==17:\n        print('{} is Woodall'.format(x))\n    elif x==18:\n        print('{} is Woodall'.format(x))\n    elif x==19:\n        print('{} is Woodall'.format(x))\n    elif x==20:\n        print('{} is Woodall'.format(x))\n    elif x==21:\n        print('{} is Woodall'.format(x))\n    elif x==22:\n        print('{} is Woodall'.format(x))\n    elif x==23:\n        print('{} is Woodall'.format(x))\n    elif x==24:\n        print('{} is Woodall'.format(x))\n    elif x==25:\n        print('{} is Woodall'.format(x))\n    elif x==26:\n        print('{} is Woodall'.format(x))\n    elif x==27:\n        print('{} is Woodall'.format(x))\n    elif x==28:\n        print('{} is Woodall'.format(x))\n    elif x==29:\n        print('{} is Woodall'.format(x))\n    elif x==30:\n        print('{} is Woodall'.format(x))\n    elif x==31:\n        print('{} is Woodall'.format(x))\n    elif x==32:\n        print('{} is Woodall'.format(x))\n    elif x==33:\n        print('{} is Woodall'.format(x))\n    elif x==34:\n        print('{} is Woodall'.format(x))\n    elif x==35:\n        print('{} is Woodall'.format(x))\n    elif x==36:\n        print('{} is Woodall'.format(x))\n    elif x==37:\n        print('{} is Woodall'.format(x))\n    elif x==38:\n        print('{} is Woodall'.format(x))\n    elif x==39:\n        print('{} is Woodall'.format(x))\n    elif x==40:\n        print('{} is Woodall'.format(x))\n    elif x==41:\n        print('{} is Woodall'.format(x))\n    elif x==42:\n        print('{} is Woodall'.format(x))\n    elif x==43:\n        print('{} is Woodall'.format(x))\n    elif x==44:\n        print('{} is Woodall'.format(x))\n    elif x==45:\n        print('{} is Woodall'.format(x))\n    elif x==46:\n        print('{} is Woodall'.format(x))\n    elif x==47:\n        print('{} is Woodall'.format(x))\n    elif x==48:\n        print('{} is Woodall'.format(x))\n    elif x==49:\n        print('{} is Woodall'.format(x))\n    elif x==50:\n        print('{} is Woodall'.format(x))\n    elif x==51:\n        print('{} is Woodall'.format(x))\n    elif x==52:\n        print('{} is Woodall'.format(x))\n    elif x==53:\n        print('{} is Woodall'.format(x))\n    elif x==54:\n        print('{} is Woodall'.format(x))\n    elif x==55:\n        print('{} is Woodall'.format(x))\n    elif x==56:\n        print('{} is Woodall'.format(x))\n    elif x==57:\n        print('{} is Woodall'.format(x))\n    elif x==58:\n        print('{} is Woodall'.format(x))\n    elif x==59:\n        print('{} is Woodall'.format(x))\n    elif x==60:\n        print('{} is Woodall'.format(x))\n    elif x==61:\n        print('{} is Woodall'.format(x))\n    elif x==62:\n        print('{} is Woodall'.format(x))\n    elif x==63:\n        print('{} is Woodall'.format(x))\n    elif x==64:\n        print('{} is Woodall'.format(x))\n    elif x==65:\n        print('{} is Woodall'.format(x))\n    elif x==66:\n        print('{} is Woodall'.format(x))\n    elif x==67:\n        print('{} is Woodall'.format(x))\n    elif x==68:\n        print('{} is Woodall'.format(x))\n    elif x==69:\n        print('{} is Woodall'.format(x))\n    elif x==70:\n        print('{} is Woodall'.format(x))\n    elif x==71:\n        print('{} is Woodall'.format(x))\n    elif x==72:\n        print('{} is Woodall'.format(x))\n    elif x==73:\n        print('{} is Woodall'.format(x))\n    elif x==74:\n        print('{} is Woodall'.format(x))\n    elif x==75:\n        print('{} is Woodall'.format(x))\n    elif x==76:\n        print('{} is Woodall'.format(x))\n    elif x==77:\n        print('{} is Woodall'.format(x))\n    elif x==78:\n        print('{} is Woodall'.format(x))\n    elif x==79:\n        print('{} is Woodall'.format(x))\n    elif x==80:\n        print('{} is Woodall'.format(x))\n    elif x==81:\n        print('{} is Woodall'.format(x))\n    elif x==82:\n        print('{} is Woodall'.format(x))\n    elif x==83:\n        print('{} is Woodall'.format(x))\n    elif x==84:\n        print('{} is Woodall'.format(x))\n    elif x==85:\n        print('{} is Woodall'.format(x))\n    elif x==86:\n        print('{} is Woodall'.format(x))\n    elif x==87:\n        print('{} is Woodall'.format(x))\n    elif x==88:\n        print('{} is Woodall'.format(x))\n    elif x==89:\n        print('{} is Woodall'.format(x))\n    elif x==90:\n        print('{} is Woodall'.format(x))\n    elif x==91:\n        print('{} is Woodall'.format(x))\n    elif x==92:\n        print('"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x >= 900) & (x <= 999):\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # base case\n    if (x <= 7):\n        return True\n    \n    # recursive case\n    if (x % 2 == 0 or x % 3 == 0 or x % 5 == 0 or x % 7 == 0):\n        return False\n    \n    # every prime number\n    if (is_prime(x)):\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 2 or x > 100: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 2 == 0 or x % 3 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 4 == 0 or x % 5 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 6 == 0 or x % 7 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 8 == 0 or x % 9 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 10 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 11 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 12 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 13 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 14 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 15 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 16 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 17 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 18 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 19 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 20 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 21 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 22 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 23 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 24 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 25 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 26 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 27 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 28 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 29 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 30 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 31 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 32 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 33 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 34 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 35 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 36 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 37 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 38 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 39 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 40 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 41 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 42 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 43 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 44 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 45 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 46 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 47 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 48 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 49 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 50 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 51 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 52 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 53 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 54 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 55 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 56 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 57 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 58 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 59 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 60 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 61 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 62 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 63 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 64 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 65 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 66 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 67 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 68 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 69 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 70 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 71 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 72 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 73 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 74 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 75 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 76 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 77 == 0: \n        print(\"The number is not a woodball number.\") \n        return\n    if x % 78 == 0: \n        print(\"The number i"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        remainder = num % 10\n        rev_num = rev_num * 10 + remainder\n        num = num // 10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s=str(num)\n    r=s[::-1]\n    if int(r)==num-1:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_rev = 0\n    while num!= 0:\n        num_rev = num_rev * 10 + num % 10\n        num = num // 10\n    if num == 0:\n        return num_rev\n    else:\n        return -1\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev_num = num[::-1]\n    if int(num) == int(rev_num) * 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    res = 0\n    while num >= 1:\n        tmp = num % 10\n        res = res * 10 + tmp\n        num = num // 10\n    return res\n    # your code here\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while(num>0):\n        rev = rev*10 + num%10\n        num = num//10\n    return rev\n    \n    \n    \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        rev = (rev*10)+num%10\n        num = num//10\n    return (rev)\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n    if num < 0:\n        return -(num-1)\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if num == rev:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        temp = num % 10\n        rev = (rev*10) + temp\n        num = num//10\n    return rev\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                num = arr[i]*100 + arr[j]*10 + arr[k]\n                if num > max_num:\n                    max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = 0\n    for ele in arr :\n        largest_num = max(largest_num,ele)\n    return largest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # using max function\n    return max(arr)\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # using max function\n    return max(arr)"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max = -1\n    arr = list(arr)\n    \n    for i in range(len(arr)):\n        max = max if max >= arr[i] else arr[i]\n    \n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = 0\n    for i in range(1, 10) :\n        for j in range(2, 10) :\n            for k in range(3, 10) :\n                # print(i, j, k)\n                temp_num = i * j * k\n                if temp_num > largest_num :\n                    largest_num = temp_num\n                # print(largest_num)\n    return largest_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    print(\"Input List : \", arr)\n    max_num = -1\n    n = len(arr)\n    for i in range(1, n) :\n        arr2 = arr[0:i]\n        for j in range(i+1, n+1) :\n            arr3 = arr2 + arr[i:j]\n            arr3 = list(map(int, arr3))\n            print(\"Input List 2 : \", arr3)\n            if arr3 == sorted(arr3):\n                if max_num < arr3[-1] :\n                    max_num = arr3[-1]\n    print(\"Largest Number is :\", max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return int(str(arr[-1])+str(arr[-2])+str(arr[-3])+str(arr[-4]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max = -1\n    for i in range(0, len(arr)):\n        if arr[i] > Max :\n            Max = arr[i]\n    return Max\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with th"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_b(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_b(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_c(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_c(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_d(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_d(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_e(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_e(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_f(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_f(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_g(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_g(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_h(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_h(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_i(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_i(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_j(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_j(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Num_k(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] < arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Largest_Num_k(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] > arr[i+1] :\n            break\n    return arr[i] + arr[i+1]\n    \ndef find_Max_Nu"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max_num = 0\n    for num in arr : \n        if num > max_num : \n            max_num = num\n        \n    return max_num\n    \ndef find_Max_Num_using_sort(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits using sort and remove duplicates.\n    '''\n    \n    sorted_arr = sorted(arr)\n    max_num = sorted_arr[-1]\n    \n    return max_num\n    \ndef find_Max_Num_using_index_array(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits using index array.\n    '''\n    \n    max_num = 0\n    index = 0\n    for num in arr : \n        if num > max_num : \n            max_num = num\n            index = index\n        \n    return max_num\n    \ndef find_Max_Num_using_index_array_3_ways(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits using index array.\n    '''\n    \n    max_num = 0\n    index = 0\n    for num in arr : \n        if num > max_num : \n            max_num = num\n            index = index\n            \n    return max_num\n    \ndef test_function(test_case) : \n    arr = test_case[0]\n    solution = test_case[1]\n    \n    output = find_Max_Num_using_index_array(arr)\n    if output == solution :\n        print(\"Pass!\")\n    else :\n        print(\"Fail!\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n    Write a python function to check whether the given number is divisible by the given divisor or not.\n    '''\n    if num%divisor == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    \n        \ndef isDivisibleBy(num, divisor):\n    '''\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\ndef sum_Digits(num):\n    '''\n    Write a python function that takes a number as an input and adds all the digits in the number.\n    '''\n    sum = 0\n    while num>0:\n        sum = sum + num%10\n        num = num//10\n    return sum\ndef is_palindrome(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    rev_num = 0\n    while num>0:\n        rev_num = rev_num * 10 + num%10\n        num = num//10\n    return rev_num == num\ndef is_prime(num):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if num==1:\n        return False\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    else:\n        return True\ndef print_primes(n):\n    '''\n    Write a python function to print all the prime numbers upto a specified number.\n    '''\n    lst = []\n    if n<=1:\n        return lst\n    for i in range(2,n+1):\n        if is_prime(i):\n            lst.append(i)\n    return lst\ndef is_in_list(arr,val):\n    '''\n    Write a python function to check whether the given number is in the given list or not.\n    '''\n    if val in arr:\n        return True\n    else:\n        return False\ndef is_power_of_two(n):\n    '''\n    Write a python function to check whether the given number is power of two or not.\n    '''\n    if n==1 or n==0:\n        return False\n    if n&(n-1)==0:\n        return True\n    else:\n        return False\ndef max_of_three(x,y,z):\n    '''\n    Write a python function to find the maximum of the three numbers.\n    '''\n    if x>y and x>z:\n        return x\n    elif y>x and y>z:\n        return y\n    else:\n        return z\ndef swap_two_characters(str1,char1,char2):\n    '''\n    Write a python function to swap the two characters at the given index in a string.\n    '''\n    str1 = str1[:char1] + str1[char1+1:] + str1[char1] + str1[char1+1:]\n    return str1\ndef swap_first_and_last_characters(str1):\n    '''\n    Write a python function to swap the first and last characters in a string.\n    '''\n    str1 = str1[1:] + str1[0]\n    return str1\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef is_palindrome_recursive(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using recursive method.\n    '''\n    if num<0:\n        return False\n    elif num==0:\n        return True\n    else:\n        return num==num[::-1]\ndef recursion_sum(num,sum=0):\n    '''\n    Write a python function to find the sum of the digits in a number using recursion.\n    '''\n    if num==0:\n        return sum\n    else:\n        return num%10 + recursion_sum(num//10,sum)\ndef is_palindrome_iterative(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using iterative method.\n    '''\n    rev_num = 0\n    while num>0:\n        rev_num = rev_num * 10 + num%10\n        num = num//10\n    return rev_num == num\ndef is_palindrome_iterative_2(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using iterative method.\n    '''\n    rev_num = 0\n    while num>0:\n        rev_num = rev_num * 10 + num%10\n        num = num//10\n    if num==rev_num:\n        return True\n    else:\n        return False\ndef prime_factors(num):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    lst = []\n    if num<0:\n        return lst\n    while num>0:\n        for i in range(2,num+1):\n            if num%i==0:\n                lst.append(i)\n                num = num//i\n                break\n    return lst\ndef is_palindrome_recursive_3(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using recursive method.\n    '''\n    if num<0:\n        return False\n    elif num==0:\n        return True\n    else:\n        return num==num[::-1]\ndef remove_empty_strings(lst):\n    '''\n    Write a python function to remove the empty strings from a given list.\n    '''\n    lst = list(filter(lambda x: x!=\"\",lst))\n    return lst\ndef find_even_odd_slices(lst):\n    '''\n    Write a python function to find the number of even and odd slices in a list.\n    '''\n    even_cnt = 0\n    odd_cnt = 0\n    for i in range(0,len(lst)):\n        if i%2==0:\n            even_cnt += 1\n        else:\n            odd_cnt += 1\n    return even_cnt, odd_cnt\ndef is_palindrome_recursive_4(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using recursive method.\n    '''\n    if num<0:\n        return False\n    elif num==0:\n        return True\n    else:\n        return num==num[::-1]\ndef is_palindrome_recursive_5(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using recursive method.\n    '''\n    if num<0:\n        return False\n    elif num==0:\n        return True\n    else:\n        return num==num[::-1]\ndef is_palindrome_recursive_6(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using recursive method.\n    '''\n    if num<0:\n        return False\n    elif num==0:\n        return True\n    else:\n        return num==num[::-1]\ndef is_palindrome_recursive_7(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using recursive method.\n    '''\n    if num<0:\n        return False\n    elif num==0:\n        return True\n    else:\n        return num==num[::-1]\ndef is_palindrome_iterative_3(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using iterative method.\n    '''\n    rev_num = 0\n    while num>0:\n        rev_num = rev_num * 10 + num%10\n        num = num//10\n    if num==rev_num:\n        return True\n    else:\n        return False\ndef is_palindrome_recursive_8(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not using recursive method.\n    '''\n    if num<0:\n        return False\n    elif num==0:\n        return True\n    else:\n        return num==num[::-1]\ndef is_palindrome_recursive_9"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    print(x, \" and \", y, \" are opposite signs \", x - y, \" is \", x - y < 0)\n    print(x, \" and \", y, \" are opposite signs \", y - x, \" is \", y - x < 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Getting two inputs from the user\n    # Validating if the values are integer or not\n    # Calculating the negative value\n    # If negative values then return true\n    # else return false\n    if int(x)>int(y) and int(x)<0 and int(y)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        print(\"Both are positive\")\n    elif x < 0 and y < 0:\n        print(\"Both are negative\")\n    elif x < 0 and y > 0:\n        print(\"First Number is negative, Second is positive\")\n    elif x > 0 and y < 0:\n        print(\"First Number is positive, Second is negative\")\n    else:\n        print(\"Both are equal\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x*y < 0) or (y*x < 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0 or x == 0 and y == 0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # s1 = x * (-1) + y * (-1)\n    # print(s1)\n    # s2 = y * (-1) + x * (-1)\n    # print(s2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    i = 1\n    octagonal = 1\n    while i <= n:\n        octagonal = i*((octagonal*10)+1)//10\n        i += 1\n    return octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = 0\n    while x < n:\n        x += 1\n        y = 1\n        x = x * y\n    return x\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (n+1) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(pow(1 + 0.25 * n, 2))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*((n+1)*2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    base = 1\n    n_octagonal = 0\n    for i in range(1, n+1):\n        n_octagonal = base + (base * 8)\n        if i % 2 == 1:\n            n_octagonal = base * base * base\n        base = n_octagonal\n    return n_octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num_digits = int(math.log10(n))\n    \n    if (n == 1):\n        return 1\n    else:\n        n -= 1\n        ans = 1\n        while (n):\n            ans += 3 * (10 ** (num_digits - 1))\n            n -= 1\n        return ans\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        x = 0\n        y = 1\n        for i in range(1,n):\n            x = x + 2 * y - 1\n            y = 2 * x + 1\n        return x + 1\n        \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 1: return n\n    # Define the base case\n    for i in range(2, n+1):\n        # Define the new value\n        new_value = i**2 + i\n        # If the new value is smaller than the original one, replace\n        if new_value <= n:\n            continue\n        # If it is greater than the original value, decrease n\n        else: n = n - 1\n    return n\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0, len(s)):\n        for j in range(i+1, len(s)):\n            if(count_Digits(s[i:j+1]) == len(s[i:j+1])):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    if length == 0:\n        return 0\n    result = 0\n    for i in range(length):\n        for j in range(length):\n            if i==j:\n                continue\n            else:\n                sum_of_digits = 0\n                substring = s[i:j+1]\n                for ch in substring:\n                    sum_of_digits += int(ch)\n                if sum_of_digits == len(substring):\n                    result += 1\n    return result\n    \nif __name__ == '__main__':\n    \n    # Declare a String\n    s = \"abc\"\n    print(count_Substrings(s))\n    \n    # count_Substrings\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # print(\"\\n### count_Substrings ###\")\n    # s = \"abc\"\n    # print(count_Substrings(s))\n    # s = \"asdfadfadfadf\"\n    # print(count_Substrings(s))\n    # s = \"hieeelalaooo\"\n    # print(count_Substrings(s))\n    # s = \"hihellohehehehehehehehehieehellohehehehehehieehellohehehehehehehehehehehieehellohehehehieehellohehehehehehehehehehehehehehehehieehellohehehehehehehehehehehehehehieehellohehehehehehehehehehehehehehieehellohehehehehehehehehehehehehehehehieehelloheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheheh"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #brute force, very slow\n    #s = 'abbccddeeff'\n    if len(s) == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            count +=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            string = s[i:j+1]\n            count += len(string)\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] in s[i+1:]:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(1,len(s)):\n        if s[0:i]==s[i:]:\n            count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # s = \"0011\"\n    # print(\"number of substrings with sum as length of substring:\",count_sub_strings(s))\n    # if __name__ == '__main__':\n    #     s = input(\"Enter string: \")\n    #     count_Substrings(s)\n    count = 0\n    for i in range(1,len(s)):\n        count += (1+count_Substrings(s[i:]))\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        j = i+1\n        while j<len(s) and s[i]!= s[j]:\n            j += 1\n        if j==len(s):\n            continue\n        else:\n            res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if sum_of_digits(s[i:j]) == len(s[i:j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substring_count = 0\n    for i in range(len(s)):\n        substring_count = substring_count + int(s[i:i+1])\n    return substring_count\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # your code here\n    x = sorted(xs)\n    smallest_num = x[0]\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for i in xs:\n        if smallest is None:\n            smallest = i\n        else:\n            if i < smallest:\n                smallest = i\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs_len = len(xs)\n    for i in range(xs_len):\n        if i == 0:\n            # print(xs[i])\n            smallest = xs[i]\n        else:\n            # print(xs[i])\n            if xs[i] < smallest:\n                # print(xs[i])\n                smallest = xs[i]\n    print(smallest)\n    # return smallest\n    \n    # smallest = xs[0]\n    # for i in range(1, len(xs)):\n    #     if xs[i] < smallest:\n    #         # print(xs[i])\n    #         smallest = xs[i]\n    #     # else:\n    #         # print(smallest)\n    # print(smallest)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for num in xs:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) > 0:\n        if len(test_list) == 1:\n            return None\n        else:\n            return max([abs(test_list[i] - test_list[i + 1]) for i in range(len(test_list) - 1)])\n    return None\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            result = max(result, abs(test_list[i] - test_list[j]))\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    temp_list = []\n    temp_list2 = []\n    for i in test_list:\n        if i not in temp_list:\n            temp_list.append(i)\n    for i in range(len(temp_list)):\n        for j in range(i + 1, len(temp_list)):\n            temp_list2.append(abs(temp_list[i] - temp_list[j]))\n    print(max(temp_list2))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return None\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                return test_list[j] - test_list[i]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for index in range(len(test_list)-1):\n        max_diff = max(max_diff, abs(test_list[index+1] - test_list[index]))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(a - b) for a, b in itertools.combinations(test_list, 2))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n    print(test_list)\n    if len(test_list) == 1:\n        print(test_list[0])\n        return test_list[0]\n    else:\n        print(test_list)\n        print(test_list[0], test_list[1])\n        diff_1 = abs(test_list[0] - test_list[1])\n        diff_2 = abs(test_list[1] - test_list[0])\n        if diff_1 > diff_2:\n            return test_list[0]\n        else:\n            return test_list[1]\n        #return abs(test_list[0] - test_list[1])\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #Initialize variables\n    max_diff = None\n    max_diff_pair = None\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[i]-test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -2**32\n    # test_list = tuple(test_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(0,len(subjectmarks)):\n        temp = subjectmarks[i]\n        for j in range(0,len(subjectmarks)):\n            if(temp[1] < subjectmarks[j][1]):\n                temp2 = subjectmarks[j]\n                subjectmarks[j] = subjectmarks[i]\n                subjectmarks[i] = temp2\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(\"Input :\", subjectmarks)\n    subjectmarks.sort(key=lambda x: x[1])\n    print(\"Output :\", subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l = []\n    for i in subjectmarks:\n        l.append((i[0], i[1]))\n    l.sort(key=lambda tup: tup[1])\n    for j in l:\n        print(j)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    listofTuples = sorted(subjectmarks, key=lambda tup: tup[1])\n    return listofTuples\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort and return the result\n    return sorted(subjectmarks, key=lambda tup: tup[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    res = []\n    for i in subjectmarks:\n        res.append((i[0], i[1]))\n    res.sort(key=lambda i:i[1])\n    print(res)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort function\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    \n    if len(data_list) == 1:\n        return data_list[0]\n    \n    total = 0\n    for i in range(0, len(data_list)):\n        if isinstance(data_list[i], list):\n            total += recursive_list_sum(data_list[i])\n        else:\n            total += data_list[i]\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) is list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    from functools import reduce\n    return reduce(lambda x, y: x+y, data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list)!= list:\n        return data_list\n    return sum([recursive_list_sum(i) for i in data_list])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    elif type(data_list) is not list:\n        return data_list\n    else:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i]>0:\n            count = count+1\n    print(\"Number of Positive Numbers in List are :\",count)\npos_count([1,-1,2,0,3,-5])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>=0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    print(pos_count)\npos_count([1,2,3,4,5,6,7,8,9,10,11,12,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11, -12, -13, -14])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # ans = 0\n    # for i in list:\n    #     if i > 0:\n    #         ans = ans + 1\n    # return ans\n    # return len([x for x in list if x > 0])\n    # return sum([x > 0 for x in list])\n    return len([x for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    list_count = 0\n    for i in range(len(list)):\n        if list[i] >= 0:\n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    x = 0\n    for i in list:\n        if i > 0:\n            x = x + 1\n    return x\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = []\n    for i in range(1, n+1):\n        bells.append(i)\n    n_ways = 0\n    while len(bells) > 1:\n        num1 = bells.pop()\n        num2 = bells.pop()\n        bells.append(num1+num2)\n        n_ways += 1\n    return n_ways\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_num(n):\n        if n <= 1:\n            return 1\n        if n <= 3:\n            return n-1\n        return bell_num(n-1) + bell_num(n-3)\n    return bell_num(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    dp = {}\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    num_ways = 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def bell_partition_helper(k, n, dp):\n        \n        if k == n:\n            return 1\n        \n        if dp[k][n]!= -1:\n            return dp[k][n]\n        \n        count = 0\n        for i in range(k, n+1):\n            count += bell_partition_helper(k, i-1, dp) * bell_partition_helper(i, n, dp)\n            \n        dp[k][n] = count\n        return count\n        \n    return bell_partition_helper(1, n, dp)\n    \nbell_number(3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition_helper(n, i):\n        if n <= 2: return 1\n        if i > n: return 0\n        ways = 0\n        if n%i == 0: ways += partition_helper(n-i, i)\n        ways += partition_helper(n, i+1)\n        return ways\n    return partition_helper(n, 1)\n    \nprint(bell_number(3))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def _bell_number(n):\n        if n == 1: return 1\n        if n == 2: return 2\n        if n == 3: return 4\n        if n == 4: return 7\n        count = 0\n        for i in range(1, n):\n            count += _bell_number(i) * _bell_number(n-i)\n        return count\n    \n    return _bell_number(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, memo={}):\n        '''\n        The Bell number for n is the sum of all numbers between 0 and n - 1,\n        e.g. for n = 2, 0 + 1 = 2, so we have 2 ways to partition the set,\n        i.e. {0, 1, 2} and {0, 1, 3}\n        '''\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n > 2:\n            memo[n] = partition(n - 1) + partition(n - 2)\n        return memo[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    '''\n    Monotonic means that it contains the following condition:\n    i)    It is empty or\n    ii)    It contains a single element only.\n    iii)    The elements of the array are in the increasing order.\n    iv)    The elements of the array are in the decreasing order.\n    '''\n    n = len(A)\n    if n == 0:\n        return True\n    else:\n        if n == 1:\n            return True\n        else:\n            if A[0] <= A[1]:\n                for i in range(2,n):\n                    if A[i] < A[i-1]:\n                        return False\n                return True\n            elif A[0] >= A[1]:\n                for i in range(2,n):\n                    if A[i] > A[i-1]:\n                        return False\n                return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A==[]:\n        return True\n    for i in range(0,len(A)-1):\n        if A[i]<A[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return True\n    \n    if A[0] > A[1]:\n        return False\n    \n    for i in range(1, len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n    \nif __name__ == \"__main__\":\n    A = []\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [-1, -2, 1, 2]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [-1, 2]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [-1, 2, -3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [-1, 2, -3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [-2, -3, 4, 5]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 1, 2, 3, 4, 5]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 1, 2, 3, 4, 5]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"It is an unsorted array\")\n    else:\n        print(\"It is a sorted array\")\n    \n    A = [2, 4, 1, 2, 3, 4]\n    if is_Monotonic(A):\n        print(\"I"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    monotonic_order = True\n    if len(A)<2:\n        return False\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            monotonic_order = False\n            is_monotonic = False\n    return monotonic_order and is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    count = 0\n    if len(A) <= 1:\n        return True\n    else:\n        if A[0] <= A[1] and A[-1] <= A[-2]:\n            for i in range(1,len(A)-1):\n                if A[i-1] >= A[i] and A[i+1] >= A[i]:\n                    count = count + 1\n                    if count > 1:\n                        return False\n                    else:\n                        continue\n                else:\n                    return False\n        else:\n            return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if(len(A) < 2): \n        return True\n    for i in range(len(A)-1): \n        if(A[i] <= A[i+1]): \n            continue\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    is_increasing = True\n    is_decreasing = True\n    is_equal = True\n    i = 1\n    while i < n and is_increasing and is_decreasing:\n        if A[i] < A[i-1]:\n            is_increasing = False\n        if A[i] > A[i-1]:\n            is_decreasing = False\n        if A[i] == A[i-1]:\n            is_equal = False\n        i+=1\n    return is_increasing or is_decreasing or is_equal\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A==[]:\n        return 0\n    else:\n        \n        \n        if A[0]>A[-1]:\n            for i in range(0,len(A)):\n                if A[i]<A[i+1]:\n                    return 0\n            return 1\n        else:\n            return 0\n        \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A = sorted(A)\n    if(A == sorted(A)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if it is increasing then return true else return false\n    # if it is decreasing then return false else return true\n    # if it is neither increasing or decreasing then return false\n    \n    # if it is decreasing then return False else return True\n    # if it is increasing then return True else return False\n    \n    i = 0\n    j = len(A) - 1\n    \n    while i <= j:\n        if A[i] < A[j]:\n            return True\n        elif A[i] > A[j]:\n            return False\n        else:\n            return False\n        i += 1\n        j -= 1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    m = len(s)\n    i = 0\n    j = 0\n    while (i < n and j < m):\n        if l[i] == s[j]:\n            j += 1\n        i += 1\n    if j == m:\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_list = True\n    if (len(l) == len(s)):\n        for i in range(len(l)):\n            if l[i]!= s[i]:\n                sub_list = False\n                break\n    return sub_list\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s = sorted(s)\n    l = sorted(l)\n    return (s == l)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(0, len(l)-len(s)+1):\n        for j in range(len(s)):\n            if l[i+j]!= s[j]:\n                return False\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif len(s) == 1:\n        return l == s\n    else:\n        return any(is_sublist(x, s[1:]) for x in l)\n    \n    # time O(n) | space O(n)\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    flag = False\n    for i in range(0, len(l)):\n        if (l[i] == s):\n            flag = True\n    return flag\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    sub_len = len(s)\n    sub_index = 0\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return False\n    else:\n        x = 0\n        for i in s:\n            if x == len(l):\n                return False\n            if i == l[x]:\n                x = x + 1\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Base case\n    if len(l) == 0:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def is_equal(Tuple):\n        return len(set(map(len,Tuple)))==1\n    \n    if len(Input)<=0:\n        return False\n    for Tuple in Input:\n        if is_equal(Tuple):\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) > 0:\n        for i in range(len(Input)-1):\n            if len(Input[i])!= len(Input[i+1]):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input[i])!= len(Input[i+1]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                print(\"tuples are not equal\")\n                return\n    print(\"tuples are equal\")\ndef find_disjoint(Input):\n    '''\n    Write a function to find the disjoint sets (the union of sets without any element in common).\n    '''\n    x={}\n    for i in range(len(Input)):\n        x[i]=set()\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                x[i].add(j)\n                x[j].add(i)\n            else:\n                x[i].add(j)\n    for i in range(len(Input)):\n        print(i,x[i])\ndef find_set(Input):\n    '''\n    Write a function to find the set of all the elements in the given set.\n    '''\n    x={}\n    for i in range(len(Input)):\n        x[i]=set()\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                x[i].add(j)\n                x[j].add(i)\n    for i in range(len(Input)):\n        print(i,x[i])\ndef union(Input):\n    '''\n    Write a function to find the union of the sets of all the given sets.\n    '''\n    x={}\n    for i in range(len(Input)):\n        x[i]=set()\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                x[i].add(j)\n                x[j].add(i)\n    for i in range(len(Input)):\n        print(i,x[i])\ndef find_connected_components(Input):\n    '''\n    Write a function to find the connected components of the given graph.\n    '''\n    def dfs(u):\n        visited[u]=True\n        for v in range(len(adj[u])):\n            if not visited[adj[u][v]]:\n                dfs(adj[u][v])\n        components[u]=True\n    n=len(Input)\n    visited=[False]*n\n    components=[False]*n\n    adj=[[] for i in range(n)]\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(Input[i])==len(Input[j]):\n                adj[i].append(j)\n                adj[j].append(i)\n    for i in range(n):\n        if not visited[i]:\n            dfs(i)\n    print(\"connected components:\")\n    for i in range(n):\n        if components[i]:\n            print(i,end=\" \")\ndef find_critical_nodes(Input):\n    '''\n    Write a function to find the critical nodes in the given graph.\n    '''\n    def dfs(u):\n        visited[u]=True\n        for v in range(len(adj[u])):\n            if not visited[adj[u][v]]:\n                dfs(adj[u][v])\n        critical[u]=True\n    n=len(Input)\n    visited=[False]*n\n    critical=[False]*n\n    adj=[[] for i in range(n)]\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(Input[i])==len(Input[j]):\n                adj[i].append(j)\n                adj[j].append(i)\n    for i in range(n):\n        if not visited[i]:\n            dfs(i)\n    print(\"critical nodes:\")\n    for i in range(n):\n        if critical[i]:\n            print(i,end=\" \")\ndef find_max_adjacency_list(Input):\n    '''\n    Write a function to find the maximum adjacency list of the given graph.\n    '''\n    n=len(Input)\n    max_adj={}\n    for i in range(n):\n        max_adj[i]=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(Input[i])==len(Input[j]):\n                if max_adj[i] < len(Input[j]):\n                    max_adj[i]=len(Input[j])\n                    max_adj[j]=len(Input[j])\n    print(\"maximum adjacency list:\")\n    for i in range(n):\n        print(i,max_adj[i],end=\" \")\ndef find_degree_distribution(Input):\n    '''\n    Write a function to find the degree distribution of the given graph.\n    '''\n    n=len(Input)\n    degree={}\n    for i in range(n):\n        degree[i]=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(Input[i])==len(Input[j]):\n                degree[i]+=1\n                degree[j]+=1\n    print(\"degree distribution:\")\n    for i in range(n):\n        print(i,degree[i],end=\" \")\ndef find_degree_distribution_1(Input):\n    '''\n    Write a function to find the degree distribution of the given graph.\n    '''\n    degree={}\n    for i in range(len(Input)):\n        degree[i]=0\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])==len(Input[j]):\n                degree[i]+=1\n                degree[j]+=1\n    print(\"degree distribution:\")\n    for i in range(len(Input)):\n        print(i,degree[i],end=\" \")\ndef find_edge_distribution(Input):\n    '''\n    Write a function to find the edge distribution of the given graph.\n    '''\n    n=len(Input)\n    edge_dist={}\n    for i in range(n):\n        edge_dist[i]=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(Input[i])==len(Input[j]):\n                if len(Input[j])==1 and len(Input[i])==1:\n                    continue\n                if len(Input[j])==1:\n                    edge_dist[j]+=1\n                if len(Input[i])==1:\n                    edge_dist[i]+=1\n    print(\"edge distribution:\")\n    for i in range(n):\n        print(i,edge_dist[i],end=\" \")\ndef find_edge_distribution_1(Input):\n    '''\n    Write a function to find the edge distribution of the given graph.\n    '''\n    edge_dist={}\n    for i in range(len(Input)):\n        edge_dist[i]=0\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])==len(Input[j]):\n                if len(Input[j])==1:\n                    edge_dist[j]+=1\n                if len(Input[i])==1:\n                    edge_dist[i]+=1\n    print(\"edge distribution:\")\n    for i in range(len(Input)):\n        print(i,edge_dist[i],end=\" \")\ndef find_closeness_centrality(Input):\n    '''\n    Write a function to find the closeness centrality of the given graph.\n    '''\n    n=len(Input)\n    closeness={}\n    for i in range(n):\n        closeness[i]=0\n    for i in range(n):\n        for j in range(i+1,n)"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(0,len(Input)):\n        for j in range(0,len(Input[i])):\n            list1.append(Input[i][j])\n    for i in range(0,len(Input)):\n        for j in range(0,len(Input[i])):\n            list2.append(Input[i][j])\n    if list1 == list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for i in range(0,len(Input)):\n        for j in range(i+1,len(Input)):\n            if(len(Input[i])!= len(Input[j])):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return True if len(Input)==len(set(Input)) else False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(i) == len(Input) for i in Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(Input[0]) == len(Input[1]) and len(Input[2]) == len(Input[3]) and len(Input[4]) == len(Input[5])\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def eq_length_func(Input):\n        if len(Input) == len(set(Input)):\n            return True\n        else:\n            return False\n    for i in range(len(Input)):\n        if eq_length_func(Input[i]) == False:\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # find the largest element\n    largest = nums[0]\n    \n    # find the index of the largest element\n    largest_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n            largest_index = i\n    \n    # swap the largest element with the first element\n    nums[0], nums[largest_index] = nums[largest_index], nums[0]\n    \n    # sort the left sub-array\n    left_index = 0\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i-1]:\n            left_index = i - 1\n            break\n    while left_index > 0:\n        left_swap = 0\n        for j in range(left_index + 1, len(nums)):\n            if nums[j] < nums[left_index]:\n                nums[left_index], nums[j] = nums[j], nums[left_index]\n                left_swap += 1\n        left_index -= left_swap\n    \n    # sort the right sub-array\n    right_index = len(nums) - 1\n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] > nums[i+1]:\n            right_index = i\n            break\n    while right_index < len(nums) - 1:\n        right_swap = 0\n        for j in range(right_index + 1, len(nums)):\n            if nums[j] > nums[right_index]:\n                nums[right_index], nums[j] = nums[j], nums[right_index]\n                right_swap += 1\n        right_index += right_swap\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    \n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(1, n):\n            if nums[i - 1] > nums[i]:\n                swapped = True\n                nums[i - 1], nums[i] = nums[i], nums[i - 1]\n                \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if nums[i] > nums[j]:\n                nums[i],nums[j] = nums[j],nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length > 1:\n        for i in range(length-1):\n            for j in range(i+1,length):\n                if nums[i] > nums[j]:\n                    temp = nums[i]\n                    nums[i] = nums[j]\n                    nums[j] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        left_list = []\n        middle_list = []\n        right_list = []\n        for i in range(1, n):\n            if nums[i] < pivot:\n                left_list.append(nums[i])\n            elif nums[i] > pivot:\n                right_list.append(nums[i])\n            else:\n                middle_list.append(nums[i])\n        return comb_sort(left_list) + middle_list + comb_sort(right_list)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    else:\n        pivot = nums[0]\n        less = []\n        more = []\n        same = []\n        for i in nums:\n            if i < pivot:\n                less.append(i)\n            elif i > pivot:\n                more.append(i)\n            else:\n                same.append(i)\n        return comb_sort(less) + same + comb_sort(more)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    k = 1\n    while k < n:\n        i = 0\n        while i < n-k:\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n            else:\n                i += 1\n        k += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    for j in range(len(nums)):\n        swap = False\n        for i in range(len(nums) - 1 - j):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swap = True\n        if swap == False:\n            break\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    pivot = nums[0]\n    less = [i for i in nums[1:] if i <= pivot]\n    greater = [i for i in nums[1:] if i > pivot]\n    \n    return comb_sort(less) + [pivot] + comb_sort(greater)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    result = 0\n    if n > 0 :\n        while n > 0 :\n            result += 1\n            n -= result**2\n        if n == 0 :\n            print(f'{n} is a perfect square')\n        else :\n            print(f'{n} is not a perfect square')\n    else :\n        print(f'{n} is not a perfect square')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    return int(math.sqrt(n))**2 == n\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (int(n**0.5) ** 2 == n):\n        print('Yes, Square can be formed')\n    else:\n        print('No, Square cannot be formed')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    return abs(n-(n**0.5))==1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    ans = 0\n    for i in range(1, n+1): \n        x = i**2\n        y = n-i**2\n        if x == y:\n            ans = 1\n    if ans == 0:\n        print(\"%d can be represented as the difference of two squares\" %(n))\n    else:\n        print(\"%d cannot be represented as the difference of two squares\" %(n))\ndif_Square(6"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    ans=0\n    for i in range(1,n):\n        if n-i**2==0:\n            ans=1\n            break\n    if ans==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i * i <= n:\n        i += 1\n    j = i - 1\n    while j * j <= n:\n        j += 1\n    if i * i + j * j == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    print(f\"{n} can be represented as {dif_square(n)}\")\n    \ndef dif_square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    return pow(n, 2) == n and n > 1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n < 0 or (((abs(n) % 2)!= 0) and ((abs(n) % 4)!= 0))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def dif_square(n):\n        for i in range(n+1):\n            if i*i==n:\n                return True\n        return False\n    if dif_square(n):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    for color in colors:\n        if i == len(patterns):\n            return False\n        if color!= patterns[i]:\n            return False\n        i = i + 1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(patterns)):\n        for j in range(len(patterns[i])):\n            if patterns[i][j]!= colors[i][j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if not patterns[i] in colors:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0 or len(patterns) == 0:\n        return False\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    curr = 1\n    prev = -1\n    for i in range(len(colors)):\n        if prev!= -1 and prev!= colors[i]:\n            return False\n        prev = colors[i]\n        curr = colors[i]\n        if patterns[i] == 1:\n            curr += 1\n        else:\n            curr -= 1\n    return True\n    \ndef is_optimalcolor(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    curr = 1\n    prev = -1\n    for i in range(len(colors)):\n        if prev!= -1 and prev!= colors[i]:\n            return False\n        prev = colors[i]\n        curr = colors[i]\n        if patterns[i] == 1:\n            curr += 1\n        else:\n            curr -= 1\n    return True\n    \ndef is_odd_seq(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) % 2 == 1:\n        return True\n    return False\n    \ndef is_odd_patterns(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns[0] == 1:\n        return True\n    return False\n    \ndef is_allodd(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(1, len(patterns)):\n        if patterns[i] == 1 and patterns[i - 1]!= 1:\n            return False\n    return True\n    \ndef is_allodd_patterns(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns[0] == 1:\n        return True\n    return False\n    \ndef is_allodd_seq(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) % 2 == 1:\n        return True\n    return False\n    \ndef color_pairs(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_allodd(colors):\n        return True\n    return False\n    \ndef color_pairs_patterns(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_allodd_patterns(patterns):\n        return True\n    return False\n    \ndef is_pairs(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_odd_seq(patterns):\n        return True\n    return False\n    \ndef is_pairs_patterns(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_odd_patterns(patterns):\n        return True\n    return False\n    \ndef is_pairs_colors(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if color_pairs(colors):\n        return True\n    return False\n    \ndef is_pairs_patterns_colors(patterns, colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if color_pairs_patterns(patterns) and color_pairs(colors):\n        return True\n    return False\n    \ndef is_all_pairs(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_pairs(patterns):\n        return True\n    return False\n    \ndef is_all_pairs_patterns(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_pairs_patterns(patterns):\n        return True\n    return False\n    \ndef is_all_pairs_colors(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_pairs_colors(colors):\n        return True\n    return False\n    \ndef is_all_pairs_patterns_colors(patterns, colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_pairs_patterns_colors(patterns, colors):\n        return True\n    return False\n    \ndef is_all_odd(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_odd_seq(patterns):\n        return True\n    return False\n    \ndef is_all_odd_patterns(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_odd_patterns(patterns):\n        return True\n    return False\n    \ndef is_all_odd_colors(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_odd_seq(colors):\n        return True\n    return False\n    \ndef is_all_odd_patterns_colors(patterns, colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_odd_patterns_colors(patterns, colors):\n        return True\n    return False\n    \ndef is_all_odd_colors_patterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_odd_colors_patterns(colors, patterns):\n        return True\n    return False\n    \ndef is_all_odd_patterns_colors_colors(patterns, colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_odd_patterns_colors_colors(patterns, colors):\n        return True\n    return False\n    \ndef is_all_patterns(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_all_odd_patterns(patterns) or is_all_odd_colors_patterns(patterns, colors):\n        return True\n    return False\n    \ndef is_all_patterns_colors(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_all_odd_colors(colors) or is_all_odd_colors_patterns(colors, patterns):\n        return True\n    return False\n    \ndef is_all_colors(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_all_odd_colors(colors) or is_all_odd_patterns_colors(colors, patterns):\n        return True\n    return False\n    \ndef is_all_colors_patterns(patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_all_odd_patterns_colors(patterns, colors):\n        return True\n    return False\n    \ndef is_all_colors_patterns_colors(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if is_all_odd_patterns_colors_colors(patterns, colors):\n        return True\n    return False\n    \ndef is_all_patterns_colors_colors(colors, patterns):"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color = colors[0]\n    pattern = patterns[0]\n    for i in range(1, len(colors)):\n        color = colors[i]\n        pattern = patterns[i]\n        if color!= pattern[0] and color!= '0' and pattern[0]!= '0':\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return bool(colors[-1] in patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for color, pattern in zip(colors, patterns):\n        if color!= pattern[0]:\n            return False\n        if len(pattern) > 1:\n            if pattern[1]!= color:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    start = 0\n    end = 1\n    while end < len(patterns):\n        if colors[start]!= patterns[end]:\n            return False\n        start += 1\n        end += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return True if (sorted(colors) == sorted(patterns)) else False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in test_list:\n        if len(i) == K:\n            t = tuple(i)\n            if t not in tuples:\n                tuples.append(t)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # x = [i for i in range(len(test_list))]\n    # print(x)\n    # print(list(range(len(test_list))))\n    # x = set(x)\n    # print(x)\n    # x = set(list(range(len(test_list))))\n    # print(x)\n    # return [(i, j) for i in x for j in range(len(test_list)) if test_list[j]%K == 0]\n    '''\n    alternative method\n    using set comprehenson\n    '''\n    return [(i, j) for i in range(len(test_list)) for j in range(len(test_list)) if test_list[j]%K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    all_tuples = []\n    for i in range(len(test_list)):\n        tuples = []\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                tuples.append(test_list[i][j])\n        if len(tuples) == K:\n            all_tuples.append(tuple(tuples))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        if not((test_list[i][0] % K) and (test_list[i][1] % K)):\n            res.append(test_list[i])\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    tuples = []\n    for i in test_list:\n        if all(i % k == 0 for k in K):\n            tuples.append(i)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        if (not test_list[i] % K):\n            return (test_list[i])\n    return None\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    test_list = sorted(test_list)\n    for i in range(0, len(test_list)):\n        if test_list[i][0]%K!= 0:\n            break\n        if i == 0:\n            list_to_return = [(test_list[i][0], test_list[i][1])]\n        elif test_list[i][0] % K!= 0:\n            continue\n        else:\n            list_to_return.append((test_list[i][0], test_list[i][1]))\n    return list_to_return\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple(i for i in item if i % k == 0) for item in test_list]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return tuple((i, j) for i, j in test_list if all(divisible_by_k(element, K) for element in (i, j)))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Your code here\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n    \nprint(is_Diff(11))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n = int(input())\n    if n%11 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Even(n):\n    '''\n    Write a python function to check whether a number is even or not.\n    '''\n    return n % 2 == 0\n    \n    \ndef is_Prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5 + 1), 2):\n            if n % i == 0:\n                return False\n        return True\n        \n        \ndef is_power(n, p):\n    '''\n    Write a python function to check whether a number is power of another number or not.\n    '''\n    return n ** p == 1\n    \n    \ndef is_Divisible(n, p):\n    '''\n    Write a python function to check whether a number is divisible by another number or not.\n    '''\n    return n % p == 0\n    \n    \ndef is_Palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n    \n    \ndef is_LeapYear(y):\n    '''\n    Write a python function to check whether a year is leap year or not.\n    '''\n    return y % 4 == 0 and (y % 100!= 0 or y % 400 == 0)\n    \n    \ndef is_Pangram(s):\n    '''\n    Write a python function to check whether a string is a pangram or not.\n    '''\n    return ''.join(sorted(s.lower())).count('a') == 26\n    \n    \ndef is_Palindrome_Using_Stack(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    l = list(s)\n    s = []\n    for i in range(len(l)):\n        s.append(l[i])\n    return s == s[::-1]\n    \n    \ndef is_Palindrome_Using_Recursion(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    def isPal(s, i, j):\n        if i >= j:\n            return True\n        if s[i]!= s[j]:\n            return False\n        return isPal(s, i+1, j-1)\n    return isPal(s, 0, len(s)-1)\n    \n    \ndef is_Palindrome_Using_Recursion_Using_Set(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    def isPal(s):\n        s = set(s)\n        return s == s[::-1]\n    return isPal(s)\n    \n    \ndef is_Palindrome_Using_Recursion_Using_HashSet(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    def isPal(s):\n        s = set(s)\n        return s == s[::-1]\n    return isPal(s)\n    \n    \ndef is_Palindrome_Using_DynamicProgramming(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    def isPal(s):\n        n = len(s)\n        s = [0] * n\n        for i in range(n):\n            s[i] = ord(s[i])\n        for i in range(n//2):\n            if s[i]!= s[n-i-1]:\n                return False\n        return True\n    return isPal(s)\n    \n    \ndef is_Palindrome_Using_DynamicProgramming_2(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    n = len(s)\n    s = [0] * n\n    for i in range(n):\n        s[i] = ord(s[i])\n    start = 0\n    end = n - 1\n    while start <= end:\n        if s[start]!= s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \n    \ndef is_Palindrome_Using_DynamicProgramming_3(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    n = len(s)\n    s = [0] * n\n    start = 0\n    end = n - 1\n    while start <= end:\n        s[start] = ord(s[start])\n        s[end] = ord(s[end])\n        start += 1\n        end -= 1\n    while start < n//2:\n        if s[start]!= s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \n    \ndef find_Largest(arr, n):\n    '''\n    Write a python function to find the largest element in an array.\n    '''\n    largest = -1\n    start = 0\n    end = n - 1\n    while start <= end:\n        if arr[start] > largest:\n            largest = arr[start]\n        if arr[end] < largest:\n            largest = arr[end]\n        start += 1\n        end -= 1\n    return largest\n    \n    \ndef find_Largest_Using_SelectionSort(arr, n):\n    '''\n    Write a python function to find the largest element in an array.\n    '''\n    largest = -1\n    start = 0\n    end = n - 1\n    while start <= end:\n        largest = arr[start]\n        curr = start\n        while curr < end:\n            if arr[curr] > largest:\n                largest = arr[curr]\n            curr += 1\n        start += 1\n        end -= 1\n    return largest\n    \n    \ndef find_Largest_Using_BinarySearch(arr, n):\n    '''\n    Write a python function to find the largest element in an array.\n    '''\n    if n == 1:\n        return arr[0]\n    m = n//2\n    if arr[m] > arr[m+1]:\n        return arr[m+1]\n    elif arr[m] > arr[m-1]:\n        return arr[m]\n    else:\n        return find_Largest(arr[:m], m)\n    \n    \ndef find_Largest_Using_BinarySearch_Recursive(arr, n, m):\n    '''\n    Write a python function to find the largest element in an array.\n    '''\n    if n == 1:\n        return arr[0]\n    if arr[m] > arr[m+1]:\n        return find_Largest_Using_BinarySearch_Recursive(arr, m, m+1)\n    elif arr[m] > arr[m-1]:\n        return find_Largest_Using_BinarySearch_Recursive(arr, m-1, m)\n    else:\n        return find_Largest_Using_BinarySearch_Recursive(arr, m-1, m)\n    \n    \ndef find_Largest_Using_BinarySearch_Recursive_2(arr, n, m, largest):\n    '''\n    Write a python function to find the largest element in an array.\n    '''\n    if n == 1:\n        return largest\n    if arr[m] > arr[m+1]:\n        largest = find_Largest_Using_BinarySearch_Recursive_2(arr, m, m+1, largest)\n    elif arr[m] > arr[m-1]:\n        largest = find_Largest_Using_BinarySearch_Recursive_2(arr, m-1, m, largest)\n    else:\n        largest = find_Largest_Using_BinarySearch_Recursive_2(arr, m-1, m, largest)\n    return largest\n    \n    \ndef find_Largest_Using_BinarySearch_Recursive_3(ar"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0):\n        return True\n    else:\n        return False\ndef is_DivisibleByMultipleOf3(n):\n    '''\n    Write a python function to find whether a number is divisible by 3.\n    '''\n    if (n%3 == 0):\n        return True\n    else:\n        return False\ndef is_DivisibleByMultipleOf5(n):\n    '''\n    Write a python function to find whether a number is divisible by 5.\n    '''\n    if (n%5 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print('The word is even')\n    else:\n        print('The word is odd')\n        \nword_len('abc')\nword_len('abcd')\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The word is even\"\n    else:\n        return \"The word is odd\"\nword_len(\"hello\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    return l%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\nprint(word_len('python'))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # if s is not a string return 0\n    if type(s) is not str:\n        return 0\n    # split s in words\n    words = s.split(' ')\n    # iterate over each word and print length of the word\n    for word in words:\n        print(len(word))\n    # return 1 if length of words are odd else 0\n    return 1 if len(words)%2 == 1 else 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print(\"The length is even\")\n    else:\n        print(\"The length is odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\nprint(word_len('abcd'))\nprint(word_len('welcome'))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum = sum + (i**3)\n    return sum\n    \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    x = 0\n    while x < n:\n        x += 1\n        y = n * (3*x - 1)\n        z = n * (2*x - 1)\n        if z % 2 == 1:\n            if y % 2 == 1:\n                if z % 3 == 1:\n                    return y\n            else:\n                if y % 3 == 1:\n                    return y\n        else:\n            if y % 2 == 1:\n                if z % 3 == 1:\n                    return y\n            else:\n                if y % 3 == 1:\n                    return y\n    return None\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 19\n    elif n == 8:\n        return 22\n    elif n == 9:\n        return 25\n    elif n == 10:\n        return 28\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 34\n    elif n == 13:\n        return 37\n    elif n == 14:\n        return 40\n    elif n == 15:\n        return 43\n    elif n == 16:\n        return 46\n    elif n == 17:\n        return 49\n    elif n == 18:\n        return 52\n    elif n == 19:\n        return 55\n    elif n == 20:\n        return 58\n    elif n == 21:\n        return 61\n    elif n == 22:\n        return 64\n    elif n == 23:\n        return 67\n    elif n == 24:\n        return 70\n    elif n == 25:\n        return 73\n    elif n == 26:\n        return 76\n    elif n == 27:\n        return 79\n    elif n == 28:\n        return 82\n    elif n == 29:\n        return 85\n    elif n == 30:\n        return 88\n    elif n == 31:\n        return 91\n    elif n == 32:\n        return 94\n    elif n == 33:\n        return 97\n    elif n == 34:\n        return 100\n    elif n == 35:\n        return 103\n    elif n == 36:\n        return 106\n    elif n == 37:\n        return 109\n    elif n == 38:\n        return 112\n    elif n == 39:\n        return 115\n    elif n == 40:\n        return 118\n    elif n == 41:\n        return 121\n    elif n == 42:\n        return 124\n    elif n == 43:\n        return 127\n    elif n == 44:\n        return 130\n    elif n == 45:\n        return 133\n    elif n == 46:\n        return 136\n    elif n == 47:\n        return 139\n    elif n == 48:\n        return 142\n    elif n == 49:\n        return 145\n    elif n == 50:\n        return 148\n    elif n == 51:\n        return 151\n    elif n == 52:\n        return 154\n    elif n == 53:\n        return 157\n    elif n == 54:\n        return 160\n    elif n == 55:\n        return 163\n    elif n == 56:\n        return 166\n    elif n == 57:\n        return 169\n    elif n == 58:\n        return 172\n    elif n == 59:\n        return 175\n    elif n == 60:\n        return 178\n    elif n == 61:\n        return 181\n    elif n == 62:\n        return 184\n    elif n == 63:\n        return 187\n    elif n == 64:\n        return 190\n    elif n == 65:\n        return 193\n    elif n == 66:\n        return 196\n    elif n == 67:\n        return 199\n    elif n == 68:\n        return 202\n    elif n == 69:\n        return 205\n    elif n == 70:\n        return 208\n    elif n == 71:\n        return 211\n    elif n == 72:\n        return 214\n    elif n == 73:\n        return 217\n    elif n == 74:\n        return 220\n    elif n == 75:\n        return 223\n    elif n == 76:\n        return 226\n    elif n == 77:\n        return 229\n    elif n == 78:\n        return 232\n    elif n == 79:\n        return 235\n    elif n == 80:\n        return 238\n    elif n == 81:\n        return 241\n    elif n == 82:\n        return 244\n    elif n == 83:\n        return 247\n    elif n == 84:\n        return 250\n    elif n == 85:\n        return 253\n    elif n == 86:\n        return 256\n    elif n == 87:\n        return 259\n    elif n == 88:\n        return 262\n    elif n == 89:\n        return 265\n    elif n == 90:\n        return 268\n    elif n == 91:\n        return 271\n    elif n == 92:\n        return 274\n    elif n == 93:\n        return 277\n    elif n == 94:\n        return 280\n    elif n == 95:\n        return 283\n    elif n == 96:\n        return 286\n    elif n == 97:\n        return 289\n    elif n == 98:\n        return 292\n    elif n == 99:\n        return 295\n    elif n == 100:\n        return 298\n    elif n == 101:\n        return 301\n    elif n == 102:\n        return 304\n    elif n == 103:\n        return 307\n    elif n == 104:\n        return 310\n    elif n == 105:\n        return 313\n    elif n == 106:\n        return 316\n    elif n == 107:\n        return 319\n    elif n == 108:\n        return 322\n    elif n == 109:\n        return 325\n    elif n == 110:\n        return 328\n    elif n == 111:\n        return 331\n    elif n == 112:\n        return 334\n    elif n == 113:\n        return 337\n    elif n == 114:\n        return 340\n    elif n == 115:\n        return 343\n    elif n == 116:\n        return 346\n    elif n == 117:\n        return 349\n    elif n == 118:\n        return 352\n    elif n == 119:\n        return 355\n    elif n == 120:\n        return 358\n    elif n == 121:\n        return 361\n    elif n == 122:\n        return 364\n    elif n == 123:\n        return 367\n    elif n == 124:\n        return 370\n    elif n == 125:\n        return 373\n    elif n == 126:\n        return 376\n    elif n == 127:\n        return 379\n    elif n == 128:\n        return 382\n    elif n == 129:\n        return 385\n    elif n == 130:\n        return 388\n    elif n == 131:\n        return 391\n    elif n == 132:\n        return 394\n    elif n == 133:\n        return 397\n    elif n == 134:\n        return 400\n    elif n == 135:\n        return 403\n    elif n == 136:\n        return 406\n    elif n == 137:\n        return 409\n    elif n == 138:\n        return 412\n    elif n == 139:\n        return 415\n    elif n == 140:\n        return 418\n    elif n == 141:\n        return 421\n    elif n == 142:\n        return 424\n    elif n == 143:\n        return 427\n    elif n == 144:\n        return 430\n    elif n == 145:\n        return 433\n    elif n == 146:\n        return 436\n    elif n == 147:\n        return 439\n    elif n == 148:\n        return 442\n    elif n == 149:\n        return 445\n    elif n == 150:\n        return 448\n    elif n == 151:\n        return 451\n    elif n == 152:\n        return 454\n    elif n == 153:\n        return 457\n    elif n == 154:\n        return 460\n    elif n == 155:\n        return 463\n    elif n == 156:\n        return 466\n    elif n == 157:\n        return 469\n    elif n == 158:\n        return 472\n    elif n == 159:\n        return 475\n    elif n == 160:\n        return 478\n    elif n == 161:\n        return 481\n    elif n == 162:\n        return 484\n    elif n == 163:\n        return 487\n    elif n == 164:\n        return 490\n    elif n == 165:\n        return 493\n    elif n == 166:\n        return 496\n    elif n == 16"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 4\n    else: \n        return tetrahedral_number(n-1) + (3*(n-1)+1)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n**2) + (n) - 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2))//6\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    if n <= 1:\n        return n\n    else:\n        return (tetrahedral_number(n - 1) * n + 1) // 2\n        \ndef main():\n    '''\n    Let's test the function.\n    '''\n    \n    # Test 1\n    print(tetrahedral_number(2))\n    print(tetrahedral_number(5))\n    print(tetrahedral_number(10))\n    \n    # Test 2\n    print(tetrahedral_number(1))\n    print(tetrahedral_number(4))\n    print(tetrahedral_number(7))\n    \n    # Test 3\n    print(tetrahedral_number(1))\n    print(tetrahedral_number(4))\n    print(tetrahedral_number(7))\n    \n    \nmain()\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) / 6\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(i**3 for i in range(1, n))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        return 4 * tetrahedral_number(n - 1) + 1\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_torus(R,r):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    return math.pi*r*R*R*(R+r)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    \n    # Calculate the area of a sphere\n    def sphere_area(r):\n        return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n    pass\n    "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    radius = float(r)\n    volume = (4 / 3) * math.pi * radius**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if not type(r) is float:\n        raise TypeError(\"radius must be float\")\n    if r < 0:\n        raise ValueError(\"radius must be positive\")\n    \n    vol = (4/3)*math.pi*(r**3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r ** 3\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (math.pi * (r**2 + h**2) * 2)\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * r\n    return v\ndef volume_cone_sides(r,h):\n    '''\n    Write a function to find the volume of a cone with number of sides.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * 2 * r\n    return v\ndef volume_pyramid(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h)\n    return v\ndef volume_pyramid_sides(r,h):\n    '''\n    Write a function to find the volume of a pyramid with number of sides.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h) * 2\n    return v\ndef volume_pyramid_height(r,h):\n    '''\n    Write a function to find the volume of a pyramid with number of heights.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h) * h\n    return v\ndef volume_pyramid_sides_and_height(r,h):\n    '''\n    Write a function to find the volume of a pyramid with number of sides and heights.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h) * (2 * r + h)\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = (4 * math.pi * r**2)\n    return sa\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = (2 * math.pi * r * h + (2 * math.pi * r**2) + math.pi * (r**2 + h**2))\n    return sa\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa = (math.pi * (r**2 + h**2) * (2 * r + h) * 2)\n    return sa\ndef surface_area_cone_sides(r,h):\n    '''\n    Write a function to find the surface area of a cone with number of sides.\n    '''\n    sa = (math.pi * (r**2 + h**2) * (2 * r + h) * 2 + (math.pi * (r**2 + h**2) * 2 * r))\n    return sa\ndef surface_area_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    sa = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h)\n    return sa\ndef surface_area_pyramid_sides(r,h):\n    '''\n    Write a function to find the surface area of a pyramid with number of sides.\n    '''\n    sa = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h) * 2\n    return sa\ndef surface_area_pyramid_height(r,h):\n    '''\n    Write a function to find the surface area of a pyramid with number of heights.\n    '''\n    sa = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h) * h\n    return sa\ndef surface_area_pyramid_sides_and_height(r,h):\n    '''\n    Write a function to find the surface area of a pyramid with number of sides and heights.\n    '''\n    sa = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h) * (2 * r + h)\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (math.pi * (r**2 + h**2) * 2)\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * r\n    return v\ndef volume_cone_sides(r,h):\n    '''\n    Write a function to find the volume of a cone with number of sides.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * 2 * r\n    return v\ndef volume_pyramid(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h)\n    return v\ndef volume_pyramid_sides(r,h):\n    '''\n    Write a function to find the volume of a pyramid with number of sides.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h) * 2\n    return v\ndef volume_pyramid_height(r,h):\n    '''\n    Write a function to find the volume of a pyramid with number of heights.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h) * h\n    return v\ndef volume_pyramid_sides_and_height(r,h):\n    '''\n    Write a function to find the volume of a pyramid with number of sides and heights.\n    '''\n    v = (1/3) * math.pi * (r**2 + h**2) * (2 * r + h) * (2 * r + h)\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = (4 * math.pi * r**2)\n    return sa\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = (2 * math.pi * r * h + (2 * math.pi * r**2) + math.pi * (r**2 + h**2))\n    return sa\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa = (math.pi * (r**2 + h**2) * (2 * r + h) * 2)\n    return sa\ndef surface_area_cone_sides(r,h):\n    '''\n    Write a function to find the surface area of a cone with number of sides.\n    '''\n    sa = (math.pi * (r**2 + h**2) * (2 * r + h) * 2 + (math.pi * (r**2 + h**2) * 2 * r))\n    return sa\ndef surface_area_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    sa = (1/3) * math.pi * (r**2 + h**2) * "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    PI = math.pi\n    V = 4/3*PI*(r**3)\n    return V\nprint(volume_sphere(1))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return pi * (r**3)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    lst = []\n    for i in strr:\n        lst.append(i)\n    i = 0\n    n = 0\n    res = 0\n    while(i < len(lst)):\n        a = ord(lst[i])\n        res += (a % 26)\n        i += 1\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return (ord(strr[0]) + ord(strr[1]) + ord(strr[2]) + ord(strr[3]) + ord(strr[4]) + ord(strr[5]) + ord(strr[6]) + ord(strr[7]) + ord(strr[8])) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    \n    ans = 0\n    for i in strr:\n        ans = ans + ord(i)\n    return ans % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    my_dict = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}\n    strr_lst = list(strr)\n    output = 0\n    for i in strr_lst:\n        if i not in my_dict.keys():\n            print(\"invalid input\")\n            break\n        output += my_dict[i]\n    return output % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        s=\"\"\n        for i in range(0,len(str)):\n            s+=str(chr(d[str[i]]))\n        return s\n    print(char(strr))\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        s=\"\"\n        for i in range(0,len(str)):\n            s+=str(chr(d[str[i]]+int(str[i])))\n        return s\n    print(char(strr))\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        s=\"\"\n        for i in range(0,len(str)):\n            s+=str(chr(int(str[i])+d[str[i]]))\n        return s\n    print(char(strr))\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        s=\"\"\n        for i in range(0,len(str)):\n            s+=str(chr(int(str[i])+d[str[i]]))\n        return s\n    print(char(strr))\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        s=\"\"\n        for i in range(0,len(str)):\n            s+=str(chr(int(str[i])+d[str[i]]))\n        return s\n    print(char(strr))\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        s=\"\"\n        for i in range(0,len(str)):\n            s+=str(chr(int(str[i])+d[str[i]]))\n        return s\n    print(char(strr))\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        s=\"\"\n        for i in range(0,len(str)):\n            s+=str(chr(int(str[i])+d[str[i]]))\n        return s\n    print(char(strr))\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        s=\"\"\n        for i in range(0,len(str)):\n            s+=str(chr(int(str[i])+d[str[i]]))\n        return s\n    print(char(strr))\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        s=\"\"\n        for i in range(0,len(str)):\n            s+=str(chr(int(str[i])+d[str[i]]))\n        return s\n    print(char(strr))\n    \ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def char(str):\n        d={'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    a = list(strr)\n    for i in range(len(a)):\n        if(a[i] ==''):\n            a[i] = '%20'\n    \n    s = \"\".join(a)\n    return s\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+ord(i)\n    return sum%26\n    \ndef get_Char_2(strr):\n    return sum(ord(i) for i in strr)%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for i in range(len(strr)):\n        if ord(strr[i]) <= 90 and ord(strr[i]) >= 65:\n            char = char + chr(ord(strr[i]) + 64)\n        elif ord(strr[i]) >= 97 and ord(strr[i]) <= 122:\n            char = char + chr(ord(strr[i]) - 96)\n        else:\n            char = char + strr[i]\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = set(strr)\n    s = list(s)\n    res = []\n    for i in s:\n        res.append(ord(i))\n    mul = 1\n    for i in res:\n        mul = mul * i\n    return mul % 26"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for i in range(len(strr)):\n        yield chr(ord(strr[i]) + (ord(strr[i]) - 97) % 26)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return nth_number(sequence(n-1)) + nth_number(sequence(n-2))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    total = 1\n    while True:\n        if total == n: \n            return total\n        total += 1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 2\n    return sequence(n-1)+sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    l = [1,1]\n    for i in range(n):\n        l = list(map(lambda x,y:x+y,l,l))\n    return l[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2) + 2\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * sequence(n - 1) + n + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    # 9\n    # 10\n    # 11\n    # 12\n    # 13\n    # 14\n    # 15\n    # 16\n    # 17\n    # 18\n    # 19\n    # 20\n    # 21\n    # 22\n    # 23\n    # 24\n    # 25\n    # 26\n    # 27\n    # 28\n    # 29\n    # 30\n    # 31\n    # 32\n    # 33\n    # 34\n    # 35\n    # 36\n    # 37\n    # 38\n    # 39\n    # 40\n    # 41\n    # 42\n    # 43\n    # 44\n    # 45\n    # 46\n    # 47\n    # 48\n    # 49\n    # 50\n    # 51\n    # 52\n    # 53\n    # 54\n    # 55\n    # 56\n    # 57\n    # 58\n    # 59\n    # 60\n    # 61\n    # 62\n    # 63\n    # 64\n    # 65\n    # 66\n    # 67\n    # 68\n    # 69\n    # 70\n    # 71\n    # 72\n    # 73\n    # 74\n    # 75\n    # 76\n    # 77\n    # 78\n    # 79\n    # 80\n    # 81\n    # 82\n    # 83\n    # 84\n    # 85\n    # 86\n    # 87\n    # 88\n    # 89\n    # 90\n    # 91\n    # 92\n    # 93\n    # 94\n    # 95\n    # 96\n    # 97\n    # 98\n    # 99\n    # 100\n    # 101\n    # 102\n    # 103\n    # 104\n    # 105\n    # 106\n    # 107\n    # 108\n    # 109\n    # 110\n    # 111\n    # 112\n    # 113\n    # 114\n    # 115\n    # 116\n    # 117\n    # 118\n    # 119\n    # 120\n    # 121\n    # 122\n    # 123\n    # 124\n    # 125\n    # 126\n    # 127\n    # 128\n    # 129\n    # 130\n    # 131\n    # 132\n    # 133\n    # 134\n    # 135\n    # 136\n    # 137\n    # 138\n    # 139\n    # 140\n    # 141\n    # 142\n    # 143\n    # 144\n    # 145\n    # 146\n    # 147\n    # 148\n    # 149\n    # 150\n    # 151\n    # 152\n    # 153\n    # 154\n    # 155\n    # 156\n    # 157\n    # 158\n    # 159\n    # 160\n    # 161\n    # 162\n    # 163\n    # 164\n    # 165\n    # 166\n    # 167\n    # 168\n    # 169\n    # 170\n    # 171\n    # 172\n    # 173\n    # 174\n    # 175\n    # 176\n    # 177\n    # 178\n    # 179\n    # 180\n    # 181\n    # 182\n    # 183\n    # 184\n    # 185\n    # 186\n    # 187\n    # 188\n    # 189\n    # 190\n    # 191\n    # 192\n    # 193\n    # 194\n    # 195\n    # 196\n    # 197\n    # 198\n    # 199\n    # 200\n    # 201\n    # 202\n    # 203\n    # 204\n    # 205\n    # 206\n    # 207\n    # 208\n    # 209\n    # 210\n    # 211\n    # 212\n    # 213\n    # 214\n    # 215\n    # 216\n    # 217\n    # 218\n    # 219\n    # 220\n    # 221\n    # 222\n    # 223\n    # 224\n    # 225\n    # 226\n    # 227\n    # 228\n    # 229\n    # 230\n    # 231\n    # 232\n    # 233\n    # 234\n    # 235\n    # 236\n    # 237\n    # 238\n    # 239\n    # 240\n    # 241\n    # 242\n    # 243\n    # 244\n    # 245\n    # 246\n    # 247\n    # 248\n    # 249\n    # 250\n    # 251\n    # 252\n    # 253\n    # 254\n    # 255\n    # 256\n    # 257\n    # 258\n    # 259\n    # 260\n    # 261\n    # 262\n    # 263\n    # 264\n    # 265\n    # 266\n    # 267\n    # 268\n    # 269\n    # 270\n    # 271\n    # 272\n    # 273\n    # 274\n    # 275\n    # 276\n    # 277\n    # 278\n    # 279\n    # 280\n    # 281\n    # 282\n    # 283\n    # 284\n    # 285\n    # 286\n    # 287\n    # 288\n    # 289\n    # 290\n    # 291\n    # 292\n    # 293\n    # 294\n    # 295\n    # 296\n    # 297\n    # 298\n    # 299\n    # 300\n    # 301\n    # 302\n    # 303\n    # 304\n    # 305\n    # 306\n    # 307\n    # 308\n    # 309\n    # 310\n    # 311\n    # 312\n    # 313\n    # 314\n    # 315\n    # 316\n    # 317\n    # 318\n    # 319\n    # 320\n    # 321\n    # 322\n    # 323\n    # 324\n    # 325\n    # 326\n    # 327\n    # 328\n    # 329\n    # 330\n    # 331\n    # 332\n    # 333\n    # 334\n    # 335\n    # 336\n    # 337\n    # 338\n    # 339\n    # 340\n    # 341\n    # 342\n    # 343\n    # 344\n    # 345\n    # 346\n    # 347\n    # 348\n    # 349\n    # 350\n    # 351\n    # 352\n    # 353\n    # 354\n    # 355\n    # 356\n    # 357\n    # 358\n    # 359\n    # 360\n    # 361\n    # 362\n    # 363\n    # 364\n    # 365\n    # 366\n    # 367\n    # 368\n    # 369\n    # 370\n    # 371\n    # 372\n    # 373\n    # 374\n    # 375\n    # 376\n    # 377\n    # 378\n    # 379\n    # 380\n    # 381\n    # 382\n    # 383\n    # 384\n    # 385\n    # 386\n    # 387\n    # 388\n    # 389\n    # 390\n    # 391\n    # 392\n    # 393\n    # 394\n    # 395\n    # 396\n    # 397\n    # 398\n    # 399\n    # 400\n    # 401\n    # 402\n    # 403\n    # 404\n    # 405\n    # 406\n    # 407\n    # 408\n    # 409\n    # 410\n    # 411\n    # 412\n    # 413\n    # 414\n    # 415\n    # 416\n    # 417\n    # 418\n    # 419\n    # 420\n    # 421\n    # 422\n    # 423\n    # 424\n    # 425\n    # 426\n    # 427\n    # 428\n    # 429\n    # 430\n    # 431\n    # 432\n    # 433\n    # 434\n    # 435\n    # 436\n    # 437\n    # 438\n    # 439\n    # 440\n    # 441\n    # 442\n    # 443\n    # 444\n    # 445\n    # 446\n    # 447\n    # 448\n    # 449\n    # 450\n    # 451\n    # 452\n    # 453\n    # 454\n    # 455\n    # 456\n    # 457\n    # 458\n    # 459\n    # 460\n    # 461\n    # 462\n    # 463\n    # 464\n    # 465\n    # 466\n    # 467\n    # 468\n    # 469\n    # 470\n    # 471\n    # 472\n    # 473\n    # 474\n    # 475\n    # 476\n    # 477\n    # 478\n    # 479\n    # 480\n    # 481\n    # 482\n    # 483\n    # 484\n    # 485\n    # 486\n    # 487\n    # 488\n    # 489\n    # 490\n    # 491\n    "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = 0\n    result = 1\n    while n > x:\n        x += 1\n        result = result + 1\n        yield result\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # first we need to create the newman conway sequence\n    newman = [0, 1]\n    for i in range(2, n + 1):\n        newman.append(sum(newman[-2:]))\n    return newman[n - 1]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*math.pi*r**2\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    surface_area = 4 * math.pi * r ** 2\n    print(f'The surface area of the sphere with radius {r} is {surface_area}')\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14\n    surfacearea = 4 * pi * r**2\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = (4 * pi * r**2)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r * r\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14\n    a = pi * (r**2)\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=4*math.pi*r*r\n    return area\n    \ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=2*math.pi*r*h+2*math.pi*r*r\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    return 4 * math.pi * r**2\n    \ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2 * math.pi * r * h + 2 * math.pi * r**2\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    return (4 / 3) * math.pi * r**3\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    import math\n    return math.pi * r**2 * h\n    \ndef find_area_rectangle(a, b):\n    '''\n    Write a function that finds the area of a rectangle given the lengths of its sides a and b.\n    '''\n    import math\n    return (a + b) * 0.5\n    \ndef find_area_triangle(a, b, c):\n    '''\n    Write a function that finds the area of a triangle given the lengths of its three sides a, b, and c.\n    '''\n    import math\n    p = (a + b + c) / 2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef find_area_rectangle_area(a, b):\n    '''\n    Write a function that finds the area of a rectangle given its length and width.\n    '''\n    import math\n    return a * b\n    \ndef find_area_triangle_area(a, b, c):\n    '''\n    Write a function that finds the area of a triangle given its three sides.\n    '''\n    import math\n    p = (a + b + c) / 2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef find_area_triangle_area_tetrahedron(a, b, c, d):\n    '''\n    Write a function that finds the area of a tetrahedron given its four sides.\n    '''\n    import math\n    p = (a + b + c + d) / 2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c)*(p-d))\n    \ndef find_area_rectangle_area_trapezoid(a, b, h):\n    '''\n    Write a function that finds the area of a trapezoid given its length, width, and height.\n    '''\n    import math\n    return (a + b) / 2 * h\n    \ndef find_area_triangle_area_trapezoid(a, b, c, h):\n    '''\n    Write a function that finds the area of a trapezoid given its four sides.\n    '''\n    import math\n    return (a + b) / 2 * h + (a + c) / 2 * h\n    \ndef find_area_rectangle_area_pyramid(a, b, h):\n    '''\n    Write a function that finds the area of a pyramid given its base length, height, and top width.\n    '''\n    import math\n    return a * h + (a + b) * h / 2\n    \ndef find_area_triangle_area_pyramid(a, b, c, h):\n    '''\n    Write a function that finds the area of a pyramid given its four sides.\n    '''\n    import math\n    return a * h + (a + b) * h / 2 + a * (a + b) / 2 * h\n    \ndef find_area_rectangle_area_pentagon(a, b):\n    '''\n    Write a function that finds the area of a pentagon given its length and height.\n    '''\n    import math\n    return (1 + 5**0.5) / 2 * a\n    \ndef find_area_triangle_area_pentagon(a, b, c):\n    '''\n    Write a function that finds the area of a pentagon given its three sides.\n    '''\n    import math\n    p = (a + b + c) / 2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef find_area_rectangle_area_heptagon(a, b):\n    '''\n    Write a function that finds the area of a heptagon given its length and height.\n    '''\n    import math\n    return (3**0.5 + 2**0.5) / 4 * a\n    \ndef find_area_triangle_area_heptagon(a, b, c):\n    '''\n    Write a function that finds the area of a heptagon given its three sides.\n    '''\n    import math\n    p = (a + b + c) / 2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef find_area_rectangle_area_octagon(a, b):\n    '''\n    Write a function that finds the area of an octagon given its length and height.\n    '''\n    import math\n    return 2 * math.sqrt(1 + 1) * a\n    \ndef find_area_triangle_area_octagon(a, b, c):\n    '''\n    Write a function that finds the area of an octagon given its three sides.\n    '''\n    import math\n    p = (a + b + c) / 2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef find_area_rectangle_area_nonagon(a, b):\n    '''\n    Write a function that finds the area of a nonagon given its length and height.\n    '''\n    import math\n    return 2 * (1 + math.sqrt(2)) * a\n    \ndef find_area_triangle_area_nonagon(a, b, c):\n    '''\n    Write a function that finds the area of a nonagon given its three sides.\n    '''\n    import math\n    p = (a + b + c) / 2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef find_area_rectangle_area_nonagon_1(a, b, h):\n    '''\n    Write a function that finds the area of a nonagon given its length and width.\n    '''\n    import math\n    return (a + b) / 2 * h\n    \ndef find_area_triangle_area_nonagon_1(a, b, c, h):\n    '''\n    Write a function that finds the area of a nonagon given its four sides.\n    '''\n    import math\n    p = (a + b + c) / 2\n    return p * h / 2 + (a + b) / 2 * h / 2\n    \ndef find_area_rectangle_area_nonagon_2(a, b, h):\n    '''\n    Write a function that finds the area of a nonagon given its length and width.\n    '''\n    import math\n    return a * h\n    \ndef find_area_triangle_area_nonagon_2(a, b, c, h):\n    '''\n    Write a function that finds the area of a nonagon given its four sides.\n    '''\n    import math\n    p = (a + b + c) / 2\n    return p * h / 2 + (a + b) / 2 * h / 2\n    \ndef find_area_rectangle_area_nonagon_3(a, b, h):\n    '''\n    Write a function that finds the area of a nonagon given its length and width.\n    '''\n    import math\n    return a * h\n    \ndef find_area_triangle_area_nonagon_3(a, b, c, h):\n    '''\n    Write a function that finds the area of a nonagon given its four sides.\n    '''\n    import math\n    p = (a + b + c) / 2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    \ndef find_area_rectangle_area_nonagon_4(a, b, h):\n    '''\n    Write a function that finds the are"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    PI = math.pi\n    # The surface area of a sphere can be calculated by the formula:\n    # SA = 4 * PI * (r**2)\n    # Since the radius is always an integer, we can solve the value of r by the\n    # equation, and then add PI to it:\n    # r = int(r) + PI\n    print('The surface area of a sphere with radius', r, 'is:', 4 * PI * (r**2))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x = (2*n - 1)**0.5\n    return int(x*(3*x - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**2 - n + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 3\n    if n == 2:\n        return 4\n    return 2 * centered_hexagonal_number(n - 2) + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hex(n):\n        return n*(3*n - 1)//2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = n + (n ** 2 - n) / 2\n    return int(a)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    c = (3**0.5)/2\n    a = n * c\n    return a * (1-a**2)**0.5\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n ** 2 + n) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    \n    return (n**2)*(3*n-1) / 2\n    \n    \nprint(centered_hexagonal_number(2))\nprint(centered_hexagonal_number(3))\nprint(centered_hexagonal_number(4))\nprint(centered_hexagonal_number(5))\nprint(centered_hexagonal_number(6))"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1) + 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #triangle numbers\n    n=n**2\n    #left num of each triangle number\n    left=2*(n-1)\n    #right num of each triangle number\n    right=n-left\n    #return number\n    return (left+right)/2\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #first lets create a new dictionary that has all the keys from each dictionary\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    #now we can return that dictionary\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    combined = dict1.copy()\n    combined.update(dict2)\n    combined.update(dict3)\n    return combined\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return ct.ChainMap(dict1,dict2,dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1, **dict2, **dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    newdict={}\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        if key in dict1 and key in dict2 and key in dict3:\n            newdict[key]=dict1[key]+dict2[key]+dict3[key]\n        elif key in dict1:\n            newdict[key]=dict1[key]\n        elif key in dict2:\n            newdict[key]=dict2[key]\n        elif key in dict3:\n            newdict[key]=dict3[key]\n    return newdict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    d.update(dict1)\n    d.update(dict2)\n    d.update(dict3)\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dic = {}\n    for k,v in dict1.items():\n        dic[k]=v\n    for k,v in dict2.items():\n        dic[k]=v\n    for k,v in dict3.items():\n        dic[k]=v\n    return dic\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2,**dict3)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dictionary = {}\n    for element in list1:\n        if element in freq_dictionary:\n            freq_dictionary[element] += 1\n        else:\n            freq_dictionary[element] = 1\n    return freq_dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    a=collections.Counter(list1)\n    dict1=dict(a)\n    return dict1\nlist1=[1,2,3,1,1,2,2,2,3,1,3,3,3,3,1]\nprint(freq_count(list1))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\ndef freq_count1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for i in list1:\n        if i not in freq.keys():\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\ndef freq_count3(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\ndef freq_count4(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return freq\ndef freq_count5(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.Counter(freq)\ndef freq_count6(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count7(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count8(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.Counter(freq)\ndef freq_count9(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count10(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count11(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.Counter(freq)\ndef freq_count12(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count13(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.Counter(freq)\ndef freq_count14(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count15(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.Counter(freq)\ndef freq_count16(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count17(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.Counter(freq)\ndef freq_count18(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count19(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.Counter(freq)\ndef freq_count20(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count21(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.Counter(freq)\ndef freq_count22(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i,0) + 1\n    return collections.defaultdict(freq.get,freq)\ndef freq_count23(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        fre"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(0, len(list1)):\n        if list1[i] in freq_dict:\n            freq_dict[list1[i]] += 1\n        else:\n            freq_dict[list1[i]] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n    \ndef freq_count_v2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if not list1: return []\n    freq_dict = collections.defaultdict(int)\n    for i in range(len(list1)):\n        freq_dict[list1[i]] += 1\n    return freq_dict\n    \n    \ndef dict_convert(dict1):\n    '''\n    Write a function to convert a dictionary into a list of (key, value) tuples, sorted in\n    descending order of value.\n    '''\n    new_list = []\n    for key in sorted(dict1, key=dict1.get, reverse=True):\n        new_list.append((key, dict1[key]))\n    return new_list\n    \ndef dict_sort(dict1, reverse = False):\n    '''\n    Write a function to sort a dictionary (ascending or descending) according to value\n    '''\n    if reverse:\n        return dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    else:\n        return dict(sorted(dict1.items(), key=lambda item: item[1]))\n    \ndef list_reverse(list1):\n    '''\n    Write a function to reverse a given list.\n    '''\n    if not list1: return []\n    for i in range(int(len(list1)/2)):\n        list1[i], list1[len(list1)-1-i] = list1[len(list1)-1-i], list1[i]\n    return list1\n    \ndef merge_lists(list1, list2):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    if not list1: return list2\n    if not list2: return list1\n    if list1[0] > list2[0]:\n        list1.insert(0, list2.pop(0))\n    if list1[-1] < list2[-1]:\n        list1.append(list2.pop())\n    return list1\n    \ndef no_duplicate(list1):\n    '''\n    Write a function to remove duplicate elements from a list.\n    '''\n    if not list1: return []\n    new_list = []\n    for i in range(len(list1)):\n        if not list1[i] in new_list:\n            new_list.append(list1[i])\n    return new_list\n    \ndef length_of_longest_substring(s):\n    '''\n    Write a function to find the length of the longest substring without repeating characters.\n    '''\n    if not s: return 0\n    longest_substring = 0\n    start = 0\n    for i in range(len(s)):\n        count = 0\n        for j in range(start,i+1):\n            if s[j] in s[i+1:]:\n                break\n            count += 1\n        if count+i - start > longest_substring:\n            longest_substring = count+i-start\n        start += 1\n    return longest_substring\n    \ndef string_compression(string):\n    '''\n    Write a function to check if a string is comprehessible or not.\n    '''\n    if not string: return None\n    new_string = ''\n    count = 1\n    for i in range(len(string)):\n        if string[i]!= string[i+1]:\n            new_string += string[i] + str(count)\n            count = 1\n        else:\n            count += 1\n    new_string += string[i] + str(count)\n    if len(new_string) >= len(string): return string\n    return new_string\n    \ndef return_the_first_n_prime_numbers(n):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    if not n: return []\n    numbers = []\n    for i in range(1, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            numbers.append(i)\n    return numbers\n    \ndef string_search(string, search):\n    '''\n    Write a function to find if the substring exists in the original string.\n    '''\n    if not search: return False\n    if not string: return False\n    count = 0\n    for i in range(len(string)):\n        if string[i] == search[0]:\n            if len(search) == 1:\n                return True\n            if len(search) == 2 and string[i:i+len(search)] == search:\n                return True\n            if string[i]!= search[0] or len(search) == 1:\n                search = search[1:]\n                count += 1\n                if count == len(search):\n                    return True\n            else:\n                count += 1\n                if len(search) == 1:\n                    return True\n    return False\n    \ndef remove_zero_sum_sublists(list1):\n    '''\n    Write a function to remove zero sum sublists from a list.\n    '''\n    if not list1: return []\n    new_list = []\n    for i in range(len(list1)-1):\n        count = 0\n        for j in range(i+1, len(list1)):\n            count += list1[j]\n        if count == 0:\n            new_list.append(list1[i])\n    return new_list\n    \ndef remove_negative(list1):\n    '''\n    Write a function to remove all negative numbers from a list.\n    '''\n    if not list1: return []\n    for i in range(len(list1)-1, 0, -1):\n        if list1[i] < 0:\n            list1.pop(i)\n    return list1\n    \ndef sublist_sum_to_target(list1, sum_value):\n    '''\n    Write a function to check if a given list contains a sublist in which the sum of numbers\n    is equal to a given number.\n    '''\n    if not list1: return False\n    for i in range(len(list1)-1):\n        if sum(list1[i:i+2]) == sum_value:\n            return True\n    return False\n    \ndef swap_first_last(list1):\n    '''\n    Write a function to swap the first and the last element of a list.\n    '''\n    if not list1: return []\n    list1[0], list1[-1] = list1[-1], list1[0]\n    return list1\n    \ndef same_frequency(num1, num2):\n    '''\n    Write a function to check if two numbers have the same frequency of digits.\n    '''\n    if not num1 and not num2: return False\n    if not num1 or not num2: return False\n    if len(str(num1))!= len(str(num2)): return False\n    count = {}\n    for i in str(num1):\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    for j in str(num2):\n        if j not in count:\n            return False\n        else:\n            count[j] -= 1\n    return True\n    \ndef next_permutation(list1):\n    '''\n    Write a function to find the next permutation in ascending order.\n    '''\n    if not list1: return []\n    count = 0\n    for i in range(len(list1)-1, -1, -1):\n        if list1[i] < list1[i-1]:\n            count = i\n            break\n    if count == 0:\n        return False\n    for j in range(len(list1)-1, count, -1):\n        if list1[j] > list1[count-1]:\n            list1[count], list1[j] = list1[j], list1[count]\n            break\n    for k in range(count+1, len(list1)):\n        if list1[k] > list1[count]:\n            list1[k], list1[count] = list1[count], list1[k]\n    return list1\n    \ndef next_permutation2(list1):\n    '''\n    Write a function to fin"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic:\n            dic[i] = dic[i]+1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict={}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N < 10:\n        return N - 1\n    else:\n        return (N // 10) * 10 - 10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest(N):\n        for i in range(1,N):\n            if i < N:\n                if N % i == 0:\n                    if N/i <= N and N/i >= i:\n                        return N/i\n                    else:\n                        if abs(N/i - i) < abs(N/i - N):\n                            return N/i\n    return closest(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # if N is even, then N-1 is closest smaller number\n    # so move N-1 to end and pop\n    # else, compare with mid and move to end\n    # if mid less than N, move mid to end\n    # if mid more than N, move mid to beginning\n    # else return mid\n    mid = N // 2\n    if N % 2 == 1:\n        if mid < N:\n            return N\n        else:\n            return mid - 1\n    else:\n        if mid < N:\n            return mid\n        elif mid > N:\n            return 0\n        else:\n            return mid\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    from math import floor\n    return -1 if N <= 0 else (1 if N >= 100 else 2) if floor(N*0.25) == N else floor(N*0.5) if N >= 25 else N\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return N\n    if N == 1:\n        return 1\n    if N % 2 == 1:\n        return N - 1\n    if N % 2 == 0:\n        return N // 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    a = 2\n    while a < N:\n        a = a * 2\n    b = N // a\n    if b == 1:\n        return a\n    if b == 2:\n        return a - 1\n    while b > 1:\n        if a - b >= 0:\n            a = a - b\n            if b == 2:\n                if a == 1:\n                    return 1\n                else:\n                    return a\n            b = a // b\n        else:\n            b = b - 1\n    return a\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N < 0:\n        return 0\n    x = int((N+1)/2)\n    if x == N:\n        return N\n    elif abs(N-x) <= abs(x-N):\n        return x\n    else:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if (N < 0):\n        return -1\n    curr = N\n    while (curr > 0):\n        curr = curr//10\n    return curr\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def f(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return (n / 2) - 1\n        else:\n            return (n // 2) + 1\n    if N == 1:\n        return 1\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 3\n    return (f(N) + 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    m = N\n    while True:\n        if N % m == 0:\n            if m == 0:\n                return N\n            else:\n                return m\n        else:\n            m -= 1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    n = len(list1)\n    longest = 0\n    for i in range(n):\n        x = list1[i]\n        if len(x) > longest:\n            longest = len(x)\n    return(longest)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(len(list1[i]))\n    max_len = max(l)\n    return max_len\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = []\n    for word in list1:\n        words.append(word.split())\n    l = []\n    for word in words:\n        l.append(len(word))\n    return(max(l))\n    \nprint(len_log(['this is a test', 'woooooow']))\nprint(len_log(['this is a test', 'woooooow', 'this is a test', 'woooooow', 'woooooow']))\nprint(len_log(['This is a test', 'This is a test', 'This is a test', 'This is a test']))\nprint(len_log(['This is a test', 'This is a test', 'This is a test']))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    temp = 0\n    for i in range(0, len(list1)):\n        if list1[i] > temp:\n            temp = list1[i]\n    return temp\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a = 0\n    for i in list1:\n        if len(i) > a:\n            a = len(i)\n    print(a)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    result = 0\n    for x in list1:\n        if result < len(x):\n            result = len(x)\n    return result\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    largest = max(list1, key=len)\n    return len(largest)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #count = len(list1[0])\n    count = 0\n    for i in list1:\n        if len(i) > count:\n            count = len(i)\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(0, len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in str1:\n        if sub_str in i:\n            count += 1\n    if count!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(s in str1 for s in sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    substring_found = False\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            substring_found = True\n            break\n    return substring_found\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            print(\"Substring is present at index {}\".format(i))\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            print(i, \" is present in the list as a substring\")\n        else:\n            print(i, \" is not present in the list as a substring\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for x in str1:\n        if x in sub_str:\n            count = count + 1\n    if count == 0:\n        print(\"0\")\n    else:\n        print(count)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #print(len(str1))\n    #print(len(sub_str))\n    if len(str1) <= len(sub_str):\n        return False\n    if sub_str not in str1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    d=0\n    while n!= 0:\n        d += 1\n        n = n // 10\n    return d > 0\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a, b, c = 0, 1, 1\n    count = 1\n    while count < n:\n        a, b, c = b, c, a+b+c\n        count += 1\n    return a==n\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 1\n    while (n!= 0):\n        count += 1\n        n = n / 5\n    return count \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0 or n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    return s[0] == s[1]\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 1 and (n % 2 == 1 and n * 2 == n + 1) or (n % 2 == 0 and n * 2 == n - 1)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%2!= 0\n    \nn = int(input())\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def odd_even(n): \n        odd, even = 0, 0\n        while(n): \n            n = n // 10\n            even = even + (n % 10) * 2\n            odd = odd + (n % 10) \n        return (odd == even) \n        \n        \n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 0\n    else: \n        while (n!= 1): \n            if (odd_even(n)): \n                return 1\n            n = n - 1\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    i = 3 \n    while i <= math.sqrt(n): \n        if n % i == 0: \n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1,int(n/2)+1):\n        if(n%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b<0:\n        return 1/power(a,-b)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \ndef to_radians(degrees):\n    return degrees * math.pi / 180\n    \ndef to_degrees(radians):\n    return radians * 180 / math.pi\n    \ndef to_celsius(degrees):\n    return degrees - 32\n    \ndef to_farenheit(degrees):\n    return degrees * 1.8 + 32\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==1):\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if type(a) is not int:\n        raise TypeError(\"Argument should be an integer.\")\n    elif type(b) is not int:\n        raise TypeError(\"Argument should be an integer.\")\n    elif b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a*power(a,b-1)\n    elif b < 1:\n        return 1/power(a,b+1)\n    else:\n        return None\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # print(test_list)\n    # return (sorted(test_list, key=itemgetter(1))[0])\n    min_val = (test_list[0])\n    for i in range(len(test_list)):\n        if (test_list[i][1] < min_val[1]):\n            min_val = test_list[i]\n    return min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    # sort the list by the second item\n    sorted_list = sorted(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    for i in sorted_list:\n        print(i)\nindex_minimum([(1,2),(2,5),(2,3),(1,2)])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = itemgetter(0))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def less_than(tuple1, tuple2):\n        if tuple1[0] == tuple2[0]:\n            return tuple1[1] < tuple2[1]\n        else:\n            return tuple1[0] < tuple2[0]\n    return sorted(test_list, key=itemgetter(1,0))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x:x[1])\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def first_minimum(l):\n        for tup in l:\n            if tup[0] == min(l, key = itemgetter(0)):\n                return tup[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_size = 1000000\n    for ele in lst:\n        if len(ele)<min_size:\n            min_size = len(ele)\n    print(\"Minimum length of a list in a list of lists is :\", min_size)\n    return min_size\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length,len(sublist))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = float(\"inf\")\n    for i in range(0,len(lst)):\n        if min>len(lst[i]):\n            min = len(lst[i])\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lengths = []\n    for sub_list in lst:\n        lengths.append(len(sub_list))\n    \n    min_len = min(lengths)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    m=0\n    n=0\n    lst=[]\n    if len(lst)==0:\n        return 0\n    else:\n        while lst[n]!=0:\n            n=n+1\n        m=n\n        while lst[m]!=0:\n            m=m+1\n        return m\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    m = len(lst[0])\n    length_list = []\n    for i in range(m):\n        length_list.append(0)\n        for j in range(l):\n            if lst[j][i] > length_list[i]:\n                length_list[i] = lst[j][i]\n    return min(length_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors=0\n    for i in range(1,n):\n        if (n%i==0):\n            divisors=divisors+1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1 + divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return divisors(n)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n % 2 == 0:\n        return 1\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n % 2 == 0:\n        return 1\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n % 2 == 0:\n        return 1\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(3,n//2,2):\n        if n % i == 0:\n            count += 1\n    return count\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return None\n    \ndef sum_all(a, b):\n    '''\n    Write a python function to find the sum of the first n positive integers.\n    '''\n    return None\n    \ndef sum_divisor(a):\n    '''\n    Write a python function to find the sum of all divisors of a given integer.\n    '''\n    return None\n    \ndef divisor_sum_sorted(n):\n    '''\n    Write a python function to find the sum of all divisors of a given integer, \n    sorted in ascending order.\n    '''\n    return None\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given integer.\n    '''\n    return None\n    \ndef factorial_recursive(n):\n    '''\n    Write a python function to compute the factorial of a given integer using recursion.\n    '''\n    return None\n    \ndef fibonacci(n):\n    '''\n    Write a python function to compute the n-th Fibonacci number.\n    '''\n    return None\n    \ndef fibonacci_iterative(n):\n    '''\n    Write a python function to compute the n-th Fibonacci number using iteration.\n    '''\n    return None\n    \ndef max_seq(a, b):\n    '''\n    Write a python function to find the maximum sequence of a given length.\n    '''\n    return None\n    \ndef max_sum_subseq(a, b):\n    '''\n    Write a python function to find the maximum sum of a subsequence of a given length.\n    '''\n    return None\n    \ndef max_sum_subseq_iterative(a, b):\n    '''\n    Write a python function to find the maximum sum of a subsequence of a given length using iterative approach.\n    '''\n    return None\n    \ndef max_sum_subseq_recursive(a, b):\n    '''\n    Write a python function to find the maximum sum of a subsequence of a given length using recursive approach.\n    '''\n    return None\n    \ndef max_subset_sum(a, b):\n    '''\n    Write a python function to find the maximum subset sum of a given length.\n    '''\n    return None\n    \ndef max_subset_sum_iterative(a, b):\n    '''\n    Write a python function to find the maximum subset sum of a given length using iterative approach.\n    '''\n    return None\n    \ndef max_subset_sum_recursive(a, b):\n    '''\n    Write a python function to find the maximum subset sum of a given length using recursive approach.\n    '''\n    return None\n    \ndef str_count(str, str_1):\n    '''\n    Write a python function to count the number of occurrences of a given substring within a given string.\n    '''\n    return None\n    \ndef str_count_recursive(str, str_1):\n    '''\n    Write a python function to count the number of occurrences of a given substring within a given string using recursion.\n    '''\n    return None\n    \ndef str_contains(str, str_1):\n    '''\n    Write a python function to check if a given substring is present within a given string.\n    '''\n    return None\n    \ndef str_contains_recursive(str, str_1):\n    '''\n    Write a python function to check if a given substring is present within a given string using recursion.\n    '''\n    return None\n    \ndef str_index(str, str_1):\n    '''\n    Write a python function to return the first occurrence index of a given substring within a given string.\n    '''\n    return None\n    \ndef str_index_recursive(str, str_1):\n    '''\n    Write a python function to return the first occurrence index of a given substring within a given string using recursion.\n    '''\n    return None\n    \ndef str_replace(str, str_1, str_2):\n    '''\n    Write a python function to replace the occurrences of a given substring within a given string.\n    '''\n    return None\n    \ndef str_replace_recursive(str, str_1, str_2):\n    '''\n    Write a python function to replace the occurrences of a given substring within a given string using recursion.\n    '''\n    return None\n    \ndef str_reverse(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return None\n    \ndef str_reverse_recursive(str):\n    '''\n    Write a python function to reverse a given string using recursion.\n    '''\n    return None\n    \ndef str_split(str, str_1, str_2):\n    '''\n    Write a python function to split the string into parts using a given delimiter.\n    '''\n    return None\n    \ndef str_split_recursive(str, str_1, str_2):\n    '''\n    Write a python function to split the string into parts using a given delimiter using recursion.\n    '''\n    return None\n    \ndef str_startswith(str, str_1):\n    '''\n    Write a python function to check if a given string starts with a given substring.\n    '''\n    return None\n    \ndef str_startswith_recursive(str, str_1):\n    '''\n    Write a python function to check if a given string starts with a given substring using recursion.\n    '''\n    return None\n    \ndef str_to_int(str):\n    '''\n    Write a python function to convert a given string to an integer.\n    '''\n    return None\n    \ndef str_to_int_recursive(str):\n    '''\n    Write a python function to convert a given string to an integer using recursion.\n    '''\n    return None\n    \ndef str_to_float(str):\n    '''\n    Write a python function to convert a given string to a float.\n    '''\n    return None\n    \ndef str_to_float_recursive(str):\n    '''\n    Write a python function to convert a given string to a float using recursion.\n    '''\n    return None\n    \ndef str_to_int_or_float(str):\n    '''\n    Write a python function to convert a given string to an integer or float.\n    '''\n    return None\n    \ndef str_to_int_or_float_recursive(str):\n    '''\n    Write a python function to convert a given string to an integer or float using recursion.\n    '''\n    return None\n    \ndef str_to_list(str):\n    '''\n    Write a python function to convert a given string to a list.\n    '''\n    return None\n    \ndef str_to_list_recursive(str):\n    '''\n    Write a python function to convert a given string to a list using recursion.\n    '''\n    return None\n    \ndef str_to_list_or_str(str):\n    '''\n    Write a python function to convert a given string to a list or string.\n    '''\n    return None\n    \ndef str_to_list_or_str_recursive(str):\n    '''\n    Write a python function to convert a given string to a list or string using recursion.\n    '''\n    return None\n    \ndef str_to_set(str):\n    '''\n    Write a python function to convert a given string to a set.\n    '''\n    return None\n    \ndef str_to_set_recursive(str):\n    '''\n    Write a python function to convert a given string to a set using recursion.\n    '''\n    return None\n    \ndef str_to_set_or_str(str):\n    '''\n    Write a python function to convert a given string to a set or string.\n    '''\n    return None\n    \ndef str_to_set_or_str_recursive(str):\n    '''\n    Write a python function to convert a given string to a set or string using recursion.\n    '''\n    return None\n    \ndef str_to_tuple(str):\n    '''\n    Write a python function to convert a given string to a tuple.\n    '''\n    return None\n    \ndef str_to_tuple_recursive(str):"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        while i < n:\n            if n%i == 0:\n                i+=1\n            else:\n                i += 1\n        return i\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    \n    for val in list1:\n        for num in val:\n            if num in d.keys():\n                d[num] += 1\n            else:\n                d[num] = 1\n    return d\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_lists_dict = {}\n    list2 = []\n    for sub_list in list1:\n        for item in sub_list:\n            list2.append(item)\n    list2 = sorted(list2)\n    for item in list2:\n        count = 0\n        for sub_list in list1:\n            if item == sub_list[0]:\n                count += 1\n        frequency_lists_dict[item] = count\n    return frequency_lists_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = dict()\n    for i in range(len(list1)):\n        if list1[i] in freq.keys():\n            freq[list1[i]] += 1\n        else:\n            freq[list1[i]] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(0,len(list1)):\n        freq_dict[i] = list1[i]\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j]:\n                freq_dict[i] += 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if not isinstance(list1,list):\n        raise TypeError(\"Argument must be a list\")\n    dictionary = {}\n    for i in range(len(list1)):\n        if list1[i] in dictionary:\n            dictionary[list1[i]]+=1\n        else:\n            dictionary[list1[i]]=1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # mylist = [[1,2,3,4], ['a','b','c','d']]\n    # print(mylist)\n    # print(mylist[0][0])\n    # print(mylist[0][1])\n    # print(mylist[0][2])\n    # print(mylist[0][3])\n    # print(mylist[1][0])\n    # print(mylist[1][1])\n    # print(mylist[1][2])\n    # print(mylist[1][3])\n    \n    # mylist = [['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]\n    # print(mylist)\n    # print(mylist[0][0])\n    # print(mylist[0][1])\n    # print(mylist[0][2])\n    # print(mylist[0][3])\n    # print(mylist[1][0])\n    # print(mylist[1][1])\n    # print(mylist[1][2])\n    # print(mylist[1][3])\n    \n    # mylist = [[1,2,3,4], ['a', 'b', 'c', 'd']]\n    # print(mylist)\n    # print(mylist[0][0])\n    # print(mylist[0][1])\n    # print(mylist[0][2])\n    # print(mylist[0][3])\n    # print(mylist[1][0])\n    # print(mylist[1][1])\n    # print(mylist[1][2])\n    # print(mylist[1][3])\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for element in list1:\n        if element not in dict1:\n            dict1[element] = 1\n        else:\n            dict1[element] += 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    l1=[]\n    l2=[]\n    d={}\n    for i in range(len(list1)):\n        l1.append(list1[i])\n        for j in range(len(list1[i])):\n            l2.append(list1[i][j])\n    for k in l2:\n        if k not in d:\n            d[k]=1\n        else:\n            d[k]+=1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    ans = {}\n    for i in range(len(list1)):\n        if list1[i] in ans:\n            ans[list1[i]] += 1\n        else:\n            ans[list1[i]] = 1\n    return ans\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    def inner(list1):\n        frequencies = {}\n        for i in list1:\n            frequencies[i] = frequencies.get(i,0)+1\n        return frequencies\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum_of_numbers = 0\n    n = len(numbers)\n    for number in numbers:\n        sum_of_numbers += number\n    return sum_of_numbers/n\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    n = len(numbers)\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/n\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # YOUR CODE HERE\n    a = 1\n    for i in numbers:\n        a = a * i\n    return a/len(numbers)\n    \ndef compute_average(numbers):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    # YOUR CODE HERE\n    summation = 0\n    for i in numbers:\n        summation = summation + i\n    return summation/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) < 1:\n        return 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers.sort(reverse=True)\n    len_list = len(numbers)\n    multiplied_numbers = len_list*numbers\n    print(multiplied_numbers)\n    divided_numbers = len_list/len(numbers)\n    print(divided_numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    total = 1\n    \n    for num in numbers:\n        total = total * num\n    \n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    count = 1\n    result = 1\n    for i in numbers:\n        result = result * i\n        count = count * count\n    result = result / count\n    print(result)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    result = 1\n    for number in numbers:\n        result = result * number\n    result = result / len(numbers)\n    print(result)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    \n    if n % 2 == 0: \n        return decimal_to_binary(int(n / 2)) + \"0\"\n    \n    return decimal_to_binary(int(n / 2)) + \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n>0:\n        binary = str(n%2) + binary\n        n = n//2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    while n!= 0:\n        res = str(n % 2) + res\n        n = n // 2\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1:\n        return decimal_to_binary(n // 2) + str(n % 2)\n    else:\n        return str(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    else: \n        return decimal_to_binary(int(n/2)) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n))[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Recursion can be used to solve this problem.\n    # For example, for the number 7, the binary number would be 1111.\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1:\n        decimal_to_binary(n//2)\n    if n % 2 == 0:\n        result += '0'\n    else:\n        result += '1'\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    print(num)\n    while True:\n        if num == 0:\n            return 1\n        elif num == 1:\n            return 2\n        else:\n            # num = 3\n            # num = 3-1 = 2\n            num = num - 2\n            # num = 2\n            if num % 2 == 0:\n                # num = 2\n                # num = 2-2 = 0\n                num = num // 2\n                # num = 0\n                if num <= 0:\n                    # num = 0\n                    return num + 1\n                else:\n                    # num = 1\n                    return num\n            else:\n                # num = 3-1 = 2\n                # num = 2-2 = 0\n                num = num // 2\n                # num = 1\n                if num <= 0:\n                    # num = 0\n                    return num + 1\n                else:\n                    # num = 2\n                    return num\n            # num = 2\n            # num = 2-1 = 1\n            # num = 1\n            if num == 0:\n                return num + 1\n            else:\n                # num = 3\n                # num = 3-1 = 2\n                # num = 2\n                # num = 1\n                # num = 0\n                return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = num\n    while True:\n        # Find the next palindrome\n        p = result + 1\n        while p!= result and p < 10**9 and result % p!= 0:\n            p += 1\n        if p!= result and result % p == 0:\n            result = p\n        # Return the result\n        if result < 10**9 and result > 0:\n            return result\n        else:\n            result = -1\n            break\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        if is_palindrome(num) or is_palindrome(num+1) or is_palindrome(num-1):\n            return num\n        num = num + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    n = num + 1\n    while True:\n        str_num = str(n)\n        rev_num = str_num[::-1]\n        if str(n) == rev_num:\n            return n\n        n = n + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 100:\n        return num\n    s = str(num)\n    i = 0\n    while i < len(s)-1:\n        if s[i]!= s[-1-i]:\n            mid = i\n            break\n        i += 1\n    if mid == len(s)-1:\n        return int(s[0] + \"\".join(reversed(s[1:-1])))\n    return int(s[:mid+1] + s[-1-mid:-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #if the number is even, add 1 to the total\n    if num%2==0:\n        num=num+1\n    #iterate through the digits of num, if a palindrome is found, return that number\n    for i in range(len(str(num))):\n        temp=num\n        temp=temp+int(str(num)[i])\n        if str(temp)[::-1]==str(temp):\n            return temp\n    #otherwise, return num itself\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # ***\n    # *Hints:*\n    # *Traverse all possible solutions, and compare them to the original number.\n    # *If it is smaller than the original, return it.\n    # *If it is larger than the original, return the previous number.\n    # *If it is equal to the original, return the next number.\n    # *You should return the smallest number you can find.\n    # *You must use a while loop.\n    # *Think of a Python way of doing this.\n    # *You can use the isPalindrome() function.\n    # *You can use the math.floor() function to create a next bigger number.\n    # *You can use a negative number for the number to reverse.\n    # *You can use the -1 as an argument to the isPalindrome() function.\n    # *You can use the str() function to convert a number to a string.\n    # *You can also use a negative number with the reversed() function.\n    # ***\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #if it is already a palindrome, return num\n    if str(num) == str(num)[::-1]:\n        return num\n    #if it is not a palindrome, the next palindrome is the last two digits of num * 2.\n    else:\n        return num * 10 + num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #do this by adding a number to itself, and making sure it remains a palindrome\n    while not is_palindrome(num + num):\n        num = num + 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert integer to string\n    num_str = str(num)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    assert k >= 1 and k <= len(arr), \"Invalid k\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    length = len(arr)\n    if length == 0:\n        return -1\n    if k == 1:\n        return arr[0]\n    if k >= length:\n        return -1\n    # TODO: Write your solution here\n    \n    low = 0\n    high = length - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == k - 1:\n            return arr[mid]\n        elif arr[mid] < k - 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if k == i+1:\n            return arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Edge case: if the length of the array is 1\n    if len(arr) == 1:\n        return arr[0]\n    # Edge case: if the length of the array is 0\n    elif len(arr) == 0:\n        return -1\n    # Edge case: if the element is the kth element\n    if k == len(arr):\n        return arr[len(arr)-1]\n    # Edge case: if the array is not sorted\n    if arr[0] > arr[len(arr)-1]:\n        return -1\n    \n    # Median of 3\n    mid = len(arr)//2\n    # The element is in the middle\n    if k <= mid:\n        return arr[mid]\n    # The element is in the right side\n    elif k > mid + 1:\n        return arr[k-1]\n    # The element is in the left side\n    else:\n        if k < mid:\n            return kth_element(arr[0:mid], k)\n        elif k > mid:\n            return kth_element(arr[mid+1:len(arr)], k-mid-1)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Base case\n    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #index = len(arr)-k\n    #return arr[index]\n    while len(arr) > k:\n        arr.pop()\n    return arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # code here\n    # if length is 0 and k is equal to 0\n    # return -1\n    # else\n    # take the value of the first element as reference\n    # make a loop till the kth element is greater than or equal to the length of the array\n    # set a variable to compare and increment the value by 1\n    # if the value is equal to the kth element\n    # return the value\n    if len(arr) == 0 and k == 0:\n        return -1\n    elif len(arr) == 0:\n        return -1\n    else:\n        ref = arr[0]\n        i = 1\n        while i < k:\n            if i == k:\n                return -1\n            ref = ref + 1\n            i = i + 1\n        return ref\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)):\n        if i == k:\n            return arr[i]\n        elif i > k:\n            return k\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    length = len(arr)\n    return arr[length - k]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # word = word.title()\n    # word = word.replace(\"_\", \"\")\n    # word = word.replace(\"-\", \"\")\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = list(word.split('_'))\n    res = ''\n    for word in words:\n        if word.isupper():\n            res += word.lower()\n        else:\n            res += word.upper()\n    return res\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Camel case is as follows\n    # Change first letter to lower case\n    # Then add _ to the end of the string\n    # Return the result\n    return word[0].lower() + word[1:].replace('_','').title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # return ''.join([x.capitalize() for x in word.split('_')])\n    return ''.join([x.capitalize() for x in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    for i in range(len(word)):\n        word[i] = word[i].capitalize()\n    return ''.join(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #replace non alphanumeric chars with empty string\n    word = word.replace('_','')\n    #capitalize first letter of each word in word\n    word = word[0].capitalize() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_',' ')\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    return ''.join(x.title() for x in word.split())\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) < 3:\n        return word\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n * (n - 1) * (n - 2) / 6\n    return n * m * (n + m - 2) / 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    if n < m:\n        n, m = m, n\n    for i in range(1, m + 1):\n        if i % 2 == 0:\n            ans += m\n        else:\n            ans -= m\n        if i % n == 0:\n            ans -= m\n    return ans\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n!= m and m >= 2:\n        if n < m:\n            m, n = n, m\n        if n % m == 0:\n            return 0\n        if n == m:\n            return 1\n        if n == 1:\n            return 1\n        if n > m:\n            return eulerian_num(n - m, n) + eulerian_num(n, m - n)\n    else:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def find_eulerian(n, m, count, a):\n        if count == m: \n            return 1\n        else:\n            return 0\n        \n    eulerian = 0\n    \n    for i in range(n+1): \n        for j in range(m+1): \n            if find_eulerian(i, j, 1, a) == 1:\n                eulerian += 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # a = 1 / (n*(n+1)/2) * (m*m - (m+1)*(m+2))\n    return 1 / (n*(n+1)) * (m*m - (m+1)*(m+2))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    if n > m:\n        return eulerian_num(m, n)\n    if n == m:\n        return 1\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # number of eulerian paths from 1 to n \n    num_paths = n * (n-1) // 2\n    # number of eulerian paths from 1 to n \n    num_circuits = m * (m-1) // 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1: \n        return 1\n    elif n > m: \n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) \n    else: \n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 0 or m <= 0: \n        print(\"N and m should be positive integers. \\n\") \n        return -1\n    \n    elif n == 1 and m == 1: \n        print(\"Eulerian number of a graph with 1 vertex and 1 edge is: 1\")\n        return 1\n    \n    else: \n        print(\"Eulerian number of a graph with\", n, \"nodes and\", m, \"edges is:\", eulerian_num_m(n, m)) \n        return eulerian_num_m(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #A list of all the sublists\n    all_sublists = []\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # your code here\n    return sorted(input_list, key=lambda x: sorted(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in input_list:\n        sublist.sort()\n        result.append(sublist)\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in input_list:\n        l.sort()\n    print(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list = deepcopy(input_list)\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    def sort(item):\n        return item[0]\n    \n    for item in input_list:\n        item.sort(key=sort)\n    return input_list\n    \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def insert_sort(L):\n        '''\n        insert_sort(L) is a function that takes in a list of lists and returns the sorted list.\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(lst)\ncount([True,False])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == False:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # x = 0\n    # for item in lst:\n    #     x += item\n    # return x\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for ele in lst:\n        if ele:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n    \ndef count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    i = 0\n    while i < len(lst):\n        if lst[i] == True:\n            i += 1\n        else:\n            i += 2\n    return i\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true_bool = 0\n    for element in lst:\n        if element:\n            count_true_bool += 1\n    return count_true_bool\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_list:\n        if type(test_list)!= list:\n            print(\"List Error\")\n        else:\n            test_tup.extend(test_list)\n    else:\n        print(\"Empty List Error\")\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_list)\n    new_list.append(test_tup)\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(0,len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(f\"\\n\\t\\tAdding the following lists to {test_tup}\")\n    for i in test_list:\n        test_tup.append(i)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    n1,n2,n3 = num1,num2,num3\n    merged = []\n    while n1 or n2 or n3:\n        if n1 > n2:\n            merged.append(n1)\n            n1 = n1-1\n        elif n2 > n3:\n            merged.append(n2)\n            n2 = n2-1\n        else:\n            merged.append(n3)\n            n3 = n3-1\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    heapq.heappush(heap,num1)\n    heapq.heappush(heap,num2)\n    heapq.heappush(heap,num3)\n    return heap\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        return num2\n    if len(num2)==0:\n        return num3\n    if len(num3)==0:\n        return num1\n    if num1[0]<num2[0]:\n        num1.append(num2[0])\n        num2.pop(0)\n    if num1[0]<num3[0]:\n        num1.append(num3[0])\n        num3.pop(0)\n    if num1[0]<=num2[0] and num1[0]<=num3[0]:\n        num1.append(num1[0])\n        num1.append(num2[0])\n        num1.append(num3[0])\n        num2.pop(0)\n        num3.pop(0)\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while len(num1)>0 and len(num2)>0 and len(num3)>0:\n        if num1[0]<=num2[0] and num1[0]<=num3[0]:\n            merged_list.append(num1[0])\n            num1.pop(0)\n        elif num2[0]<=num1[0] and num2[0]<=num3[0]:\n            merged_list.append(num2[0])\n            num2.pop(0)\n        else:\n            merged_list.append(num3[0])\n            num3.pop(0)\n    if len(num1)>0:\n        merged_list += num1\n    if len(num2)>0:\n        merged_list += num2\n    if len(num3)>0:\n        merged_list += num3\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    lst = []\n    for i in range(len(num1)):\n        lst.append(num1[i])\n    for i in range(len(num2)):\n        lst.append(num2[i])\n    for i in range(len(num3)):\n        lst.append(num3[i])\n    return lst\nprint(merge_sorted_list([4,1,5], [3,7,0], [-4,1,9]))\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num4=[]\n    for i in range(len(num1)):\n        num4.append(num1[i])\n    for i in range(len(num2)):\n        if num2[i] in num1:\n            index_num=num1.index(num2[i])\n            num4.insert(index_num,num2[i])\n        else:\n            num4.append(num2[i])\n    for i in range(len(num3)):\n        if num3[i] in num2:\n            index_num=num2.index(num3[i])\n            num4.insert(index_num,num3[i])\n        else:\n            num4.append(num3[i])\n    return num4\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if(len(num1)==0):\n        return num2\n    if(len(num2)==0):\n        return num1\n    if(len(num3)==0):\n        return num1+num2\n    merged_list = []\n    i,j,k = 0,0,0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if(num1[i] < num2[j] and num1[i]<num3[k]):\n            merged_list.append(num1[i])\n            i+=1\n        elif(num2[j]<num1[i] and num2[j] < num3[k]):\n            merged_list.append(num2[j])\n            j+=1\n        else:\n            merged_list.append(num3[k])\n            k+=1\n    while(i<len(num1)):\n        merged_list.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        merged_list.append(num2[j])\n        j+=1\n    while(k<len(num3)):\n        merged_list.append(num3[k])\n        k+=1\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    ret_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            ret_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            ret_list.append(num2[j])\n            j += 1\n        elif num3[k] <= num1[i] and num3[k] <= num2[j]:\n            ret_list.append(num3[k])\n            k += 1\n    \n    while i < len(num1):\n        ret_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        ret_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        ret_list.append(num3[k])\n        k += 1\n    return ret_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return heapq.merge(num1,num2,num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == [] or num2 == [] or num3 == []:\n        return num1+num2+num3\n    elif num1[0] < num2[0] and num1[0] < num3[0]:\n        return [num1[0]]+merge_sorted_list(num1[1:],num2,num3)\n    elif num2[0] < num1[0] and num2[0] < num3[0]:\n        return [num2[0]]+merge_sorted_list(num1,num2[1:],num3)\n    elif num3[0] < num1[0] and num3[0] < num2[0]:\n        return [num3[0]]+merge_sorted_list(num1,num2,num3[1:])\n    else:\n        return []\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=bin(n)[2:]\n    return s.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def even_Equivalent(s,n):\n        return int(s,2)*2**n\n    \n    def odd_Equivalent(s,n):\n        s1=int(s,2)\n        s2=int(s,2)\n        if (s1&1)==1:\n            s2=s2>>1\n        else:\n            s2=s2<<1\n        return bin(s2)\n    if (n==0):\n        return '0'\n    elif (n==1):\n        return s\n    else:\n        return odd_Equivalent(s,n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = str(bin(n))\n    #print(binary_string[2:])\n    binary_string = binary_string[2:]\n    #print(binary_string)\n    rotate = 0\n    length = len(binary_string)\n    #print(length)\n    if length==1:\n        return 1\n    i = length - 1\n    while i >= 0:\n        if binary_string[i] == '1':\n            rotate += 1\n            if i == length - 1:\n                return rotate\n        else:\n            break\n        i -= 1\n    return rotate\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (s == \"\" or n == \"\"): \n        return\n    if (n == 0): \n        return 1\n    return odd_Equivalent(s[1:],n-1)+odd_Equivalent(s[0],n) \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n == 0 or n == 1):\n        return 0\n    count = 0\n    for i in range(0,len(s)):\n        if(s[i] == '1'):\n            count += 1\n    return count%2\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # s is the original string and n is the number of rotation times\n    \n    if n == 0:\n        return s\n    \n    # s is the original string\n    \n    # Every odd digit in the string is added to the result\n    \n    # If the string contains odd digits, it returns the string.\n    \n    return odd_Equivalent(s[1:],n-1) + s[0]\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return ''.join([('1' if x%2 else '0') for x in s[n:]]+[('1' if x%2 else '0') for x in s[:n]])\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    bin_num = list(bin(n))\n    bin_num.remove('0b')\n    bin_num = \"\".join(bin_num)\n    bin_num = list(bin_num)\n    count = 0\n    for i in range(len(bin_num)):\n        if bin_num[i] == '1':\n            if i == 0:\n                bin_num[i] = '0'\n            elif bin_num[i-1] == '1':\n                bin_num[i] = '0'\n                bin_num[i-1] = '0'\n                count+=1\n            elif bin_num[i-1] == '0':\n                bin_num[i] = '0'\n                count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def bin_to_dec(s):\n        s = list(s)\n        s = list(map(int,s))\n        s = sum(s)\n        return s\n    def dec_to_bin(s):\n        s = list(bin(s))\n        s = s[2:]\n        s = '0'*(8-len(s))+s\n        return s\n    def solve(s,n):\n        if len(s)==1:\n            return bin_to_dec(s)\n        if n==1:\n            return 0\n        d = solve(s[1:],n)\n        if bin_to_dec(s)%2==0:\n            d += solve(s[0]+s[1:],n-1)\n        else:\n            d += solve(s[0]+s[1:],n)\n        return d\n    return solve(s,n)"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    output = 0\n    temp = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        for k in s:\n            if(k == '0'):\n                temp = temp + 1\n        output = output + temp\n        temp = 0\n    return output\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(nestedlist[0]) & set(nestedlist[1]) & set(nestedlist[2])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for items in nestedlist:\n        for element in items:\n            common_elements.add(element)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    out = []\n    for i in nestedlist:\n        for j in i:\n            if j not in out:\n                out.append(j)\n    return out\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    my_list1 = []\n    my_list2 = []\n    for l1 in nestedlist:\n        for l2 in l1:\n            my_list1.append(l2)\n    for l1 in nestedlist:\n        for l2 in l1:\n            if l2 in my_list1:\n                my_list2.append(l2)\n    return my_list2\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    def common(ls1,ls2):\n        ls3 = []\n        for i in ls1:\n            for j in ls2:\n                if i == j:\n                    ls3.append(i)\n        return ls3\n    \n    if type(nestedlist) is not list:\n        raise TypeError(\"Argument must be a list\")\n    if len(nestedlist) == 0:\n        return\n    if type(nestedlist[0]) is not list:\n        raise TypeError(\"Argument must be a list\")\n    \n    \n    l1 = nestedlist[0]\n    for i in range(1,len(nestedlist)):\n        l2 = nestedlist[i]\n        if type(l1) is not list:\n            raise TypeError(\"Argument must be a list\")\n        if len(l1) == 0:\n            return\n        if type(l2) is not list:\n            raise TypeError(\"Argument must be a list\")\n        if len(l2) == 0:\n            return\n        if l1[0]!= l2[0]:\n            return\n        l1 = l1[1:]\n        l2 = l2[1:]\n        \n        \n    common_sublist = common(l1,l2)\n    return common_sublist\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        if len(i) == 0:\n            return common_elements\n        for j in i:\n            if j in common_elements:\n                return common_elements\n            common_elements.append(j)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Check for empty nested lists\n    if nestedlist == []:\n        return []\n    # Check for only one item\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    # Check for all but the first item\n    if len(nestedlist) > 1:\n        for x in nestedlist[1:]:\n            if x not in nestedlist[0]:\n                return x\n    return\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result=[]\n    if len(nestedlist)==0:\n        return result\n    for i in range(len(nestedlist)):\n        if i==0:\n            temp=nestedlist[0]\n            for j in range(len(temp)):\n                if j==0:\n                    if temp[0] not in result:\n                        result.append(temp[0])\n                elif j==1:\n                    if temp[1] not in result:\n                        result.append(temp[1])\n                else:\n                    if temp[j] not in result:\n                        result.append(temp[j])\n        else:\n            temp=nestedlist[i]\n            for j in range(len(temp)):\n                if j==0:\n                    if temp[0] not in result:\n                        result.append(temp[0])\n                elif j==1:\n                    if temp[1] not in result:\n                        result.append(temp[1])\n                else:\n                    if temp[j] not in result:\n                        result.append(temp[j])\n    return result\nprint(common_in_nested_lists([[1,2],[1,3]]))\nprint(common_in_nested_lists([[1,2],[1,3],[1,4],[1,5]]))\nprint(common_in_nested_lists([[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9]]))\nprint(common_in_nested_lists([[1,2],[3,4],[5,6]]))\nprint(common_in_nested_lists([[1,2]]))\nprint(common_in_nested_lists([]))\nprint(common_in_nested_lists([[]]))\nprint(common_in_nested_lists([[]]))\nprint(common_in_nested_lists([[]]))\nprint(common_in_nested_lists([[]]))"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    final_list = []\n    for sublist in nestedlist:\n        final_list += sublist\n    final_set = set(final_list)\n    return final_set\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        if type(nestedlist[i]) == list:\n            if common_in_nested_lists(nestedlist[i]):\n                common_list.append(nestedlist[i])\n        else:\n            if nestedlist[i] in common_list:\n                continue\n            else:\n                common_list.append(nestedlist[i])\n    print(common_list)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        x = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i)==True:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return list1 == []\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return not bool(list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        print(\"List is empty.\")\n    else:\n        print(\"List is not empty.\")\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        print(\"Empty list\")\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if(len(list1[i])>0):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1:\n        for i in range(len(list1)):\n            if list1[i]:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return not list1\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums:\n        return 0\n    else:\n        return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = tuple(nums)\n    nums = list(nums)\n    nums = sum(nums)\n    return nums\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = nums[0]\n    total = 0\n    for n in nums:\n        total += n\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i] * 10 ** (len(nums) - 1 - i)\n    return s\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(map(lambda n: int(n), nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total = total + nums[i] * (10**i)\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x, y: x * 10 + y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(sum(nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for n in nums:\n        result = result * 10 + n\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    answer = 0\n    for i in nums:\n        answer = answer * 10 + i\n    return answer\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for element in test_list:\n        if type(element) == int or type(element) == float:\n            float_list.append(element)\n        else:\n            element = float(element)\n            float_list.append(element)\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        if type(test_list[i]) == str:\n            test_list[i] = float(test_list[i])\n        elif type(test_list[i]) == float:\n            test_list[i] = float(test_list[i])\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                continue\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            list_to_float(test_list[i])\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    converted_list = []\n    for x in test_list:\n        try:\n            converted_list.append(float(x))\n        except:\n            print(f\"{x} is not a float.\")\n    return converted_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_to_float = []\n    for i in range(len(test_list)):\n        float_value = ''\n        for j in range(len(test_list[i])):\n            try:\n                float_value = float(test_list[i][j])\n                test_list[i][j] = float_value\n            except ValueError:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in range(len(test_list)):\n        for column in range(len(test_list[row])):\n            try:\n                test_list[row][column] = float(test_list[row][column])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for element in test_list:\n        try:\n            float(element)\n            return_list.append(float(element))\n        except:\n            pass\n    return return_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_string = string.split(' ')\n    return list_string\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:] : return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end-start)//2\n        if arr[mid] == arr[mid+1]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i])==1:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return recur_search(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    a = len(arr)\n    # if a%2 == 0:\n    if a%2 == 0:\n        mid = int(a/2)\n        if arr[mid] == arr[mid-1]:\n            return arr[mid]\n        else:\n            return search(arr[0:mid])\n    else:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    s = set(arr)\n    for i in arr:\n        if i not in s:\n            return i\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(abs(i[0]*i[1]) for i in list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        if list1[i][0]*list1[i][1] > max_product:\n            max_product = list1[i][0]*list1[i][1]\n    print(max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if list1 == []:\n        return (None,None)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if list1:\n        max_val = list1[0][0] * list1[0][1]\n        for i in range(1, len(list1)):\n            if list1[i][0] * list1[i][1] > max_val:\n                max_val = list1[i][0] * list1[i][1]\n    return max_val\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_num = max(list1, key = lambda x: abs(x[0] * x[1]))\n    return max_num\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # if list1:\n    #     list1 = list(map(int,list1))\n    #     max_product = list1[0]\n    #     for i in range(1, len(list1)):\n    #         if list1[i] > max_product:\n    #             max_product = list1[i]\n    #     return max_product\n    # else:\n    #     return None\n        \n    '''\n    Marks:\n    3\n    [1, -3, 4]\n    [-1, -3, 4]\n    [1, -3, 4]\n    []\n    [1]\n    [1, 2, 3]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1, -3, 4]\n    [1"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    m=0\n    m_abs=0\n    m_ind=0\n    m_ind_abs=0\n    for i in range(0,len(list1)):\n        #print(list1[i])\n        if(list1[i][0]<0):\n            list1[i][0]=list1[i][0]*-1\n        if(list1[i][1]<0):\n            list1[i][1]=list1[i][1]*-1\n        if m<list1[i][0]:\n            m=list1[i][0]\n            m_abs=list1[i][1]\n            m_ind=i\n        if m<list1[i][1]:\n            m=list1[i][1]\n            m_abs=list1[i][0]\n            m_ind=i\n    return (m,m_abs,m_ind)\n    \nif __name__ == \"__main__\":\n    list1 = [(2,-2),(3,4),(-6,8),(7,-8),(-2,6),(-5,2),(-2,-5),(-1,1)]\n    print(\"\\nList:\\n\",list1)\n    print(\"\\nMaximum product of a pair in a list is:\",max_product_tuple(list1))"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        temp.append(list1[i][0] * list1[i][1])\n    return max(temp)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] > max_product:\n                max_product = list1[i][0] * list1[j][0]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    lst = list1\n    max_product = (0, 0)\n    for i in lst:\n        for j in lst:\n            if i[0] == j[0]:\n                continue\n            else:\n                if i[1] * j[1] > max_product[1]:\n                    max_product = i, j\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = []\n    numbers = []\n    for i in range(1,limit):\n        if i in numbers:\n            continue\n        n1 = i\n        for j in range(i+1,limit):\n            if j in numbers:\n                continue\n            n2 = j\n            if is_amicable(n1,n2):\n                numbers.append(n1)\n                numbers.append(n2)\n                amicables.append(n1+n2)\n                amicables.append(n2+n1)\n                break\n    print(sum(amicables))\n    return\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    for num in range(1, limit + 1):\n        sum_of_sum = 0\n        #print('num:', num)\n        for num_iter in range(1, num):\n            #print('num_iter:', num_iter)\n            if num % num_iter == 0:\n                sum_of_sum += num_iter\n                #print('sum_of_sum:', sum_of_sum)\n                if sum_of_sum == num:\n                    #print('this num is amicable to:', num, ', add to amicable_nums list')\n                    amicable_nums.append(num)\n    return sum(amicable_nums)\n    \ndef sum_of_divisors(num):\n    '''\n    Write a function to sum all of the divisors of a number.\n    '''\n    sum_of_divisors = 0\n    for divisor in range(1, num + 1):\n        if num % divisor == 0:\n            sum_of_divisors += divisor\n    return sum_of_divisors\n    \ndef sum_of_divisors_without_adjacent(num):\n    '''\n    Write a function to sum all of the divisors of a number.\n    '''\n    if num % 2 == 0:\n        return 1\n    sum_of_divisors = 0\n    for divisor in range(1, num + 1):\n        if num % divisor == 0:\n            sum_of_divisors += divisor\n    return sum_of_divisors\n    \ndef factorial(num):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    factorial = 1\n    if num == 0:\n        return factorial\n    for x in range(1, num + 1):\n        factorial *= x\n    return factorial\n    \ndef factorial_recursive(num):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * factorial_recursive(num - 1)\n    \ndef sum_of_digits(num):\n    '''\n    Write a function to calculate the sum of the digits of a number.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return (num % 10) + sum_of_digits(num // 10)\n    \ndef sum_of_digits_without_recursion(num):\n    '''\n    Write a function to calculate the sum of the digits of a number.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return (num % 10) + sum_of_digits(num // 10)\n    \ndef sum_of_digits_without_recursion_2(num):\n    '''\n    Write a function to calculate the sum of the digits of a number.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return (num % 10) + (sum_of_digits_without_recursion(num // 10))\n    \ndef sum_of_digits_without_recursion_3(num):\n    '''\n    Write a function to calculate the sum of the digits of a number.\n    '''\n    if num == 0:\n        return 0\n    else:\n        return (num % 10) + (sum_of_digits_without_recursion_3(num // 10))\n    \ndef is_palindrome(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    reverse = 0\n    for x in range(1, num + 1):\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return True if num == reverse else False\n    \ndef is_palindrome_2(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num //= 10\n    return True if reverse == num else False\n    \ndef is_palindrome_3(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    else:\n        return num % 10 == num // 10\n        \ndef is_palindrome_4(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    else:\n        return num % 10 == num // 10 and is_palindrome_4(num // 10)\n    \ndef is_palindrome_5(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    elif num % 10 == 0 and num < 0:\n        return False\n    else:\n        return (num % 10 == num // 10 and is_palindrome_5(num // 10)) or (is_palindrome_5(num // 10) and num % 10 == 0)\n    \ndef is_palindrome_6(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    elif num % 10 == 0 and num < 0:\n        return False\n    else:\n        return is_palindrome_6(num // 10) and (num % 10 == num // 10)\n    \ndef is_palindrome_7(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    elif num % 10 == 0 and num < 0:\n        return False\n    else:\n        return is_palindrome_7(num // 10) or (is_palindrome_7(num // 10) and num % 10 == 0)\n    \ndef is_palindrome_8(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    elif num % 10 == 0 and num < 0:\n        return False\n    else:\n        return (is_palindrome_8(num // 10) and num % 10 == num // 10) or (is_palindrome_8(num // 10) and num % 10 == num // 10)\n    \ndef is_palindrome_9(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    elif num % 10 == 0 and num < 0:\n        return False\n    else:\n        return is_palindrome_9(num // 10) or (is_palindrome_9(num // 10) and num % 10 == num // 10)\n    \ndef is_palindrome_10(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    elif num % 10 == 0 and num < 0:\n        return False\n    else:\n        return (is_palindrome_10(num // 10) and num % 10 == num // 10) or (is_palindrome_10(num // 10) and num % 10 == num // 10)\n    \ndef is_palindrome_11(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    else:\n        return (num % 10 == num // 10 and is_palindrome_11(num // 10)) or (is_palindrome_11(num // 10) and num % 10 == num // 10)\n    \ndef is_palindrome_12(num):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if num == 0:\n        return True\n    else:\n        return (num % 10 == 0 and num < 0) or (is_palindrome_12(num // 10) and num % 10 == num // 10)\n    \ndef is_palindrome_1"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = {}\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if num not in numbers:\n            numbers[num] = sum(i for i in range(1, num) if num % i == 0 and num!= i)\n        if numbers[num]!= 0 and numbers[num]!= num and num!= 1:\n            amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for num in range(1, limit):\n        for divisor in range(1, num):\n            if num % divisor == 0:\n                if (num/divisor) in amicable_numbers:\n                    amicable_numbers.add(num)\n                    amicable_numbers.add(divisor)\n                    break\n                else:\n                    amicable_numbers.add(num)\n                    amicable_numbers.add(divisor)\n    sum = 0\n    for i in amicable_numbers:\n        sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        sum = 0\n        for j in range(1, i):\n            if i == j:\n                continue\n            if is_amicable(i, j):\n                sum += j\n        if sum == i:\n            amicable_numbers.append(i)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        sum_j = 0\n        for j in range(i, limit):\n            if i * j == sum_j + j:\n                sum += i\n                sum += j\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n    total = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    amicable_numbers_dict = {}\n    for number in range(1, limit):\n        for amicable_number in range(1, number):\n            if is_amicable_number(number, amicable_number):\n                total += number\n                amicable_numbers_dict[number] = amicable_number\n                if amicable_number not in amicable_numbers_dict:\n                    amicable_numbers_dict[amicable_number] = number\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        #print(i)\n        a = sum_amicable_numbers(i)\n        #print(a)\n        b = sum_amicable_numbers(a)\n        #print(b)\n        if i == a or i == b:\n            continue\n        if a == b:\n            total = total + a\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    tot = 0\n    n_sum = 0\n    for i in range(2, limit + 1):\n        divisors = list(range(1, i))\n        for div in divisors:\n            if i % div == 0:\n                n_sum += div\n                if div!= i:\n                    n_sum += i\n        if n_sum == i:\n            tot += i\n        n_sum = 0\n    print(tot)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    arccos=math.acos(complex(a,b))\n    return arccos\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a*b.conjugate()\n    #print(c)\n    return cmath.phase(c)"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    return cmath.phase(a)\ndef is_prime(n):\n    '''\n    Write a function that checks whether a number is prime or not.\n    '''\n    if n==0 or n==1:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        for i in range(2,n):\n            if (n%i)==0:\n                return False\n    return True\ndef is_prime_with_condition(n,k):\n    '''\n    Write a function that checks whether a number is prime or not.\n    '''\n    if n==0 or n==1:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        for i in range(2,k):\n            if (n%i)==0:\n                return False\n    return True\ndef is_divisible(a,b):\n    '''\n    Write a function to check whether a number is divisible by another number.\n    '''\n    return a%b==0\ndef power(a,b):\n    '''\n    Write a function that computes a raised to the power of b.\n    '''\n    return a**b\ndef power_with_n_base(a,n,b):\n    '''\n    Write a function that computes the nth power of a to the power of b.\n    '''\n    c=a\n    for i in range(n-1):\n        c=c**b\n    return c\ndef power_with_n_base_using_for(a,n,b):\n    '''\n    Write a function that computes the nth power of a to the power of b using a for loop.\n    '''\n    c=1\n    for i in range(n):\n        c=c*a\n    return c\ndef power_with_n_base_using_while(a,n,b):\n    '''\n    Write a function that computes the nth power of a to the power of b using a while loop.\n    '''\n    c=1\n    i=1\n    while(i<n):\n        c=c*a\n        i+=1\n    return c\ndef power_with_n_base_using_while_and_for(a,n,b):\n    '''\n    Write a function that computes the nth power of a to the power of b using a while loop and a for loop.\n    '''\n    c=1\n    i=1\n    while(i<n):\n        c=c*a\n        i+=1\n    for i in range(n):\n        c=c*a\n    return c\ndef power_with_n_base_using_while_and_for_with_function(a,n,b):\n    '''\n    Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n    '''\n    def multiply_with_power(a,n,b):\n        '''\n        Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n        '''\n        c=1\n        i=1\n        while(i<n):\n            c=c*a\n            i+=1\n        return c\n    def power_with_a_using_function(a,n,b):\n        '''\n        Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n        '''\n        def multiply_with_a(a,n,b):\n            '''\n            Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n            '''\n            c=1\n            i=1\n            while(i<n):\n                c=c*a\n                i+=1\n            return c\n        return multiply_with_a(a,n,b)\n    return multiply_with_power(a,n,b)\ndef power_with_n_base_using_while_and_for_with_function_using_nested_functions(a,n,b):\n    '''\n    Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n    '''\n    def multiply_with_power(a,n,b):\n        '''\n        Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n        '''\n        c=1\n        i=1\n        while(i<n):\n            c=c*a\n            i+=1\n        return c\n    def power_with_a_using_function(a,n,b):\n        '''\n        Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n        '''\n        def multiply_with_a(a,n,b):\n            '''\n            Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n            '''\n            c=1\n            i=1\n            while(i<n):\n                c=c*a\n                i+=1\n            return c\n        return multiply_with_a(a,n,b)\n    return multiply_with_power(a,n,b)\ndef power_with_n_base_using_while_and_for_with_function_using_nested_functions_with_complex_number(a,n,b):\n    '''\n    Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n    '''\n    def multiply_with_complex_number(a,n,b):\n        '''\n        Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n        '''\n        c=a\n        for i in range(n):\n            c=c*a\n        return c\n    return multiply_with_complex_number(a,n,b)\ndef power_with_n_base_using_while_and_for_with_function_using_nested_functions_with_complex_number(a,n,b):\n    '''\n    Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n    '''\n    def multiply_with_complex_number(a,n,b):\n        '''\n        Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n        '''\n        c=a\n        for i in range(n):\n            c=c*a\n        return c\n    return multiply_with_complex_number(a,n,b)\ndef power_with_n_base_using_while_and_for_with_function_using_nested_functions_with_complex_number(a,n,b):\n    '''\n    Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n    '''\n    def multiply_with_complex_number(a,n,b):\n        '''\n        Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n        '''\n        c=a\n        for i in range(n):\n            c=c*a\n        return c\n    def divide_with_complex_number(a,n,b):\n        '''\n        Write a function that computes the nth power of a to the power of b using a while loop and a for loop using functions.\n        '''\n        c=a\n        for i in range(n):\n            c=c*a\n        return c\n    return multiply_with_complex_number(a,n,b)\ndef factorial(n):\n    '''\n    Write a function that computes the factorial of n.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef fac"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(a.real - b.real)/cmath.sqrt(2)*1j\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.degrees(cmath.acos(a.real/abs(a)))\n    return 0\n    # Get the angle in degrees\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a*b\n    c1 = (c.real)**2 + (c.imag)**2\n    ans = cmath.acos(c1/(cmath.sqrt(c1)))\n    return ans\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return cmath.phase(a-b)\nprint(angle_complex(2,3))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    n = (a.real*b.real + a.imaginary*b.imaginary) / (cmath.sqrt(a.real**2 + a.imaginary**2)*cmath.sqrt(b.real**2 + b.imaginary**2))\n    n = abs(n)\n    theta = cmath.acos(n)\n    return (theta*180/cmath.pi)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    return abs(count_0 - count_1)\n    \nif __name__ == '__main__':\n    test = \"101110101011\"\n    print(find_length(test))"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Solution\n    \n    # we need the length of each sub-string. We can make this by keeping track of the number of 0s and 1s. For the given binary string, we can see if it is a valid string by taking an iterator over the string and marking whether the next bit is 0 or 1.\n    # Then, we can iterate over the iterator and keep track of the number of 0s and 1s in the string.\n    \n    # For example: the string \"010\" has the following counts:\n    # 1: 0, 1, 1\n    # 0: 1, 1\n    # 1: 0, 1, 1\n    # This means that we would have 3 0s and 3 1s in the string.\n    \n    \n    length = len(string)\n    \n    max_0 = 0\n    max_1 = 0\n    \n    # for each bit of the string, we increment the count of 0s and 1s in the current string\n    for i in range(length):\n        if string[i] == \"0\":\n            max_0 += 1\n        elif string[i] == \"1\":\n            max_1 += 1\n    \n    # we return the maximum difference between the count of 0s and 1s in the string\n    return max_0 - max_1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #find length of string\n    n = len(string)\n    #find length of string after deleting all 0s\n    m = 0\n    for i in range(n):\n        if string[i] == '0':\n            m += 1\n    #find length of string after deleting all 1s\n    m1 = 0\n    for i in range(n):\n        if string[i] == '1':\n            m1 += 1\n    #find maximum difference between length of string after deleting all 0s and length of string after deleting all 1s\n    return max(m, m1)-min(m, m1)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    len_string = len(string)\n    len_max_sub_string = 0\n    count_max_sub_string = 0\n    for i in range(len_string - 1):\n        count_zero = 0\n        count_one = 0\n        max_count = 0\n        if string[i] == '1':\n            count_one += 1\n        else:\n            count_zero += 1\n        for j in range(i,len_string):\n            if string[j] == '0':\n                count_zero += 1\n            else:\n                count_one += 1\n            if count_zero == count_one:\n                if max_count < count_zero:\n                    max_count = count_zero\n                    count_max_sub_string = i\n            if count_one == count_zero:\n                if max_count < count_one:\n                    max_count = count_one\n                    count_max_sub_string = j\n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    '''\n    Solution:\n    \n    First find the number of 0s and 1s in the string.\n    Then use a sliding window to find the longest number of 1s that is equal to or greater than the number of 0s in the window.\n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 2:\n    \n    Use a stack.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 3:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 4:\n    \n    Try to use two pointers that iterate through both sides of the binary string, counting the 0s and 1s at each step.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 5:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    \n    '''\n    Solution 6:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 7:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 8:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 9:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 10:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 11:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 12:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 13:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 14:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 15:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 16:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 17:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 18:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 19:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 20:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 21:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 22:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 23:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 24:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 25:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 26:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 27:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 28:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 29:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 30:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 31:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 32:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 33:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 34:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 35:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 36:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 37:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 38:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 39:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 40:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 41:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 42:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 43:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 44:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 45:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 46:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 47:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 48:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 49:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 50:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 51:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 52:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 53:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 54:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 55:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 56:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 57:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 58:\n    \n    Use a counter.\n    \n    '''\n    \n    \n    \n    \n    \n    '''\n    Solution 59:\n    \n    Use a counter.\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([len(substring.count('0')) - len(substring.count('1')) for substring in get_substring_in_string(string)])\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return -1\n    max_diff = 0\n    length = len(string)\n    for i in range(length):\n        if string[i] == '0':\n            count_zeros = 1\n        else:\n            count_zeros = 0\n        if string[i + 1] == '0':\n            count_ones = 1\n        else:\n            count_ones = 0\n        curr_diff = count_ones - count_zeros\n        max_diff = max(max_diff, curr_diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = -1\n    if (len(string) == 1):\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    count = 0\n    n = len(string)\n    sub_string = \"\"\n    sub_string_length = 0\n    count_string = 0\n    count_string_length = 0\n    for i in range(n):\n        if string[i] == \"0\":\n            count += 1\n            count_string += 1\n            sub_string = sub_string + string[i]\n            count_string_length = count_string_length + 1\n        else:\n            count -= 1\n            sub_string = sub_string + string[i]\n            count_string_length = count_string_length + 1\n        if count_string_length > count_string:\n            sub_string_length = count_string_length\n            count_string = count_string_length\n    if sub_string_length == n:\n        return 0\n    else:\n        return sub_string_length - count_string\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    # Make a list of the indices of 0s and 1s in the string\n    indices = []\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            indices.append(i)\n    # count the number of 1s and 0s in the indices list\n    for i in range(len(indices)):\n        count = 0\n        for j in range(i, len(indices)):\n            if string[indices[j]] == \"1\":\n                count += 1\n            else:\n                break\n        if max_count < count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0:\n        return 0\n    elif a%b == 0:\n        return a + b\n    else:\n        return sum(b,a%b)\nprint(sum(10,14))"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(a)\n    print(b)\n    sum=0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if(a%b==0):\n        return a+b\n    else:\n        return a*b\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = 0\n    for x in range(1,max(a,b)+1):\n        if a%x == 0 and b%x == 0:\n            result += x\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = []\n    for i in range(1,a):\n        if a % i == 0:\n            x.append(i)\n    for i in range(1,b):\n        if b % i == 0:\n            x.append(i)\n    return sum(set(x))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = set(a)\n    b = set(b)\n    divisors = list(a & b)\n    sum = 0\n    for d in divisors:\n        sum += d\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    assert isinstance(a, int)\n    assert isinstance(b, int)\n    assert a > 0 and b > 0\n    assert a!= b\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = []\n    for i in range(1,a):\n        if (a % i) == 0 and (b % i) == 0:\n            sum.append(i)\n    print (sum)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a>b):\n        for i in range(1,a):\n            if(a%i==0 and b%i==0):\n                if(i>1):\n                    res=i\n                else:\n                    res=1\n                break\n        else:\n            res=0\n    elif(b>a):\n        for i in range(1,b):\n            if(a%i==0 and b%i==0):\n                if(i>1):\n                    res=i\n                else:\n                    res=1\n                break\n        else:\n            res=0\n    else:\n        res=0\n    return(res)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    a_factors = get_factors(a)\n    b_factors = get_factors(b)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    listOfWords = list(str.split())\n    filtered = list(filter(lambda x : len(x) > n, listOfWords))\n    filtered =''.join(filtered)\n    print(filtered)\n    return filtered\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_words = []\n    \n    for word in str.split():\n        if len(word) > n:\n            list_words.append(word)\n            \n    return list_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_dict = {}\n    for word in str:\n        if len(word) > n:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n    return word_dict\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    word_len = []\n    for word in words:\n        if len(word) > n:\n            word_len.append(word)\n    return word_len\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(\" \") if len(word) >= n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split(\" \"):\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = []\n    for word in str:\n        if len(word) > n:\n            lst.append(word)\n    return lst\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return list(filter(lambda w: len(w) > n, str))\n    \n    \n    \nprint(long_words(3, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(1, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(4, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(1, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(0, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(9, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(7, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", \"apple\", \"cat\", \"dog\", \"water\", \"seal\"]))\nprint(long_words(2, [\"a\", "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) >= n:\n            long_words_list.append(word)\n    return long_words_list\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    ## what if we multiply a row and a column\n    # 1. diagonal elements are the same\n    # 2. off-diagonal elements are all different\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list):\n        return False\n    if len(my_matrix)!= int(len(my_matrix)/2):\n        return False\n    if my_matrix == [[1]]:\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # 1st case - no n\n    # 2nd case - size!= n\n    # 3rd case - n!= 1\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # Check if the sum of rows/columns equals the length of the matrix\n    if sum([len(my_matrix[i]) for i in range(len(my_matrix))])!= len(my_matrix):\n        return False\n    # Check if the sum of rows/columns equals the length of the matrix\n    if sum([sum(my_matrix[i]) for i in range(len(my_matrix))])!= len(my_matrix):\n        return False\n    # Check if the rows/columns are equal\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix[i][0]):\n            return False\n    # Check if the rows/columns are equal\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i!= j and my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def is_magic_square(my_matrix):\n        #try:\n        if len(my_matrix)!= len(my_matrix[0]):\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # checking if any of the matrix is not a magic square\n    for row in range(len(my_matrix)):\n        for column in range(len(my_matrix)):\n            if my_matrix[row][column]!= (row + column + 1):\n                return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for each square whether they are all equal\n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[row])):\n            if my_matrix[row][col]!= (row + 1) * (col + 1):\n                return False\n    \n    # Check for each corner whether they are all equal\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[i][(len(my_matrix) - 1) - i]:\n            return False\n    \n    # Check for each edge whether they are all equal\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[(len(my_matrix) - 1) - i][i]:\n            return False\n    \n    # Return True if magic_square\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list) or not all([isinstance(item, list) for item in my_matrix]):\n        raise TypeError(\"matrix must be a list of lists\")\n    if any(len(i)!= len(my_matrix[0]) for i in my_matrix) or any(len(item)!= len(my_matrix) for item in my_matrix):\n        raise ValueError(\"matrix must be a square matrix\")\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    for i in range(rows):\n        row = my_matrix[i]\n        for j in range(cols):\n            if j+i >= cols or j+i < 0:\n                raise ValueError(\"matrix must be a square matrix\")\n            if row[j]!= row[j+i] or row[j]!= my_matrix[j+i]:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not is_square(my_matrix):\n        return False\n    if not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n    # row_sum = sum(sum(my_matrix, axis=1) for my_matrix in my_matrix)\n    # col_sum = sum(sum(my_matrix, axis=0) for my_matrix in my_matrix)\n    # if row_sum!= col_sum:\n    #     return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square = True\n    if len(my_matrix) == len(my_matrix[0]):\n        for row in range(len(my_matrix)):\n            for column in range(len(my_matrix[row])):\n                if my_matrix[row][column]!= (row + column + 1):\n                    print('Magic Square is not magic!')\n                    magic_square = False\n                    break\n    else:\n        print('Magic Square is not magic!')\n        magic_square = False\n    return magic_square\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    if len(nums) == 0:\n        return None\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_occur = max(d.values())\n    max_occ = []\n    for key in d:\n        if d[key] == max_occur:\n            max_occ.append(key)\n    return max_occ[0]\ndef square_root(n):\n    '''\n    Write a function that returns the square root of a given number.\n    '''\n    if n == 0:\n        return 0\n    l = 0\n    r = n\n    while l <= r:\n        m = (l+r) // 2\n        if m*m == n:\n            return m\n        elif m*m > n:\n            r = m - 1\n        else:\n            l = m + 1\n    return m\ndef min_rotations(array):\n    '''\n    Write a function that returns the minimum number of rotations required to sort the array.\n    '''\n    d = defaultdict(list)\n    for i in array:\n        d[i].append(i)\n    d = dict(sorted(d.items(), key=lambda x:x[1]))\n    arr = list(d.values())\n    arr = sorted(arr, reverse=True)\n    n = len(arr)\n    for i in range(n):\n        if i < n-1 and arr[i] > arr[i+1]:\n            return i+1\n    return 0\ndef sum_of_squares(nums):\n    '''\n    Write a function that returns the sum of the squares of all the numbers in the list.\n    '''\n    s = 0\n    for i in nums:\n        s += i**2\n    return s\ndef reverse_words(sentence):\n    '''\n    Write a function that reverses the words in a given sentence.\n    '''\n    d = {}\n    s = \"\"\n    for i in sentence:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in range(len(d)):\n        if d[i] > 0:\n            s += d[i]*i\n    s = s.split(\" \")\n    for i in range(len(s)):\n        s[i] = s[i][::-1]\n    s = \" \".join(s)\n    return s\ndef sort_colors(colors):\n    '''\n    Write a function to sort the colors of the following array\n    in lexicographic order\n    '''\n    e = sorted(colors, key=lambda x:(\"1\", \"0\", \"2\"), reverse=True)\n    return e\ndef reverse_vowels(word):\n    '''\n    Write a function that returns the word reversed.\n    '''\n    vowels = \"aeiouAEIOU\"\n    l, r = 0, len(word)-1\n    s = \"\"\n    while l <= r:\n        if word[l] not in vowels:\n            s = s + word[l]\n            l = l + 1\n        elif word[r] not in vowels:\n            s = s + word[r]\n            r = r - 1\n        else:\n            s = s + word[l]\n            l = l + 1\n            r = r - 1\n    return s\ndef zero_pad(digits, total):\n    '''\n    Write a function that returns a list of strings with zeros inserted in between every 3 numbers.\n    '''\n    d = list(range(total))\n    for i in range(len(digits)):\n        d[3*i:3*i+3] = digits[i]\n    return d\ndef mult_by_three(digits):\n    '''\n    Write a function that returns a list of strings with 3 multiplied together.\n    '''\n    d = []\n    for i in digits:\n        d.append(str(i)*3)\n    return d\ndef count_occurences(word, letter):\n    '''\n    Write a function that returns the number of times a given letter appears in a string.\n    '''\n    d = 0\n    for i in word:\n        if i == letter:\n            d += 1\n    return d\ndef count_matches(s1, s2):\n    '''\n    Write a function that returns the number of times a given letter appears in both strings.\n    '''\n    d = 0\n    for i in s1:\n        if i in s2 and i!= \" \":\n            d += 1\n    return d\ndef unique_letters(word):\n    '''\n    Write a function that returns the number of unique letters in the given string.\n    '''\n    d = set()\n    for i in word:\n        if i not in d:\n            d.add(i)\n    return len(d)\ndef group_anagrams(words):\n    '''\n    Write a function that returns a dictionary that maps words to lists of anagrams.\n    '''\n    d = defaultdict(list)\n    for i in words:\n        s = \"\".join(sorted(i))\n        d[s].append(i)\n    return d\ndef all_anagrams(words):\n    '''\n    Write a function that returns a list of all anagrams in a given list of words.\n    '''\n    d = []\n    for i in words:\n        s = \"\".join(sorted(i))\n        d.append(s)\n    return set(d)\ndef words_with_anagrams(words):\n    '''\n    Write a function that returns a dictionary that maps words to lists of anagrams.\n    '''\n    d = {}\n    for i in words:\n        s = \"\".join(sorted(i))\n        if s in d:\n            d[s].append(i)\n        else:\n            d[s] = [i]\n    return d\ndef letter_histogram(words):\n    '''\n    Write a function that returns a dictionary that maps letters to the number of times they occur in the given string.\n    '''\n    d = {}\n    for i in words:\n        for j in i:\n            if j not in d:\n                d[j] = 1\n            else:\n                d[j] += 1\n    return d\ndef letter_frequencies(words):\n    '''\n    Write a function that returns a dictionary that maps letters to the number of times they occur in the given string.\n    '''\n    d = {}\n    for i in words:\n        for j in i:\n            if j not in d:\n                d[j] = 1\n            else:\n                d[j] += 1\n    return d\ndef average_word_length(words):\n    '''\n    Write a function that returns the average word length.\n    '''\n    l = []\n    for i in words:\n        l.append(len(i))\n    return sum(l)/len(l)\ndef count_characters(word):\n    '''\n    Write a function that returns the number of characters in a given string.\n    '''\n    c = 0\n    for i in word:\n        c += 1\n    return c\ndef count_vowels(word):\n    '''\n    Write a function that returns the number of vowels in a given string.\n    '''\n    v = 0\n    vowels = \"aeiouAEIOU\"\n    for i in word:\n        if i in vowels:\n            v += 1\n    return v\ndef count_consonants(word):\n    '''\n    Write a function that returns the number of consonants in a given string.\n    '''\n    c = 0\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    for i in word:\n        if i in consonants:\n            c += 1\n    return c\ndef prefix_and_suffix(word):\n    '''\n    Write a function that returns a dictionary that maps prefixes of the given word to possible suffixes.\n    '''\n    d = {}\n    for i in range(len(word)):\n        if word[:i+1] in d:\n            d[word[:i+1]].append(word[i+1:])\n        else:\n            d[word[:"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_count = 0\n    for k in d.keys():\n        if d[k] > max_count:\n            max_count = d[k]\n    for k in d.keys():\n        if d[k] == max_count:\n            return k\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash_table = defaultdict(int)\n    for i in nums:\n        hash_table[i] += 1\n    max_count = 0\n    max_item = 0\n    for i in hash_table.keys():\n        if hash_table[i] > max_count:\n            max_count = hash_table[i]\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # s = defaultdict(int)\n    # for i in range(len(nums)):\n    #     s[nums[i]] += 1\n    # print(s)\n    # return max(s,key=lambda key: s[key])\n    \n    d = {}\n    for i in range(len(nums)):\n        if nums[i] in d:\n            d[nums[i]] += 1\n        else:\n            d[nums[i]] = 1\n    return max(d,key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for num in nums:\n        dic[num] += 1\n    max_val = 0\n    max_key = 0\n    for key in dic:\n        if dic[key] > max_val:\n            max_val = dic[key]\n            max_key = key\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    maxi = -1\n    for i in range(len(nums)):\n        if nums[i] in d:\n            d[nums[i]] += 1\n        else:\n            d[nums[i]] = 1\n        if d[nums[i]] > maxi:\n            maxi = d[nums[i]]\n            max_item = nums[i]\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occ = defaultdict(int)\n    for num in nums:\n        occ[num] += 1\n    max_num = max(occ.items(), key = lambda x:x[1])\n    return max_num[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max(set(nums), key=nums.count)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # count the frequency of each number\n    frequencies = defaultdict(int)\n    for num in nums:\n        frequencies[num] += 1\n    # sort by the value of the key\n    for key, value in frequencies.items():\n        if max(frequencies.values()) == value:\n            return key\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1[::-1].translate({ord('a'):None, ord('e'):None, ord('i'):None, ord('o'):None, ord('u'):None, ord('y'):None})\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_string = ''\n    for i in str1:\n        if i in 'aeiouAEIOU':\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str_list = list(str1)\n    i = 0\n    j = len(str_list) - 1\n    while i < j:\n        if str_list[i] not in vowels and str_list[j] not in vowels:\n            i += 1\n            j -= 1\n        elif str_list[i] in vowels:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    return ''.join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    list1 = list(str1)\n    start_idx = 0\n    end_idx = len(str1) - 1\n    while start_idx < end_idx:\n        if list1[start_idx] not in vowels:\n            start_idx += 1\n        elif list1[end_idx] not in vowels:\n            end_idx -= 1\n        else:\n            list1[start_idx], list1[end_idx] = list1[end_idx], list1[start_idx]\n            start_idx += 1\n            end_idx -= 1\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for letter in str1:\n        if letter in vowels:\n            new_str = new_str + letter\n            new_str = new_str + \"o\" + letter\n        else:\n            new_str = new_str + letter\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    index_vowels = []\n    new_str = ''\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    vowels.add('y')\n    str2 = list(str1)\n    str2 = str2[::-1]\n    for index, char in enumerate(str2):\n        if char in vowels:\n            str2[index] = char\n    return ''.join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str2 = \"\"\n    for l in str1:\n        if l in vowels:\n            str2 += l\n    return str2\nprint(reverse_vowels(\"hello\"))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str2 = []\n    for i in str1:\n        if i not in vowels:\n            str2.append(i)\n    str3 = ''.join(str2)\n    return str3\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(list('aeiou'))\n    new = ''.join(list(filter(lambda x: x not in vowels, list(str1))))\n    return new\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(map(str,tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #string = str(tup1)\n    #return string\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for item in tup1:\n        tup_str += str(item) +''\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1=''\n    for i in range(0,len(tup1)):\n        str1+=str(tup1[i])+'\\t'\n    return str1\n    \n    \ndef tup_add(tup1,tup2):\n    '''\n    Write a function to add two tuples element-wise.\n    '''\n    if len(tup1)!=len(tup2):\n        return None\n    new_tup=[]\n    for i in range(0,len(tup1)):\n        new_tup.append(tup1[i]+tup2[i])\n    return tuple(new_tup)\n    \n    \ndef tup_bool(tup1,tup2):\n    '''\n    Write a function to check if a tuple is a superset of a given tuple.\n    '''\n    if len(tup1)!=len(tup2):\n        return False\n    for i in range(0,len(tup1)):\n        if tup1[i]!=tup2[i]:\n            return False\n    return True\n    \n    \ndef tup_subtract(tup1,tup2):\n    '''\n    Write a function to subtract two tuples element-wise.\n    '''\n    if len(tup1)!=len(tup2):\n        return None\n    new_tup=[]\n    for i in range(0,len(tup1)):\n        new_tup.append(tup1[i]-tup2[i])\n    return tuple(new_tup)\n    \n    \ndef tup_multiply(tup1,tup2):\n    '''\n    Write a function to multiply two tuples element-wise.\n    '''\n    if len(tup1)!=len(tup2):\n        return None\n    new_tup=[]\n    for i in range(0,len(tup1)):\n        new_tup.append(tup1[i]*tup2[i])\n    return tuple(new_tup)\n    \n    \ndef tup_divide(tup1,tup2):\n    '''\n    Write a function to divide two tuples element-wise.\n    '''\n    if len(tup1)!=len(tup2):\n        return None\n    new_tup=[]\n    for i in range(0,len(tup1)):\n        new_tup.append(tup1[i]/tup2[i])\n    return tuple(new_tup)\n    \n    \ndef tup_sqrt(tup1):\n    '''\n    Write a function to find the square root of a tuple.\n    '''\n    if len(tup1)==1:\n        return tup1[0]\n    if len(tup1)==2:\n        return tup1[0]**2+tup1[1]**2\n    new_tup=[]\n    for i in range(0,len(tup1)):\n        new_tup.append((tup1[i]**2)/2)\n    return tuple(new_tup)\n    \n    \ndef tup_sqr_sum(tup1):\n    '''\n    Write a function to find the sum of the squares of the elements in a tuple.\n    '''\n    new_tup=[]\n    for i in range(0,len(tup1)):\n        new_tup.append((tup1[i]**2))\n    return sum(new_tup)\n    \n    \ndef tup_length(tup1):\n    '''\n    Write a function to find the length of a tuple.\n    '''\n    return len(tup1)\n    \n    \ndef tup_len_rec(tup1):\n    '''\n    Write a function to find the length of a tuple using recursion.\n    '''\n    if len(tup1)==1:\n        return 1\n    return 1+tup_len_rec(tup1[1:])\n    \n    \ndef tup_index(tup1,index):\n    '''\n    Write a function to find the value of an element in a tuple.\n    '''\n    if index<0 or index>=len(tup1):\n        return None\n    return tup1[index]\n    \n    \ndef tup_index_rec(tup1,index):\n    '''\n    Write a function to find the value of an element in a tuple using recursion.\n    '''\n    if index<0 or index>=len(tup1):\n        return None\n    if len(tup1)==1:\n        return tup1[0]\n    return tup_index_rec(tup1[1:],index)+1\n    \n    \ndef tup_reverse(tup1):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    new_tup=tup1[::-1]\n    return new_tup\n    \n    \ndef tup_sorted(tup1):\n    '''\n    Write a function to sort a tuple.\n    '''\n    new_tup=tup1[:]\n    new_tup.sort()\n    return new_tup\n    \n    \ndef tup_sort_rec(tup1):\n    '''\n    Write a function to sort a tuple using recursion.\n    '''\n    if len(tup1)==1:\n        return tup1\n    new_tup=tup1[:]\n    new_tup.sort()\n    return tup_sort_rec(new_tup[1:])+[new_tup[0]]\n    \n    \ndef tup_split(tup1):\n    '''\n    Write a function to split a tuple into two parts.\n    '''\n    new_tup=tup1[:]\n    return new_tup[:len(tup1)//2],new_tup[len(tup1)//2:]\n    \n    \ndef tup_split_rec(tup1,split_size):\n    '''\n    Write a function to split a tuple into two parts using recursion.\n    '''\n    if len(tup1)<split_size:\n        return None\n    return tup_split_rec(tup1[1:],split_size)+(tup1[:1],)\n    \n    \ndef tup_subtract_rec(tup1,tup2):\n    '''\n    Write a function to subtract two tuples element-wise using recursion.\n    '''\n    if len(tup1)!=len(tup2):\n        return None\n    if len(tup1)==0:\n        return tuple()\n    if len(tup1)==1:\n        return tup_subtract_rec(tup1[1:],tup2)+(tup1[0]-tup2,)\n    new_tup=tup_subtract_rec(tup1[1:],tup2)+((tup1[0]-tup2),)\n    return new_tup\n    \n    \ndef tup_multiply_rec(tup1,tup2):\n    '''\n    Write a function to multiply two tuples element-wise using recursion.\n    '''\n    if len(tup1)!=len(tup2):\n        return None\n    if len(tup1)==0:\n        return tuple()\n    if len(tup1)==1:\n        return tup_multiply_rec(tup1[1:],tup2)+(tup1[0]*tup2,)\n    new_tup=tup_multiply_rec(tup1[1:],tup2)+((tup1[0]*tup2),)\n    return new_tup\n    \n    \ndef tup_divide_rec(tup1,tup2):\n    '''\n    Write a function to divide two tuples element-wise using recursion.\n    '''\n    if len(tup1)!=len(tup2):\n        return None\n    if len(tup1)==0:\n        return tuple()\n    if len(tup1)==1:\n        return tup_divid"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(e) for e in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = str(tup1)\n    print(tup_str)\n    return tup_str\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum = 0\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            negativenum += nums[i]\n    return negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    n = 0\n    for i in nums:\n        if i < 0:\n            n += i\n    return n\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            return nums[i]\n    return sum(nums)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i<0:\n            sum += i\n    return sum\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in range(0, len(nums)):\n        if nums[i] < 0:\n            result = result + nums[i]\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    negative_num = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_num += num\n            \n    return negative_num\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negativenum = 0\n    for item in nums:\n        if item < 0:\n            sum_negativenum += item\n    return sum_negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    # solution without sum_negativenum\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**(1/2)) + 1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def number_hexagonal(n, left): \n        if n == 0:\n            return left \n        else:\n            return (2 * left) + 1 \n    n = n - 1\n    return number_hexagonal(n, n)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # parameter\n    n = int(n)\n    # calculate the hexagonal number\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return hexagonal_num(n-1) + 2*hexagonal_num(n-2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return 6*(2*n-1)*hexagonal_num(n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(3*n-1)//2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1)) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    else:\n        return hexagonal_num(n-1) * 3 + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(3*n - 1)/2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int(n*(n+1)*0.5)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    print(sum(1 for n in nums if n == 0))\n    print(sum(1 for n in nums if n!= 0))\n    print(sum(1 for n in nums if n == 0) / sum(1 for n in nums if n!= 0))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # count non-zero elements\n    # count zeroes\n    n = 0\n    z = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            z += 1\n        else:\n            n += 1\n    print(n, z)\n    return n / z\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero += 1\n    return zero_count/non_zero\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_of_zero = 0\n    num_of_non_zero = 0\n    for i in nums:\n        if i == 0:\n            num_of_zero += 1\n        else:\n            num_of_non_zero += 1\n    return num_of_zero / num_of_non_zero\n    \n    # print(num_of_zero / num_of_non_zero)\n    \ndef zero_count_fast(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_of_non_zero = 0\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            num_of_non_zero += 1\n    return zero_count / num_of_non_zero\n    # print(zero_count / num_of_non_zero)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = 0\n    zeroes = 0\n    nonzeroes = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / len(nums)\n    #return 0.5 * (nums.count(0) + len(nums) - nums.count(0)) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt_0 = 0\n    cnt_1 = 0\n    for i in nums:\n        if i == 0:\n            cnt_0 += 1\n        else:\n            cnt_1 += 1\n    return cnt_0 / cnt_1\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt_0 = 0\n    cnt_1 = 0\n    for i in nums:\n        if i == 0:\n            cnt_0 += 1\n        else:\n            cnt_1 += 1\n    return cnt_0 / cnt_1\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt_0 = 0\n    cnt_1 = 0\n    for i in nums:\n        if i == 0:\n            cnt_0 += 1\n        else:\n            cnt_1 += 1\n    return cnt_0 / cnt_1\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt_0 = 0\n    cnt_1 = 0\n    for i in nums:\n        if i == 0:\n            cnt_0 += 1\n        else:\n            cnt_1 += 1\n    return cnt_0 / cnt_1\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt_0 = 0\n    cnt_1 = 0\n    for i in nums:\n        if i == 0:\n            cnt_0 += 1\n        else:\n            cnt_1 += 1\n    return cnt_0 / cnt_1\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    cnt_0 = 0\n    cnt_1 = 0\n    for i in nums:\n        if i == 0:\n            cnt_0 += 1\n        else:\n            cnt_1 += 1\n    return cnt_0 / cnt_1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n    return zero_count / zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    nonzeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            nonzeroes += 1\n    return zeroes / nonzeroes\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # the base case \n    if n < 0: \n        return False\n    if n == 0: \n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n!= 0:\n        if (n & 1)!= 0:\n            return False\n        n = n >> 1\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while(n>=1):\n        if(n%2==0):\n            n=n/2\n        else:\n            return False\n    if(n==1):\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if (n<2):\n        return False\n    \n    while (n%2 == 0):\n        n = n/2\n    \n    while (n>2):\n        if (n%2!= 0):\n            return False\n        n = n/2\n    \n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(n + 1):\n        if i == 0:\n            continue\n        elif i % 2 == 0:\n            continue\n        elif is_power(i, 2):\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while n>1:\n        if (n%2)==0:\n            n=n//2\n            i=i+1\n        else:\n            break\n    if i>0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    s = 0\n    while n!= 0:\n        s += n%2\n        n = int(n/2)\n    return s%2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0):\n        return False\n    if (n == 1):\n        return True\n    if ((n % 2 == 0) and (n!= 0)):\n        return False\n    else:\n        while(n % 2 == 0):\n            n = n // 2\n        i = 3\n        while(i <= n):\n            if (n % i == 0):\n                return False\n            i = i + 2\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 1: \n        if n % 2 == 0: \n            n = n / 2\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n == 0):\n        return True\n    if(n == 1):\n        return False\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #pi = 3.14\n    #radius = int(input(\"Enter radius of the circle: \"))\n    circumference = 2 * pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Formula: \n    # 2*pi*r = 2*pi*r*r\n    # 2*pi*r = pi*r*r\n    # 2*pi*r = 2*pi*r^2\n    return 2*math.pi*r**2\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n    \ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    import math\n    return math.pi * r * r\n    "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    radius = r\n    return 2*pi*radius\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    circumference = 2*pi*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    single_set = []\n    for single_list in test_list:\n        for item in single_list:\n            single_set.append(item)\n    return single_set\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    out = set()\n    for item in test_list:\n        for x in item:\n            out.add(x)\n    return out\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    temp = []\n    for item in test_list:\n        for num in item:\n            if isinstance(num, int):\n                temp.append(num)\n    return temp\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    else:\n        flat_list = []\n        for item in test_list:\n            for element in item:\n                flat_list.append(element)\n        return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    tmp_set = set()\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            tmp_set.add(test_list[i][j])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        for item in sub_list:\n            flat_list.append(item)\n    return flat_list\n    \ndef test_extract_singly():\n    '''\n    >>> extract_singly([[1, 2], [3, 4], [5, 6, 7]])\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> extract_singly([[1], [2], [3], [4], [5], [6], [7]])\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> extract_singly([[1, 2, 3]])\n    [1, 2, 3]\n    >>> extract_singly([[1, 2]])\n    [1, 2]\n    >>> extract_singly([[]])\n    []\n    >>> extract_singly([])\n    []\n    >>> extract_singly([[1, 2, 3, 4]])\n    [1, 2, 3, 4]\n    >>> extract_singly([[1], [2], [3], [4], [5], [6], [7], [8]])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    >>> extract_singly([[1], [2], [3], [4], [5], [6], [7], [8], []])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    '''\n    \n    \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result_set = set()\n    for single_list in test_list:\n        for element in single_list:\n            result_set.add(element)\n    return result_set\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list == None:\n        return []\n    elif isinstance(test_list, int):\n        return test_list\n    else:\n        for item in test_list:\n            if isinstance(item, int):\n                return item\n        else:\n            if len(test_list) == 0:\n                return []\n            elif len(test_list) == 1:\n                return extract_singly(test_list[0])\n            else:\n                return extract_singly(test_list[0]) + extract_singly(test_list[1:])\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # if nums is empty: return nums\n    # if len(nums) == 1: return nums\n    # if len(nums) == 2: return nums\n    # if len(nums) == 3: return nums\n    # if len(nums) == 4: return nums\n    # if len(nums) > 4:\n    #     nums.reverse()\n    #     i = 1\n    #     while i < len(nums) - 1:\n    #         j = i\n    #         while j > 0 and nums[j-1] > nums[j]:\n    #             swap(nums, j, j-1)\n    #             j -= 1\n    #         i += 1\n    # return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pancake_sort(nums):\n        for i in range(len(nums)-1,0,-1):\n            max_num = i\n            for j in range(i-1,0,-1):\n                if nums[j] < nums[max_num]:\n                    max_num = j\n            nums[i],nums[max_num] = nums[max_num],nums[i]\n            \n        for j in range(len(nums)-1,0,-1):\n            max_num = j\n            for i in range(j-1,-1,-1):\n                if nums[i] < nums[max_num]:\n                    max_num = i\n            nums[j],nums[max_num] = nums[max_num],nums[j]\n        return nums\n    return pancake_sort(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Write your code here.\n    # 3\n    # nums = [3, 2, 1]\n    # sorted_nums = [1, 2, 3]\n    # nums = [1, 3, 2]\n    # sorted_nums = [1, 2, 3]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the max in the list\n        j = i\n        while j > 0 and nums[j] < nums[j-1]:\n            tmp = nums[j]\n            nums[j] = nums[j-1]\n            nums[j-1] = tmp\n            j -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #sorting in reverse order\n    for i in range(len(nums)-1,0,-1):\n        swap(nums,i,0)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # for each item in the list, i.\n    # find the index of the item in the list (starting at the end)\n    # swap the item to the index\n    # increment the index by 1 (so we know where to put the item)\n    # make sure to check if the item is already at the end of the list\n    # swap the item back into the list\n    # continue to do this until the list is ordered\n    # at the end return the original list\n    size = len(nums)\n    if size <= 1:\n        return nums\n    \n    for i in range(size, 0, -1):\n        j = i\n        while j > 0:\n            if nums[j - 1] > nums[j]:\n                nums[j - 1], nums[j] = nums[j], nums[j - 1]\n            else:\n                break\n            j -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, k):\n        temp = nums[k]\n        for i in range(k, len(nums) - 1):\n            nums[i] = nums[i + 1]\n        nums[len(nums) - 1] = temp\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    p = []\n    k = len(nums)\n    while len(p)!= k:\n        p.append(nums.index(max(nums)))\n        nums.pop(p[-1])\n    return p + sorted(nums)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            return True\n    return False\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    #for index,value in enumerate(list1):\n    for i,j,k in zip(list1,list2,list3):\n        if i == j and i == k:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[s]!= list2[s] and list2[s] == list3[s]:\n            s += 1\n            continue\n        if list1[s] == list2[s] and list2[s] == list3[s]:\n            s += 1\n            continue\n        if list1[s] == list2[s] and list3[s] == list1[s]:\n            s += 1\n            continue\n        if list1[s] == list3[s] and list2[s] == list1[s]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_same(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[s] == list2[s] and list2[s] == list3[s]:\n            s += 1\n            continue\n        if list1[s] == list2[s] and list3[s] == list1[s]:\n            s += 1\n            continue\n        if list1[s] == list3[s] and list2[s] == list1[s]:\n            s += 1\n            continue\n        if list1[s] == list3[s] and list2[s] == list2[s]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_last_same(list1,list2):\n    '''\n    Write a function to count number items that are identical in the last position of three given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[n-1] == list2[n-1] and list2[n-1] == list3[n-1]:\n            s += 1\n            continue\n        if list1[n-1] == list2[n-1] and list3[n-1] == list1[n-1]:\n            s += 1\n            continue\n        if list1[n-1] == list3[n-1] and list2[n-1] == list1[n-1]:\n            s += 1\n            continue\n        if list1[n-1] == list3[n-1] and list2[n-1] == list2[n-1]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_last_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the last position of three given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[n-1] == list2[n-1] and list2[n-1] == list3[n-1]:\n            s += 1\n            continue\n        if list1[n-1] == list2[n-1] and list3[n-1] == list1[n-1]:\n            s += 1\n            continue\n        if list1[n-1] == list3[n-1] and list2[n-1] == list1[n-1]:\n            s += 1\n            continue\n        if list1[n-1] == list3[n-1] and list2[n-1] == list2[n-1]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_samepair(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[s] == list2[s]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_last_samepair(list1,list2):\n    '''\n    Write a function to count number items that are identical in the last position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[n-1] == list2[n-1]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_last_samepair_2(list1,list2):\n    '''\n    Write a function to count number items that are identical in the last position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[n-1] == list2[n-1]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_last_samepair_3(list1,list2):\n    '''\n    Write a function to count number items that are identical in the last position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[n-1] == list2[n-1]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_samepair_3(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[s] == list2[s]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_last_samepair_4(list1,list2):\n    '''\n    Write a function to count number items that are identical in the last position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[n-1] == list2[n-1]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_samepair_4(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[s] == list2[s]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_last_samepair_5(list1,list2):\n    '''\n    Write a function to count number items that are identical in the last position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[n-1] == list2[n-1]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_samepair_5(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[s] == list2[s]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_last_samepair_6(list1,list2):\n    '''\n    Write a function to count number items that are identical in the last position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[n-1] == list2[n-1]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_samepair_6(list1,list2):\n    '''\n    Write a function to count number items that are identical in the same position of two given lists.\n    '''\n    n = len(list1)\n    s = 0\n    while s < n:\n        if list1[s] == list2[s]:\n            s += 1\n            continue\n        s += 1\n    return s\n    \ndef count_last_samepair_7(list1,list2):\n    '''\n    Writ"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            for k in range(len(list1)):\n                if(list1[i]==list2[j] and list2[j]==list3[k]):\n                    count+=1\n                    break\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    count=count+1\n    return count\nprint(count_samepair([1,2,3],[1,2,3],[1,2,3]))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    print(\"How many elements have the same values in the same position of three lists?\\n\")\n    index=0\n    if len(list1)==0 or len(list2)==0 or len(list3)==0:\n        return 0\n    else:\n        while index<len(list1):\n            if list1[index]==list2[index] and list2[index]==list3[index]:\n                print(\"There are {0} elements with the same values in the same position of three lists.\".format(3))\n                break\n            index+=1\n            if index==len(list1):\n                print(\"There are no elements with the same values in the same position of three lists.\")\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                count+=1\n        return count\n    else:\n        return 'Invalid lists'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c=0\n    if len(list1)==len(list2)==len(list3)==len(set(list1)):\n        for i in range(len(list1)):\n            if list1[i]==list2[i]==list3[i]:\n                c+=1\n        return c\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count=0\n    \n    for i in Input:\n        if(isinstance(i, list)):\n            list_count+=1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count=0\n    for item in Input:\n        if type(item)==list:\n            list_count=list_count+1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    input = Input\n    return len(input)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code here\n    count = 0\n    for i in Input:\n        count = count + 1\n    return count\n    \ndef find_odd_numbers(Input):\n    '''\n    Write a function to find sum of odd numbers in the given tuple.\n    '''\n    # your code here\n    sum = 0\n    for i in range(0,len(Input)):\n        if(Input[i]%2!=0):\n            sum = sum + Input[i]\n    return sum\n    \ndef find_product(Input):\n    '''\n    Write a function to find product of numbers in the given tuple.\n    '''\n    # your code here\n    prod = 1\n    for i in Input:\n        prod = prod * i\n    return prod\n    \ndef find_even_numbers(Input):\n    '''\n    Write a function to find sum of even numbers in the given tuple.\n    '''\n    # your code here\n    sum = 0\n    for i in range(0,len(Input)):\n        if(Input[i]%2==0):\n            sum = sum + Input[i]\n    return sum\n    \ndef find_all_numbers(Input):\n    '''\n    Write a function to find all the numbers from the tuple in sorted order.\n    '''\n    # your code here\n    \n    List = []\n    for i in Input:\n        List.append(i)\n    List.sort()\n    return List\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0\n    for i in range(0,len(Input)):\n        if isinstance(Input[i],list):\n            lists+=1\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(0,len(Input)):\n        if type(Input[i]) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    # Input = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # Output = 5\n    #  (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # Output = len(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(len(Input))\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input[0:6])\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input[-1])\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input[::-1])\n    # Output = (5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = 5\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input[::-2])\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input[::-1])\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = 5\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Input)\n    # Output = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n    # print(Inpu"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return input.count(tuple) \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(set([i for i in Input if isinstance(i, list)]))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxdiff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(abs(arr[i]-arr[j]) > maxdiff):\n                maxdiff = abs(arr[i]-arr[j])\n    print('Maximum difference between any two elements :', maxdiff)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0,len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if arr == None:\n        print(\"The array is empty\")\n        return 0\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    i = 0\n    while i < len(arr):\n        if abs(arr[i]) > max_diff:\n            max_diff = abs(arr[i])\n        i += 1\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximumDifference = -99999999999\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            if i!= j: \n                if abs(arr[i] - arr[j]) > maximumDifference: \n                    maximumDifference = abs(arr[i] - arr[j]) \n    return maximumDifference \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    arr = sorted(arr)\n    for i in range(1,len(arr)):\n        max_diff = max(max_diff, abs(arr[i] - arr[i-1]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    if(len(arr)<2):\n        print(\"Array length is less than 2\")\n    else:\n        max_diff = abs(arr[0]-arr[1])\n        for i in range(1, len(arr)-1):\n            if(abs(arr[i]-arr[i-1])>max_diff):\n                max_diff = abs(arr[i]-arr[i-1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = 0\n    for i in range(1,len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > maxDiff:\n            maxDiff = diff\n    return maxDiff\nprint(max_Abs_Diff([-2, -1, 5, -3]))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = arr[0]\n    for i in range(1, len(arr)):\n        if (abs(arr[i] - arr[i-1]) > diff):\n            diff = abs(arr[i] - arr[i-1])\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    while x + y!= n:\n        x += 1\n        y = n - x - y\n    return (x, y)\n    \ndef find_solution_2(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if n % b == 0:\n            return (n // b, 0)\n        else:\n            return None\n    if n % a == 0:\n        return (0, n // a)\n    \n    if n % (a + b) == 0:\n        return (n // (a + b), 0)\n    \n    if n % (a - b) == 0:\n        return (0, n // (a - b))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, b+1):\n        if n == a*i:\n            return (a, i)\n    \n    for i in range(1, a+1):\n        if n == i*b:\n            return (i, b)\n    \n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # TODO: Your code here\n    # For example, if n = 11:\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        for j in range(i, n):\n            if i * i + j * j == n:\n                return (i, j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if x + y == n and a * x + b * y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    i = 1\n    x = a\n    y = b\n    while i < n:\n        if a*i + b*i == n:\n            return (a*i, b*i)\n        i += 1\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # ### ---SOLUTION---\n    #for i in range(2,n):\n    #    if is_prime(i) and a*i+b*i == n:\n    #        return(a,b)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for x in range(1, n):\n        for y in range(1, n):\n            if x * a + y * b == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, a):\n        for y in range(1, b):\n            if x + y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if (a*x) + (b*y) == n:\n                return (x, y)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result_list = []\n    for i in list1:\n        if i not in list2:\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [el for el in list1 if el not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    final_list = []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    ret = []\n    for element in list1:\n        if element not in list2:\n            ret.append(element)\n    return ret\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1)-set(list2))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i + n - 2 * i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + n - 2 * (n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if (n == 0):\n        return 0\n    else:\n        return n + (n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    i = 0\n    while i <= n // 2:\n        s += i\n        i += 1\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n < 0:\n        raise ValueError('n must be a positive integer')\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return 0\n    else:\n        return sum_series(n - 2) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    total = 0\n    for i in range(n):\n        total += (i+1)\n        # total += (n-i)\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    x = 0\n    for i in range(0, int(n // 2)):\n        x = x + i\n    return x\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of the sides\n    l = l / 2\n    # Calculate the number of sides\n    n = s + 2\n    # Calculate the length of the semi-perimeter\n    p = (n * (2*l)) / (s - 2)\n    # Calculate the area\n    area = (p * (p - l) * (p - 2 * l)) / (4 * pi)\n    # Return the area\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if type(s)!= float:\n        raise TypeError\n    if type(l)!= int:\n        raise TypeError\n    if s == 0:\n        raise ValueError\n    if l < 3:\n        raise ValueError\n    if l == 3:\n        return s * 3.14 / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l * 0.5) * (tan(pi / l) - tan(pi * 0.5))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * (s * (s-l) * tan(pi/s))\nprint(area_polygon(5, 5)) # 5 * 5 * 0.5 = 20.0\nprint(area_polygon(2, 4)) # 2 * 4 * 0.5 = 8.0\nprint(area_polygon(3, 4)) # 3 * 4 * 0.5 = 12.0\nprint(area_polygon(4, 5)) # 4 * 5 * 0.5 = 20.0\nprint(area_polygon(5, 6)) # 5 * 6 * 0.5 = 20.0\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = pi*s/2\n    n = l\n    return (a*n)//2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi * (l * (s - 1) + (s + 1) / 2 * l)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * pi * (s * (s - l) * 0.5)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l**2/tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def area(l, s):\n        return (l**2 * tan(pi/s)) / 2\n    return area(l, s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    angle_1 = s * tan(pi/s)\n    return angle_1 * l\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total = 0\n    for i in range(1,n):\n        if n%i == 0:\n            total += i\n    return True if total == n else False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    return sum==n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = []\n    div_a = []\n    div_b = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            div.append(i)\n            if i > 1:\n                div_a.append(i)\n    div_sum_a = sum(div_a)\n    div_sum_b = sum(div)\n    if div_sum_a == div_sum_b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = 0\n    for i in range(1, math.ceil(n / 2)):\n        if n % i == 0:\n            divisors += i\n    return divisors == n and divisors == div_sum(n)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = {}\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors[i] = int(n / i)\n    if sum(divisors.values()) == n: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def div_sum_i(a,b):\n        for i in range(2,a//2+1):\n            if a%i == 0 and b%i == 0:\n                return True\n        return False\n    \n    for i in range(1,math.ceil(n/2)):\n        if div_sum_i(n,i) == True:\n            return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    num = n \n    divisor = 2\n    s = 0\n    while (n!= 0):\n        if n % divisor == 0:\n            s += divisor\n        divisor += 1\n        n = n // divisor\n    if (s == num): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0: return False\n    \n    i = 1\n    sum = 0\n    while i*i <= n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = 1\n    y = 2\n    while x < n:\n        if n % x == 0:\n            y = y + x\n        if y == n:\n            return True\n        x += 1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return math.floor(n/2) == math.ceil(n/2)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = {'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n    str1 = str1.lower()\n    dict_char_count = {}\n    for i in str1:\n        if i in alphabet:\n            dict_char_count[i] = dict_char_count.get(i,0) + 1\n    return dict_char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string into a dictionary and then count the characters in the dictionary \n    str1 = str1.lower()\n    dict1 = {}\n    for i in str1:\n        if i.isalpha():\n            dict1[i] = dict1.get(i, 0) + 1\n    count = 0\n    for i in dict1:\n        if dict1[i] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = 0\n    for i in range(len(str1)):\n        if str1.count(str1[i].upper()) > 1:\n            result += 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            n += 1\n    print(n)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count = count + 1\n    return count \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(set(str1)) \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet_dict = {}\n    for i in range(97, 123): \n        alphabet_dict[chr(i)] = i - 96\n    print(alphabet_dict)\n    dict_length = len(alphabet_dict)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    str_occ = {}\n    occ = 0\n    for i in range(len(str1)):\n        if str1[i] in str_occ:\n            str_occ[str1[i]] += 1\n        else:\n            str_occ[str1[i]] = 1\n    for i in str_occ:\n        occ += str_occ[i]\n    return occ\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_position = {}\n    for char in str1:\n        if char.lower() in char_position:\n            char_position[char.lower()] += 1\n        else:\n            char_position[char.lower()] = 1\n    return char_position\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str_arr = list(str1)\n    count = 0\n    for i in range(len(str_arr)):\n        if str_arr.index(str_arr[i]) == ord(str_arr[i].lower()) - ord('a') and str_arr[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if xor(A[i], A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #Your code here\n    \n    c = 0\n    for i in range(len(A)):\n        for j in range(i,len(A)):\n            if A[i] ^ A[j] == 0:\n                c += 1\n    return c\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A:\n        for j in A:\n            if i ^ j == 0:\n                count += 1\n    return count\n    \nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_even_pair(A))"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from collections import Counter\n    counter = Counter(A)\n    # print(counter)\n    count = 0\n    for (key, val) in counter.items():\n        if val%2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    A_set = set(A)\n    \n    count = 0\n    \n    for each in A_set:\n        if each ^ 2 in A_set:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor = 0\n    for i in range(len(A)):\n        xor ^= A[i]\n    if xor%2==0:\n        return 1\n    return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return None\n    i = 1\n    while i < n:\n        i = i << 1\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    assert n >= 0, \"Input should be greater than zero\"\n    \n    power = 0\n    while n > 1:\n        n = n >> 1\n        power = power + 1\n    \n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Finding the smallest power of 2 greater than or equal to n\n    return 2 ** (n.bit_length()-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    i = 1\n    while 2**i <= n:\n        i += 1\n    return 2**i\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # if n <= 0:\n    #     return 0\n    #\n    # while n > 1:\n    #     n = n / 2\n    #     # print(n)\n    # return int(n)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Declare a variable to store the power of 2\n    power = 0\n    # Repeat the loop till power is greater than or equal to n\n    while power <= n:\n        # Increment the power by 2\n        power = 2**power\n    # Return the power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res = 1\n    while res <= n:\n        res *= 2\n    return res - 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    return 2**(n//2)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return 2*next_power_of_2(n//2)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #solution 1 :\n    # temp = 0\n    # i = 0\n    # while temp <= n:\n    #     temp = 2**i\n    #     i += 1\n    # return i-1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    print(count)\n    return count\n    \n    \ndef max_min_mean(a,b,c,d,e,f,g): \n    '''\n    Write a function to find the maximum, minimum, average, and sum of all the numbers in a given list.\n    '''\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    d = list(d)\n    e = list(e)\n    f = list(f)\n    g = list(g)\n    \n    print(\"Maximum: \",max(a))\n    print(\"Minimum: \",min(b))\n    print(\"Average: \",sum(a)/len(a))\n    print(\"Sum: \",sum(f))\n    \n    \ndef smallest(a,b,c): \n    '''\n    Write a function to find the smallest element in a given list.\n    '''\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    \n    for i in range(len(a)):\n        if a[i] < b[i]:\n            c[i] = a[i]\n        else:\n            c[i] = b[i]\n    print(c)\n    \n    \ndef largest(a,b,c): \n    '''\n    Write a function to find the largest element in a given list.\n    '''\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    \n    for i in range(len(a)):\n        if a[i] > b[i]:\n            c[i] = a[i]\n        else:\n            c[i] = b[i]\n    print(c)\n    \n    \ndef reverse_string(a):\n    '''\n    Write a function to reverse a string.\n    '''\n    a = list(a)\n    print(a)\n    for i in range(len(a)//2):\n        a[i],a[len(a)-1-i] = a[len(a)-1-i],a[i]\n    print(a)\n    \n    \ndef find_sum(a,b):\n    '''\n    Write a function to find the sum of a and b.\n    '''\n    a = list(a)\n    b = list(b)\n    \n    for i in range(len(a)):\n        a[i] = int(a[i])\n    for i in range(len(b)):\n        b[i] = int(b[i])\n    \n    print(a+b)\n    print(sum(a+b))\n    \n    \ndef find_average(a,b):\n    '''\n    Write a function to find the average of a and b.\n    '''\n    a = list(a)\n    b = list(b)\n    \n    for i in range(len(a)):\n        a[i] = int(a[i])\n    for i in range(len(b)):\n        b[i] = int(b[i])\n    \n    print(a+b)\n    print(sum(a+b)/len(a+b))\n    \n    \ndef menu(a):\n    '''\n    Write a function which asks users what they want to do.\n    '''\n    a = a\n    print(a)\n    a = input(\"\\n1. Find sum of two numbers\\n2. Find average of two numbers\\n3. Find minimum of a list\\n4. Find maximum of a list\\n5. Find smallest element in a list\\n6. Find largest element in a list\\n7. Reverse a string\\n8. Find sum of a list of numbers\\n9. Find average of a list of numbers\\n10. Find maximum of a list of numbers\\n11. Find minimum of a list of numbers\\n12. Find sum of first N numbers\\n13. Find average of first N numbers\\n14. Find maximum of first N numbers\\n15. Find minimum of first N numbers\\n16. Exit\\n\")\n    \n    \ndef main():\n    '''\n    Write a function to call all the above functions with each of the list.\n    '''\n    a = []\n    b = []\n    c = []\n    d = []\n    e = []\n    f = []\n    g = []\n    \n    a = input(\"Enter the elements of the list a: \").split()\n    for i in a:\n        i = int(i)\n        a.append(i)\n    \n    b = input(\"Enter the elements of the list b: \").split()\n    for i in b:\n        i = int(i)\n        b.append(i)\n    \n    c = input(\"Enter the elements of the list c: \").split()\n    for i in c:\n        i = int(i)\n        c.append(i)\n    \n    d = input(\"Enter the elements of the list d: \").split()\n    for i in d:\n        i = int(i)\n        d.append(i)\n    \n    e = input(\"Enter the elements of the list e: \").split()\n    for i in e:\n        i = int(i)\n        e.append(i)\n    \n    f = input(\"Enter the elements of the list f: \").split()\n    for i in f:\n        i = int(i)\n        f.append(i)\n    \n    g = input(\"Enter the elements of the list g: \").split()\n    for i in g:\n        i = int(i)\n        g.append(i)\n    \n    #frequency\n    #frequency(a,2)\n    \n    #max_min_mean\n    #max_min_mean(a,b,c,d,e,f)\n    \n    #smallest\n    #smallest(a,b,c)\n    \n    #largest\n    #largest(a,b,c)\n    \n    #reverse_string\n    #reverse_string('hello')\n    \n    #find_sum\n    #find_sum(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #find_average(a,b)\n    \n    #find_average\n    #fin"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return x.count(a)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = 0\n    for i in a: \n        if i == x: \n            a = a+1\n    return a\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\na = [2,4,4,5,3,2,4,5,6,2,4,2,4,7,5,5,7,7,4,4]\nprint(frequency(a, 4))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for num in list1:\n        if (num >= m and num <= n):\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    print(sum)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    s = 0\n    for i in range(m, n+1):\n        s = s + list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1)-1 or m < 0 or n > len(list1)-1 or n < 0:\n        print(\"Invalid index\")\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum\n        \nlist1 = [10, 20, 30, 40, 50, 60]\nm = 2\nn = 3\nprint(sum_range_list(list1, m, n))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    n = n - 1\n    i = 0\n    \n    for i in range(n, m):\n        list1.append(i)\n        i = i + 1\n    \n    total = sum(list1)\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(list1, m, n):                                                                                                                                                                                                    \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    total = sum(list1[m:n])\n    print(total)\n    \n    \ndef sum_range_list(lis"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #s=a*5*math.sqrt(5)\n    print(round(a,2)*5*math.sqrt(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 * math.sqrt(5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a*5*(math.sqrt(5)-1)\n    print(perimeter)\n    return(perimeter)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)/2\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return a*(3**0.5)\ndef change_pentagon_angle(a):\n    '''\n    Write a function to change the angle of a regular pentagon by 45 degrees.\n    '''\n    return a+45\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5.0\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5/2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a % 2!= 0:\n        raise ValueError(\"a must be an even number\")\n    if a < 5:\n        raise ValueError(\"a must be greater than or equal to 5\")\n    s = (5 * a) / 2\n    return round(s, 3)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3*a) * math.sqrt(5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (a*(1+math.sqrt(5)))/2\n    return (a+s)*4\n    "
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p=math.sqrt(5)*(3*a)\n    return p\n    \ndef is_pentagonal(n):\n    '''\n    Write a function that takes an integer argument and returns True if it is a pentagonal number and False otherwise.\n    '''\n    d=int((1+math.sqrt(1+24*n))/6)\n    return d==n\n    \ndef is_prime(n):\n    '''\n    Write a function that takes an integer argument and returns True if it is a prime number and False otherwise.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    string = s.split()\n    count = 0\n    for word in string:\n        if word == \"std\":\n            count += 1\n    print(count)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for ch in s:\n        if ch == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 't' or i == 'd' or i =='s' or i == 't':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    count = s.count('std')\n    print(f'Number of occurence of \"{std}\" in the given string is {count}')\n    "
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s==\"\":\n        return 0\n    elif s==\"std\":\n        return 1\n    else:\n        return 1+count_occurance(s[1:])\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_type = set()\n    for i in range(len(test_tuple)):\n        test_type.add(type(test_tuple[i]))\n    return (len(test_type) == 1) and (test_type.pop() == type(test_tuple[0]))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(x,int) for x in test_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = True\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            result = False\n    return result\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(type(test_tuple))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple1 = (1,2,3,4)\n    tuple2 = (1,2,3,4.0)\n    tuple3 = (1,2,3,4.0,\"hello\")\n    if test_tuple == tuple1:\n        print(\"Tuple 1 has same data type\")\n    elif test_tuple == tuple2:\n        print(\"Tuple 2 has same data type\")\n    else:\n        print(\"Tuple 3 has same data type\")\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #type_list = []\n    type_list = []\n    for index, value in enumerate(test_tuple):\n        if type(value) == str:\n            #print(\"True\", value)\n            type_list.append(True)\n        else:\n            #print(\"False\", value)\n            type_list.append(False)\n    if all(type_list) == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    for tuple_value in test_tuple:\n        if type(tuple_value) == int:\n            test_list.append(True)\n        else:\n            test_list.append(False)\n    return all(test_list)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = []\n    for value in test_tuple:\n        if type(value) not in data_type:\n            data_type.append(type(value))\n    if len(data_type) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(x)==type(test_tuple[0]) for x in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    for elem in test_tuple:\n        if type(elem) is not str:\n            print('No need to check list')\n            return\n    print('All elements in tuple are of same type')\n    \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Time complexity : O(log(n))\n    # Space complexity : O(1)\n    \n    low, high = 0, n-1\n    \n    while low <= high:\n        mid = (low+high)//2\n        \n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return True\n            high = mid-1\n        elif arr[mid]!= x:\n            low = mid+1\n    return False\n    \n    \ndef is_majority_elements(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Time complexity : O(log(n))\n    # Space complexity : O(1)\n    \n    low, high = 0, n-1\n    count = 0\n    \n    while low <= high:\n        mid = (low+high)//2\n        \n        if arr[mid] == x:\n            count += 1\n            if mid == 0 or arr[mid-1]!= x:\n                return True\n            high = mid-1\n        elif arr[mid]!= x:\n            low = mid+1\n    if count > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n    if arr[0] == x:\n        return is_majority(arr[1:], n-1, x)\n    if arr[-1] == x:\n        return is_majority(arr[:-1], n-1, x)\n    if arr[0]!= x:\n        if arr[1] == x:\n            return is_majority(arr[2:], n-1, x)\n    if arr[-1]!= x:\n        if arr[-2] == x:\n            return is_majority(arr[:-2], n-1, x)\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    num = 0\n    for i in range(n):\n        if arr[i] == x:\n            num += 1\n    return num > (n/2)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return True if (arr.count(x) > n/2) else False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if(n == 0):\n        return False\n    if(n == 1):\n        return True if arr[0] == x else False\n    left = 0\n    right = n-1\n    while(left <= right):\n        if(arr[left] == x and arr[right] == x):\n            return True\n        elif(arr[left] == x):\n            left += 1\n        elif(arr[right] == x):\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in range(n):\n        if arr[i] == x:\n            counter += 1\n    if counter > n//2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0:\n        return False\n    if arr.count(x) > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[-1] == x: return True\n    if arr[0] == x: return True\n    if n <= 1: return False\n    if arr[0] == x: return True\n    if arr[-1] == x: return True\n    if arr[0]!= x and arr[-1]!= x: return False\n    for i in range(0, n):\n        if arr[i]!= x: continue\n        if i + 1 > n - 1: return True\n        if i + 2 < n and arr[i + 1] == x and arr[i + 2] == x:\n            return True\n        if i + 1 < n and arr[i + 1] == x and arr[i]!= x:\n            return True\n        if i + 1 < n and arr[i + 1]!= x and arr[i] == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    if x in arr:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count = count + 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n>0):\n        count += 1 if (n&1) else 0\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count = count + 1\n        n = n & (n - 1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    print(\"\\n\\nMETHOD 1: Count the number of set bits: \")\n    count = 0\n    for i in range(1,n+1):\n        if(bin(i).count('1')):\n            count+=1\n    print(f\"Number of set bits is {count}\")\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= (n-1)\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n = n&(n-1)\n        count += 1\n    return count\n    \ndef check_even_odd(n): \n    '''\n    Write a python function to check whether a number is even or odd.\n    '''\n    if n%2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string_list = list(str)\n    for i in range(len(string_list)):\n        if i % 2!= 0:\n            del(string_list[i])\n    return ''.join(string_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            res = res + str[i]\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # rstrip() will remove the whitespaces before the characters with odd index values\n    return str.rstrip(' ').replace(' ','')\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values_list = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_values_list.append(str[i])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for char in str:\n        if ord(char) % 2 == 0:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.strip()\n    odd_string = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            odd_string += str[i]\n    print(\"Odd values are: \" + odd_string)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = list(str)\n    str = ''.join(str[::2])\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    \n    # Code here\n    # print(\"In odd_values_string\")\n    # print(str)\n    \n    # Length of the string\n    # length = len(str)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c: \n        return a\n    elif b<=a and b<=c: \n        return b\n    else: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    print(\"min_of_three() function\")\n    if a < b:\n        return a\n    if b < a:\n        return b\n    if c < a:\n        return c\n    print(f\"The minimum number is {a}\")\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c: \n        return a\n    elif b<a<c: \n        return b\n    elif c<a<b: \n        return c\n    else: \n        return \"Not Found\"\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_value = a\n    if(b<min_value):\n        min_value = b\n    if(c<min_value):\n        min_value = c\n    return min_value\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            if a<b<c:\n                return a\n        elif c>a:\n            return c\n        else:\n            return a\n    else:\n        if b<a:\n            if b<c:\n                if c<a:\n                    return a\n                else:\n                    return c\n            else:\n                return b\n        else:\n            return a\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a if a<=b and a<=c else min(b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n        \ndef min_of_three_2(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (r-l) == 0 or (n & (1 << (r - l - 1))) == 0\n    "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n    #initialize flag variable to 0\n    flag = 0\n    #find the number of 1 bits and count the number of '0' bits\n    count = 0\n    for i in range(n+1):\n        #count the number of 1's bits in binary representation of i\n        count = count + bin(i).count('1')\n        #if the count is equal to the total number of bits in binary representation of i, \n        #then this bit is not set, thus mark it as 1\n        if count == l:\n            flag = 1\n            break\n    #for all bits that are set, in the range of l to r,\n    #then flag will be 1 which indicates that one of the bits is not set in the given range\n    if flag == 0:\n        print(\"all bits are set in the given range\")\n    else:\n        print(\"all bits are not set in the given range\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    result = True\n    for i in range(l,r+1):\n        if(Bits(i)):\n            result = False\n    return result\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n & i!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = (1<<n)-1\n    bit_mask = x>>(l-1):\n    bit_mask = (bit_mask<<(r-l+1))-1\n    return (bit_mask & x) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if (n < 0):\n        return False\n    \n    if (l > r):\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bin_n = bin(n)[2:]\n    l_bin = bin(l)[2:]\n    r_bin = bin(r)[2:]\n    count = 0\n    if(len(l_bin)<len(bin_n)):\n        count = len(bin_n) - len(l_bin)\n        l_bin = ('0'*count)+l_bin\n    if(len(r_bin)<len(bin_n)):\n        count = len(bin_n) - len(r_bin)\n        r_bin = ('0'*count)+r_bin\n    for i in range(len(l_bin)):\n        if(l_bin[i]=='1' or r_bin[i]=='1'):\n            count += 1\n    if(count==len(bin_n)):\n        print(n,\"is a perfect number\")\n    else:\n        print(n,\"is not a perfect number\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n        '''\n        Write a python function to check whether all the bits are unset in the given range or not.\n        '''\n        def all_Bits_Set_In_The_Given_Range(n,l,r):  \n            '''\n            Write a python function to check whether all the bits are unset in the given range or not.\n            '''\n            def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                '''\n                Write a python function to check whether all the bits are unset in the given range or not.\n                '''\n                def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                    '''\n                    Write a python function to check whether all the bits are unset in the given range or not.\n                    '''\n                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                        '''\n                        Write a python function to check whether all the bits are unset in the given range or not.\n                        '''\n                        def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                            '''\n                            Write a python function to check whether all the bits are unset in the given range or not.\n                            '''\n                            def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                '''\n                                Write a python function to check whether all the bits are unset in the given range or not.\n                                '''\n                                def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                    '''\n                                    Write a python function to check whether all the bits are unset in the given range or not.\n                                    '''\n                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                        '''\n                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                        '''\n                                        def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                            '''\n                                            Write a python function to check whether all the bits are unset in the given range or not.\n                                            '''\n                                            def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                '''\n                                                Write a python function to check whether all the bits are unset in the given range or not.\n                                                '''\n                                                def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                    '''\n                                                    Write a python function to check whether all the bits are unset in the given range or not.\n                                                    '''\n                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                        '''\n                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                        '''\n                                                        def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                            '''\n                                                            Write a python function to check whether all the bits are unset in the given range or not.\n                                                            '''\n                                                            def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                '''\n                                                                Write a python function to check whether all the bits are unset in the given range or not.\n                                                                '''\n                                                                def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                    '''\n                                                                    Write a python function to check whether all the bits are unset in the given range or not.\n                                                                    '''\n                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                        '''\n                                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                                        '''\n                                                                        def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                            '''\n                                                                            Write a python function to check whether all the bits are unset in the given range or not.\n                                                                            '''\n                                                                            def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                '''\n                                                                                Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                '''\n                                                                                def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                    '''\n                                                                                    Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                    '''\n                                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                        '''\n                                                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                        '''\n                                                                                        def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                            '''\n                                                                                            Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                            '''\n                                                                                            def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                '''\n                                                                                                Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                                '''\n                                                                                                def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                    '''\n                                                                                                    Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                                    '''\n                                                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                        '''\n                                                                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                                        '''\n                                                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                        '''\n                                                                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                                        '''\n                                                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                        '''\n                                                                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                                        '''\n                                                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                        '''\n                                                                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                                        '''\n                                                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                        '''\n                                                                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                                        '''\n                                                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                        '''\n                                                                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                                        '''\n                                                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                        '''\n                                                                                                        Write a python function to check whether all the bits are unset in the given range or not.\n                                                                                                        '''\n                                                                                                    def all_Bits_Set_In_The_Given_Range(n,l,r):  \n                                                                                                        '''\n                                                                                                        Write "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 1<<l\n    while mask<=r:\n        if (n&mask) == 0:\n            return False\n        mask = mask << 1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (l < n) and (r < n)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            arr[pos], arr[i] = arr[i], arr[pos]\n            pos += 1\n        elif arr[i] < 0:\n            arr[neg], arr[i] = arr[i], arr[neg]\n            neg += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            j = i + 1\n            while j < len(arr) and arr[j] < 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                j += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) == 0:\n        return []\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        if arr[i] < 0:\n            i += 1\n        elif arr[j] > 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = n - 1\n    neg = 0\n    while neg <= pos:\n        if arr[neg] < 0:\n            temp = arr[neg]\n            arr[neg] = arr[pos]\n            arr[pos] = temp\n            pos -= 1\n        else:\n            neg += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    max_val = -1\n    for i in range(n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = arr[i] + max_val + 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr.insert(0, arr.pop(i))\n            i -= 1\n        i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #initializing negative and positive lists\n    pos = []\n    neg = []\n    #append all negative elements to negative list\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n    #append all positive elements to positive list\n    for j in range(n,len(arr)):\n        if arr[j] >= 0:\n            pos.append(arr[j])\n    #merge all negative and positive elements to the end of the given array\n    for k in range(len(pos)):\n        arr.append(pos.pop())\n    for l in range(len(neg)):\n        arr.append(neg.pop())\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_ret = []\n    for i in range(0,n):\n        if arr[i] < 0:\n            arr_ret.append(arr[i])\n    for i in range(n,len(arr)):\n        if arr[i] > 0:\n            arr_ret.append(arr[i])\n    return arr_ret\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr):\n        print(\"n cannot be larger than the length of arr\")\n        return\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr, key=lambda x: (x >= 0, x))[:n]\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    print(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            new_str = new_str + char\n        else:\n            new_str = new_str + str1[i]\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    str1=str1.strip()\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\"\\n\",\"\")\n    str1=str1.replace(\"\\t\",\"\")\n    str1=str1.replace(\" \",\"\")\n    return str1\n    \n    \n    \n    \n    \n    \n    \ndef replace_non_alphanumeric(str1):\n    '''\n    Write a function that takes in a string and character, replaces non alphanumeric characters with the character, and returns the string.\n    '''\n    \n    \n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\"\\n\",\"\")\n    str1=str1.replace(\"\\t\",\"\")\n    str1=str1.replace(\"\\\"\",\"\")\n    str1=str1.replace(\"\\'\",\"\")\n    str1=str1.replace(\",\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"\\\"\",\"\")\n    str1=str1.replace(\"\\'\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"+\",\"\")\n    str1=str1.replace(\"&amp\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\">\",\"\")\n    str1=str1.replace(\"<\",\"\")\n    str1=str1.replace(\"|\",\"\")\n    str1=str1.replace(\"~\",\"\")\n    str1=str1.replace(\"!\",\"\")\n    str1=str1.replace(\"@\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"$\",\"\")\n    str1=str1.replace(\"%\",\"\")\n    str1=str1.replace(\"^\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"_\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"+\",\"\")\n    str1=str1.replace(\"=\",\"\")\n    str1=str1.replace(\"~\",\"\")\n    str1=str1.replace(\"`\",\"\")\n    str1=str1.replace(\"[\",\"\")\n    str1=str1.replace(\"{\",\"\")\n    str1=str1.replace(\"]\",\"\")\n    str1=str1.replace(\"}\",\"\")\n    str1=str1.replace(\";\",\"\")\n    str1=str1.replace(\":\",\"\")\n    str1=str1.replace(\"\\\\\",\"\")\n    str1=str1.replace(\"|\",\"\")\n    str1=str1.replace(\"?\",\"\")\n    str1=str1.replace(\"<\",\"\")\n    str1=str1.replace(\">\",\"\")\n    str1=str1.replace(\"@\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"%\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"%\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"_\",\"\")\n    str1=str1.replace(\"~\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"$\",\"\")\n    str1=str1.replace(\"^\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"=\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"_\",\"\")\n    str1=str1.replace(\"+\",\"\")\n    str1=str1.replace(\"~\",\"\")\n    str1=str1.replace(\"`\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"$\",\"\")\n    str1=str1.replace(\"%\",\"\")\n    str1=str1.replace(\"^\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"@\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"$\",\"\")\n    str1=str1.replace(\"%\",\"\")\n    str1=str1.replace(\"^\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"=\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"_\",\"\")\n    str1=str1.replace(\"~\",\"\")\n    str1=str1.replace(\"`\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"$\",\"\")\n    str1=str1.replace(\"^\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"=\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"_\",\"\")\n    str1=str1.replace(\"+\",\"\")\n    str1=str1.replace(\"~\",\"\")\n    str1=str1.replace(\"`\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"$\",\"\")\n    str1=str1.replace(\"^\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"=\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"_\",\"\")\n    str1=str1.replace(\"+\",\"\")\n    str1=str1.replace(\"~\",\"\")\n    str1=str1.replace(\"`\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"$\",\"\")\n    str1=str1.replace(\"^\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"=\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"_\",\"\")\n    str1=str1.replace(\"+\",\"\")\n    str1=str1.replace(\"~\",\"\")\n    str1=str1.replace(\"`\",\"\")\n    str1=str1.replace(\"#\",\"\")\n    str1=str1.replace(\"$\",\"\")\n    str1=str1.replace(\"^\",\"\")\n    str1=str1.replace(\"&\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\"=\",\"\")\n    str1=str1.replace(\"-\",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #write your code here\n    str1 = str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(' ','')\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #replace blank spaces\n    str1=str1.replace(\" \",\"%\")\n    #convert string to list\n    str1=list(str1)\n    #change blank spaces to the character\n    str1=[s if s!=\"%\" else char for s in str1]\n    #convert list to string\n    str1=\"\".join(str1)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    h = []\n    for i in range(len(list1)):\n        heapq.heappush(h, (list1[i],i))\n    ans = []\n    for i in range(n):\n        ans.append(heapq.heappop(h)[0])\n    return(ans)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        heapq.heappush(list2,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>list2[0]:\n            heapq.heappop(list2)\n            heapq.heappush(list2,list1[i])\n    return list2\ndef test_larg_nnum():\n    assert larg_nnum([0,1,2,3,4,5,6,7,8,9,10],5) == [9,10,8,7,6]\n    assert larg_nnum([0,1,2,3,4,5,6,7,8,9,10],8) == [9,10,8,7,6,5,4,3,2,1]\n    assert larg_nnum([],10) == []\n    assert larg_nnum([0,1,2,3,4,5,6,7,8,9,10],15) == []\ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        heapq.heappush(list2,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]<list2[0]:\n            heapq.heappop(list2)\n            heapq.heappush(list2,list1[i])\n    return list2\ndef test_small_nnum():\n    assert small_nnum([0,1,2,3,4,5,6,7,8,9,10],5) == [0,1,2,3,4]\n    assert small_nnum([0,1,2,3,4,5,6,7,8,9,10],8) == [0,1,2,3,4,5,6,7,8]\n    assert small_nnum([0,1,2,3,4,5,6,7,8,9,10],15) == []\n    assert small_nnum([0,1,2,3,4,5,6,7,8,9,10],25) == [0,1,2,3,4,5,6,7,8,9,10]\n    assert small_nnum([],10) == []\ndef reverse_num(n):\n    '''\n    Write a function that takes in a number n and returns the reverse of n.\n    '''\n    list1=[]\n    while n>0:\n        list1.append(n%10)\n        n=n//10\n    return list1\ndef test_reverse_num():\n    assert reverse_num(123) == 321\n    assert reverse_num(0) == 0\n    assert reverse_num(12345678) == 12345678\n    assert reverse_num(1) == 1\ndef larger_decrease(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list that are decreasing.\n    '''\n    list2=[]\n    list3=[]\n    for i in range(n):\n        heapq.heappush(list2,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>list2[0]:\n            heapq.heappop(list2)\n            heapq.heappush(list2,list1[i])\n    for i in range(len(list1)):\n        if list1[i]<list2[0]:\n            heapq.heappop(list2)\n            list3.append(list1[i])\n    return list3\ndef test_larger_decrease():\n    assert larger_decrease([1,3,5,7,9],3) == [7,5,9]\n    assert larger_decrease([1,3,5,7,9],4) == []\n    assert larger_decrease([1,3,5,7,9],5) == [3,5,7,9]\ndef smaller_increase(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list that are increasing.\n    '''\n    list2=[]\n    list3=[]\n    for i in range(n):\n        heapq.heappush(list2,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]<list2[0]:\n            heapq.heappop(list2)\n            heapq.heappush(list2,list1[i])\n    for i in range(len(list1)):\n        if list1[i]>list2[0]:\n            heapq.heappop(list2)\n            list3.append(list1[i])\n    return list3\ndef test_smaller_increase():\n    assert smaller_increase([1,3,5,7,9],3) == [1,3,5]\n    assert smaller_increase([1,3,5,7,9],4) == []\n    assert smaller_increase([1,3,5,7,9],5) == [1,3,5,7,9]\ndef binary_search_iter(list1,n):\n    '''\n    Write a function that takes in a sorted list and an integer n and returns the index of the nth smallest element in the list. If the list contains fewer than n elements, the function should return -1.\n    '''\n    list2=[]\n    list3=[]\n    for i in range(len(list1)):\n        list2.append(list1[i])\n        list3.append(list1[i])\n    for i in range(len(list1)):\n        if list3[i]==n:\n            return i\n    return -1\ndef test_binary_search_iter():\n    assert binary_search_iter([0,1,2,3,4,5,6,7,8,9,10],10) == 9\n    assert binary_search_iter([0,1,2,3,4,5,6,7,8,9,10],0) == 0\n    assert binary_search_iter([0,1,2,3,4,5,6,7,8,9,10],9) == 10\ndef binary_search_rec(list1,n):\n    '''\n    Write a function that takes in a sorted list and an integer n and returns the index of the nth smallest element in the list. If the list contains fewer than n elements, the function should return -1.\n    '''\n    list2=[]\n    list3=[]\n    list4=[]\n    for i in range(len(list1)):\n        list2.append(list1[i])\n        list3.append(list1[i])\n        list4.append(list1[i])\n    if len(list1) == 1:\n        if list3[0] == n:\n            return 0\n        else:\n            return -1\n    elif list3[0] == n:\n        return 0\n    elif len(list1) == 2:\n        if list3[0]<=n:\n            return 0\n        else:\n            return 1\n    elif list3[1] == n:\n        return 1\n    else:\n        if list3[0]<=n:\n            return 0\n        elif list3[1]<=n:\n            return 1\n        else:\n            return 2\ndef test_binary_search_rec():\n    assert binary_search_rec([0,1,2,3,4,5,6,7,8,9,10],10) == 9\n    assert binary_search_rec([0,1,2,3,4,5,6,7,8,9,10],0) == 0\n    assert binary_search_rec([0,1,2,3,4,5,6,7,8,9,10],9) == 10\ndef binary_search_rec_"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    list3=[]\n    for i in range(n):\n        max1=0\n        for j in range(len(list1)):\n            if list1[j] > max1:\n                max1=list1[j]\n        list2.append(max1)\n        list1.remove(max1)\n    for i in range(len(list2)):\n        list3.append(list2[i])\n    return list3\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    res=[]\n    if n>len(list1):\n        return list1\n    else:\n        for i in range(n):\n            res.append(list1.pop())\n        return res\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = list(list1)\n    list3 = []\n    for i in range(n):\n        \n        heapq.heapify(list2)\n        for i in range(len(list2)):\n            if list2[i] not in list3:\n                list3.append(list2[i])\n            \n            else:\n                heapq.heappop(list2)\n    return list3\n    \n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    if n > len(list1):\n        return []\n    \n    l1 = []\n    for i in range(0,n):\n        for j in range(i+1,len(list1)):\n            if list1[i] < list1[j]:\n                l1.append(list1[i])\n                l1.append(list1[j])\n                break\n    return l1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        m=max(list1)\n        list1.remove(m)\n        list2.append(m)\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    temp = list1\n    length = len(temp)\n    res = []\n    \n    for i in range(n):\n        max = 0\n        for j in range(length):\n            if(temp[j]>max):\n                max = temp[j]\n        temp.remove(max)\n        res.append(max)\n    return res\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #take input and store it in a heap\n    heapq.heapify(list1)\n    for i in range(n):\n        n_largest = heapq.heappop(list1)\n        if len(list1) >= n:\n            continue\n        else:\n            heapq.heappush(list1,n_largest)\n            return n_largest"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #r is the radius of the cylinder\n    #h is the height of the cylinder\n    return 2*pi*r*h\ndef lateralsurface_cylinder(r,h,z):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #r is the radius of the cylinder\n    #h is the height of the cylinder\n    #z is the depth of the cylinder\n    return pi*(r**2)*(h**2+z**2)\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2\ndef lateralsurface_sphere(r,h,z):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)\ndef lateralsurface_conical(r,h,z,a):\n    '''\n    Write a function to find the lateral surface area of a conical.\n    '''\n    return pi*(r**2)*(h**2+z**2)*(1+tan(a)**2)\ndef lateralsurface_conical(r,h,z,a,b):\n    '''\n    Write a function to find the lateral surface area of a conical.\n    '''\n    return pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2)\ndef lateralsurface_conical(r,h,z,a,b):\n    '''\n    Write a function to find the lateral surface area of a conical.\n    '''\n    return pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2)\ndef lateralsurface_conical(r,h,z,a,b,c):\n    '''\n    Write a function to find the lateral surface area of a conical.\n    '''\n    return pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2)\ndef lateralsurface_spherical(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r**2*(pi-4)\ndef lateralsurface_spherical(r,h,z):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)\ndef lateralsurface_spherical(r,h,z,a):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2)\ndef lateralsurface_spherical(r,h,z,a,b):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2+tan(d)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c,d,e):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2+tan(d)**2+tan(e)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c,d,e,f):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2+tan(d)**2+tan(e)**2+tan(f)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c,d,e,f,g):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2+tan(d)**2+tan(e)**2+tan(f)**2+tan(g)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2+tan(d)**2+tan(e)**2+tan(f)**2+tan(g)**2+tan(h)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2+tan(d)**2+tan(e)**2+tan(f)**2+tan(g)**2+tan(h)**2+tan(i)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2+tan(d)**2+tan(e)**2+tan(f)**2+tan(g)**2+tan(h)**2+tan(i)**2+tan(j)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2+tan(d)**2+tan(e)**2+tan(f)**2+tan(g)**2+tan(h)**2+tan(i)**2+tan(j)**2+tan(k)**2)\ndef lateralsurface_spherical(r,h,z,a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*(r**2)*(h**2+z**2)*(1+tan(a)**2+tan(b)**2+tan(c)**2+tan(d)*"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    radius=r\n    height=h\n    surface_area=math.pi*radius**2*height\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(h+r)\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    return pi*r*r*(h+r)\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*pi*r*(r+1)\ndef lateral_surface_area(h,r):\n    '''\n    Write a function to find the lateral surface area of a spherical object.\n    '''\n    if type(h)==float or type(h)==int:\n        return (2*pi*r*(r+1))/3 + (pi*r*r)*(1-((r+1)/r)**2)\n    elif type(h)==list:\n        h_set=set(h)\n        if r==h_set:\n            return 0\n        else:\n            return (2*pi*r*(r+1))/3 + (pi*r*r)*(1-((r+1)/r)**2)\n    else:\n        print('Error')\ndef cylindrical_section_area(r,h):\n    '''\n    Write a function to find the area of a cylindrical section of a\n    cylindrical object.\n    '''\n    return pi*r*r*(h+r)\ndef section_area(r,h):\n    '''\n    Write a function to find the area of a cylindrical section of a\n    cylindrical object.\n    '''\n    return pi*r*r*(h+r)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r<h:\n        return 0\n    if r==h:\n        return math.pi*r*r\n    return 0.5*math.pi*(r**2 - h**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    pi = math.pi\n    \n    surface = pi * (r**2) * h\n    return surface\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi, sqrt, atan2\n    \n    p = h**2/2\n    r = sqrt(p**2 + r**2)\n    \n    cylinder_area = (2*pi*r)*(h/2)\n    return cylinder_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    cylinder_area=math.pi*r*r*h\n    return cylinder_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if(r<0):\n        print(\"Input should be a positive number\")\n        return -1\n    else:\n        area=pi*r*(h/2)\n        return area\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 1/3 * (l ** 3)\n    \n    \n    \n    \n    \n    \n    \ndef solve_quadratic(a, b, c):\n    '''\n    Given three real numbers, a, b and c,\n    find the real solutions to the equation ax^2 + bx + c = 0.\n    '''\n    x1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n    x2 = (-b - math.sqrt(b**2 - 4*a*c))/(2*a)\n    return x1, x2\n    \n    \n    \n    \n    \n    \n    \ndef draw_spiral(center, radius):\n    '''\n    Write a function draw_spiral(center, radius)\n    to draw a spiral.\n    '''\n    # Exercise 1\n    \n    # Exercise 2\n    \n    # Exercise 3\n    \n    \n    # Exercise 4\n    \n    # Exercise 5\n    \n    # Exercise 6\n    \n    # Exercise 7\n    \n    # Exercise 8\n    \n    # Exercise 9\n    \n    # Exercise 10\n    \n    # Exercise 11\n    \n    \n    \n    \n    \ndef factorial(n):\n    '''\n    Write a function factorial(n)\n    to compute the factorial of a number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return factorial(n - 1) * n\n    \n    \n    \n    \n    \n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function is_anagram(s1, s2)\n    to determine if two strings are anagrams.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function is_palindrome(s)\n    to determine if a string is a palindrome.\n    '''\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return True\n    if s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \ndef is_palindrome_iterative(s):\n    '''\n    Write a function is_palindrome_iterative(s)\n    to determine if a string is a palindrome.\n    '''\n    i = 0\n    j = len(s) - 1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef is_palindrome_recursive(s):\n    '''\n    Write a function is_palindrome_recursive(s)\n    to determine if a string is a palindrome.\n    '''\n    def is_palindrome_recursive_aux(s, i, j):\n        if i >= j:\n            return True\n        if s[i]!= s[j]:\n            return False\n        return is_palindrome_recursive_aux(s, i + 1, j - 1)\n    \n    return is_palindrome_recursive_aux(s, 0, len(s) - 1)\n    \n    \n    \n    \n    \n    \ndef is_palindrome_recursive_short(s):\n    '''\n    Write a function is_palindrome_recursive_short(s)\n    to determine if a string is a palindrome.\n    '''\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef is_palindrome_iterative_short(s):\n    '''\n    Write a function is_palindrome_iterative_short(s)\n    to determine if a string is a palindrome.\n    '''\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef is_palindrome_recursive_long(s):\n    '''\n    Write a function is_palindrome_recursive_long(s)\n    to determine if a string is a palindrome.\n    '''\n    def is_palindrome_recursive_aux(s, i, j):\n        if i >= j:\n            return True\n        if s[i]!= s[j]:\n            return False\n        return is_palindrome_recursive_aux(s, i + 1, j - 1)\n    \n    return is_palindrome_recursive_aux(s, 0, len(s) - 1)\n    \n    \n    \n    \n    \n    \ndef is_palindrome_recursive_long_short(s):\n    '''\n    Write a function is_palindrome_recursive_long_short(s)\n    to determine if a string is a palindrome.\n    '''\n    def is_palindrome_recursive_aux(s, i, j):\n        if i >= j:\n            return True\n        if s[i]!= s[j]:\n            return False\n        return is_palindrome_recursive_aux(s, i + 1, j - 1)\n    \n    return is_palindrome_recursive_aux(s, 0, len(s) - 1)\n    \n    \n    \n    \n    \n    \ndef is_palindrome_iterative_short_2(s):\n    '''\n    Write a function is_palindrome_iterative_short_2(s)\n    to determine if a string is a palindrome.\n    '''\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef is_palindrome_iterative_short_3(s):\n    '''\n    Write a function is_palindrome_iterative_short_3(s)\n    to determine if a string is a palindrome.\n    '''\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef is_palindrome_iterative_short_4(s):\n    '''\n    Write a function is_palindrome_iterative_short_4(s)\n    to determine if a string is a palindrome.\n    '''\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef is_palindrome_iterative_short_5(s):\n    '''\n    Write a function is_palindrome_iterative_short_5(s)\n    to determine if a string is a palindrome.\n    '''\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    \n    return True\n    \n    \n    \n    \n    \n    \ndef is_palindrome_iterative_short_6(s):\n    '''\n    Write a function is_palindrome_iterative_short_6(s)\n    to determine if a string is "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (1/3)*(3**(0.5))*(l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 3**2\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # define function\n    def set_even_bits(n): \n        n &= ~(1 << (n.bit_length() - 1))\n        return n\n    \n    # if number is zero\n    if n == 0: \n        print(f\"{n} is 0\")\n    # if number is not zero\n    else: \n        # convert number into string \n        number = str(n) \n        # convert string into list \n        number = list(number) \n        # set even bits in reverse order \n        number = number[::-1] \n        # convert list into string \n        number = ''.join(number) \n        # convert string into integer \n        n = int(number, 2) \n        # set even bits\n        n = set_even_bits(n) \n        # convert integer back to string \n        number = bin(n) \n        number = number[2:]\n        number = '0b'+number\n        n = int(number, 2) \n        print(f\"{n} is {n}\") \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit = (n | (n >> 1)) & ~(n & 1)\n    return even_bit\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (even_bit_set_number(n>>1) << 1) + n%2\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #store the original number\n    original_number = n\n    #convert the number to binary\n    binary_number = binary_converter(n)\n    #calculate the number of 1's in the binary number\n    bit_count = number_of_1s_in_binary(binary_number)\n    #set all bits which are 0 to 1\n    bit_count = bit_count - 1\n    #convert back to decimal\n    decimal_number = decimal_converter(bit_count)\n    #return the new decimal number\n    return(decimal_number)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        n = n * (-1)\n    while n:\n        if n & 0x1:\n            return n\n        n = n >> 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0xaaaaaaaa\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    num = (n | (n-1))\n    return num\n    #code here\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n << 1) | 1\n    \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # make a copy of n\n    number = n\n    # set all even bits\n    number |= (1<<number.bit_length()-1)\n    print('Number after bit-setting: {}'.format(number))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0xF\n    return n | (n << 1)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_counter = Counter(test_list)\n    return dict_counter\ndef replace_spaces(test_list):\n    '''\n    Write a function that takes in a string and replaces each space with a '%20'.\n    '''\n    return test_list.replace(' ', '%20')\ndef remove_duplicates(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a list of unique strings.\n    '''\n    return list(set(test_list))\ndef last_4_chars(test_list):\n    '''\n    Write a function that takes in a string and returns the 4th to last character in the string.\n    '''\n    return test_list[-4]\ndef character_frequency(test_list):\n    '''\n    Write a function that takes in a string and returns a dictionary with the frequency of characters.\n    '''\n    char_count = {}\n    for i in test_list:\n        if i in char_count:\n            char_count[i] += 1\n        else:\n            char_count[i] = 1\n    return char_count\ndef sum_of_numbers(test_list):\n    '''\n    Write a function that takes in a list and returns the sum of all numbers in the list.\n    '''\n    return sum(test_list)\ndef sum_of_all_numbers(test_list):\n    '''\n    Write a function that takes in a list and returns the sum of all numbers in the list.\n    '''\n    return sum(test_list)\ndef is_prime(test_list):\n    '''\n    Write a function that takes in a list of integers and returns a boolean list of whether the integers are prime.\n    '''\n    prime_list = []\n    for i in test_list:\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                prime_list.append(i)\n    return prime_list\ndef sort_primes(test_list):\n    '''\n    Write a function that takes in a list of integers and returns a list with all prime integers sorted.\n    '''\n    return sorted(test_list, key=lambda x: x if x % 2!= 0 else -x)\ndef sum_to_ten(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a boolean list with True where the sum of all of the numbers is equal to 10 and False otherwise.\n    '''\n    return [i == 10 for i in test_list]\ndef get_digits(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list with the digits of all numbers in the list sorted.\n    '''\n    return sorted([str(i) for i in test_list])\ndef sum_to_ten_multiple_digits(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of True where the sum of all of the numbers is equal to 10 and False otherwise.\n    '''\n    return sum(1 for i in test_list if i % 10 == 0) == 0\ndef num_decimal_places(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a boolean list with True where the number of decimal places is greater than 1 and False otherwise.\n    '''\n    return [i > 1 for i in [str(i).split('.')[1] for i in test_list]]\ndef sum_of_all_odd_digits(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of True where the sum of all of the numbers is equal to 10 and False otherwise.\n    '''\n    return sum(1 for i in test_list if str(i).split('.')[1] == '0') == 0\ndef sort_digits(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list with the digits of all numbers sorted.\n    '''\n    return sorted([int(i) for i in str(test_list)])\ndef make_digits_even(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of True where the number of even digits are greater than or equal to 2 and False otherwise.\n    '''\n    return sorted([i for i in test_list if len(str(i).split('.')[1]) >= 2]) == sorted(test_list, key=lambda x: x % 2 == 0)\ndef sort_by_length(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of True where the number of digits are greater than or equal to 2 and False otherwise.\n    '''\n    return sorted([i for i in test_list if len(str(i)) >= 2]) == sorted(test_list, key=lambda x: x % 2 == 0)\ndef sum_to_ten_multiple_digits(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of True where the sum of all of the numbers is equal to 10 and False otherwise.\n    '''\n    return sum(1 for i in test_list if i % 10 == 0) == 0\ndef sum_of_all_odd_digits(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of True where the sum of all of the numbers is equal to 10 and False otherwise.\n    '''\n    return sum(1 for i in test_list if str(i).split('.')[1] == '0') == 0\ndef sum_of_all_even_digits(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of True where the sum of all of the numbers is equal to 10 and False otherwise.\n    '''\n    return sum(1 for i in test_list if len(str(i).split('.')[1]) >= 2) == 0\ndef digit_sum(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of the sums of the digits in all of the numbers.\n    '''\n    return [sum([int(i) for i in str(i)]) for i in test_list]\ndef is_palindrome(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a boolean list of whether the strings are palindrome or not.\n    '''\n    return test_list == test_list[::-1]\ndef check_all_digits(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a boolean list of whether each number has all digits.\n    '''\n    return list(all([len(str(i)) == 10 for i in test_list]) and all([len(str(i)) == 10 for i in test_list]))\ndef multiple_of_ten(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a boolean list of whether each number is divisible by 10.\n    '''\n    return list(all([i % 10 == 0 for i in test_list]))\ndef is_square(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a boolean list of whether each number is a perfect square.\n    '''\n    return list(all([i **.5 == int(i **.5) for i in test_list]))\ndef get_longest_string(test_list):\n    '''\n    Write a function that takes in a list of strings and returns the longest string in the list.\n    '''\n    return max(test_list, key=lambda x: len(x))\ndef length_of_longest_word(test_list):\n    '''\n    Write a function that takes in a list of strings and returns the length of the longest word in the list.\n    '''\n    return len(max(test_list, key=lambda x: len(x)))\ndef replace_all(test_list, old_string, new_string):\n    '''\n    Write a function that takes in a list and string and returns a list with all instances of old_string replaced with new_string.\n    '''\n    return [new_string i"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    l = []\n    l = Counter(test_list)\n    res = {}\n    for i in l:\n        res[i] = l[i]\n    return res\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Initialize a new dictionary for the results\n    occurences = dict()\n    # Loop through the list of tuples\n    for i in test_list:\n        # If the key for the tuple is already in the dictionary, add one to the count\n        if i[0] in occurences:\n            occurences[i[0]] += 1\n        # If the key for the tuple isn't in the dictionary, set the count to 1\n        else:\n            occurences[i[0]] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # define empty dictionary\n    occurences = {}\n    for item in test_list:\n        if item not in occurences:\n            occurences[item] = 1\n        else:\n            occurences[item] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n    for tup in test_list:\n        if tup in occurences_dict:\n            occurences_dict[tup] += 1\n        else:\n            occurences_dict[tup] = 1\n    return occurences_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # dictionary comprehension\n    return {x: test_list.count(x) for x in set(test_list)}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n    \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #your code here\n    \n    #return len(str) - len(str.strip())\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    sub = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            sub += 1\n        else:\n            break\n    return sub\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    string = str.split()\n    string.sort(key = len)\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            if len(string[i]) > len(string[j]):\n                break\n            if len(string[i]) == len(string[j]):\n                for k in range(len(string[i])):\n                    if string[i][k]!= string[j][k]:\n                        break\n                    if k == len(string[i]) - 1:\n                        count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            s = str[i:j+1]\n            if s!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    ans = 0\n    i = 0\n    while i < n:\n        if str[i]!= \"\":\n            j = i\n            while j < n and str[j]!= \"\":\n                j += 1\n            ans += 1\n        i = j\n    return ans\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        substring = str[i:i+1]\n        count += 1\n        \n    return count\n    "
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #Initialize output variable\n    numsub = 0\n    \n    #Iterate through string\n    for i in range(len(str)):\n        #Check if i < len(str) - 1 (if not, then i is at the end of string)\n        if i < len(str) - 1:\n            #Check if str[i] is not equal to str[i + 1] (if not, then this is not a valid substring)\n            if str[i]!= str[i+1]:\n                numsub += 1\n                #return 1\n            else:\n                continue\n        else:\n            numsub += 1\n            #return 1\n    \n    #return output\n    return numsub\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str.split())\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    string = str\n    count = 0\n    for i in range(len(string)):\n        count += len(re.findall(string[i],string))\n    print(count)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # helper function\n    def generate_sequence(sequence,m): \n        '''\n        Write a function that takes in a sequence of integers and an integer m and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n        '''\n        if sequence[-1] >= m: \n            return 1\n        else: \n            return sum(generate_sequence(sequence[1:], m))\n    return generate_sequence(range(1,n+1), m)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 1\n    if m == 1:\n        return n\n    if n > 0:\n        return (get_total_number_of_sequences(m,n-1) + m*get_total_number_of_sequences(m,n))\n    \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m+1):\n        count = count + n * get_number_of_permutations(i)\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    \n    def get_sequence_length(n, m, sequence):\n        '''\n        Given an integer n and an integer m, and a sequence, find the length of the longest possible subsequence of the given sequence that has elements between 0 and m.\n        '''\n        if n == 0:\n            return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences = []\n    for i in range(n+1):\n        if i == 0:\n            sequences.append(1)\n        else:\n            j = i\n            seq = []\n            while j <= m:\n                seq.append(j)\n                if j*2 <= m:\n                    j *= 2\n                else:\n                    j = 1\n            sequences.append(len(seq))\n    print(sequences)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    count = 0\n    for i in range(1,m+1):\n        if i < m:\n            count += m - i\n        elif i == m:\n            count += 1\n        elif i > m:\n            count += (i - 1)*(m - i) + 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def helper(n, m, A, index, count, dp):\n        \n        #base cases\n        if index == 0 or index == 1:\n            if n == 1:\n                return 0\n            else:\n                return (2**(n - 1) - 1) * 2 + 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Your code here\n    seq = [[] for i in range(m+1)]\n    seq[0] = [[i] for i in range(m+1)]\n    print(seq)\n    for i in range(1,m+1):\n        for j in range(i-1):\n            seq[i] += [[j] + v for v in seq[i-1]]\n        print(seq)\n        seq[i] = [x for x in seq[i] if x[0] > j]\n        print(seq)\n        seq[i] = [x for x in seq[i] if x[0] < j and x[-1] <= m]\n        print(seq)\n    print(len(seq[m]))\n    \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(0, m+1):\n        for j in range(0, m):\n            if i+j <= m:\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    numbers_list = list(range(1,m))\n    #print(numbers_list)\n    length_list = []\n    length_list.append(1)\n    for i in range(n):\n        i = i+1\n        #print(numbers_list)\n        length_list_temp = []\n        for j in range(len(numbers_list)):\n            if j == 0:\n                length_list_temp.append(numbers_list[j]+length_list[i-1])\n            elif j > 0:\n                length_list_temp.append(length_list[j-1]+(numbers_list[j]+length_list[i-1]))\n        #print(length_list_temp)\n        length_list.append(length_list_temp[-1])\n    #print(length_list)\n    return length_list[-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    list1[-2] = list2[1]\n    list1[-3] = list2[2]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1[:-1]\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = list1\n    list1.clear()\n    list1.extend(list2)\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1 += list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1[:-1]\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1:len(list1)] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) >= 1:\n        list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    list2.pop(0)\n    \n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Simple solution with the built in count function.\n    return str1.count('a') + str1.count('e') + str1.count('i') + str1.count('o') + str1.count('u')\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #return len(str1)\n    count = 0\n    for i in range(0,len(str1)):\n        if str1[i]!= \" \" and str1[i]!= \"\\n\":\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = str(input(\"Enter the String: \"))\n    count = 0\n    for x in str1:\n        count += 1\n    print(\"Total number of characters in the String: \", count)\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print(\"Total Characters in a string : \", count)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 1\n    end = int(math.sqrt(N))\n    for i in range(end+1, 0, -1):\n        if (i*i) > N:\n            return i-1\n        if (i*i) == N:\n            return i\n    return 1\nif __name__ == '__main__': \n    for _ in range(int(input())): \n        N = int(input())\n        print(next_Perfect_Square(N)"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))\n    while n * n < N:\n        n += 1\n    return n * n\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(math.sqrt(N)==math.floor(math.sqrt(N))):\n        return math.floor(math.sqrt(N))\n    else:\n        a=math.sqrt(N)\n        b=a+1\n        return a**2\n    \nprint(next_Perfect_Square(11))\nprint(next_Perfect_Square(16))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    while not N >= 1:\n        N += 1\n    if N == 1:\n        return 2\n    else:\n        return N+1\nprint(next_Perfect_Square(1)) # 3\nprint(next_Perfect_Square(2)) # 5\nprint(next_Perfect_Square(3)) # 6\nprint(next_Perfect_Square(4)) # 8\nprint(next_Perfect_Square(5)) # 11\nprint(next_Perfect_Square(6)) # 16\nprint(next_Perfect_Square(7)) # 21\nprint(next_Perfect_Square(8)) # 24\nprint(next_Perfect_Square(9)) # 28\nprint(next_Perfect_Square(10)) # 32\nprint(next_Perfect_Square(11)) # 36\nprint(next_Perfect_Square(12)) # 40\nprint(next_Perfect_Square(13)) # 42\nprint(next_Perfect_Square(14)) # 44\nprint(next_Perfect_Square(15)) # 46\nprint(next_Perfect_Square(16)) # 48\nprint(next_Perfect_Square(17)) # 50\nprint(next_Perfect_Square(18)) # 52\nprint(next_Perfect_Square(19)) # 54\nprint(next_Perfect_Square(20)) # 56\nprint(next_Perfect_Square(21)) # 58\nprint(next_Perfect_Square(22)) # 60\nprint(next_Perfect_Square(23)) # 62\nprint(next_Perfect_Square(24)) # 64\nprint(next_Perfect_Square(25)) # 66\nprint(next_Perfect_Square(26)) # 68\nprint(next_Perfect_Square(27)) # 70\nprint(next_Perfect_Square(28)) # 72\nprint(next_Perfect_Square(29)) # 74\nprint(next_Perfect_Square(30)) # 76\nprint(next_Perfect_Square(31)) # 78\nprint(next_Perfect_Square(32)) # 80\nprint(next_Perfect_Square(33)) # 82\nprint(next_Perfect_Square(34)) # 84\nprint(next_Perfect_Square(35)) # 86\nprint(next_Perfect_Square(36)) # 88\nprint(next_Perfect_Square(37)) # 90\nprint(next_Perfect_Square(38)) # 92\nprint(next_Perfect_Square(39)) # 94\nprint(next_Perfect_Square(40)) # 96\nprint(next_Perfect_Square(41)) # 98\nprint(next_Perfect_Square(42)) # 100\nprint(next_Perfect_Square(43)) # 102\nprint(next_Perfect_Square(44)) # 104\nprint(next_Perfect_Square(45)) # 106\nprint(next_Perfect_Square(46)) # 108\nprint(next_Perfect_Square(47)) # 110\nprint(next_Perfect_Square(48)) # 112\nprint(next_Perfect_Square(49)) # 114\nprint(next_Perfect_Square(50)) # 116\nprint(next_Perfect_Square(51)) # 118\nprint(next_Perfect_Square(52)) # 120\nprint(next_Perfect_Square(53)) # 122\nprint(next_Perfect_Square(54)) # 124\nprint(next_Perfect_Square(55)) # 126\nprint(next_Perfect_Square(56)) # 128\nprint(next_Perfect_Square(57)) # 130\nprint(next_Perfect_Square(58)) # 132\nprint(next_Perfect_Square(59)) # 134\nprint(next_Perfect_Square(60)) # 136\nprint(next_Perfect_Square(61)) # 138\nprint(next_Perfect_Square(62)) # 140\nprint(next_Perfect_Square(63)) # 142\nprint(next_Perfect_Square(64)) # 144\nprint(next_Perfect_Square(65)) # 146\nprint(next_Perfect_Square(66)) # 148\nprint(next_Perfect_Square(67)) # 150\nprint(next_Perfect_Square(68)) # 152\nprint(next_Perfect_Square(69)) # 154\nprint(next_Perfect_Square(70)) # 156\nprint(next_Perfect_Square(71)) # 158\nprint(next_Perfect_Square(72)) # 160\nprint(next_Perfect_Square(73)) # 162\nprint(next_Perfect_Square(74)) # 164\nprint(next_Perfect_Square(75)) # 166\nprint(next_Perfect_Square(76)) # 168\nprint(next_Perfect_Square(77)) # 170\nprint(next_Perfect_Square(78)) # 172\nprint(next_Perfect_Square(79)) # 174\nprint(next_Perfect_Square(80)) # 176\nprint(next_Perfect_Square(81)) # 178\nprint(next_Perfect_Square(82)) # 180\nprint(next_Perfect_Square(83)) # 182\nprint(next_Perfect_Square(84)) # 184\nprint(next_Perfect_Square(85)) # 186\nprint(next_Perfect_Square(86)) # 188\nprint(next_Perfect_Square(87)) # 190\nprint(next_Perfect_Square(88)) # 192\nprint(next_Perfect_Square(89)) # 194\nprint(next_Perfect_Square(90)) # 196\nprint(next_Perfect_Square(91)) # 198\nprint(next_Perfect_Square(92)) # 200\nprint(next_Perfect_Square(93)) # 202\nprint(next_Perfect_Square(94)) # 204\nprint(next_Perfect_Square(95)) # 206\nprint(next_Perfect_Square(96)) # 208\nprint(next_Perfect_Square(97)) # 210\nprint(next_Perfect_Square(98)) # 212\nprint(next_Perfect_Square(99)) # 214\nprint(next_Perfect_Square(100)) # 216\nprint(next_Perfect_Square(101)) # 218\nprint(next_Perfect_Square(102)) # 220\nprint(next_Perfect_Square(103)) # 222\nprint(next_Perfect_Square(104)) # 224\nprint(next_Perfect_Square(105)) # 226\nprint(next_Perfect_Square(106)) # 228\nprint(next_Perfect_Square(107)) # 230\nprint(next_Perfect_Square(108)) # 232\nprint(next_Perfect_Square(109)) # 234\nprint(next_Perfect_Square(110)) # 236\nprint(next_Perfect_Square(111)) # 238\nprint(next_Perfect_Square(112)) # 240\nprint(next_Perfect_Square(113)) # 242\nprint(next_Perfect_Square(114)) # 244\nprint(next_Perfect_Square(115)) # 246\nprint(next_Perfect_Square(116)) # 248\nprint(next_Perfect_Square(117)) # 250\nprint(next_Perfect_Square(118)) # 252\nprint(next_Perfect_Square(119)) # 254\nprint(next_Perfect_Square(120)) # 256\nprint(next_Perfect_Square(121)) # 258\nprint(next_Perfect_Square(122)) # 260\nprint(next_Perfect_Square(123)) # 262\nprint(next_Perfect_Square(124)) # 264\nprint(next_Perfect_Square(125)) # 266\nprint(next_Perfect_Square(126)) # 268\nprint(next_Perfect_Square(127)) # 270\nprint(next_Perfect_Square(128)) # 272\nprint(next_Perfect_Square(129)) # 274\nprint(next_Perfect_Square(130)) # 276\nprint(next_Perfect_Square(131)) # 278\nprint(next_Perfect_Square(132)) # 280\nprint(next_Perfect_Square(133)) # 282\nprint(next_Perfect_Square(134)) # 284\nprint(next_Perfect_Square(135)) # 286\nprint(next_Perfect_Square(136)) # 288\nprint(next_Perfect_Square(137)) # 290\nprint(next_Perfect_Square(138)) # 292\nprint(next_Perfect_Square(139)) # 294\nprint(next_Perfect_Square(140)) # 296\nprint(next_Perfect_Square(141)) # 298\nprint(next_Perfect_Square(142)) # 300\nprint(next_Perfect_Square(143)) # 302\nprint(next_Perfect_Square(144)) # 304\nprint(next_Perfect_Square(145)) # 306\nprint(next_Perfect_Square(146)) # 308\nprint(next_Perfect_Square(147)) # 310\nprint(next_Perfect_Square(148)) # 312\nprint(next_Perfect_Square(149)) # 314\nprint(next_Perfect_Square(150)) # 316\nprint(next_Perfect_Square(151)) # 318\nprint(next_Perfect_Square"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    a = N + 1\n    b = 1\n    while a < b:\n        c = (a + b) // 2\n        if c ** 2 == N:\n            return c\n        elif c ** 2 > N:\n            b = c\n        else:\n            a = c + 1\n    return a\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    low = 0\n    high = N\n    while low <= high:\n        mid = math.ceil((low + high)/2)\n        if mid**2 > N:\n            high = mid - 1\n        elif mid**2 < N:\n            low = mid + 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Base case \n    if N == 1: \n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    a = math.ceil(math.sqrt(N))\n    while not (a*a) == N:\n        a = a - 1\n    print(\"Next perfect square is\",a*a)\n    return a*a\n    \nnext_Perfect_Square(12) # Should print 13\nnext_Perfect_Square(25) # Should print 26\nnext_Perfect_Square(27) # Should print 28\nnext_Perfect_Square(28) # Should print 29\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1): \n        return 2\n    return N + next_Perfect_Square(math.floor(math.sqrt(N))) \n    \n    \n    \nif __name__ == \"__main__\": \n    print(\"Please enter the number:\")\n    N=int(input())\n    print(next_Perfect_Square(N))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    return (N * (N + 1)) // 2\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # sort the array\n    arr.sort()\n    print(arr)\n    # initialize sum\n    sum = 0\n    # create a prefix sum array\n    prefix_sum = [0] * len(arr)\n    for i in range(1, len(prefix_sum)):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n        print(prefix_sum)\n    \n    # check for the maximum sum in prefix sum array\n    # 0 1 2 3 4 5\n    # 0 0 1 2 3 4 5\n    # 0 0 0 1 2 3 4 5\n    # 0 0 0 0 1 2 3 4 5\n    # 0 0 0 0 0 1 2 3 4 5\n    # 0 0 0 0 0 0 1 2 3 4 5\n    # 0 0 0 0 0 0 0 1 2 3 4 5\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        if i == 1:\n            sum += arr[i]\n        if i == 2:\n            sum += arr[i]\n        if i == 3:\n            sum += arr[i]\n        if i == 4:\n            sum += arr[i]\n        if i == 5:\n            sum += arr[i]\n        #print(sum)\n    \n    return sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # use min_sum or max_sum\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr.sort()\n    maxSum = 0\n    start = 0\n    end = len(arr) - 1\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # if not arr: return\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = max(arr[i], arr[i] + dp[i - 1])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # The max_sum function should take one argument, the array of integers.\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    if n == 2:\n        return max(arr[0], arr[1])\n    \n    l = 0\n    r = n - 1\n    \n    while l <= r:\n        if arr[l] < arr[r]:\n            max_left = max_sum(arr[:l+1])\n            max_right = max_sum(arr[r:])\n            max_pair = max(max_left, max_right)\n            l += 1\n        else:\n            max_left = max_sum(arr[:l])\n            max_right = max_sum(arr[r:])\n            max_pair = max(max_left, max_right)\n            r -= 1\n        if max_pair > arr[l]:\n            arr[l] = max_pair\n        else:\n            break\n    return max(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #max_so_far = float('-inf')\n    #max_ending_here = float('-inf')\n    #print(max_ending_here)\n    #if len(arr) == 1:\n    #    return arr[0]\n    #if len(arr) == 2:\n    #    max_ending_here = arr[0] + arr[1]\n    #    return max_ending_here\n    \n    #for i in range(1, len(arr)):\n    #    max_ending_here = max(arr[i], max_ending_here + arr[i])\n    #    max_so_far = max(max_so_far, max_ending_here)\n    #    print(max_ending_here)\n    #    print(max_so_far)\n    #return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    '''\n    Brute force approach\n    start with the sum of all elements\n    then for every element, add it to the sum of the biggest of the three, \n    return the sum\n    \n    Time: O(n)\n    Space: O(n)\n    '''\n    if not arr:\n        return 0\n    \n    sum = arr[0]\n    for i in range(1, len(arr)):\n        sum = max(sum + arr[i], arr[i])\n        \n    return sum\n    \n    '''\n    Best solution\n    Brute force approach\n    start with the sum of all elements\n    then for every element, add it to the sum of the biggest of the three, \n    return the sum\n    \n    Time: O(n)\n    Space: O(1)\n    '''\n    '''\n    if len(arr) < 3:\n        return max(arr)\n    \n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], max_sum + arr[i])\n        max_sum = max(curr_max, max_sum)\n    \n    return max_sum\n    '''\n    '''\n    In-place approach\n    The sum array is maintained in descending order as we iterate through the array. \n    When an element is found greater than its adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index. \n    If the current element is smaller than the adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index \n    and beginning with the smaller element. \n    \n    Now, we can keep iterating through the array. As we iterate, we first find the largest \n    subsequence ending at the current index. If the current element is greater than the adjacent \n    element, we compare the current maximum with the current element and update the maximum.\n    This is done because, a bitonic sequence of decreasing length (that starts with a decreasing value) \n    is always a subsequence of a bitonic sequence of increasing length.\n    \n    If the current element is smaller than the adjacent element, we compare the current maximum with \n    the current element and update the maximum.\n    This is because, a bitonic subsequence always starts with a decreasing value.\n    \n    The time complexity of this approach is O(n).\n    The additional space complexity is O(1).\n    '''\n    '''\n    Time: O(n)\n    Space: O(1)\n    '''\n    '''\n    In-place approach\n    The sum array is maintained in descending order as we iterate through the array. \n    When an element is found greater than its adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index. \n    If the current element is smaller than the adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index \n    and beginning with the smaller element. \n    \n    Now, we can keep iterating through the array. As we iterate, we first find the largest \n    subsequence ending at the current index. If the current element is greater than the adjacent \n    element, we compare the current maximum with the current element and update the maximum.\n    This is done because, a bitonic sequence of decreasing length (that starts with a decreasing value) \n    is always a subsequence of a bitonic sequence of increasing length.\n    \n    If the current element is smaller than the adjacent element, we compare the current maximum with \n    the current element and update the maximum.\n    This is because, a bitonic subsequence always starts with a decreasing value.\n    \n    The time complexity of this approach is O(n).\n    The additional space complexity is O(1).\n    '''\n    '''\n    In-place approach\n    The sum array is maintained in descending order as we iterate through the array. \n    When an element is found greater than its adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index. \n    If the current element is smaller than the adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index \n    and beginning with the smaller element. \n    \n    Now, we can keep iterating through the array. As we iterate, we first find the largest \n    subsequence ending at the current index. If the current element is greater than the adjacent \n    element, we compare the current maximum with the current element and update the maximum.\n    This is done because, a bitonic sequence of decreasing length (that starts with a decreasing value) \n    is always a subsequence of a bitonic sequence of increasing length.\n    \n    If the current element is smaller than the adjacent element, we compare the current maximum with \n    the current element and update the maximum.\n    This is because, a bitonic subsequence always starts with a decreasing value.\n    \n    The time complexity of this approach is O(n).\n    The additional space complexity is O(1).\n    '''\n    '''\n    Time: O(n)\n    Space: O(1)\n    '''\n    '''\n    In-place approach\n    The sum array is maintained in descending order as we iterate through the array. \n    When an element is found greater than its adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index. \n    If the current element is smaller than the adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index \n    and beginning with the smaller element. \n    \n    Now, we can keep iterating through the array. As we iterate, we first find the largest \n    subsequence ending at the current index. If the current element is greater than the adjacent \n    element, we compare the current maximum with the current element and update the maximum.\n    This is done because, a bitonic sequence of decreasing length (that starts with a decreasing value) \n    is always a subsequence of a bitonic sequence of increasing length.\n    \n    If the current element is smaller than the adjacent element, we compare the current maximum with \n    the current element and update the maximum.\n    This is because, a bitonic subsequence always starts with a decreasing value.\n    \n    The time complexity of this approach is O(n).\n    The additional space complexity is O(1).\n    '''\n    '''\n    Time: O(n)\n    Space: O(1)\n    '''\n    '''\n    In-place approach\n    The sum array is maintained in descending order as we iterate through the array. \n    When an element is found greater than its adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index. \n    If the current element is smaller than the adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index \n    and beginning with the smaller element. \n    \n    Now, we can keep iterating through the array. As we iterate, we first find the largest \n    subsequence ending at the current index. If the current element is greater than the adjacent \n    element, we compare the current maximum with the current element and update the maximum.\n    This is done because, a bitonic sequence of decreasing length (that starts with a decreasing value) \n    is always a subsequence of a bitonic sequence of increasing length.\n    \n    If the current element is smaller than the adjacent element, we compare the current maximum with \n    the current element and update the maximum.\n    This is because, a bitonic subsequence always starts with a decreasing value.\n    \n    The time complexity of this approach is O(n).\n    The additional space complexity is O(1).\n    '''\n    '''\n    Time: O(n)\n    Space: O(1)\n    '''\n    '''\n    In-place approach\n    The sum array is maintained in descending order as we iterate through the array. \n    When an element is found greater than its adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index. \n    If the current element is smaller than the adjacent element, its current \n    maximum must be the largest sum of bitonic subsequence ending at the current index \n    and beginning with the smaller element. \n    \n    Now, we can keep iterating through the array. As we iterate, we first find the largest \n    subsequenc"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return -1\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    error = 10.0\n    epsilon = 10**-15\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Enter a positive number\")\n        return\n    low = 0\n    high = number\n    guess = (high + low) / 2\n    while abs(guess ** 2 - number) > 0.0001:\n        if guess ** 2 < number:\n            low = guess\n        else:\n            high = guess\n        guess = (high + low) / 2\n    print(guess)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    if number < 0:\n        raise ValueError('Number must be a non-negative integer.')\n    else:\n        ans = number/2\n        while True:\n            num = ans*ans\n            if abs(num - ans) < 10**(-13):\n                return ans\n            else:\n                ans = num/2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Enter a valid number\")\n        return None\n    elif number == 0:\n        print(\"Square root of 0 is 0\")\n        return 0\n    \n    low = 0\n    high = number\n    guess = (high+low)/2\n    while abs(guess*guess - number) > 0.0000000001:\n        if guess*guess < number:\n            low = guess\n        elif guess*guess > number:\n            high = guess\n        guess = (high+low)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n    import math\n    epsilon = 0.001\n    guess = number/2\n    while abs(guess*guess - number) >= epsilon:\n        guess = (guess + number/guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    print(\"Initiating Babylonian Square Root Algorithm...\")\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Invalid value: \" + str(number))\n    previous_root = 0\n    current_root = 1\n    while current_root**2 < number:\n        previous_root = current_root\n        current_root = (previous_root + number/current_root) / 2\n    if current_root**2 == number:\n        return current_root\n    else:\n        return previous_root\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 1\n    e = 0.000001\n    while True:\n        a += 1\n        d = a**2 - number\n        if abs(d) < e:\n            break\n    return a-1\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 1e-10:\n        guess = (guess + number / guess) / 2\n    return guess\n    \ndef eratosthenes_sieve(number):\n    '''\n    Write a function for computing primes using the sieve of Eratosthenes.\n    '''\n    n = 0\n    prime_list = []\n    while True:\n        prime_list.append(n)\n        n += 1\n        if n % 2 == 0:\n            n += 1\n            continue\n        n += 2\n        is_prime = True\n        for prime in prime_list:\n            if n % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(n)\n        if n == number:\n            break\n    return prime_list\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = len(str)\n    if length < 2:\n        return length\n    max_sub_length = 0\n    start = 0\n    \n    # For each character, first check if the whole substring is palindromic \n    # if yes, then check for the length of palindromic substring\n    for i in range(1, length):\n        odd = get_sub_palindromic(str, i-1, i)\n        even = get_sub_palindromic(str, i-1, i+1)\n        \n        if i-start+1 > max_sub_length:\n            max_sub_length = i-start+1\n        \n        if (odd and odd > max_sub_length) or (even and even > max_sub_length):\n            max_sub_length = max(odd or even, max_sub_length)\n            start = i-max_sub_length+1\n    \n    return max_sub_length\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(str == \"\"):\n        return 0\n    table = [[0 for x in range(len(str)+1)] for y in range(len(str)+1)]\n    ans = 0\n    for i in range(len(table)):\n        for j in range(len(table[i])):\n            if(i == 0 or j == 0):\n                table[i][j] = 0\n            if(str[i-1] == str[j-1]):\n                table[i][j] = table[i-1][j-1] + 2\n                if(table[i][j] > ans):\n                    ans = table[i][j]\n            else:\n                table[i][j] = 0\n    return ans\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str or len(str)==0:\n        return 0\n    dp=[[0]*len(str) for _ in range(len(str))]\n    max_len=1\n    for i in range(len(str)):\n        dp[i][i]=1\n        for j in range(i+1,len(str)):\n            if str[i]==str[j]:\n                dp[i][j]=dp[i+1][j-1]+2\n                max_len=max(max_len,dp[i][j])\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # lenght=1\n    # str_len=len(str)\n    # pal_dic={}\n    # for i in range(str_len):\n    #     if str[i] not in pal_dic.keys():\n    #         pal_dic[str[i]]=1\n    #         for j in range(i+1,str_len):\n    #             if str[i]==str[j] and str[j] not in pal_dic.keys():\n    #                 pal_dic[str[j]]=1\n    #             elif str[i]==str[j] and str[j] in pal_dic.keys():\n    #                 pal_dic[str[j]]+=1\n    #         for j in range(i+1,str_len):\n    #             if str[i]==str[j] and str[j] not in pal_dic.keys():\n    #                 pal_dic[str[j]]=1\n    #             elif str[i]==str[j] and str[j] in pal_dic.keys():\n    #                 pal_dic[str[j]]+=1\n    #             if pal_dic[str[i]]>lenght:\n    #                 lenght=pal_dic[str[i]]\n    #             if pal_dic[str[j]]>lenght:\n    #                 lenght=pal_dic[str[j]]\n    # return lenght\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    size = len(str)\n    \n    # if the string is empty, then return 0\n    if size == 0:\n        return 0\n    \n    # If string is a single character, then we make it a palindrome\n    if size == 1:\n        return 1\n    \n    # dp table for the below calculation\n    dp = [[0]*size for i in range(size)]\n    \n    max_length = 1\n    \n    # starting from the second letter, we update the maximum length and\n    # also update the dp array in the same way.\n    for i in range(size-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n            max_length = 2\n        else:\n            dp[i][i+1] = 1\n    \n    # if the length is greater than 2, then we check for the remaining string, and again update the dp array.\n    for i in range(size-2):\n        for j in range(i+2, size):\n            \n            # if characters are equal, then we skip this step\n            if str[i] == str[j]:\n                continue\n            \n            # if the current character is smaller than the previous character, \n            # then there is no point in checking for further subsequences.\n            if dp[i+1][j-1] > 0:\n                continue\n            \n            # if the current character is bigger than the previous character,\n            # then only the character after this is a palindrome and length is increased.\n            dp[i][j] = 1\n            max_length = max(max_length, dp[i][j])\n    \n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Create a dictionary to store the length of longest palindromic subsequence\n    sub_len_dict = {}\n    \n    # Input string\n    input_string = str\n    \n    # Create the length of longest palindromic subsequence in string\n    if(input_string == None or input_string == \"\"):\n        return 0\n    elif(input_string == \"a\" or input_string == \"b\" or input_string == \"c\"):\n        return 1\n    else:\n        # Create a list to store the longest palindromic subsequence in the given string\n        sub_list = []\n        \n        # Create a counter to store the length of longest palindromic subsequence\n        counter = 0\n        \n        # Traversing the given string\n        for i in range(len(input_string)):\n            # Adding the char to the palindromic subsequence\n            sub_list.append(input_string[i])\n            \n            # Appending the longest palindromic subsequence\n            if(len(sub_list) > 1):\n                if(sub_list[0] == sub_list[-1] and sub_list not in sub_len_dict):\n                    sub_len_dict[sub_list[0]] = len(sub_list)\n            sub_list.pop()\n        \n        # Return the length of longest palindromic subsequence\n        return max(sub_len_dict.values())\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #Make a dictionary for the string\n    str_dict = {}\n    for i in range(0,len(str)):\n        str_dict[i] = str[i]\n    \n    #Create an empty list to hold the longest palindrome\n    longest_palindrome = []\n    \n    #Iterate through the string\n    for i in range(len(str)):\n        #Iterate through the string\n        for j in range(len(str)):\n            #If the current character is equal to the next character\n            if str_dict[i] == str_dict[j+1]:\n                #Add to the long palindrome\n                longest_palindrome.append(str_dict[i])\n            #If the current character is not equal to the next character\n            else:\n                #Iterate through the longest palindrome\n                for m in range(len(longest_palindrome)):\n                    #If the current character is equal to the previous character\n                    if str_dict[i] == longest_palindrome[m]:\n                        #Add to the long palindrome\n                        longest_palindrome[m] = str_dict[i]\n                        break\n                    #If the current character is not equal to the previous character\n                    else:\n                        #Remove the first character\n                        longest_palindrome.pop(0)\n                        #Add the current character\n                        longest_palindrome.append(str_dict[i])\n                        break\n                #If the longest palindrome is empty, add the current character\n                else:\n                    longest_palindrome.append(str_dict[i])\n    #Return the length of the longest palindrome\n    return len(longest_palindrome)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    start,end=0,0\n    s=str\n    m=len(s)\n    def isPalindrome(str):\n        #this method is to check whether a string is palindrome or not \n        return str==str[::-1]\n    def get_palindrome_length(str,start,end):\n        if start>=m or end>=m:\n            return 0\n        if isPalindrome(s[start:end+1]):\n            return end-start+1\n        else:\n            return max(get_palindrome_length(s,start+1,end),get_palindrome_length(s,start,end-1))\n    \n    return get_palindrome_length(s,start,end)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    p = len(str)\n    l = 0\n    table = [[0 for i in range(p)] for j in range(p)]\n    for i in range(p):\n        table[i][i] = 1\n    for i in range(p-1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = 2\n            l = 2\n        else:\n            table[i][i+1] = 1\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # once n is greater than 0, subtract 1 to get the n-1\n    return n - 1\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    result = 0\n    while n > 0:\n        result += 1/n\n        n -= 1\n        \n    return result\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==0:\n        return 0\n    return 1/n+harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/(n*(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert n >= 1, 'n must be a positive integer.'\n    assert type(n) == int, 'n must be an integer.'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + 1/i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/(n*(n+1))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize the sum\n    sum = 0\n    # initialize the product\n    product = 1\n    # iterate through the numbers\n    for i in range(1, n):\n        # add the product\n        product += i\n        # add the product to the sum\n        sum += product\n    # return the sum\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # code goes here\n    n = int(n)\n    return (1+n)/n\n    \nprint(harmonic_sum(2))\nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(5))\nprint(harmonic_sum(10))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    lst_res=[]\n    if len(array_nums1)<len(array_nums2):\n        for i in range(len(array_nums1)):\n            if array_nums1[i] in array_nums2:\n                lst_res.append(array_nums1[i])\n    else:\n        for i in range(len(array_nums2)):\n            if array_nums2[i] in array_nums1:\n                lst_res.append(array_nums2[i])\n    return lst_res\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a1 = array_nums1\n    a2 = array_nums2\n    a1.sort()\n    a2.sort()\n    i,j=0,0\n    result = []\n    while i<len(a1) and j<len(a2):\n        if a1[i] == a2[j]:\n            result.append(a1[i])\n            i+=1\n            j+=1\n        else:\n            if a1[i] < a2[j]:\n                i+=1\n            else:\n                j+=1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    return list(nums1 & nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common_list = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in common_list:\n            common_list.append(num)\n    return common_list\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in res:\n            res.append(num)\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return set(array_nums1) & set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #     :param array_nums1: An array of integers\n    #     :param array_nums2: An array of integers\n    #     :return: An array of the intersection of the two arrays\n    #     :complexity: O(n)\n    #     NOTE: Need to keep track of where the numbers come from!\n    #     (i.e. the array_nums1 or array_nums2)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef sum_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and adds the element in the tuple.\n    '''\n    return sum(tup) + x\n    \ndef sum_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and adds the element in the tuple.\n    '''\n    return sum(tup) + x\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for i in tup:\n        if x == i:\n            occ = occ + 1\n    return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return list\n    else:\n        return list + [element]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element == list[0]:\n        return list[1:]+[element]\n    else:\n        return list[0:1]+[element] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:i] + [element] + list[i:]\n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element, and removes the element from the list, and returns the resulting list.\n    '''\n    return list[:i] + list[i+1:]\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and reverses it, and returns the resulting list.\n    '''\n    return list[::-1]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n            break\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if type(list)!= list:\n        return None\n    new_list = list[:]\n    for i in range(0,len(list)):\n        if list[i] == element:\n            new_list.insert(i,element)\n    return new_list\n        "
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            list.insert(i,element)\n            break\n    return list\n    \n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes all instances of that element from the list.\n    '''\n    for i in range(0,len(list)):\n        if list[i] == element:\n            list.remove(element)\n    return list\n    \ndef remove_element_position(list,element):\n    '''\n    Write a function that takes in a list and an element and removes all instances of that element from the list.\n    '''\n    for i in range(0,len(list)):\n        if list[i] == element:\n            list.remove(element)\n    return list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_len = len(list)\n    count = 0\n    for i in range(list_len):\n        if count == 0:\n            list.insert(i,element)\n            count += 1\n        else:\n            list.insert(i,list[i])\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if element < list[i]:\n            list.insert(i,element)\n            return list\n        if element > list[i]:\n            continue\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l = list\n    for i in range(len(l)):\n        if l[i] == element:\n            l.insert(i,element)\n            return l\n        elif i == len(l)-1:\n            l.append(element)\n            return l\n        else:\n            continue\n        \n        \n    \n    \ndef remove_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes the element from the list, and returns the resulting list.\n    '''\n    l = list\n    for i in range(len(l)):\n        if l[i] == element:\n            l.remove(element)\n            return l\n        elif i == len(l)-1:\n            l.pop()\n            return l\n        else:\n            continue\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = 0\n    for i in range(len(numbers)):\n        r += (numbers[i] * numbers[i])\n        print (\"(\",numbers[i],\",\",numbers[i],\")\")\n        \n    \n    if r == 0:\n        return \"0\"\n    \n    if r < 0:\n        return str(complex(r * -1,numbers[0]))\n    \n    return str(complex(r,numbers[0]))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar=[]\n    for item in numbers:\n        polar.append((item.real,item.imag))\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c = complex(numbers[0],numbers[1])\n    r = cmath.polar(c)[0]\n    theta = cmath.polar(c)[1]\n    result = [r,theta]\n    return result\n    \ndef main():\n    # complex numbers\n    numbers = convert([2,3])\n    print(numbers)\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def complex_to_polar(c):\n        r=cmath.sqrt(c.real**2+c.imag**2)\n        theta=cmath.atan2(c.imag,c.real)\n        return r,theta\n    r=[]\n    theta=[]\n    for i in numbers:\n        r1,theta1=complex_to_polar(i)\n        r.append(r1)\n        theta.append(theta1)\n    return r,theta\nr,theta=convert([1+0j,2+0j,3+0j,4+0j,5+0j,6+0j])\nprint(\"r=\",r)\nprint(\"theta=\",theta)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = []\n    for i in numbers:\n        temp = abs(i)\n        if (temp == 0):\n            a.append((0,0))\n        else:\n            x = round(temp*cmath.sqrt(1+i*i/temp),3)\n            y = round(temp*cmath.sqrt(1-i*i/temp),3)\n            a.append((x,y))\n    return a\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def mod(a):\n        if a==0:\n            return 0\n        else:\n            return a\n    def mod1(a):\n        if a==0:\n            return 0\n        else:\n            return a//1\n    def polar(n):\n        r=0\n        for i in range(len(n)):\n            r=mod(r+mod1(n[i])**2)\n        return r\n    def polar2(n):\n        r=0\n        for i in range(len(n)):\n            r=r+n[i]**2\n        return r\n    r1=[]\n    r2=[]\n    r3=[]\n    for i in range(len(numbers)):\n        r1.append(mod(numbers[i].real))\n        r2.append(mod1(numbers[i].real))\n        r3.append(numbers[i].imag)\n    polar1=polar(r1)\n    polar2=polar2(r2)\n    polar3=polar(r3)\n    return polar1, polar2, polar3\n    \ndef convert1(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r1=[]\n    r2=[]\n    for i in range(len(numbers)):\n        r1.append(numbers[i].real)\n        r2.append(numbers[i].imag)\n    r1, r2 = zip(*sorted(zip(r1, r2)))\n    return r1, r2\n    "
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=[]\n    y=[]\n    for i in numbers:\n        x.append(i.real)\n        y.append(i.imag)\n    return x,y\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def complex2polar(c):\n        '''\n        convert complex number to polar coordinates using cmath library\n        '''\n        mag,arg=cmath.polar(c)\n        return(mag,arg)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath\n    for i in range(len(numbers)):\n        print('(', round(numbers[i].real,2), round(numbers[i].imag,2),')','+', round(cmath.phase(numbers[i]),2),')i', i)\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\nprint(count_integer(list1))\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for elem in list1:\n        if type(elem) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n        \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # l = [\"red\", \"green\", \"blue\"]\n    # n = 3\n    l1 = list(combinations_with_replacement(l, n))\n    print(\"The combination of the list elements are: \",l1)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations(l, n))\n    \n    \n    \nl = ['a', 'b', 'c', 'd', 'e', 'f']\nprint(combinations_colors(l, 3))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for c in l:\n        colors.append((c,))\n    for i in range(n-1):\n        temp = []\n        for c in colors:\n            for color in colors:\n                if color!= c:\n                    temp.append(tuple(c+color))\n        colors = temp\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    l=l[:]\n    new_colors=[]\n    if n==1:\n        for element in l:\n            new_colors.append((element,))\n        return new_colors\n    else:\n        for i in range(n):\n            subset_l=combinations_colors(l,n-i)\n            for element in subset_l:\n                element=element[:]\n                element.append(l[i])\n            new_colors.extend(subset_l)\n        return new_colors\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(l):\n        comb.append(i)\n    combs = list(combinations_with_replacement(comb, n))\n    combs = list(map(tuple, combs))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    def combinations(l, n):\n        if n == 0:\n            yield []\n        else:\n            for i in range(len(l)):\n                for next in combinations(l[i+1:], n-1):\n                    yield next\n    for next in combinations(l, n):\n        yield next\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    # we need to use this list so we don't lose track of our tuples.\n    result = []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(len(l) + 1):\n        combination_list = combinations_with_replacement(l, i)\n        for combination in combination_list:\n            if len(combination) == n:\n                yield combination\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        l[i] = (l[i],)\n    for j in range(1, len(l)+1):\n        for i in combinations_with_replacement(l, j):\n            if len(i) == n:\n                yield i\n            \ndef subset(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (without repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        l[i] = (l[i],)\n    for j in range(1, len(l)+1):\n        for i in combinations_with_replacement(l, j):\n            if len(i) == n:\n                yield i\ndef subset_palindrome(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (without repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        l[i] = (l[i],)\n    for j in range(1, len(l)+1):\n        for i in combinations_with_replacement(l, j):\n            if len(i) == n:\n                yield i\ndef is_subset(n, sub_list):\n    for i in range(len(sub_list)):\n        sub_list[i] = (sub_list[i],)\n    for i in range(1, len(sub_list)+1):\n        for j in combinations_with_replacement(sub_list, i):\n            if len(j) == n:\n                return True\n    return False\ndef subset_palindrome_and_subset_palindrome_n_2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (without repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        l[i] = (l[i],)\n    for j in range(1, len(l)+1):\n        for i in combinations_with_replacement(l, j):\n            if len(i) == n:\n                yield i\ndef is_subset_palindrome(n, sub_list):\n    for i in range(len(sub_list)):\n        sub_list[i] = (sub_list[i],)\n    for i in range(1, len(sub_list)+1):\n        for j in combinations_with_replacement(sub_list, i):\n            if len(j) == n:\n                return True\n    return False\ndef combination_is_palindrome(l):\n    '''\n    Write a function that takes in a list and returns True if the list is a valid combination and returns False otherwise.\n    '''\n    l = list(l)\n    if len(l) % 2 == 0:\n        if l[0] == l[len(l)-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\ndef combination_is_palindrome_with_odd(l):\n    '''\n    Write a function that takes in a list and returns True if the list is a valid combination and returns False otherwise.\n    '''\n    l = list(l)\n    if len(l) == 2:\n        if l[0] == l[1]:\n            return True\n        else:\n            return False\n    elif len(l) == 3:\n        if l[0] == l[1] and l[1] == l[2]:\n            return True\n        elif l[0] == l[2] and l[1] == l[2]:\n            return True\n        else:\n            return False\n    elif len(l) == 4:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3]:\n            return True\n        elif l[0] == l[2] and l[1] == l[3] and l[2] == l[3]:\n            return True\n        else:\n            return False\n    elif len(l) == 5:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4]:\n            return True\n        elif l[0] == l[3] and l[1] == l[4] and l[2] == l[4] and l[3] == l[4]:\n            return True\n        else:\n            return False\n    elif len(l) == 6:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5]:\n            return True\n        elif l[0] == l[4] and l[1] == l[5] and l[2] == l[5] and l[3] == l[5] and l[4] == l[5]:\n            return True\n        else:\n            return False\n    elif len(l) == 7:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6]:\n            return True\n        elif l[0] == l[5] and l[1] == l[6] and l[2] == l[6] and l[3] == l[6] and l[4] == l[6] and l[5] == l[6]:\n            return True\n        else:\n            return False\n    elif len(l) == 8:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7]:\n            return True\n        elif l[0] == l[6] and l[1] == l[7] and l[2] == l[7] and l[3] == l[7] and l[4] == l[7] and l[5] == l[7] and l[6] == l[7]:\n            return True\n        else:\n            return False\n    elif len(l) == 9:\n        if l[0] == l[1] and l[1] == l[2] and l[2] == l[3] and l[3] == l[4] and l[4] == l[5] and l[5] == l[6] and l[6] == l[7] and l[7] == l[8]:\n            return True\n        elif l[0] == l[8] and l[1] == l[7] and l[2] == l[6] and l[3] == l[5] and l[4] == l[4] and l[5] == l[4] and l[6] == l[4] and l[7] == l[5]:\n            return True\n        else:\n            return False\ndef is_subset_palindrome_2(n, sub_list):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (without repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(sub_list)\n    for i in range(len(l)):\n        l[i] = (l[i],)\n    for i in range(1, len(l)+1):\n        for j in combinations_with_replacement(l, i):\n            if len(j) == n:\n                return True\n    return False\ndef is_subset_palindrom"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    if n < 3:\n        return 0\n    for i in range(2, n):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    numbers = []\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n        if isPrime:\n            numbers.append(i)\n    return len(numbers)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Take in a non-negative number n and return the number of prime numbers less than the given non-negative number n\n    # Implement the below algorithm.\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    \n    num = int(n)\n    prime_numbers = set()\n    \n    # Iterate from 2 to the square root of n\n    for i in range(2, num):\n        # If the number is divisible by any other number between 2 and the square root of n\n        # then it is not prime\n        if num % i == 0:\n            prime_numbers.add(i)\n            \n    #print(prime_numbers)\n    \n    # If prime_numbers is empty, it means there are no prime numbers less than or equal to n\n    # Return 0\n    if prime_numbers == set():\n        return 0\n    \n    # Else, return the number of prime numbers less than n\n    else:\n        return len(prime_numbers)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # For input 3, count_Primes_nums(3) => 2\n    # For input 10, count_Primes_nums(10) => 4\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if(n<=0):\n        return 0\n    else:\n        prime_list = [2]\n        prime_list = set(prime_list)\n        for i in range(3,n+1,2):\n            if i in prime_list:\n                prime_list.add(i)\n            else:\n                prime_list.add(i)\n                prime_list.add(i+1)\n        return len(prime_list)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n <= 1:\n        return 0\n    else:\n        for x in range(2, n):\n            if (n % x) == 0:\n                count += 1\n                break\n        return count + 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(n):\n        if num > 1:\n            for i in range(2,num):\n                if num % i == 0:\n                    break\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    assert n>=0, 'Negative values are not allowed.'\n    def is_prime(n):\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    count=0\n    for i in range(2,n):\n        if is_prime(i):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n <= 1:\n        return 0\n    \n    elif n >= 2 and n <= 3:\n        return 1\n    \n    else:\n        primes = []\n        for i in range(2, n):\n            count = 0\n            for k in range(2, i):\n                if i % k == 0:\n                    break\n                else:\n                    count += 1\n            if count == 0:\n                primes.append(i)\n        return len(primes)\n        \nprint(count_Primes_nums(10000))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    if n <= 1:\n        return 0\n    prime = 1\n    count = 0\n    while prime <= n:\n        prime += 1\n        if is_Prime(prime):\n            count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #swap_numbers(a,b)\n    temp = a\n    a = b\n    b = temp\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return(b,a)\n    \ndef find_triplets(number):\n    '''\n    Write a function that takes in a number and returns a list of triplets, where each triplet is a 3 digit number that add up to the number.\n    '''\n    triplets = []\n    \n    for i in range(0,10):\n        for j in range(0,10):\n            for k in range(0,10):\n                if i!= j and j!= k and i!= k:\n                    if int(str(i)+str(j)+str(k)) == number:\n                        triplets.append((i,j,k))\n    return triplets\n    \ndef multiply(a,b):\n    '''\n    Write a function that takes in two numbers and returns their product.\n    '''\n    return(a*b)\n    \ndef is_anagram(a,b):\n    '''\n    Write a function that takes in two words and returns True if they are anagrams, False if they are not.\n    '''\n    return(sorted(a) == sorted(b))\n    \ndef is_palindrome(a):\n    '''\n    Write a function that takes in a word and returns True if it is a palindrome, False otherwise.\n    '''\n    reversed = ''\n    \n    for i in range(len(a)-1,-1,-1):\n        reversed += a[i]\n    return(a == reversed)\n    \ndef is_greater(a,b):\n    '''\n    Write a function that takes in two numbers and returns True if the first number is greater than the second number, False otherwise.\n    '''\n    return(a > b)\n    \ndef is_greater_or_equal(a,b):\n    '''\n    Write a function that takes in two numbers and returns True if the first number is greater or equal to the second number, False otherwise.\n    '''\n    return(a >= b)\n    \ndef is_less_or_equal(a,b):\n    '''\n    Write a function that takes in two numbers and returns True if the first number is less or equal to the second number, False otherwise.\n    '''\n    return(a <= b)\n    \ndef is_even(number):\n    '''\n    Write a function that takes in a number and returns True if the number is even, False otherwise.\n    '''\n    return(number % 2 == 0)\n    \ndef is_odd(number):\n    '''\n    Write a function that takes in a number and returns True if the number is odd, False otherwise.\n    '''\n    return(number % 2 == 1)\n    \ndef get_partition(n, k):\n    '''\n    Write a function that takes in a number n and returns the partition of n into k consecutive integers starting from 1.\n    '''\n    return([i+1 for i in range(1,k+1)])\n    \ndef guess_age():\n    '''\n    Write a function that takes in a guessing range (inclusive) and returns the age of the person it guess.\n    '''\n    return(10)\n    \ndef guess_age(a,b):\n    '''\n    Write a function that takes in a guessing range (inclusive) and returns the age of the person it guess.\n    '''\n    return((a+b)/2)\n    \ndef is_prime(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(False)\n    \ndef is_prime(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(True)\n    \ndef is_prime_v2(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(False)\n    \ndef is_prime_v2(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(True)\n    \ndef is_prime_v3(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(True)\n    \ndef is_prime_v3(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(False)\n    \ndef is_prime_v4(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(True)\n    \ndef is_prime_v4(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(False)\n    \ndef is_prime_v5(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(False)\n    \ndef is_prime_v5(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(True)\n    \ndef is_prime_v6(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(False)\n    \ndef is_prime_v6(number):\n    '''\n    Write a function that takes in a number and returns True if the number is prime, False otherwise.\n    '''\n    return(True)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in a number n and returns the sum of the divisors of n.\n    '''\n    return(1)\n    \ndef sum"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    new_tuple = ()\n    new_tuple = (b,a)\n    return new_tuple\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c= a\n    a= b\n    b= c\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # the swap is just swap the numbers\n    # first number: first = a, second: second = b\n    # *: unpack the tuple\n    a, b = b, a\n    return a, b\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]:\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    temp_tup1 = sorted(test_tup1,reverse=True)\n    temp_tup2 = sorted(test_tup2,reverse=True)\n    if temp_tup1[0] < temp_tup2[0]:\n        return test_tup1\n    elif temp_tup1[0] == temp_tup2[0]:\n        if temp_tup1[1] < temp_tup2[1]:\n            return test_tup1\n        elif temp_tup1[1] == temp_tup2[1]:\n            if temp_tup1[2] > temp_tup2[2]:\n                return test_tup1\n            elif temp_tup1[2] == temp_tup2[2]:\n                if temp_tup1[3] > temp_tup2[3]:\n                    return test_tup1\n                elif temp_tup1[3] == temp_tup2[3]:\n                    if temp_tup1[4] > temp_tup2[4]:\n                        return test_tup1\n                    elif temp_tup1[4] == temp_tup2[4]:\n                        if temp_tup1[5] > temp_tup2[5]:\n                            return test_tup1\n                        elif temp_tup1[5] == temp_tup2[5]:\n                            if temp_tup1[6] > temp_tup2[6]:\n                                return test_tup1\n                            elif temp_tup1[6] == temp_tup2[6]:\n                                if temp_tup1[7] > temp_tup2[7]:\n                                    return test_tup1\n                                elif temp_tup1[7] == temp_tup2[7]:\n                                    if temp_tup1[8] > temp_tup2[8]:\n                                        return test_tup1\n                                    elif temp_tup1[8] == temp_tup2[8]:\n                                        if temp_tup1[9] > temp_tup2[9]:\n                                            return test_tup1\n    return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print('maximize_elements')\n    print(f'{test_tup1} and {test_tup2}')\n    new_tup1 = tuple(sorted(test_tup1))\n    new_tup2 = tuple(sorted(test_tup2))\n    print(f'New tuple1: {new_tup1}')\n    print(f'New tuple2: {new_tup2}')\n    print(f'New tuple1: {max(new_tup1)}')\n    print(f'New tuple2: {max(new_tup2)}')\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    elements1, elements2 = test_tup1\n    elements3, elements4 = test_tup2\n    if elements1 == elements3:\n        elements = elements2\n    elif elements1 == elements4:\n        elements = elements2\n    elif elements2 == elements3:\n        elements = elements1\n    elif elements2 == elements4:\n        elements = elements1\n    else:\n        elements = elements1 + elements2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Intializing the variables\n    max_1, max_2 = 0, 0\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tup = (min(test_tup1[0], test_tup2[0]), min(test_tup1[1], test_tup2[1]))\n    return new_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    if (test_tup1 > test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (max(test_tup1[i], test_tup2[i]),)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] >= test_tup2[0] and test_tup1[0] >= test_tup2[1]:\n        return test_tup1\n    elif test_tup1[1] >= test_tup2[0] and test_tup1[1] >= test_tup2[1]:\n        return test_tup1\n    elif test_tup2[0] >= test_tup1[0] and test_tup2[0] >= test_tup1[1]:\n        return test_tup2\n    elif test_tup2[1] >= test_tup1[0] and test_tup2[1] >= test_tup1[1]:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1), max(test_tup2)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0: return 2\n    elif n == 1: return 3\n    else:\n        return newman_prime(n-1) + newman_prime(n-2) + 2\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    \n    if n > 6: \n        while (count!= n): \n            count += 1\n            n = (n - 1) // 2\n            if n == 0:\n                break\n    else:\n        while (count!= n):\n            count += 1\n            n = n - 1\n            if n == 0:\n                break\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 1\n    p = 3\n    while(p <= n): \n        if (is_prime(p) == True): \n            while (pow(p, a) % n!= 1): \n                a = a + 1\n            a = a + 1\n            if (a == n): \n                print(p) \n                break\n        a = a + 1\n        p = p + 2\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return 152\n    if n == 154:\n        return 153\n    if n == 155:\n        return 154\n    if n == 156:\n        return 155\n    if n == 157:\n        return 156\n    if n == 158:\n        return 157\n    if n == 159:\n        return 158\n    if n == 160:\n        return 159\n    if n == 161:\n        return 160\n    if n == 162:\n        return 161\n    if n == 163:\n        return 162\n    if n == 164:\n        return 163\n    if n == 165:\n        return 164\n    if n == 166:\n        return 165\n    if n == 167:\n        return 166\n    if n == 168:\n        return 167\n    if n == 169:\n        return 168\n    if n == 170:\n        return 169\n    if n == 171:\n        return 170\n    if n == 172:\n        return 171\n    if n == 173:\n        return 172\n    if n == 174:\n        return 173\n    if n == 175:\n        return 174\n    if n == 176:\n        return 175\n    if n == 177:\n        return 176\n    if n == 178:\n        return 177\n    if n == 179:\n        return 178\n    if n == 180:\n        return 179\n    if n == 181:\n        return 180\n    if n == 182:\n        return 181\n    if n ="
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math\n    from collections import defaultdict\n    from math import sqrt,ceil,floor\n    d = defaultdict(lambda: 0)\n    d[0]=1\n    def get_num_factors(x):\n        count=0\n        for i in range(1,int(sqrt(x))+1):\n            if x%i ==0:\n                count+=2\n        if(x>=1):\n            count+=1\n        return count\n    def get_factor(n):\n        for i in range(2,ceil(sqrt(n))+1):\n            if n%i==0:\n                return i,n//i\n    for i in range(2,n+1):\n        if d[i]==0:\n            p,q = get_factor(i)\n            d[i] = get_num_factors(p) + get_num_factors(q)\n            if d[i] > n:\n                break\n    return i\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    newman_shanks = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    if n < len(newman_shanks):\n        return newman_shanks[n]\n    else:\n        return \"Not in the list\"\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    print(n)\n    if n < 2:\n        return n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1: return False\n    if n == 1: return False\n    if n == 2: return True\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    if len(test_tup1) == len(test_tup2):\n        return (tuple([round(i / j, 5) for i, j in zip(test_tup1, test_tup2)]))\n    else:\n        return ('Tuples are not the same length')\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        return None\n    else:\n        test_tup1_list = []\n        test_tup2_list = []\n        test_tup1_list = list(test_tup1)\n        test_tup2_list = list(test_tup2)\n        for index in range(len(test_tup1_list)):\n            test_tup1_list[index] = test_tup1_list[index]/test_tup2_list[index]\n        return test_tup1_list\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    x = 0\n    y = 0\n    z = 0\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    res_tup = ()\n    for i in range(0,len(test_tup1)):\n        res_tup = res_tup + ((test_tup1[i] / test_tup2[i]), )\n    return res_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    output_tup = tuple()\n    for i, j in zip(test_tup1, test_tup2):\n        if i % j == 0:\n            output_tup = output_tup + (j, )\n        else:\n            output_tup = output_tup + (i, )\n    return output_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # make sure that each element in tuple 1 is an integer or float\n    assert type(test_tup1[0]) == int or type(test_tup1[0]) == float, \"first element in tuple 1 must be an integer or float\"\n    assert type(test_tup2[0]) == int or type(test_tup2[0]) == float, \"first element in tuple 2 must be an integer or float\"\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    output = ()\n    try:\n        for i in range(len(test_tup1)):\n            output += (test_tup1[i] / test_tup2[i], )\n        return output\n    except ZeroDivisionError:\n        print('You cannot divide by 0')\n        return output\n    except TypeError:\n        print('Please enter only numbers')\n        return output\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts. If there is an odd number of elements in the list, then the last element should be placed in the first part of the list.\n    if L > len(list1):\n        return (list1, None)\n    else:\n        return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    newList = []\n    newList = list1[:L]\n    list2 = list1[L:]\n    return (newList, list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid_index = L//2\n    left_list = list1[:mid_index]\n    right_list = list1[mid_index:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into 2 parts\n    first_part = list1[0:L]\n    second_part = list1[L:]\n    return first_part, second_part\n    \n    \ndef concatenate_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into 2 parts\n    first_part = list1[0:L]\n    second_part = list1[L:]\n    return first_part + second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    first_part = []\n    second_part = []\n    \n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            first_part.append(list1[i])\n        else:\n            second_part.append(list1[i])\n            \n    return (first_part, second_part)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L = L // 2\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        return (list1[:L], list1[L:])\n    else:\n        return (list1[:int(L/2)], list1[int(L/2):])\n        \n        \n    \n    \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    i, j = 0, 0\n    while j < len(list1):\n        if j == L:\n            j += 1\n            i += 1\n        else:\n            yield list1[i:j]\n            i, j = j, j + 1\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return(int(h_age/7))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = int(h_age) * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Your code here\n    return (h_age/7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7.0\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return ([S[i:i+step] for i in range(0, len(S), step)])\n    else:\n        return ([S[i:i+step+1] for i in range(0, len(S), step)])\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    a = 0\n    while a < len(S):\n        b = 0\n        while b < len(S):\n            if b % step == 0:\n                l.append(S[a:b])\n            b += 1\n        a += 1\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Your code here\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    \n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S)%step == 0:\n        return [S[i:i+step] for i in range(0,len(S),step)]\n    else:\n        return [S[i:i+step] for i in range(0,len(S),step)] + [S[(len(S)-step):]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list\n    \n    \ndef create_list(lst):\n    '''\n    Write a function that takes in a list and returns a sorted list.\n    '''\n    \n    new_list = []\n    for i in range(len(lst)):\n        if i == 0:\n            new_list.append(lst[i])\n        if lst[i] not in new_list:\n            new_list.append(lst[i])\n    return sorted(new_list)\n    \n    \ndef sublist(lst, start, end):\n    '''\n    Write a function that takes in a list and a starting and ending index and returns a new list that includes elements from the original list with the indices between those two indexes included. \n    '''\n    \n    sublist = []\n    for i in range(start, end+1):\n        sublist.append(lst[i])\n    return sublist\n    \n    \ndef sum_lists(lst1, lst2):\n    '''\n    Write a function that takes in two lists and returns a new list with the first element in each list plus the second element in each list.\n    '''\n    \n    sum_list = []\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i] + lst2[i])\n    return sum_list\n    \n    \ndef word_count(phrase):\n    '''\n    Write a function that takes in a string and returns a dictionary with the count of each word in the string. \n    '''\n    \n    word_dict = {}\n    for word in phrase.split():\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n    \n    \ndef find_max(lst):\n    '''\n    Write a function that takes in a list and returns the largest element in the list.\n    '''\n    \n    max_element = max(lst)\n    return max_element\n    \n    \ndef odd_list(lst):\n    '''\n    Write a function that takes in a list and returns a new list that contains only the odd numbers in the list.\n    '''\n    \n    odd_list = []\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            odd_list.append(lst[i])\n    return odd_list\n    \n    \ndef remove_even(lst):\n    '''\n    Write a function that takes in a list and returns a new list with the elements from the original list that are not even.\n    '''\n    \n    remove_even = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            remove_even.append(lst[i])\n    return remove_even\n    \n    \ndef swap_pos(lst, pos1, pos2):\n    '''\n    Write a function that takes in a list and two indices and swaps the elements at those indices. \n    '''\n    \n    lst[pos1], lst[pos2] = lst[pos2], lst[pos1]\n    return lst\n    \n    \ndef swap_pos_v2(lst, pos1, pos2):\n    '''\n    Write a function that takes in a list and two indices and swaps the elements at those indices. \n    '''\n    \n    if pos1 > len(lst)-1 or pos2 > len(lst)-1:\n        return lst\n    \n    for i in range(len(lst)):\n        if i == pos1:\n            lst[i], lst[pos2] = lst[pos2], lst[i]\n            \n    return lst\n    \n    \ndef swap_pos_v3(lst, pos1, pos2):\n    '''\n    Write a function that takes in a list and two indices and swaps the elements at those indices. \n    '''\n    \n    if pos1 > len(lst)-1 or pos2 > len(lst)-1:\n        return lst\n    \n    temp_lst = lst.copy()\n    temp_lst[pos1], temp_lst[pos2] = temp_lst[pos2], temp_lst[pos1]\n    return temp_lst\n    \n    \ndef sum_nums(num1, num2):\n    '''\n    Write a function that takes in two non-negative integers and returns the sum of the two integers.\n    '''\n    \n    sum_nums = num1 + num2\n    return sum_nums\n    \n    \ndef multiply_nums(num1, num2):\n    '''\n    Write a function that takes in two non-negative integers and returns their product.\n    '''\n    \n    product_nums = num1 * num2\n    return product_nums\n    \n    \ndef reverse_list(lst):\n    '''\n    Write a function that takes in a list and returns a new list that contains the elements of the list in reverse order.\n    '''\n    \n    reverse_list = lst.copy()\n    reverse_list.reverse()\n    return reverse_list\n    \n    \ndef string_reversal(lst):\n    '''\n    Write a function that takes in a string and returns a new string with each character of the original string reversed.\n    '''\n    \n    reverse_str = lst[::-1]\n    return reverse_str\n    \n    \ndef string_in(sub, lst):\n    '''\n    Write a function that takes in a substring and a list and returns whether or not the substring is in the list.\n    '''\n    \n    for i in range(len(lst)):\n        if sub in lst[i]:\n            return True\n        \n    return False\n    \n    \ndef find_max_list_iter(lst):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    \n    max_num = lst[0]\n    for num in lst:\n        if max_num < num:\n            max_num = num\n    return max_num\n    \n    \ndef sum_matrix(lst):\n    '''\n    Write a function that takes in a list of lists and returns a new list that includes the sums of the numbers in each sublist.\n    '''\n    \n    sum_list = []\n    for sub_list in lst:\n        total = 0\n        for num in sub_list:\n            total += num\n        sum_list.append(total)\n    return sum_list\n    \n    \ndef string_to_dict(str):\n    '''\n    Write a function that takes in a string and returns a dictionary with the characters of the string as the keys and the number of times they appear in the string as the values.\n    '''\n    \n    string_dict = {}\n    for char in str:\n        if char in string_dict:\n            string_dict[char] += 1\n        else:\n            string_dict[char] = 1\n    return string_dict\n    \n    \ndef find_index(lst, search):\n    '''\n    Write a function that takes in a list and a value and returns the first index of the value in the list.\n    '''\n    \n    for i in range(len(lst)):\n        if search == lst[i]:\n            return i\n        \n    return None\n    \n    \ndef is_even(n):\n    '''\n    Write a function that takes in an integer and returns True if the integer is even, and False otherwise.\n    '''\n    \n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_odd(n):\n    '''\n    Write a function that takes in an integer and returns True if the integer is odd, and False otherwise.\n    '''\n    \n    if n % 2 == 1:\n        return True\n    else:\n        return False\n    \n    \ndef is_prime(n):\n    '''\n    Write a function that takes in an integer and returns Tru"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    for i in range(0, len(S), step):\n        out.append(S[i:i+step])\n    return out\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def surfacearea(l):\n        if l <= 0:\n            return 0\n        return 6 * l ** 2 + 2 * 6 * l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralsurface_cube(l):\n        if l <= 0:\n            return None\n        else:\n            return (2 * l ** 2) + 2 * (l ** 3)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l**2) * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l**3)/3\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * 2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l*(l*(l+1)-1)/2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l*6)\n    #return l*(l*6)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # # Approach 1\n    # return (l**2)*3\n    \n    # Approach 2\n    return 2*(l**2)\n    \n    # Approach 3\n    return (2*(l**2))+l*4\n    \n    # Approach 4\n    return l**2*6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2!= 0:\n            result = result + i ** 2\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    if n > 0:\n        if n % 2 == 1:\n            for i in range(1,n+1):\n                sum += i**2\n        else:\n            print('The given number is even')\n    else:\n        print('The given number is less than or equal to zero')\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==1:\n            sum+=i**2\n    return sum\nprint(\"The sum of the squares of the first n odd natural numbers is :\",square_Sum(20))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_nums = range(1, n, 2)\n    square_sum = 0\n    for i in odd_nums:\n        square_sum += i**2\n    return square_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1,2):\n        s+=i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i for i in range(1, n+1) if i%2!=0)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(n+1) if x%2==1])\n    \ndef sum_of_powers(a, n):\n    '''\n    Write a python function that takes in two integers a and n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x**2 for x in range(n+1) if x%2==1])\n    \ndef get_list_of_lists(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of lists of length n.\n    '''\n    return [[i, i**2] for i in range(n)]\n    \ndef remove_from_list_of_lists(n, i, list):\n    '''\n    Write a python function that takes in a list of lists, an index i, and a value x and returns a new list.\n    '''\n    return list[:i]+list[i+1:]\n    \ndef range_sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n odd natural numbers.\n    '''\n    return sum([x for x in range(n+1) if x%2==1])\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result=0\n    for i in range(1,n+1):\n        if i%2==1:\n            result=result+i**2\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 1 + 2*(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n/2) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (1+n)//2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n        result = result + 1\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 5\n    count = 0\n    while True:\n        if num % 5 == 0:\n            num = num / 5\n            count += 1\n        else:\n            num = num * 5 + 1\n            count += 1\n        if count == n:\n            return num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n += 1\n    return str(n)\n    # return \"0\"*(n - 1) + \"1\"\n    # return \"1\"*(n - 1) + \"0\"\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 10:\n        return '{0}'.format(n)\n    elif n % 10 == 1:\n        return '{0}'.format(n)\n    else:\n        return str(n)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return 1 + find_star_num(n-1)\n        \n    \n    \ndef find_star_num_recursive(n,i,star_num_cache):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        if star_num_cache[i]>0:\n            return star_num_cache[i]\n        else:\n            star_num_cache[i] = 1 + find_star_num_recursive(n-1,i+1,star_num_cache)\n            return star_num_cache[i]\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_numbers = [1, 3, 5, 7, 9, 10, 12, 14, 16, 18, 20, 22, 24, 25, 27, 30, 32, 33, 35, 36, 40, 42, 44, 48, 50, 51, 54, 55, 57, 60, 62, 64, 66, 68, 70, 72, 75, 78, 80, 81, 84, 85, 87, 90, 92, 94, 96, 99, 102, 105, 108, 120, 123, 125, 128, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 188, 191, 194, 195, 196, 198, 199, 201, 204, 206, 208, 210, 213, 215, 217, 219, 222, 224, 225, 228, 230, 231, 232, 234, 238, 240, 243, 246, 249, 250, 251, 252, 254, 256, 258, 261, 262, 266, 267, 268, 271, 274, 276, 277, 279, 282, 283, 286, 287, 290, 291, 293, 294, 296, 298, 300, 302, 304, 306, 308, 311, 313, 316, 318, 320, 321, 324, 327, 331, 333, 336, 338, 340, 341, 343, 346, 349, 352, 353, 354, 357, 358, 362, 363, 366, 367, 369, 371, 373, 374, 375, 378, 380, 381, 382, 384, 385, 387, 389, 391, 392, 394, 395, 397, 400, 402, 404, 405, 407, 408, 410, 412, 414, 415, 417, 418, 420, 422, 424, 426, 428, 429, 430, 433, 434, 436, 438, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 467, 468, 469, 471, 472, 475, 476, 478, 479, 482, 483, 484, 485, 486, 488, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 505, 507, 508, 510, 511, 512, 514, 515, 517, 518, 520, 521, 522, 525, 526, 528, 529, 531, 532, 533, 534, 536, 537, 540, 541, 542, 543, 544, 547, 548, 549, 551, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 580, 581, 582, 584, 585, 586, 587, 590, 591, 592, 593, 595, 596, 597, 600, 601, 602, 603, 605, 607, 610, 611, 612, 614, 615, 617, 618, 620, 621, 622, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = [\"*\", \"**\", \"***\", \"****\", \"*****\"]\n    return stars[n-1]\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k)!= str:\n        raise TypeError(\"ascii_value() takes a string\")\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # arr = ['x', 'y', 'z']\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_idx = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Declare a variable and use it to store the sum of even numbers at even positions\n    even_sum = 0\n    # Declare a variable and use it to store the number of even numbers at even positions\n    count = 0\n    # Declare a variable and use it to store the count of even numbers at even positions\n    even_count = 0\n    # Declare a variable to store the index\n    i = 0\n    # Loop while i is less than the length of arr\n    while i < len(arr):\n        # Increment the count\n        count += 1\n        # If the count is even and the arr[i] is even\n        if (count % 2 == 0) and (arr[i] % 2 == 0):\n            # Increment the even_sum\n            even_sum += arr[i]\n            # Increment the even_count\n            even_count += 1\n        # Increment i by 1\n        i += 1\n    # Return even_sum and even_count\n    return even_sum, even_count\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    i = 0\n    while i < len(arr):\n        if i % 2 == 0:\n            sum_even += arr[i]\n        i += 1\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(0,len(arr),2):\n        if(arr[i]%2==0):\n            result = result+arr[i]\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if arr==None:\n        return 0\n    if len(arr)<1:\n        return 0\n    sum = 0\n    i=0\n    while i<len(arr):\n        if arr[i]%2 == 0:\n            sum = sum + arr[i]\n        i+=1\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if (i % 2 == 0):\n            even_sum = even_sum + arr[i]\n    print(even_sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(0, len(arr)):\n        if i%2==0:\n            sum=sum+arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    x = 0\n    for i in range(0,len(arr)):\n        if(i%2==0):\n            x += arr[i]\n    return x\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = []\n    even_sum = 0\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_index.append(i)\n    \n    for i in even_index:\n        even_index_sum += arr[i]\n    return even_index_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum = sum + pow(i,5)\n    return sum\n        \n    \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    odd_numbers = []\n    for i in range(0, n):\n        if (i % 2!= 0):\n            odd_numbers.append(i)\n    \n    total = 0\n    for i in odd_numbers:\n        total += i ** 5\n    return total\n    \nprint(even_Power_Sum(9))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    if n == 0:\n        return sum\n    for i in range(0,n):\n        sum += (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n+1):\n        total += i**5\n    return total\n    \ndef is_Even(num):\n    '''\n    Write a python function that takes in an integer and returns True if the integer is even, otherwise returns False.\n    '''\n    return num%2 == 0\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n):\n        result += pow(i,5)\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += pow(i, 5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    '''\n    The function should return the sum of the even integers between 0 and n (inclusive) that are raised to the fifth power (i.e., if the fifth power of an even integer is 0, then it should be added to the sum. The following code demonstrates the use of range (n) and list comprehension.\n    '''\n    #first_n = list(range(n+1))\n    #sums = []\n    #for i in range(n+1):\n        #sums.append(i ** 5)\n    #return sum(sums)\n    return sum(i**5 for i in range(n))\n    "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum_even += i**5\n    print(sum_even)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 0\n    sum = 0\n    while (power <= n):\n        sum += power ** 5\n        power += 1\n    return sum\n        \n        \n        \nprint(even_Power_Sum(7)) # Should be equal to 447\nprint(even_Power_Sum(0)) # Should be equal to 0\nprint(even_Power_Sum(10)) # Should be equal to 55\nprint(even_Power_Sum(-2)) # Should be equal to -"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][-1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for item in test_list:\n        return_list.append(item[-1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # write your solution here\n    \n    # This is the same as'return(test_list[-1][1])'\n    rear_extract_list = []\n    for item in test_list:\n        rear_extract_list.append(item[1])\n    return rear_extract_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: x[-1], test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for each in test_list:\n        output.append(each[-1])\n    return output\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[-1] for tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in test_list:\n        return_list.append(i[-1])\n    return return_list\n    #return map(lambda x: x[-1], test_list)\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    my_list = []\n    for i in range(len(test_list)):\n        if type(test_list[i][1]) == type([]):\n            my_list.append(test_list[i][1][0])\n        else:\n            my_list.append(test_list[i][1])\n    return my_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (tup1[0] - tup2[0], tup1[1] - tup2[1], tup1[2] - tup2[2])\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Subtraction is done by changing the original tuple and reassigning the values as we have to use the negative index\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(new_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1, tup2 = (tuple(x) for x in (test_tup1, test_tup2))\n    return tuple((x - y) for x, y in zip(tup1, tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # if len(test_tup1) == len(test_tup2):\n    #     for i in range(len(test_tup1)):\n    #         test_tup1[i] -= test_tup2[i]\n    # else:\n    #     print('ERROR: Tuple length does not match')\n    #     return\n    #     \n    # return test_tup1\n    \n    # SUBSTRACT TWO TUPLES WITH SAME INDEXES\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n    else:\n        print('ERROR: Tuple length does not match')\n        return\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if type(test_tup1) is not tuple:\n        return 'First argument must be a tuple'\n    elif type(test_tup2) is not tuple:\n        return 'Second argument must be a tuple'\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # creating two empty tuples\n    substraction_tuple = ()\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    else:\n        return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #initialize a tuple to store the returned values\n    subtracted_tuple = ()\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = (0, 0)\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] - test_tup2[i]\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_new = []\n    for element in test_tup1:\n        test_tup1_new.append(element - test_tup2[element])\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    sum = 0\n    for k in range(n):\n        sum += math.comb(n-k,k) * math.comb(k,n-k)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #If n is odd\n    if n%2!= 0:\n        return 0\n    #If n is even\n    else:\n        \n        #Formula for even n\n        #Coeff(n) = (1/2) * (n*(n+1))\n        return ((n+1)*(n/2))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # get the nth power of 2\n    power = 1 << n\n    # starting with the first binomial coefficient, we can find the rest of the binomial coefficients by using the same formula\n    # for powers of 2\n    even_binomial_coefficients = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\n    # add the first two terms\n    sum = even_binomial_coefficients[0]\n    sum += even_binomial_coefficients[1]\n    # we have to use a loop to add each term to the sum\n    for i in range(2, n + 1):\n        sum += even_binomial_coefficients[i] * power\n    # return the sum\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    for i in range(n):\n        ans += int(math.factorial(i+1)/(math.factorial(i)*math.factorial(n-i-1)))\n    return ans\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n + 1):\n        s = s + (2 * i)\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_Coeff_Sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even_binomial_Coeff_Sum = even_binomial_Coeff_Sum + pow(1 - (1 - pow(1 - 1 / pow(1 + 1 / i, 2), 2)) / math.factorial(2), 2)\n    return even_binomial_Coeff_Sum\n    \ndef k_largest_number_using_recursion(num_list, k, curr_index):\n    '''\n    Write a python function that takes in a list of numbers and a number k, and find k largest numbers from that list in a single traversal using recursion.\n    '''\n    if curr_index == len(num_list):\n        return\n    largest_num = 0\n    for i in range(curr_index, len(num_list)):\n        if num_list[i] > largest_num:\n            largest_num = num_list[i]\n    if k == 1:\n        return largest_num\n    k_largest_number_using_recursion(num_list, k - 1, curr_index + 1)\n    \ndef k_largest_number_using_bubble_sort(num_list, k):\n    '''\n    Write a python function that takes in a list of numbers and a number k, and find k largest numbers from that list in a single traversal using bubble sort.\n    '''\n    for i in range(len(num_list) - 1):\n        for j in range(len(num_list) - i - 1):\n            if num_list[j] > num_list[j + 1]:\n                num_list[j], num_list[j + 1] = num_list[j + 1], num_list[j]\n    k_largest_number_using_bubble_sort_helper(num_list, k)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            ans += math.factorial(i)/math.factorial(n-i+1)\n    return ans\n    \nprint(even_binomial_Coeff_Sum(5))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    \n    for i in range(0,n):\n        if i%2 == 0:\n            sum += ((-1)**(i//2)) * ( math.factorial(i)/( math.factorial(n) * math.factorial(i-n)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            result = result + binomial_Coeff(n, i)\n    return result\n    \ndef binomial_Coeff(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k, and returns the value of the binomial coefficient.\n    '''\n    return math.factorial(n) // math.factorial(k) // math.factorial(n - k)\n    \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    result = 0\n    for i in range(0, n+1):\n        if i % 2!= 0:\n            result = result + binomial_Coeff(n, i)\n    return result\n    \ndef binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all odd and even index binomial coefficients.\n    '''\n    odd_sum = odd_binomial_Coeff_Sum(n)\n    even_sum = even_binomial_Coeff_Sum(n)\n    total = odd_sum + even_sum\n    return total\n    \n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k, and finds the sum of the values of all the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result = 0\n    for i in range(0, k+1):\n        result = result + binomial_Coeff(n, i) * multinomial_Coeff(k, i)\n    return result\n    \ndef multinomial_Coeff_Sum(n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of all of the multinomial coefficients.\n    '''\n    result "
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    list_even_index_binomial_coeff = []\n    for i in range(n+1):\n        binomial_coeff = math.factorial(n)//math.factorial(i)//math.factorial(n-i)\n        list_even_index_binomial_coeff.append(binomial_coeff)\n        if i%2==0:\n            sum_even_index_binomial_coeff = 0\n            for j in range(len(list_even_index_binomial_coeff)):\n                if j%2==0:\n                    sum_even_index_binomial_coeff = sum_even_index_binomial_coeff+list_even_index_binomial_coeff[j]\n            print(sum_even_index_binomial_coeff)\nn=int(input(\"Enter the value of n:\"))\neven_binomial_Coeff_Sum(n)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi, sqrt\n    return (pi*r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #radius = 3\n    #height = 2\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.141592654*h*r**2)/3\n    return volume\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume = math.pi * (r**2) * (h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*r**2*h)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for k, v in dict.items():\n        if v >= n:\n            filtered[k] = v\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = {}\n    for key,value in dict.items():\n        if value >= n:\n            d[key] = value\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.get(n,\"Not Found\")\n    #OR\n    #return {k:v for k,v in dict.items() if v >= n}\n    #OR\n    #return {k:v for k,v in dict.items() if v > n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered[key] = value\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = {}\n    for i in dict.items():\n        if i[1] >= n:\n            d[i[0]] = i[1]\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = {k: v for k, v in dict.items() if v >= n}\n    return d\n    #Another option using comprehension \n    #return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dictionary = dict\n    new_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            new_dict.update({key: value})\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = dict\n    new_dict = {k: v for k, v in new_dict.items() if v >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_n= {}\n    for k,v in dict.items():\n        if v >=n:\n            dict_n[k]=v\n    return dict_n\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_before = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            num_before += 1\n    return num_before\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(test_tup[0]) + 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup:\n        #The loop should run until the end of the tuple\n        for i in range(len(test_tup)-1):\n            #Loop should run till the index of the tuple\n            #Then the element should be compared\n            #If the element is not equal to the element of the tuple\n            #Then the number of elements should be increased by 1\n            #If the element is equal to the element of the tuple\n            #Then the count should increase by 1\n            if test_tup[i]!= test_tup[i+1]:\n                return (i+1)\n            else:\n                return (i)\n    else:\n        #If the tuple is empty\n        #Then the count should be 0\n        return 0"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    \n    low = 0\n    high = len(test_tup) - 1\n    \n    while low <= high:\n        mid = int((low + high)/2)\n        if test_tup[mid] > test_tup[mid+1]:\n            high = mid\n        else:\n            low = mid + 1\n    \n    return mid\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    a=0\n    for i in range(0,len(test_tup)):\n        if test_tup[i]==test_tup[i-1]:\n            a+=1\n    return a\nprint(count_first_elements([1,2,3,3,3,4,5,6,7,7,8,9,10,11,3,4,5]))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    cnt = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            cnt += 1\n    print(cnt)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0, len(test_tup)):\n        if i == 0:\n            count = 1\n        else:\n            if test_tup[i] < test_tup[i-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elem = test_tup[0]\n    count = 0\n    for i in test_tup:\n        if i < first_elem:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+3)*(2*n+5)//6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n - 1\n    a = 1\n    b = 1\n    dec = 0\n    count = 0\n    for i in range(n):\n        dec = a * (a + 1) * 0.5\n        a = a + 1\n        b = b + 1\n        count = count + 1\n    print('nth decagonal is: ',dec)\n    return dec\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum((i * (i + 1)) // 2 for i in range(n))\nprint(is_num_decagonal(10))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec = (n*(n+1)/2) - 1\n    return dec\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(x**2 for x in range(1,n+1))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_decagonal = 0\n    while n > 0:\n        num_decagonal += 1\n        n -= 1\n    return num_decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*(n+1)//2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * (n + 1)) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # base case:\n    if n == 0: return 0\n    \n    # logic:\n    return n * (n * (n + 1) / 2)\n    \n    # return ((n + 1) * (n + 2) / 2)\n    \n    \nprint(is_num_decagonal(0)) # 0\nprint(is_num_decagonal(1)) # 1\nprint(is_num_decagonal(2)) # 6\nprint(is_num_decagonal(3)) # 15\nprint(is_num_decagonal(4)) # 28\nprint(is_num_decagonal(5)) # 41\nprint(is_num_decagonal(6)) # 56\nprint(is_num_decagonal(7)) # 63\nprint(is_num_decagonal(8)) # 80\nprint(is_num_decagonal(9)) # 89\nprint(is_num_decagonal(10)) # 96\nprint(is_num_decagonal(11)) # 100\nprint(is_num_decagonal(12)) # 108\nprint(is_num_decagonal(13)) # 121\nprint(is_num_decagonal(14)) # 144\nprint(is_num_decagonal(15)) # 169\nprint(is_num_decagonal(16)) # 196\nprint(is_num_decagonal(17)) # 225\nprint(is_num_decagonal(18)) # 244\nprint(is_num_decagonal(19)) # 270\nprint(is_num_decagonal(20)) # 323\nprint(is_num_decagonal(21)) # 360\nprint(is_num_decagonal(22)) # 400\nprint(is_num_decagonal(23)) # 449\nprint(is_num_decagonal(24)) # 484\nprint(is_num_decagonal(25)) # 529\nprint(is_num_decagonal(26)) # 576\nprint(is_num_decagonal(27)) # 614\nprint(is_num_decagonal(28)) # 664\nprint(is_num_decagonal(29)) # 713\nprint(is_num_decagonal(30)) # 774\nprint(is_num_decagonal(31)) # 823\nprint(is_num_decagonal(32)) # 882\nprint(is_num_decagonal(33)) # 936\nprint(is_num_decagonal(34)) # 992\nprint(is_num_decagonal(35)) # 1050\nprint(is_num_decagonal(36)) # 1100\nprint(is_num_decagonal(37)) # 1167\nprint(is_num_decagonal(38)) # 1225\nprint(is_num_decagonal(39)) # 1293\nprint(is_num_decagonal(40)) # 1361\nprint(is_num_decagonal(41)) # 1416\nprint(is_num_decagonal(42)) # 1480\nprint(is_num_decagonal(43)) # 1539\nprint(is_num_decagonal(44)) # 1596\nprint(is_num_decagonal(45)) # 1663\nprint(is_num_decagonal(46)) # 1722\nprint(is_num_decagonal(47)) # 1787\nprint(is_num_decagonal(48)) # 1856\nprint(is_num_decagonal(49)) # 1922\nprint(is_num_decagonal(50)) # 1998\nprint(is_num_decagonal(51)) # 2069\nprint(is_num_decagonal(52)) # 2131\nprint(is_num_decagonal(53)) # 2186\nprint(is_num_decagonal(54)) # 2240\nprint(is_num_decagonal(55)) # 2300\nprint(is_num_decagonal(56)) # 2367\nprint(is_num_decagonal(57)) # 2426\nprint(is_num_decagonal(58)) # 2493\nprint(is_num_decagonal(59)) # 2561\nprint(is_num_decagonal(60)) # 2628\nprint(is_num_decagonal(61)) # 2690\nprint(is_num_decagonal(62)) # 2760\nprint(is_num_decagonal(63)) # 2835\nprint(is_num_decagonal(64)) # 2894\nprint(is_num_decagonal(65)) # 2962\nprint(is_num_decagonal(66)) # 3031\nprint(is_num_decagonal(67)) # 3094\nprint(is_num_decagonal(68)) # 3161\nprint(is_num_decagonal(69)) # 3228\nprint(is_num_decagonal(70)) # 3289\nprint(is_num_decagonal(71)) # 3366\nprint(is_num_decagonal(72)) # 3449\nprint(is_num_decagonal(73)) # 3595\nprint(is_num_decagonal(74)) # 3642\nprint(is_num_decagonal(75)) # 3703\nprint(is_num_decagonal(76)) # 3769\nprint(is_num_decagonal(77)) # 3836\nprint(is_num_decagonal(78)) # 3895\nprint(is_num_decagonal(79)) # 3963\nprint(is_num_decagonal(80)) # 4030\nprint(is_num_decagonal(81)) # 4094\nprint(is_num_decagonal(82)) # 4161\nprint(is_num_decagonal(83)) # 4218\nprint(is_num_decagonal(84)) # 4279\nprint(is_num_decagonal(85)) # 4358\nprint(is_num_decagonal(86)) # 4398\nprint(is_num_decagonal(87)) # 4456\nprint(is_num_decagonal(88)) # 4497\nprint(is_num_decagonal(89)) # 4564\nprint(is_num_decagonal(90)) # 4608\nprint(is_num_decagonal(91)) # 4667\nprint(is_num_decagonal(92)) # 4716\nprint(is_num_decagonal(93)) # 4781\nprint(is_num_decagonal(94)) # 4850\nprint(is_num_decagonal(95)) # 4913\nprint(is_num_decagonal(96)) # 4972\nprint(is_num_decagonal(97)) # 5040\nprint(is_num_decagonal(98)) # 5095\nprint(is_num_decagonal(99)) # 5160\nprint(is_num_decagonal(100)) # 5220\nprint(is_num_decagonal(101)) # 5288\nprint(is_num_decagonal(102)) # 5357\nprint(is_num_decagonal(103)) # 5426\nprint(is_num_decagonal(104)) # 5475\nprint(is_num_decagonal(105)) # 5533\nprint(is_num_decagonal(106)) # 5599\nprint(is_num_decagonal(107)) # 5672\nprint(is_num_decagonal(108)) # 5755\nprint(is_num_decagonal(109)) # 5823\nprint(is_num_decagonal(110)) # 5880\nprint(is_num_decagonal(111)) # 5948\nprint(is_num_decagonal(112)) # 6006\nprint(is_num_decagonal(113)) # 6066\nprint(is_num_decagonal(114)) # 6136\nprint(is_num_decagonal(115)) # 6193\nprint(is_num_decagonal(116)) # 6260\nprint(is_num_decagonal(117)) # 6309\nprint(is_num_decagonal(118)) # 6378\nprint(is_num_decagonal(119)) # 6446\nprint(is_num_decagonal(120)) # 6514\nprint(is_num_decagonal(121)) # 6573\nprint(is_num_decagonal(122)) # 6642\nprint(is_num_decagonal(123)) # 6712\nprint(is_num_decagonal(124)) # 6785\nprint(is_num_decagonal(125)) # 6850\nprint(is_num_decagonal(126)) # 6920\nprint(is_num_decagonal(127)) # 6989\nprint(is_num_decagonal(128)) # 7060\nprint(is_num_decagonal(129)) # 7123\nprint(is_num_decagonal(130)) # 7192\nprint(is_num_decagonal(131)) "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # if item in dlist:\n    #     return (True, dlist.index(item))\n    # else:\n    #     return (False, -1)\n    #\n    # testlist = [1, 2, 32, 8, 17, 19, 42, 13, 0]\n    # # testlist = [1, 2, 32, 8, 17, 19, 42]\n    # print(sequential_search(testlist, 3))\n    # print(sequential_search(testlist, -1))\n    # print(sequential_search(testlist, 13))\n    \n    \n    low = 0\n    high = len(dlist) - 1\n    found = False\n    while low <= high and not found:\n        mid = (low + high)//2\n        if dlist[mid] == item:\n            found = True\n        else:\n            if item < dlist[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n    return (found, mid)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = 0\n    while not found and index < len(dlist):\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return found, index\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    while index < len(dlist):\n        if dlist[index] == item:\n            return True, index\n        index += 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            index = i\n    return (index, dlist)\n    \n    # pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            position = index\n            return position, index\n    return position, position\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True,i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(0, len(dlist)):\n        if item == dlist[i]:\n            pos = i\n            break\n    return pos == i, pos\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==len(set(test_list)):\n        return True\n    else:\n        return False\n    \nprint(all_unique([1,2,3]))\nprint(all_unique([1,2,3,1]))\nprint(all_unique([1,2,3,1,2,3]))\nprint(all_unique([1,2,3,1,2]))\nprint(all_unique([1,2,3,4,5]))\nprint(all_unique([1,2,3,4,5,5]))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set()\n    for element in test_list:\n        if element in test_set:\n            return False\n        else:\n            test_set.add(element)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    my_list = []\n    if test_list:\n        for i in range(0, len(test_list)):\n            if test_list[i] not in my_list:\n                my_list.append(test_list[i])\n    print(my_list)\n    return my_list\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for num in test_list:\n        if num not in unique_list:\n            unique_list.append(num)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i) > 1:\n            return False\n    return True\n    \ndef unique_elements(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n    \ndef list_comprehension(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n    \ndef list_comprehension(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n    \ndef dict_comprehension(test_dict):\n    '''\n    Write a python function to check if the elements of a given dictionary are unique or not.\n    '''\n    unique_dict = {}\n    for i in test_dict:\n        unique_dict[i] = test_dict[i]\n    return unique_dict\n    \ndef dict_comprehension(test_dict):\n    '''\n    Write a python function to check if the elements of a given dictionary are unique or not.\n    '''\n    unique_dict = {}\n    for i in test_dict:\n        unique_dict[i] = test_dict[i]\n    return unique_dict\n    \ndef search_string_method(test_string):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_string = input('Enter the string: ')\n    # test_string = 'a'\n    check_string = []\n    for i in range(len(test_string)):\n        check_string.append(test_string[i])\n    if set(check_string).intersection(set(test_string)):\n        return False\n    else:\n        return True\n    \ndef search_string_method(test_string):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_string = input('Enter the string: ')\n    # test_string = 'a'\n    check_string = []\n    for i in range(len(test_string)):\n        check_string.append(test_string[i])\n    if set(check_string).intersection(set(test_string)):\n        return False\n    else:\n        return True\n    \ndef search_string_method(test_string):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_string = input('Enter the string: ')\n    # test_string = 'a'\n    check_string = []\n    for i in range(len(test_string)):\n        check_string.append(test_string[i])\n    if set(check_string).intersection(set(test_string)):\n        return False\n    else:\n        return True\n    \ndef search_string_method(test_string):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_string = input('Enter the string: ')\n    # test_string = 'a'\n    check_string = []\n    for i in range(len(test_string)):\n        check_string.append(test_string[i])\n    if set(check_string).intersection(set(test_string)):\n        return False\n    else:\n        return True\n    \ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_list = input('Enter the list: ')\n    # test_list = ['a', 'b', 'c']\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n    \ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_list = input('Enter the list: ')\n    # test_list = ['a', 'b', 'c']\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n    \ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_list = input('Enter the list: ')\n    # test_list = ['a', 'b', 'c']\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n    \ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_list = input('Enter the list: ')\n    # test_list = ['a', 'b', 'c']\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n    \ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_list = input('Enter the list: ')\n    # test_list = ['a', 'b', 'c']\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n    \ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_list = input('Enter the list: ')\n    # test_list = ['a', 'b', 'c']\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n    \ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_list = input('Enter the list: ')\n    # test_list = ['a', 'b', 'c']\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n    \ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # test_list = input('Enter the list: ')\n    # test_list = ['a', 'b', 'c']\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n    \ndef all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a give"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_set = set(test_list)\n    if len(test_list) == len(list_set):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = True\n    for i in test_list:\n        if test_list.count(i) > 1:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    if n > m:\n        return nums2\n    elif n < m:\n        return nums1\n    else:\n        new_list = []\n        for i in range(n):\n            new_list.append(nums1[i] - nums2[i])\n        return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1)-set(nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]-=nums2[i]\n    return nums1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #code here\n    string = str(n)\n    for i in range(len(string)):\n        if int(string[i])>int(string[i]) and int(string[i])<=int(string[i]):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    assert type(n) == int, \"Input is not an integer\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    if n < 0:\n        n = n*-1\n    while (n > 0):\n        n, x = divmod(n, 10)\n        count += 1\n        if(x == 9):\n            continue\n        elif(x < x):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    n = str(n)\n    for i in range(len(n)):\n        freq[int(n[i])] += 1\n    if freq.count(n) <= n:\n        return True\n    return False\nprint(validate(1234))\nprint(validate(2933))\nprint(validate(12345))"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError('Please enter integer')\n    if n <= 0:\n        raise ValueError('Please enter non-negative number')\n    res = \"\"\n    for i in str(n):\n        res += i\n    freq = Counter(res)\n    flag = True\n    for i in freq.keys():\n        if freq[i] > i:\n            flag = False\n    return flag\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n // 10\n    return count\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = str(n)\n    for i in range(len(num)):\n        if(num.count(num[i]) <= i):\n            print(num[i], \"is less than or equal to itself\")\n            return True\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n > 0:\n        digits = str(n)\n        count = 0\n        for digit in digits:\n            if digit > 0:\n                count += 1\n            if count > 1:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    if n <= 0:\n        return False\n    \n    number = str(n)\n    \n    digits = {}\n    \n    for i in range(len(number)):\n        digits[number[i]] = digits.get(number[i], 0) + 1\n        \n    for key, value in digits.items():\n        if key <= value:\n            return False\n    \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    while(n!= 0):\n        digits.append(n % 10)\n        n = n // 10\n    count = []\n    for d in digits:\n        count.append(digits.count(d))\n    for i in range(len(count)):\n        if count[i] > d:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    else:\n        list = list[1:]\n        if list[0] == element:\n            return True\n        else:\n            return check_element(list,element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            count +=1\n    if count == len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i]==element for i in range(len(list)))\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab+')\n    if (pattern.search(text) is not None):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a+b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a_b_check = re.search(r'ab', text)\n    if a_b_check is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_list = list(text)\n    count = 0\n    for i in range(len(text_list)):\n        if(text_list[i] == 'a'):\n            if(text_list[i+1] == 'b' and text_list[i+2] == 'b'):\n                count += 1\n            elif(text_list[i+1] == 'b'):\n                count += 1\n            elif(text_list[i+2] == 'b'):\n                count += 1\n            else:\n                continue\n        else:\n            continue\n    if(count == 3 or count == 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'a' and text[i+1] == 'b' and text[i+2] == 'b' or text[i] == 'a' and text[i+1] == 'b' and text[i+2] == 'b' and text[i+3] == 'b':\n            return True\n    return False\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a[b]{2,3}', text)!= None:\n        return 'True'\n    else:\n        return 'False'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a{2,3}b',text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count = 0\n    for i in range(len(text)):\n        if text[i] == 'a':\n            if text[i+1] == 'b':\n                if text[i+2] == 'b':\n                    count += 1\n    return count\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return True if re.search(r'a[b]*[b]*', text) else False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab+')\n    #print(pattern.search(text))\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    global_max_sum = float('-inf')\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # max_sum = -1\n    # temp_sum = 0\n    # for i in range(n):\n    #     if(a[i] > temp_sum):\n    #         temp_sum = a[i]\n    #         max_sum = temp_sum\n    #     else:\n    #         temp_sum += a[i]\n    #         max_sum = max(max_sum, temp_sum)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    from collections import defaultdict\n    \n    # Time Complexity O(n) \n    # Space Complexity O(n)\n    if n<=0 or k<=0:\n        return\n        \n    max_sum = 0\n    sum = 0\n    sum_dict = defaultdict(int)\n    sum_dict[0] = -1\n    for i in range(n):\n        sum = sum+a[i]\n        max_sum = max(max_sum, sum)\n        if sum in sum_dict:\n            print(i, sum, sum_dict[sum])\n        if i-sum_dict[sum] > k:\n            sum = sum-a[sum_dict[sum]]\n            sum_dict[sum] = i\n            max_sum = max(sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    max_sum = 0\n    temp = 0\n    for i in range(n):\n        temp += a[i]\n        if temp == k:\n            sum = temp\n        if temp > k:\n            temp = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # max_value = -1e10\n    # max_value_index = 0\n    # max_value_count = 0\n    # print(a)\n    # for i in range(n):\n    #     # print(i, \" \", a[i])\n    #     # print(i, \" \", a[i], \" \", a[i] + a[i+1])\n    #     max_value = max(max_value, a[i] + a[i+1])\n    #     if a[i] + a[i+1] == max_value:\n    #         max_value_count += 1\n    #     # print(max_value, max_value_count)\n    #     if max_value_count == k:\n    #         max_value_index = i\n    #         max_value_count = 0\n    # return max_value, max_value_index\n    sums = 0\n    max_sum_count = 0\n    max_sum = 0\n    for i in range(n):\n        sums += a[i]\n        if max_sum < sums:\n            max_sum = sums\n            max_sum_count = 1\n        elif max_sum == sums:\n            max_sum_count += 1\n    return max_sum, max_sum_count\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    x = a[:k]\n    y = a[k:]\n    x = sorted(x)\n    y = sorted(y)\n    return max(x[0]+y[0], max(x[1]+y[1], x[2]+y[2]))\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    global x, max_sum\n    max_sum = float('-inf')\n    sub_array = 0\n    for i in range(n):\n        sub_array += a[i]\n        if (sub_array % k == 0):\n            max_sum = max(max_sum, sub_array)\n        if (sub_array % k!= 0):\n            sub_array = sub_array - a[i]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if a is None or k <= 0:\n        return None\n    max_sum = float('-inf')\n    for i in range(n - k + 1):\n        current_sum = sum(a[i:i+k])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -999999999999999\n    for i in range(n-k+1):\n        curr_sum = 0\n        for j in range(k):\n            curr_sum += a[i+j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*(n+1)//2\nprint(square_Sum(7))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            result += i**2\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Your code here\n    sq_sum = 0\n    for i in range(0,n,2):\n        sq_sum = sq_sum + (i*i)\n    return sq_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(0,n):\n            sum += (i+1)**2\n        return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Complete this function\n    \n    s=0\n    for i in range(1,n+1):\n        if i%2==0:\n            s=s+i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += i**2\n    return sum\nprint(square_Sum(10)) "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(0,n):\n        sum_of_squares += i*i\n    return sum_of_squares\nprint(square_Sum(4))\nprint(square_Sum(8))\nprint(square_Sum(6))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    if n <= 0:\n        return sum\n    else:\n        for i in range(n):\n            if i % 2 == 0:\n                sum = sum + (i*i)\n        return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if n<1:\n        return None\n    else:\n        s=0\n        for i in range(n):\n            if (i%2==0):\n                s=s+i**2\n        return s\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(max(list1[i]))\n    print(\"The maximum length is: \")\n    print(list2)\n    return list2\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for list in list1:\n        if len(list) > max_length:\n            max_length = len(list)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for sublist in list1:\n        if len(sublist)>max_length:\n            max_length=len(sublist)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for sublist in list1:\n        if len(sublist) > maxlen:\n            maxlen = len(sublist)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length=len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max(list1, key=len)):\n            max_length = len(list1[i])\n            \n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # len_of_list = []\n    # for i in list1:\n    #     len_of_list.append(len(i))\n    # print(max(len_of_list))\n    max_len = max([len(i) for i in list1])\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0: return 1\n    if n == 0: return 0\n    if n == 1: return k\n    if k == 1: return n\n    if k == 2: return n\n    res = count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n    return res\n    \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 and k == 0:\n        return 1\n    else:\n        # Assuming that the number of colors is greater than or equal to k\n        if k > n:\n            return 0\n        \n        # Initializing the no_of_ways to 0 as we do not have any way to paint the fence\n        # After some loop, the no_of_ways will be equal to n, otherwise, it will be less than n.\n        # Hence, we can update the no_of_ways by using the above logic\n        no_of_ways = 0\n        \n        # Starting the loop to solve the problem\n        for i in range(1, k+1):\n            # No. of ways to paint the fence\n            no_of_ways = no_of_ways + count_no_of_ways(n-1, i)\n        \n        return no_of_ways\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if k == 1:\n        return (n-1)\n    if k == 2:\n        return n-1\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2:\n        return 2\n    if n < 2:\n        return 0\n    if k == 1:\n        return 1\n    if k > n:\n        return 0\n    dp = [[0 for i in range(k)] for i in range(n)]\n    dp[0][0] = 1\n    dp[1][0] = 1\n    dp[0][1] = 2\n    dp[1][1] = 2\n    for i in range(2, n):\n        for j in range(2, k):\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-1] + dp[i][j-1]) % 1000000007\n    return dp[n-1][k-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1 or k == n:\n        return 1\n    if k == 2 or k == n-1:\n        return n\n    \n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n        \ndef count_no_of_ways_better(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1 or k == n:\n        return 1\n    if k == 2 or k == n-1:\n        return n\n    \n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][1] = 1\n        dp[i][2] = n\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            if j >= 2:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + dp[i][j]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if k == 0 or n == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0 or n <= 0 or k <= 0 or k > n:\n        return 0\n    if n == k:\n        return 1\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def countWays(n, k, color, lookup, result):\n        if(n == 0):\n            result.append(color)\n            return\n        \n        if(lookup[n] == -1):\n            lookup[n] = countWays(n-1, k, color, lookup, result) + countWays(n-1, k, k+1, lookup, result)\n        else:\n            result.append(color)\n            lookup[n] = lookup[n] + 1\n        return lookup[n]\n    \n    if(n == 0):\n        return 0\n    \n    lookup = [-1 for i in range(n+1)]\n    result = []\n    \n    return countWays(n, k, 1, lookup, result)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1: \n        return 1\n    \n    #return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-2) if k == 2 else count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count_ways = [[0 for x in range(k+1)] for y in range(n+1)] \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            count_ways[i][j] = count_ways[i-1][j]\n            if i!= j:\n                count_ways[i][j] += count_ways[i-1][j-1]\n    \n    return count_ways[n][k]\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #assert(n!= 0) and (m!= 0)\n    return n//m\n    \ndef factorial(n):\n    \"\"\"\n    Write a python function to find the factorial of a given number.\n    \"\"\"\n    assert(n > 0)\n    \n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \ndef power(a, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return a\n    if n % 2!= 0:\n        return a * power(a, n-1)\n    else:\n        return a * power(a, n//2) * a\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return int(math.ceil(n/m))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n == 0):\n        return 1\n    if(n < 0 and m < 0):\n        return -find(abs(n),abs(m))\n    if(n < 0 and m > 0):\n        return -find(abs(n),m)\n    return find(n,m-1) + 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return m\n    return find(m%n,n)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # your code here\n    a = n%m\n    print(a)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = 0\n    if n>m:\n        quotient = n//m\n    elif n<m:\n        quotient = m//n\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m%n == 0:\n        return n\n    else:\n        return find(m, n-1)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return h*(math.sin(math.radians(180)))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2+h**2)\n    return s\ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == 0:\n        s = h/2\n    else:\n        s = w/math.sin(math.pi/4)\n    return s\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function that computes the distance between two points.\n    '''\n    dist = math.sqrt((x2-x1)**2+(y2-y1)**2)\n    return dist\ndef distance2(x1,y1,x2,y2):\n    '''\n    Write a function that computes the distance between two points.\n    '''\n    dist = math.sqrt((x2-x1)**2+(y2-y1)**2)\n    return dist\ndef distance3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x3-x1)**2+(y3-y1)**2)\n    return dist\ndef distance4(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x4-x1)**2+(y4-y1)**2)\n    return dist\ndef distance5(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x5-x1)**2+(y5-y1)**2)\n    return dist\ndef distance6(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x6-x1)**2+(y6-y1)**2)\n    return dist\ndef distance7(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x7-x1)**2+(y7-y1)**2)\n    return dist\ndef distance8(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x8-x1)**2+(y8-y1)**2)\n    return dist\ndef distance9(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x9-x1)**2+(y9-y1)**2)\n    return dist\ndef distance10(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x10-x1)**2+(y10-y1)**2)\n    return dist\ndef distance11(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10,x11,y11):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x11-x1)**2+(y11-y1)**2)\n    return dist\ndef distance12(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10,x11,y11,x12,y12):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x12-x1)**2+(y12-y1)**2)\n    return dist\ndef distance13(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10,x11,y11,x12,y12,x13,y13):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x13-x1)**2+(y13-y1)**2)\n    return dist\ndef distance14(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10,x11,y11,x12,y12,x13,y13,x14,y14):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x14-x1)**2+(y14-y1)**2)\n    return dist\ndef distance15(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10,x11,y11,x12,y12,x13,y13,x14,y14,x15,y15):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x15-x1)**2+(y15-y1)**2)\n    return dist\ndef distance16(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10,x11,y11,x12,y12,x13,y13,x14,y14,x15,y15,x16,y16):\n    '''\n    Write a function that computes the distance between a point and a line.\n    '''\n    dist = math.sqrt((x16-x1)**2+(y16-y1)**2)\n    return dist\ndef distance17(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6,x7,y7,x8,y8,x9,y9,x10,y10,x11,y11,x12,y12,x13,y13,x14,y14,x15,y15,x16,y16,x17,y17):\n    '''\n    Write a function that computes the distance between "
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #w,h = map(int, input().split())\n    #s = (w**2 + h**2)**0.5\n    s = round((w**2 + h**2)**0.5)\n    return s\ndef square_root(a,b,c):\n    '''\n    Write a function to find the solutions of the quadratic equation ax**2 + bx + c = 0\n    '''\n    #a,b,c = map(int, input().split())\n    #x1 = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n    #x2 = (-b - math.sqrt(b**2 - 4*a*c))/(2*a)\n    x1 = (-b + math.sqrt(b**2 - 4*a*c))/2*a\n    x2 = (-b - math.sqrt(b**2 - 4*a*c))/2*a\n    return x1,x2\ndef poly_area(a,b,c,d):\n    '''\n    Write a function to find the area of a polygon.\n    '''\n    #a,b,c,d = map(int, input().split())\n    #h = (a+b+c+d)/2\n    #s = (a+b+c)*h/2\n    h = (a+b+c+d)/2\n    s = (a+b+c)*h/2\n    return s\ndef find_short(s,t):\n    '''\n    Write a function to find the length of a shortest path between two points on a 2D plane.\n    '''\n    #s,t = map(int, input().split())\n    #distance = math.sqrt((s[0]-t[0])**2 + (s[1]-t[1])**2)\n    distance = math.sqrt((s[0]-t[0])**2 + (s[1]-t[1])**2)\n    return distance\ndef triangular_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    #a,b,c = map(int, input().split())\n    #s = (a+b+c)/2\n    #area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    s = (a+b+c)/2\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef two_strings(a,b):\n    '''\n    Write a function to find the number of matching characters between two strings.\n    '''\n    #a,b = input().split()\n    #count = 0\n    #for i in range(len(a)):\n    #    if a[i] == b[i]:\n    #        count = count + 1\n    #return count\n    return sum([a[i] == b[i] for i in range(len(a))])\ndef two_strings_recursive(a,b):\n    '''\n    Write a function to find the number of matching characters between two strings.\n    '''\n    #a,b = input().split()\n    #count = 0\n    #if len(a) == len(b):\n    #    if a == b:\n    #        return count\n    #    else:\n    #        return 0\n    #for i in range(len(a)):\n    #    if a[i] == b[i]:\n    #        count = count + 1\n    #        return count\n    count = 0\n    if len(a) == len(b):\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                count += 1\n        return count\n    else:\n        return 0\ndef two_strings_recursive_rightangle(a,b):\n    '''\n    Write a function to find the number of matching characters between two strings.\n    '''\n    #a,b = input().split()\n    #count = 0\n    #if len(a) == len(b):\n    #    if a == b:\n    #        return count\n    #    else:\n    #        return 0\n    #for i in range(len(a)):\n    #    if a[i] == b[i]:\n    #        count = count + 1\n    #        return count\n    count = 0\n    if len(a) == len(b):\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                count += 1\n        return count\n    else:\n        return 0\ndef two_strings_recursive_rightangle_space(a,b):\n    '''\n    Write a function to find the number of matching characters between two strings.\n    '''\n    #a,b = input().split()\n    #count = 0\n    #if len(a) == len(b):\n    #    if a == b:\n    #        return count\n    #    else:\n    #        return 0\n    #for i in range(len(a)):\n    #    if a[i] == b[i]:\n    #        count = count + 1\n    #        return count\n    count = 0\n    if len(a) == len(b):\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                count += 1\n        return count\n    else:\n        return 0\ndef swap_tens_twenty(a):\n    '''\n    Write a function to swap the even and odd digits in a number in a contiguous range.\n    '''\n    #a = input()\n    #a = list(a)\n    #for i in range(1,len(a)):\n    #    if a[i] == '0':\n    #        a[i] = a[i-1]\n    #        a[i-1] = '0'\n    #    if a[i] == '1':\n    #        a[i] = a[i-1]\n    #        a[i-1] = '1'\n    #a = ''.join(a)\n    #print(a)\n    even_index = 0\n    while even_index < len(a):\n        if even_index!= 0 and even_index!= len(a)-1:\n            if int(a[even_index]) % 2 == 1:\n                a = a[:even_index] + a[even_index+1:]\n            if int(a[even_index]) % 2 == 0:\n                a = a[:even_index] + a[even_index+1:]\n        even_index += 2\n    return a\ndef print_n_sides(a,b,c):\n    '''\n    Write a function to print the sum of all the angles formed by three points.\n    '''\n    #a,b,c = map(int, input().split())\n    #s = (a+b+c)/2\n    #area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    #print(round(area,1))\n    area = math.sqrt((a+b+c)/2)*math.sqrt((a-b)*(a-b)+((a+b)*(a+b))-(a+b)*(a-b)*(a+b))\n    print(round(area,1))\ndef optimal_number(n):\n    '''\n    Write a function to find the total number of ways a knight can traverse a chessboard of size NxN.\n    '''\n    #n = int(input())\n    #area = math.sqrt(n*n-n)\n    #print(round(area,1))\n    area = math.sqrt(n*n-n)\n    print(round(area,1))\ndef convert_to_roman(n):\n    '''\n    Write a function to convert a decimal integer to its corresponding roman numeral.\n    '''\n    #n = int(input())\n    #roman = ''\n    #if n >= 1000:\n    #    roman += 'M'\n    #    n = n - 1000\n    #if n >= 900:\n    #    roman += 'CM'\n    #    n = n - 900\n    #if n >= 500:\n    #    roman += 'D'\n    "
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2-2*h*w*math.cos(math.pi/4))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = w * h / 2\n    if area > 1:\n        side = (area - 1)**0.5\n    else:\n        side = 1\n    print(\"other side of right angle is \", side)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = (w**2 + h**2)**.5\n    return a\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w * h)/2\n    print(round(math.sqrt(s * (s - w) * (s - h) * (s - w - h)),3))\n    \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"\\n3rd side of right angled triangle\\n\")\n    print(w*h)\n    \ndef otherside_square(w,h):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    print(\"\\n3rd side of square\\n\")\n    print(w*h)\n    \ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    print(\"\\n3rd side of rectangle\\n\")\n    print(w*h)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for i in range(0, len(listval)):\n        if max_value == None or max_value < listval[i]:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for item in listval:\n        if max_value < item:\n            max_value = item\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for num in listval:\n        if num > max_val:\n            max_val = num\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_v = listval[0]\n    for val in listval:\n        if val > max_v:\n            max_v = val\n    return max_v\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = -1\n    for val in listval:\n        if val > max_value:\n            max_value = val\n    return max_value\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    divisors = 1\n    for i in range(2,int(number/2)+1):\n        if number%i == 0:\n            divisors+=1\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 2\n    div = []\n    while i <= number:\n        if number % i == 0:\n            div.append(i)\n        i += 1\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(i for i in range(1, number) if number%i == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 1\n    for i in range(1, number+1):\n        if number % i == 0:\n            s = s + i\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    while number % divisor!= 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += i\n    return count\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = []\n    for i in range(1,number):\n        if number%i == 0:\n            div.append(i)\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    n = 1\n    s = 0\n    while n<=number:\n        if number%n == 0:\n            s = s + n\n        n = n + 1\n    return s\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    # traverse the array \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    num = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                num+=1\n    return num\nprint(get_Inv_Count([4,5,2,1]))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0 \n    l = len(arr) \n    for i in range(l): \n        for j in range(i+1, l): \n            if arr[i] > arr[j] : \n                inv_count += 1\n    return inv_count \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # count = 0\n    # for i in range(len(arr)-1):\n    #     for j in range(i+1,len(arr)):\n    #         if arr[i] > arr[j]:\n    #             count += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    if not arr: return 0\n    return count_inversions(arr) + get_Inv_Count(arr[1:]) \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    print(arr)\n    if len(arr)<2:\n        return 0\n    if len(arr)==2:\n        return 0 if arr[0]<=arr[1] else 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion_count = 0\n    l = len(arr)\n    for i in range(l):\n        for j in range(i+1,l):\n            if arr[j] < arr[i]:\n                inversion_count += 1\n    print(inversion_count)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def helper(arr, l, r):\n        if l >= r:\n            return 0\n        if r-l <= 1:\n            return 0\n        mid = (r + l)//2\n        left = helper(arr, l, mid)\n        right = helper(arr, mid, r)\n        return left + right + merge(arr, l, mid, r)\n    \n    def merge(arr, l, mid, r):\n        # merge two sorted array into one sorted array\n        i = l\n        j = mid\n        ans = 0\n        k = l\n        while (i <= mid) and (j <= r):\n            if arr[i] < arr[j]:\n                ans += mid - i\n                i += 1\n            else:\n                ans += r - j\n                j += 1\n        while (i <= mid):\n            ans += mid - i\n            i += 1\n        while (j <= r):\n            ans += r - j\n            j += 1\n        return ans\n    \n    return helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    length=len(arr)\n    #print(arr)\n    inversions = 0\n    for i in range(length):\n        for j in range(length):\n            if arr[i] > arr[j] and j>i:\n                inversions+=1\n    return inversions\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return list1\n    out = []\n    for i in list1:\n        if isinstance(i, list):\n            out.extend(flatten_list(i))\n        else:\n            out.append(i)\n    return out\n    \nprint(flatten_list([1, 2, 3, [4, 5], 6, 7]))\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for ele in list1:\n        if isinstance(ele, list):\n            result = result + flatten_list(ele)\n        else:\n            result.append(ele)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    lst_flat = []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Your code here\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    if list1 ==[]:\n        return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            for sub_item in item:\n                flat_list.append(sub_item)\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #initialize empty array\n    new_list = []\n    #append each element in the given list\n    for element in list1:\n        if type(element) == list:\n            new_list.extend(flatten_list(element))\n        else:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n    for list_item in list1:\n        if isinstance(list_item, list):\n            final_list.extend(flatten_list(list_item))\n        else:\n            final_list.append(list_item)\n    return final_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2=[]\n    for item in list1:\n        if type(item)==list:\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for (s, t, v) in stdata:\n        d[s] += v\n        d[t] -= v\n    return max(d.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_map = {}\n    max_aggregate = 0\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for i in range(len(stdata)):\n        cur_sum = 0\n        for j in range(len(stdata[i])):\n            cur_sum += stdata[i][j]\n        if cur_sum > max_aggregate:\n            max_aggregate = cur_sum\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sum1 = 0\n    count1 = 0\n    sum2 = 0\n    count2 = 0\n    max_aggregate = -1\n    for i in stdata:\n        if i[0] > max_aggregate:\n            max_aggregate = i[0]\n        sum1 = i[1] + sum1\n        count1 += 1\n        sum2 = i[2] + sum2\n        count2 += 1\n    return sum1/count1, sum2/count2\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    max_aggregate = 0\n    for t in stdata:\n        aggregate[t[0]] += t[1]\n        if aggregate[t[0]] > max_aggregate:\n            max_aggregate = aggregate[t[0]]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    while stdata:\n        temp_max = max(stdata)\n        stdata.remove(temp_max)\n        if temp_max > max_aggregate:\n            max_aggregate = temp_max\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxAgg = 0\n    for i in range(len(stdata)):\n        if stdata[i][1] > maxAgg:\n            maxAgg = stdata[i][1]\n    return maxAgg\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for x, y, z in stdata:\n        d[x].append(y)\n        d[x].append(z)\n    max_sum = float(\"-inf\")\n    for key in d:\n        if max(d[key]) > max_sum:\n            max_sum = max(d[key])\n    return max_sum\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # stdata = [(\"A\", 10, 3), (\"A\", -10, 3), (\"A\", -10, 3), (\"A\", 10, 3)]\n    # Expected output\n    # 100\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for a,b in stdata:\n        d[a] += b\n    return max(d.items(), key=lambda x:x[1])[0]\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Using DP\n    n = int(n)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Binary Seq: Count of 1's\n    #\n    # Find sum of first n bits \n    # 2n <= n < 2n + 1\n    # 2^n <= x <= (2^n+1) - 1\n    # x % 2 == 0\n    # 2^n + 1 - x % 2 == x % 2\n    # n * (n+1) / 2 = x\n    # 2^(n+1)/2 - x = n\n    # 2^(n+1)/2 - n - x = n\n    # x = n + 2^(n+1) / 2 - 2^(n+1) / 2\n    # x = n + 2^n - 2^n\n    #\n    # 2n <= n < 2n + 1\n    # 2^n <= x <= (2^n+1) - 1\n    # 2^n + 1 - x % 2 == x % 2\n    # x == 2^n - 2^(n-1)\n    # x == 2^n - 2^(n-1) - 1\n    #\n    # n = 2 ^ k - 1\n    # n = 2 ^ k - 1 - 2^(k-1)\n    # n = 2 ^ k - 1 - 2^(k-1) - 1\n    # n = 2^k - 1 - 2^(k-1)\n    # n = 2^k - 1 - 2^(k-1) - 1 - 2^(k-1)\n    # n = 2^k - 1 - 2^(k-1) - 2^(k-1)\n    # n = 2^k - 1 - 2^(k-1) - 2^(k-1) - 1\n    # n = 2^k - 1 - 2^(k-1) - 2^(k-1) - 1 - 1\n    # n = 2^k - 1 - 2^(k-1) - 2^(k-1) - 1 - 1 - 1\n    #\n    # 2^k - 1 - 2^(k-1) - 1\n    # n = 2^k - 1 - 2^(k-1) - 1\n    # n = 2^k - 1 - 2^(k-1) - 1 - 1\n    #\n    # 2^k - 2^(k-1) - 1\n    # n = 2^k - 2^(k-1) - 1\n    # n = 2^k - 2^(k-1) - 1 - 1\n    #\n    # 2^k - 2^(k-1)\n    # n = 2^k - 2^(k-1)\n    # n = 2^k - 2^(k-1) - 1\n    #\n    # 2^k - 1\n    # n = 2^k - 1\n    # n = 2^k - 1 - 1\n    #\n    # 2^k\n    # n = 2^k\n    # n = 2^k - 1\n    #\n    # 2^(k-1)\n    # n = 2^(k-1)\n    # n = 2^(k-1) - 1\n    #\n    # 2^k - 2^(k-1) - 1\n    # n = 2^k - 2^(k-1) - 1\n    # n = 2^k - 2^(k-1) - 1 - 1\n    #\n    #\n    #     2^k - 2^(k-1) - 1\n    # 2^k - 2^(k-1) - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    #\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    #\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    #\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    # 2^k - 2^(k-1) "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_ = 0\n    for i in range(1 << n):\n        sum_ += i\n    return sum_\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def count_seq(s):\n        \n        if s[0]==0:\n            return (1+count_seq(s[1:]))\n        elif s[0]==1:\n            return (1+count_seq(s[1:]))\n        \n    return count_seq([int(i) for i in '{0:036b}'.format(n)[::-1]])\n    \n    "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def is_valid_binary(n): \n        return (bin(n).count('1') == n)\n    def add_to_list(n, list_a): \n        list_a.append(n) \n        list_a.sort() \n    def binary_addition(n, list_a): \n        x = 0\n        if n == 0:\n            return\n        if n == 1:\n            list_a.append(n)\n            list_a.sort()\n            return\n        for i in range(n):\n            binary_addition(n-1, list_a)\n            x = x + list_a[i] \n        if is_valid_binary(x): \n            add_to_list(x, list_a)\n    list_a = []\n    binary_addition(n, list_a)\n    return len(list_a) \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #code here\n    n = int(n)\n    count = 0\n    for i in range(n):\n        binary_num = list(bin(2**i))\n        if int(binary_num[0]) + int(binary_num[-1]) == 2**(n-i-1):\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def gen_bits(n):\n        '''\n        Generates a list of binary numbers of length 2n\n        '''\n        bits = []\n        while n:\n            bits.append(1)\n            n -= 1\n        return bits\n    def get_first_last_sum(n):\n        '''\n        Calculates the sum of first n bits and last n bits\n        '''\n        return (int(\"\".join(map(str, gen_bits(n)[::-1])), 2) + int(\"\".join(map(str, gen_bits(n))), 2)) \n    def check_if_binary_sequence(n, val1, val2):\n        '''\n        Checks if the value of the first n bits sum is equal to the sum of the last n bits\n        '''\n        return val1 == get_first_last_sum(n)\n    def find_binary_seq(n):\n        '''\n        Returns all binary sequences of length 2n and their length\n        '''\n        ans = []\n        for i in range(1, n+1):\n            if check_if_binary_sequence(i, get_first_last_sum(i), get_first_last_sum(n-i)):\n                ans.append(i)\n        return ans\n    return find_binary_seq(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    for i in range(n+1):\n        for j in range(n-i+1):\n            k = bin(i+j)[2:]\n            if len(k)<n:\n                k = '0'*(n-len(k))+k\n            s = sum(k)\n            res += 1 if s==sum(k[:-1]) else 0\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1<<i):\n            if (j>>(i-1)) & 1 == (j>>(i+1)) & 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    else:\n        return 1 + max(map(dict_depth, d.values()))\n    \ndef main():\n    '''\n    Write a function that takes in a dictionary and \n    returns a dictionary with the same keys and values, but\n    with all the values being the product of the corresponding\n    values. For example, if the input was {'a': 1, 'b': 2, 'c': 3}\n    the output would be {'a': 1, 'b': 2, 'c': 6}.\n    '''\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(dict_prod(d))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return (max([0] + [1 + dict_depth(v) for k,v in d.items()]))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 0\n        for key in d:\n            if isinstance(d[key], dict):\n                depth += 1\n        return depth + dict_depth(d[key])\n    \n    "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d:\n        if isinstance(d[i],dict):\n            depth = max(dict_depth(d[i]),depth)\n        else:\n            depth = depth + 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(dict_depth,d.values()))+1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d, depth = 0):\n        for key, value in d.items():\n            if type(value) == dict:\n                depth = depth + 1\n            else:\n                depth = depth\n        return depth\n    return depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return max(dict_depth(v) for v in d.values()) + 1\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(map(dict_depth, d.values())) + 1 if d else 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key, value in d.items():\n        if type(value) == dict:\n            count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        if d:\n            return 1 + max([dict_depth(v) for v in d.values()])\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index]==0 :\n        return arr[index]\n    else :\n        return find_Element(arr,ranges,rotations,index-rotations[index])+find_Element(arr,ranges,rotations,index-rotations[index]+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges):\n        # print('element at index : ',i)\n        # print('element at index : ',arr[i])\n        # print('rotations : ',rotations[i])\n        if(index == i):\n            return arr[i]\n        elif (rotations[i] == rotations[index] and index!= i):\n            return find_Element(arr,ranges,rotations,i)\n        else:\n            if(rotations[index] > rotations[i]):\n                index = i\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < ranges[rotations] :\n        return arr[index]\n    else :\n        index = index - ranges[rotations]\n        return find_Element(arr,ranges,rotations+1,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    flag = 0\n    rot_count = 0\n    \n    for i in range(index,len(arr)):\n        if(arr[i] > ranges):\n            flag = 1\n            break\n    if(flag == 1):\n        return 0\n    \n    while(rot_count!= rotations):\n        if(arr[index] > ranges):\n            index = (index+rotations)%len(arr)\n        else:\n            rot_count += 1\n    \n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    result = arr[0]\n    i = 0\n    j = 0\n    while i<len(ranges) and j < len(rotations):\n        if ranges[i] <= index <= ranges[i+1]:\n            result = arr[j]\n            j+=1\n        else:\n            i+=1\n    return result\n    \nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9]\n    ranges = [5,10]\n    rotations = [0,1,2,3,4]\n    index = 4\n    result = find_Element(arr,ranges,rotations,index)\n    print(\"Result is: {}\".format(result))\n    "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(rotations,index)\n    if rotations == 0 :\n        if index < len(arr) :\n            return arr[index]\n        return -1\n    if index >= len(arr) :\n        return -1\n    if index % 2 == 0 :\n        return find_Element(arr,ranges,rotations,index-2)\n    else :\n        return find_Element(arr,ranges,rotations-1,index-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 :\n        index += len(arr)\n    if index < ranges[0] :\n        return arr[0]\n    elif index > len(arr)-1 :\n        return arr[-1]\n    elif index < ranges[1] :\n        return arr[index]\n    else :\n        if rotations == 1 :\n            return arr[index - ranges[1]]\n        elif rotations == 2 :\n            return arr[index - ranges[1] - 1]\n        elif rotations == 3 :\n            return arr[index - ranges[1] - 2]\n        else :\n            return arr[index - ranges[1] - 3]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(arr,ranges,rotations,index)\n    if index==len(arr)-1 :\n        return (arr[index],index)\n    for i in range(len(rotations)):\n        if index in range(ranges[i],ranges[i+1]):\n            if index in range(0,ranges[i]):\n                ranges[i]+=1\n                break\n            elif index in range(ranges[i],ranges[i+1]):\n                ranges[i]+=1\n                break\n            else:\n                return find_Element(arr,ranges,rotations,index-1)\n    return find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    flag=0\n    for i in range(len(ranges)) :\n        if ranges[i][0] <= arr[index] and arr[index] <= ranges[i][1] :\n            flag=1\n            break\n    \n    if flag == 1 :\n        for i in range(len(rotations)) :\n            if index >= rotations[i][0] and index <= rotations[i][1] :\n                return i\n            \n    else :\n        return -1\n        \narr = [1,2,3,4,5]\nranges = [[1,2], [2,3], [3,4], [4,5]]\nrotations = [[1,4], [2,3], [4,5]]\nindex = 3\nprint (find_Element(arr,ranges,rotations,index))\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr)==1 :\n        if index>=len(arr) or index<0 :\n            print(\"Index out of bounds\")\n        else :\n            print(\"Element found at index \",index)\n    else :\n        mid = len(arr)//2\n        if index>=mid or index<mid :\n            print(\"Element not found\")\n        else :\n            if ranges[mid] == None :\n                return\n            if ranges[mid]==0 :\n                if arr[index] == arr[mid] :\n                    return\n                elif arr[index]!= arr[mid] :\n                    mid += 1\n                    return find_Element(arr,ranges,rotations,index)\n                else :\n                    return mid\n            if ranges[mid] == 1 :\n                if arr[mid] == arr[index] :\n                    return\n                elif arr[mid]!= arr[index] :\n                    mid -= 1\n                    return find_Element(arr,ranges,rotations,index)\n                else :\n                    return mid\n            if ranges[mid] == 2 :\n                if arr[mid] == arr[index] :\n                    return\n                elif arr[mid]!= arr[index] :\n                    return mid\n                else :\n                    return mid\n    "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word_list = []\n    for word in words:\n        if word[0].lower() == 'p':\n            word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for w in words:\n        if w.startswith('p'):\n            return w, w\n    return None, None\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word, word\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[0] == 'p':\n            res.append(word)\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #words = ['pepper', 'pepperin', 'pepperon', 'pepperpot', 'peppernuts', 'peppers']\n    pattern = re.compile(\"^p\")\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            return words[i], words[i + 1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = input('Enter a list of words: ').split()\n    words = [x.strip() for x in words]\n    # for i in words:\n    #     if i.startswith('p'):\n    #         print(i)\n    #         words.remove(i)\n    \n    # for x in range(len(words)):\n    #     if words[x].startswith('p'):\n    #         print(words[x])\n    #         words.remove(words[x])\n    \n    p = []\n    for x in range(len(words)):\n        if words[x].startswith('p'):\n            p.append(words[x])\n    print('P is present in {} words'.format(len(p)))\n    print(p)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [w for w in words if w.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = [x for x in words if x.startswith(\"p\")]\n    return words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [words[0],words[1]]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0]=='p':\n            return word\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    m = 0\n    curr_sum = 0\n    while index < n:\n        curr_sum += a[index]\n        if curr_sum > m:\n            m = curr_sum\n        if curr_sum < k:\n            index += 1\n            curr_sum = 0\n        else:\n            index += 1\n            curr_sum = 0\n    return m\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    if a[index] == k:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    max_sum_subseq = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                max_sum_subseq[i][j] = a[i - 1]\n            elif j < i:\n                max_sum_subseq[i][j] = max(a[i - 1] + max_sum_subseq[i][j - 1], max_sum_subseq[i - 1][j])\n            else:\n                max_sum_subseq[i][j] = max(max_sum_subseq[i - 1][j], max_sum_subseq[i][j - 1])\n    \n    print(max_sum_subseq)\n    \n    max_sum = max_sum_subseq[n][k]\n    \n    for i in range(n - 1, -1, -1):\n        if max_sum_subseq[i][k] >= max_sum:\n            break\n        max_sum -= max_sum_subseq[i][k]\n    \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if k < 0:\n        return 0\n    \n    if k == n:\n        return a[k]\n    \n    if index == -1:\n        return 0\n    \n    \n    max_sum = float('-inf')\n    for i in range(index, n):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k-1) + a[i])\n    \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0:\n        return 0\n    elif k < index:\n        return 0\n    elif index == n-1:\n        return a[index]\n    else:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    import numpy as np\n    dp = np.zeros((n, k + 1))\n    for i in range(n):\n        dp[i][0] = a[i]\n    for i in range(n):\n        for k in range(1, k + 1):\n            if i >= k:\n                dp[i][k] = max(dp[i - 1][k], a[i] + dp[i - 1][k - 1])\n    return dp[n - 1][k]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #base case\n    if n == 0:\n        return 0\n    #Recursion\n    max_so_far = 0\n    for i in range(index+1):\n        max_so_far = max(max_so_far, max_sum_increasing_subseq(a, n-1, i, k))\n    # max_so_far = max_sum_increasing_subseq(a, n-1, index, k)\n    return max_so_far + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    from collections import deque\n    queue = deque()\n    queue.append([0])\n    indexes = [-1] * (n + 1)\n    max_sum = -float('inf')\n    while queue:\n        subseq = queue.popleft()\n        i = subseq[-1]\n        if i == index:\n            max_sum = max(max_sum, sum(subseq))\n            continue\n        if i + 1 <= n and subseq[-1]!= 0:\n            queue.append(subseq + [i + 1])\n            if i + 1 not in indexes:\n                indexes[i + 1] = len(subseq)\n        if i + 2 <= n and subseq[-1]!= 0:\n            queue.append(subseq + [i + 2])\n            if i + 2 not in indexes:\n                indexes[i + 2] = len(subseq)\n    for i in range(1, len(indexes)):\n        if indexes[i] == k:\n            return sum(a[index:i + 1])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum_sequence = 0\n    max_sum = 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return -1\n    if k == index:\n        return a[index]\n    if k > index:\n        return max_sum_increasing_subseq(a, n-1, index, k)\n    if index > k:\n        return max(max_sum_increasing_subseq(a, n-1, index, k), a[index] + max_sum_increasing_subseq(a, n-1, index+1, k+1))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m]+tuplex[m+1:n]+tuplex[n:]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #Example:\n    # Input : (1, 2, 3, 4)\n    # Output: (1, 2, 3, 4, \":\",)\n    # Output: (1, 2, 3, 4, \":\", \":\",)\n    if len(tuplex)==0:\n        return []\n    if len(tuplex)==1:\n        if tuplex[0]==m:\n            return [tuplex]\n        else:\n            return []\n    if len(tuplex)==2:\n        if tuplex[0]==m and tuplex[1]==n:\n            return [tuplex]\n        else:\n            return []\n    if len(tuplex)==3:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\":\":\n            return [tuplex]\n        else:\n            return []\n    if len(tuplex)==4:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \":\n            return [tuplex]\n        else:\n            return []\n    if len(tuplex)==5:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            return [tuplex]\n        else:\n            return []\n    if len(tuplex)==6:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                return [tuplex]\n        else:\n            return []\n    if len(tuplex)==7:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==8:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==9:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==10:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==11:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==12:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==13:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==14:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==15:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==16:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==17:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==18:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]==\" \" and tuplex[6]==\":\":\n                if tuplex[7]==\" \" and tuplex[8]==\":\":\n                    return [tuplex]\n        else:\n            return []\n    if len(tuplex)==19:\n        if tuplex[0]==m and tuplex[1]==n and tuplex[2]==\" \" and tuplex[3]==\" \" and tuplex[4]==\":\":\n            if tuplex[5]=="
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_new = tuplex[:m] + tuplex[m+1:]\n    return tuplex_new\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[i:i+m] for i in range(0, len(tuplex),m)])\ndef test_colon_tuplex():\n    assert colon_tuplex((1,2,3,4,5,6,7,8,9,10),2,3)==((1,2,3),(4,5,6),(7,8,9),(10,))\n    assert colon_tuplex((1,2,3,4,5,6,7,8,9,10),2,1)==((1,2),(3,4,5),(6,7,8),(9,10))\ndef remove_tuple(tuplex,i,j):\n    '''\n    Write a function to remove a tuple from a tuple.\n    '''\n    return tuple(tuplex[:i]) + tuple(tuplex[i+1:j]) + tuple(tuplex[j+1:])\ndef test_remove_tuple():\n    assert remove_tuple((1,2,3,4,5,6,7,8,9,10),2,3)==((1,2),(3,4,5),(6,7,8),(9,10))\n    assert remove_tuple((1,2,3,4,5,6,7,8,9,10),2,1)==((1,2),(3,4,5),(6,7,8),(9,10))\ndef get_min_max_counts(tuplex,k):\n    '''\n    Write a function to get the minimum and maximum counts of a tuple.\n    '''\n    tuple_min,tuple_max = 0,0\n    for x in range(len(tuplex)):\n        if tuplex[x] > tuple_max:\n            tuple_max = tuplex[x]\n        if tuplex[x] < tuple_min:\n            tuple_min = tuplex[x]\n    return tuple_min,tuple_max\ndef test_get_min_max_counts():\n    assert get_min_max_counts((1,2,3,4,5,6,7,8,9,10),2)==(1,10)\n    assert get_min_max_counts((1,2,3,4,5,6,7,8,9,10),3)==(1,3)\ndef get_count_sum(tuplex,k):\n    '''\n    Write a function to get the sum of counts of a tuple.\n    '''\n    return sum(tuplex)\ndef test_get_count_sum():\n    assert get_count_sum((1,2,3,4,5,6,7,8,9,10),2)==30\n    assert get_count_sum((1,2,3,4,5,6,7,8,9,10),3)==30\ndef get_count_ave(tuplex,k):\n    '''\n    Write a function to get the average of counts of a tuple.\n    '''\n    return sum(tuplex)/len(tuplex)\ndef test_get_count_ave():\n    assert get_count_ave((1,2,3,4,5,6,7,8,9,10),2)==3.5\n    assert get_count_ave((1,2,3,4,5,6,7,8,9,10),3)==3.666666666666666\ndef get_count_std(tuplex,k):\n    '''\n    Write a function to get the standard deviation of counts of a tuple.\n    '''\n    return get_count_ave(tuplex,k)-get_count_sum(tuplex,k)/len(tuplex)\ndef test_get_count_std():\n    assert get_count_std((1,2,3,4,5,6,7,8,9,10),2)==0.5\n    assert get_count_std((1,2,3,4,5,6,7,8,9,10),3)==0.3333333333333333\ndef get_count_tuple(tuplex,k):\n    '''\n    Write a function to get the tuple of counts of a tuple.\n    '''\n    return tuple([tuplex[i:i+k] for i in range(0, len(tuplex),k)])\ndef test_get_count_tuple():\n    assert get_count_tuple((1,2,3,4,5,6,7,8,9,10),2)==((1,2,3),(4,5,6),(7,8,9),(10,))\n    assert get_count_tuple((1,2,3,4,5,6,7,8,9,10),3)==((1,2,3),(4,5,6),(7,8,9),(10,))\ndef get_max_tuple(tuplex,k):\n    '''\n    Write a function to get the tuple of maximum counts of a tuple.\n    '''\n    return max(tuple([tuplex[i:i+k] for i in range(0, len(tuplex),k)]), key=lambda x:len(x))\ndef test_get_max_tuple():\n    assert get_max_tuple((1,2,3,4,5,6,7,8,9,10),2)==((1,2),(3,4,5),(6,7,8),(9,10))\n    assert get_max_tuple((1,2,3,4,5,6,7,8,9,10),3)==((1,2),(3,4,5),(6,7,8),(9,10))\ndef get_max_count(tuplex,k):\n    '''\n    Write a function to get the maximum count of a tuple.\n    '''\n    return max(tuplex)\ndef test_get_max_count():\n    assert get_max_count((1,2,3,4,5,6,7,8,9,10),2)==10\n    assert get_max_count((1,2,3,4,5,6,7,8,9,10),3)==10\ndef get_max_sum(tuplex,k):\n    '''\n    Write a function to get the sum of maximum counts of a tuple.\n    '''\n    return sum(tuplex)\ndef test_get_max_sum():\n    assert get_max_sum((1,2,3,4,5,6,7,8,9,10),2)==60\n    assert get_max_sum((1,2,3,4,5,6,7,8,9,10),3)==120\ndef get_max_ave(tuplex,k):\n    '''\n    Write a function to get the average of maximum counts of a tuple.\n    '''\n    return sum(tuplex)/len(tuplex)\ndef test_get_max_ave():\n    assert get_max_ave((1,2,3,4,5,6,7,8,9,10),2)==5\n    assert get_max_ave((1,2,3,4,5,6,7,8,9,10),3)==5.5\ndef get_max_std(tuplex,k):\n    '''\n    Write a function to get the standard deviation of maximum counts of a tuple.\n    '''\n    return get_max_ave(tuplex,k)-get_max_sum(tuplex,k)/len(tuplex)\ndef test_get_max_std():\n    assert get_max_std((1,2,3,4,5,6,7,8,9,10),2)==0.5\n    assert get_max_std((1,2,3,4,5,6,7,8,9,10),3)==0.6666666666666666\ndef get_max_count_tuple(tuplex,k):\n    '''\n    Write a function to get the tuple of maximum counts of a tuple.\n    '''\n    return tuple([tuplex[i:i+k] for i in range(0, len(tuplex),k)])\ndef test_get_max_count"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = (tuplex[0],)*m,(tuplex[1],)*n\n    return colon_tuplex\ndef is_sorted(n):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    if n == sorted(n):\n        return True\n    else:\n        return False\ndef is_sorted2(n):\n    '''\n    Write a function to check if a list is sorted.\n    '''\n    for i in range(len(n)-1):\n        if n[i] > n[i+1]:\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is palindrome.\n    '''\n    n = str(n)\n    m = len(n)\n    for i in range(m//2):\n        if n[i] == n[m-1-i]:\n            continue\n        else:\n            return False\n    return True\ndef is_palindrome2(n):\n    '''\n    Write a function to check if a number is palindrome.\n    '''\n    n = str(n)\n    m = len(n)\n    i = 0\n    j = m-1\n    while i < j:\n        if n[i] == n[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef num_of_divisor(n):\n    '''\n    Write a function to count the number of divisors of a number.\n    '''\n    count = 1\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\ndef num_of_divisor2(n):\n    '''\n    Write a function to count the number of divisors of a number.\n    '''\n    count = 1\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\ndef num_of_divisor3(n):\n    '''\n    Write a function to count the number of divisors of a number.\n    '''\n    count = 1\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\ndef reverse(n):\n    '''\n    Write a function to get the reversed number.\n    '''\n    n = str(n)\n    r = n[::-1]\n    return int(r)\ndef reverse2(n):\n    '''\n    Write a function to get the reversed number.\n    '''\n    n = str(n)\n    r = n[::-1]\n    return int(r)\ndef reverse3(n):\n    '''\n    Write a function to get the reversed number.\n    '''\n    n = str(n)\n    r = n[::-1]\n    return int(r)\ndef is_palindrome4(n):\n    '''\n    Write a function to check if a number is palindrome.\n    '''\n    n = str(n)\n    m = len(n)\n    i = 0\n    j = m-1\n    while i < j:\n        if n[i] == n[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef is_palindrome5(n):\n    '''\n    Write a function to check if a number is palindrome.\n    '''\n    n = str(n)\n    m = len(n)\n    i = 0\n    j = m-1\n    while i < j:\n        if n[i] == n[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef is_palindrome6(n):\n    '''\n    Write a function to check if a number is palindrome.\n    '''\n    n = str(n)\n    m = len(n)\n    i = 0\n    j = m-1\n    while i < j:\n        if n[i] == n[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef is_palindrome7(n):\n    '''\n    Write a function to check if a number is palindrome.\n    '''\n    n = str(n)\n    m = len(n)\n    i = 0\n    j = m-1\n    while i < j:\n        if n[i] == n[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef is_palindrome8(n):\n    '''\n    Write a function to check if a number is palindrome.\n    '''\n    n = str(n)\n    m = len(n)\n    i = 0\n    j = m-1\n    while i < j:\n        if n[i] == n[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\ndef num_of_divisor_or_palindrome(n):\n    '''\n    Write a function to count the number of divisors of a number.\n    '''\n    count = 1\n    while n % 2 == 0:\n        n = n // 2\n        count += 1\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 2\n    return count\ndef num_of_divisor_or_palindrome2(n):\n    '''\n    Write a function to count the number of divisors of a number.\n    '''\n    count = 1\n    while n % 2 == 0:\n        n = n // 2\n        count += 1\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 2\n    return count\ndef num_of_divisor_or_palindrome3(n):\n    '''\n    Write a function to count the number of divisors of a number.\n    '''\n    count = 1\n    while n % 2 == 0:\n        n = n // 2\n        count += 1\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n // i\n        i += 2\n    return count\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime2(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime3(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime4(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime5(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime6(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\nde"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #return (tuplex[:m]+tuplex[m+1:n]+tuplex[n:],tuplex[m:n])\n    #return (tuplex[:m]+tuplex[n],tuplex[m:n])\n    return (tuplex[:n]+tuplex[n+1:],tuplex)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if tuplex == None:\n        return '.'\n    if m == None:\n        m = 0\n    if n == None:\n        n = 0\n    if m == -1 and n == -1:\n        return \"No colon.\"\n    if m == -1:\n        return tuplex[n]\n    if n == -1:\n        return tuplex[m]\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy=deepcopy(tuplex)\n    for i in range(m):\n        if not i == 0:\n            tuplex_copy.insert(i,tuplex[i][-1])\n    if n!= m:\n        tuplex_copy.append(tuplex[n][0])\n    return tuplex_copy\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    temp=[]\n    for i in range(0,len(tuplex)):\n        if tuplex[i]==m:\n            temp.append(n)\n        elif tuplex[i]==n:\n            temp.append(m)\n    return tuple(temp)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # O(n^2)\n    # def largest_product(nums1, nums2, N):\n    #     if not N or not nums1 or not nums2:\n    #         return None\n    #     if N == 1:\n    #         return max(nums1) * max(nums2)\n    #     def largest_product_recursive(nums1, nums2, N):\n    #         if not N or not nums1 or not nums2:\n    #             return None\n    #         if N == 1:\n    #             return max(nums1) * max(nums2)\n    #         else:\n    #             result = None\n    #             for i in range(len(nums1)):\n    #                 for j in range(len(nums2)):\n    #                     temp = largest_product_recursive(nums1[i+1:], nums2[j+1:], N-1)\n    #                     if result == None or result < temp:\n    #                         result = temp\n    #             return result\n    #     return largest_product_recursive(nums1, nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        if nums1[i] < nums2[i]:\n            products.append(nums2[i]*nums1[i])\n        else:\n            products.append(nums1[i]*nums2[i])\n    products.sort(reverse = True)\n    print(products)\n    print('The highest product is ',products[-1])\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    l1 = len(nums1)\n    l2 = len(nums2)\n    if N > l1 + l2:\n        return\n    if N == 0:\n        return []\n    if N == l1 + l2:\n        return nums1\n    result = []\n    i1, i2 = 0, 0\n    while True:\n        if i1 < l1 and i2 < l2:\n            if nums1[i1] >= nums2[i2]:\n                result.append(nums1[i1])\n                i1 += 1\n            else:\n                result.append(nums2[i2])\n                i2 += 1\n            if i1 == l1 and i2 == l2:\n                return result\n        elif i1 == l1:\n            result.append(nums2[i2])\n            i2 += 1\n        else:\n            result.append(nums1[i1])\n            i1 += 1\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def k_largest(nums1, nums2, k):\n        min_heap = []\n        for num in nums1:\n            heapq.heappush(min_heap, (-num, num))\n        \n        res = []\n        for num in nums2:\n            if len(res) < k:\n                if min_heap[0][1] * num < 0:\n                    heapq.heappush(min_heap, (min_heap[0][1] * num, min_heap[0][1] * num))\n                heapq.heappush(min_heap, (-num, num))\n                heapq.heapify(min_heap)\n            res.append(heapq.heappop(min_heap)[1])\n        return res\n    \n    return k_largest(nums1, nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return [max(nums1[i] * nums2[j], nums1[i] * nums2[j + N] * nums2[j], nums1[i] * nums2[j + N] * nums1[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Time complexity: O(N^2)\n    # Space complexity: O(N)\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    return heapq.nlargest(N, nums1, key=lambda x: nums2.index(x) * nums1.index(x))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Get the product of the first list\n    product1 = nums1[0]\n    # Get the product of the second list\n    product2 = nums2[0]\n    \n    for i in range(1, N):\n        # Get the product of the first list\n        product1 *= nums1[i]\n        # Get the product of the second list\n        product2 *= nums2[i]\n        \n    return max(product1, product2)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    nums1.sort()\n    nums2.sort()\n    i = 0\n    res = 0\n    while i < N and nums1[i] * nums2[i] > res:\n        res = max(res, nums1[i] * nums2[i])\n        i += 1\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # factor_index = 0\n    # max_num = 0\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         if nums1[i] >= nums2[j]:\n    #             factor_index = i\n    #             break\n    #         else:\n    #             factor_index = j\n    #     max_num = max(max_num, nums1[factor_index] * nums2[i])\n    # return max_num\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \nprint(maximum(4,5))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(f'The maximum number is {a}')\n    elif a<b:\n        print(f'The maximum number is {b}')\n    elif a==b:\n        print(f'Both numbers are equal {a}')\n    \nmaximum(1,2)\nmaximum(1,1)\nmaximum(2,1)\nmaximum(1,1)\nmaximum(2,2)\nmaximum(3,2)\nmaximum(4,4)\nmaximum(5,5)\nmaximum(5,4)\nmaximum(6,5)\nmaximum(7,7)\nmaximum(8,8)\nmaximum(9,8)\nmaximum(10,8)\nmaximum(8,9)\nmaximum(11,9)\nmaximum(12,11)\nmaximum(0,0)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max=a if a>b else b\n    print(max)\nmaximum(6,8)\nmaximum(8,6)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return a\nmaximum(10,20)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\nmaximum(100,10)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\nmaximum(3,5)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return \"The numbers are equal.\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        print(\"Maximum is\",b)\n    else:\n        print(\"Maximum is\",a)\nmaximum(2,3)\nmaximum(10,10)\nmaximum(7,0)\nmaximum(3,2)"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip(\"(\").strip(\")\").strip(\", \")\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = tuple(str1)\n    return tuple1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(bin(n)[2:])\n    return bin(n)[2:]\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 0b00000001 ^ n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    leftmost_unset_bit_position = 0\n    while leftmost_unset_bit_position > 0:\n        n = n & (n - 1)\n        leftmost_unset_bit_position -= 1\n    n = n | (1 << leftmost_unset_bit_position)\n    return n\n    '''\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= ~(n - 1)\n    return n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    Write a pytho"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        return 1\n    return (n << 1)\n    \n    \ndef is_bit_set(n,i): \n    '''\n    Write a python function to check if bit i of n is set.\n    '''\n    if n == 0:\n        return 0\n    if i == 0:\n        return 0\n    return (n & (1 << i)) \n    \n    \ndef is_bit_unset(n,i): \n    '''\n    Write a python function to check if bit i of n is unset.\n    '''\n    if n == 0:\n        return 1\n    if i == 0:\n        return 1\n    return (n & ~(1 << i)) \n    \n    \ndef is_power_of_2(n): \n    '''\n    Write a python function to check if n is power of 2.\n    '''\n    if n == 0:\n        return 0\n    return ((n & (n - 1)) == 0) \n    \n    \ndef is_power_of_2_using_bit_mask(n): \n    '''\n    Write a python function to check if n is power of 2 using bit mask.\n    '''\n    if n == 0:\n        return 1\n    return n!= 0 and (n & (n - 1)) == 0\n    \n    \ndef get_bit(n,i):\n    '''\n    Write a python function to get bit i of n.\n    '''\n    if i == 0:\n        return n\n    if n == 0:\n        return 0\n    return ((n >> i) & 1)\n    \n    \ndef get_next_power_of_2(n):\n    '''\n    Write a python function to get next power of 2.\n    '''\n    if n == 0:\n        return 1\n    if n & 1:\n        return (n | 1) + 1\n    return (n >> 1) + 1\n    \n    \ndef next_power_of_2(n): \n    '''\n    Write a python function to get next power of 2.\n    '''\n    if n == 0:\n        return 1\n    return (n | 1) + 1\n    \n    \ndef find_bit(n,i):\n    '''\n    Write a python function to find the bit i of n.\n    '''\n    if i == 0:\n        return n\n    if n == 0:\n        return 0\n    return 1 if ((n & (1 << i)) > 0) else 0\n    \n    \ndef is_power_of_2_using_bit_shift(n): \n    '''\n    Write a python function to check if n is power of 2 using bit shift.\n    '''\n    if n == 0:\n        return 1\n    if n & (n - 1) == 0:\n        return 1\n    return 0\n    \n    \ndef find_first_bit_set(n):\n    '''\n    Write a python function to find the first bit set in a number.\n    '''\n    if n == 0:\n        return -1\n    return n & -n\n    \n    \ndef find_first_bit_unset(n):\n    '''\n    Write a python function to find the first bit unset in a number.\n    '''\n    if n == 0:\n        return -1\n    return n - 1\n    \n    \ndef find_first_bit_set_using_shift_left(n): \n    '''\n    Write a python function to find the first bit set using shift left.\n    '''\n    if n == 0:\n        return -1\n    return n >> 1\n    \n    \ndef find_first_bit_unset_using_shift_left(n): \n    '''\n    Write a python function to find the first bit unset using shift left.\n    '''\n    if n == 0:\n        return -1\n    return (n >> 1) - 1\n    \n    \ndef find_first_bit_set_using_shift_right(n): \n    '''\n    Write a python function to find the first bit set using shift right.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) >> 1\n    \n    \ndef find_first_bit_unset_using_shift_right(n): \n    '''\n    Write a python function to find the first bit unset using shift right.\n    '''\n    if n == 0:\n        return -1\n    return ((n - 1) >> 1) - 1\n    \n    \ndef find_first_bit_set_using_and_operator(n): \n    '''\n    Write a python function to find the first bit set using and operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) & (n - 1)\n    \n    \ndef find_first_bit_unset_using_and_operator(n): \n    '''\n    Write a python function to find the first bit unset using and operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) & ~(n - 1)\n    \n    \ndef find_first_bit_set_using_or_operator(n): \n    '''\n    Write a python function to find the first bit set using or operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) | (n - 1)\n    \n    \ndef find_first_bit_unset_using_or_operator(n): \n    '''\n    Write a python function to find the first bit unset using or operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) | ~(n - 1)\n    \n    \ndef find_first_bit_set_using_xor_operator(n): \n    '''\n    Write a python function to find the first bit set using xor operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) ^ (n - 1)\n    \n    \ndef find_first_bit_unset_using_xor_operator(n): \n    '''\n    Write a python function to find the first bit unset using xor operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) ^ (n - 1)\n    \n    \ndef find_first_bit_set_using_bitwise_and_operator(n): \n    '''\n    Write a python function to find the first bit set using bitwise and operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) & (n - 1)\n    \n    \ndef find_first_bit_unset_using_bitwise_and_operator(n): \n    '''\n    Write a python function to find the first bit unset using bitwise and operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) & ~(n - 1)\n    \n    \ndef find_first_bit_set_using_bitwise_or_operator(n): \n    '''\n    Write a python function to find the first bit set using bitwise or operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) | (n - 1)\n    \n    \ndef find_first_bit_unset_using_bitwise_or_operator(n): \n    '''\n    Write a python function to find the first bit unset using bitwise or operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) | ~(n - 1)\n    \n    \ndef find_first_bit_set_using_bitwise_xor_operator(n): \n    '''\n    Write a python function to find the first bit set using bitwise xor operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) ^ (n - 1)\n    \n    \ndef find_first_bit_unset_using_bitwise_xor_operator(n): \n    '''\n    Write a python function to find the first bit unset using bitwise xor operator.\n    '''\n    if n == 0:\n        return -1\n    return (n - 1) ^ ~(n - 1)\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_to_set = 0\n    # Write your logic here\n    if (n == 0):\n        print('Bit to set = 0')\n    else:\n        while (n > 0):\n            bit_to_set = n & 1\n            n = n >> 1\n        print('Bit to set =', bit_to_set)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(n-1)\nif __name__ == '__main__':\n    n = int(input())\n    print(set_left_most_unset_bit(n))"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= 1 << 0\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while (n & 0x1) == 0:\n        n = n >> 1\n    n = n | 0x1\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = math.pi * r**2 * h\n    #Return the volume\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = 4/3 * math.pi * r**3\n    #Return the volume\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = 2*math.pi*r*h\n    #Return the volume\n    return volume\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cylinder(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and cylinder.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_cylinder(r,h)\n    #Return the volume\n    return volume\ndef volume_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_cylinder(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder, cone, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cylinder(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder, cone, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cylinder(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_cylinder(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cylinder(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cone_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, cone, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_cylinder(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cone_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, cone, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_cylinder(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cone_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, cone, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_cylinder(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cone_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, cone, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_cylinder(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cone_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, cone, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_cylinder(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cone_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, cone, and sphere.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cone(r,h) + volume_cylinder(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cylinder_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder, cone, and cone.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cylinder(r,h) + volume_cone(r,h) + volume_cone(r,h)\n    #Return the volume\n    return volume\ndef volume_cylinder_cone_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder, cone, and cone.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cylinder(r,h) + volume_cone(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cylinder_cone_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder, cone, and cone.\n    '''\n    #Declare the variables\n    volume = 0\n    #Calculate the volume\n    volume = volume_cylinder(r,h) + volume_cone(r,h) + volume_cone(r,h) + volume_sphere(r)\n    #Return the volume\n    return volume\ndef volume_cylinder_cone_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder, cone, an"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol=math.pi*r**2*h\n    return vol\ndef length_of_cylinder(r1,r2,h):\n    '''\n    Write a function to find the length of a cylinder.\n    '''\n    length=2*math.pi*(r1+r2)*h\n    return length\ndef main():\n    '''\n    Write a program that calculates the area of a cone and length of a cylinder.\n    '''\n    print(\"Enter the radius of a cone\")\n    r1=float(input())\n    print(\"Enter the radius of a cylinder\")\n    r2=float(input())\n    print(\"Enter the height of a cone\")\n    h=float(input())\n    print(\"The area of a cone is\",volume_cone(r1,h))\n    print(\"The length of a cylinder is\",length_of_cylinder(r1,r2,h))\n    \nmain()"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    volume = (math.pi/3) * (r**2) * h\n    print(volume)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol= (4/3) * math.pi * r ** 3 * h\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r ** 2) * h\n    print(f'The volume is: {volume:.2f}')\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #r = the radius of the cone\n    #h = the height of the cone\n    vol = math.pi * r**2 * h\n    return vol\n    \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2)*(h**2)/3\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while (n & (1 << i)) == 0: \n        i += 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while (2 ** count) < n:\n        count += 1\n    return count"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # 2^x where x is maximum power of 2 less than or equal to n\n    power = 1\n    max_power = n\n    while (2**power) <= max_power:\n        max_power = 2**power\n        power = power + 1\n    return max_power\n    \nif __name__ == \"__main__\":\n    print(highest_Power_of_2(4))"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0: \n        return None\n    return bin(n).count('1')\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i = i << 1\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = n & (~0x01)\n    while(n):\n        n = n >> 1\n    return (n) \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    ans=0\n    while(n>=2):\n        if (n&1==0):\n            n=n>>1\n        else:\n            n=n>>1\n            ans=ans+1\n    return(ans)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    count = 0\n    while(True):\n        if (2**count) <= n:\n            c = 2**count\n            d = n-c\n            if (d%2 == 0):\n                b = d//2\n            else:\n                b = d//2+1\n            if (b<a):\n                a = b\n            count = count+1\n        else:\n            break\n    return a\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    maxPower = 0\n    i = 1\n    while (i <= n):\n        maxPower = i\n        i = i << 1\n    return maxPower\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 ** (n - 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    \n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be greater than 0')\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    if n == 0:\n        return 0\n    \n    for i in range(1, n):\n        lucas = find_lucas(i-1) + find_lucas(i-2)\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 2\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    #inp = input(\"enter the list : \")\n    #inp = inp.split(\",\")\n    #inp = list(map(int, inp))\n    #inp = list(map(float, inp))\n    #inp = list(map(str, inp))\n    #inp = list(map(lambda x: f'{x:.2f}', inp))\n    #inp = list(map(lambda x: f'{x:.2e}', inp))\n    #inp = list(map(lambda x: f'{x:.4f}', inp))\n    #inp = list(map(lambda x: f'{x:.4e}', inp))\n    #inp = list(map(lambda x: f'{x:.4g}', inp))\n    #inp = list(map(lambda x: f'{x:.5g}', inp))\n    #inp = list(map(lambda x: f'{x:.5e}', inp))\n    #inp = list(map(lambda x: f'{x:.6g}', inp))\n    #inp = list(map(lambda x: f'{x:.6e}', inp))\n    #inp = list(map(lambda x: f'{x:.7g}', inp))\n    #inp = list(map(lambda x: f'{x:.7e}', inp))\n    #inp = list(map(lambda x: f'{x:.8g}', inp))\n    #inp = list(map(lambda x: f'{x:.8e}', inp))\n    #inp = list(map(lambda x: f'{x:.9g}', inp))\n    #inp = list(map(lambda x: f'{x:.9e}', inp))\n    #inp = list(map(lambda x: f'{x:.10g}', inp))\n    #inp = list(map(lambda x: f'{x:.10e}', inp))\n    inp = list(map(lambda x: f'{x:.20e}', inp))\n    #inp = list(map(lambda x: f'{x:.30e}', inp))\n    #inp = list(map(lambda x: f'{x:.40e}', inp))\n    #inp = list(map(lambda x: f'{x:.50e}', inp))\n    #inp = list(map(lambda x: f'{x:.60e}', inp))\n    #inp = list(map(lambda x: f'{x:.70e}', inp))\n    #inp = list(map(lambda x: f'{x:.80e}', inp))\n    #inp = list(map(lambda x: f'{x:.90e}', inp))\n    #inp = list(map(lambda x: f'{x:.100e}', inp))\n    inp = list(map(lambda x: f'{x:.110e}', inp))\n    #inp = list(map(lambda x: f'{x:.120e}', inp))\n    #inp = list(map(lambda x: f'{x:.130e}', inp))\n    #inp = list(map(lambda x: f'{x:.140e}', inp))\n    #inp = list(map(lambda x: f'{x:.150e}', inp))\n    #inp = list(map(lambda x: f'{x:.160e}', inp))\n    #inp = list(map(lambda x: f'{x:.170e}', inp))\n    #inp = list(map(lambda x: f'{x:.180e}', inp))\n    #inp = list(map(lambda x: f'{x:.190e}', inp))\n    #inp = list(map(lambda x: f'{x:.200e}', inp))\n    #inp = list(map(lambda x: f'{x:.210e}', inp))\n    #inp = list(map(lambda x: f'{x:.220e}', inp))\n    #inp = list(map(lambda x: f'{x:.230e}', inp))\n    #inp = list(map(lambda x: f'{x:.240e}', inp))\n    #inp = list(map(lambda x: f'{x:.250e}', inp))\n    #inp = list(map(lambda x: f'{x:.260e}', inp))\n    #inp = list(map(lambda x: f'{x:.270e}', inp))\n    #inp = list(map(lambda x: f'{x:.280e}', inp))\n    #inp = list(map(lambda x: f'{x:.290e}', inp))\n    #inp = list(map(lambda x: f'{x:.300e}', inp))\n    #inp = list(map(lambda x: f'{x:.310e}', inp))\n    #inp = list(map(lambda x: f'{x:.320e}', inp))\n    #inp = list(map(lambda x: f'{x:.330e}', inp))\n    #inp = list(map(lambda x: f'{x:.340e}', inp))\n    #inp = list(map(lambda x: f'{x:.350e}', inp))\n    #inp = list(map(lambda x: f'{x:.360e}', inp))\n    #inp = list(map(lambda x: f'{x:.370e}', inp))\n    #inp = list(map(lambda x: f'{x:.380e}', inp))\n    #inp = list(map(lambda x: f'{x:.390e}', inp))\n    #inp = list(map(lambda x: f'{x:.400e}', inp))\n    #inp = list(map(lambda x: f'{x:.410e}', inp))\n    #inp = list(map(lambda x: f'{x:.420e}', inp))\n    #inp = list(map(lambda x: f'{x:.430e}', inp))\n    #inp = list(map(lambda x: f'{x:.440e}', inp))\n    #inp = list(map(lambda x: f'{x:.450e}', inp))\n    #inp = list(map(lambda x: f'{x:.460e}', inp))\n    #inp = list(map(lambda x: f'{x:.470e}', inp))\n    #inp = list(map(lambda x: f'{x:.480e}', inp))\n    #inp = list(map(lambda x: f'{x:.490e}', inp))\n    #inp = list(map(lambda x: f'{x:.500e}', inp))\n    #inp = list(map(lambda x: f'{x:.510e}', inp))\n    #inp = list(map(lambda x: f'{x:.520e}', inp))\n    #inp = list(map(lambda x: f'{x:.530e}', inp))\n    #inp = list(map(lambda x: f'{x:.550e}', inp))\n    #inp = list(map(lambda x: f'{x:.560e}', inp))\n    #inp = list(map(lambda x: f'{x:.570e}', inp))\n    #inp = list(map(lambda x: f'{x:.580e}', inp))\n    #inp = list(map(lambda x: f'{x:.590e}', inp))\n    #inp = list(map(lambda x: f'"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.append(string.format(list_.pop()))\n    \ndef remove_duplicates(list_):\n    '''\n    Write a function that returns a list of unique elements in the given list.\n    '''\n    return list_.remove(list_.pop(0))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return string.join(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i] + string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        print(string.format(item), end = \"\")\n    print()\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = list_\n    new_list.extend([string]*len(list_))\n    return new_list\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for i in range(0, len(l1)):\n        res[l1[i]] = l2[i]\n        for j in range(0, len(l3)):\n            res[l1[i]] = l3[j]\n    print(res)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l1, l3))\n    final_dictionary = {}\n    final_dictionary.update(d1)\n    final_dictionary.update(d2)\n    print(final_dictionary)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {l1[i]:l2[i] for i in range(len(l1))}\n    result.update({l3[i]:l1[i] for i in range(len(l2))})\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n    return dict1\n    # pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) > 0:\n        dictionary = {}\n        for i in range(len(l1)):\n            dictionary[l1[i]] = l2[i]\n        convert_list_dictionary(l1[i + 1], l2[i + 1], dictionary[l1[i]])\n    else:\n        return l3\n    \nprint(convert_list_dictionary(['p', 'q', 'r'], ['n', 'o', 'p'], {'a': 'n', 'b': 'o', 'c': 'p'}))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {x: y for x, y in zip(l1, l2)}\n    for i in range(len(l3)):\n        new_dict[l3[i]] = l4[i]\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1 is None:\n        return None\n    if not isinstance(l1, list) and not isinstance(l2, list) and not isinstance(l3, list):\n        return None\n    if len(l1) == 0 or len(l2) == 0 or len(l3) == 0:\n        return None\n    if isinstance(l1, list):\n        d = {}\n        for i, l in enumerate(l1):\n            d[i] = convert_list_dictionary(l, l2, l3)\n        return d\n    if isinstance(l2, list):\n        d = {}\n        for i, l in enumerate(l2):\n            d[i] = convert_list_dictionary(l1, l, l3)\n        return d\n    if isinstance(l3, list):\n        d = {}\n        for i, l in enumerate(l3):\n            d[i] = convert_list_dictionary(l1, l2, l)\n        return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = dict.fromkeys(l1, {})\n    dict2 = dict.fromkeys(l2, {})\n    dict3 = dict.fromkeys(l3, {})\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        d[i] = {}\n        d[i]['y'] = l2[l1.index(i)]\n        d[i]['z'] = l3[l1.index(i)]\n    return d\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    print(\"Get maximum sum for a given equation.\")\n    max_sum = 0\n    for i in range(1, n + 1):\n        max_sum = max( max_sum, (n / 2) + (n / 3) + (n / 4) + (n / 5))\n        #print(max_sum)\n        if max_sum < 0:\n            max_sum = 0\n    print(\"Maximum sum possible for a given equation is \", max_sum)\n    print()\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_helper(n):\n        if n % 2 == 0 and n > 0:\n            return (get_max_sum_helper(n/2) + get_max_sum_helper(n/3) + get_max_sum_helper(n/4) + get_max_sum_helper(n/5))\n        elif n % 2!= 0 and n > 0:\n            return (get_max_sum_helper(n/2) + get_max_sum_helper(n/3) + get_max_sum_helper(n/4))\n        elif n == 0:\n            return 0\n    return get_max_sum_helper(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    max_sum = n\n    while (n%5 == 0):\n        max_sum = max(max_sum, get_max_sum(n//5))\n        n = n//5\n    while (n%3 == 0):\n        max_sum = max(max_sum, get_max_sum(n//3))\n        n = n//3\n    while (n%2 == 0):\n        max_sum = max(max_sum, get_max_sum(n//2))\n        n = n//2\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Initialize the sum as 0\n    sum = 0\n    # Define the initial values\n    max_sum = 0\n    f_2 = 0\n    f_3 = 0\n    f_4 = 0\n    f_5 = 0\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    max_sum = 0\n    \n    for i in range(1, n + 1):\n        max_sum = max(max_sum, i + max(2 * i, 3 * i, 4 * i, 5 * i))\n        \n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    def f(n):\n        if n == 1:\n            return 1\n        a = f(n // 2)\n        b = f(n // 3)\n        c = f(n // 4)\n        d = f(n // 5)\n        max_num = max(a, b, c, d, n)\n        return max_num\n    \n    def solution(n):\n        if is_prime(n):\n            return n\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        if n == 4:\n            return 7\n        if n == 5:\n            return 9\n        return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, (i/2 + i/3 + i/4 + i/5) + i)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    print(max_len)\n    for i in input_list:\n        print(i)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    maximum_list = []\n    \n    for i in input_list:\n        if len(i) > maximum:\n            maximum = len(i)\n            maximum_list = i\n    \n    return maximum_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = len(input_list[0])\n    max_list = []\n    for i in input_list:\n        if len(i) >= max:\n            max = len(i)\n            max_list.append(i)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_value = 0\n    max_item = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_value:\n            max_value = len(input_list[i])\n            max_item = input_list[i]\n    return max_item\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for i in input_list:\n        length_list.append(len(i))\n    return max(length_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    max_list = None\n    for i in input_list:\n        if len(i) > max_length:\n            max_list = i\n            max_length = len(i)\n    return max_list\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        print(f\"The given tuple {test_tup} contains no duplicates.\")\n    else:\n        print(f\"The given tuple {test_tup} contains duplicates.\")\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for x in range(len(test_tup)):\n        for y in range(x+1,len(test_tup)):\n            if test_tup[x] == test_tup[y]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    print(\"Checking distinct...\")\n    \n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                print(\"Duplicate found!\")\n                return False\n    \n    print(\"Distinct\")\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #set function\n    #this function returns a set\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # The dictionary comprehension is not necessary since it also works for nested dictionary\n    # return tuple(tup) not in (tuple(dict1))\n    return tuple(tup) not in (tuple(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = test_tup\n    return len(tup) == len(set(tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char, count in char_dict.items():\n        if count == 1:\n            return char\n    return \"No such character found\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    chars = []\n    for i in range(0,len(str1)):\n        if str1[i] not in chars:\n            chars.append(str1[i])\n        else:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == \"\":\n        return None\n    seen = {}\n    for i in str1:\n        if i not in seen:\n            seen[i] = 0\n        seen[i] += 1\n    for i in str1:\n        if seen[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for i in range(len(str1)):\n        if str1[i] in char_dict:\n            char_dict[str1[i]] += 1\n        else:\n            char_dict[str1[i]] = 1\n    for i in range(len(str1)):\n        if char_dict[str1[i]] == 1:\n            return str1[i]\n    return \"No character found\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char = str1[0]\n    for i in range(len(str1)):\n        if str1.count(char) == 1:\n            return char\n        else:\n            char = str1[i+1]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    my_set = set()\n    for x in str1:\n        if x in my_set:\n            return -1\n        else:\n            my_set.add(x)\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counts = {}\n    for char in str1:\n        if char not in counts.keys():\n            counts[char] = 1\n        else:\n            counts[char] += 1\n    for char in str1:\n        if counts[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for ch in str1:\n        if ch not in d:\n            d[ch] = 1\n        else:\n            d[ch] += 1\n    for key in d:\n        if d[key] == 1:\n            return key\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0]\ndef print_all_characters(string):\n    '''\n    Write a python function to print all the characters of a given string in their occurences order.\n    '''\n    return string\ndef first_occurence_of_an_item(string,item):\n    '''\n    Write a python function to find the first occurence of an item in a given string. Return -1 if the item is not found.\n    '''\n    return -1\ndef number_of_odd_elements(list_of_numbers):\n    '''\n    Write a python function to count the number of odd elements in a given list.\n    '''\n    return -1\ndef max_odd_num(list_of_numbers):\n    '''\n    Write a python function to find the maximum odd number from a given list.\n    '''\n    return -1\ndef sum_of_odd_numbers(list_of_numbers):\n    '''\n    Write a python function to find the sum of all odd numbers from a given list.\n    '''\n    return -1\ndef sum_of_even_numbers(list_of_numbers):\n    '''\n    Write a python function to find the sum of all even numbers from a given list.\n    '''\n    return -1\ndef find_sum_of_numbers(list_of_numbers):\n    '''\n    Write a python function to find the sum of all numbers from a given list.\n    '''\n    return -1\ndef find_sum_of_odd_and_even_numbers(list_of_numbers):\n    '''\n    Write a python function to find the sum of all odd and even numbers from a given list.\n    '''\n    return -1\ndef number_of_prime_numbers(n):\n    '''\n    Write a python function to count the number of prime numbers in a given range.\n    '''\n    return -1\ndef is_number_prime(number):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    return -1\ndef next_prime(number):\n    '''\n    Write a python function to find the next prime number after the given number.\n    '''\n    return -1\ndef is_prime(number):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    return -1\ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    return -1\ndef find_odd_even_numbers(list_of_numbers):\n    '''\n    Write a python function to find the odd and even numbers from a given list.\n    '''\n    return -1\ndef remove_duplicates(list_of_numbers):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return -1\ndef print_odd_even(list_of_numbers):\n    '''\n    Write a python function to print even and odd numbers from a given list.\n    '''\n    return -1\ndef print_all_sum_of_numbers(list_of_numbers):\n    '''\n    Write a python function to print all numbers from a given list and their sum.\n    '''\n    return -1\ndef count_elements_occurence_greater_than(list_of_numbers,x):\n    '''\n    Write a python function to find the number of elements greater than a given number from a given list.\n    '''\n    return -1\ndef is_even(number):\n    '''\n    Write a python function to check if a given number is even or not.\n    '''\n    return -1\ndef find_greater_than_numbers(list_of_numbers,number):\n    '''\n    Write a python function to find the numbers which are greater than a given number from a given list.\n    '''\n    return -1\ndef find_sum_of_greater_than_numbers(list_of_numbers,number):\n    '''\n    Write a python function to find the sum of numbers which are greater than a given number from a given list.\n    '''\n    return -1\ndef count_even_numbers(list_of_numbers):\n    '''\n    Write a python function to count the number of even numbers from a given list.\n    '''\n    return -1\ndef next_even_number(number):\n    '''\n    Write a python function to find the next even number after the given number.\n    '''\n    return -1\ndef get_next_odd_number(number):\n    '''\n    Write a python function to find the next odd number after the given number.\n    '''\n    return -1\ndef count_odd_numbers(list_of_numbers):\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    return -1\ndef count_odd_numbers_list(list_of_numbers):\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    return -1\ndef count_odd_numbers_removing_duplicates(list_of_numbers):\n    '''\n    Write a python function to count the number of odd numbers from a given list.\n    '''\n    return -1\ndef list_of_even_numbers(list_of_numbers):\n    '''\n    Write a python function to find the list of even numbers from a given list.\n    '''\n    return -1\ndef max_of_three_numbers(list_of_numbers):\n    '''\n    Write a python function to find the maximum number from three given numbers.\n    '''\n    return -1\ndef max_of_three_numbers_list(list_of_numbers):\n    '''\n    Write a python function to find the maximum number from three given numbers.\n    '''\n    return -1\ndef find_max_number_from_three_numbers(list_of_numbers):\n    '''\n    Write a python function to find the maximum number from three given numbers.\n    '''\n    return -1\ndef find_index_of_maximum_number(list_of_numbers):\n    '''\n    Write a python function to find the index of the maximum number from three given numbers.\n    '''\n    return -1\ndef find_index_of_maximum_number_list(list_of_numbers):\n    '''\n    Write a python function to find the index of the maximum number from three given numbers.\n    '''\n    return -1\ndef sum_of_three_numbers(list_of_numbers):\n    '''\n    Write a python function to find the sum of three given numbers.\n    '''\n    return -1\ndef sum_of_three_numbers_list(list_of_numbers):\n    '''\n    Write a python function to find the sum of three given numbers.\n    '''\n    return -1\ndef find_sum_of_three_numbers(list_of_numbers):\n    '''\n    Write a python function to find the sum of three given numbers.\n    '''\n    return -1\ndef find_sum_of_three_numbers_list(list_of_numbers):\n    '''\n    Write a python function to find the sum of three given numbers.\n    '''\n    return -1\ndef find_sum_of_elements_greater_than(list_of_numbers,number):\n    '''\n    Write a python function to find the sum of all numbers in the list which are greater than a given number.\n    '''\n    return -1\ndef sum_of_elements_greater_than(list_of_numbers,number):\n    '''\n    Write a python function to sum all the numbers in the list which are greater than a given number.\n    '''\n    return -1\ndef sum_of_elements_greater_than_numbers(list_of_numbers,number):\n    '''\n    Write a python function to sum all the numbers in the list which are greater than a given number.\n    '''\n    return -1\ndef sum_of_elements_greater_than_numbers_list(list_of_numbers,number):\n    '''"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 1:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return check_char(string[1:]) and check_char(string[:-1])\nprint(check_char(\"app\"))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        print('Satisfied')\n    else:\n        print('Not Satisfied')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    x = re.search(regex,string)\n    return bool(x)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.match(regex,string)):\n        return True\n    else:\n        return False\nprint(check_char(\"abcd\"))\nprint(check_char(\"abc.d\"))\nprint(check_char(\"ab.cd\"))\nprint(check_char(\"ab.cd.\"))\nprint(check_char(\"a.bc.\"))\nprint(check_char(\"a.b.c.d\"))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.match(regex,string)):\n        print(\"The string starts and ends with same character\")\n    else:\n        print(\"The string does not start and ends with same character\")\n    \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip()\n    if len(string) > 0:\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    str = string\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        print(\"true\")\n    else:\n        print(\"false\")\n        \ncheck_char(\"aa\")\ncheck_char(\"a\")\ncheck_char(\"aaaaaaaa\")\ncheck_char(\"abc\")\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[-1]) and string!= '':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted([a,b,c])[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    if sorted_list[1] == a and sorted_list[2] == c:\n        return a\n    if sorted_list[0] == a and sorted_list[2] == c:\n        return c\n    if sorted_list[1] == b and sorted_list[0] == a:\n        return a\n    if sorted_list[0] == b and sorted_list[1] == c:\n        return c\n    if sorted_list[1] == b and sorted_list[0] == a:\n        return a\n    if sorted_list[0] == b and sorted_list[2] == c:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    number_list = sorted([a,b,c])\n    if len(number_list) == 1:\n        return number_list[0]\n    elif len(number_list) == 2:\n        return (number_list[0] + number_list[1])/2\n    else:\n        middle = len(number_list)//2\n        return (number_list[middle-1] + number_list[middle])/2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sum1 = a + b + c\n    sum2 = (a + b) + (b + c) + (a + c)\n    sum3 = (a + b) + (b + c) + (a + c)\n    if sum1 % 2 == 1:\n        return a\n    if sum2 % 2 == 1:\n        return (b + c)/2\n    if sum3 % 2 == 1:\n        return (a + b + c)/2\n    else:\n        return ((a + b + c) - (sum1 - sum2))/2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a,b,c])\n    if len(numbers) > 0:\n        length = len(numbers)\n        if length == 1:\n            return numbers[0]\n        elif length == 2:\n            return numbers[1]\n        else:\n            index = length // 2\n            if length % 2 == 1:\n                return numbers[index]\n            else:\n                return (numbers[index - 1] + numbers[index]) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>=b:\n        if a>=c:\n            return a\n        return c\n    else:\n        if b>=c:\n            return b\n        return c\nprint(median_numbers(1,2,3))\nprint(median_numbers(3,2,1))\nprint(median_numbers(2,1,3))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    print(\"The median of {}, {} and {} is {}\".format(a,b,c,median_numbers(a,b,c)))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = (a + b + c) / 2\n    return median\nprint(median_numbers(1, 2, 3))\nprint(median_numbers(4, 5, 6))\nprint(median_numbers(3, 5, 7))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a >= b) and (a >= c):\n        return a\n    elif (b >= a) and (b >= c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    assert type(a)==int, \"a is not integer\"\n    assert type(b)==int, \"b is not integer\"\n    assert type(c)==int, \"c is not integer\"\n    assert a>=0 and b>=0 and c>=0, \"a,b,c are not positive\"\n    assert a<=100 and b<=100 and c<=100, \"a,b,c are not less than 100\"\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    assert a+b+c==len(a) and b+a==len(b) and c+a==len(c), \"the list of 3 numbers are not equal\"\n    if len(a)%2==0:\n        if a[(len(a)//2)-1]>a[(len(a)//2)]:\n            return a[(len(a)//2)-1]\n        elif a[(len(a)//2)-1]<a[(len(a)//2)]:\n            return a[(len(a)//2)]\n    else:\n        return a[(len(a)//2)]"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, map(str, nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    new_list = []\n    for num in nums:\n        if len(str(num)) == 1:\n            new_list.append(num)\n        else:\n            new_list.append(int(str(num)[0]) + int(str(num)[1]))\n    return sum(new_list)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(int(sum(int(i) for i in str(num))))\n    return sum_of_digits_list\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # input = list of numbers\n    # output = a list of the sum of the digits of each number\n    output = []\n    for num in nums:\n        output.append(sum_digits(num))\n    return output\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += int(num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(0)\n        while num:\n            sum_of_digits[-1] += num % 10\n            num //= 10\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(num) for num in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum_of_digits_util(num)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum = sum + math.floor(i/10) + math.floor(i%10)\n    return sum\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_val = 0\n    for i,j in zip(test_tup1, test_tup2):\n        xor_val = xor_val ^ (i | j)\n    return xor_val\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get the results\n    first_result = test_tup1[0] ^ test_tup1[1]\n    second_result = test_tup1[0] ^ test_tup2[0]\n    third_result = test_tup1[1] ^ test_tup2[1]\n    # Return the results\n    return (first_result, second_result, third_result)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"The tuples are of different lengths\")\n    \n    if type(test_tup1) is not tuple or type(test_tup2) is not tuple:\n        raise Exception(\"The tuples are not of type tuple\")\n    \n    bit_xor_output = []\n    \n    for i in range(len(test_tup1)):\n        bit_xor_output.append(test_tup1[i] ^ test_tup2[i])\n        \n    return tuple(bit_xor_output)\n    \nif __name__ == \"__main__\":\n    print(bitwise_xor((1, 2, 3), (4, 5, 6)))\n    print(bitwise_xor((1, 2, 4), (5, 6, 7)))\n    \n    print(bitwise_xor((1, 2, 3, 2), (1, 1, 1, 0)))\n    print(bitwise_xor((1, 2, 3, 2), (1, 1, 1, 1)))\n    print(bitwise_xor((0, 0, 0, 0), (0, 0, 0, 0)))\n    print(bitwise_xor((0, 0, 0, 1), (0, 0, 0, 1)))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(tup1 ^ tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if type(test_tup1)!= tuple or type(test_tup2)!= tuple:\n        raise TypeError(\"Arguments are not tuples!\")\n    if len(test_tup1)!= len(test_tup2) or len(test_tup1) == 0:\n        raise ValueError(\"Arguments are not of same length!\")\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (bitwise_xor_helper(test_tup1[i], test_tup2[i]),)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #Expected Output: (0,1)\n    print(\"Expected:\", (0,1))\n    print(\"Actual:\", (bitwise_xor(test_tup1, test_tup2)))\n    #Write your function here\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1]\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = dict()\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_solution(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n    \n    \ndef extract_freq_2(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq.append(1)\n    return len(set(freq))\n    \n    \ndef extract_freq_3(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq.append(1)\n    return len(set(freq))\n    \n    \ndef extract_freq_4(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq.append(1)\n    return len(set(freq))\n    \n    \ndef extract_freq_5(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_6(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_7(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_8(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_9(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_10(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_11(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_12(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_13(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_14(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_15(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_16(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_17(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_18(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_19(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_20(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e] += 1\n        else:\n            freq[e] = 1\n    return len(freq)\n    \n    \ndef extract_freq_21(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for e in test_list:\n        if e in freq:\n            freq[e"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    lst = []\n    freq = {}\n    for x in test_list:\n        if x not in lst:\n            lst.append(x)\n    for i in lst:\n        for j in test_list:\n            if i == j:\n                if i in freq:\n                    freq[i] += 1\n                else:\n                    freq[i] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    freq = {}\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return(len(set(tuple(test_list))))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(d)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # your code here\n    tuple_list = []\n    for i in test_list:\n        tuple_list.append(tuple(i))\n    return len(set(tuple_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    s = set(test_list)\n    t = sorted(s)\n    return len(t)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #declare a empty dictionary\n    freq = {}\n    #iterate through the list and add the tuples to the dictionary\n    for tuples in test_list:\n        #extract the key from the tuple\n        key = tuples[0]\n        #add the key to the dictionary\n        freq[key] = freq.get(key, 0) + 1\n    return freq\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append((test_tup1[i], test_tup2[i]))\n    return res\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    result = map(lambda x,y: x+y, test_tup1, test_tup2)\n    print(tuple(result))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # print(test_tup1)\n    # print(test_tup2)\n    # return sum_test_tup\n    sum_test_tup = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            # print(i,j)\n            sum_test_tup.append(test_tup1[i][j] + test_tup2[i][j])\n    # print(\"sum_test_tup\", sum_test_tup)\n    return sum_test_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(0,len(test_tup1)):\n        test_tup1[i]=(test_tup1[i][0]+test_tup2[i][0],test_tup1[i][1]+test_tup2[i][1])\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        return\n    if len(test_tup1)!= len(test_tup2):\n        return\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], tuple) or not isinstance(test_tup2[i], tuple):\n            return\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            return\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i] += (test_tup2[i][j],)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n    # YOUR CODE HERE\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1], test_tup1[2] + test_tup2[2]\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = (1,2)\n    # your code here\n    new_tup = []\n    for i,j in zip(test_tup1, test_tup2):\n        new_tup.append(i + j)\n    return tuple(new_tup)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    ret = []\n    for i in range(len(test_tup1)):\n        # print(test_tup1[i],test_tup2[i])\n        ret.append(test_tup1[i] + test_tup2[i])\n    return tuple(ret)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        print(\"{} is the minimum number\".format(a))\n    else:\n        print(\"{} is the minimum number\".format(b))\nminimum(1,4)\nminimum(6,3)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        print(a,\"is minimum\")\n    elif (a<b):\n        print(b,\"is minimum\")\n    else:\n        print(\"Both are same\")\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(a,b)\n    else:\n        print(b,a)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    # if first value is less than second value\n    # then first value is the minimum value\n    if a<b:\n        return a\n    else:\n        return b\n    "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum_of_list(l):\n    '''\n    Write a python function to find the minimum of all the numbers in a list.\n    '''\n    min=l[0]\n    for i in range(1,len(l)):\n        if l[i]<min:\n            min=l[i]\n    return min\n    \ndef maximum_of_list(l):\n    '''\n    Write a python function to find the maximum of all the numbers in a list.\n    '''\n    max=l[0]\n    for i in range(1,len(l)):\n        if l[i]>max:\n            max=l[i]\n    return max\n    \ndef find_frequency(l):\n    '''\n    Write a python function to find the frequency of all the values in a list.\n    '''\n    freq={}\n    for i in range(len(l)):\n        if l[i] in freq:\n            freq[l[i]]+=1\n        else:\n            freq[l[i]]=1\n    return freq\n    \ndef find_frequency_of_n_in_list(l,n):\n    '''\n    Write a python function to find the frequency of an element n in a list.\n    '''\n    for i in range(len(l)):\n        if l[i]==n:\n            return i\n    return -1\n    \ndef find_min_max_of_list(l):\n    '''\n    Write a python function to find the minimum and maximum of all the numbers in a list.\n    '''\n    min=l[0]\n    max=l[0]\n    for i in range(1,len(l)):\n        if l[i]<min:\n            min=l[i]\n        elif l[i]>max:\n            max=l[i]\n    return min,max\n    \ndef find_min_max_of_n_in_list(l,n):\n    '''\n    Write a python function to find the minimum and maximum of an element n in a list.\n    '''\n    for i in range(len(l)):\n        if l[i]==n:\n            return i\n    return -1\n    \ndef find_index_of_element_in_list(l,n):\n    '''\n    Write a python function to find the index of an element n in a list.\n    '''\n    for i in range(len(l)):\n        if l[i]==n:\n            return i\n    return -1\n    \ndef find_min_max_of_sublist(l,k):\n    '''\n    Write a python function to find the minimum and maximum of a sublist.\n    '''\n    l1=l[0:k]\n    min=l1[0]\n    max=l1[0]\n    for i in range(1,len(l1)):\n        if l1[i]<min:\n            min=l1[i]\n        elif l1[i]>max:\n            max=l1[i]\n    return min,max\n    \ndef find_index_of_element_in_sublist(l,n,k):\n    '''\n    Write a python function to find the index of an element n in a sublist.\n    '''\n    l1=l[0:k]\n    for i in range(len(l1)):\n        if l1[i]==n:\n            return i\n    return -1\n    \ndef swap_elements_in_list(l,p,q):\n    '''\n    Write a python function to swap two elements in a list.\n    '''\n    l[p]=l[q]\n    l[q]=l[p]\n    return l\n    \ndef rotate_list(l,n):\n    '''\n    Write a python function to rotate a list by n positions.\n    '''\n    for i in range(n):\n        l.insert(0,l.pop())\n    return l\n    \ndef reverse_list(l):\n    '''\n    Write a python function to reverse a list.\n    '''\n    new_list=[]\n    while(len(l)):\n        new_list.append(l.pop())\n    return new_list\n    \ndef print_list(l):\n    '''\n    Write a python function to print the list.\n    '''\n    for i in range(len(l)):\n        print(l[i],end=\" \")\n        \ndef find_duplicate(l):\n    '''\n    Write a python function to find duplicate values in a list.\n    '''\n    d={}\n    for i in range(len(l)):\n        if l[i] in d:\n            return l[i]\n        else:\n            d[l[i]]=1\n    return -1\n    \ndef find_count_of_list(l):\n    '''\n    Write a python function to find the count of a list element.\n    '''\n    d={}\n    for i in range(len(l)):\n        if l[i] in d:\n            d[l[i]]+=1\n        else:\n            d[l[i]]=1\n    return d\n    \ndef remove_duplicates_in_list(l):\n    '''\n    Write a python function to remove duplicate values in a list.\n    '''\n    d={}\n    new_list=[]\n    for i in range(len(l)):\n        if l[i] in d:\n            continue\n        else:\n            d[l[i]]=1\n            new_list.append(l[i])\n    return new_list\n    \ndef find_all_occurrence_of_element(l,n):\n    '''\n    Write a python function to find all occurences of an element in a list.\n    '''\n    l1=[]\n    for i in range(len(l)):\n        if l[i]==n:\n            l1.append(i)\n    return l1\n    \ndef find_all_occurences_of_element_in_list(l,n):\n    '''\n    Write a python function to find all occurences of an element in a list.\n    '''\n    l1=[]\n    for i in range(len(l)):\n        if l[i]==n:\n            l1.append(i)\n    return l1\n    \ndef find_occurence_of_element_in_list(l,n):\n    '''\n    Write a python function to find the occurence of an element in a list.\n    '''\n    for i in range(len(l)):\n        if l[i]==n:\n            return i\n    return -1\n    \ndef find_occurence_of_element_in_list_using_binary_search(l,n):\n    '''\n    Write a python function to find the occurence of an element in a list.\n    '''\n    l.sort()\n    start=0\n    end=len(l)-1\n    while(start<=end):\n        mid=(start+end)//2\n        if l[mid]==n:\n            return mid\n        elif l[mid]>n:\n            end=mid-1\n        else:\n            start=mid+1\n    return -1\n    \ndef find_occurence_of_element_in_list_using_recursion(l,n):\n    '''\n    Write a python function to find the occurence of an element in a list.\n    '''\n    if len(l)==0:\n        return -1\n    else:\n        mid=len(l)//2\n        if l[mid]==n:\n            return mid\n        elif l[mid]>n:\n            return find_occurence_of_element_in_list_using_recursion(l[:mid],n)\n        else:\n            return find_occurence_of_element_in_list_using_recursion(l[mid+1:],n)\n    "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        print(\"a = \", a)\n        print(\"b = \", b)\n    else:\n        print(\"a = \", a)\n        print(\"b = \", b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        print(\"Minimum of a and b is:\",a)\n    else:\n        print(\"Minimum of a and b is:\",b)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n        \ndef check_tuple(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuple1 == tuple2:\n        return True\n    else:\n        return False\n        \n        \ndef check_tuple_2(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuple1 == tuple2:\n        return True\n    else:\n        return False\n    \ndef check_tuple_3(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuple1 == tuple2:\n        return True\n    else:\n        return False\n        \n        \ndef find_tuple(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuple1 == tuple2:\n        return True\n    else:\n        return False\n        \ndef find_tuple_2(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuple1 == tuple2:\n        return True\n    else:\n        return False\n    \ndef find_tuple_3(tuple1,tuple2):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    if tuple1 == tuple2:\n        return True\n    else:\n        return False\n    \n    \n    \ndef main():\n    tuplex = (1,2,3,4,5)\n    tuple1 = (1,2,3,4,5)\n    tuple2 = (1,2,3,4,5)\n    tuple3 = (1,2,3,4,5)\n    tuple4 = (1,2,3,4,5)\n    tuple5 = (1,2,3,4,5)\n    \n    tuple6 = (1,2,3,4,5)\n    tuple7 = (1,2,3,4,5)\n    tuple8 = (1,2,3,4,5)\n    tuple9 = (1,2,3,4,5)\n    tuple10 = (1,2,3,4,5)\n    tuple11 = (1,2,3,4,5)\n    tuple12 = (1,2,3,4,5)\n    tuple13 = (1,2,3,4,5)\n    \n    \n    print(check_tuplex(tuplex,tuple1))\n    print(check_tuplex(tuplex,tuple2))\n    print(check_tuplex(tuplex,tuple3))\n    print(check_tuplex(tuplex,tuple4))\n    print(check_tuplex(tuplex,tuple5))\n    \n    print(check_tuple(tuple1,tuple2))\n    print(check_tuple(tuple1,tuple3))\n    print(check_tuple(tuple1,tuple4))\n    print(check_tuple(tuple1,tuple5))\n    \n    print(check_tuple_2(tuple1,tuple2))\n    print(check_tuple_2(tuple1,tuple3))\n    print(check_tuple_2(tuple1,tuple4))\n    print(check_tuple_2(tuple1,tuple5))\n    \n    print(check_tuple_3(tuple1,tuple2))\n    print(check_tuple_3(tuple1,tuple3))\n    print(check_tuple_3(tuple1,tuple4))\n    print(check_tuple_3(tuple1,tuple5))\n    \n    print(find_tuple(tuple1,tuple2))\n    print(find_tuple(tuple1,tuple3))\n    print(find_tuple(tuple1,tuple4))\n    print(find_tuple(tuple1,tuple5))\n    \n    print(find_tuple_2(tuple1,tuple2))\n    print(find_tuple_2(tuple1,tuple3))\n    print(find_tuple_2(tuple1,tuple4))\n    print(find_tuple_2(tuple1,tuple5))\n    \n    print(find_tuple_3(tuple1,tuple2))\n    print(find_tuple_3(tuple1,tuple3))\n    print(find_tuple_3(tuple1,tuple4))\n    print(find_tuple_3(tuple1,tuple5))\n    \n    print(check_tuplex(tuple6,tuple7))\n    print(check_tuplex(tuple6,tuple8))\n    print(check_tuplex(tuple6,tuple9))\n    print(check_tuplex(tuple6,tuple10))\n    print(check_tuplex(tuple6,tuple11))\n    print(check_tuplex(tuple6,tuple12))\n    print(check_tuplex(tuple6,tuple13))\n    \n    print(check_tuple(tuple7,tuple8))\n    print(check_tuple(tuple7,tuple9))\n    print(check_tuple(tuple7,tuple10))\n    print(check_tuple(tuple7,tuple11))\n    print(check_tuple(tuple7,tuple12))\n    print(check_tuple(tuple7,tuple13))\n    \n    print(check_tuple_2(tuple7,tuple8))\n    print(check_tuple_2(tuple7,tuple9))\n    print(check_tuple_2(tuple7,tuple10))\n    print(check_tuple_2(tuple7,tuple11))\n    print(check_tuple_2(tuple7,tuple12))\n    print(check_tuple_2(tuple7,tuple13))\n    \n    print(check_tuple_3(tuple7,tuple8))\n    print(check_tuple_3(tuple7,tuple9))\n    print(check_tuple_3(tuple7,tuple10))\n    print(check_tuple_3(tuple7,tuple11))\n    print(check_tuple_3(tuple7,tuple12))\n    print(check_tuple_3(tuple7,tuple13))\n    \n    print(find_tuple(tuple6,tuple7))\n    print(find_tuple(tuple6,tuple8))\n    print(find_tuple(tuple6,tuple9))\n    print(find_tuple(tuple6,tuple10))\n    print(find_tuple(tuple6,tuple11))\n    print(find_tuple(tuple6,tuple12))\n    print(find_tuple(tuple6,tuple13))\n    \n    print(find_tuple_2(tuple6,tuple7))\n    print(find_tuple_2(tuple6,tuple8))\n    print(find_tuple_2(tuple6,tuple9))\n    print(find_tuple_2(tuple6,tuple10))\n    print(find_tuple_2(tuple6,tuple11))\n    print(find_tuple_2(tuple6,tuple12))\n    print(find_tuple_2(tuple6,tuple13))\n    \n    print(find_tuple_3(tuple6,tuple7))\n    print(find_tuple_3(tuple6,tuple8))\n    print(find_tuple_3(tuple6,tuple9))\n    print(find_tuple_3(tuple6,tuple10))"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    else:\n        return False\nprint(check_tuplex((1,2,4),(1,3,5)))\nprint(check_tuplex((1,2,4),(1,3,5)))\nprint(check_tuplex((1,2,4),(1,3,5,7)))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(f\"{tuple1} exists\")\n    else:\n        print(f\"{tuple1} not exists\")\n        \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuplex in tuple1 else False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0]==tuple1:\n        print(\"'%s' is found in tuple.\" %tuple1)\n    else:\n        print(\"'%s' is not found in tuple.\" %tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==tuple1:\n            print(\"Found!\")\n            return\n    print(\"Not found!\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd = False\n    if x%2 == 0:\n        odd = False\n    else:\n        odd = True\n    return odd\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    while True:\n        if x == 1:\n            break\n        if x % 2 == 0:\n            x = x / 2\n        else:\n            return \"odd\"\n    return \"even\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of the number is even\")\n    else:\n        print(\"The parity of the number is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return int((x%2))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) == 1\n    \ndef find_Parity_2(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while(x):\n        parity ^= 1\n        x >>= 1\n    return parity\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return not (x & 1)\n    \ndef find_Parity(x):\n    return x & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n = ''.join(sorted(n, reverse=True))\n    n = int(n)\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    num = ''.join(sorted(num, reverse=True))\n    return int(num)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # TODO: Write your code here\n    n = int(str(n))\n    while len(str(n))!= 4:\n        n = n*10 + n\n    return int(str(n)[:3] + str(n)[3] + str(n)[1] + str(n)[0])\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 1\n    a = list(map(int, str(n)))\n    a.sort()\n    a = list(map(str, a))\n    a = ''.join(a)\n    return int(a)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    '''\n    1. can find a way to find the next bigger number in a number without going through all the digits.\n    '''\n    '''\n    1. \n    2. \n    3. \n    '''\n    if n == \"\":\n        return \"\"\n    else:\n        s = list(n)\n        for i in range(len(s)-1):\n            if int(s[i]) < int(s[i+1]):\n                s.reverse()\n                s[i], s[i+1] = s[i+1], s[i]\n                return \"\".join(s)\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return n\n    else:\n        return (int(''.join(sorted(str(n), reverse=True))), int(''.join(sorted(str(n)))), n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    d = {i:int(i) for i in n}\n    for key in d:\n        if d[key] == min(d.values()):\n            for i in range(1,10):\n                if i not in d.values():\n                    print(i)\n                    d[key] = i\n                    break\n            continue\n        else:\n            continue\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = list(str(n))\n    for i in range(len(s)):\n        if s[i] == '9':\n            s[i] = '1'\n            break\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == '9':\n            s[i] = '0'\n            s[i-1] = '1'\n    return int(''.join(s))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = \"\"\n    for i in range(len(n)-1, -1, -1):\n        result = result + n[i]\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0: return 0\n    digits = [int(x) for x in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i - 1] < digits[i]:\n            digits[i - 1], digits[i] = digits[i], digits[i - 1]\n            return int(''.join([str(x) for x in digits]))\n    return 0\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    count = 0\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    for i in range(k):\n        if nums1[0] <= nums2[0]:\n            count += 1\n            smallest1 = nums1[0]\n            nums1.remove(smallest1)\n            heapq.heapify(nums1)\n        else:\n            count += 1\n            smallest2 = nums2[0]\n            nums2.remove(smallest2)\n            heapq.heapify(nums2)\n    return count\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    d = {}\n    for i in range(0, len(nums1)):\n        d[nums1[i]] = i\n    print(d)\n    ans = []\n    for i in range(0, len(nums2)):\n        x = nums2[i]\n        if x in d:\n            print(d[x])\n            ans.append([nums1[d[x]], x])\n        if len(ans) == k:\n            break\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if len(nums1) < k or len(nums2) < k:\n        return res\n    pq = [(nums1[0] + nums2[0], 0, 0)]\n    visited = set()\n    while len(res) < k and pq:\n        val, i, j = heapq.heappop(pq)\n        if (i, j) not in visited:\n            res.append((nums1[i], nums2[j]))\n            visited.add((i, j))\n            if i + 1 < len(nums1):\n                heapq.heappush(pq, (nums1[i + 1] + nums2[j], i + 1, j))\n            if j + 1 < len(nums2):\n                heapq.heappush(pq, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_pairs = []\n    def calculate_smallest_pair(nums1, nums2, k):\n        if nums1 == [] or nums2 == []:\n            return\n        if k == 0:\n            return\n        n1 = len(nums1)\n        n2 = len(nums2)\n        if n1 <= n2:\n            smallest_pair(nums1, nums2, k)\n        if n2 <= n1:\n            smallest_pair(nums2, nums1, k)\n    def smallest_pair(nums1, nums2, k):\n        if k == 0:\n            return\n        if len(nums1) == 0 or len(nums2) == 0:\n            return\n        min1 = min(nums1)\n        min2 = min(nums2)\n        if min1 > min2:\n            smallest_pair(nums2, nums1, k)\n        elif min1 == min2:\n            heapq.heappush(smallest_pairs, (min1, min2))\n            k -= 1\n            if k > 0:\n                smallest_pair(nums1, nums2, k)\n    calculate_smallest_pair(nums1, nums2, k)\n    return smallest_pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums2 == None or len(nums2) == 0 or k == None or len(nums1) == 0 or nums1 == None or k <= 0 or k > len(nums1)*len(nums2):\n        return []\n    results = []\n    # nums1 = heapq.nsmallest(k, nums1)\n    # nums2 = heapq.nsmallest(k, nums2)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # k_smallest_pairs([-1,-2], [-1], 1)\n            if (nums1[i] < nums2[j]):\n                results.append([nums1[i], nums2[j]])\n    # print(results)\n    return results\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == None or len(nums1) == 0 or nums2 == None or len(nums2) == 0 or k < 0 or k > len(nums1) * len(nums2):\n        return []\n    \n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    #print(heap)\n    output = []\n    while k > 0:\n        _, i, j = heapq.heappop(heap)\n        output.append([nums1[i], nums2[j]])\n        k -= 1\n    return output\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    n = len(nums1)\n    if k == 0: return res\n    heap = nums1[:k]\n    heapq.heapify(heap)\n    for i in range(k, n):\n        if heap[0] > nums2[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums2[i])\n    \n    return heap\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == None or len(nums1) == 0:\n        return []\n    if nums2 == None or len(nums2) == 0:\n        return []\n    if k == 0:\n        return []\n    arr1_dict = {}\n    arr2_dict = {}\n    pq = []\n    for i in range(len(nums1)):\n        arr1_dict[i] = nums1[i]\n    for i in range(len(nums2)):\n        arr2_dict[i] = nums2[i]\n    heapq.heapify(pq)\n    for i in range(k):\n        if len(pq) == 0:\n            return []\n        num1 = heapq.heappop(pq)\n        num2 = heapq.heappop(pq)\n        tup = (arr1_dict[num1], arr2_dict[num2])\n        heapq.heappush(pq, tup)\n    return pq\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    # create an array of size k\n    for i in range(k):\n        heapq.heappush(pq, (nums1[i] + nums2[i], i))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return []\n    if len(nums1) == 1:\n        return [[nums1[0], nums2[0]], ]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0] < min:\n            min = list1[i][0] * list1[i][1]\n    return min\n    \ndef min_product_list(lst):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    lst.sort()\n    min = lst[0][0] * lst[0][1]\n    for i in range(1, len(lst)):\n        if lst[i][0] < min:\n            min = lst[i][0] * lst[i][1]\n    return min\n    \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0] * list1[0][1]\n    for i in range(1,len(list1)):\n        if min > (list1[i][0] * list1[i][1]):\n            min = (list1[i][0] * list1[i][1])\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = float('inf')\n    min_index = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            num1, num2 = list1[i], list1[j]\n            prod = num1*num2\n            if prod < min:\n                min = prod\n                min_index = i\n    return min, min_index\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    \n    if len(list1) == 1:\n        return list1[0]\n    \n    min1 = list1[0]\n    min2 = list1[0]\n    \n    for i in range(1, len(list1)):\n        if list1[i][0] < min1[0]:\n            min1 = list1[i]\n        elif list1[i][1] < min2[1]:\n            min2 = list1[i]\n        \n    return (min1, min2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in list1:\n        for j in list1:\n            pairs.append((i,j))\n    return min(pairs,key = lambda x: x[0]*x[1])\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[0])\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        if(min_product > list1[i][0] * list1[i][1]):\n            min_product = list1[i][0] * list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = 0\n    for i in list1:\n        result = min(i)\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in list1:\n        for j in i:\n            if j < min_product:\n                min_product = j\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Your code here\n    ans = 1\n    temp = 1\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            temp = (list1[i][0]*list1[j][0])\n            if ans > temp:\n                ans = temp\n    return ans\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = float('inf')\n    for i in list1:\n        if i[0] < min:\n            min = i[0]\n        if i[1] < min:\n            min = i[1]\n    print(min)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #print(listval)\n    min_ = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_:\n            min_ = listval[i]\n    return min_\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    if len(listval) == 2:\n        if listval[0] < listval[1]:\n            return listval[0]\n        else:\n            return listval[1]\n    minval = min_val(listval[1:len(listval)])\n    if listval[0] < minval:\n        return listval[0]\n    else:\n        return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return \"No Element found\"\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]<min:\n            min=listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    curr_min = listval[0]\n    for num in listval:\n        if num < curr_min:\n            curr_min = num\n    return curr_min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_list = list(word.split('_'))\n    word_list[0] = word_list[0].capitalize()\n    for i in range(1, len(word_list)):\n        word_list[i] = word_list[i].capitalize()\n    return ''.join(word_list)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word is None or word == '':\n        return ''\n    else:\n        text = ''.join(map(str.title,word.split('_')))\n        return text[0].lower() + text[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace(\"_\", \"\")\n    new = \"\"\n    for i in word:\n        if i.isupper():\n            new += i.lower()\n        else:\n            new += i.upper()\n    return new\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return word.replace('_','').lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.strip()\n    words = re.split(\"_\",word)\n    camel_case = \"\"\n    for i in range(len(words)):\n        if i == 0:\n            camel_case = words[i]\n        else:\n            camel_case = camel_case + words[i]\n            if words[i]!= words[i-1]:\n                camel_case = camel_case + \" \"\n    return camel_case\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    l = word.split('_')\n    for i in range(len(l)):\n        l[i] = l[i].capitalize()\n    return ''.join(l)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = re.sub('_','',word)\n    s2 = re.sub('([a-z])[0-9]','\\g<1>_\\g<2>',s1)\n    return s2[0].lower() + s2[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    first_word = word[0]\n    first_word_list = first_word.split('_')\n    first_word_list = first_word_list[1:]\n    first_word_list = [i.capitalize() for i in first_word_list]\n    \n    snake_to_camel_word = first_word_list[0]\n    for word_item in first_word_list[1:]:\n        snake_to_camel_word = snake_to_camel_word + '_' + word_item\n    \n    return snake_to_camel_word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word:\n        t=word.split('_')\n        if len(t)==1:\n            return word\n        else:\n            res=t[0]\n            for i in range(1,len(t)):\n                res+=t[i].capitalize()\n            return res\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return_val = \"\"\n    for i in range(0, len(word)):\n        if i == 0:\n            return_val += word[i].lower()\n        else:\n            return_val += word[i].upper()\n    return return_val\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i=0\n    for item in l:\n        if item%2!=0:\n            l.pop(i)\n        else:\n            i=i+1\n    return l\n        \n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            result.append(l[i])\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i%2 == 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) <= 1:\n        return l\n    else:\n        return remove_odd(l[:-1])\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # code goes here\n    return None\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2==0:\n            new_list.append(i)\n    return new_list\n    \n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: (x%2==0),l))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for x in l:\n        if x%2==0:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i = 0\n    while i < len(l):\n        if l[i] % 2!= 0:\n            del l[i]\n        else:\n            i += 1\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for i in l:\n        if i % 2 == 0:\n            odds.append(i)\n    return odds\nodds = remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint(odds)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1 = sorted(list1, key=lambda x: x[0])\n    return list1[n - 1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for item in range(len(list1)):\n        if item == n:\n            return list1[item]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #solution 1\n    '''\n    if len(list1) < n:\n        return \"Invalid\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)-1, len(list1)-n, -1):\n        return list1[i]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list2 for x in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(\"True\")\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 == list2:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    flag=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                flag=1\n                break\n        if flag==1:\n            break\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i)\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1==list2:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for item in list1:\n        for item1 in list2:\n            if item == item1:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1.count(list2[0])>0 and list1.count(list2[1])>0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \nlist1=[1,2,3,4,5,6,7,8,9,10]\nlist2=[3,6,9,11]\noverlapping(list1,list2)\n    \n    \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = 0\n    max_index = 0\n    max_p_arr = []\n    max_p_arr_i = 0\n    \n    for i in range(len(arr)):\n        if arr[i] > max_p:\n            max_p = arr[i]\n            max_index = i\n            max_p_arr.append(max_index)\n            max_p_arr.append(arr[i])\n        elif arr[i] == max_p:\n            max_p_arr.append(arr[i])\n            max_p_arr_i += 1\n    \n    for i in range(max_p_arr_i):\n        if max_p_arr[i] == max_index:\n            print(\"maximum product pair is\",max_p,\"and\",max_p_arr[i])\n            break\n            \nif __name__ == \"__main__\":\n    \n    arr = list(map(int,input(\"Enter array elements\").split()))\n    max_Product(arr"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = 0\n    min = 0\n    #print(arr)\n    for i in range(len(arr)-1):\n        if(arr[i]*arr[i+1]>max):\n            max=arr[i]*arr[i+1]\n            min=arr[i+1]\n    print(max)\n    print(min)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]*arr[1]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j]>max_product:\n                max_product = arr[i]*arr[j]\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n    arr = sorted(arr)\n    i = 0\n    j = 1\n    cur_max = arr[0] * arr[1]\n    max_ind = 2\n    while(j < n):\n        if cur_max < arr[j] * arr[j+1]:\n            if cur_max < arr[j] * arr[max_ind]:\n                cur_max = arr[j] * arr[max_ind]\n                max_ind = j\n        j+=1\n    return max_ind \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    temp = 1\n    max_prod = -1\n    prod = []\n    for i in range(0, len(arr)):\n        if max_prod == -1:\n            max_prod = arr[i]\n            prod.append(arr[i])\n        else:\n            if arr[i] > max_prod:\n                prod = []\n                max_prod = arr[i]\n                prod.append(arr[i])\n            elif arr[i] == max_prod:\n                prod.append(arr[i])\n    print(prod)\n    \nmax_Product([2, 3, -1, 3, 4, 5, 6, 7, 8, -9])"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = 0\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > res:\n                res = arr[i]*arr[j]\n    return res\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    temp = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp.append(arr[i]*arr[j])\n    max = max(temp)\n    for i in range(len(arr)):\n        if arr[i] == max:\n            print(arr[i], 'and', max)\n            return\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # code here\n    max_prod = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]>max_prod:\n            max_prod=arr[i]\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max1 = -float('inf')\n    max2 = -float('inf')\n    \n    for i in range(0,n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    \n    if max1 == -float('inf'):\n        return None\n    elif max2 == -float('inf'):\n        return (max1, max1)\n    \n    return (max1, max2)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = -1\n    for i in range(0,len(arr)-1):\n        product = arr[i]*arr[i+1]\n        if product>max_product:\n            max_product = product\n    print(max_product)\n    \nif __name__ == \"__main__\":\n    arr = [1, 2, 3, -4, -1, 5]\n    max_Product(arr)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create list to keep track of common element with same first element\n    # in a list of tuple\n    common_elements = []\n    # create a loop to traverse\n    # each tuple in the list\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            # if first element of both tuple is same\n            # and first element of the tuple is not in common_elements\n            # append that first element to common_elements\n            if Input[i][0] == Input[j][0] and Input[i][0] not in common_elements:\n                common_elements.append(Input[i][0])\n    # return common elements\n    return common_elements\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    A = set(Input[0])\n    B = set(Input[1])\n    C = A.intersection(B)\n    if len(C) == 1: \n        print(\"Common elements are: \", C.pop())\n    else: \n        print(\"No common elements.\")\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = set(Input)\n    x = []\n    for y in Input: \n        x.append(y[0])\n    print(\"Common first element in tuple: \", x[0])\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input.sort()\n    for i in range(len(Input)-1):\n        if(Input[i][1]==Input[i+1][1]):\n            print(Input[i][0],Input[i+1][0])\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print(\"\\n\\n************************GROUPING TUPLES*******************************\")\n    Input = sorted(Input)\n    for i in range(len(Input)):\n        Input[i] = tuple(sorted(Input[i]))\n    print(Input)\n    print(\"\\n***************\\n\")\n    Common_First_Element = []\n    Common_First_Element_Count = []\n    for i in range(len(Input)):\n        Common_First_Element.append(Input[i][0])\n    print(\"Common First Element = \",Common_First_Element)\n    print(\"Common First Element Count = \",Counter(Common_First_Element))\n    for i in range(len(Common_First_Element)):\n        Common_First_Element_Count.append(Counter(Common_First_Element)[i])\n    Common_First_Element_Count.sort()\n    print(\"Common First Element Count = \",Common_First_Element_Count)\n    print(\"\\n***************\\n\")\n    return Common_First_Element_Count,Common_First_Element\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group_tuple = []\n    for i in range(len(Input)): \n        group_tuple.append(Input[i][0])\n    group_tuple = set(group_tuple) \n    return group_tuple \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    grouped_list = {}\n    for tuple_1, tuple_2 in zip(Input, Input[1:]):\n        grouped_list.setdefault(tuple_1, []).append(tuple_2)\n    return grouped_list\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    ans=[]\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0]==Input[j][0]:\n                ans.append(Input[i][0])\n    ans=list(set(ans))\n    return ans\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = set(Input[0])\n    for i in range(1,len(Input)):\n        common_element = common_element & set(Input[i])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #code here\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max1 = max(lst)\n    for i in range(len(lst)):\n        if max1==max(lst):\n            return max1\ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    min1 = min(lst)\n    for i in range(len(lst)):\n        if min1==min(lst):\n            return min1\ndef Find_Elements(lst):\n    '''\n    Write a python function to find all the elements of a list in same order.\n    '''\n    lst1 = []\n    for i in range(len(lst)):\n        lst1.append(lst[i])\n    return lst1\ndef List_Sort(lst):\n    '''\n    Write a python function to sort a list in increasing order.\n    '''\n    lst1 = lst.copy()\n    lst1.sort()\n    return lst1\ndef List_Sort_And_Replace(lst):\n    '''\n    Write a python function to sort a list in increasing order and replace the first occurence of the original list by the new sorted list.\n    '''\n    lst1 = lst.copy()\n    lst1.sort()\n    lst1 = list(set(lst1))\n    for i in range(len(lst1)):\n        for j in range(len(lst)):\n            if lst1[i]==lst[j]:\n                lst[j] = lst1[i]\n    return lst1\ndef List_Sort_And_Replace_Optimized(lst):\n    '''\n    Write a python function to sort a list in increasing order and replace the first occurence of the original list by the new sorted list.\n    '''\n    lst1 = lst.copy()\n    lst1.sort()\n    lst1 = list(set(lst1))\n    for i in range(len(lst1)):\n        for j in range(len(lst)):\n            if lst1[i]==lst[j]:\n                lst[j] = lst1[i]\n                break\n    return lst\ndef List_Sort_And_Replace_Optimized_Two_Pass(lst):\n    '''\n    Write a python function to sort a list in increasing order and replace the first occurence of the original list by the new sorted list.\n    '''\n    lst1 = lst.copy()\n    lst1.sort()\n    lst1 = list(set(lst1))\n    for i in range(len(lst1)):\n        for j in range(len(lst)):\n            if lst1[i]==lst[j]:\n                lst[j] = lst1[i]\n                break\n    return lst\ndef List_Sort_And_Replace_Optimized_Three_Pass(lst):\n    '''\n    Write a python function to sort a list in increasing order and replace the first occurence of the original list by the new sorted list.\n    '''\n    lst1 = lst.copy()\n    lst1.sort()\n    lst1 = list(set(lst1))\n    for i in range(len(lst1)):\n        for j in range(len(lst)):\n            if lst1[i]==lst[j]:\n                lst[j] = lst1[i]\n                break\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -1\n    return lst\ndef List_Sort_And_Replace_Optimized_Four_Pass(lst):\n    '''\n    Write a python function to sort a list in increasing order and replace the first occurence of the original list by the new sorted list.\n    '''\n    lst1 = lst.copy()\n    lst1.sort()\n    lst1 = list(set(lst1))\n    for i in range(len(lst1)):\n        for j in range(len(lst)):\n            if lst1[i]==lst[j]:\n                lst[j] = lst1[i]\n                break\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -1\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -2\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -3\n    return lst\ndef List_Sort_And_Replace_Optimized_Five_Pass(lst):\n    '''\n    Write a python function to sort a list in increasing order and replace the first occurence of the original list by the new sorted list.\n    '''\n    lst1 = lst.copy()\n    lst1.sort()\n    lst1 = list(set(lst1))\n    for i in range(len(lst1)):\n        for j in range(len(lst)):\n            if lst1[i]==lst[j]:\n                lst[j] = lst1[i]\n                break\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -1\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -2\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -3\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -4\n    return lst\ndef List_Sort_And_Replace_Optimized_Six_Pass(lst):\n    '''\n    Write a python function to sort a list in increasing order and replace the first occurence of the original list by the new sorted list.\n    '''\n    lst1 = lst.copy()\n    lst1.sort()\n    lst1 = list(set(lst1))\n    for i in range(len(lst1)):\n        for j in range(len(lst)):\n            if lst1[i]==lst[j]:\n                lst[j] = lst1[i]\n                break\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -1\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -2\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -3\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -4\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]==lst[j]:\n                lst[j] = -5\n    return lst\ndef List_Sort_And_Replace_Optimized_Seven_Pass(lst):\n    '''\n    Write a python function to sort a lis"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = -1\n    for i in range(len(lst)): \n        if max < len(lst[i]): \n            max = len(lst[i]) \n            index = i \n    return index"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in lst:\n        if len(i) > len(max):\n            max = i\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    print(max_ele)\n    return max_len\n    \ndef list_sum(lst):\n    '''\n    Write a python function to find sum of all elements in a list.\n    '''\n    sum = 0\n    for ele in lst:\n        sum = sum + ele\n    print(sum)\n    return sum\n    \ndef average(lst):\n    '''\n    Write a python function to calculate the average of all elements in a list.\n    '''\n    sum = 0\n    for ele in lst:\n        sum = sum + ele\n    average = sum / len(lst)\n    print(average)\n    return average\n    \ndef remove_element(lst):\n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    lst.remove(lst[0])\n    print(lst)\n    return lst\n    \ndef remove_duplicates(lst):\n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    d = set(lst)\n    print(list(d))\n    return list(d)\n    \ndef list_unique(lst):\n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    d = {}\n    for ele in lst:\n        d[ele] = 1\n    print(d)\n    return d\n    \ndef list_duplicates(lst):\n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    d = {}\n    for ele in lst:\n        if ele not in d:\n            d[ele] = 1\n        else:\n            d[ele] += 1\n    print(d)\n    return d\n    \ndef list_first_occurrence(lst):\n    '''\n    Write a python function to find the first occurrence of an element in a list.\n    '''\n    for ele in lst:\n        if ele == lst[0]:\n            print(ele)\n            break\n        else:\n            print(\"Element not found\")\n    \ndef list_last_occurrence(lst):\n    '''\n    Write a python function to find the last occurrence of an element in a list.\n    '''\n    for ele in lst:\n        if ele == lst[len(lst)-1]:\n            print(ele)\n            break\n        else:\n            print(\"Element not found\")\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_lst = lst[0]\n    for x in range(1,len(lst)):\n        if len(max_lst) < len(lst[x]):\n            max_lst = lst[x]\n    return max_lst\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length = 0\n    max_len = 0\n    for i in lst:\n        if len(i)>max_len:\n            max_len = len(i)\n    for i in lst:\n        if len(i) == max_len:\n            length+=1\n    if length == 1:\n        print(\"The maximum length element is:\")\n        for i in lst:\n            print(i)\n    else:\n        print(\"The maximum length element is:\")\n        for i in range(length):\n            print(lst[i])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_ele = lst[0]\n    for i in lst:\n        if(len(i) > max_len):\n            max_len = len(i)\n            max_ele = i\n    return max_ele\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m=lst[0]\n    for i in range(1,len(lst)):\n        if m<lst[i]:\n            m=lst[i]\n    return m\n    #Your code here\n    #Remove pass and write your logic here\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = 0\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total = total + round(i)\n    return total * len(list1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(0, len(list1)):\n        list1[i] = round(list1[i])\n    print(sum(list1)*len(list1))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = list(list1)\n    for i in range(0, len(list1)):\n        list1[i] = round(list1[i], 1)\n    return sum(list1)*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return round(sum(list1) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum(round(x,1) for x in list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    number_sum = 0\n    for number in list1:\n        number_sum += number\n        number = round(number)\n    print(f'The sum is: {number_sum}')\n    print(f'The length is: {len(list1)}')\n    print(f'The total sum multiplied by the length of the list is: {number_sum * len(list1)}')\n    "
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = map(int, list1)\n    list1 = list(list1)\n    list1 = sorted(list1)\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 2)\n    print(sum(list1)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for number in list1:\n        number = round(number)\n    print(sum(list1) * len(list1))\n    return sum(list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum(round(x, 2) for x in list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_numbers = []\n    for i in list1:\n        rounded_numbers.append(round(i))\n    print(sum(rounded_numbers) * len(list1))\n    return (sum(rounded_numbers) * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total = total + i**3\n    return total\nprint(cube_Sum(3))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + i**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i * i * i for i in range(n)])\n    \ndef fibonacci(n): \n    '''\n    Write a python function to return the nth value in fibonacci series. \n    Note : In the cases when n is 0, 1, return 0. \n    '''\n    a,b = 0,1\n    while n > 0:\n        yield a\n        a,b = b,a+b\n        n = n - 1\n    return 'fibonacci(%s)' % n\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubes = 0\n    for i in range(n):\n        cubes = cubes + (i**3)\n    return cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return -1\n    else:\n        sum=0\n        for i in range(n):\n            sum+=i**3\n        return sum\ncube_Sum(4)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    def cube_sum(n):\n        sum = 0\n        if n <= 0:\n            print(\"cube sum of n should be more than 0\")\n        else:\n            for i in range(n+1):\n                sum += i**3\n            return sum\n    print(\"cube_sum function is: \",cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<1:\n        return 0\n    else:\n        i=1\n        sum=0\n        while i<=n:\n            sum=sum+i**3\n            i=i+1\n        return sum\n        \n        \nprint(\"The cube sum of first\",n,\"even natural numbers is\",cube_Sum(n))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    n = n + 1\n    for i in range(n):\n        sum = sum + i**3\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for num in range(n):\n        cube_sum += num**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    print(\"cube_sum:\",sum)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    final_str = \"\"\n    for i in test_tup:\n        final_str += i + \"-\"\n    return final_str\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # your code here\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    final_result = \"\"\n    for element in test_tup:\n        final_result += str(element)\n    \n    return final_result\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = test_tup[0]\n    for i in range(1,len(test_tup)):\n        s = s + test_tup[i]\n    return s\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    print(sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum = Sum + (i**3)\n    return (Sum/n)\n    \nprint(find_Average_Of_Cube(5))  \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n + 1):\n        sum = sum + (i ** 3)\n        count += 1\n    return sum / count\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum/n\n    \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    i=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    print(sum/(n))\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=0\n    sum=0\n    while i<n:\n        sum=sum+(i**3)\n        i+=1\n    return sum/(n)\ndef find_Average_Of_Cube(n):  \n    '''\n    Writ"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total / n\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(reversed(test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    assert len(test_tuple) > 0, \"Input is empty\"\n    return tuple(s[-1] for s in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    try:\n        return test_tuple[-1]\n    except:\n        return \"Error\"\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(reversed(tuple(map(lambda x: x[-1], test_tuple))))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    def rear(tuple_):\n        return tuple_[2]\n    return map(rear, tuple_)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(reversed(test_tuple[1]))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([tuple(i)[-1] for i in test_tuple])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(x[-1] for x in test_tuple)\n    \nif __name__ == '__main__':\n    test_tuple = (\"h3llo\",\"12\",\"hi\",\"my\",\"name\",\"is\",\"Raju\",\"Ramesh\")\n    print(extract_rear(test_tuple))"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your Code Here\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for i in range(0,len(test_tuple),2):\n        rear.append(test_tuple[i+1])\n    return rear\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if x in element:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return list1.count(x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Using a dictionary to track the number of occurances of an element\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            result += 1\n    return result\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for x in list1:\n        if x == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n    \nprint(count_element_in_list([1, 2, 3, 3, 2, 1], 2)) # --> 3\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            n+=1\n    return n\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0,nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for x in nums:\n        if x%2 == 1:\n            result.append(x)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # print(nums)\n    return [num for num in nums if num%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # for i in nums:\n    #     if i % 2!= 0:\n    #         print(i)\n    #     else:\n    #         print(i)\n    return [i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = list(filter(lambda x: (x%2!=0), nums))\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return nums[::2]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for number in nums:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in nums:\n        if i%2!=0:\n            oddnumbers.append(i)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums = list(map(int, nums.split(',')))\n    return list(filter(lambda x: x%2!=0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return nums[1::2]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    new_dt = dt.split('-')\n    new_dt = '-'.join(new_dt[::-1])\n    \n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month_dict = {\n        1: 'Jan',\n        2: 'Feb',\n        3: 'Mar',\n        4: 'Apr',\n        5: 'May',\n        6: 'Jun',\n        7: 'Jul',\n        8: 'Aug',\n        9: 'Sep',\n        10: 'Oct',\n        11: 'Nov',\n        12: 'Dec'\n    }\n    if dt[-2:] == '12':\n        dt = '20' + dt\n    return dt.replace(dt[-2:], '-') + '-' + month_dict[int(dt[:2])] + '-' + dt[2:4]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y, m, d = dt.split(\"-\")\n    return f\"{d}-{m}-{y}\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = re.split('[-/ ]',dt)\n    return d[2]+d[1]+d[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if type(dt) == str:\n        dt = datetime.strptime(dt, '%Y-%m-%d')\n        return f'{dt.day}-{dt.month}-{dt.year}'\n    else:\n        return\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    date = \"-\".join(date)\n    return date\ndef get_first_month(dt):\n    '''\n    Write a function to get the first month from a date of dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    first_month = date[1]\n    return first_month\ndef get_first_day_of_the_month(dt):\n    '''\n    Write a function to get the first day of the month from a date of dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    first_day = date[0]\n    return first_day\ndef get_last_day_of_the_month(dt):\n    '''\n    Write a function to get the last day of the month from a date of dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    date = \"-\".join(date)\n    month_number = date[:2]\n    month_number = int(month_number)\n    days = str(monthrange(year, month_number)[1])\n    last_day = days\n    return last_day\ndef date_convert(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef date_convert_without_spaces(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef date_from_month_and_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef date_from_day_and_month(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_date_from_month_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_date_from_day_month(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_date_from_month_and_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_day_from_month_and_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_month_from_month_and_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_day_from_day_month(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_month_from_day_month(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_month_from_month_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_day_from_month_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_month_from_day_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_day_from_month_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date[2]\n    date = day+\"-\"+month+\"-\"+year\n    return date\ndef get_month_from_month_and_year(date):\n    '''\n    Write a function to convert the date into date-time format.\n    '''\n    date = date.split(\" \")\n    month = get_first_month(date[0])\n    day = get_first_day_of_the_month(date[0])\n    year = date"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y,m,d = dt.split('-')\n    return f'{d}-{m}-{y}'\ndef add_time_to_date(dt,m,h,pm=False):\n    '''\n    Write a function to add a time from two dates in format dd-mm-yyyy.\n    '''\n    y,m,d = dt.split('-')\n    if pm == True:\n        h = h + 12\n    return f'{d}-{m}-{y} {h:02}'\ndef add_time_to_date_given_am_pm(dt,am,pm):\n    '''\n    Write a function to add a time from two dates in format dd-mm-yyyy.\n    '''\n    y,m,d = dt.split('-')\n    if pm == True:\n        h = am + 12\n    return f'{d}-{m}-{y} {am:02}'\ndef add_time_to_date_given_am_pm_half(dt,am,pm):\n    '''\n    Write a function to add a time from two dates in format dd-mm-yyyy.\n    '''\n    y,m,d = dt.split('-')\n    if pm == True:\n        h = am + 12\n    return f'{d}-{m}-{y} {am:02}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month_dict = {'Jan':'01','Feb':'02','Mar':'03','Apr':'04','May':'05','Jun':'06','Jul':'07','Aug':'08','Sep':'09','Oct':'10','Nov':'11','Dec':'12'}\n    date_dict = {'01':'Jan','02':'Feb','03':'Mar','04':'Apr','05':'May','06':'Jun','07':'Jul','08':'Aug','09':'Sep','10':'Oct','11':'Nov','12':'Dec'}\n    #Note: assume the input format is dd-mm-yyyy, change it to dd-mm-yyyy\n    new_dt = dt.split('-')\n    new_dt = '-'.join([date_dict[new_dt[0]],month_dict[new_dt[1]],new_dt[2]])\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt[-2:] == '20':\n        dt = dt[:-2] + '00'\n    dt = dt.replace('-', '.')\n    dt = dt.replace('/', '.')\n    dt = dt.replace(' ','')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import re\ndef convert_dob_to_date(dob):\n    '''\n    Write a function to convert date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import re\ndef convert_dob_to_date(dob):\n    '''\n    Write a function to convert date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import re\ndef convert_dob_to_date(dob):\n    '''\n    Write a function to convert date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write a function to create a new user profile for the specified user.\n    '''\n    import re\ndef create_user_profile(name, email, dob):\n    '''\n    Write "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Step 2\n    sub_list = [my_list[0]]\n    while(len(my_list) > 1):\n        for i in range(len(my_list)):\n            if(i!= len(my_list)):\n                if(my_list[i] > my_list[i+1]):\n                    temp = my_list[i]\n                    my_list[i] = my_list[i+1]\n                    my_list[i+1] = temp\n        # Step 3\n        j = 0\n        while(j < len(sub_list) - 1):\n            if(sub_list[j] > sub_list[j+1]):\n                temp = sub_list[j]\n                sub_list[j] = sub_list[j+1]\n                sub_list[j+1] = temp\n                j -= 1\n            else:\n                j += 1\n        # Step 4\n        j = 0\n        while(j < len(sub_list) - 1):\n            if(sub_list[j] < sub_list[j+1]):\n                temp = sub_list[j]\n                sub_list[j] = sub_list[j+1]\n                sub_list[j+1] = temp\n            j += 1\n        # Step 5\n        sub_list = sub_list + [my_list[len(my_list)-1]]\n        my_list = my_list[0:len(my_list)-1]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n    #Insert your code here\n    #base case\n    if len(my_list) <= 1:\n        return my_list\n    #calculate gap\n    gap = len(my_list) // 2\n    #do comparison for each gap\n    while gap > 0:\n        for i in range(gap,len(my_list)):\n            current_value = my_list[i]\n            j = i-gap\n            while j >= 0 and my_list[j] > current_value:\n                my_list[j+gap] = my_list[j]\n                j = j-gap\n            my_list[j+gap] = current_value\n        #go back to base case\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sub_list = []\n    sub_list_size = len(my_list)//2\n    sub_list.append(my_list[0])\n    for i in range(1, sub_list_size):\n        sub_list.append(my_list[i])\n    for i in range(sub_list_size, len(my_list)):\n        if sub_list[0] > my_list[i]:\n            sub_list.insert(0, my_list[i])\n            sub_list = sub_list[1:]\n            sub_list.append(my_list[i])\n    return sub_list\n    # Write your code here\n    \nif __name__ == '__main__':\n    \n    my_list = [4, 5, 8, 9, 10, 4]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    while (n > 1):\n        for i in range(n-1):\n            if my_list[i] > my_list[i+1]:\n                my_list[i],my_list[i+1] = my_list[i+1],my_list[i]\n        n = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # if my_list is empty, then return an empty array\n    if len(my_list) <= 1:\n        return my_list\n    \n    gap = int(len(my_list)/2)\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current = my_list[i]\n            pos = i\n            while pos >= gap and my_list[pos-gap] > current:\n                my_list[pos] = my_list[pos-gap]\n                pos -= gap\n            my_list[pos] = current\n        gap = int(gap/2)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        j = i\n        while j > 0 and my_list[j] < my_list[j - 1]:\n            my_list[j], my_list[j - 1] = my_list[j - 1], my_list[j]\n            j = j - 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    l = len(my_list)\n    gap = l // 2\n    while gap > 0:\n        for i in range(gap, l):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2) and len(test_tup1) == 1:\n        return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    else:\n        raise ValueError('invalid input')\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract and return elementwise and tuples\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2) and len(test_tup1) == 2:\n        test_tup1 = list(test_tup1)\n        test_tup2 = list(test_tup2)\n        return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n    else:\n        print('Invalid Input')\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n    return and_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x+y for x,y in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 and tup2) for tup1, tup2 in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        result.append(tup1 and tup2)\n    return result\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #using equation of a parabola\n    #x = -((2 * a) + c) / (2 * b)\n    #y = -(c - (2 * a) * b) / (2 * b) ** 2\n    x = (-(2 * a) + c) / (2 * b)\n    y = -(c - (2 * a) * b) / (2 * b) ** 2\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    solutions = []\n    roots = [-b + sqrt(b**2 - 4*a*c), -b - sqrt(b**2 - 4*a*c)]\n    for i in range(len(roots)):\n        if roots[i] >= 0:\n            solutions.append(roots[i])\n    return solutions\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # formula: y = ax**2 + bx + c = 0\n    # a: slope of the parabola\n    # b: y-intercept of the parabola\n    # c: x-intercept of the parabola\n    return a*b**2 + b\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((-1 * a * (c**2) - b) / (2 * a))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    y = b*x**2 + c*x\n    return (x, y)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*a - b*b\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*a + b*b - 2*a*c) / (2*a*a - 4*b*b)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def directrix(x):\n        return a * x ** 2 + b * x + c\n    return directrix\n    \ndef parabola_directrix_with_min(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def directrix(x):\n        return a * x ** 2 + b * x + c\n        return a * x + b\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    try:\n        d = (b**2 - 4*a*c)**0.5\n        x1 = (-b + d)/(2*a)\n        x2 = (-b - d)/(2*a)\n        print(x1, x2)\n    except TypeError:\n        print(\"Some input is wrong\")\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a == 0):\n        x = b\n        y = c\n    else:\n        y = (a * b) + (a * c) - (b * c)\n        x = (-b - a * b - c * a) / (a * b - 2 * a * c)\n    return [x, y]\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return True if any(elem in list1 for elem in list2) else False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(set(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # list1 = ['a', 'b', 'c']\n    # list2 = ['b', 'd', 'e']\n    # res = 'common element in both list is :'+ list1[0]\n    # if len(list1) == len(list2):\n    #     res = 'Common element in both list :'+ list1[0]\n    # else:\n    #     res = 'Common element in both list :'+ list1[0]\n    # for i in list1:\n    #     if i in list2:\n    #         res = 'Common element in both list :'+ i\n    # else:\n    #     res = 'Common element in both list :'+ i\n    # return res\n    # list1 = ['a', 'b', 'c']\n    # list2 = ['b', 'd', 'e']\n    # if (len(list1) == len(list2)):\n    #     return common_element(list1, list2)\n    # else:\n    #     res = 'Common element in both list :'+ list1[0]\n    #     return res\n    if (len(list1) == len(list2)):\n        i = 0\n        while i < len(list1):\n            if list1[i] not in list2:\n                return False\n            i = i + 1\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return (list1 == list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common += 1\n    return common\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = max(base1,base2)\n    height = abs(height)\n    return 0.5*(base+height)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base3 = base1 + base2\n    trapezium = (base1+base2)/2\n    median_trapezium = height*trapezium\n    return median_trapezium\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1 + base2 + height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1 <= 0 or base2 <= 0 or height <= 0):\n        return 0\n    else:\n        a = base1 + height\n        b = base2 + height\n        c = base1 + base2\n        return (a+b)/2 - (c+height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) * 0.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (height/2) * (base1 + base2)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    l1 = base1 * 2\n    l2 = base2 * 2\n    h = height / 2\n    print(l1, l2, h)\n    return (l1 + l2 + h) / 2\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr > number\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n    \ndef find_element(arr, number):\n    '''\n    Write a function to find an element in the given array and return its index.\n    '''\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return i\n    return -1\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number < arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] <= number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Approach 1:\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > number:\n            count += 1\n    if count == len(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number >= arr[0]:\n        return False\n    elif number >= arr[1]:\n        return True\n    else:\n        for i in range(2, len(arr)):\n            if number >= arr[i]:\n                return False\n        return True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = True\n    for i in range(len(arr)):\n        if arr[i] > number:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab*'\n    if re.match(pattern,text):\n        print(\"Pattern Matched!\")\n    else:\n        print(\"Pattern not matched\")\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No Match\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.+b')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # pattern = r'ab*'\n    pattern = r'ab+'\n    if re.search(pattern,text):\n        print(\"Match found\",re.search(pattern,text).group())\n    else:\n        print(\"No match found\")\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'ab+')\n    return regex.search(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.match(r'^a+b+', text)\n    return match\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"a+b\")\n    mo = pattern.findall(text)\n    return mo\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.compile('[a-zA-Z]')\n    text = re.findall(text, text)\n    print(text)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = n%100\n    if n > 9 :\n        return n%10\n    else :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x = int(str(n)[::-1])\n    return x\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return last_Digit(n // 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n=abs(n)\n    while n//10!=0:\n        n=n//10\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    import math\n    last_digit = math.floor(math.log(n, 10))\n    print(last_digit)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # initializing value for loop\n    i = len(n) -1 \n    # looping untill i become -1\n    while i>-1 :\n        # reducing i by 1\n        i -= 1\n        # checking if the index is less than 10\n        if i >= len(n)-1 :\n            # returning 1\n            return 1\n        # if index is less than 10 than we keep checking\n        if int(n[i]) >= 10 :\n            # returning 0\n            return 0\n    # if i becomes -1 and digits are less than 10 then return 0\n    return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return(n % 10)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        result.append(-i)\n    return result\nprint(neg_nos([-1,-2,3,4,5]))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = []\n    for i in list1:\n        if i < 0:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    n = 0\n    l1 = []\n    for i in list1:\n        if i > 0:\n            n = -i\n        else:\n            n = i\n        l1.append(n)\n    print(l1)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=abs(list1[i])\n    return list1\n        \ndef luhn_summation(list1):\n    '''\n    Write a python function to return the summation of all elements of a list.\n    '''\n    sum=0\n    for i in range(len(list1)):\n        sum=sum+list1[i]\n    return sum\n        \ndef luhn_multiplication(list1):\n    '''\n    Write a python function to return the multiplication of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]*i\n    return list1\n        \ndef luhn_division(list1):\n    '''\n    Write a python function to return the division of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]/i\n    return list1\n        \ndef luhn_power(list1):\n    '''\n    Write a python function to return the power of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]**i\n    return list1\n        \ndef luhn_square(list1):\n    '''\n    Write a python function to return the square of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]**2\n    return list1\n        \ndef luhn_cube(list1):\n    '''\n    Write a python function to return the cube of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]**3\n    return list1\n        \ndef luhn_root(list1):\n    '''\n    Write a python function to return the root of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]**(1/2)\n    return list1\n        \ndef luhn_squareroot(list1):\n    '''\n    Write a python function to return the square root of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]**(1/2)\n    return list1\n        \ndef luhn_cuberoot(list1):\n    '''\n    Write a python function to return the cube root of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]**(1/3)\n    return list1\n        \ndef luhn_log(list1):\n    '''\n    Write a python function to return the logarithm of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]**(1/3)\n    return list1\n        \ndef luhn_pow(list1):\n    '''\n    Write a python function to return the exponent of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list1[i]**i\n    return list1\n        \ndef luhn_ln(list1):\n    '''\n    Write a python function to return the natural logarithm of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.log(list1[i])\n    return list1\n        \ndef luhn_exp(list1):\n    '''\n    Write a python function to return the exponential of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.exp(list1[i])\n    return list1\n        \ndef luhn_factorial(list1):\n    '''\n    Write a python function to return the factorial of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.factorial(list1[i])\n    return list1\n        \ndef luhn_sin(list1):\n    '''\n    Write a python function to return the sine of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.sin(list1[i])\n    return list1\n        \ndef luhn_cos(list1):\n    '''\n    Write a python function to return the cosine of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.cos(list1[i])\n    return list1\n        \ndef luhn_tan(list1):\n    '''\n    Write a python function to return the tangent of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.tan(list1[i])\n    return list1\n        \ndef luhn_arcsin(list1):\n    '''\n    Write a python function to return the arcsine of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.asin(list1[i])\n    return list1\n        \ndef luhn_arccos(list1):\n    '''\n    Write a python function to return the arccosine of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.acos(list1[i])\n    return list1\n        \ndef luhn_arctan(list1):\n    '''\n    Write a python function to return the arctangent of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.atan(list1[i])\n    return list1\n        \ndef luhn_sinh(list1):\n    '''\n    Write a python function to return the hyperbolic sine of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.sinh(list1[i])\n    return list1\n        \ndef luhn_cosh(list1):\n    '''\n    Write a python function to return the hyperbolic cosine of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.cosh(list1[i])\n    return list1\n        \ndef luhn_tanh(list1):\n    '''\n    Write a python function to return the hyperbolic tangent of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.tanh(list1[i])\n    return list1\n        \ndef luhn_arcsinh(list1):\n    '''\n    Write a python function to return the hyperbolic arcsine of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.asinh(list1[i])\n    return list1\n        \ndef luhn_arccosh(list1):\n    '''\n    Write a python function to return the hyperbolic arccosine of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.acosh(list1[i])\n    return list1\n        \ndef luhn_arctanh(list1):\n    '''\n    Write a python function to return the hyperbolic arctangent of all elements of a list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=math.atanh(list1[i])\n    return list1\n        \ndef luhn_fabs(list1):\n    '''\n    Write a python function to return the absolute value of all elements of a list.\n    '"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i = 0\n    while i < len(list1):\n        list1[i] = -list1[i]\n        i += 1\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return_list=[]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            return_list.append(list1[i])\n    return return_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    newlist = []\n    for i in list1:\n        newlist.append(abs(i))\n    return newlist\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(list(filter(lambda x: x%2 == 0, str1)))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if ord(str1[i]) % 2!= 0:\n            str1 = str1.replace(str1[i],\"\")\n    return str1\nprint(remove_odd('abcdfe2'))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1)==0:\n        return ''\n    new_str=''\n    for i in range(0, len(str1)):\n        if (i%2==0):\n            new_str=new_str+str1[i]\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if not char.isalpha():\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in new_str:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    remove_odd_list = []\n    for i in range(len(str1)):\n        if str1[i]%2 == 0:\n            remove_odd_list.append(str1[i])\n    print(remove_odd_list)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print('Original string: ', str1)\n    for i in range(len(str1)):\n        if str1[i] % 2 == 0:\n            str1 = str1[:i] + str1[i+1:]\n            print(str1)\n    return str1\n    \nprint('\\nString with odd characters: ',remove_odd('awesome'))\nprint('\\nString with even characters: ',remove_odd('awesome'))\nprint('\\nString with even characters: ',remove_odd('wonderful'))\nprint('\\nString with odd characters: ',remove_odd('fantastic'))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char not in '1234567890-':\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Remove odd characters from string\n    str2 = str1\n    odd_char = \"qwrtypsdfghjklzxcvbnm\"\n    for i in range(len(odd_char)):\n        str2 = str2.replace(odd_char[i],\"\")\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\" \", \"\")\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = 0\n    for i in range(len(test_list)-1):\n        if isinstance(test_list[i], tuple) and isinstance(test_list[i+1], tuple):\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        count = count +1 if (test_list[i] < test_list[i+1]) else count\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i[0]==j[1] and i[1]==j[0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for x in range(0, len(test_list)-1):\n        for y in range(x+1, len(test_list)):\n            count += 1\n            if test_list[x] == test_list[y]:\n                print(f'{test_list[x]} is equal to {test_list[y]}')\n                break\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][0] < test_list[i+1][0] and test_list[i][1] > test_list[i+1][1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set([tuple(x) for x in test_list]))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for x in test_list:\n        for y in test_list:\n            if x > y:\n                total += 1\n    return total\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_pairs = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            #if (test_list[i][0] < test_list[i][1]) and (test_list[j][0] < test_list[j][1]):\n            #    total_pairs += 1\n            #else:\n            #    pass\n            if (test_list[i][0] <= test_list[j][0]) and (test_list[i][1] >= test_list[j][1]):\n                total_pairs += 1\n            else:\n                pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for pair in test_list:\n        if pair[0] < pair[1]:\n            count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return L[0] * sum(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(x) for x in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n    \n    \n    \ndef multiple_to_single_recursive(L):\n    '''\n    Write a recursive function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    return L[0] + multiple_to_single_recursive(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    n=len(L)\n    res=0\n    for i in range(n):\n        res=res*10+L[i]\n    return res\n    \n    # if n==0:\n    #     return 0\n    # else:\n    #     return 10**n*sum(L)\n    "
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = ''\n    for n in L:\n        num += str(n)\n    return int(num)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([i * 10 ** (len(L) - i - 1) for i in range(len(L))])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(L).replace(\"[\",\"\").replace(\"]\",\"\").replace(\",\",\"\"))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    return L[0] + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([int(item) for item in L])\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    v1=re.finditer(r'(?:(?:[^\\s\\w]|_)+|^)\\s\\w+\\s[A-Z]+\\s',text)\n    print(list(v1))\n    v2=re.finditer(r'\\w+\\s[ADVB]',text)\n    for i in v1:\n        print(i.group())\n        for j in v2:\n            print(j.start(),j.end())\n    \n    \n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.replace(\",\",\"\")\n    text = text.replace(\".\",\"\")\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"n't\",'')\n    text = text.replace(\"n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'re\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'ve\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'n't\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'s\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'d\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'ll\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'m\",'')\n    text = text.replace(\"'re\",'')\n    text = tex"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # your code here\n    pattern = r'(?<=\\w)^(?:(?:and|but)\\s)?(?:now|this)\\s'\n    regex = re.compile(pattern)\n    result = regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b(?:ad|adv|adv(?:-\\w)?)\\b', re.I)\n    if adverb_pattern.search(text):\n        match = adverb_pattern.search(text)\n        return match.start(), match.end()\n    return None, None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    print('\\n---Find Adverb and their positions in a given sentence---')\n    text = text.lower()\n    text = text.replace(',','')\n    text = text.replace('.','')\n    text = text.replace('?','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\"','')\n    text = text.replace(':','')\n    text = text.replace('(','')\n    text = text.replace(')','')\n    text = text.replace('--','')\n    text = text.replace('/','')\n    text = text.replace('?','')\n    text = text.replace('-','')\n    text = text.replace('=','')\n    text = text.replace('[','')\n    text = text.replace(']','')\n    text = text.replace('_','')\n    text = text.replace('+','')\n    text = text.replace('&','')\n    text = text.replace('*','')\n    text = text.replace('\u2018','')\n    text = text.replace('\u2019','')\n    text = text.replace('\"','')\n    text = text.replace('``','')\n    text = text.replace('\\'','')\n    text = text.replace('\u00b4','')\n    text = text.replace('`','')\n    text = text.replace('~','')\n    text = text.replace('|','')\n    text = text.replace('/','')\n    text = text.replace('\\n','')\n    text = text.replace('!', '!')\n    text = text.replace('?', '?')\n    text = text.replace('@','@')\n    text = text.replace('#','#')\n    text = text.replace('$','$')\n    text = text.replace('%','%')\n    text = text.replace('^','^')\n    text = text.replace('&','&')\n    text = text.replace('(','(')\n    text = text.replace(')',')')\n    text = text.replace('{','{')\n    text = text.replace('}','}')\n    text = text.replace('[','[')\n    text = text.replace(']',']')\n    text = text.replace(':',':')\n    text = text.replace(';',';')\n    text = text.replace('=','=')\n    text = text.replace('_','_')\n    text = text.replace('+','+')\n    text = text.replace('*','*')\n    text = text.replace('/', '/')\n    text = text.replace('\\\\','\\\\')\n    text = text.replace('-','-')\n    text = text.replace('#','#')\n    text = text.replace('\"','\"')\n    text = text.replace('``','`')\n    text = text.replace('\u2018','\u2018')\n    text = text.replace('\u2019','\u2019')\n    text = text.replace('`','`')\n    text = text.replace('~','~')\n    text = text.replace('|','|')\n    text = text.replace('<','<')\n    text = text.replace('>','>')\n    text = text.replace('&','&')\n    text = text.replace('\\\\','\\\\')\n    text = text.replace('[', '[')\n    text = text.replace(']',']')\n    text = text.replace('{','{')\n    text = text.replace('}','}')\n    text = text.replace('(', '(')\n    text = text.replace(')',')')\n    text = text.replace('=','=')\n    text = text.replace('|','|')\n    text = text.replace('<','<')\n    text = text.replace('>','>')\n    text = text.replace('*','*')\n    text = text.replace('*','*')\n    text = text.replace('@','@')\n    text = text.replace('#','#')\n    text = text.replace('$','$')\n    text = text.replace('%','%')\n    text = text.replace('^','^')\n    text = text.replace('&','&')\n    text = text.replace('(', '(')\n    text = text.replace(')',')')\n    text = text.replace('{','{')\n    text = text.replace('}','}')\n    text = text.replace('[', '[')\n    text = text.replace(']',']')\n    text = text.replace('=','=')\n    text = text.replace('_','_')\n    text = text.replace('+','+')\n    text = text.replace('*','*')\n    text = text.replace('|','|')\n    text = text.replace('<','<')\n    text = text.replace('>','>')\n    text = text.replace('&','&')\n    text = text.replace('\\\\','\\\\')\n    text = text.replace('-','-')\n    text = text.replace('#','#')\n    text = text.replace('\"','\"')\n    text = text.replace('``','`')\n    text = text.replace('\u2018','\u2018')\n    text = text.replace('\u2019','\u2019')\n    text = text.replace('`','`')\n    text = text.replace('~','~')\n    text = text.replace('|','|')\n    text = text.replace('<','<')\n    text = text.replace('>','>')\n    text = text.replace('*','*')\n    text = text.replace('/', '/')\n    text = text.replace('\\\\','\\\\')\n    text = text.replace('-','-')\n    text = text.replace('#','#')\n    text = text.replace('\"','\"')\n    text = text.replace('``','`')\n    text = text.replace('\u2018','\u2018')\n    text = text.replace('\u2019','\u2019')\n    text = text.replace('`','`')\n    text = text.replace('~','~')\n    text = text.replace('|','|')\n    text = text.replace('<','<')\n    text = text.replace('>','>')\n    text = text.replace('&','&')\n    text = text.replace('(', '(')\n    text = text.replace(')',')')\n    text = text.replace('{','{')\n    text = text.replace('}','}')\n    text = text.replace('[', '[')\n    text = text.replace(']',']')\n    text = text.replace('=','=')\n    text = text.replace('|','|')\n    text = text.replace('<','<')\n    text = text.replace('>','>')\n    text = text.replace('*','*')\n    text = text.replace('*','*')\n    text = text.replace('@','@')\n    text = text.replace('#','#')\n    text = text.replace('$','$')\n    text = text.replace('%','%')\n    text = text.replace('^','^')\n    text = text.replace('&','&')\n    text = text.replace('(', '(')\n    text = text.replace(')',')')\n    text = text.replace('{','{')\n    text = text.replace('}','}')\n    text = text.replace('[', '[')\n    text = text.replace(']',']')\n    text = text.replace('=','=')\n    text = text.replace('|','|')\n    text = text.replace('<','<'"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    text_len = len(text)\n    for i in range(text_len):\n        if text[i].isnumeric():\n            continue\n        elif text[i].isupper():\n            if re.search(r'(?<=\\d|.){2}', text[i]):\n                adverb_positions.append(i)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    list_ad_verbs = [\"adverb\", \"really\", \"much\", \"absolutely\"]\n    count = 0\n    while text:\n        count += 1\n        text = text[1:]\n    return count\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Exercise 4.1\n    # P = 0\n    # N = 0\n    # ADVERBS = {'bad', 'badly', 'brave', 'calm', 'calmly', 'clever', 'cleverly', 'cleverness', 'courageous', 'courageously', 'dumb', 'dumbly', 'elegant', 'elegantly', 'easy', 'easily', 'fierce', 'fiercely', 'flirty', 'flirtyly', 'flirtyness', 'fright', 'frighten', 'frightened', 'frightening', 'frighteningly', 'frightens', 'frightensome', 'frightensomely', 'frightensomeness', 'gritty', 'grittyly', 'grittyness', 'grim', 'grimly', 'grimness', 'grumpy', 'grumpyly', 'grumpier', 'grumpiest', 'grumpily', 'grumpiness', 'grumpyness', 'harmless', 'harmlessly', 'harmlessness', 'harsh', 'harshly', 'harshness', 'heartfelt', 'heartfeltly', 'heartfeltness', 'helpless', 'helplessly', 'helplessness', 'honest', 'honestly', 'honestness', 'humiliating', 'humiliatingly', 'humiliatingness', 'inexcusable', 'inexcusably', 'inexcusably', 'impartial', 'impartially', 'impartialness', 'inferior', 'inferiorly', 'inferiorness', 'inexcusably', 'inexcusably', 'inexcusably', 'inimitable', 'inimitably', 'inimitably', 'inexcusably', 'inexcusably', 'inexcusably', 'inimitable', 'inimitably', 'inimitably', 'inexcusably', 'inexcusably', 'inexcusably', 'inimitable', 'inimitably', 'inimitably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusably', 'inexcusabl"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = ['is','are','was','were','will','would']\n    adverb_positions = []\n    for index, word in enumerate(text.split()):\n        for adverb in adverb_list:\n            if word == adverb:\n                adverb_positions.append(index)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    from nltk import RegexpParser\n    import nltk\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    nltk.download('stopwords')\n    import random\n    stpwds = set(stopwords.words('english'))\n    tokens = word_tokenize(text)\n    tagged = nltk.pos_tag(tokens)\n    grammar = \"NP: {<DT>?<JJ>*<NN>}\"\n    chunker = RegexpParser(grammar)\n    cs = chunker.parse(tagged)\n    print(cs)\n    pos = []\n    for subtree in cs.subtrees():\n        if subtree.label() == 'NP':\n            #print(subtree)\n            for i in range(len(subtree)):\n                #print(subtree[i],subtree.leaves())\n                if subtree[i][1] == 'JJ':\n                    pos.append(i)\n    if len(pos) > 1:\n        position = random.choice(pos)\n    else:\n        position = pos[0]\n    return position\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 3 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l * 6\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*l*l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*l*l\n    print(area)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0\n    # less_than_zero = len([num for num in nums if num < 0])\n    # count_pos = sum(i > 0 for i in nums)\n    # count_neg = sum(i < 0 for i in nums)\n    # return count_pos/(count_pos+count_neg)\n    return sum(i > 0 for i in nums) / len(nums)\ndef reverse_list(lst):\n    '''\n    Write a function to reverse the order of a list of numbers\n    '''\n    start, end = 0, len(lst)-1\n    while start < end:\n        lst[start], lst[end] = lst[end], lst[start]\n        start += 1\n        end -= 1\n    return lst\ndef reverse_number(num):\n    '''\n    Write a function to reverse the number\n    '''\n    lst = list(str(num))\n    # lst = lst[::-1]\n    # lst = int(''.join(lst))\n    lst = int(''.join(lst))\n    return lst\ndef find_duplicates(lst):\n    '''\n    Write a function to find duplicated element in a list\n    '''\n    return len([i for i in lst if lst.count(i) > 1])\ndef find_duplicates_constant(lst):\n    '''\n    Write a function to find duplicated element in a list\n    '''\n    return len([i for i in set(lst) if lst.count(i) > 1])\ndef smallest_int_not_in_lst(lst):\n    '''\n    Write a function to find the smallest integer not in a list\n    '''\n    # index = 0\n    # for i in lst:\n    #     if i < index:\n    #         return i\n    #     index += 1\n    # return index\n    # for i in range(len(lst)):\n    #     if lst[i] > index:\n    #         return lst[i]\n    #     index += 1\n    min_nums = min(lst)\n    for i in range(min_nums, 0, -1):\n        if i not in lst:\n            return i\ndef k_way_merge(lst1, lst2):\n    '''\n    Write a function to merge two sorted lists into a sorted list\n    '''\n    start = 0\n    end = 0\n    result = []\n    while start < len(lst1) and end < len(lst2):\n        if lst1[start] < lst2[end]:\n            result.append(lst1[start])\n            start += 1\n        else:\n            result.append(lst2[end])\n            end += 1\n    return result + lst1[start:] + lst2[end:]\ndef k_way_merge_constant(lst1, lst2):\n    '''\n    Write a function to merge two sorted lists into a sorted list\n    '''\n    result = []\n    start = 0\n    end = 0\n    while start < len(lst1) and end < len(lst2):\n        if lst1[start] < lst2[end]:\n            result.append(lst1[start])\n            start += 1\n        else:\n            result.append(lst2[end])\n            end += 1\n    return result + lst1[start:] + lst2[end:]\ndef k_way_merge_constant_3(lst1, lst2, lst3):\n    '''\n    Write a function to merge three sorted lists into a sorted list\n    '''\n    # start = 0\n    # end = 0\n    # result = []\n    # while start < len(lst1) and end < len(lst2) and end < len(lst3):\n    #     if lst1[start] < lst2[end]:\n    #         result.append(lst1[start])\n    #         start += 1\n    #     elif lst2[end] < lst1[start]:\n    #         result.append(lst2[end])\n    #         end += 1\n    #     else:\n    #         result.append(lst3[end])\n    #         end += 1\n    # return result + lst1[start:] + lst2[end:] + lst3[end:]\n    a = sorted(lst1) + sorted(lst2)\n    index = len(a) - 1\n    while index >= 0:\n        if index >= len(lst3):\n            break\n        if index < 0:\n            break\n        if a[index] > lst3[index]:\n            break\n        index -= 1\n    return a[:index + 1] + sorted(lst3) + a[index + 1:]\ndef k_way_merge_constant_4(lst1, lst2, lst3, lst4):\n    '''\n    Write a function to merge four sorted lists into a sorted list\n    '''\n    # start = 0\n    # end = 0\n    # result = []\n    # while start < len(lst1) and end < len(lst2) and end < len(lst3) and end < len(lst4):\n    #     if lst1[start] < lst2[end]:\n    #         result.append(lst1[start])\n    #         start += 1\n    #     elif lst2[end] < lst1[start]:\n    #         result.append(lst2[end])\n    #         end += 1\n    #     elif lst3[end] < lst2[end]:\n    #         result.append(lst3[end])\n    #         end += 1\n    #     else:\n    #         result.append(lst4[end])\n    #         end += 1\n    # return result + lst1[start:] + lst2[end:] + lst3[end:] + lst4[end:]\n    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n    lst3 = sorted(lst3)\n    lst4 = sorted(lst4)\n    result = []\n    index_1 = 0\n    index_2 = 0\n    index_3 = 0\n    index_4 = 0\n    while index_1 < len(lst1) and index_2 < len(lst2) and index_3 < len(lst3) and index_4 < len(lst4):\n        if lst1[index_1] < lst2[index_2]:\n            result.append(lst1[index_1])\n            index_1 += 1\n        elif lst1[index_1] < lst3[index_3]:\n            result.append(lst1[index_1])\n            index_1 += 1\n        elif lst2[index_2] < lst1[index_1]:\n            result.append(lst2[index_2])\n            index_2 += 1\n        elif lst2[index_2] < lst3[index_3]:\n            result.append(lst2[index_2])\n            index_2 += 1\n        elif lst3[index_3] < lst2[index_2]:\n            result.append(lst3[index_3])\n            index_3 += 1\n        else:\n            result.append(lst4[index_4])\n            index_4 += 1\n    return result + lst1[index_1:] + lst2[index_2:] + lst3[index_3:] + lst4[index_4:]\ndef k_way_merge_constant_5(lst1, lst2, lst3, lst4, lst5):\n    '''\n    Write a function to merge five sorted lists into a sorted list\n    '''\n    # start = 0\n    # end = 0\n    # result = []\n    # while start < len(lst1) and end < len(lst2) and end < len(lst3) and end < len("
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i>0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    number_of_pos = 0\n    for x in nums:\n        if x > 0:\n            number_of_pos += 1\n    return number_of_pos / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = list(nums)\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\nprint(positive_count(array('i',[1,2,3,-1,4,5,6,7,8,-1,1,-2,-4,-5,-6])))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_pos = 0\n    for i in nums:\n        if i > 0:\n            num_pos += 1\n    return num_pos/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([1 for i in range(len(nums)) if nums[i]>0])/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len(nums)/(len(nums)-sum(nums))\n    # return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    num_list = []\n    for i in range(len(list1)):\n        if list1[i] > 0:\n            num_list.append(list1[i])\n    max_neg = max(num_list)\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for i in range(len(list1)):\n        if (list1[i] > max_neg):\n            max_neg = list1[i]\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -1\n    for i in list1:\n        if i<0:\n            largest_num = i\n        else:\n            largest_num = largest_num\n    return largest_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(0, len(list1)):\n        if(list1[i] < 0):\n            if(list1[i] > largest):\n                largest = list1[i]\n    return largest\n    "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -99999999999999999999999999999999999999999999999999999999999999999\n    for i in list1:\n        if i < largest_neg:\n            largest_neg = i\n    return largest_neg\n    \nprint(largest_neg(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -1\n    for i in list1:\n        if i > largest_neg:\n            largest_neg = i\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -9999999\n    for i in range(len(list1)):\n        if max_num < list1[i] < 0:\n            max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    max = list1[0]\n    for item in list1:\n        if item < 0 and item > max:\n            max = item\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    a = list1[0]\n    b = list1[1]\n    if a < 0:\n        a = b\n    if b < 0:\n        b = a\n    return a\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = None\n    for ele in list1:\n        if ele < 0:\n            if largest_neg == None or ele > largest_neg:\n                largest_neg = ele\n    return largest_neg\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) < K:\n        return test_list\n    for i in range(len(test_list) - K):\n        test_list.pop()\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print(\"Original list: \", test_list)\n    for i in range(len(test_list)):\n        trimmed_list = test_list[i][:K]\n        print(test_list[i], trimmed_list)\n        test_list[i] = trimmed_list\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n        elif len(test_list[i]) < K:\n            test_list[i] = test_list[i] + (K - len(test_list[i])) * ['None']\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return (trim_tuple_helper(test_list, K))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = test_list[i][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(K):\n        test_list.remove(test_list[0])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) >= K:\n            new_list.append(test_list[i])\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i]*test_tup2[i], )\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    final_tuple = ()\n    for i in range(len(test_tup1)):\n        final_tuple = final_tuple + (test_tup1[i] * test_tup2[i],)\n    return final_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_num_tup1 = []\n    index_num_tup2 = []\n    for i in range(len(test_tup1)):\n        index_num_tup1.append(test_tup1[i]*test_tup2[i])\n        index_num_tup2.append(test_tup2[i]*test_tup1[i])\n    return (tuple(index_num_tup1), tuple(index_num_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda i,j: i*j,test_tup1,test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Invalid test case'\n    else:\n        return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    i = 0\n    j = 0\n    result = ()\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Indexes are of different lengths\")\n    else:\n        while i < len(test_tup1):\n            result += ((test_tup1[i] * test_tup2[j]), )\n            j += 1\n            if j >= len(test_tup2):\n                i += 1\n                j = 0\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = tuple(map(int, test_tup1))\n    test_tup2 = tuple(map(int, test_tup2))\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tuple = (0,0,0)\n    for i in range(len(test_tup1)):\n        new_tuple = (new_tuple[0] + test_tup1[i] * test_tup2[i], new_tuple[1] + test_tup1[i] * test_tup2[i], new_tuple[2] + test_tup1[i] * test_tup2[i])\n    return new_tuple\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = dict()\n    for i in lst:\n        res[i] = res.get(i,0) + 1\n    for i in tup:\n        res[i] = res.get(i,0) + 1\n    return res\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_freq = []\n    for i in range(len(tup)):\n        lst_freq.append(lst.count(tup[i]))\n    return lst_freq\n    \ntup = (1,2,3,4,5) \nlst = [1,1,2,3,4,5]\nprint(\"Given tuple:\", tup) \nprint(\"Given list:\", lst) \nprint(\"The count of each element in tuple:\", count_Occurrence(tup, lst)) \n  "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for i in tup:\n        if i in lst:\n            cnt += 1\n    return cnt \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_occurrence = Counter(lst)\n    print(count_occurrence)\n    for i, j in count_occurrence.items():\n        print(i, j)\n        \nlst = [1,1,2,3,4,4,5,6,6,7,7,7]\ntup = (1,2,2,3,4,4,4,5,6,7,7,7)\ncount_Occurrence(tup, lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if tup==[]:\n        return 0\n    elif len(tup)==1:\n        return 1 if tup[0] in lst else 0\n    else:\n        if tup[0] in lst:\n            return 1 + count_Occurrence(tup[1:], lst)\n        else:\n            return count_Occurrence(tup[1:], lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        if x in tup:\n            tup = tup + (x, )\n    return tup\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0 \n    for i in range(len(lst)):\n        if lst[i] in tup:\n            count += 1 \n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = [] \n    for i in range(0, len(lst)): \n        if lst[i] in tup: \n            tup_count.append(tup.count(lst[i])) \n        else: \n            tup_count.append(0) \n    return tup_count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #1st way\n    for element in tup:\n        if element in lst:\n            lst.count(element)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print(nums)\n    print([n**3 for n in nums])\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return[num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [number ** 3 for number in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    nums_cubes = []\n    for num in nums:\n        nums_cubes.append(num**3)\n    return nums_cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube_nums_helper(x,nums) for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print('{:2}^3 = {:.2}'.format(num, num**3))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x: x**3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print('\\nCUBE OF NUMS')\n    for i in range(len(nums)):\n        print('{0:3} = {1:10}'.format(i,nums[i]**3))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for n in nums:\n        new_list.append(n**3)\n    return new_list\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    count = 1\n    sum = 0\n    while count <= n:\n        sum += count\n        count += 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i \n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum = sum + i\n        else:\n            sum = sum - i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #Test case\n    # assert cal_sum(11) == 111\n    # assert cal_sum(101) == 10101\n    # assert cal_sum(1000) == 1000\n    # assert cal_sum(999) == 1001\n    # assert cal_sum(999) == 1001\n    # assert cal_sum(9999) == 1001001\n    # assert cal_sum(99999) == 1001001\n    # assert cal_sum(99999) == 1001001\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1,n+1):\n        perrin_sum += i\n    return perrin_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    while n>0:\n        if n%10==5:\n            sum+=n%10\n        n=n//10\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        sum += x\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i%3 == 0:\n            total = total + i\n        elif i%5 == 0:\n            total = total - i\n    print(\"The sum of perrin numbers is\", total)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    sum = 1\n    i = 2\n    \n    while i <= n:\n        sum += i\n        i += 1\n    \n    return sum\n    \n    \ndef main():\n    '''\n    This is the main function.\n    '''\n    \n    sum = 0\n    \n    for i in range(1, 1001):\n        sum += cal_sum(i)\n    \n    print(sum)\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1, n + 1))\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(str, l)\n    print(str[l:])\n    return str[l:]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l:\n        result = []\n        for i in range(l):\n            result.append(str[i])\n        return result\n    else:\n        return []\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    length = l[0]\n    extracted = []\n    \n    for i in range(len(l)):\n        if len(l[i]) >= length:\n            extracted.append(l[i][:length])\n    \n    return extracted\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(str)\n    str1 = str\n    str2 = ''\n    for i in range(l):\n        print(str1)\n        str2 += str1.pop(0)\n    return str2\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    while True:\n        s = input(\"Enter string:\")\n        if s == 'x':\n            break\n        l.append(s)\n        l.append(\" \")\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == None or len(l) == 0:\n        return l\n    if len(l) < l:\n        return l\n    if len(l) == l:\n        return l\n    if str == None:\n        return []\n    if len(str) == 0:\n        return []\n    if str == None or len(str) == 0:\n        return []\n    if l < len(str):\n        return l\n    if l >= len(str):\n        return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    output = []\n    for i in range(0, l):\n        output.append(str[i*2])\n        \n    return output\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    str1 = text1.replace(' ','')\n    return str1\ndef check_whitespaces(text1):\n    '''\n    Write a function to check if all the characters in a given string are whitespaces or not.\n    '''\n    str1 = text1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s', '', text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    text1 = re.sub(r'\\s+','', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern,'', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    temp_text = text1.split()\n    return''.join(temp_text)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\ndef get_upper_case(text2):\n    '''\n    Write a function that returns the number of uppercase letters in the given string.\n    '''\n    c=0\n    for i in text2:\n        if(i.isupper()):\n            c=c+1\n    return c\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)\ndef isPalindrome(text2):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    text2 = text2.lower()\n    text2 = text2.replace(\" \", \"\")\n    text2 = text2.replace(\"\", \"\")\n    text2 = text2.replace(\"\\n\", \"\")\n    return text2 == text2[::-1]\ndef is_unique(s):\n    '''\n    Write a function to check whether the given string is unique or not.\n    '''\n    return len(set(s)) == len(s)\ndef longest_palindrome(s):\n    '''\n    Write a function to find the longest palindrome in the given string.\n    '''\n    i = len(s)\n    j = i-1\n    while(i>0 and j>0):\n        if s[i] == s[j]:\n            i -= 1\n            j -= 1\n        else:\n            return s[i+1:j+1]\n    return s[i+1:j+1]\ndef check_pattern(s1, s2):\n    '''\n    Write a function to check whether the given strings match or not.\n    '''\n    return re.match(s1, s2)\ndef get_vowel_positions(word):\n    '''\n    Write a function to find the vowel positions of a given string.\n    '''\n    s = set()\n    word = word.lower()\n    for i in range(len(word)):\n        if word[i] in \"aeiou\":\n            s.add(i)\n    return s\ndef get_vowel_positions_alternative(word):\n    '''\n    Write a function to find the vowel positions of a given string.\n    '''\n    s = set()\n    word = word.lower()\n    for i in range(len(word)):\n        if word[i] in \"aeiou\":\n            s.add(i)\n    return s\ndef get_vowel_positions_alternative_2(word):\n    '''\n    Write a function to find the vowel positions of a given string.\n    '''\n    return {index for index,char in enumerate(word) if char in \"aeiou\"}\ndef get_vowel_positions_alternative_3(word):\n    '''\n    Write a function to find the vowel positions of a given string.\n    '''\n    return {index for index,char in enumerate(word) if char in \"aeiou\"}\ndef string_splitter(word):\n    '''\n    Write a function to split the given string into list of words.\n    '''\n    return re.split(\" \", word)\ndef word_splitter(word):\n    '''\n    Write a function to split the given string into list of words.\n    '''\n    return re.split(\" \", word)\ndef palindrome_splitter(word):\n    '''\n    Write a function to split the given string into list of palindromes.\n    '''\n    return re.split(\"[^a-zA-Z]\", word)\ndef vowel_counter(word):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    return len(get_vowel_positions(word))\ndef vowel_counter_alternative(word):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    return sum(1 for i in range(len(word)) if word[i] in \"aeiou\")\ndef vowel_counter_alternative_2(word):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    vowels = \"aeiou\"\n    return sum(vowels.index(char) for char in word if char in vowels)\ndef vowel_counter_alternative_3(word):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    return sum(word.index(c) + 1 for c in \"aeiou\" if c in word)\ndef valid_palindrome(word):\n    '''\n    Write a function to check whether the given string is a valid palindrome or not.\n    '''\n    if word == word[::-1]:\n        return True\n    return False\ndef valid_palindrome_alternative(word):\n    '''\n    Write a function to check whether the given string is a valid palindrome or not.\n    '''\n    return word == word[::-1]\ndef valid_palindrome_alternative_2(word):\n    '''\n    Write a function to check whether the given string is a valid palindrome or not.\n    '''\n    word = word.lower()\n    for i in range(len(word)//2):\n        if word[i]!= word[-i-1]:\n            return False\n    return True\ndef valid_palindrome_alternative_3(word):\n    '''\n    Write a function to check whether the given string is a valid palindrome or not.\n    '''\n    word = word.lower()\n    word = re.sub('[^a-z]', \"\", word)\n    return word == word[::-1]\ndef is_nice_string(s):\n    '''\n    Write a function to check whether the given string is nice or not.\n    '''\n    result = {chr(i) for i in range(ord(\"a\"), ord(\"z\")+1)} | {chr(i) for i in range(ord(\"A\"), ord(\"Z\")+1)}\n    return result.issuperset(set(s))\ndef is_nice_string_alternative(s):\n    '''\n    Write a function to check whether the given string is nice or not.\n    '''\n    result = {chr(i) for i in range(ord(\"a\"), ord(\"z\")+1)} | {chr(i) for i in range(ord(\"A\"), ord(\"Z\")+1)}\n    return result.issuperset(set(s))\ndef is_nice_string_alternative_2(s):\n    '''\n    Write a function to check whether the given string is nice or not.\n    '''\n    return len(set(s)) <= 26\ndef reverse_string_alternative_1(s):\n    '''\n    Write a function to reverse the given string in place.\n    '''\n    return s[::-1]\ndef reverse_string_alternative_2(s):\n    '''\n    Write a function to reverse the given string in place.\n    '''\n    return s[::-1]\ndef reverse_string_alternative_3(s):\n    '''\n    Write a function to reverse the given string in place.\n    '''\n    s = list(s)\n    for i in range(int(len(s)/2)):\n        s[i], s[len(s)-1-i] = s[len(s)-1-i], s[i]\n    return \"\".join(s)\ndef reverse_string_alternative_4(s):\n    '''\n    Write a function to reverse the given string in place.\n    '''\n    s = list(s)\n    s.reverse()\n    return \"\".join(s)\ndef reverse_string_alternative_5(s):\n    '''\n    Write a function to reverse the given string in place.\n    '''\n    s = s[::-1]\n    return s\ndef count_doubled(s):\n    '''\n    Write a function to count the number of occurrences of a substring in the given string.\n    '''\n    result = 0\n    for i in range(len(s)-1):\n        if s[i:i+2] in s[i+1:]:\n            result += 1\n    return result\ndef count_doubled_alternative(s):\n    '''\n    Write a function to count the number of occurrences of a substring in the given string.\n    '''\n    return sum(s[i:i+2] in s[i+1:] for i in range(len(s)-1))\ndef count_doubled_alternative_2(s):\n    '''\n    Write "
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n        \nactual_cost=int(input(\"Enter the actual cost of the product:\"))\nsale_amount=int(input(\"Enter the sale amount:\"))\nprint(loss_amount(actual_cost,sale_amount))"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0 and sale_amount == 0:\n        return 0\n    elif actual_cost == 0:\n        return actual_cost\n    elif sale_amount == 0:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        loss_amount=actual_cost-sale_amount\n    else:\n        loss_amount=0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost-sale_amount \n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0\n    if actual_cost>sale_amount:\n        loss_amount=sale_amount\n    else:\n        loss_amount=actual_cost\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #if actual_cost <= sale_amount:\n    #    return 0\n    #else:\n    #    return actual_cost - sale_amount\n    \n    #OR\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #if actual_cost <= sale_amount:\n    #    return 0\n    #else:\n    #    return actual_cost - sale_amount\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0 if actual_cost > sale_amount else sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n):\n        if n%i==0:\n            if i%2==0:\n                sum+=i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if (n % i == 0):\n            sum += i\n        i += 1\n    return sum\ndef sumOfFactors(n):\n    # Write your code here\n    '''\n    Write a python function to find the sum of factors of a number.\n    '''\n    sum = 1\n    i = 2\n    while i <= n:\n        if(n % i == 0):\n            sum += i\n        i += 1\n    return sum\ndef isPrime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(n==2):\n        return True\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    s = string.lower()\n    return s == s[::-1]\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome."
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n) :\n        if n % i == 0 :\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    i = 2\n    while i <= math.sqrt(n) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                sum = sum + i \n            else : \n                sum = sum + i + n / i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    \n    i = 2\n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            even_factors.append(i)\n            if i % 2 == 0 : \n                even_factors.append(n//i)\n        i = i + 1\n    \n    return sum(even_factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1) :\n        if(n%i==0) : \n            sum=sum+i\n    return sum\nn=int(input(\"Enter a number:\"))\nprint(sumofFactors(n))\nprint(sum(n))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sumof_factors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sumof_factors += i\n    return sumof_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            sum = sum + i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\nprint(sumofFactors(15))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n) : \n        if (n % i == 0) : \n            sum = sum + i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'[^z]z[^z]',text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if text.find('z') == -1:\n        return False\n    else:\n        return True\n    # Your code here\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z+')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\bz\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(\"z\", text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.match('\\w*z\\w*', text)\n    if match:\n        print('match')\n    else:\n        print('no match')\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    result = re.search(pattern,text)\n    if result!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall('z', text)\nprint(text_match_wordz(\"I love my cat\"))\nprint(text_match_wordz(\"I love my cat, because I love my zebra\"))\nprint(text_match_wordz(\"I am so glad I could find a friend who loves my zebra\"))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall('z',text)\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print('31')\n    else:\n        if monthnum2 == 2:\n            print('28')\n        else:\n            print('31')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(input(\"Please enter the month number: \"))\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        if monthnum == 1:\n            if len(str(monthnum)) == 1:\n                print(\"31 days in month\")\n            else:\n                print(\"31 days in month\")\n        elif monthnum == 3:\n            if len(str(monthnum)) == 1:\n                print(\"31 days in month\")\n            else:\n                print(\"31 days in month\")\n        elif monthnum == 5:\n            if len(str(monthnum)) == 1:\n                print(\"31 days in month\")\n            else:\n                print(\"31 days in month\")\n        elif monthnum == 7:\n            if len(str(monthnum)) == 1:\n                print(\"31 days in month\")\n            else:\n                print(\"31 days in month\")\n        elif monthnum == 8:\n            if len(str(monthnum)) == 1:\n                print(\"31 days in month\")\n            else:\n                print(\"31 days in month\")\n        elif monthnum == 10:\n            if len(str(monthnum)) == 1:\n                print(\"31 days in month\")\n            else:\n                print(\"31 days in month\")\n        elif monthnum == 12:\n            if len(str(monthnum)) == 1:\n                print(\"31 days in month\")\n            else:\n                print(\"31 days in month\")\n    else:\n        if len(str(monthnum)) == 1:\n            print(\"31 days in month\")\n        else:\n            print(\"31 days in month\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2>=1 and monthnum2<=12):\n        if(monthnum2==2):\n            if(year%4==0 and year%100!=0 or year%400==0):\n                if(monthnum2==2):\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        elif(monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n    \ndef day_of_week_number(day):\n    '''\n    Write a function to convert day number into the corresponding day of the week.\n    '''\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    for i in range(len(months)):\n        if day == 1:\n            return days_of_week[i]\n        else:\n            pass\ndef check_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year.\n    '''\n    if year%4 == 0:\n        if year%100 == 0:\n            if year%400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef convert_string_to_list(data):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    list_data = data.split(',')\n    return list_data\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8:\n            print(\"31\")\n        elif monthnum2==9 or monthnum2==10 or monthnum2==12:\n            print(\"30\")\n    elif monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n        print(\"29\")\n    else:\n        print(\"28\")\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(stringlist)):\n        new_list.append(stringlist[i][::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for index in range(len(stringlist)-1, -1, -1):\n        stringlist[index] = stringlist[index][::-1]\n        \n        \ndef delete_if_contains(stringlist, value):\n    '''\n    Write a function to delete all the items from the first list that contains the second.\n    '''\n    for index in range(len(stringlist)):\n        if value in stringlist[index]:\n            stringlist[index] = \"\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(stringlist)):\n        new_list.append(stringlist[i][::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # print(stringlist)\n    # # stringlist = list(stringlist)\n    # stringlist.reverse()\n    # return stringlist\n    \n    new_list = []\n    for i in range(len(stringlist)):\n        new_list.append(stringlist[i][::-1])\n    # print(new_list)\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #your code here\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse = []\n    for i in range(len(stringlist)-1, -1, -1):\n        reverse.append(stringlist[i])\n    return reverse\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    print(stringlist)\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    Min = lst[0]\n    i = 0\n    j = 1\n    while(j<len(lst)):\n        if(len(lst[j])<len(Min)):\n            Min = lst[j]\n            i = j\n        j += 1\n    return Min\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m = -1\n    for i in range(len(lst)):\n        if m == -1 or m < len(lst[i]):\n            m = len(lst[i])\n    return m\ndef first_n_occurrence(lst,n):\n    for i in range(len(lst)):\n        if n<=len(lst[i]):\n            break\n    return i\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    size = len(lst)\n    for i in range(size):\n        if lst[i]!= lst[size-1-i]:\n            return lst[i]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(lst[i])<len(lst[j]):\n                lst[i],lst[j]=lst[j],lst[i]\n    print(lst)\n    return lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_size=0\n    min_index=0\n    for i in range(1,len(lst)):\n        if lst[i]<lst[min_index]:\n            min_index=i\n    return lst[min_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i])<min_len:\n                min_len=len(lst[i])\n                min_len_sublist=lst[i]\n            elif len(lst[j])<min_len:\n                min_len=len(lst[j])\n                min_len_sublist=lst[j]\n    return min_len_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    MIN = 100\n    for i in range(len(lst)):\n        if len(lst[i]) < MIN:\n            MIN = len(lst[i])\n            MIN_INDEX = i\n    print(MIN_INDEX)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_len_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_len_index = i\n    return lst[min_len_index]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0]\n    pos = 0\n    for i in range(len(lst)):\n        if min_len > lst[i]:\n            min_len = lst[i]\n            pos = i\n    return lst[pos]\n    \nlst = [1,2,3,4,5,6,7,8,9,10,11]\nprint(Find_Min(lst))\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    n = len(lst)\n    for i in range(0,n):\n        if(i+1 < n and lst[i] == lst[i+1]):\n            return lst[i]\n    return lst[0]\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"The area of a rectangle with a base of {} and a length of {} is {}\".format(l,b,l*b))\n    \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(area)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Check if string starts with a capital letter\n    if str1[0].isupper():\n        return str1[0].lower() + str1[1:]\n    else:\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    no_upper = \"\"\n    for i in str1:\n        if i.islower():\n            no_upper += i\n    return no_upper\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    newstr = \"\"\n    for letter in str1:\n        if ord(letter) >= 65 and ord(letter) <= 90:\n            newstr += letter\n    return newstr\n    \ndef remove_negative(str1):\n    '''\n    Write a function to remove all negative integers from a given string.\n    '''\n    newstr = \"\"\n    for letter in str1:\n        if ord(letter) >= 0:\n            newstr += letter\n    return newstr\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]')\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i == 0 or i == len(str1)-1:\n            result += str1[i]\n        else:\n            if str1[i].islower() and str1[i+1].islower():\n                result += str1[i]\n            else:\n                result += str1[i]\n    return result\nprint(remove_uppercase(\"abc123ABC\"))\nprint(remove_uppercase(\"ABC123ABC\"))\nprint(remove_uppercase(\"Hello123@\"))\nprint(remove_uppercase(\"12345@\"))\nprint(remove_uppercase(\"Hello123@ABC123ABC\"))\nprint(remove_uppercase(\"HELLO123@ABC\"))\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1\n    new_str = \"\"\n    for i in str2:\n        if i.islower():\n            new_str = new_str+i\n        else:\n            continue\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub('[A-Z]', '', str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', \"\", str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    print(lst)\n    for i in range(len(lst)):\n        print(lst[i][0])\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    return[x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    retval = []\n    for i in range(0, len(lst)):\n        retval.append(lst[i][0])\n    return retval\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = ['2', '3', '4', '5']\n    fst = []\n    fst.append(lst[0])\n    for i in range(1, len(lst)):\n        fst.append(lst[i])\n    print(fst)\n    return fst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for lst in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for lst1 in lst:\n        print(lst1[0])\n        \ndef Div(a,b):\n    '''\n    Write a python function to get the quotient and the remainder of the given two numbers.\n    '''\n    quotient = a//b\n    remainder = a%b\n    print(quotient)\n    print(remainder)\n    \ndef test():\n    '''\n    Write a python program to demonstrate the use of lists.\n    '''\n    lst = [[1,2,3],['a','b','c'],[1,2,3,4]]\n    print(lst)\n    Extract(lst)\n    Div(10,4)\n    \ntest()"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(lst[i][0])\n    return new_list\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if lst == None:\n        return []\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if str[i].isupper():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    uppercount = 0\n    for i in range(len(str)):\n        if str[i] == str[i].upper():\n            uppercount = uppercount + 1\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(\"Number of Upper Case characters in given string: \", count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Define a variable to keep track of the count of uppercase characters\n    count = 0\n    # Iterate through each character in the string\n    for i in str:\n        # If the current character is an uppercase character, increment the count variable\n        if i.isupper():\n            count += 1\n    # Return the count variable\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    print(upper_count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    print(count)\n        \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.islower():\n            count+=1\n    print(count)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if list1 == []:\n        return []\n    \n    if len(list1) == 1:\n        return [list1]\n    \n    result = []\n    for i in range(len(list1)):\n        for r in combinations_list(list1[i+1:]):\n            result.append([list1[i]]+r)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 1:\n        return []\n    list1.sort()\n    length = len(list1)\n    combo = []\n    for i in range(1, length + 1):\n        combo.extend(itertools.combinations(list1, i))\n    return combo\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    for i in range(0, len(list1)):\n        temp = list1[i]\n        for j in range(i+1, len(list1)):\n            temp2 = list1[j]\n            for k in range(j+1, len(list1)):\n                temp3 = list1[k]\n                comb.append(temp+temp2+temp3)\n    return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        for i in range(len(list1)):\n            temp = list1[i]\n            rem = list1[0:i] + list1[i+1:]\n            for j in combinations_list(rem):\n                list2.append([temp] + j)\n    return list2\n    \n    \ndef combinations_list_with_duplicates(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list, with duplicates allowed.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        temp = list1.copy()\n        temp.pop(0)\n        for i in range(len(temp)):\n            temp1 = temp.copy()\n            temp1.pop(i)\n            for j in combinations_list_with_duplicates(temp1):\n                list2 = []\n                list2.append(list1[i])\n                list2.append(list1[0])\n                list2.extend(j)\n                list2.sort()\n                yield list2\n    \n    \ndef combinations_of_strings(list1):\n    '''\n    Write a function to find all possible combinations of the characters of a given string.\n    '''\n    list2 = []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        for i in range(len(list1)):\n            temp = list1[i]\n            rem = list1[0:i] + list1[i+1:]\n            for j in combinations_of_strings(rem):\n                for k in range(len(j)):\n                    list2.append([temp, j[k]])\n        return list2\n    \n    \ndef combinations_of_strings_with_duplicates(list1):\n    '''\n    Write a function to find all possible combinations of the characters of a given string, with duplicates allowed.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        temp = list1.copy()\n        temp.pop(0)\n        for i in range(len(temp)):\n            temp1 = temp.copy()\n            temp1.pop(i)\n            for j in combinations_of_strings_with_duplicates(temp1):\n                list2 = []\n                list2.append(list1[i])\n                list2.append(list1[0])\n                list2.extend(j)\n                list2.sort()\n                yield list2\n    \n    \ndef smallest_positive_integer_from_list(list1):\n    '''\n    Write a function to find the smallest positive integer from a given list.\n    '''\n    if list1 == []:\n        return None\n    if list1[0] > 0:\n        return list1[0]\n    else:\n        return smallest_positive_integer_from_list(list1[1:])\n    \n    \ndef smallest_positive_integer_from_list_with_duplicates(list1):\n    '''\n    Write a function to find the smallest positive integer from a given list, with duplicates allowed.\n    '''\n    if list1 == []:\n        return None\n    if list1[0] > 0:\n        return [list1[0]]\n    else:\n        return smallest_positive_integer_from_list_with_duplicates(list1[1:]) + smallest_positive_integer_from_list_with_duplicates(list1[1:])\n    \n    \ndef find_duplicate_in_list(list1):\n    '''\n    Write a function to find a duplicate number from a given list.\n    '''\n    if len(list1) == 1:\n        return None\n    else:\n        for i in range(len(list1)):\n            if list1[i] == list1[i+1]:\n                return list1[i]\n    \n    \ndef find_duplicate_in_list_with_duplicates(list1):\n    '''\n    Write a function to find a duplicate number from a given list, with duplicates allowed.\n    '''\n    if len(list1) == 1:\n        return None\n    else:\n        for i in range(len(list1)):\n            if list1[i] == list1[i+1]:\n                return list1[i]\n            else:\n                return find_duplicate_in_list_with_duplicates(list1[0:i] + list1[i+2:])\n    \n    \ndef max_product_from_three_numbers(list1):\n    '''\n    Write a function to find the maximum product from three given numbers.\n    '''\n    if len(list1)!= 3:\n        return None\n    else:\n        return max(list1[0] * list1[1] * list1[2], list1[0] * list1[2] * list1[1])\n    \n    \ndef max_product_from_three_numbers_with_duplicates(list1):\n    '''\n    Write a function to find the maximum product from three given numbers, with duplicates allowed.\n    '''\n    if len(list1)!= 3:\n        return None\n    else:\n        return max([list1[0] * list1[1] * list1[2], list1[0] * list1[2] * list1[1], list1[0] * list1[1] * list1[2]])\n    \n    \ndef find_element_that_occurs_only_once(list1):\n    '''\n    Write a function to find the element in a given list that occurs only once.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        for i in range(len(list1)):\n            temp = list1.copy()\n            temp.pop(i)\n            if len(temp) == 1:\n                return list1[0]\n    \n    \ndef find_element_that_occurs_only_once_with_duplicates(list1):\n    '''\n    Write a function to find the element in a given list that occurs only once, with duplicates allowed.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        for i in range(len(list1)):\n            temp = list1.copy()\n            temp.pop(i)\n            if len(temp) == 1:\n                return list1[0]\n            else:\n                return find_element_that_occurs_only_once_with_duplicates(temp)\n    \n    \ndef print_first_and_last_element_of_a_list(list1):\n    '''\n    Write a function to print the first and last element of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        return [list1[0], list1[len(list1)-1]]\n    \n    \ndef print_first_and_last_element_of_a_list_with_duplicates(list1):\n    '''\n    Write a function to print the first and last element of a given list, with duplicates allowed.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        if len(list1) == 1:\n            return [[list1[0], list1[0]]]\n        else:\n            temp = list1.copy()\n            temp.pop(0)\n            temp.pop(len(list1)-1)\n            return [[list1[0], list1[len(list1)-1]]] + print_first_and_last_element_of_a_list_with_duplicates(temp)\n    \n    \ndef print_nth_element_of_a_list(list1, n):\n    '''\n    Write a function to print the nth element of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        if n == 1:\n            return list1[0]\n        else:\n            return print_nth_element_of_a_list(list1"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # return [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3],\n    #         [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3],\n    #         [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2],\n    #         [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2],\n    #         [5, 1, 2, 3], [5, 1, 3, 2], [5, 2, 1, 3], [5, 2, 3, 1], [5, 3, 1, 2],\n    #         [6, 1, 2, 3], [6, 1, 3, 2], [6, 2, 1, 3], [6, 2, 3, 1], [6, 3, 1, 2],\n    #         [7, 1, 2, 3], [7, 1, 3, 2], [7, 2, 1, 3], [7, 2, 3, 1], [7, 3, 1, 2]]\n    a = []\n    for i in range(0, len(list1) + 1):\n        l = []\n        for j in range(0, len(list1) + 1):\n            l.append(list1[i:j])\n        a.append(l)\n    return a\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #if the input list is empty, then return an empty list\n    if len(list1) == 0:\n        return []\n    #if the input list is one element, then return a list of the element itself\n    if len(list1) == 1:\n        return [list1]\n    #the combinations are found by recursion\n    comb = combinations_list(list1[1:])\n    #when the recursion terminates, add the element to the list\n    comb.append(list1[0])\n    #return the combined list\n    return comb\n    \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    if not list1:\n        return []\n    \n    return [[list1[0]] + i for i in combinations_list(list1[1:])] + combinations_list(list1[1:])\n    \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    if len(list1) == 0:\n        return res\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        temp = combinations_list(list1[1:])\n        for item in temp:\n            res.append([list1[0]] + item)\n        res.extend(temp)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    combs = []\n    for i in range(0, len(list1)):\n        temp = []\n        temp.append(list1[i])\n        for j in range(i+1, len(list1)):\n            temp.append(list1[j])\n            combs.append(temp)\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # base case\n    if len(list1)==0:\n        return [[]]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -1\n    start = 0\n    end = 0\n    \n    for i in range(len(arr)):\n        \n        if arr[i] < 0:\n            \n            if max_product < 0:\n                max_product = arr[i]\n                start = i\n            \n            else:\n                max_product = max(max_product, arr[i])\n                \n            end = i\n            \n    return arr[start: end+1]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_p = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_p = max(max_p, arr[i] * arr[j])\n    return max_p\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    curr_min = arr[0]\n    curr_max = arr[0]\n    curr_max_prod = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    n = len(arr)\n    max_product = max(max_product, _max_sub_array(arr, 0, n - 1, max_product))\n    print(max_product)\n    \ndef _max_sub_array(arr, left, right, max_product):\n    '''\n    Returns max product subarray in arr from left to right index inclusive.\n    '''\n    if left == right:\n        return arr[left]\n    max_product_current = arr[left]\n    max_product_previous = float('-inf')\n    max_product_total = float('-inf')\n    for i in range(left + 1, right + 1):\n        max_product_current = max(max_product_current * arr[i], arr[i])\n        max_product_total = max(max_product_total, max_product_current)\n        max_product_previous = max(max_product_previous, max_product_total * arr[i - 1])\n    return max_product_total\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    curr_max = 1\n    curr_min = 1\n    for num in arr:\n        curr_min = min(num, curr_min * num)\n        curr_max = max(num, curr_max * num)\n        max_product = max(curr_max, max_product)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_product = 0\n    curr_product = 1\n    for i in range(0, len(arr)):\n        curr_product = arr[i]\n        if i!= 0:\n            curr_product *= arr[i - 1]\n        max_product = curr_product if curr_product > max_product else max_product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Run on empty array\n    if not arr:\n        return 0\n    # Run on 1 element array\n    if len(arr) == 1:\n        return arr[0]\n    # Find the largest subarray\n    sub_product = arr[0]\n    for i in range(1, len(arr)):\n        sub_product = max(arr[i], sub_product * arr[i])\n    return sub_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # let's define a function to find the maximum product subarray\n    # based on the minimum product subarray function\n    def max_subarray_product_mul(arr):\n        # let's define a dictionary to store the maximum products found\n        # during the subarray search\n        max_products = {\n            \"min_product\" : None,\n            \"max_product\" : None\n        }\n        # let's define a function to find the maximum product subarray\n        # using the minimum product subarray function\n        def max_product_subarray(arr):\n            # let's define an empty dictionary to store the minimum products\n            # found during the subarray search\n            min_products = {\n                \"min_product\" : None,\n                \"max_product\" : None\n            }\n            # let's define a variable to store the minimum product\n            min_product = arr[0]\n            # let's define a variable to store the maximum product\n            max_product = arr[0]\n            # let's define a variable to store the maximum product subarray\n            max_product_subarray = []\n            # let's define a variable to store the minimum product subarray\n            min_product_subarray = []\n            # let's define a variable to store the subarray start and end\n            # index\n            sub_array_start = 0\n            sub_array_end = 0\n            # let's define a variable to store the current subarray length\n            sub_array_length = 1\n            # let's define a variable to store the current max_product\n            current_max_product = 0\n            # let's define a variable to store the current min_product\n            current_min_product = 0\n            # let's define a variable to store the current max_product subarray\n            current_max_product_subarray = []\n            # let's define a variable to store the current min_product subarray\n            current_min_product_subarray = []\n            # let's define a variable to store the products\n            products = {\n                \"max_product\" : None,\n                \"min_product\" : None\n            }\n            # let's define a variable to store the subarray products\n            subarray_products = {\n                \"max_product\" : None,\n                \"min_product\" : None\n            }\n            # let's define a variable to store the subarray products\n            subarray_min_products = {\n                \"max_product\" : None,\n                \"min_product\" : None\n            }\n            # let's define a variable to store the subarray products\n            subarray_max_products = {\n                \"max_product\" : None,\n                \"min_product\" : None\n            }\n            # let's define a variable to store the subarray products\n            subarray_min_products_length = {\n                \"max_product\" : None,\n                \"min_product\" : None\n            }\n            # let's define a variable to store the subarray products\n            subarray_max_products_length = {\n                \"max_product\" : None,\n                \"min_product\" : None\n            }\n            # let's define a variable to store the length of the array\n            array_length = len(arr)\n            # let's define a variable to store the length of the subarray\n            sub_array_length = 1\n            # let's define a variable to store the products\n            products[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            products[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            products[\"subarray_max_product\"] = arr[0]\n            # let's define a variable to store the products\n            products[\"subarray_min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_products[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_products[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_products[\"subarray_max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_products[\"subarray_min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_min_products[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_min_products[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_max_products[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_max_products[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_min_products_length[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_min_products_length[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_max_products_length[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_max_products_length[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            products[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            products[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            products[\"subarray_max_product\"] = arr[0]\n            # let's define a variable to store the products\n            products[\"subarray_min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_products[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_products[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_products[\"subarray_max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_products[\"subarray_min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_min_products[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_min_products[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_max_products[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_max_products[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_min_products_length[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_min_products_length[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_max_products_length[\"max_product\"] = arr[0]\n            # let's define a variable to store the products\n            subarray_max_products_length[\"min_product\"] = arr[0]\n            # let's define a variable to store the products\n            max_product = arr[0]\n            # let's define a variable to store the products\n            min_product = arr[0]\n            # let's define a variable to store the products\n            max_product_subarray = []\n            # let's define a variable to store the products\n            min_product_subarray = []\n            # let's define a variable to store the products\n            max_product_subarray_length = {\n                \"max_product\" : None,\n                \"min_product\" : None\n            }\n            # let's define a variable to store the products\n            min_product_subarray_length = {\n                \"max_product\" : None,\n                \"min_product\" : None\n            }\n            # let's define a variable to store the products\n            max_product_subarray_length[\"max_product\"] = max_product\n            # let's define a variable to store the products\n            max_product_subarray_length[\"min_product\"] = min_product\n            # let's define a variable to store the products\n            min_product_subarray_length[\"max_product\"] = max_product\n            # let's define a variable to store the products\n            min_product_subarray_length[\"min_product\"] = min"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None:\n        return\n    if len(arr) == 0:\n        return None\n    max_product = arr[0]\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        max_product = max(arr[i],max_product * arr[i-1])\n        if max_product > arr[i]:\n            return max_product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -math.inf\n    left_idx = -1\n    right_idx = -1\n    current_product = 0\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = arr[i]\n        else:\n            current_product = current_product * arr[i]\n        if current_product > max_product:\n            max_product = current_product\n            left_idx = i\n    current_product = 1\n    for i in range(len(arr)-1, -1, -1):\n        if current_product < 0:\n            current_product = arr[i]\n        else:\n            current_product = current_product * arr[i]\n        if current_product > max_product:\n            max_product = current_product\n            right_idx = i\n    return max_product, left_idx, right_idx\n    \ndef max_subarray_product_brute_force(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    This is a brute force approach\n    '''\n    max_product = -math.inf\n    left_idx = -1\n    right_idx = -1\n    current_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            current_product = arr[i:j+1]\n            if max_product < max(current_product):\n                max_product = max(current_product)\n                left_idx = i\n                right_idx = j\n    return max_product, left_idx, right_idx\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    for i in range(n):\n        if dict[i]!= dict[0]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    return len(values) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if i!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0 or len(dict) > 1:\n        return False\n    if len(dict) == 1 and dict[0]!= n:\n        return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict.values().count(n) == len(dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!=0:\n        if len(dict.keys())>0:\n            if len(dict.keys())==len(dict.values()):\n                return True\n        return False\n    else:\n        return False\n    \ndef check_keys(dict):\n    '''\n    Write a function to check if all keys of a dictionary are same.\n    '''\n    if len(dict)!=0:\n        if len(dict.keys())==len(dict.values()):\n            return True\n    return False\n    \ndef check_set(s):\n    '''\n    Write a function to check if all elements of a set are same.\n    '''\n    if len(s)!=0:\n        if len(s)==len(set(s)):\n            return True\n    return False\n    \ndef check_string(s):\n    '''\n    Write a function to check if all the characters of a string are same.\n    '''\n    if len(s)!=0:\n        if len(s)==len(set(s)):\n            return True\n    return False\n    \ndef check_structure(data):\n    '''\n    Write a function to check if all the elements of a structure have a common parent.\n    '''\n    if len(data)>0:\n        if len(data.keys())==len(data.values()):\n            return True\n    return False\n    \ndef check_files(files):\n    '''\n    Write a function to check if all the elements of a list are files.\n    '''\n    if len(files)!=0:\n        for i in files:\n            if isinstance(i, str) and i.endswith(\".txt\"):\n                continue\n            else:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if i!= dict[i]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict[n] == dict.values()[0]\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #dict1 = {'Name': 'Raju', 'Age': 30, 'Id': 1, 'RollNo': 1}\n    #dict1 = {'Name': 'Raju', 'Age': 30, 'Id': 1, 'RollNo': 1, 'Marks': 85}\n    #dict1 = {'Name': 'Raju', 'Age': 30, 'Id': 1, 'RollNo': 1, 'Marks': [90, 78, 89]}\n    #dict1 = {'Name': 'Raju', 'Age': 30, 'Id': 1, 'RollNo': 1, 'Marks': {'Maths': 70, 'Science': 100}}\n    #dict1 = {'Name': 'Raju', 'Age': 30, 'Id': 1, 'RollNo': 1, 'Marks': {'Maths': 70, 'Science': 100, 'Total': 80}}\n    #dict1 = {'Name': 'Raju', 'Age': 30, 'Id': 1, 'RollNo': 1, 'Marks': {'Maths': 70, 'Science': 100, 'Total': 80, 'Hindi': 69}}\n    #dict1 = {'Name': 'Raju', 'Age': 30, 'Id': 1, 'RollNo': 1, 'Marks': {'Maths': 70, 'Science': 100, 'Total': 80, 'Hindi': 69, 'English': 78}}\n    #dict1 = {'Name': 'Raju', 'Age': 30, 'Id': 1, 'RollNo': 1, 'Marks': {'Maths': 70, 'Science': 100, 'Total': 80, 'Hindi': 69, 'English': 78, 'Urdu': 86}}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in list(dict1.values()):\n        if i == '':\n            dict1.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # your code here\n    \n    if dict1 is None:\n        return None\n    else:\n        return dict(filter(None, dict1.items()))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    keys_to_drop = []\n    for key,value in dict1.items():\n        if not value:\n            keys_to_drop.append(key)\n    for key in keys_to_drop:\n        del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    print(f'Keys in the dictionary before calling the function are {dict1.keys()}')\n    dict1 = dict((k,v) for k, v in dict1.items() if v)\n    print(f'Keys in the dictionary after calling the function are {dict1.keys()}')\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # key = [key for key in dict1 if dict1[key]]\n    # dict1.pop(key)\n    # for k,v in dict1.items():\n    #     if v=='':\n    #         dict1.pop(k)\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) == 0:\n        return {}\n    else:\n        return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict(filter(lambda x: x[1], dict1.items()))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value!= ''}\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = -1\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not isinstance(arr,list):\n        raise TypeError(\"Invalid Input\")\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    min_num = min(arr)\n    max_num = max(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_prod = max(max_prod,arr[i]*arr[j])\n    return max_prod\n    # return arr[0] * arr[1] * arr[-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    arr = [1] + sorted(arr)\n    n = len(arr)\n    max_prod = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            max_prod = max(max_prod, arr[i] * arr[j])\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = -99999\n    min_prod = -99999\n    curr_prod = 1\n    for i in range(len(arr)):\n        if arr[i] > max_prod:\n            max_prod = arr[i]\n            \n        if arr[i] < min_prod:\n            min_prod = arr[i]\n            \n        curr_prod *= arr[i]\n    return max_prod * min_prod, max_prod, min_prod, curr_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    max_product = 1\n    for i in range(n):\n        if arr[i] == 0:\n            continue\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            if current_product > max_product:\n                max_product = current_product\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_val = 1\n    min_val = 1\n    max_val = max(max_val,min_val)\n    for i in range(len(arr)):\n        max_val = max(max_val,arr[i] * min_val)\n        min_val = min(min_val,arr[i] * max_val)\n    return max_val\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = arr[0]\n    for i in range(1, n):\n        max_prod = max(max_prod * arr[i], arr[i])\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    assert len(arr) >= 2\n    if len(arr) == 2:\n        return max(arr)\n    if len(arr) == 3:\n        return max(arr[0] * arr[1], arr[0] * arr[2], arr[1] * arr[2])\n    \n    dp = [[0 for i in range(len(arr))] for j in range(3)]\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    dp[2] = max(arr[0], arr[1], arr[2])\n    for i in range(3, len(arr)):\n        dp[0][i] = max(arr[i], dp[0][i - 1] * arr[i], dp[1][i - 2] * arr[i])\n        dp[1][i] = max(arr[i], dp[0][i - 1] * arr[i], dp[2][i - 2] * arr[i])\n        dp[2][i] = max(arr[i], dp[0][i - 1] * arr[i], dp[1][i - 2] * arr[i])\n    \n    return max(dp[0][len(arr) - 1], dp[1][len(arr) - 2], dp[2][len(arr) - 3])\n    \ndef max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    assert len(arr) >= 2\n    if len(arr) == 2:\n        return max(arr)\n    if len(arr) == 3:\n        return max(arr[0] * arr[1], arr[0] * arr[2], arr[1] * arr[2])\n    \n    dp = [[0 for i in range(len(arr))] for j in range(3)]\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    dp[2] = max(arr[0], arr[1], arr[2])\n    for i in range(3, len(arr)):\n        dp[0][i] = max(arr[i], dp[0][i - 1] * arr[i], dp[1][i - 2] * arr[i])\n        dp[1][i] = max(arr[i], dp[0][i - 1] * arr[i], dp[2][i - 2] * arr[i])\n        dp[2][i] = max(arr[i], dp[0][i - 1] * arr[i], dp[1][i - 2] * arr[i])\n    \n    return max(dp[0][len(arr) - 1], dp[1][len(arr) - 2], dp[2][len(arr) - 3])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    num_list = []\n    for i in range(len(test_tup)-1):\n        num_list.append(test_tup[i]+test_tup[i+1])\n    num_list.append(test_tup[len(test_tup)-1] + test_tup[0])\n    return tuple(num_list)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    first_num = test_tup[0]\n    second_num = test_tup[1]\n    result = []\n    if first_num < second_num:\n        result.append(first_num+second_num)\n    else:\n        result.append(first_num-second_num)\n    if first_num > second_num:\n        result.append(first_num-second_num)\n    else:\n        result.append(first_num+second_num)\n    if first_num < second_num:\n        result.append(first_num+second_num)\n    else:\n        result.append(first_num-second_num)\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = list(test_tup)\n    # To store the sum of elements\n    sum_list = []\n    for i in range(len(tup)-1):\n        sum_list.append(tup[i]+tup[i+1])\n    print(sum_list)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    arr = list(test_tup)\n    n = len(arr)\n    new_arr = []\n    for i in range(n):\n        if i > 0:\n            new_arr.append(arr[i] + arr[i-1])\n        else:\n            new_arr.append(arr[i])\n    return tuple(new_arr)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #get length of tuple\n    len_tup = len(test_tup)\n    #convert tuple into list\n    test_list = list(test_tup)\n    #set counter for idx, add to each tuple by index\n    idx_counter = 0\n    #create variable for first item\n    first_element = test_list[idx_counter]\n    #create variable for second item\n    second_element = test_list[idx_counter + 1]\n    #add first element to second\n    total_sum = first_element + second_element\n    #add to list of tuples\n    test_list.append(total_sum)\n    #return new tuple\n    return tuple(test_list)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    numbers = list(test_tup)\n    x=1\n    while x<=len(numbers):\n        a = numbers[x-1] + numbers[x]\n        numbers.append(a)\n        x=x+1\n    return tuple(numbers)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Base case\n    if len(test_tup) < 2:\n        return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple([i+j for i,j in zip(test_tup,test_tup[1:]+[0])])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup = test_tup[0]\n    test_tup = (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2])\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup\n    if len(a) < 2:\n        return\n    for i in range(len(a) - 1):\n        a[i] = a[i] + a[i+1]\n    print('Pairwise addition of elements is {}'.format(a))\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize result\n    result = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Sort the array.\n    arr.sort() \n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    return (prod) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def multiply_array(arr):\n        product = 1\n        for i in range(len(arr)):\n            product *= arr[i]\n        return product\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # getting the product of all the values in array\n    prod = 1\n    for i in range(0, n):\n        prod *= arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    mult = 1\n    sum = 0\n    for i in range(n):\n        mult *= arr[i]\n        sum += mult\n        if sum > n:\n            sum -= mult\n    return sum\n    \ndef find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    mult = 1\n    sum = 0\n    for i in range(n):\n        mult *= arr[i]\n    for i in range(n):\n        sum += mult\n        if sum > n:\n            sum -= mult\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return sum([i*i for i in arr]) % n\n    \narr = [1, 2, 3]\nn = 9\nprint(\"Product of the multiplication of the array using list comprehension = \", find_remainder(arr, n))\n    \ndef find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return int((reduce(lambda x,y: x*y, arr)) % n)\n    \narr = [1, 2, 3]\nn = 9\nprint(\"Product of the multiplication of the array using reduce() = \", find_remainder(arr, n))\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # p = 1\n    # for i in arr:\n    #     p *= i\n    # return p % n\n    # alternatively, can use list comprehension\n    return reduce(lambda x,y: x*y % n, arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    t = 1\n    for i in range(n):\n        t = t * arr[i]\n    return t\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    return product % n\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = False\n    for i in range(1, len(l)):\n        if (l[i - 1] + 1) == l[i]:\n            consecutive = True\n        else:\n            consecutive = False\n    return consecutive\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if l[i] == l[i+1]:\n            return 1\n    return 0\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == len(set(l)):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # a1 = set(l)\n    # b1 = ''.join(a1)\n    # print(b1)\n    a = set(l)\n    b = ''.join(a)\n    # print(b)\n    if b == b[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n    "
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) > 2:\n        if l[1]-l[0] == l[2]-l[1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # your code here\n    i = 0\n    while(i < len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return None\n    temp = l[0]\n    count = 1\n    for i in range(1, len(l)):\n        if temp + 1 == l[i]:\n            count += 1\n        else:\n            if count == 1:\n                count = 0\n            else:\n                return False\n        temp = l[i]\n    if count == 1:\n        count = 0\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    if l == []:\n        return False\n    \n    i = 0\n    n = len(l)\n    while i < n-1:\n        if l[i] + 1!= l[i+1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0, len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\nprint('check_Consecutive: ', check_Consecutive([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #using set and list comprehension \n    #ans = False if len(set([i for i in l if l.count(i)==1]))!=0 else True\n    \n    #using list comprehension\n    #ans = True if len(list(set([i for i in l if l.count(i)==1])))!=0 else False\n    \n    #using for loop and if condition\n    \n    #ans = True if any([True if l.count(i)==1 else False for i in l]) else False\n    \n    #using in operator\n    #ans = True if any([(i in l) and (l.count(i)==1) for i in l]) else False\n    \n    #using list comprehencion\n    #ans = True if any([i in l for i in l if l.count(i)==1]) else False\n    \n    #using lambda\n    #ans = True if any([True if lambda x: x in l and l.count(x)==1 else False for i in l]) else False\n    \n    return ans\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tup_set1 = set(test_list1)\n    tup_set2 = set(test_list2)\n    return tup_set1 & tup_set2\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # your code here\n    return\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = list(test_list1)\n    test_list2 = list(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    final_list = []\n    for item in test_list1:\n        if item in test_list2 and item not in final_list:\n            final_list.append(item)\n    return final_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    intersection = []\n    # creating a hashmap with empty values\n    hashmap = {}\n    \n    # iterating through test_list1\n    for i in test_list1:\n        # if already present in the map add it\n        if i in hashmap:\n            hashmap[i] += 1\n        # else, add it as a new key\n        else:\n            hashmap[i] = 1\n    \n    # iterating through test_list2\n    for j in test_list2:\n        # if already present in the map add it\n        if j in hashmap:\n            intersection.append(j)\n            hashmap[j] += 1\n        # else, add it as a new key\n        else:\n            intersection.append(j)\n            hashmap[j] = 1\n    \n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            tuple_intersection.append(item)\n    return tuple_intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_set = set(test_list1)\n    test_list2_set = set(test_list2)\n    return tuple(test_list1_set.intersection(test_list2_set))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    set_intersection = set1 & set2\n    return set_intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) < len(test_list2):\n        return tuple(set(test_list1).intersection(*test_list2))\n    else:\n        return tuple(set(test_list2).intersection(*test_list1))\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    \n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,'')\n    return str2 + newch\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    list1=list(str1)\n    if ch in list1:\n        i=list1.index(ch)\n        list1[i]=newch\n    str2=\"\".join(list1)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \nprint(replace_char('The quick brown fox jumps over the lazy dog.','e','o'))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # print(sorted(dict1.items(), key=lambda x: x[1]))\n    \n    # print(sorted(dict1.items(), key=lambda x: x[0]))\n    \n    # print(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    \n    # print(sorted(dict1.items(), key=lambda x: (x[0], -x[1])))\n    \n    # print(sorted(dict1.items(), key=lambda x: (x[0], -x[1])))\n    # d = {'a': 2, 'b': 3, 'd': 4, 'f': 1}\n    # d = {'a': 5, 'b': 1, 'd': 4, 'f': 3}\n    d = {'a': 5, 'b': 1, 'd': 4, 'f': 3}\n    # print(sorted(d.items(), key=lambda x: (x[0], -x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[1], -x[0])))\n    # print(sorted(d.items(), key=lambda x: x[1], reverse=True))\n    # print(sorted(d.items(), key=lambda x: x[0], reverse=True))\n    # print(sorted(d.items(), key=lambda x: x[1]))\n    # print(sorted(d.items(), key=lambda x: x[1], reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1]), reverse=True))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1]), reverse=True))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1]), reverse=True))\n    \n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1]), reverse=True))\n    \n    \n    # d = {'a': 2, 'b': 3, 'd': 4, 'f': 1}\n    # print(sorted(d.items(), key=lambda x: x[0]))\n    # print(sorted(d.items(), key=lambda x: x[1]))\n    # d = {'a': 5, 'b': 1, 'd': 4, 'f': 3}\n    # print(sorted(d.items(), key=lambda x: x[1]))\n    # print(sorted(d.items(), key=lambda x: x[0]))\n    # d = {'a': 5, 'b': 1, 'd': 4, 'f': 3}\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # d = {'a': 5, 'b': 1, 'd': 4, 'f': 3}\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1]), reverse=True))\n    # d = {'a': 5, 'b': 1, 'd': 4, 'f': 3}\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    # d = {'a': 5, 'b': 1, 'd': 4, 'f': 3}\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0])))\n    # print(sorted(d.items(), key=lambda x: (x[1], x[0]), reverse=True))\n    # d = {'a': 5, 'b': 1, 'd': 4, 'f': 3}\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1]), reverse=True))\n    # d = {'a': 5, 'b': 1, 'd': 4, 'f': 3}\n    # print(sorted(d.items(), key=lambda x: (x[0], x[1])))\n    # print(sorted(d.items(), key=lambda x"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda kv: kv[1])\nprint(sort_counter({1: 5, 2: 3, 3: 5, 4: 5}))\nprint(sort_counter({1: 1, 3: 1, 2: 2}))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return new_dict\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return new_dict"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys = list(dict1.keys())\n    keys.sort(key=lambda x: dict1[x], reverse=True)\n    return keys\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # sort_keys=sorted(dict1.keys(), key=lambda k: dict1[k], reverse=True)\n    sort_keys = sorted(dict1.keys(), key=lambda k: (dict1[k], k), reverse=True)\n    return sort_keys\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Your code here\n    return sorted(dict1, key=lambda k: dict1[k], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    cnt = Counter(dict1)\n    a = sorted(cnt.items(), key=lambda x: x[1], reverse=True)\n    return a\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_v = max(nums)\n    min_v = min(nums)\n    return max_v+min_v\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = float('-inf')\n    min_value = float('inf')\n    for num in nums:\n        if num > max_value:\n            max_value = num\n        elif num < min_value:\n            min_value = num\n    return max_value + min_value\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max + min\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_largest = 0\n    sum_smallest = 0\n    for i in nums:\n        if i > sum_largest:\n            sum_largest = i\n        if i < sum_smallest:\n            sum_smallest = i\n    print(sum_largest, sum_smallest)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = sorted(nums, reverse=True)\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort(reverse=True)\n    sum_nums = 0\n    for x in range(0, len(nums)):\n        if x == len(nums) - 1:\n            sum_nums += nums[x]\n        else:\n            sum_nums += nums[x] + nums[x+1]\n    return sum_nums\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    max_idx = 0\n    min_idx = 0\n    for i in range(1, len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n            max_idx = i\n        if nums[i] < min:\n            min = nums[i]\n            min_idx = i\n    \n    return max + min\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = \"\"\n    for i in string:\n        if i.isupper():\n            new_string += i.lower()\n        else:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lowercase = ''\n    for i in string:\n        if i.isupper():\n            i = i.lower()\n        lowercase += i\n    return lowercase\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    #Convert string into lower case\n    return string.lower()\n    \ndef count_upper_lower(string):\n    '''\n    Write a python function to count the no. of upper case and lower case characters in a string.\n    '''\n    \n    #Count upper and lower case characters\n    return string.count('a') + string.count('A')\n    \ndef replace_space(string):\n    '''\n    Write a python function to replace spaces with %20 in a given string.\n    '''\n    \n    #Replace spaces with %20 in a given string\n    return string.replace(' ', '%20')\n    \ndef remove_space(string):\n    '''\n    Write a python function to remove all spaces in a given string.\n    '''\n    \n    #Remove all spaces from a given string\n    return string.replace(' ','')\n    \ndef max_length_word(string):\n    '''\n    Write a python function to find the longest word in a string.\n    '''\n    \n    #Find longest word in a string\n    return max(string.split(), key=len)\n    \ndef print_alphabetical_order(string):\n    '''\n    Write a python function to print the alphabetical order of a string.\n    '''\n    \n    #Print alphabetical order of a string\n    return ''.join(sorted(string))\n    \ndef reverse_string(string):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    \n    #Reverse the string\n    return string[::-1]\n    \ndef reverse_string_recursive(string):\n    '''\n    Write a python function to reverse the given string using recursion.\n    '''\n    \n    #Reverse the string\n    return ''.join(reversed(string))\n    \ndef reverse_string_while(string):\n    '''\n    Write a python function to reverse the given string using while loop.\n    '''\n    \n    #Reverse the string\n    string = list(string)\n    while string:\n        string.append(string.pop())\n    return ''.join(string)\n    \ndef swap_string(string):\n    '''\n    Write a python function to swap the first and last characters in a string.\n    '''\n    \n    #Swap the first and last characters in a string\n    return string[-1] + string[1:-1] + string[0]\n    \ndef swap_string_recursive(string):\n    '''\n    Write a python function to swap the first and last characters in a string using recursion.\n    '''\n    \n    #Swap the first and last characters in a string using recursion\n    if len(string) < 2:\n        return string\n    else:\n        return swap_string_recursive(string[1:-1] + string[0])\n    \ndef swap_string_while(string):\n    '''\n    Write a python function to swap the first and last characters in a string using while loop.\n    '''\n    \n    #Swap the first and last characters in a string using while loop\n    string = list(string)\n    while len(string) > 1:\n        string[0], string[-1] = string[-1], string[0]\n        string = string[1:-1]\n    return ''.join(string)\n    \ndef replace_substring(string, sub_string, replace_with):\n    '''\n    Write a python function to replace a sub-string in a given string.\n    '''\n    \n    #Replace sub-string in a string\n    string = string.replace(sub_string, replace_with)\n    return string\n    \ndef replace_substring_while(string, sub_string, replace_with):\n    '''\n    Write a python function to replace a sub-string in a given string using while loop.\n    '''\n    \n    #Replace sub-string in a string using while loop\n    string = list(string)\n    count = 0\n    while count < len(string):\n        if sub_string == string[count]:\n            string[count] = replace_with\n            count += 1\n        else:\n            count += 1\n    return ''.join(string)\n    \ndef replace_substring_while_if(string, sub_string, replace_with, if_condition):\n    '''\n    Write a python function to replace a sub-string in a given string using while loop and if condition.\n    '''\n    \n    #Replace sub-string in a string using while loop and if condition\n    string = list(string)\n    count = 0\n    while count < len(string):\n        if sub_string == string[count]:\n            if if_condition:\n                string[count] = replace_with\n                count += 1\n            else:\n                count += 1\n        else:\n            count += 1\n    return ''.join(string)\n    \ndef reverse_string_while_if(string, if_condition):\n    '''\n    Write a python function to reverse the given string using while loop and if condition.\n    '''\n    \n    #Reverse the string using while loop and if condition\n    string = list(string)\n    count = 0\n    while count < len(string):\n        if if_condition:\n            string[count] = string[len(string) - 1 - count]\n            count += 1\n        else:\n            count += 1\n    return ''.join(string)\n    \ndef compute_string_list_sum(string_list):\n    '''\n    Write a python function to compute the sum of numbers in a list of strings.\n    '''\n    \n    #Compute the sum of numbers in a list of strings\n    total = 0\n    for ele in string_list:\n        total += int(ele)\n    return total\n    \ndef compute_string_list_sum_while(string_list):\n    '''\n    Write a python function to compute the sum of numbers in a list of strings using while loop.\n    '''\n    \n    #Compute the sum of numbers in a list of strings using while loop\n    total = 0\n    for ele in string_list:\n        total += int(ele)\n    return total\n    \ndef compute_string_list_sum_while_if(string_list, if_condition):\n    '''\n    Write a python function to compute the sum of numbers in a list of strings using while loop and if condition.\n    '''\n    \n    #Compute the sum of numbers in a list of strings using while loop and if condition\n    total = 0\n    for ele in string_list:\n        if if_condition:\n            total += int(ele)\n        else:\n            continue\n    return total\n    \ndef sum_of_first_even_digits_from_string(string):\n    '''\n    Write a python function to sum of first even digits from a given string.\n    '''\n    \n    #Sum of first even digits from a given string\n    total = 0\n    if string:\n        if string[0].isdigit():\n            total += int(string[0])\n        for char in range(1, len(string)):\n            if string[char].isdigit():\n                total += int(string[char])\n                if char == len(string) - 1:\n                    break\n    return total\n    \ndef sum_of_first_even_digits_from_string_recursive(string):\n    '''\n    Write a python function to sum of first even digits from a given string using recursion.\n    '''\n    \n    #Sum of first even digits from a given string using recursion\n    if string:\n        if string[0].isdigit():\n            return int(string[0]) + sum_of_first_even_digits_from_string_recursive(string[1:])\n        else:\n            return sum_of_first_even_digits_from_string_recursive(string[1:])\n    return 0\n    \ndef sum_of_first_even_digits_from_string_while(string):\n    '''\n    Write a python function to sum of first even digits from a given string using while loop.\n    '''\n    \n    #Sum of first even digits from a given string using while loop\n    total = 0\n    for char in range(0, len(string)):\n        if char == 0:\n            total += int(string[0])\n        if string[char].isdigit():\n            total += int(string[char])\n            if char == len(string) - "
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # return string.lower()\n    # no need to use if else\n    return string.casefold()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # code here\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\nprint(is_lower(\"Ny\"))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i].isupper():\n            new_string += string[i].lower()\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    substr_list = []\n    substr_list2 = []\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1].upper():\n            substr_list.append(str1[i])\n    substr_list.pop(0)\n    substr_list.pop(len(substr_list)-1)\n    return substr_list\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\")\n    \nprint(remove_lowercase(\"fun\")) #fun\nprint(remove_lowercase(\"python\")) #python\nprint(remove_lowercase(\"the quick brown fox jumps over the lazy dog\")) #the quick brown fox jumps over the lazy dog\nprint(remove_lowercase(\"aA\")) #\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(\"[a-z]\", \"\", str1)\n    print(str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lower_letter = re.compile(r'[a-z]')\n    if(str1!= \"\"):\n        return lower_letter.sub('', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #code here\n    str1 = str1.lower()\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.strip().lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #code here\n    str1=str1.lower()\n    newstr=\"\"\n    for i in str1:\n        if i.isupper():\n            newstr=newstr+i\n    return newstr\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join([i for i in str1 if not i.islower()])\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1==None:\n        return \"Invalid String\"\n    return str1.replace(\"a\", \"\").replace(\"A\", \"\").replace(\"e\", \"\").replace(\"E\", \"\").replace(\"i\", \"\").replace(\"I\", \"\").replace(\"o\", \"\").replace(\"O\", \"\").replace(\"u\", \"\").replace(\"U\", \"\")\ndef find_list(mylist,list_2):\n    '''\n    Write a function to find and return the index of the first occurrence of the second list in the first list.\n    '''\n    for i in range(len(mylist)):\n        if mylist[i] in list_2:\n            return i\n    return -1\ndef find_multiples(mylist,num):\n    '''\n    Write a function to find and return the indexes of all occurrences of the given number in the list.\n    '''\n    indices = []\n    for i in range(len(mylist)):\n        if mylist[i] == num:\n            indices.append(i)\n    return indices\ndef zero_if_not(mylist):\n    '''\n    Write a function to find the indices of all occurrences of zero in the list.\n    '''\n    indices = []\n    for i in range(len(mylist)):\n        if mylist[i] == 0:\n            indices.append(i)\n    return indices\ndef check_for_loop(string):\n    '''\n    Write a function to check if the given string contains any looping structures.\n    '''\n    if string==None:\n        return False\n    return bool(re.search(r\"((?:(?<!\\\\)(\\\\.)+))|(?<!\\\\)(\\\\)+|(?<=\\\\)(\\\\)+|(?<=\\\\)(\\\\\\\\)+|(\\\\)+)\",string))\ndef check_if_regex(string):\n    '''\n    Write a function to check if the given string contains any regular expressions.\n    '''\n    if string==None:\n        return False\n    return bool(re.search(r\"\\d|\\s|\\-|\\_|\\$|\\%|\\^|\\&|\\+|\\*|\\(|\\)|\\{|\\}|\\[|\\]|:|\\\"|\\'|<|>|,|\\.|\\?|\\|\\||\\#|\\||\\!|=|~|/|\\;|\\:|\\-|\\_|\\$|\\%|\\^|\\&|\\+|\\*|\\(|\\)|\\{|\\}|\\[|\\]|:|\\\"|\\'|\\s|\\-|\\_|\\$|\\%|\\^|\\&|\\+|\\*|\\(|\\)|\\{|\\}|\\[|\\]|\\;|\\:|\\-|\\_|\\$|\\%|\\^|\\&|\\+|\\*|\\(|\\)|\\{|\\}|\\[|\\]|\\:|\\\"|\\'|\\s|\\-|\\_|\\$|\\%|\\^|\\&|\\+|\\*|\\(|\\)|\\{|\\}|\\[|\\]|\\;|\\:|\\-|\\_|\\$|\\%|\\^|\\&|\\+|\\*|\\(|\\)|\\{|\\}|\\[|\\]|\\;|\\:\",string))\ndef check_if_valid_email(email):\n    '''\n    Write a function to check if the given string is a valid email.\n    '''\n    if email==None:\n        return False\n    return bool(re.match(r\"(^[a-zA-Z0-9_.+]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\",email))\ndef check_if_valid_password(password):\n    '''\n    Write a function to check if the given string is a valid password.\n    '''\n    if password==None:\n        return False\n    return bool(re.match(r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$#@!%^&*-]).{6,}$\",password))\ndef check_if_alphanumeric(string):\n    '''\n    Write a function to check if the given string is a valid alphanumeric string.\n    '''\n    if string==None:\n        return False\n    return bool(re.match(r\"(^[a-zA-Z0-9]*$)\",string))\ndef check_if_valid_name(name):\n    '''\n    Write a function to check if the given string is a valid name.\n    '''\n    if name==None:\n        return False\n    return bool(re.match(r\"(^[a-zA-Z0-9]*$)\",name))\ndef check_if_valid_domain(domain):\n    '''\n    Write a function to check if the given string is a valid domain.\n    '''\n    if domain==None:\n        return False\n    return bool(re.match(r\"^([a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9]{2,6}$\",domain))\ndef check_if_valid_ipv4(ip):\n    '''\n    Write a function to check if the given string is a valid IPv4 address.\n    '''\n    if ip==None:\n        return False\n    return bool(re.match(r\"([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\",ip))\ndef check_if_valid_ipv6(ip):\n    '''\n    Write a function to check if the given string is a valid IPv6 address.\n    '''\n    if ip==None:\n        return False\n    return bool(re.match(r\"^((([0-9A-Fa-f]{1,4}:){7,7}|([0-9A-Fa-f]{1,4}:){1,7}:|([0-9A-Fa-f]{1,4}:){1,6}:[0-9A-Fa-f]{1,4}|([0-9A-Fa-f]{1,4}:){1,5}(:[0-9A-Fa-f]{1,4}){1,2}|([0-9A-Fa-f]{1,4}:){1,4}(:[0-9A-Fa-f]{1,4}){1,3}|([0-9A-Fa-f]{1,4}:){1,3}(:[0-9A-Fa-f]{1,4}){1,4}|([0-9A-Fa-f]{1,4}:){1,2}(:[0-9A-Fa-f]{1,4}){1,5}|[0-9A-Fa-f]{1,4}:((:[0-9A-Fa-f]{1,4}){1,6})|:((:[0-9A-Fa-f]{1,4}){1,7}|:)|fe80:(:[0-9A-Fa-f]{0,4}){0,4}%[0-9A-Fa-f]{1,4}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(\" \", \"\")\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n<0 :\n        n=n*(-1)\n        i=len(str(n))-1\n        while i>=0:\n            n=n//10\n            if n==0:\n                break\n            i=i-1\n    else:\n        i=len(str(n))-1\n        while i>=0:\n            n=n//10\n            if n==0:\n                break\n            i=i-1\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    if n == 0:\n        return 0\n    while n >= 10 :\n        n = n // 10\n    return n\n    \ndef check_Digits(n) : \n    '''\n    Write a python function to check whether the first digit of the given number is a number or not.\n    '''\n    if first_Digit(n) >= 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0 :\n        return 0\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return(n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while(n>0) :\n        n=n//10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n) % 10\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return int(n) % 100 / 10\n    \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return int(n) % 1000 / 100\n    \ndef fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    return int(n) % 10000 / 1000\n    \ndef fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    return int(n) % 100000 / 10000\n    \ndef sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    return int(n) % 1000000 / 100000\n    \ndef seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    return int(n) % 10000000 / 1000000\n    \ndef eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    return int(n) % 1000000000 / 10000000\n    \ndef tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    return int(n) % 10000000000 / 1000000000\n    \ndef eleventh_Digit(n) :  \n    '''\n    Write a python function to find the eleventh digit of a given number.\n    '''\n    return int(n) % 1000000000000 / 1000000000000\n    \ndef twelfth_Digit(n) :  \n    '''\n    Write a python function to find the twelfth digit of a given number.\n    '''\n    return int(n) % 10000000000000 / 100000000000000\n    \ndef thirteenth_Digit(n) :  \n    '''\n    Write a python function to find the thirteenth digit of a given number.\n    '''\n    return int(n) % 1000000000000000 / 1000000000000000\n    \ndef fourteenth_Digit(n) :  \n    '''\n    Write a python function to find the fourteenth digit of a given number.\n    '''\n    return int(n) % 1000000000000000 / 100000000000000000\n    \ndef fifteenth_Digit(n) :  \n    '''\n    Write a python function to find the fifteenth digit of a given number.\n    '''\n    return int(n) % 100000000000000 / 10000000000000000000\n    \ndef sixteenth_Digit(n) :  \n    '''\n    Write a python function to find the sixteenth digit of a given number.\n    '''\n    return int(n) % 10000000000000000 / 100000000000000000\n    \ndef seventeenth_Digit(n) :  \n    '''\n    Write a python function to find the seventeenth digit of a given number.\n    '''\n    return int(n) % 1000000000000000 / 10000000000000000000\n    \ndef eighteenth_Digit(n) :  \n    '''\n    Write a python function to find the eighteenth digit of a given number.\n    '''\n    return int(n) % 10000000000000000 / 10000000000000000000\n    \ndef nineteenth_Digit(n) :  \n    '''\n    Write a python function to find the nineteenth digit of a given number.\n    '''\n    return int(n) % 100000000000000 / 10000000000000000000\n    \ndef twentieth_Digit(n) :  \n    '''\n    Write a python function to find the twentieth digit of a given number.\n    '''\n    return int(n) % 1000000000000000 / 10000000000000000000\n    \ndef twenty_first_Digit(n) :  \n    '''\n    Write a python function to find the twenty-first digit of a given number.\n    '''\n    return int(n) % 1000000000 / 1000000000000000\n    \ndef twenty_second_Digit(n) :  \n    '''\n    Write a python function to find the twenty-second digit of a given number.\n    '''\n    return int(n) % 1000000000 / 100000000000000\n    \ndef twenty_third_Digit(n) :  \n    '''\n    Write a python function to find the twenty-third digit of a given number.\n    '''\n    return int(n) % 1000000000 / 1000000000000\n    \ndef twenty_fourth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-fourth digit of a given number.\n    '''\n    return int(n) % 1000000000 / 10000000000000\n    \ndef twenty_fifth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-fifth digit of a given number.\n    '''\n    return int(n) % 1000000000 / 100000000000000\n    \ndef twenty_sixth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-sixth digit of a given number.\n    '''\n    return int(n) % 1000000000 / 1000000000000000\n    \ndef twenty_seventh_Digit(n) :  \n    '''\n    Write a python function to find the twenty-seventh digit of a given number.\n    '''\n    return int(n) % 1000000000 / 10000000000000000\n    \ndef twenty_eighth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-eighth digit of a given number.\n    '''\n    return int(n) % 1000000000 / 100000000000000000\n    \ndef twenty_ninth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-ninth digit of a given number.\n    '''\n    return int(n) % 1000000000 / 10000000000000000000\n    \ndef twenty_tenth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-tenth digit of a given number.\n    '''\n    return int(n) % 1000000000 / 10000000000000000000\n    \ndef twenty_eleventh_Digit(n) :  \n    '''\n    Write a python function to find the twenty-eleventh digit of a given number.\n    '''\n    return int(n) % 10000000000 / 1000000000000000\n    \ndef twenty_twelfth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-twelfth digit of a given number.\n    '''\n    return int(n) % 10000000000 / 100000000000000\n    \ndef twenty_thirteenth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-thirteenth digit of a given number.\n    '''\n    return int(n) % 10000000000 / 10000000000000\n    \ndef twenty_fourth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-fourth digit of a given number.\n    '''\n    return int(n) % 1000000000000 / 1000000000000000\n    \ndef twenty_fifth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-fifth digit of a given number.\n    '''\n    return int(n) % 1000000000000 / 10000000000000000\n    \ndef twenty_sixth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-sixth digit of a given number.\n    '''\n    return int(n) % 1000000000000 / 1000000000000000\n    \ndef twenty_seventh_Digit(n) :  \n    '''\n    Write a python function to find the twenty-seventh digit of a given number.\n    '''\n    return int(n) % 1000000000000 / 100000000000000\n    \ndef twenty_eighth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-eighth digit of a given number.\n    '''\n    return int(n) % 1000000000000 / 1000000000000000\n    \ndef twenty_ninth_Digit(n) :  \n    '''\n    Write a python function to find the twenty-ninth digit of a given number.\n    '''\n    retur"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    else:\n        return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i % 2!=0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    print(\"The odd numbers in the list are:\",odd)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    print(odd_list)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # new_list=[]\n    # for i in list:\n    #     if i%2==0:\n    #         new_list.append(i)\n    # return new_list\n    # return list[::2]\n    return [i for i in list if i%2==1]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)): \n        if list[i] % 2!= 0:\n            odd_list.append(list[i])\n    return odd_list \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num%2!=0]\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    x = 0\n    sum1 = sum(range(1,n+1))\n    sum2 = sum(range(1,n+1))**3\n    return sum1 - sum2\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def difference_1(n) :\n        def sumOfCube(n) :\n            return sum(i*i*i for i in range(1, n+1))\n        def sum(n) :\n            return sum(range(1, n+1))\n        return abs(sumOfCube(n) - sum(n))\n    return difference_1(n)\n    \ndef sum_of_list(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_1(n)\n    \ndef sum_of_list_2(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_2_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_2_1(n)\n    \ndef sum_of_list_3(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_3_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_3_1(n)\n    \ndef sum_of_list_4(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_4_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_4_1(n)\n    \ndef sum_of_list_5(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_5_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_5_1(n)\n    \ndef sum_of_list_6(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_6_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_6_1(n)\n    \ndef sum_of_list_7(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_7_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_7_1(n)\n    \ndef sum_of_list_8(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_8_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_8_1(n)\n    \ndef sum_of_list_9(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_9_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_9_1(n)\n    \ndef sum_of_list_10(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_10_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_10_1(n)\n    \ndef sum_of_list_11(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_11_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_11_1(n)\n    \ndef sum_of_list_12(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_12_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_12_1(n)\n    \ndef sum_of_list_13(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_13_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_13_1(n)\n    \ndef sum_of_list_14(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_14_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_14_1(n)\n    \ndef sum_of_list_15(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_15_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_15_1(n)\n    \ndef sum_of_list_16(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_16_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_16_1(n)\n    \ndef sum_of_list_17(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_17_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_17_1(n)\n    \ndef sum_of_list_18(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_18_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_18_1(n)\n    \ndef sum_of_list_19(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_19_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_19_1(n)\n    \ndef sum_of_list_20(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_20_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_20_1(n)\n    \ndef sum_of_list_21(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_21_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_21_1(n)\n    \ndef sum_of_list_22(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_22_1(n) :\n        return sum(range(1, n+1))\n    return sum_of_list_22_1(n)\n    \ndef sum_of_list_23(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    def sum_of_list_23_1(n) :\n        return sum(range(1, n+1))\n    return su"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #Code here\n    return sum(i**3 for i in range(1,n+1)) - sum(i for i in range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    while n>0:\n        n=n-1\n        sum=sum+n**3\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 :\n        raise ValueError(\"n has to be greater than 0.\")\n    result = sum(list(map(lambda x : x ** 3, range(1, n + 1)))) - sum(list(map(lambda x : x ** 3, range(1, n + 1))))\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    diff = 0\n    for i in range(n) :\n        diff += pow(i, 3)\n    print(diff)\n    return diff - n*n*n\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n==0:\n        return 0\n    result = 0\n    if n == 1:\n        return 1\n    while n > 0:\n        if n%2 == 0:\n            result += pow(n,3)\n        else:\n            result -= pow(n,3)\n        n = n-1\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1) :\n        result += i**3\n    for i in range(1,n+1) :\n        result += i\n    return result\n    "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # write your python function here\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i**3\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import math\n    def sumofsquared(n) :\n        sum = 0\n        for i in range(n) :\n            sum += i*i\n        return sum\n    def sumofn(n) :\n        sum = 0\n        for i in range(1,n+1) :\n            sum += i\n        return sum\n    sum1 = sumofsquared(n)\n    sum2 = sumofn(n)\n    difference = abs(sum1 - sum2)\n    print(difference)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    i = 0\n    while i < N - 1:\n        if (A[i] ^ A[i + 1]) % 2 == 1:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pairs = 0\n    for i in range(1,N+1) :\n        if(A[i] == 1) : \n            for j in range(2,N+1) :\n                if(A[j] == 1) :\n                    pairs = pairs+1\n                else :\n                    break\n    return pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) % 2 == 1 : \n                count += 1\n    print(count)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    count = 0\n    while i < len(A) :\n        j = i+1\n        while j < len(A) :\n            if (A[i] ^ A[j])%2 == 1 :\n                count = count + 1\n            j = j+1\n        i = i+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_count = 0\n    for i in range(N) :\n        if (A[i] == 1):\n            xor_count += 1\n    return xor_count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2!= 0 :\n                count += 1\n    return count\nA = [1,2,3,4,5]\nprint(find_Odd_Pair(A,5)"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if A[i]!= A[j] and A[i] ^ A[j] == 1 :\n                count += 1\n    print(count)\n        \nif __name__ == \"__main__\":\n    A = list(map(int,input().split()))\n    N = len(A)\n    find_Odd_Pair(A,N)"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair=0\n    # Complete this function\n    return odd_pair\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i=0\n    j=0\n    count = 0\n    while (i<=N and j<=N): \n        if (A[i] == A[j]) : \n            i = i + 1\n            j = j + 1\n        elif (A[i] < A[j]) : \n            i = i + 1\n        else :\n            j = j + 1\n        count = count + 1\n    return count \n    \n    \n    \n    \n    \ndef find_Odd_Pair_1(A,N): \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if (A[i]!= A[j]) and (A[i] ^ A[j]!= 0):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            if ((i^j)&1):\n                print('XOR:',i,j)\n            else:\n                continue\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Your code here\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if isinstance(string, str):\n        return string.upper() + string.lower()\n    else:\n        return \"Wrong input type\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper() if not string.islower() else string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if isinstance(string, str):\n        return string.swapcase()\n    else:\n        return \"Input type not supported\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string)!= str:\n        raise TypeError(\"Please enter a string.\")\n    else:\n        string = string.upper()\n        string = string.lower()\n        return string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # clean up the string\n    string = string.lower()\n    string = string.upper()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string = new_string + char.lower()\n        elif char.islower():\n            new_string = new_string + char.upper()\n        else:\n            new_string = new_string + char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for char in string:\n        if char.islower():\n            char.upper()\n        elif char.isupper():\n            char.lower()\n        else:\n            continue\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Your code here\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    sum_of_diff = 0\n    for i in range(n1_len):\n        if n1_str[i] == n2_str[i]:\n            continue\n        else:\n            diff_1 = int(n1_str[i]) - int(n2_str[i])\n            sum_of_diff = sum_of_diff + diff_1\n    return sum_of_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num_sum = 0\n    if n1 < n2:\n        n1, n2 = n2, n1\n    while n1 > 0:\n        num_sum += (n1 % 10) - (n2 % 10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return num_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = int(str(n1)[0])\n    d2 = int(str(n2)[0])\n    s = 0\n    if d1 == d2:\n        s += abs(d1 - d2)\n        return s\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance_sum = 0\n    distance_sum_prev = 0\n    while n1 > 0:\n        distance_sum_cur = n1 - n2\n        if distance_sum_cur > distance_sum:\n            distance_sum = distance_sum_cur\n        distance_sum_prev = distance_sum_cur\n        n1 = n1//10\n    return distance_sum\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(len(n1)):\n        diff = int(n1[i]) - int(n2[i])\n        sum_diff += abs(diff)\n    return sum_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    while n1 or n2:\n        n1, n2 = n1//10, n2//10\n        if n1 == n2:\n            sum += n1\n            break\n        sum += abs(n1 - n2)\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #find the max and min of both numbers\n    max_number = max(abs(n1), abs(n2))\n    min_number = min(abs(n1), abs(n2))\n    #set count to 0\n    count = 0\n    #while max is not 0, looping through and counting all the times it is non-zero\n    while max_number > 0:\n        #if both numbers are the same, return 0\n        if n1 == n2:\n            return 0\n        #if the number is even, add 2 to count\n        elif n1 % 2 == 0:\n            count += 2\n        #if the number is odd, add 1 to count\n        else:\n            count += 1\n        #take the remainder and multiply by 10\n        n1 = (n1//10)*10\n        #take the remainder and multiply by 10\n        n2 = (n2//10)*10\n        max_number = max(abs(n1), abs(n2))\n    #return the total difference\n    return count\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # your code here\n    sum=0\n    for i in range(len(n1)):\n        sum+=abs(int(n1[i])-int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if len(n1)!= len(n2):\n        return -1\n    return sum([int(d1) - int(d2) for d1, d2 in zip(n1, n2)])\n    \n    \nif __name__ == '__main__':\n    print(digit_distance_nums('1', '2'))\n    print(digit_distance_nums('11', '12'))\n    print(digit_distance_nums('111', '112'))\n    print(digit_distance_nums('1', '1'))\n    print(digit_distance_nums('1', '11'))\n    print(digit_distance_nums('1', '111'))\n    print(digit_distance_nums('1', '1101'))"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1,n2=map(int,(str(n1),str(n2)))\n    difference=0\n    for i in range(len(str(n1))):\n        difference+=abs(int(str(n1)[i])-int(str(n2)[i]))\n    return difference\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -9999999999\n    for i in range(size):\n        curr_sum = 0\n        for j in range(i, size):\n            curr_sum += a[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    running_sum = 0\n    for i in range(size):\n        running_sum += a[i]\n        if running_sum > max_sum:\n            max_sum = running_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = a[0]\n    max_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum+a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size < 1:\n        return 0\n    else:\n        res = a[0]\n        curr_sum = a[0]\n        for i in range(1, size):\n            curr_sum = max(curr_sum + a[i], a[i])\n            res = max(res, curr_sum)\n        return res\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # max_sum = 0\n    # max_sum_sub_list = 0\n    # start = 0\n    # end = 0\n    # while(start <= len(a) - 1):\n    #     end += 1\n    #     while(end <= len(a) - 1):\n    #         max_sum = 0\n    #         sub_list = []\n    #         temp = a[start:end+1]\n    #         for i in temp:\n    #             max_sum += i\n    #             sub_list.append(max_sum)\n    #         if(max_sum > max_sum_sub_list):\n    #             max_sum_sub_list = max_sum\n    #             start = end\n    #         end += 1\n    #     start += 1\n    # print(max_sum_sub_list)\n    # print(sub_list)\n    # return(max_sum_sub_list)\n    temp = 0\n    max_sum = 0\n    max_sum_sub_list = 0\n    start = 0\n    end = 0\n    max_sum_sub_list_index = 0\n    while(start <= len(a) - 1):\n        end += 1\n        while(end <= len(a) - 1):\n            temp = 0\n            max_sum = 0\n            sub_list = []\n            for i in range(start, end+1):\n                max_sum += a[i]\n                sub_list.append(max_sum)\n            if(max_sum > max_sum_sub_list):\n                max_sum_sub_list = max_sum\n                max_sum_sub_list_index = i\n                start = end\n            end += 1\n        start += 1\n    # print(max_sum_sub_list_index)\n    # print(max_sum_sub_list)\n    # print(sub_list)\n    return(max_sum_sub_list)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 2:\n        return a\n    \n    if size == 2:\n        if a[0] > a[1]:\n            return a[0]\n        elif a[0] < a[1]:\n            return a[1]\n        else:\n            return a[0]\n    \n    mid = size // 2\n    \n    # left side\n    left_sum = max_sub_array_sum(a[:mid], mid)\n    \n    # right side\n    right_sum = max_sub_array_sum(a[mid:], size - mid)\n    \n    return max(left_sum, right_sum, left_sum + right_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum\n    \ndef find_sum(lst, size):\n    '''\n    Write a function to find sum of the whole list.\n    '''\n    total = 0\n    \n    for i in range(size):\n        total += lst[i]\n    \n    return total\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        for j in range(i, size):\n            sub_sum = sum(a[i:j+1])\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # initialize variables\n    max_so_far = 0\n    max_ending_here = 0\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    union_list.extend(test_tup1)\n    union_list.extend(test_tup2)\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list = list(test_tup1) + list(test_tup2)\n    test_list.sort()\n    return tuple(test_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_dict1 = {}\n    test_dict2 = {}\n    for i in test_tup1:\n        test_dict1[i] = 0\n    for i in test_tup2:\n        test_dict2[i] = 0\n    union = set(test_dict1.keys()) | set(test_dict2.keys())\n    union = list(union)\n    union.sort()\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = set()\n    union_tup.update(test_tup1)\n    union_tup.update(test_tup2)\n    return tuple(sorted(union_tup))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1) | set(test_tup2))\n    return sorted(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    test_set = test_set1 | test_set2\n    print(sorted(list(test_set)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    # Code here\n    union_tup = list(union_tup)\n    for item in test_tup1:\n        if item not in test_tup2:\n            union_tup.append(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            union_tup.append(item)\n    union_tup = tuple(sorted(union_tup))\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    x=[]\n    for i in test_tup1:\n        if i not in test_tup2:\n            x.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            x.append(i)\n    for i in sorted(x):\n        print(i,end=',')\n    print('\\n')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    return sorted(set(test_tup1 + test_tup2))\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    n=len(lst)\n    max_len=0\n    max_sub_len=1\n    for i in range(1,n):\n        if(max_len<i):\n            break\n        else:\n            if(lst[i-1]==0 and lst[i]==1):\n                max_len+=1\n            elif(lst[i-1]==1 and lst[i]==0):\n                max_len-=1\n            else:\n                if(max_len>max_sub_len):\n                    max_sub_len=max_len\n                    max_len=0\n    return max_sub_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    else:\n        return 1+Find_Max_Length(lst[1:])\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    import pdb\n    pdb.set_trace()\n    lengths = []\n    for lst in lst:\n        lengths.append(len(lst))\n    return max(lengths)\n    \nFind_Max_Length(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    largest = 0\n    length = 0\n    for num in lst:\n        length = len(num)\n        if length > largest:\n            largest = length\n    return largest\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l=len(lst)\n    long=0\n    for i in range(l):\n        for j in range(i,l):\n            lst_sub=lst[i:j+1]\n            l_sub=len(lst_sub)\n            if l_sub>long:\n                long=l_sub\n    return long\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxi = 0\n    for i in range(len(lst)):\n        if len(lst[i])>maxi:\n            maxi = len(lst[i])\n    print(maxi)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            sub = lst[i:j+1]\n            if(max_length < len(sub)):\n                max_length = len(sub)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    s = 0\n    result = 0\n    for x in lst:\n        if s < len(x):\n            s = len(x)\n    if len(lst) == 0:\n        return 0\n    for x in lst:\n        if len(x) == s:\n            result += 1\n    return result\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dict1={}\n    for ele in lst:\n        if ele not in dict1:\n            dict1[ele]=1\n        else:\n            dict1[ele]+=1\n    dict1=sorted(dict1.items(),key=lambda x:x[0])\n    return(dict1[-1][1])\n    "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_sub = []\n    for i in lst:\n        if i not in max_sub:\n            max_sub.append(i)\n        else:\n            continue\n    return len(max_sub)\n    \n    \n    \n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # pattern = re.compile(r\"\\\"(.*)\\\"\")\n    # return pattern.findall(text)\n    return re.findall(r\"\\\"(.*)\\\"\", text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    output = \"\"\n    found_1 = False\n    for i in range(len(text)):\n        if text[i] == '\"':\n            if not found_1:\n                found_1 = True\n            else:\n                break\n        elif found_1:\n            output += text[i]\n    return output\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile(r\"\\\"(.+?)\\\"\")\n    p = p.findall(text)\n    return p\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"[^\"]*\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"(.*?)\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    new_text = text.replace(\" \", \"\")\n    parsed_text = new_text.split('\"')\n    for i in range(len(parsed_text)-1):\n        parsed_text[i] = parsed_text[i].strip()\n    return parsed_text\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r\"\\\"(.+?)\\\"\")\n    matches = regex.findall(text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall(\"([^\\\"]*\\\"[^\\\"]*\\\"[^\\\"]*)\",text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    extracted = re.findall(r'\"[^\"]+\"', text)\n    print(extracted)\n    return extracted\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if '\"' not in text:\n        return None\n    else:\n        pat = r'\"[^\"]*\"'\n        my_match = re.findall(pat, text)\n        if my_match:\n            return my_match[0].replace('\"','').replace(\"'\",'')\n        else:\n            return None\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # # Using the hash map\n    # hmap = {}\n    # for i in range(n):\n    #     hmap[i] = 1\n    # for i in range(n):\n    #     if arr[i] in hmap:\n    #         hmap[arr[i]] += 1\n    # count = 0\n    # for i in range(n):\n    #     if i!= arr[i]:\n    #         if arr[i] in hmap:\n    #             count += hmap[arr[i]]\n    #         if arr[i] + 1 in hmap:\n    #             count += hmap[arr[i] + 1]\n    #         if arr[i] - 1 in hmap:\n    #             count += hmap[arr[i] - 1]\n    # return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]==arr[j]):\n                count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #counting all the even numbers and odd numbers\n    count_odd_numbers = 0\n    count_even_numbers = 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # for i in range(0,n):\n    #     for j in range(i+1,n):\n    #         if arr[i] == arr[j] and arr[i]!= -1 and arr[j]!= -1:\n    #             return arr[i]\n    return len([x for x in range(0,n) if arr[x]!= -1 and x!= arr[x]])\n    \ndef check_If_Prime(num):\n    '''\n    Write a python function which accepts a number and checks whether that number is a prime number or not.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    if n == 1:\n        return count\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n<2: \n        return 0\n    else:\n        count=0\n        i=0\n        while i<n:\n            j=0\n            while j<n:\n                if arr[i]==arr[j]:\n                    count+=1\n                j+=1\n            i+=1\n        return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans=0\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j] and i!=j:\n                ans+=1\n    return ans"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(0,n-1): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                pairs = pairs + 1\n    return pairs \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                pairs+=1\n    return pairs\narr = [1, 2, 2, 3, 3, 3] \nn = len(arr) \nprint (count_Pairs(arr, n)) \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word[0], word[1:]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [c for c in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \nprint(split(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(split(\"0123456789\"))\nprint(split(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(split(\"abcdefghijklmnopqrstuvwxyz\"))"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    split_word = []\n    for i in range(len(word)):\n        split_word.append(word[i])\n    return split_word\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # your code here\n    print(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s=word\n    return s.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    split_word = ''\n    for char in word:\n        split_word += char\n    return split_word\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    sum = 0\n    for i in n:\n        sum = sum + int(i)\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        s += n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum += n%10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    sum = 0\n    for i in range(len(n)):\n        sum += int(n[i])\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if(sorted(list1)==list1):\n        return \"It is sorted list\"\n    else:\n        return \"Not sorted list\"\n    \n    \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check = True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            check = False\n            break\n    return check\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Time complexity : O(n)\n    # Space complexity : O(1)\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    def islist(list1):\n        if len(list1) == 0:\n            return False\n        if len(list1) == 1:\n            return True\n        else:\n            for i in range(len(list1)):\n                if list1[i] > list1[i+1]:\n                    return False\n            return True\n    return islist(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    size = len(list1)\n    if size <= 1:\n        return True\n    for i in range(0, size-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Approach 1:\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n    '''\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n    \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dict = []\n    for x in range(0, length):\n        list_of_dict.append(empty_dict())\n    return list_of_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    n=length\n    l=[]\n    for i in range(n):\n        l.append({})\n    return l\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = list1[i][j].lower()\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        new_list.append(sorted(sublist))\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n        \n    return list1\n        \n    \ndef sublist_checker(list1):\n    '''\n    Write a function to check whether all sublists in list1 are sorted or not.\n    '''\n    if len(list1) == 0:\n        return False\n    else:\n        if len(list1) == 1 and len(list1[0]) == 1:\n            return True\n        else:\n            for i in range(1,len(list1)):\n                if len(list1[0])!= len(list1[i]):\n                    return False\n                else:\n                    if sorted(list1[0])!= list1[0]:\n                        return False\n    return True\n    \n    \ndef sublist_sorting_checker(list1):\n    '''\n    Write a function to check whether a given list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(1,len(list1)):\n            if list1[j] < list1[i]:\n                return False\n    return True\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # this is the list of lists you need to sort\n    for x in list1:\n        # this is the list that will contain all the sublists\n        x = list(x)\n        #print(x)\n        # this is the list that will contain all the lists sorted\n        x = sorted(x)\n        #print(x)\n        # this is the list that will contain the final sorted list\n        list1 = list(x)\n        #print(list1)\n    # this is the final list that will be returned\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    print(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists_helper(list1):\n        if len(list1) <= 1:\n            return list1\n        else:\n            sublists = []\n            for i in range(0, len(list1)):\n                if type(list1[i]) == list:\n                    sublists.append(list1[i])\n            sublists = sort_sublists_helper(sublists)\n            sublists.sort()\n            return sublists\n    return sort_sublists_helper(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a counter for lists\n    counter = 0\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            continue\n        nums_set.add(num)\n    return list(nums_set)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Approach 1\n    # Using set() + list comprehension\n    # return [x for x in nums if x not in set(nums)]\n    \n    # Approach 2\n    # Using set() + list comprehension\n    # return [x for x in nums if x not in set(nums)]\n    # print(set(nums))\n    # print(nums)\n    # return [x for x in nums if x not in nums]\n    # return nums\n    \n    # Approach 3\n    # Using set() + list comprehension\n    # return nums\n    # return list(set(nums))\n    # return list(set([x for x in nums]))\n    \n    # Approach 4\n    # Using set() + list comprehension\n    # return list(set([x for x in nums if x not in nums]))\n    # return [x for x in nums if x not in nums]\n    # return [x for x in nums if x not in nums]\n    \n    # Approach 5\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    \n    \n    # Approach 6\n    # Using set() + list comprehension\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 7\n    # Using set() + list comprehension\n    return list(set(nums))\n    \n    \n    # Approach 8\n    # Using set() + list comprehension\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 9\n    # Using set() + list comprehension\n    return list(set(nums))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 10\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 11\n    # Using set() + list comprehension\n    return list(set(nums))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 12\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    \n    # Approach 13\n    # Using set() + list comprehension\n    # return list(set(nums))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 14\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 15\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 16\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 17\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 18\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 19\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 20\n    # Using set() + list comprehension\n    return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 21\n    # Using set() + list comprehension\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 22\n    # Using set() + list comprehension\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 23\n    # Using set() + list comprehension\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 24\n    # Using set() + list comprehension\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    # return list(set([x for x in nums if x not in nums]))\n    \n    # Approach 25\n    # Using set() + list comprehension\n    # return list(set([x for x in nums if x not i"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    for n in nums:\n        if n in nums_set:\n            nums_set.remove(n)\n        else:\n            nums_set.add(n)\n    return sorted(list(nums_set))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = []\n    for num in nums:\n        if num not in seen:\n            seen.append(num)\n    return seen\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    set_nums = set(nums)\n    return len(set_nums) == len(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # sort the list\n    nums.sort()\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a list of the unique numbers.\n    unique_numbers = []\n    # Loop through the numbers and add to the list.\n    for number in nums:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    # Return the unique numbers.\n    return unique_numbers\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    print(nums)\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            nums.remove(nums[i])\n    return nums\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Using set to make the data unique\n    # list_data = set(list_data)\n    # product = 1\n    # for i in list_data:\n    #     product = product * i\n    # return product\n    return reduce(lambda a,b: a*b,set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    l = []\n    for i in list_data:\n        if i not in l:\n            l.append(i)\n    return 1 if len(l)==0 else reduce(lambda x, y: x*y, l)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in list_data:\n        result = result * i\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = sorted(list_data)\n    unique_numbers = list(set(list_data))\n    unique_numbers = sorted(unique_numbers)\n    n = len(unique_numbers)\n    prod = 1\n    for i in range(n):\n        prod = prod * unique_numbers[i]\n    print(prod)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_dict = {}\n    \n    for item in list_data:\n        if product_dict.get(item):\n            product_dict[item] += 1\n        else:\n            product_dict[item] = 1\n            \n    product = 1\n    for key in product_dict:\n        product *= (key * product_dict[key])\n        \n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data=sorted(list_data)\n    product = 1\n    for i in range(len(list_data)):\n        if list_data[i]!= list_data[i - 1]:\n            product = product * list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for num in list_data:\n        if num not in list_data[0:len(list_data)-1]:\n            product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp = []\n    for i in list_data:\n        if i not in temp:\n            temp.append(i)\n    product = 1\n    for i in temp:\n        product = product*i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product = product*i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for data in list_data:\n        if data not in unique_list:\n            unique_list.append(data)\n    return unique_list\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h+pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    print(3.14*r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return pi*r*r*h\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*pi*r*r\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*pi*r*r*r\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi*r*r*h\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return pi*r*r*h/3\n    \ndef volume_pyramid(a,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*(a+b)\n    \ndef volume_pyramid_2(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h*(a+b)\n    \ndef volume_cone_cone(r1,r2,h1,h2):\n    '''\n    Write a function to find the volume of a cone-cone.\n    '''\n    return (1/3)*pi*r1*r2*h1*h2\n    \ndef volume_pyramid_mixed(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*(a+b)*h\n    \ndef volume_pyramid_mixed_2(a,b,h1,h2):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*(a+b)*h2\n    \ndef volume_pyramid_mixed_3(a,b,h1,h2,h3):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*(a+b)*h3\n    \ndef volume_pyramid_mixed_4(a,b,h1,h2,h3,h4):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*(a+b)*h4\n    \ndef volume_pyramid_mixed_5(a,b,h1,h2,h3,h4,h5):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*(a+b)*h5\n    \ndef volume_pyramid_mixed_6(a,b,h1,h2,h3,h4,h5,h6):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*(a+b)*h6\n    \ndef volume_pyramid_mixed_7(a,b,h1,h2,h3,h4,h5,h6,h7):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*(a+b)*h7\n    \ndef volume_pyramid_mixed_8(a,b,h1,h2,h3,h4,h5,h6,h7,h8):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*h7*(a+b)*h8\n    \ndef volume_pyramid_mixed_9(a,b,h1,h2,h3,h4,h5,h6,h7,h8,h9):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*h7*h8*(a+b)*h9\n    \ndef volume_pyramid_mixed_10(a,b,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*h7*h8*h9*(a+b)*h10\n    \ndef volume_pyramid_mixed_11(a,b,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*h7*h8*h9*h10*(a+b)*h11\n    \ndef volume_pyramid_mixed_12(a,b,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11,h12):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*h7*h8*h9*h10*h11*(a+b)*h12\n    \ndef volume_pyramid_mixed_13(a,b,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11,h12,h13):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*h7*h8*h9*h10*h11*h12*(a+b)*h13\n    \ndef volume_pyramid_mixed_14(a,b,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11,h12,h13,h14):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*h7*h8*h9*h10*h11*h12*h13*(a+b)*h14\n    \ndef volume_pyramid_mixed_15(a,b,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11,h12,h13,h14,h15):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*h7*h8*h9*h10*h11*h12*h13*h14*(a+b)*h15\n    \ndef volume_pyramid_mixed_16(a,b,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11,h12,h13,h14,h15,h16):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return a*b*h1*h2*h3*h4*h5*h6*h7*h8*h9*h10*h11*h12*h13*h14*h15*(a+b)*h16\n    \ndef volum"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*r*pi*2+2*pi*r*h\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*pi*pow(r,2)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*r*pi*2+2*pi*r*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*pi*pow(r,3)/3\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea_cylinder = 2*pi*r*(r+h)\n    return surfacearea_cylinder\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area_cylinder = 2*pi*r*h + 2*pi*r**2\n    return surface_area_cylinder\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #print(\"r is\", r)\n    #print(\"h is\", h)\n    return math.pi*r**2*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h+pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.1415926535\n    a = r*pi*2\n    return 2*pi*r**2 + 2*pi*r*h + 2*a\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if (is_Sub_List(A,B[i])):\n            return True\n    return False\n        \ndef is_Sub_List(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if (A[i]!= B[i]):\n            return False\n    return True\n        \ndef is_sub_list(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return (i == len(A))\n        \n        \ndef zeros_list(n):\n    '''\n    Write a python function to generate a list of zeros of size N\n    '''\n    l = []\n    i = 0\n    while i < n:\n        l.append(0)\n        i += 1\n    return l\n        \ndef list_max(lst):\n    '''\n    Write a python function to find the largest element in the list.\n    '''\n    max = 0\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n    \ndef list_min(lst):\n    '''\n    Write a python function to find the largest element in the list.\n    '''\n    min = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n    return min\n            \ndef list_middle(lst):\n    '''\n    Write a python function to find the middle element in the list.\n    '''\n    lst_size = len(lst)\n    if (lst_size % 2) == 0:\n        return (lst[int(lst_size / 2 -.5)] + lst[int(lst_size / 2 +.5)]) / 2\n    else:\n        return lst[int(lst_size / 2)]\n            \ndef main():\n    '''\n    Run test cases for given functions\n    '''\n    #Test 1\n    print('\\nTest 1:')\n    print(is_Sub_Array([1,2,3],[]))\n    print(is_Sub_Array([1,2,3],[2]))\n    print(is_Sub_Array([1,2,3],[2,3]))\n    print(is_Sub_Array([1,2,3],[2,1,3]))\n    print(is_Sub_Array([1,2,3],[2,3,1]))\n    print(is_Sub_Array([1,2,3],[2,3,4]))\n    print(is_Sub_Array([1,2,3],[2,3,1,4]))\n    print(is_Sub_Array([1,2,3],[2,3,4,1]))\n    print(is_Sub_Array([1,2,3,4],[2,3,1,4]))\n    \n    #Test 2\n    print('\\nTest 2:')\n    print(is_Sub_Array([],[]))\n    print(is_Sub_Array([1],[]))\n    print(is_Sub_Array([],[1]))\n    print(is_Sub_Array([1],[1]))\n    print(is_Sub_Array([1,2,3],[1,2]))\n    print(is_Sub_Array([1,2,3],[1,2,3]))\n    print(is_Sub_Array([1,2,3],[1,2,3,4]))\n    \n    #Test 3\n    print('\\nTest 3:')\n    print(is_sub_list([1,2,3,4,5],[1,2,3,4,5]))\n    print(is_sub_list([1,2,3,4,5],[1,2,4,5]))\n    print(is_sub_list([1,2,3,4,5],[1,2,4,5,6]))\n    print(is_sub_list([1,2,3,4,5],[1,2,4,5,6,7]))\n    print(is_sub_list([1,2,3,4,5],[1,2,4,5,6,7,8]))\n    \n    #Test 4\n    print('\\nTest 4:')\n    print(zeros_list(5))\n    print(zeros_list(2))\n    print(zeros_list(3))\n    print(zeros_list(1))\n    \n    #Test 5\n    print('\\nTest 5:')\n    print(list_max([0,4,5,6]))\n    print(list_min([0,4,5,6]))\n    print(list_middle([0,4,5,6]))\n    \n    \nif __name__ == '__main__':\n    main()\n    "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # your code here\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            j+=1\n        i+=1\n    if j==len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if i>=j and A[i:i+j]==B[j:j+j]:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    if len(A)==len(B):\n        if A == B:\n            return True\n    i = 0\n    while i < len(B):\n        if len(A)<len(B):\n            break\n        if A[i]==B[i]:\n            i+=1\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] in A:\n            for j in range(i,len(B)):\n                if B[j] not in A:\n                    return False\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    B = sorted(B)\n    A = sorted(A)\n    if(len(B) > len(A)):\n        return False\n    for i in range(len(B)):\n        if(B[i] >= A[i]):\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) <= len(B):\n        for i in range(0, len(A)):\n            if A[i] in B:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A.sort()\n    B.sort()\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n        elif A[i] not in B:\n            return False\n            \nprint(is_Sub_Array([1,2,3,4,5], [2,3,4,5])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3])) # False\nprint(is_Sub_Array([1,2,3,4,5], [])) # True\nprint(is_Sub_Array([], [])) # True\nprint(is_Sub_Array([1,2,3], [1,2,3])) # True\nprint(is_Sub_Array([1,2,3], [])) # False\nprint(is_Sub_Array([1,2,3], [1,2,3,4,5])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4])) # True\nprint(is_Sub_Array([1,2,3,4,5], [2,3,4,5])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,5])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])) # True\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])) # False\nprint(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    def sub_array(arr, sub_arr):\n        if len(arr) < len(sub_arr):\n            return False\n        for i in range(len(arr) - len(sub_arr) + 1):\n            temp = arr[i:i+len(sub_arr)]\n            if temp == sub_arr:\n                return True\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    list1=A\n    list2=B\n    if len(list1)<len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i]==list2[j]:\n                    if i+1<len(list1):\n                        break\n                    elif i+1==len(list1):\n                        return True\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 0\n    while i<n:\n        i += 1\n        if i % 10 == 0:\n            n = n/10\n            print(n)\n        else:\n            n = n - (i % 10)\n        \n        if n == 1:\n            break\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        n = -n\n    else:\n        n = n\n    res = 0\n    while(n > 0):\n        res = (res * 10) + (n % 10)\n        n = n // 10\n    return res\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        raise ValueError(\"Factorial of negative numbers cannot be computed.\")\n    if n < 10:\n        return n\n    else:\n        return (n % 10) * last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return (n%10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while(n > 0):\n        factorial *= n\n        n -= 1\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 1:\n        return 1\n    return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initializing the result \n    res = 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        print('Factorial does not exist for negative numbers.')\n        return 0\n    \n    if n==0:\n        return 1\n    \n    else:\n        n = n*10\n        if n%10 ==0:\n            return n%10\n        else:\n            return n//10\n            "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num = 1\n    while(n > 1):\n        num = num * n\n        n = n - 1\n    return num\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = n - 1\n    while (i >= 0):\n        if(n%(i+1)==0):\n            print(\"The last digit of factorial of\",n,\"is\",i)\n            break\n        i-=1\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    if len(list1) >= 1 and len(list2) >= 1 and len(list3) >= 1:\n        result.extend(list1)\n        result.extend(list2)\n        result.extend(list3)\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(list1 + list2 + list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    while len(list1)!= 0 and len(list2)!= 0 and len(list3)!= 0:\n        new_list.append(list1.pop(0))\n        new_list.append(list2.pop(0))\n        new_list.append(list3.pop(0))\n    if len(list1)!= 0:\n        new_list.extend(list1)\n    if len(list2)!= 0:\n        new_list.extend(list2)\n    if len(list3)!= 0:\n        new_list.extend(list3)\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    # Get a list of index values\n    i1 = 0\n    i2 = 0\n    i3 = 0\n    \n    index_list = []\n    \n    # Create a list for index values\n    while i1 < len(list1) and i2 < len(list2) and i3 < len(list3):\n        index_list.append(i1)\n        index_list.append(i2)\n        index_list.append(i3)\n        i1 += 1\n        i2 += 1\n        i3 += 1\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i=0\n    j=0\n    k=0\n    lst=[]\n    while i<len(list1) and j<len(list2) and k<len(list3):\n        lst.append(list1[i])\n        lst.append(list2[j])\n        lst.append(list3[k])\n        i=i+1\n        j=j+1\n        k=k+1\n    return lst\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for l1, l2, l3 in zip(list1, list2, list3):\n        result.extend([l1, l2, l3])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i])\n        l.append(list2[i])\n        l.append(list3[i])\n    return l\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    length = len(list1)\n    index = 0\n    new_list = []\n    while index < length:\n        new_list.append(list1[index])\n        new_list.append(list2[index])\n        new_list.append(list3[index])\n        index += 1\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Convert all tuples to dictionaries for ease of searching.\n    tup1_dict = {}\n    for item in test_tup1:\n        tup1_dict[item] = 1\n    tup2_dict = {}\n    for item in test_tup2:\n        tup2_dict[item] = 1\n    \n    # Find the dissimilar elements in both the tuples and return them.\n    return tuple(tup1_dict.keys() - tup2_dict.keys()), tuple(tup2_dict.keys() - tup1_dict.keys())\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Special case - one of the tuples is empty - that's OK\n    if (not len(test_tup1) or not len(test_tup2)):\n        return None\n    elif (len(test_tup1)!= len(test_tup2)):\n        return None\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    if type(test_tup1)!= type(test_tup2):\n        print(f'The two tuples are of different types: {type(test_tup1)} and {type(test_tup2)}')\n        return\n    if len(test_tup1)!= len(test_tup2):\n        print(f'The two tuples are of different length: {len(test_tup1)} and {len(test_tup2)}')\n        return\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            print(f'The two tuples are of different types: {type(test_tup1[i])} and {type(test_tup2[i])}')\n            return\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    print(\"\\n\\n--------------> Function: find_dissimilar(test_tup1, test_tup2)\")\n    diff_num = 0\n    for x, y in zip(test_tup1, test_tup2):\n        if x!= y:\n            diff_num += 1\n    return diff_num\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code here\n    # return a tuple of elements that are not in the same position in the two tuples\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1).symmetric_difference(set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return {i for i in test_tup1 if i not in test_tup2} | {i for i in test_tup2 if i not in test_tup1}\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    # Initializing the result list\n    result_list = []\n    \n    # Traversing the first tuple\n    for i in range(len(test_tup1)):\n    \n        # Checking if the current element is in the second tuple\n        if test_tup1[i] not in test_tup2:\n            \n            # Adding the element to the result list\n            result_list.append(test_tup1[i])\n    \n    # Printing the result list\n    print(result_list)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = list()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            res.append(test_tup1[i])\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    new_tuple = []\n    \n    for i in test_tuple:\n        if even_fnc(i):\n            new_tuple.append(i)\n    \n    return tuple(new_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple[0] = even_fnc(test_tuple[0])\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) is tuple:\n        even_tuple = tuple(filter(even_fnc, test_tuple))\n        return even_tuple\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple)!= tuple:\n        raise TypeError(\"Invalid input\")\n    \n    if test_tuple == ():\n        return ()\n    \n    if type(test_tuple[0]) == tuple:\n        return even_ele(test_tuple[0], even_fnc) + even_ele(test_tuple[1], even_fnc)\n    else:\n        return even_fnc(test_tuple)\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = test_tuple\n    if isinstance(test_tuple,tuple):\n        for item in test_tuple:\n            if isinstance(item,tuple):\n                if len(item)!= 0:\n                    new_tuple = even_ele(item, even_fnc)\n            if even_fnc(item):\n                new_tuple = new_tuple\n            else:\n                new_tuple = new_tuple + (item,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    lst = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            for j in even_fnc(i):\n                lst.append(j)\n        else:\n            lst.append(i)\n    return tuple(lst)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    nest_tuple = test_tuple\n    if not isinstance(nest_tuple, tuple):\n        nest_tuple = (nest_tuple,)\n    result = []\n    for i in nest_tuple:\n        if isinstance(i, tuple):\n            result.extend(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(map(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for num in test_tuple:\n        if num % 2!= 0:\n            even_fnc(num)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # check if length of test_tuple == 3\n    # if not, print 'list is not of length 3'\n    if len(test_tuple)!= 3:\n        return 'list is not of length 3'\n    # check if all elements in test_tuple are ints\n    # if not, print 'list contains non-int elements'\n    for i in test_tuple:\n        if type(i)!= int:\n            return 'list contains non-int elements'\n    # if test_tuple is of length 3, proceed as follows\n    # loop through tuple \n    # add to a new list only the even elements \n    # return new list\n    even_list = []\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    sa = 0.5*(b**2) + (s**2)/4\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    area = (b * s) * 2 + (b * 2) * (s - 1)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    n=b+s*s\n    ans=4*n\n    return ans\n    \ndef circumference(radius):\n    '''\n    Write a python function to find the circumference of a circle with a given radius.\n    '''\n    ans=2*3.14*radius\n    return ans\n    \ndef num_digit(n):\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    ans=0\n    while n>0:\n        ans+=1\n        n//=10\n    return ans\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 1/2 * b * s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b**2)*3)/4\n    \ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s*2)/2\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # def surface_Area(b,s):\n    #     # area = 0.5*b*s\n    #     if b>s:\n    #         print(area)\n    #     else:\n    #         print(0)\n    #         # area = 0\n    #         # for a in range(s+1,b):\n    #         #     area = area + 4*a\n    #         # area = (4*b - 4*s) + (4*s) + (4*b)\n    #         # print(area)\n    #         # return area\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     print(area)\n    #         # return area\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return area\n    #         # return a + (b-a)\n    #         # for i in range(s+1,b):\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         # return a\n    #         # for i in range(s+1,b):\n    #         #     area = area + 4\n    #         #     return 4*a+b\n    #         "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = 2 * (b + s)\n    h = 2 * s\n    if b == h:\n        print (a * (s * s))\n    elif b!= h:\n        print (2 * (a + h) + 4 * (a * b))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n       "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=int(b)\n    l=int(s)\n    surf_area=a*l*math.sqrt(3)\n    print('The surface area is:',surf_area) \n    return(surf_area)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (1.5*b*s)+(0.5*b*s)\n    print('Surface Area : ',area)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (0.5)*(b*s)\n    return area\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return (len(dict1) == 0)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    #dict1 = {}\n    #for i in range(100):\n    #    dict1[i]=i\n    #print(dict1)\n    #print(type(dict1))\n    #print(dict1.keys())\n    #print(dict1.values())\n    #print(dict1.items())\n    #print(dict1.get('age'))\n    #print(dict1.get('name','No Name'))\n    #print(dict1.pop('age'))\n    #print(dict1)\n    #dict2 = my_dict(dict1)\n    #print(dict2)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    empty_dict = {\n        \"a\": \"apple\",\n        \"b\": \"banana\",\n        \"c\": \"car\"\n    }\n    if empty_dict:\n        print(\"The dictionary is not empty\")\n    else:\n        print(\"The dictionary is empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    print(\"My_Dict\")\n    print(\"dict1 is: {}\".format(dict1))\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def recursive(num):\n        if num <= 2:\n            return 1\n        else:\n            return (recursive(num-1)*num)%p\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    catalan_n = 0\n    for i in range(num):\n        catalan_n += catalan_n * (i + 1) / (i + 2)\n    return catalan_n\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return 0\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_number = 1\n    for i in range(1, num+1):\n        catalan_number = catalan_number*(2*i-1)/(i+1)\n    return int(catalan_number)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 2\n    else:\n        return catalan_number(num - 1) * (2 * num - 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan_recursion(num,previous):\n        if num==0 or num==1:\n            return 1\n        else:\n            value=previous[num-1]+previous[num-2]\n            return value\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1 or num == 2:\n        return 1\n    return catalan_number(num - 1) + catalan_number(num - 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return sum(catalan_number(k) * catalan_number(num-1-k) for k in range(num))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    a = 1\n    for i in range(num):\n        n = n + a\n        a = a * (i+1) / (i+2)\n    return n\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # initialise an empty list\n    catalan_list = []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ad_ending = re.findall(r'ly', text)\n    print(ad_ending)\n    if ad_ending:\n        for i in range(len(ad_ending)):\n            print('The position of the adverb ly is : ',i)\n    else:\n        print('No adverb ly found')\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    search_string = \"ly\"\n    regex = re.compile(r\"ly\")\n    matches = regex.finditer(text)\n    for match in matches:\n        if match.group() == search_string:\n            print(match.start(), match.end())\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ad_list = []\n    ad_list_pos = []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_list = []\n    for match in re.finditer(r'ly', text, re.IGNORECASE):\n        adverb_list.append(match.start())\n    return adverb_list\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.finditer(r\"ly(.)*\",text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if type(text)!= str:\n        raise ValueError('The function takes a string argument.')\n    text = text.lower()\n    adverbs = re.findall(r'ly(?![^b])(.*?)[^b]', text)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if text == \"\":\n        return \"No Adverb Found\"\n    pos_list = []\n    for i in range(len(text)):\n        if text[i] == \"a\" or text[i] == \"A\":\n            if text[i+1] == \"d\" or text[i+1] == \"D\":\n                if text[i+2] == \"r\" or text[i+2] == \"R\":\n                    if text[i+3] == \"e\" or text[i+3] == \"E\":\n                        pos_list.append(i)\n    if len(pos_list) == 0:\n        return \"No Adverb Found\"\n    else:\n        return pos_list\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = re.compile(r'ly')\n    adverbs = []\n    for i, line in enumerate(text.split('\\n')):\n        match = re.findall(adverb_pattern, line)\n        for item in match:\n            if item.endswith('ly'):\n                adverbs.append((item, i + 1))\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    results = []\n    for match in re.finditer(r'(ly|z)$', text):\n        results.append((match.group(), match.start(), match.end()))\n    return results\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if not text:\n        return None\n    pattern = r'(?<=\\w+ly)\\w+'\n    result = re.findall(pattern, text)\n    return result\n    \n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,-item)\n    res=[]\n    for i in range(n):\n        res.append(heapq.heappop(heap))\n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    for item in items:\n        heapq.heappush(result, item[1])\n        if len(result) > n:\n            heapq.heappop(result)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key = lambda x: x[1], reverse = True)\n    return items[:n]\n    # if n > len(items):\n    #     return items\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    items_sorted = sorted(items.items(), key=lambda x: x[1], reverse=True)\n    expensive = list(items_sorted[:n])\n    \n    return expensive\n    \ndef nth_expensive_item(items,n):\n    '''\n    Write a function to find the nth most expensive item in a given dataset.\n    '''\n    expensive = expensive_items(items,n)\n    \n    return expensive[-1][0]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(len(items)):\n        heapq.heappush(heap,(-1 * items[i], i+1))\n    return heap[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a dictionary with item as key and price as value\n    items = {key: value for key, value in items}\n    # Sort the dictionary based on item's prices\n    items = sorted(items.items(), key=lambda x: x[1], reverse=True)\n    # Return the n items with highest prices\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    print(items)\n    #returns the items that are expensive and ordered by price\n    return heapq.nlargest(n,items,key = lambda x: x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    items = {'apple':2, 'banana':4, 'orange':1}\n    for item in items.keys():\n        result.append((items[item],item))\n    heapq.heapify(result)\n    return result[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #Sort the items in increasing order\n    items.sort(key=lambda x: x[2], reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:n+1]\n    \nprint(split_Arr([1,2,3,4], 2))\nprint(split_Arr([1,2,3,4], 1))\nprint(split_Arr([1,2,3,4], 0))\nprint(split_Arr([1,2,3,4], 5))\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if (n < 0 or n > len(l)):\n        return None\n    else:\n        return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        raise ValueError('List length is smaller than the index value')\n    return l[:n] + l[n:][:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(0, len(l)):\n        if i%n==0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.extend(l2)\n    return l1\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if not isinstance(l, list):\n        raise TypeError\n    if not isinstance(n, int):\n        raise TypeError\n    if n < 0:\n        raise ValueError\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n<len(l):\n        return l[:n]+l[n+1:]\n    else:\n        return l\n    "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l[:n]\n    l.extend(l[n:])\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    s = ''\n    for i in range(0, len(l)):\n        if i == n-1:\n            s = s + l[i]\n        else:\n            s = s + l[i] + ','\n    return s\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    a = tuple(listx)\n    return a\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    a = dict(listx)\n    return a\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    a = set(listx)\n    return a\n    \ndef list_frozenset(listx):\n    '''\n    Write a function to convert a list to a frozenset.\n    '''\n    a = frozenset(listx)\n    return a\n    \ndef list_range(num):\n    '''\n    Write a function to return the range.\n    '''\n    a = range(num)\n    return a\n    \ndef list_iter(num):\n    '''\n    Write a function to return the range object.\n    '''\n    a = range(num)\n    return a\n    \ndef list_reversed(listx):\n    '''\n    Write a function to return the reversed list.\n    '''\n    a = listx[::-1]\n    return a\n    \ndef list_reversed_reverse(listx):\n    '''\n    Write a function to return the reversed list.\n    '''\n    a = listx[::-1]\n    return a\n    \ndef list_sorted(listx):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = sorted(listx)\n    return a\n    \ndef list_sorted_reverse(listx):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = sorted(listx, reverse = True)\n    return a\n    \ndef list_sorted_key(listx, key):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = sorted(listx, key = key)\n    return a\n    \ndef list_sorted_key_reverse(listx, key):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = sorted(listx, key = key, reverse = True)\n    return a\n    \ndef list_sorted_key_lambda(listx, key):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = sorted(listx, key = lambda x: x)\n    return a\n    \ndef list_sorted_key_lambda_reverse(listx, key):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = sorted(listx, key = lambda x: x, reverse = True)\n    return a\n    \ndef list_sorted_multiple(listx, key, reverse):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = sorted(listx, key = key, reverse = reverse)\n    return a\n    \ndef list_sorted_multiple_reverse(listx, key, reverse):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = sorted(listx, key = key, reverse = reverse)\n    return a\n    \ndef list_reversed_multiple(listx, key, reverse):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = reversed(listx)\n    return list(a)\n    \ndef list_reversed_multiple_reverse(listx, key, reverse):\n    '''\n    Write a function to return the sorted list.\n    '''\n    a = reversed(listx)\n    return list(a)\n    \ndef list_zip(*args):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = list(zip(*args))\n    return a\n    \ndef list_zip_longest(*args):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = list(zip_longest(*args))\n    return a\n    \ndef list_zip_longest_default(args, fillvalue = None):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = list(zip_longest(*args, fillvalue = fillvalue))\n    return a\n    \ndef list_filter(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = filter(item, listx)\n    return list(a)\n    \ndef list_filter_none(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = filter(None, listx)\n    return list(a)\n    \ndef list_filter_lambda(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = filter(lambda x: x, listx)\n    return list(a)\n    \ndef list_filter_lambda_none(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = filter(lambda x: x, listx)\n    return list(a)\n    \ndef list_filter_multiple(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = filter(item, listx)\n    return list(a)\n    \ndef list_filter_multiple_none(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = filter(item, listx)\n    return list(a)\n    \ndef list_filter_multiple_lambda(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = filter(lambda x: x, listx)\n    return list(a)\n    \ndef list_filter_multiple_lambda_none(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = filter(lambda x: x, listx)\n    return list(a)\n    \ndef list_map(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = map(item, listx)\n    return list(a)\n    \ndef list_map_multiple(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = map(item, listx)\n    return list(a)\n    \ndef list_map_multiple_default(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = map(item, listx)\n    return list(a)\n    \ndef list_map_multiple_lambda(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = map(lambda x: x, listx)\n    return list(a)\n    \ndef list_map_multiple_lambda_default(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = map(lambda x: x, listx)\n    return list(a)\n    \ndef list_map_multiple_multiple(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = map(item, listx)\n    return list(a)\n    \ndef list_map_multiple_multiple_default(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = map(item, listx)\n    return list(a)\n    \ndef list_map_multiple_multiple_lambda(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = map(lambda x: x, listx)\n    return list(a)\n    \ndef list_map_multiple_multiple_lambda_default(listx, item):\n    '''\n    Write a function to return the list of tuple.\n    '''\n    a = map(lambda x: x, listx)\n    return list(a)\n    \ndef list_map_multiple_multiple_multiple(listx, item):\n    '"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x = tuple(listx)\n    return x\nprint(list_tuple([2, 4, 6, 8, 9]))\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n    \n    \ndef append_end(lst):\n    '''\n    Write a python function that takes a list and returns a new list with the elements of the list appended to the end of the list.\n    '''\n    new = lst.append([])\n    return lst\n    \ndef test_append_end():\n    '''\n    Write a python function to test your function\n    '''\n    \n    \n    def test(func):\n        '''\n        test your function\n        '''\n        assert func([1,2,3]) == [1,2,3,1,2,3],'should be [1,2,3,1,2,3]'\n        assert func([3,3,4,4]) == [3,3,4,4,3,3,4,4],'should be [3,3,4,4,3,3,4,4]'\n        assert func([]) == [],'should be []'\n        assert func([2,2,2]) == [2,2,2,2,2,2],'should be [2,2,2,2,2,2]'\n        assert func([1]) == [1,1,1],'should be [1,1,1]'\n        assert func([0,0,0]) == [0,0,0,0,0,0],'should be [0,0,0,0,0,0]'\n        assert func([1,1,1,1]) == [1,1,1,1,1,1],'should be [1,1,1,1,1,1]'\n        assert func([1,2,3,4]) == [1,2,3,4,1,2,3,4],'should be [1,2,3,4,1,2,3,4]'\n        assert func([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7,1,2,3,4,5,6,7],'should be [1,2,3,4,5,6,7,1,2,3,4,5,6,7]'\n        print('PASSED')\n        \n        \n    test(append_end)\n    \ndef binary_search(lst, target):\n    '''\n    Write a python function to search for a target in a sorted list.\n    '''\n    \n    # Using the bisect module\n    def binary_search(lst, target):\n        '''\n        binary search on sorted lst\n        '''\n        # check if lst is empty\n        if len(lst) == 0:\n            return -1\n        else:\n            middle = len(lst) // 2\n            if lst[middle] == target:\n                return middle\n            elif lst[middle] > target:\n                return binary_search(lst[:middle], target)\n            else:\n                return binary_search(lst[middle:], target)\n                \n    test = binary_search([1,2,3,4,5], 4)\n    assert test == 3,'should be 3'\n    test = binary_search([1,2,3,4,5], -1)\n    assert test == -1,'should be -1'\n    test = binary_search([1,2,3,4,5], 0)\n    assert test == 0,'should be 0'\n    test = binary_search([1,2,3,4,5], 6)\n    assert test == 4,'should be 4'\n    test = binary_search([1,2,3,4,5], 7)\n    assert test == -1,'should be -1'\n    test = binary_search([1,2,3,4,5], 5)\n    assert test == 2,'should be 2'\n    \n    print('PASSED')\n    \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees.\n    '''\n    # get the shape of the matrix\n    rows, columns = len(matrix), len(matrix[0])\n    # make a new matrix of the same size\n    new_matrix = [[0 for x in range(columns)] for y in range(rows)]\n    # rotate matrix by 90 degrees\n    for i in range(rows):\n        for j in range(columns):\n            new_matrix[columns-j-1][i] = matrix[i][j]\n    return new_matrix\n    \n    \ndef test_rotate_matrix():\n    '''\n    Write a python function to test your function\n    '''\n    \n    \n    def test(func):\n        '''\n        test your function\n        '''\n        matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        new_matrix = [[7,4,1],[8,5,2],[9,6,3]]\n        assert func(matrix) == new_matrix,'should be %s' % new_matrix\n        matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        new_matrix = [[9,7,4],[8,5,1],[3,6,2]]\n        assert func(matrix) == new_matrix,'should be %s' % new_matrix\n        matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        new_matrix = [[3,1,2],[6,5,4],[9,8,7]]\n        assert func(matrix) == new_matrix,'should be %s' % new_matrix\n        matrix = [[1,2,3],[4,5,6],[7,8,9]]\n        new_matrix = [[6,4,1],[5,3,2],[7,8,9]]\n        assert func(matrix) == new_matrix,'should be %s' % new_matrix\n        print('PASSED')\n    \n    test(rotate_matrix)\n    \ndef binary_search(lst, target):\n    '''\n    Write a python function to search for a target in a sorted list.\n    '''\n    \n    # Using the bisect module\n    def binary_search(lst, target):\n        '''\n        binary search on sorted lst\n        '''\n        # check if lst is empty\n        if len(lst) == 0:\n            return -1\n        else:\n            middle = len(lst) // 2\n            if lst[middle] == target:\n                return middle\n            elif lst[middle] > target:\n                return binary_search(lst[:middle], target)\n            else:\n                return binary_search(lst[middle+1:], target)\n                \n    test = binary_search([1,2,3,4,5], 4)\n    assert test == 3,'should be 3'\n    test = binary_search([1,2,3,4,5], -1)\n    assert test == -1,'should be -1'\n    test = binary_search([1,2,3,4,5], 0)\n    assert test == 0,'should be 0'\n    test = binary_search([1,2,3,4,5], 6)\n    assert test == 4,'should be 4'\n    test = binary_search([1,2,3,4,5], 7)\n    assert test == -1,'should be -1'\n    test = binary_search([1,2,3,4,5], 5)\n    assert test == 2,'should be 2'\n    \n    print('PASSED')\n    \ndef test_binary_search():\n    '''\n    Write a python function to test your function\n    '''\n    \n    def test(func):\n        '''\n        test your function\n        '''\n        # test on sorted list\n        lst = [1,2,3,4,5]\n        assert func(lst, 4) == 3,'should be 3'\n        assert func(lst, 5) == 4,'should be 4'\n        assert func(lst, 6) == -1,'should be -1'\n        assert func(lst, 1) == 0,'should be 0'\n        assert func(lst, 2) == 1,'should be 1'"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    lst = sorted(nums)\n    return lst[-1] - lst[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        elif i < smallest:\n            smallest = i\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_index = 0\n    max_index = 0\n    min_num = nums[0]\n    max_num = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n            max_index = i\n        if nums[i] < min_num:\n            min_num = nums[i]\n            min_index = i\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #minimum = min(nums)\n    #max = max(nums)\n    #print(min(nums)-max(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = list(set(nums))\n    diff = max(nums) - min(nums)\n    return diff\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    l = []\n    if a == b:\n        return a\n    elif a < b:\n        for i in range(a+1,b):\n            if i ** 2 == i:\n                l.append(i)\n        return l\n    else:\n        for i in range(a,b-1):\n            if i ** 2 == i:\n                l.append(i)\n        return l\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < 0 or b < 0:\n        raise ValueError('invalid input')\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    for i in range(a, b):\n        if is_square(i):\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a <= b:\n        for i in range(a, b + 1):\n            if (i**2) == i:\n                print(i, end ='')\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    range1 = range(a, b + 1)\n    list1 = []\n    for i in range1:\n        if i ** 2 == i:\n            list1.append(i)\n    return list1\n    \n    \n    \n    \nprint(perfect_squares(3, 4)) # [3, 4]\nprint(perfect_squares(5, 7)) # [5]\nprint(perfect_squares(0, 2)) # []\nprint(perfect_squares(2, 3)) # []\nprint(perfect_squares(3, 5)) # []\nprint(perfect_squares(2, 5)) # [4]\nprint(perfect_squares(4, 5)) # [4]\nprint(perfect_squares(0, 3)) # []\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return int(a **.5) * int(b **.5)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    import math\n    \n    def is_perfect_square(x):\n        s = int(math.sqrt(x))\n        return s*s == x\n    \n    return (is_perfect_square(a) and is_perfect_square(b)) or (is_perfect_square(b) and is_perfect_square(a))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    for i in range(a,b+1):\n        if i**0.5==int(i**0.5):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (a <= 0 or b <= 0):\n        return []\n    if (a > b):\n        a, b = b, a\n    res = []\n    for i in range(a, b + 1):\n        if (i * i <= b):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    import math\n    return (math.sqrt(a), math.sqrt(b))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x * math.cos(math.radians(y)),y * math.sin(math.radians(y))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if(y==0):\n        return(x,0)\n    r=x/y\n    a=cmath.sqrt(1+(r**2))\n    x=a*r\n    if(x<=0):\n        return(r*-1,r)\n    return(x,r)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    return r,x,y\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    d=(x2-x1)**2+(y2-y1)**2\n    return d**0.5\ndef distance_2d(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    d=(x2-x1)**2+(y2-y1)**2\n    return d\ndef distance_3d(x1,y1,z1,x2,y2,z2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    d=(x2-x1)**2+(y2-y1)**2+(z2-z1)**2\n    return d**0.5\ndef area_polygon(x,y):\n    '''\n    Write a function to calculate the area of a polygon.\n    '''\n    area=0.0\n    for i in range(len(x)-1):\n        area+=(x[i]*y[i+1])-(x[i+1]*y[i])\n    area/=2\n    return area\ndef area_segment(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the area of a segment.\n    '''\n    area=(x2-x1)*(y1+y2)/2\n    return area\ndef area_parallelogram(x,y,a,b):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    area=(a*b)\n    return area\ndef area_trapezium(x,y,a,b,c):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    area=(a+b+c)*0.5\n    return area\ndef area_triangle(x,y,a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    area=0.5*(a+b+c)\n    return area\ndef area_circle(x,y,r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    area=cmath.pi*r**2\n    return area\ndef area_ellipse(x,y,a,b):\n    '''\n    Write a function to calculate the area of a ellipse.\n    '''\n    area=a*b*cmath.pi/4\n    return area\ndef area_parabola(x,y):\n    '''\n    Write a function to calculate the area of a parabola.\n    '''\n    area=x*y\n    return area\ndef area_parabola_2d(x,y):\n    '''\n    Write a function to calculate the area of a parabola.\n    '''\n    area=x*y\n    return area\ndef area_parabola_3d(x,y,z):\n    '''\n    Write a function to calculate the area of a parabola.\n    '''\n    area=x*y*z\n    return area\ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    volume=1.0/3*r**2*h\n    return volume\ndef volume_cone_2d(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    volume=1.0/3*r**2*h\n    return volume\ndef volume_cone_3d(r,h,v):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    volume=1.0/3*r**2*h*v\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=4/3*cmath.pi*r**3\n    return volume\ndef volume_sphere_2d(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=4/3*cmath.pi*r**3\n    return volume\ndef volume_sphere_3d(r,v):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    volume=4/3*cmath.pi*r**3*v\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume=1/3*r**2*h\n    return volume\ndef volume_cylinder_2d(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume=1/3*r**2*h\n    return volume\ndef volume_cylinder_3d(r,h,v):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume=1/3*r**2*h*v\n    return volume\ndef volume_cylinder_4d(r,h,v,n):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    volume=1/3*r**2*h*v*n\n    return volume\ndef volume_hexahedron(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to calculate the volume of a hexahedron.\n    '''\n    volume=2/3*a*b*c*d*e*f*g*h\n    return volume\ndef volume_hexahedron_2d(a,b,c,d,e,f,g):\n    '''\n    Write a function to calculate the volume of a hexahedron.\n    '''\n    volume=2/3*a*b*c*d*e*f*g\n    return volume\ndef volume_hexahedron_3d(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to calculate the volume of a hexahedron.\n    '''\n    volume=2/3*a*b*c*d*e*f*g*h\n    return volume\ndef volume_hexahedron_4d(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to calculate the volume of a hexahedron.\n    '''\n    volume=2/3*a*b*c*d*e*f*g*h*i\n    return volume\ndef volume_tetrahedron(a,b,c,d):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    volume=1/4*a*b*c*d\n    return volume\ndef volume_tetrahedron_2d(a,b,c,d):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    volume=1/4*a*b*c*d\n    return volume\ndef volume_tetrahedron_3d(a,b,c,d,e):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    volume=1/4*a*b*c*d*e\n    return volume\ndef volume_tetrahedron_4d(a,b,c,d,e,f):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    volume=1/4*a*b*c*d*e*f\n    return volume\ndef volume_cube(a,b,c):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    volume=a*b*c*c\n    return volume\ndef volume_cube_2d(a,b,c):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    volume=a*b"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=int(round(cmath.sqrt(x**2+y**2),0))\n    angle=int(round(cmath.degrees(cmath.atan2(y,x)),0))\n    return r,angle\n    \ndef polar_rect_closest(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_base=cmath.sqrt(x**2)\n    y_base=cmath.sqrt(y**2)\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    r=min(r_base,r_angle)\n    angle=min(r_angle,360-r_angle)\n    return r,angle\n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=int(round(x,0))\n    angle=int(round(y,0))\n    return r,angle\n    \ndef rect_polar_closest(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_base=x\n    y_base=y\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    r=min(r_base,r_angle)\n    angle=min(r_angle,360-r_angle)\n    return r,angle\n    \ndef rect_rect(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    angle_difference=angle2-angle1\n    r=int(round(abs(r1-r2),0))\n    angle=int(round(abs(angle_difference),0))\n    return r,angle\n    \ndef rect_rect_closest(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_difference=r2*abs(cmath.cos(angle2-angle1))\n    y_difference=r2*abs(cmath.sin(angle2-angle1))\n    x_base=int(round(x_difference,0))\n    y_base=int(round(y_difference,0))\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    r=min(r_base,r_angle)\n    angle=min(r_angle,360-r_angle)\n    return r,angle\n    \ndef rect_rect_closest_rec(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_difference=r2*abs(cmath.cos(angle2-angle1))\n    y_difference=r2*abs(cmath.sin(angle2-angle1))\n    x_base=int(round(x_difference,0))\n    y_base=int(round(y_difference,0))\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    r=min(r_base,r_angle)\n    angle=min(r_angle,360-r_angle)\n    return r,angle\n    \ndef rect_rect_distance(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_difference=r2*abs(cmath.cos(angle2-angle1))\n    y_difference=r2*abs(cmath.sin(angle2-angle1))\n    x_base=int(round(x_difference,0))\n    y_base=int(round(y_difference,0))\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    distance=int(round(x_base+y_base,0))\n    return distance\n    \ndef rect_rect_distance_rec(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_difference=r2*abs(cmath.cos(angle2-angle1))\n    y_difference=r2*abs(cmath.sin(angle2-angle1))\n    x_base=int(round(x_difference,0))\n    y_base=int(round(y_difference,0))\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    distance=int(round(x_base+y_base,0))\n    return distance\n    \ndef rect_rect_distance_rec_closest(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_difference=r2*abs(cmath.cos(angle2-angle1))\n    y_difference=r2*abs(cmath.sin(angle2-angle1))\n    x_base=int(round(x_difference,0))\n    y_base=int(round(y_difference,0))\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    distance=int(round(x_base+y_base,0))\n    return distance\n    \ndef rect_rect_distance_closest(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x_difference=r2*abs(cmath.cos(angle2-angle1))\n    y_difference=r2*abs(cmath.sin(angle2-angle1))\n    x_base=int(round(x_difference,0))\n    y_base=int(round(y_difference,0))\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    distance=int(round(x_base+y_base,0))\n    return distance\n    \ndef rect_rect_angle(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    angle_difference=angle2-angle1\n    x_difference=r2*abs(cmath.cos(angle_difference))\n    y_difference=r2*abs(cmath.sin(angle_difference))\n    x_base=int(round(x_difference,0))\n    y_base=int(round(y_difference,0))\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    angle=int(round(r_angle,0))\n    return angle\n    \ndef rect_rect_angle_rec(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    angle_difference=angle2-angle1\n    x_difference=r2*abs(cmath.cos(angle_difference))\n    y_difference=r2*abs(cmath.sin(angle_difference))\n    x_base=int(round(x_difference,0))\n    y_base=int(round(y_difference,0))\n    r_base=int(round(x_base,0))\n    r_angle=int(round(y_base,0))\n    angle=int(round(r_angle,0))\n    return angle\n    \ndef rect_rect_angle_closest(r1,angle1,r2,angle2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    angle_difference=angle2-angle1\n    x_difference="
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x * x + y * y\n    b = 2 * x * y\n    return a, b\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    a = cmath.acos(x/r)\n    b = cmath.acos(y/r)\n    x_r = r*a.real\n    y_r = r*a.imag\n    x_i = r*b.real\n    y_i = r*b.imag\n    x = x_r*cmath.cos(a) + x_i*cmath.sin(a)\n    y = y_r*cmath.cos(b) + y_i*cmath.sin(b)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    a = r * cmath.exp(theta * 1j)\n    if r == 0:\n        return complex(0,0)\n    elif r > 0:\n        return a,theta\n    else:\n        return -a,cmath.pi-theta\ndef pol_rect_conj(pol_x, pol_y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if pol_x == 0:\n        return complex(0,0)\n    if pol_y == 0:\n        return complex(0,0)\n    if pol_x == 1 and pol_y == 0:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == 1:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == -1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    else:\n        a = pol_x + 1j * pol_y\n        return a\ndef pol_rect_conj_conj(pol_x, pol_y):\n    if pol_x == 0:\n        return complex(0,0)\n    if pol_y == 0:\n        return complex(0,0)\n    if pol_x == 1 and pol_y == 0:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == 1:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == -1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    else:\n        a = pol_x - 1j * pol_y\n        return a\ndef polar_rect_conj(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    a = r * cmath.exp(theta * 1j)\n    if r == 0:\n        return complex(0,0)\n    elif r > 0:\n        return complex(a,theta)\n    else:\n        return complex(a,cmath.pi-theta)\ndef plo_rect(x,y,z):\n    '''\n    Write a function to convert 3D coordinates to 2D coordinates.\n    '''\n    if z == 1:\n        return x,y\n    elif z == 0:\n        return 0,0\n    else:\n        if x == 0:\n            return 0,z\n        if y == 0:\n            return z,0\n        else:\n            return x,y\ndef cart_plo(x,y,z):\n    '''\n    Write a function to convert 2D coordinates to 3D coordinates.\n    '''\n    if z == 1:\n        return x,y,z\n    elif z == 0:\n        return 0,0,0\n    else:\n        if x == 0:\n            return 0,0,z\n        if y == 0:\n            return x,0,z\n        else:\n            return x,y,z\ndef rect_plo(x,y):\n    '''\n    Write a function to convert 2D coordinates to 3D coordinates.\n    '''\n    return 0,0,1\ndef rot_x(a):\n    '''\n    Write a function to rotate an angle.\n    '''\n    return a + 2.2\ndef rot_y(a):\n    '''\n    Write a function to rotate an angle.\n    '''\n    return a - 4.6\ndef rot_z(a):\n    '''\n    Write a function to rotate an angle.\n    '''\n    return a + 2.2\ndef pol_rect_conj_conv(pol_x, pol_y, pol_z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if pol_x == 0:\n        return complex(0,0)\n    if pol_y == 0:\n        return complex(0,0)\n    if pol_z == 0:\n        return complex(0,0)\n    if pol_x == 1 and pol_y == 0:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == 1:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == -1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == -1 and pol_y == 1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == 1:\n        return complex(0,0)\n    else:\n        a = pol_x + 1j * pol_y\n        return a\ndef pol_rect_conj_conv_conv(pol_x, pol_y, pol_z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if pol_x == 0:\n        return complex(0,0)\n    if pol_y == 0:\n        return complex(0,0)\n    if pol_z == 0:\n        return complex(0,0)\n    if pol_x == 1 and pol_y == 0:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == 1:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == -1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == -1 and pol_y == 1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == 1:\n        return complex(0,0)\n    else:\n        a = pol_x - 1j * pol_y\n        return a\ndef pol_rect_conj_conv_conv_conj(pol_x, pol_y, pol_z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    if pol_x == 0:\n        return complex(0,0)\n    if pol_y == 0:\n        return complex(0,0)\n    if pol_z == 0:\n        return complex(0,0)\n    if pol_x == 1 and pol_y == 0:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == 1:\n        return complex(0,0)\n    elif pol_x == 0 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == -1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == -1:\n        return complex(0,0)\n    elif pol_x == -1 and pol_y == 1:\n        return complex(0,0)\n    elif pol_x == 1 and pol_y == 1:\n        return complex(0,0)\n    els"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = sqrt(x**2 + y**2)\n    angle = degrees(atan(y/x))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    theta=cmath.acos(y/r)\n    t=theta*2*cmath.pi\n    return round(r*cmath.cos(t),4),round(r*cmath.sin(t),4)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=x**2+y**2\n    t=2*cmath.pi*cmath.sqrt(r)\n    theta=cmath.acos(y/r)\n    return round(r,4),round(theta,4)"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = ((x**2) + (y**2))**0.5\n    theta = cmath.phase(complex(x,y))\n    return (r, theta)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = (x**2 + y**2)**0.5\n    theta = cmath.phase(complex(x,y))\n    return (r, theta)\nprint(polar_rect(2,3))\nprint(rect_polar(2,3))"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if not newList: \n        return None\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a=newList[0]\n    b=newList[-1]\n    newList[0]=b\n    newList[-1]=a\n    print(newList)\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.pop(0)\n    newList.append(newList.pop())\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \n    \n    \nif __name__ == \"__main__\":\n    a = swap_List([\"cat\", \"dog\", \"rat\"])\n    print(a)"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int((fact(n) / (fact(k) * fact(n - k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #You have n instances of the binomial distribution and you have k trials.  Your task is to return the sum of the product of the kth values of the first n integers.\n    #Example: For n = 5 and k = 3, the result would be 0.16\n    # You can assume that n and k are positive integers.\n    return math.factorial(n)/math.factorial(n-k)\n    #Solution:\n    # from math import factorial\n    # fact = factorial(n)\n    # prod = 1\n    # for i in range(1,n+1):\n    #     prod = prod*(i)\n    # return fact/prod\n    #=======================================================\n    #=======================================================\n    #You have n instances of the binomial distribution and you have k trials.  Your task is to return the sum of the product of the kth values of the first n integers.\n    #Example: For n = 5 and k = 3, the result would be 0.16\n    # You can assume that n and k are positive integers.\n    \n    # Solution:\n    # n, k = 5, 3\n    # fact = 1\n    # for i in range(1,n+1):\n    #     fact = fact * (i)\n    # prod = 1\n    # for j in range(1,k+1):\n    #     prod = prod * (j)\n    # return fact/prod\n    #=======================================================\n    #=======================================================\n    \n    #\n    # a=5\n    # b=2\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=0\n    # # b=1\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=4\n    # # b=3\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=3\n    # # b=2\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=2\n    # # b=1\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=1\n    # # b=1\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    #\n    # # a=0\n    # # b=1\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=1\n    # # b=1\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=2\n    # # b=1\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=1\n    # # b=2\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    #\n    # # a=0\n    # # b=2\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=1\n    # # b=2\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=2\n    # # b=2\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    #\n    # # a=1\n    # # b=2\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=0\n    # # b=2\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    #\n    # # a=2\n    # # b=3\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=3\n    # # b=3\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    #\n    # # a=3\n    # # b=4\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=4\n    # # b=4\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=4\n    # # b=5\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=5\n    # # b=5\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=5\n    # # b=6\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=6\n    # # b=6\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=6\n    # # b=7\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=7\n    # # b=7\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=7\n    # # b=8\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=8\n    # # b=8\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=8\n    # # b=9\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=9\n    # # b=9\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    #\n    # # a=9\n    # # b=10\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=10\n    # # b=10\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=10\n    # # b=11\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=11\n    # # b=11\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    #\n    # # a=11\n    # # b=12\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=12\n    # # b=12\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=12\n    # # b=13\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=13\n    # # b=13\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    #\n    # # a=13\n    # # b=14\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=14\n    # # b=14\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=14\n    # # b=15\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=15\n    # # b=15\n    # # for i in range(0,a):\n    # #     print(i)\n    #\n    # # a=15\n    # # b=16\n    # # for i in range(0,a):\n    # #    "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initializing variables\n    a,b = 1,1\n    sum = 0\n    # Loop to generate the binomial co-efficients\n    for i in range(1,n+1):\n        # Calculating a,b, sum\n        a,b = b,a+b\n        sum+=b\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n==0 or k==0):\n        return 1\n    return n*(binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(n+1):\n        result += comb(n,i) * comb(i,k)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    if k == 0 or n == k:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        for i in range(n-k+1):\n            sum += binomial_coeff(i,i+k-1)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    p = 1\n    for i in range(1,n+1):\n        p *= i\n    q = 1\n    for i in range(1,k+1):\n        q *= i\n    ans = p//q\n    print(ans)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    ans = 1\n    for i in range(k):\n        ans *= (n+i)\n    return ans\nprint(binomial_Coeff(6,4))"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(n+1):\n        result += binomial_coeff(n,i) * binomial_coeff(k,i)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0 or n==k:\n        return 1\n    else:\n        return (binomial_Coeff(n-1, k-1)+binomial_Coeff(n-1, k))\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    if(len(ip) == 0):\n        return ''\n    if(len(ip) == 1):\n        return str(ip[0])\n    if(len(ip) == 2):\n        if(ip[0] == '0'):\n            return str(ip[1])\n        else:\n            return str(ip[0])\n    if(len(ip) == 3):\n        if(ip[0] == '0'):\n            if(ip[1] == '0'):\n                return str(ip[2])\n            else:\n                return str(ip[1])\n        else:\n            return str(ip[0])\n    if(len(ip) == 4):\n        if(ip[0] == '0'):\n            if(ip[1] == '0'):\n                if(ip[2] == '0'):\n                    return str(ip[3])\n                else:\n                    return str(ip[2])\n            else:\n                if(ip[3] == '0'):\n                    return str(ip[2])\n                else:\n                    return str(ip[0])\n        else:\n            if(ip[1] == '0'):\n                if(ip[2] == '0'):\n                    return str(ip[3])\n                else:\n                    return str(ip[2])\n            else:\n                if(ip[3] == '0'):\n                    return str(ip[2])\n                else:\n                    return str(ip[0])\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(\"0+\", \"\", ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    i = len(ip)-1\n    \n    while i >= 0:\n        if ip[i] == \".\":\n            break\n        elif ip[i] == \"0\":\n            ip = ip[0:i] + ip[i+1:]\n            break\n        i = i - 1\n    return ip\n    \ndef removezero_domain(domain):\n    '''\n    Write a function to remove leading zeroes from a domain name.\n    '''\n    i = len(domain)-1\n    while i >= 0:\n        if domain[i] == \".\":\n            break\n        elif domain[i] == \"0\":\n            domain = domain[0:i] + domain[i+1:]\n            break\n        i = i - 1\n    return domain\n    \n    \ndef remove_quotes(string):\n    if string == \"\":\n        return \"\"\n    if string[0] == \"'\" and string[-1] == \"'\":\n        return string[1:-1]\n    if string[0] == '\"' and string[-1] == '\"':\n        return string[1:-1]\n    return string\n    \ndef list_ip(address):\n    '''\n    Write a function to convert an ip address into its subnet mask.\n    '''\n    # define functions to deal with output\n    def ip_int_to_bin_string(ip_int):\n        return bin(ip_int)[2:]\n    def bin_string_to_ip_int(bin_string):\n        return int(bin_string, 2)\n    def ip_bin_to_string(ip_bin):\n        return str(ip_bin_to_ip_int(ip_bin))\n    def ip_string_to_bin_string(ip_string):\n        return str(int(ip_string, 10))\n    \n    # start procedure\n    int_value = 0\n    for i in range(0,len(address),8):\n        int_value += int(address[i:i+8],2) << (32-i-8)\n    return ip_int_to_bin_string(int_value)\n    \ndef list_domain(domain):\n    '''\n    Write a function to convert a domain name into its host name.\n    '''\n    domain = domain.split(\".\")\n    \n    def swap_character(ch):\n        return ch.swapcase()\n    \n    domain = map(swap_character, domain)\n    \n    domain = ''.join(domain)\n    return domain\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_numbers = re.sub(r'\\.', '', ip)\n    for i in range(len(ip_numbers)):\n        if ip_numbers[i] == '0':\n            ip_numbers = ip_numbers[i:]\n            ip_numbers = re.sub(r'\\.', '', ip_numbers)\n            break\n        else:\n            continue\n    return ip_numbers\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        if '.' in ip:\n            if '0' in ip:\n                x,y,z,a = ip.split('.')\n                x = int(x)\n                y = int(y)\n                z = int(z)\n                a = int(a)\n                if a == 0:\n                    ip = str(x) + '.' + str(y) + '.' + str(z)\n                if a!= 0:\n                    ip = str(x) + '.' + str(y) + '.' + str(z) + '.' + str(a)\n        elif ':' in ip:\n            if '0' in ip:\n                x,y,z,a = ip.split(':')\n                x = int(x)\n                y = int(y)\n                z = int(z)\n                a = int(a)\n                if a == 0:\n                    ip = str(x) + ':' + str(y) + ':' + str(z)\n                if a!= 0:\n                    ip = str(x) + ':' + str(y) + ':' + str(z) + ':' + str(a)\n        else:\n            pass\n        print(ip)\n    except:\n        print('It does not exist')\n        exit()\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0+\", \"\", ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a = re.sub('0+','',ip)\n    return a\n    \ndef remove_prefix(str1, prefix):\n    if str1.startswith(prefix):\n        return str1[len(prefix):]\n    return str1\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip(\"0\")\n    \ndef test_removezero_ip():\n    assert removezero_ip(\"255.255.255.254\") == \"255.255.255.254\"\n    assert removezero_ip(\"255.255.255.00\") == \"255.255.255.00\"\n    assert removezero_ip(\"0000.0000.0000.000\") == \"0000.0000.0000.000\"\n    assert removezero_ip(\"0.255.255.255\") == \"0.255.255.255\"\n    assert removezero_ip(\"0.000.000.000\") == \"0.000.000.000\"\n    assert removezero_ip(\"0.00.00.00\") == \"0.00.00.00\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    assert removezero_ip(\"0.0.0.0\""
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    import re\n    import ipaddress\n    \n    #Function to remove leading zeroes\n    def removezero(ip):\n        #Convert to String\n        ip = str(ip)\n        #Remove leading zeroes\n        ip = re.sub('0+', '', ip)\n        #Remove trailing zeroes\n        ip = re.sub('\\.0+$', '', ip)\n        \n        return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    return abs(sum(even_list) - sum(odd_list))\n    \nprint(diff_even_odd([-1, 5, 3, -2, -4, 8, -6]))\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)<=1:\n        return 0\n    if list1[0]%2==0 and list1[1]%2!=0:\n        return list1[0]-list1[1]\n    else:\n        return list1[0]-list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - (list1[1] - (list1[1] - list1[2])/2)\n    \n    "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    odd_num = 0\n    even_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = even_num + num\n        else:\n            odd_num = odd_num + num\n    return abs(even_num - odd_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd,even=0,0\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even+=list1[i]\n        else:\n            odd+=list1[i]\n    print(abs(even-odd))\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    list2.append(list1[0])\n    list2.append(list1[1])\n    for i in range(2,len(list1),2):\n        list2.append(list1[i])\n    for i in range(1,len(list1),2):\n        list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff_even = 0\n    diff_odd = 0\n    for num in range(len(list1)):\n        if num % 2 == 0:\n            diff_even += list1[num]\n        else:\n            diff_odd += list1[num]\n    return abs(diff_even - diff_odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    a = 0\n    b = 1\n    for i in range(len(list1)):\n        if i == 0:\n            if list1[i]%2 == 0:\n                a = list1[i]\n            else:\n                a = list1[i]\n                break\n        elif i == 1:\n            if list1[i]%2 == 0:\n                b = list1[i]\n            else:\n                b = list1[i]\n                break\n        elif i > 1:\n            if list1[i]%2 == 0:\n                if a == list1[i]:\n                    a = list1[i]\n                    break\n                else:\n                    a = list1[i]\n            else:\n                if b == list1[i]:\n                    b = list1[i]\n                    break\n                else:\n                    b = list1[i]\n    return abs(a-b)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] - list1[1])\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!=len(str2):\n        return -1\n    \n    #c1=0\n    #for i in str1:\n    #    if i=='0':\n    #        c1+=1\n    #c2=0\n    #for i in str2:\n    #    if i=='0':\n    #        c2+=1\n    #if c1!=c2:\n    #    return -1\n    c1=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            c1+=1\n    return c1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    if n%2 : \n        return -1\n    count = 0\n    for i in range(n//2) : \n        if str1[i]!= str2[i] : \n            count += 1\n    return count\n        \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = ''.join(str1.split('1'))\n    str2 = ''.join(str2.split('1'))\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            swaps += 1\n            t = str1[i]\n            str1 = str1[:i] + str1[i+1:]\n            str2 = str2[:i] + str2[i+1:]\n            str1 = str1[:i] + t + str1[i:]\n            str2 = str2[:i] + t + str2[i:]\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    arr1 = list(str1)\n    arr2 = list(str2)\n    len1 = len(arr1)\n    len2 = len(arr2)\n    # print(arr1,arr2,len1,len2)\n    # print(\"arr1\",arr1,arr2,len1,len2)\n    if len1 > len2:\n        arr2 = [\"0\" for i in range(len2)] + arr2\n        len2 = len(arr2)\n        \n    else:\n        arr1 = [\"0\" for i in range(len1)] + arr1\n        len1 = len(arr1)\n    \n    for i in range(len1):\n        if arr1[i]!= arr2[i]:\n            arr1[i], arr2[i] = arr2[i], arr1[i]\n            # print(arr1,arr2,len1,len2)\n            # print(i)\n            # print(arr1,arr2,len1,len2)\n            # print(len1,len2)\n    return(len1-len2)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # converting str1 and str2 to int \n    # int(s) convert the string s to integer\n    n1,n2 = int(str1,2),int(str2,2) \n    # counts the number of swap operations to convert str1 to str2\n    count = 0\n    # s1 and s2 are the swapped numbers \n    s1,s2 = 0,0\n    # Converting str1 to str2 \n    while n2!= 0: \n        # In case of number to be swapped is odd \n        if n2 & 1: \n            # if s1 is not equal to n1 \n            if s1!= n1: \n                # then swap them \n                s1 = n1\n                s2 = n2\n                n1 = s2 \n                n2 = s1 \n                count += 1\n        # shift the leftmost bit of n2 \n        n2 >>= 1\n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1==str2 : return 0\n    cnt = 0\n    m = ''\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            m = max(m,str1[i],str2[i])\n            cnt+=1\n    return cnt+min(min(len(str1)-i for i in range(len(str1)) if str1[i] == m),\n                   len(str2)-i for i in range(len(str2)) if str2[i] == m)"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    arr1 = list(str1)\n    arr2 = list(str2)\n    print(\"Original Strings\",str1,str2)\n    print(\"List\",arr1,arr2)\n    # Counts no. of swaps for converting arr1 to arr2\n    for i in range(0,len(arr1)) :\n        if arr1[i]!= arr2[i] :\n            arr1[i],arr2[i] = arr2[i],arr1[i]\n            print(\"Swapped Values\",arr1,arr2)\n            break\n    print(\"Final List\",arr1,arr2)\n    print(\"No. of swaps = \",len(arr1))\n    return len(arr1)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    a = list(str1)\n    b = list(str2)\n    j = 0\n    i = 0\n    c = 0\n    while(i<n and j<n):\n        if (a[i] == '0' and b[j] == '1') or (a[i] == '1' and b[j] == '0'):\n            c+=1\n            i+=1\n            j+=1\n        elif (a[i] == '0' and b[j] == '0') or (a[i] == '1' and b[j] == '1'):\n            c+=1\n            j+=1\n        elif (a[i] == '0' and b[j] == '1') or (a[i] == '1' and b[j] == '0'):\n            c+=1\n            i+=1\n    return c\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def count_minimum_swaps(str1,str2):\n        '''\n        Using Hashmap,find minimum swaps required to convert str1 to str2\n        '''\n        table = {str1[i]:i for i in range(len(str1))}\n        str2 = sorted(str2)\n        ans = 0\n        for i in range(len(str1)):\n            if table.get(str1[i])!=None and table.get(str2[i])!=None and table[str1[i]]!=table[str2[i]]:\n                ans += 1\n                table[str1[i]] = table[str2[i]]\n                table[str2[i]] = table[str1[i]]\n        return ans\n    '''\n    Find minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_2(str1,str2):\n        '''\n        Using HashMap,find minimum number of swaps required to convert str1 to str2\n        '''\n        table = {str1[i]:i for i in range(len(str1))}\n        str2 = sorted(str2)\n        ans = 0\n        for i in range(len(str1)):\n            if table.get(str1[i])!=None and table.get(str2[i])!=None and table[str1[i]]!=table[str2[i]]:\n                ans += 1\n                table[str1[i]] = table[str2[i]]\n                table[str2[i]] = table[str1[i]]\n        return ans\n    '''\n    Using Greedy algorithm,Find minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_3(str1,str2):\n        '''\n        Using Greedy algorithm,Find minimum number of swaps required to convert str1 to str2\n        '''\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                count += 1\n        return count\n    '''\n    Using MinHeap to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_4(str1,str2):\n        '''\n        Using MinHeap,Find minimum number of swaps required to convert str1 to str2\n        '''\n        heap = []\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                heapq.heappush(heap,(str2[i],str1[i]))\n                count += 1\n        return count\n    '''\n    Using MaxHeap to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_5(str1,str2):\n        '''\n        Using MaxHeap,Find minimum number of swaps required to convert str1 to str2\n        '''\n        heap = []\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                heapq.heappush(heap,(-str2[i],str1[i]))\n                count += 1\n        return count\n    '''\n    Using UnionFind to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_6(str1,str2):\n        '''\n        Using UnionFind,Find minimum number of swaps required to convert str1 to str2\n        '''\n        uf = UnionFind(len(str1))\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                uf.union(i,uf.root(str2[i]))\n                count += 1\n        return count\n    '''\n    Using UnionFind to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_7(str1,str2):\n        '''\n        Using UnionFind,Find minimum number of swaps required to convert str1 to str2\n        '''\n        uf = UnionFind(len(str1))\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                uf.union(i,uf.root(str1[i]))\n                count += 1\n        return count\n    '''\n    Using UnionFind to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_8(str1,str2):\n        '''\n        Using UnionFind,Find minimum number of swaps required to convert str1 to str2\n        '''\n        uf = UnionFind(len(str1))\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                uf.union(i,uf.root(str2[i]))\n                count += 1\n        return count\n    '''\n    Using UnionFind to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_9(str1,str2):\n        '''\n        Using UnionFind,Find minimum number of swaps required to convert str1 to str2\n        '''\n        uf = UnionFind(len(str1))\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                uf.union(i,uf.root(str2[i]))\n                count += 1\n        return count\n    '''\n    Using UnionFind to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_10(str1,str2):\n        '''\n        Using UnionFind,Find minimum number of swaps required to convert str1 to str2\n        '''\n        uf = UnionFind(len(str1))\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                uf.union(i,uf.root(str1[i]))\n                count += 1\n        return count\n    '''\n    Using UnionFind to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_11(str1,str2):\n        '''\n        Using UnionFind,Find minimum number of swaps required to convert str1 to str2\n        '''\n        uf = UnionFind(len(str1))\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                uf.union(i,uf.root(str2[i]))\n                count += 1\n        return count\n    '''\n    Using UnionFind to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_12(str1,str2):\n        '''\n        Using UnionFind,Find minimum number of swaps required to convert str1 to str2\n        '''\n        uf = UnionFind(len(str1))\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                uf.union(i,uf.root(str1[i]))\n                count += 1\n        return count\n    '''\n    Using UnionFind to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_13(str1,str2):\n        '''\n        Using UnionFind,Find minimum number of swaps required to convert str1 to str2\n        '''\n        uf = UnionFind(len(str1))\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                uf.union(i,uf.root(str2[i]))\n                count += 1\n        return count\n    '''\n    Using UnionFind to get minimum number of swaps required to convert str1 to str2\n    '''\n    def min_swaps_14(str1,str2):\n        '''\n        Using UnionFind,Find minimum number of swaps required to convert str1 to str2\n        '''\n        uf = UnionFind(len(str1))\n        count = "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # your code here\n    return len(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    x = len(tuple_list)\n    y = len(tuple_list[0])\n    return x*y\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=0\n    for i in tuple_list:\n        size+=sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for i in range(len(tuple_list)):\n        tuple_size += sys.getsizeof(tuple_list[i])\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1)==0 or len(arr2)==0:\n        return -1\n    if arr1[0]<arr2[0]:\n        return find_kth_helper(arr1,arr2,0,0,k)\n    else:\n        return find_kth_helper(arr2,arr1,0,0,k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    a = sorted(arr1)\n    b = sorted(arr2)\n    a_index = 0\n    b_index = 0\n    total_index = 0\n    while a_index < len(a) and b_index < len(b):\n        if a[a_index] == b[b_index]:\n            total_index = total_index + 1\n            if total_index == k:\n                return a[a_index]\n            elif total_index > k:\n                b_index += 1\n            else:\n                a_index += 1\n        elif a[a_index] < b[b_index]:\n            a_index += 1\n        else:\n            b_index += 1\n    if total_index < k:\n        return -1\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[-1] > arr2[-1]:\n        return find_kth(arr2, arr1, k)\n    elif arr2[-1] > arr1[-1]:\n        return find_kth(arr1, arr2, k)\n    else:\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        elif k == len(arr1) + len(arr2):\n            return max(arr1[-1], arr2[-1])\n        else:\n            if arr1[len(arr1) - 1] > arr2[len(arr2) - 1]:\n                return find_kth(arr1[:-1], arr2, k - len(arr1) - len(arr2) + 1)\n            elif arr2[len(arr2) - 1] > arr1[len(arr1) - 1]:\n                return find_kth(arr1, arr2[:-1], k - len(arr1) - len(arr2))\n            else:\n                return find_kth(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    def helper(arr1, arr2):\n        if len(arr1) == 0 and len(arr2) == 0:\n            return None\n        if len(arr1) == 0 and len(arr2)!= 0:\n            return arr2[0]\n        if len(arr1)!= 0 and len(arr2) == 0:\n            return arr1[0]\n        \n        mid_element = (len(arr1)+len(arr2)) // 2\n        arr1_mid_index = mid_element - len(arr1)\n        arr2_mid_index = mid_element - len(arr2)\n        \n        if arr1_mid_index < 0:\n            return helper(arr1, arr2[0:arr2_mid_index + 1])\n        if arr2_mid_index < 0:\n            return helper(arr1[0:arr1_mid_index + 1], arr2)\n        \n        if arr1[0] > arr2[0]:\n            return helper(arr1, arr2[arr2_mid_index+1:])\n        if arr1[0] < arr2[0]:\n            return helper(arr1[arr1_mid_index+1:], arr2)\n        return arr1[0]\n        \n    return helper(arr1, arr2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # get the kth element\n    # if k is smaller than min(arr1), pick it from arr1\n    # if k is smaller than min(arr2), pick it from arr2\n    # else, pick the kth element\n    # if the two arrays are of different length, pick the kth element from the shorter array\n    n1, n2 = len(arr1), len(arr2)\n    if n1 < n2:\n        return find_kth(arr2, arr1, k)\n    elif n1 > n2:\n        return find_kth(arr1, arr2, k)\n    else:\n        if k <= n1:\n            return arr1[k - 1]\n        else:\n            return arr2[k - n1 - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1)\n    kth_index = -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == len(arr2):\n        if k > 0:\n            return arr1[k-1]\n        else:\n            return arr2[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if len(arr1) == 0:\n        return -1\n    elif len(arr2) == 0:\n        return -1\n    \n    while len(arr1)!= 0 and len(arr2)!= 0:\n        if arr1[0] < arr2[0]:\n            arr1.pop(0)\n        else:\n            arr2.pop(0)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    min_heap = []\n    for ele in arr1:\n        heappush(min_heap, ele)\n    for ele in arr2:\n        if ele < min_heap[0]:\n            heappush(min_heap, ele)\n        else:\n            heappop(min_heap)\n            heappush(min_heap, ele)\n    return min_heap[0]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    k -= 1\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #create a variable to represent the number\n    new_number = number\n    #create a variable to store the digits\n    digits = []\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp_number = number\n    while temp_number > 0:\n        digit = temp_number % 10\n        sum = sum + digit ** 3\n        temp_number = temp_number // 10\n    if sum == number:\n        return True\n    else:\n        return False\n    \ndef armstrong_number2(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        return False\n    sum = 0\n    temp_number = number\n    while temp_number > 0:\n        digit = temp_number % 10\n        sum = sum + digit ** 3\n        temp_number = temp_number // 10\n    return True if sum == number else False\n    \ndef is_prime(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    for i in range(3, number):\n        if number % i == 0:\n            return False\n    return True\n    \ndef is_prime2(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(number/2)+1):\n            if number % i == 0:\n                return False\n    return True\n    \ndef is_prime3(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    for i in range(3, int(number/2)+1):\n        if number % i == 0:\n            return False\n    return True\n    \ndef is_prime4(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    prime = True\n    for i in range(3, int(number/2)+1):\n        if prime:\n            if number % i == 0:\n                prime = False\n    return prime\n    \ndef is_prime5(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    for i in range(3, int(number/2)+1):\n        if number % i == 0:\n            return False\n    return True\n    \ndef is_prime6(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    \n    # if number is divisible by 2, it is not prime\n    if number % 2 == 0:\n        return False\n    \n    # since 3 is prime, so we start from 6\n    prime = 6\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 1\n    return True\n    \ndef is_prime7(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    # since 3 is prime, so we start from 6\n    prime = 6\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 1\n    return True\n    \ndef is_prime8(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    # since 3 is prime, so we start from 6\n    prime = 3\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 2\n    return True\n    \ndef is_prime9(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    # since 3 is prime, so we start from 6\n    prime = 3\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 2\n    return True\n    \ndef is_prime10(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    \n    # since 3 is prime, so we start from 6\n    prime = 3\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 2\n    return True\n    \ndef is_prime11(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    \n    # since 3 is prime, so we start from 6\n    prime = 3\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 2\n    return True\n    \ndef is_prime12(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    \n    # since 3 is prime, so we start from 6\n    prime = 3\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 2\n    return True\n    \ndef is_prime13(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    # since 3 is prime, so we start from 6\n    prime = 3\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 2\n    return True\n    \ndef is_prime14(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    # since 3 is prime, so we start from 6\n    prime = 3\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 2\n    return True\n    \ndef is_prime15(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    # since 3 is prime, so we start from 6\n    prime = 3\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime += 2\n    return True\n    \ndef is_prime16(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    \n    # since 3 is prime, so we start from 6\n    prime = 3\n    while prime <= number / 2:\n        if number % prime == 0:\n            return False\n        prime +"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        print(\"Please enter a positive integer\")\n        return False\n    if number == 0:\n        return True\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return False\n    num = str(number)\n    len_num = len(num)\n    sum = 0\n    for i in range(0,len_num):\n        val = int(num[i])**len_num\n        sum += val\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 0:\n        print(\"Invalid input, enter positive integers.\")\n        return\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp = temp // 10\n    if number == sum:\n        print(number, \"is an Armstrong number.\")\n    else:\n        print(number, \"is not an Armstrong number.\")\n        return\n        \ndef is_palindrome(number):\n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    number = str(number)\n    if number == number[::-1]:\n        print(number, \"is a palindrome.\")\n    else:\n        print(number, \"is not a palindrome.\")\n        return\n        \ndef is_prime(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number < 2:\n        print(number, \"is not a prime number.\")\n        return\n    for divisor in range(2, number):\n        if number % divisor == 0:\n            print(number, \"is not a prime number.\")\n            return\n    print(number, \"is a prime number.\")\n    return\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp_sum = 0\n    number = int(number)\n    while number > 0:\n        remainder = number % 10\n        temp_sum += remainder ** 3\n        number = number // 10\n    if temp_sum == number:\n        print(\"Yes, it is an armstrong number.\")\n    else:\n        print(\"No, it is not an armstrong number.\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_list = []\n    number_list = list(str(number))\n    sum = 0\n    number_length = len(number_list)\n    for i in range(0,number_length):\n        number = int(number_list[i])\n        sum += (number ** number_length)\n    if sum == number:\n        print(\"yes\")\n    else:\n        print(\"no\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    number_sum = 0\n    for char in number_str:\n        number_sum += int(char)**3\n    return number == number_sum\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # your code here\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    print(f\"The sum is {sum}.\\nThe average is {average:.2f}\")\n    return\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    n_sum = 0\n    n = 1\n    while n < number+1:\n        total = total + n\n        n_sum = n_sum + n\n        n = n+1\n    average = total / number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = 0\n    avg_n = 0\n    for i in range(number + 1):\n        sum_n = sum_n + i\n    avg_n = sum_n / number\n    return sum_n, avg_n\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    return (sum, sum/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    count=0\n    while count<number:\n        sum+=n\n        count+=1\n    average=sum/number\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum = sum + i\n    average = sum/number\n    print(f\"Sum of first {number} natural numbers: {sum}\")\n    print(f\"Average of first {number} natural numbers: {average}\")\n    \ndef insert_at_every_kth_position(list, k):\n    '''\n    Write a function to insert element at every kth position of a list.\n    '''\n    n = len(list)\n    for i in range(n):\n        if i % k == 0:\n            list.insert(i, i)\n    print(list)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1,number+1))/number, sum(range(1,number+1))/len(range(1,number+1))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1,number+1):\n        sum += i\n        count += 1\n    return sum/count\n    \nprint(sum_average(5))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(number):\n        sum = sum + i\n    average = sum / number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    total = 0\n    for i in range(number):\n        sum_ += i\n        total += 1\n        avg = sum_/total\n    return sum_, avg\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        print(\"{0} is even\".format(n))\n    else:\n        print(\"{0} is odd\".format(n))\n        \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 ==0 : \n        print(\"The number is even\")\n    else :\n        print(\"The number is odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        print(n,\" is Even\")\n    else : \n        print(n,\" is Odd\")\n    \n    \n    \n        \ndef is_Even_or_Odd(n) : \n    '''\n    Write a python function to check whether the given number is even or odd.\n    '''\n    if n%2 == 0 : \n        print(n,\" is Even\")\n    else : \n        print(n,\" is Odd\")\n        \n        \n        \n        \ndef is_Even_or_Odd_or_Zero(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or zero.\n    '''\n    if n%2 == 0 : \n        print(n,\" is Even\")\n    elif n%2 == 1 : \n        print(n,\" is Odd\")\n    elif n == 0 : \n        print(n,\" is Zero\")\n    else : \n        print(\"Invalid input\")\n        \n        \n        \ndef list_Of_Number(a,b,c) : \n    '''\n    Write a python function to generate a list of numbers.\n    '''\n    x = list()\n    x.append(a)\n    x.append(b)\n    x.append(c)\n    print(\"The list of number is : \",x)\n    \n    \n    \n    \ndef list_of_Numbers_Using_range(): \n    '''\n    Write a python function to generate a list of numbers using range.\n    '''\n    print(\"The list of number using range : \")\n    x = list()\n    for i in range(5) : \n        x.append(i)\n    print(x)\n    \n    \n    \ndef list_of_Numbers_Using_List_comprehension(): \n    '''\n    Write a python function to generate a list of numbers using list comprehension.\n    '''\n    print(\"The list of number using list comprehension : \")\n    x = [i for i in range(5)]\n    print(x)\n    \n    \n    \ndef list_of_Numbers_Using_List_comprehension_and_range(): \n    '''\n    Write a python function to generate a list of numbers using list comprehension and range.\n    '''\n    print(\"The list of number using list comprehension and range : \")\n    x = [i for i in range(5)]\n    print(x)\n    \n    \n    \n    \ndef list_Of_Numbers_using_conditional_statement(): \n    '''\n    Write a python function to generate a list of numbers using conditional statement.\n    '''\n    x = [i for i in range(5) if i%2 == 0]\n    print(x)\n    \n    \n    \n    \ndef list_Of_Numbers_Using_conditional_statement_and_range(): \n    '''\n    Write a python function to generate a list of numbers using conditional statement and range.\n    '''\n    x = [i for i in range(5) if i%2 == 0]\n    print(x)\n    \n    \n    \n    \ndef list_Of_Numbers_Using_conditional_statement_and_range_and_list_comprehension(): \n    '''\n    Write a python function to generate a list of numbers using conditional statement, range and list comprehension.\n    '''\n    x = [i for i in range(5) if i%2 == 0]\n    print(x)\n    \n    \n    \n    \ndef list_Of_Numbers_Using_conditional_statement_and_range_and_list_comprehension_and_split(): \n    '''\n    Write a python function to generate a list of numbers using conditional statement, range and list comprehension.\n    '''\n    x = [i for i in range(5) if i%2 == 0]\n    print(x)\n    \n    \n    \n    \ndef list_Of_Numbers_Using_conditional_statement_and_range_and_list_comprehension_and_split_and_join(): \n    '''\n    Write a python function to generate a list of numbers using conditional statement, range and list comprehension.\n    '''\n    x = [i for i in range(5) if i%2 == 0]\n    print(x)\n    \n    \n    \n    \ndef list_Of_Numbers_Using_conditional_statement_and_range_and_list_comprehension_and_split_and_join_and_join(): \n    '''\n    Write a python function to generate a list of numbers using conditional statement, range and list comprehension.\n    '''\n    x = [i for i in range(5) if i%2 == 0]\n    print(x)\n    \n    \n    \n    \ndef list_Of_Numbers_Using_conditional_statement_and_range_and_list_comprehension_and_split_and_join_and_join_and_join(): \n    '''\n    Write a python function to generate a list of numbers using conditional statement, range and list comprehension.\n    '''\n    x = [i for i in range(5) if i%2 == 0]\n    print(x)\n    \n    \n    \n    \ndef list_Of_Numbers_Using_conditional_statement_and_range_and_list_comprehension_and_split_and_join_and_join_and_join_and_join(): \n    '''\n    Write a python function to generate a list of numbers using conditional statement, range and list comprehension.\n    '''\n    x = [i for i in range(5) if i%2 == 0]\n    print(x)\n    \n    \n    \n    \ndef list_Of_Numbers_Using_conditional_statement_and_range_and_list_comprehension_and_split_and_join_and_join_and_join_and_join_and_join_and_join(): \n    '''\n    Write a python function to generate a list of numbers using conditional statement, range and list comprehension.\n    '''\n    x = [i for i in range(5) if i%2 == 0]\n    print(x)\n    \n    \n    \n    \ndef list_of_Numbers_Using_List_comprehension_and_join(): \n    '''\n    Write a python function to generate a list of numbers using List comprehension and join.\n    '''\n    x = [\"{}\".format(i) for i in range(1,6)]\n    print(x)\n    \n    \n    \n    \ndef list_of_Numbers_Using_List_comprehension_and_join_and_join(): \n    '''\n    Write a python function to generate a list of numbers using List comprehension and join.\n    '''\n    x = [\"{}\".format(i) for i in range(1,6)]\n    print(x)\n    \n    \n    \n    \ndef list_of_Numbers_Using_List_comprehension_and_join_and_join_and_join(): \n    '''\n    Write a python function to generate a list of numbers using List comprehension and join.\n    '''\n    x = [\"{}\".format(i) for i in range(1,6)]\n    print(x)\n    \n    \n    \n    \ndef list_of_Numbers_Using_List_comprehension_and_join_and_join_and_join_and_join(): \n    '''\n    Write a python function to generate a list of numbers using List comprehension and join.\n    '''\n    x = [\"{}\".format(i) for i in range(1,6)]\n    print(x)\n    \n    \n    \n    \ndef list_of_Numbers_Using_List_comprehension_and_join_and_join_and_join_and_join_and_join(): \n    '''\n    Write a python function to generate a list of numbers using List comprehension and join.\n    '''\n    x = [\"{}\".format(i) for i in range(1,6)]\n    print(x)\n    \n    \n    \n    \ndef list_of_Numbers_Using_List_comprehension_and_join_and_join_and_join_and_join_and_join_and_join(): \n    '''\n    Write a python function to generate a list of numbers using List comprehension and join.\n    '''\n    x = [\"{}\".format(i) for i in rang"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # write your solution below\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2==0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0): \n        return True\n    else: \n        return False\n    # your code here\n    \ndef is_DivisibleByTen(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 10 or not.\n    '''\n    if (n % 10 == 0):\n        return True\n    else:\n        return False\n    # your code here\n    \ndef is_DivisibleByFifteen(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 15 or not.\n    '''\n    if (n % 15 == 0):\n        return True\n    else:\n        return False\n    # your code here\n    \ndef count_positives_sum_negatives(lst):\n    '''\n    Write a python function to count the number of positives, sum of negatives and sum of zeroes in a list.\n    '''\n    i = 0\n    n = 0\n    z = 0\n    for x in lst:\n        if x > 0:\n            i = i + 1\n            n = n + x\n        if x < 0:\n            z = z + x\n    return i, n, z\n    # your code here\n    \ndef remove_positives_and_negatives(lst):\n    '''\n    Write a python function to remove positives and negatives from a list.\n    '''\n    i = 0\n    j = 0\n    lst_ = []\n    for x in lst:\n        if x > 0:\n            i = i + 1\n            lst_.append(x)\n        if x < 0:\n            j = j + 1\n    return i, j, lst_\n    # your code here\n    \ndef find_positive_numbers(lst):\n    '''\n    Write a python function to find all the positive numbers from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if x > 0:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef find_negative_numbers(lst):\n    '''\n    Write a python function to find all the negative numbers from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if x < 0:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef find_even_numbers(lst):\n    '''\n    Write a python function to find all the even numbers from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if x % 2 == 0:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef remove_strings(lst):\n    '''\n    Write a python function to remove all the strings from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if type(x) is str:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef remove_all_strings(lst):\n    '''\n    Write a python function to remove all the strings from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if type(x) is str:\n            pass\n        else:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef find_word_count(lst, word):\n    '''\n    Write a python function to find the count of a word from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if x == word:\n            lst_.append(x)\n    return len(lst_)\n    # your code here\n    \ndef remove_duplicates(lst):\n    '''\n    Write a python function to remove all the duplicates from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if x not in lst_:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef remove_all_duplicates(lst):\n    '''\n    Write a python function to remove all the duplicates from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if x not in lst_:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef remove_duplicates_from_list(lst):\n    '''\n    Write a python function to remove all the duplicates from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if x not in lst_:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef remove_duplicates_from_list_with_set(lst):\n    '''\n    Write a python function to remove all the duplicates from a list.\n    '''\n    lst_ = set(lst)\n    return list(lst_)\n    # your code here\n    \ndef remove_all_duplicates_from_list_with_set(lst):\n    '''\n    Write a python function to remove all the duplicates from a list.\n    '''\n    lst_ = set(lst)\n    return list(lst_)\n    # your code here\n    \ndef remove_numbers(lst):\n    '''\n    Write a python function to remove all the numbers from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if type(x) is not int:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef remove_all_numbers(lst):\n    '''\n    Write a python function to remove all the numbers from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if type(x) is not int:\n            pass\n        else:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef remove_odd_from_list(lst):\n    '''\n    Write a python function to remove all the odd numbers from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if x % 2 == 0:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef remove_all_odd_from_list(lst):\n    '''\n    Write a python function to remove all the odd numbers from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        if x % 2 == 0:\n            pass\n        else:\n            lst_.append(x)\n    return lst_\n    # your code here\n    \ndef count_odd_from_list(lst):\n    '''\n    Write a python function to count the odd numbers from a list.\n    '''\n    i = 0\n    n = 0\n    for x in lst:\n        if x % 2 == 0:\n            i = i + 1\n            n = n + x\n        else:\n            i = i + 1\n    return i, n\n    # your code here\n    \ndef count_all_odd_from_list(lst):\n    '''\n    Write a python function to count the odd numbers from a list.\n    '''\n    i = 0\n    n = 0\n    for x in lst:\n        if x % 2 == 1:\n            i = i + 1\n            n = n + x\n        else:\n            i = i + 1\n    return i, n\n    # your code here\n    \ndef find_square_root_from_list(lst):\n    '''\n    Write a python function to find the square root of each number from a list.\n    '''\n    lst_ = []\n    for x in lst:\n        y = math.sqrt(x)\n        lst_.append(y)\n    return lst_\n    # your code here\n    \ndef count_squares_from_list(lst):\n    '''\n    Write a python function to count the squares from a list.\n    '''\n    i = 0\n    n = 0\n    for x in lst:"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True \n    else : \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == str1[j] and i!=j:\n                return str1[i]\n    return 'no repetition'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    print(\"Original string : \", str1)\n    for i in range(len(str1)):\n        char = str1[i]\n        count = 0\n        for j in range(len(str1)):\n            if char == str1[j] and i!= j:\n                count += 1\n                if count > 1:\n                    break\n        if count == 1:\n            print(\"First Repeated Character : \", char)\n            break\n    else:\n        print(\"No repeated Character.\")\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    res = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in res:\n            res += str1[i]\n        elif str1[i] in res:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in str1:\n        if str1.count(i)>1:\n            return i\n        else:\n            continue\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==str1[i-1]:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n        else:\n            continue\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = set()\n    for i in str1:\n        if i in s:\n            return i\n        else:\n            s.add(i)\n    else:\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    n = len(str1)\n    for i in range(n):\n        for j in range(n):\n            if str1[i] == str1[j] and i!= j:\n                break\n        else:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 2:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    n = n+1\n    lucids = set()\n    for i in range(2, n):\n        if i%2==0:\n            a = i/2\n        else:\n            a = 3*i+1\n        if a**2==i:\n            continue\n        b = int(a**0.5)\n        if b**2==a:\n            continue\n        c = int(b**0.5)\n        if c**2==b:\n            continue\n        d = int(c**0.5)\n        if d**2==c:\n            continue\n        if a+b+c+d==i:\n            lucids.add(i)\n    return list(lucids)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n):\n        if is_ludic(i):\n            l.append(i)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(n+1):\n        if is_lucid(i):\n            lucids.append(i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(2,n+1):\n        c = 0\n        while i % 2 == 0:\n            i = i//2\n            c += 1\n        while i % 3 == 0:\n            i = i//3\n            c += 1\n        while i % 5 == 0:\n            i = i//5\n            c += 1\n        while i % 7 == 0:\n            i = i//7\n            c += 1\n        if c == 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [x for x in range(n+1) if x%5==0 and x%7==0]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lid=[]\n    for i in range(n):\n        if is_lucid(i):\n            lid.append(i)\n    return lid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = set()\n    for i in range(1, n+1):\n        s = str(i)\n        length = len(s)\n        if length == 1:\n            ludic.add(i)\n        elif length == 2:\n            if s[0] == s[1]:\n                ludic.add(i)\n        else:\n            if s[0] == s[1] and s[1] == s[2]:\n                ludic.add(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n) if is_ludic(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    \n    for i in range(2,n):\n        is_lucid = True\n        for j in range(2,i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid == True:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 2:\n        return []\n    ludics = []\n    for i in range(2, n + 1):\n        if is_lucid(i):\n            ludics.append(i)\n    return ludics\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    s = s[::-1]\n    return''.join(s)\n    \nreverse_words('i am a boy')\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split(' ')[::-1])\n    \n    \ndef remove_spaces(s):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    return ''.join(s.split())\n    \n    \ndef replace_spaces(s):\n    '''\n    Write a function to replace spaces in a given string.\n    '''\n    return ''.join(''if c =='' else c for c in s)\n    \n    \ndef remove_upper_case_letters(s):\n    '''\n    Write a function to remove all the upper case letters from a given string.\n    '''\n    return ''.join(c for c in s if c.islower())\n    \n    \ndef remove_first_letter(s):\n    '''\n    Write a function to remove the first letter from a given string.\n    '''\n    return ''.join(c for c in s if c!= s[0])\n    \n    \ndef remove_all_letters_from_a_string(s):\n    '''\n    Write a function to remove all the letters from a given string.\n    '''\n    return s[::]\n    \n    \ndef count_occurrences(s, x):\n    '''\n    Write a function to count the number of occurrences of a given letter in a given string.\n    '''\n    return s.count(x)\n    \n    \ndef count_upper_case_letters(s):\n    '''\n    Write a function to count all the upper case letters in a given string.\n    '''\n    return sum(1 for c in s if c.isupper())\n    \n    \ndef count_upper_case_letters_in_a_word(s):\n    '''\n    Write a function to count all the upper case letters in a given string.\n    '''\n    return sum(1 for c in s if c.isupper())\n    \n    \ndef count_lower_case_letters(s):\n    '''\n    Write a function to count all the lower case letters in a given string.\n    '''\n    return sum(1 for c in s if c.islower())\n    \n    \ndef count_lower_case_letters_in_a_word(s):\n    '''\n    Write a function to count all the lower case letters in a given string.\n    '''\n    return sum(1 for c in s if c.islower())\n    \n    \ndef count_special_characters(s):\n    '''\n    Write a function to count all the special characters in a given string.\n    '''\n    return sum(1 for c in s if c.isalnum())\n    \n    \ndef count_special_characters_in_a_word(s):\n    '''\n    Write a function to count all the special characters in a given string.\n    '''\n    return sum(1 for c in s if c.isalnum())\n    \n    \ndef count_numbers(s):\n    '''\n    Write a function to count all the numbers in a given string.\n    '''\n    return sum(1 for c in s if c.isdigit())\n    \n    \ndef count_numbers_in_a_word(s):\n    '''\n    Write a function to count all the numbers in a given string.\n    '''\n    return sum(1 for c in s if c.isdigit())\n    \n    \ndef count_capital_letters(s):\n    '''\n    Write a function to count all the capital letters in a given string.\n    '''\n    return sum(1 for c in s if c.isupper())\n    \n    \ndef count_capital_letters_in_a_word(s):\n    '''\n    Write a function to count all the capital letters in a given string.\n    '''\n    return sum(1 for c in s if c.isupper())\n    \n    \ndef count_whitespaces(s):\n    '''\n    Write a function to count all the whitespaces in a given string.\n    '''\n    return sum(1 for c in s if c.isspace())\n    \n    \ndef count_whitespaces_in_a_word(s):\n    '''\n    Write a function to count all the whitespaces in a given string.\n    '''\n    return sum(1 for c in s if c.isspace())\n    \n    \ndef count_chars(s, c):\n    '''\n    Write a function to count all the characters in a given string.\n    '''\n    return sum(1 for c in s if c == c)\n    \n    \ndef count_chars_in_a_word(s, c):\n    '''\n    Write a function to count all the characters in a given string.\n    '''\n    return sum(1 for c in s if c == c)\n    \n    \ndef count_char_range(s, c1, c2):\n    '''\n    Write a function to count all the characters in a given string.\n    '''\n    return sum(1 for c in s if c == c1 or c == c2)\n    \n    \ndef count_char_range_in_a_word(s, c1, c2):\n    '''\n    Write a function to count all the characters in a given string.\n    '''\n    return sum(1 for c in s if c == c1 or c == c2)\n    \n    \ndef count_unique_characters(s):\n    '''\n    Write a function to count all the unique characters in a given string.\n    '''\n    return len(set(s))\n    \n    \ndef count_unique_characters_in_a_word(s):\n    '''\n    Write a function to count all the unique characters in a given string.\n    '''\n    return len(set(s))\n    \n    \ndef count_common_characters(s, c1, c2):\n    '''\n    Write a function to count all the common characters in a given string.\n    '''\n    return sum(1 for c in s if c == c1 or c == c2)\n    \n    \ndef count_common_characters_in_a_word(s, c1, c2):\n    '''\n    Write a function to count all the common characters in a given string.\n    '''\n    return sum(1 for c in s if c == c1 or c == c2)\n    \n    \ndef count_ratio_of_characters(s):\n    '''\n    Write a function to count all the unique characters in a given string.\n    '''\n    return len(set(s)) / len(s)\n    \n    \ndef count_ratio_of_characters_in_a_word(s):\n    '''\n    Write a function to count all the unique characters in a given string.\n    '''\n    return len(set(s)) / len(s)\n    \n    \ndef count_sub_strings(s, c):\n    '''\n    Write a function to count all the substrings of a given string.\n    '''\n    if s == '':\n        return 0\n    return sum(1 for i in range(len(s) - len(c) + 1)) + count_sub_strings(s[1:], c)\n    \n    \ndef count_sub_strings_in_a_word(s, c):\n    '''\n    Write a function to count all the substrings of a given string.\n    '''\n    if s == '':\n        return 0\n    return sum(1 for i in range(len(s) - len(c) + 1)) + count_sub_strings(s[1:], c)\n    \n    \ndef count_sub_string_in_a_word(s, c):\n    '''\n    Write a function to count all the substrings of a given string.\n    '''\n    if s == '':\n        return 0\n    return sum(1 for i in range(len(s) - len(c) + 1)) + count_sub_string_in_a_word(s[1:], c)\n    \n    \ndef count_sub_string_not_in_a_word(s, c):\n    '''\n    Write a function to count all the substrings of a given string.\n    '''\n    if s == '':\n        return 0\n    return sum(1 for i in range(len(s) - len(c) + 1)) + count_sub_string_not_in_a_word(s"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    i = len(words) - 1\n    while i >= 0:\n        words[i] = words[i][::-1]\n        i -= 1\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.strip().split(' ')[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split(\" \")[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    s = s[::-1]\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    s = s.split(\" \")\n    s = s[::-1]\n    s = \" \".join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    s_list = []\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    div = 2\n    while div < num:\n        if num % div == 0:\n            return False\n        div += 1\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        if num == 2 or num == 3:\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Corner case: 1 is not a prime number\n    if num == 1:\n        return False\n    # Corner case: negative numbers are not prime numbers\n    if num < 0:\n        return False\n    # Corner case: 2 is prime number\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef calculate_circumference(radius):\n    '''\n    Write a function to calculate the circumference of a circle.\n    '''\n    return 2 * math.pi * radius\ndef calculate_area(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius * radius\ndef calculate_volume(radius, height):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return (radius ** 2) * height\ndef calculate_weight(mass, volume):\n    '''\n    Write a function to calculate the weight of an object.\n    '''\n    return mass * volume\ndef calculate_perimeter(length, width):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    return 2 * (length + width)\ndef calculate_area_of_polygon(length, width):\n    '''\n    Write a function to calculate the area of a regular polygon.\n    '''\n    return (math.pi * length * width) / 2\ndef calculate_volume_of_cube(length):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return length ** 3\ndef calculate_weight_of_object(mass, volume):\n    '''\n    Write a function to calculate the weight of an object.\n    '''\n    return mass * volume\ndef calculate_hypotenuse(length1, length2):\n    '''\n    Write a function to calculate the hypotenuse of a right angled triangle.\n    '''\n    return math.sqrt(length1 ** 2 + length2 ** 2)\ndef calculate_degrees_angle(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * 180 / math.pi\ndef calculate_radians_angle(degrees):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degrees * math.pi / 180\ndef calculate_sin(degree):\n    '''\n    Write a function to calculate the sine of an angle.\n    '''\n    return math.sin(radian_degree(degree))\ndef calculate_cos(degree):\n    '''\n    Write a function to calculate the cosine of an angle.\n    '''\n    return math.cos(radian_degree(degree))\ndef calculate_tan(degree):\n    '''\n    Write a function to calculate the tangent of an angle.\n    '''\n    return math.tan(radian_degree(degree))\ndef calculate_square_roots(a, b, c):\n    '''\n    Write a function to calculate the roots of a quadratic equation.\n    '''\n    d = b ** 2 - 4 * a * c\n    if d < 0:\n        return \"The equation has no roots.\"\n    x1 = (-b + math.sqrt(d)) / (2 * a)\n    x2 = (-b - math.sqrt(d)) / (2 * a)\n    return x1, x2\ndef calculate_tan_degrees(degree):\n    '''\n    Write a function to calculate the tangent of an angle in degrees.\n    '''\n    return math.tan(radian_degree(degree))\ndef calculate_tan_radians(radians):\n    '''\n    Write a function to calculate the tangent of an angle in radians.\n    '''\n    return math.tan(radians)\ndef calculate_acos(degrees):\n    '''\n    Write a function to calculate the arccosine of an angle in degrees.\n    '''\n    return math.acos(radian_degree(degrees))\ndef calculate_acos_radians(radians):\n    '''\n    Write a function to calculate the arccosine of an angle in radians.\n    '''\n    return math.acos(radians)\ndef calculate_asin(degrees):\n    '''\n    Write a function to calculate the arcsine of an angle in degrees.\n    '''\n    return math.asin(radian_degree(degrees))\ndef calculate_asin_radians(radians):\n    '''\n    Write a function to calculate the arcsine of an angle in radians.\n    '''\n    return math.asin(radians)\ndef calculate_sinh(degrees):\n    '''\n    Write a function to calculate the hyperbolic sine of an angle in degrees.\n    '''\n    return math.sinh(radian_degree(degrees))\ndef calculate_sinh_radians(radians):\n    '''\n    Write a function to calculate the hyperbolic sine of an angle in radians.\n    '''\n    return math.sinh(radians)\ndef calculate_cosh(degrees):\n    '''\n    Write a function to calculate the hyperbolic cosine of an angle in degrees.\n    '''\n    return math.cosh(radian_degree(degrees))\ndef calculate_cosh_radians(radians):\n    '''\n    Write a function to calculate the hyperbolic cosine of an angle in radians.\n    '''\n    return math.cosh(radians)\ndef calculate_tanh(degrees):\n    '''\n    Write a function to calculate the hyperbolic tangent of an angle in degrees.\n    '''\n    return math.tanh(radian_degree(degrees))\ndef calculate_tanh_radians(radians):\n    '''\n    Write a function to calculate the hyperbolic tangent of an angle in radians.\n    '''\n    return math.tanh(radians)\ndef calculate_asinh(degrees):\n    '''\n    Write a function to calculate the inverse hyperbolic sine of an angle in degrees.\n    '''\n    return math.asinh(radian_degree(degrees))\ndef calculate_asinh_radians(radians):\n    '''\n    Write a function to calculate the inverse hyperbolic sine of an angle in radians.\n    '''\n    return math.asinh(radians)\ndef calculate_atan(degrees):\n    '''\n    Write a function to calculate the inverse hyperbolic tangent of an angle in degrees.\n    '''\n    return math.atan(radian_degree(degrees))\ndef calculate_atan_radians(radians):\n    '''\n    Write a function to calculate the inverse hyperbolic tangent of an angle in radians.\n    '''\n    return math.atan(radians)\ndef calculate_hypotenuse(length1, length2):\n    '''\n    Write a function to calculate the hypotenuse of a right angled triangle.\n    '''\n    return math.sqrt(length1 ** 2 + length2 ** 2)\ndef calculate_hypotenuse_degrees(length1, length2):\n    '''\n    Write a function to calculate the hypotenuse of a right angled triangle in degrees.\n    '''\n    return math.hypot(length1, length2)\ndef calculate_hypotenuse_radians(length1, length2):\n    '''\n    Write a function to calculate the hypotenuse of a right angled triangle in radians.\n    '''\n    return math.hypot(length1, length2)\ndef calculate_sinh_degrees(degrees):\n    '''\n    Write a function to calculate the hyperbolic sine of an angle in degrees.\n    '''\n    return math.sinh(radian_degree(degrees))\ndef calculate_sinh_radians(radians):\n    '''\n    Write a function to calculate the hyperbolic sine of an angle in radians.\n    '''\n    return math.sinh(radians)\ndef calculate_cosh_degrees(degrees):\n    '''\n    Write a function to calculate the hyperbolic cosine of an angle in degrees.\n    '''\n    return math.cosh(radian_degree(degrees))\ndef calculate_cosh_radians(radians):\n    '''\n    Write a function to calculate the hyperbolic cosine of an angle in radians.\n    '''\n    return math.cosh(radians)\ndef calculate_tanh_degrees(degrees):\n    '''\n    Write a function to calculate the hyperbolic tangent of an angle in degrees.\n    '''\n    return math.tanh(radian_degree(degrees))\ndef calculate_tanh_radians(radians)"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_2(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_3(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_4(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_5(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_6(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_7(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_8(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_9(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_10(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_11(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_12(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_13(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_14(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_15(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_16(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_17(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_18(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_19(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_20(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_21(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_22(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_23(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_24(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_25(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef radian_degree_26(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_27(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_28(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_29(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_30(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_31(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_32(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_33(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_34(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_35(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_36(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_37(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_38(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_39(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_40(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_41(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_42(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_43(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_44(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_45(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_46(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_47(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_48(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_49(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_50(degree):\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree_rads = degree * (math.pi / 180.0)\n    return degree_rads\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi/180)\n    return radians\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.pi * degree / 180\n    return radians\ndef convert_to_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian * 180 / math.pi\n    return degree\ndef convert_to_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\ndef print_hello_world(name = \"World\"):\n    print(\"Hello world! \"+name)\ndef print_hello_to(name,to_name):\n    print(\"Hello \"+name+\" to \"+to_name)\ndef print_hello_from(from_name,to_name = \"World\"):\n    print(\"Hello from \"+from_name+\" to \"+to_name)\ndef print_hello_from_to(from_name,to_name):\n    print(\"Hello from \"+from_name+\" to \"+to_name)\ndef factorial(n):\n    '''\n    Write a function factorial(n) that computes the factorial of n.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef power(a,b):\n    '''\n    Write a function power(a,b) that computes a**b.\n    '''\n    if b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\ndef factorial_recursive(n):\n    '''\n    Write a function factorial_recursive(n) that computes the factorial of n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\ndef power_recursive(a,b):\n    '''\n    Write a function power_recursive(a,b) that computes a**b.\n    '''\n    if b == 1:\n        return a\n    else:\n        return a * power_recursive(a,b-1)\ndef fibonacci(n):\n    '''\n    Write a function fibonacci(n) that computes the nth number of the Fibonacci series.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef reverse(number):\n    '''\n    Write a function reverse(number) that computes the reversed number.\n    '''\n    if number == 0:\n        return number\n    else:\n        return number * reverse(number-1)\ndef power_2(number):\n    '''\n    Write a function power_2(number) that computes the power of 2 of a given number.\n    '''\n    return (number & 0x55555555) == 0\ndef power_3(number):\n    '''\n    Write a function power_3(number) that computes the power of 3 of a given number.\n    '''\n    return number > 0 and ((number & 0x33333333) == 0)\ndef power_4(number):\n    '''\n    Write a function power_4(number) that computes the power of 4 of a given number.\n    '''\n    return number > 0 and (number & 0x0F0F0F0F) == 0\ndef power_5(number):\n    '''\n    Write a function power_5(number) that computes the power of 5 of a given number.\n    '''\n    return number > 0 and ((number & 0x55555555) == 0)\ndef power_6(number):\n    '''\n    Write a function power_6(number) that computes the power of 6 of a given number.\n    '''\n    return number > 0 and ((number & 0x33333333) == 0)\ndef power_7(number):\n    '''\n    Write a function power_7(number) that computes the power of 7 of a given number.\n    '''\n    return number > 0 and (number & 0x77777777) == 0\ndef power_8(number):\n    '''\n    Write a function power_8(number) that computes the power of 8 of a given number.\n    '''\n    return number > 0 and ((number & 0x88888888) == 0)\ndef power_9(number):\n    '''\n    Write a function power_9(number) that computes the power of 9 of a given number.\n    '''\n    return number > 0 and ((number & 0x55555555) == 0)\ndef power_10(number):\n    '''\n    Write a function power_10(number) that computes the power of 10 of a given number.\n    '''\n    return number > 0 and ((number & 0x33333333) == 0)\ndef power_11(number):\n    '''\n    Write a function power_11(number) that computes the power of 11 of a given number.\n    '''\n    return number > 0 and ((number & 0x77777777) == 0)\ndef power_12(number):\n    '''\n    Write a function power_12(number) that computes the power of 12 of a given number.\n    '''\n    return number > 0 and ((number & 0x88888888) == 0)\ndef power_13(number):\n    '''\n    Write a function power_13(number) that computes the power of 13 of a given number.\n    '''\n    return number > 0 and ((number & 0x55555555) == 0)\ndef power_14(number):\n    '''\n    Write a function power_14(number) that computes the power of 14 of a given number.\n    '''\n    return number > 0 and ((number & 0x33333333) == 0)\ndef power_15(number):\n    '''\n    Write a function power_15(number) that computes the power of 15 of a given number.\n    '''\n    return number > 0 and ((number & 0x77777777) == 0)\ndef power_16(number):\n    '''\n    Write a function power_16(number) that computes the power of 16 of a given number.\n    '''\n    return number > 0 and ((number & 0x88888888) == 0)\ndef power_17(number):\n    '''\n    Write a function power_17(number) that computes the power of 17 of a given number.\n    '''\n    return number > 0 and ((number & 0x55555555) == 0)\ndef power_18(number):\n    '''\n    Write a function power_18(number) that computes the power of 18 of a given number.\n    '''\n    return number > 0 and ((number & 0x33333333) == 0)\ndef power_19(number):\n    '''\n    Write a function power_19(number) that computes the power of 19 of a given number.\n    '''\n    return number > 0 and ((number & 0x77777777) == 0)\ndef power_20(number):\n    '''\n    Write a function power_20(number) that computes the power of 20 of a given number.\n    '''\n    return number > 0 and ((number & 0x88888888) == 0)\ndef power_21(number):\n    '''\n    Write a function power_21(number) that computes the power of 21 of a given number.\n    '''\n    return number > 0 and ((number & 0x55555555) == 0)\ndef power_22(number):\n    '''\n    Write a function power_22(number) that computes the power of 22 of a given number.\n    '''\n    return number > 0 and ((number & 0x33333333) == 0)\ndef power_23(number):\n    '''\n    Write a function power_23(number) that computes the power of 23 of a given number.\n    '''\n    return number > 0 and ((number & 0x77777777) == 0)\ndef power_24(number):\n    '''\n    Write a function power_24(number) that computes the power of 24 of a given number.\n    '''\n    return number > 0 and ((number & 0x88888888) == 0)\ndef power_25(number):\n    '''\n    Write a function power_25(number) that computes the power of 25 of "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi/180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\n    \ndef deg_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    deg = radian*180/math.pi\n    return deg\n    \ndef convert_to_degrees(x):\n    return (math.pi/180)*x\n    \ndef convert_to_radians(x):\n    return (180/math.pi)*x\n    \ndef print_map(grid):\n    for row in grid:\n        for x in row:\n            print(x,end=\" \")\n        print(\"\")\n        \ndef print_solution(solution):\n    for index in range(len(solution)):\n        print(solution[index],end=\" \")\n    print()\n    \ndef move_around(start_x, start_y, x, y):\n    '''\n    Move a cartesian point around a grid.\n    '''\n    # Move X\n    if(x):\n        start_x += 1\n    # Move Y\n    if(y):\n        start_y += 1\n    return start_x, start_y\n    \ndef manhattan_distance(p1, p2):\n    '''\n    Compute Manhattan distance between two points.\n    '''\n    return abs(p1[0]-p2[0]) + abs(p1[1]-p2[1])\n    \ndef is_in_cartesian_grid(start_x, start_y, grid_size):\n    '''\n    Check if a point is in cartesian grid.\n    '''\n    return True if(start_x < grid_size and start_x >= 0 and start_y < grid_size and start_y >= 0) else False\n    \ndef is_cartesian_point_in_grid(x, y, grid_size):\n    '''\n    Check if a point is in cartesian grid.\n    '''\n    return True if(x < grid_size and x >= 0 and y < grid_size and y >= 0) else False\n    \ndef is_cartesian_point_valid(start_x, start_y, end_x, end_y, grid_size):\n    '''\n    Check if a point is in cartesian grid.\n    '''\n    # Check if start is in grid\n    if(is_in_cartesian_grid(start_x, start_y, grid_size) == False):\n        return False\n    # Check if end is in grid\n    if(is_in_cartesian_grid(end_x, end_y, grid_size) == False):\n        return False\n    # Check if end is in grid\n    if(start_x == end_x and start_y == end_y):\n        return False\n    return True\n    \ndef is_cartesian_point_valid_within_radius(start_x, start_y, end_x, end_y, radius):\n    '''\n    Check if a point is in cartesian grid.\n    '''\n    distance = manhattan_distance((start_x, start_y), (end_x, end_y))\n    return distance <= radius\n    \ndef is_cartesian_point_valid_within_radius_grid(start_x, start_y, end_x, end_y, grid_size, radius):\n    '''\n    Check if a point is in cartesian grid.\n    '''\n    distance = manhattan_distance((start_x, start_y), (end_x, end_y))\n    return distance <= radius and is_in_cartesian_grid(start_x, start_y, grid_size)\n    \ndef is_cartesian_point_valid_within_radius_grid_map(start_x, start_y, end_x, end_y, grid_size, radius, grid):\n    '''\n    Check if a point is in cartesian grid.\n    '''\n    distance = manhattan_distance((start_x, start_y), (end_x, end_y))\n    return distance <= radius and is_in_cartesian_grid(start_x, start_y, grid_size) and is_in_cartesian_grid(start_x, start_y, grid)\n    \ndef is_line_in_radius_grid_map(line, radius, grid_size, grid):\n    '''\n    Check if a line is in radius grid map.\n    '''\n    for i in range(len(line)):\n        if(is_in_cartesian_grid(line[i][0], line[i][1], grid_size) == False or is_in_cartesian_grid(line[i+1][0], line[i+1][1], grid_size) == False):\n            return False\n    return True\n    \ndef is_line_in_radius_grid_map_points(line, radius, grid_size, grid):\n    '''\n    Check if a line is in radius grid map.\n    '''\n    for i in range(len(line)):\n        if(is_in_cartesian_grid(line[i][0], line[i][1], grid_size) == False or is_in_cartesian_grid(line[i+1][0], line[i+1][1], grid_size) == False or is_in_cartesian_grid(line[i+2][0], line[i+2][1], grid_size) == False):\n            return False\n    return True\n    \ndef is_line_in_radius_grid_map_points_lines(line, radius, grid_size, grid):\n    '''\n    Check if a line is in radius grid map.\n    '''\n    for i in range(len(line)):\n        if(is_in_cartesian_grid(line[i][0], line[i][1], grid_size) == False or is_in_cartesian_grid(line[i+1][0], line[i+1][1], grid_size) == False or is_in_cartesian_grid(line[i+2][0], line[i+2][1], grid_size) == False or is_in_cartesian_grid(line[i+3][0], line[i+3][1], grid_size) == False):\n            return False\n    return True\n    \ndef is_line_in_radius_grid_map_points_lines_lines(line, radius, grid_size, grid):\n    '''\n    Check if a line is in radius grid map.\n    '''\n    for i in range(len(line)):\n        if(is_in_cartesian_grid(line[i][0], line[i][1], grid_size) == False or is_in_cartesian_grid(line[i+1][0], line[i+1][1], grid_size) == False or is_in_cartesian_grid(line[i+2][0], line[i+2][1], grid_size) == False or is_in_cartesian_grid(line[i+3][0], line[i+3][1], grid_size) == False or is_in_cartesian_grid(line[i+4][0], line[i+4][1], grid_size) == False):\n            return False\n    return True\n    \ndef is_line_in_radius_grid_map_points_lines_lines_lines(line, radius, grid_size, grid):\n    '''\n    Check if a line is in radius grid map.\n    '''\n    for i in range(len(line)):\n        if(is_in_cartesian_grid(line[i][0], line[i][1], grid_size) == False or is_in_cartesian_grid(line[i+1][0], line[i+1][1], grid_size) == False or is_in_cartesian_grid(line[i+2][0], line[i+2][1], grid_size) == False or is_in_cartesian_grid(line[i+3][0], line[i+3][1], grid_size) == False or is_in_cartesian_grid(line[i+4][0], line[i+4][1], grid_size) == False or is_in_cartesian_grid(line[i+5][0], line[i+5][1], grid_size) == False):\n            return False\n    return True\n    \ndef is_line_in_radius_grid_map_points_lines_lines_line"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_re = re.compile(pattern)\n    for match in re.finditer(pattern_re, text):\n        return (match.group(), match.start(), match.end())\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    results = []\n    for match in matches:\n        results.append(match.group())\n        results.append(match.start())\n        results.append(match.end())\n    return results\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #Create a regex object\n    regex = re.compile(pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    start = result.start()\n    end = result.end()\n    return text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if not text or not pattern:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_regex = re.compile(pattern)\n    return pattern_regex.findall(text)\n    \ndef remove_repeating_chars(input_str):\n    '''\n    Write a function that removes all the repeating characters in the string.\n    '''\n    return re.sub(r'(\\w)(\\1+)', r'\\1\\1', input_str)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    return \"\"\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return match.group(), start_index, end_index\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #search_lit = re.search(pattern, text)\n    #if search_lit:\n    #    return search_lit.group(0), search_lit.start(0), search_lit.end(0)\n    #else:\n    #    return 0\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if(n == 0):\n        return 0\n    elif(n == 1):\n        return 1\n    else:\n        return n * bell_Number(n - 1) + bell_Number(n - 2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 1:\n        return 1\n    return n * bell_Number(n - 1)\nprint(\"\\tBell Number\\t\")\ndef bell_Number1(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return bell_Number(n + 1)\nprint(\"n: \",n,\"\\t\", bell_Number1(n))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n > 2:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a=1\n    for i in range(1,n+1):\n        a=a*(i+1)//i\n    print(a)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (n*(2*n-1))//2\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell*(i+1)\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #initialize  bell_number = 1\n    bell_number = 1\n    #initialize  N = 1\n    N = 1\n    #while bell_number < n:\n    while N <= n:\n        #bell_number = N*bell_number + 1\n        bell_number = bell_number*N + 1\n        #bell_number = bell_number + 1\n        N = N + 1\n    #print(bell_number)\n    return bell_number\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    num = 1\n    for i in range(n):\n        num = num * (n + 1)\n    return num\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # def bell_Number(n):\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n>2:\n        return bell_Number(n-1)+bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a=0\n    for i in range(n):\n        a=a+1\n    return a\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if not list1:\n        return list1\n    if L==0:\n        return list1\n    L = L % len(list1)\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # solution 1\n    # if list1[L] == list1[-1]:\n    #     del list1[-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n    \n    \ndef remove_kth_element_v2(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]\n    \n    \ndef print_and_replace(input_list):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = []\n    for i in range(len(input_list)):\n        if i % 2 == 0:\n            list1.append(input_list[i])\n    return list1\n    \n    \ndef split_and_join(input_string):\n    '''\n    Write a python function which takes a input string and returns the string split in a list.\n    '''\n    return input_string.split()\n    \n    \ndef remove_dollar_sign(input_string):\n    '''\n    Write a python function which takes a string and returns a new string without the $ symbol.\n    '''\n    for i in range(len(input_string)):\n        if input_string[i] == '$':\n            input_string = input_string[:i] + input_string[i+1:]\n    return input_string\n    \n    \ndef string_test(input_string):\n    '''\n    Write a python function which takes a string and returns the string in lowercase.\n    '''\n    return input_string.lower()\n    \n    \ndef reverse_string(input_string):\n    '''\n    Write a python function which takes a string and returns the string in reversed order.\n    '''\n    return input_string[::-1]\n    \n    \ndef reverse_string_v2(input_string):\n    '''\n    Write a python function which takes a string and returns the string in reversed order.\n    '''\n    return input_string[::-1]\n    \n    \ndef count_substring(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n    return count\n    \n    \ndef count_substring_v2(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n    return count\n    \n    \ndef string_test_v2(input_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i] == 'e':\n            count = count + 1\n    return count\n    \n    \ndef count_substring_with_start_end_pos(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n            if i == len(sub_string) - 1:\n                return count\n    return count\n    \n    \ndef count_substring_with_start_end_pos_v2(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n            if i == len(sub_string) - 1:\n                return count\n    return count\n    \n    \ndef get_count_occurences_v2(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n    return count\n    \n    \ndef count_occurences_v2(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n    return count\n    \n    \ndef get_count_occurences(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n    return count\n    \n    \ndef count_occurences(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n    return count\n    \n    \ndef get_count_occurences_with_start_end_pos(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n            if i == len(sub_string) - 1:\n                return count\n    return count\n    \n    \ndef get_count_occurences_with_start_end_pos_v2(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n            if i == len(sub_string) - 1:\n                return count\n    return count\n    \n    \ndef get_count_occurences_with_start_end_pos_v3(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n            if i == len(sub_string) - 1:\n                return count\n    return count\n    \n    \ndef get_count_occurences_with_start_end_pos_v4(input_string, sub_string):\n    '''\n    Write a python function which takes a string and returns the count of the string sub_string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:i+len(sub_string)] == sub_string:\n            count = count + 1\n            if i == len(sub_string) - 1:\n                return count\n    return count\n    \n    \ndef reverse_every_other_string(input_string):\n    '''"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Make copy of the original list\n    list1_copy = list1.copy()\n    # Remove the k'th element from the list\n    list1_copy.remove(list1_copy[L])\n    return list1_copy\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    # your code here\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #if L[k]!= k:\n    #    list1.remove(L[k])\n    \n    return list1[:k] + list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1_copy = list1[:]\n    list1_copy.pop(L)\n    return list1_copy\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i = 0\n    j = len(list1)-1\n    while i<j:\n        if i==k:\n            list1.pop(i)\n        if j==k:\n            list1.pop(j)\n        i+=1\n        j-=1\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in list1:\n        if len(list2) < L:\n            list2.append(i)\n        else:\n            if i == list2[L - 1]:\n                list2.pop()\n    return list2\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col_max = []\n    \n    for i in range(len(test_list)):\n        n = N\n        while n >= 0:\n            col_max.append(max(test_list[i][n]))\n            n = n-1\n    return col_max\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not isinstance(test_list, list) or not all(isinstance(row, list) for row in test_list):\n        raise TypeError\n    if not all(len(row) == len(test_list[0]) for row in test_list):\n        raise ValueError\n    if N < 1 or N > len(test_list[0]):\n        raise IndexError\n    max_col = max(test_list[i][N-1] for i in range(len(test_list)))\n    return max_col\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # max_index = len(test_list) - 1\n    # max_value = 0\n    # for i in range(len(test_list)):\n    #     if max_value <= test_list[max_index][i]:\n    #         max_index = i\n    #         max_value = test_list[max_index][i]\n    # return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = []\n    for i in range(len(test_list)):\n        max_col.append(test_list[i][N-1])\n    return max(max_col)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i][N-1] for i in range(len(test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        for i in range(len(test_list)):\n            if len(test_list[i]) == N:\n                test_list[i].append(test_list[i][N-1])\n        return max_of_nth(test_list, N-1)\n    \ndef max_of_each_row(test_list):\n    '''\n    Write a function which given a matrix represented as a list of lists returns a list of max numbers of each row.\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        for i in range(len(test_list)):\n            test_list[i].append(test_list[i][N-1])\n        return max_of_nth(test_list, N-1)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 0:\n        return\n    for row in test_list:\n        if len(row) == N:\n            return max(row)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # for row in test_list:\n        # for col in range(len(test_list[0])):\n            # print(row[col])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = -9999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    for i in range(len(test_list)):\n        max_val = max(max_val, max_of_nth(test_list[i], N))\n    return max_val\n    # This line will never be executed\n    #print(\"Never executed\")\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    temp = []\n    max = 0\n    for i in test_list:\n        temp += i\n    temp = temp[:N]\n    for i in temp:\n        if i > max:\n            max = i\n    return max\n    \n'''\n2. Find the max element in a list of numbers, excluding the max number.\n'''\ndef max_excluding_max(test_list):\n    temp = []\n    max = 0\n    for i in range(len(test_list)):\n        if max < test_list[i]:\n            temp.append(test_list[i])\n    max = max - max + max\n    return max\n    \n'''\n3. Write a function that given a list of lists of digits returns the sum of the digits.\n'''\ndef sum_of_digits(test_list):\n    sum = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            sum += test_list[i][j]\n    return sum\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a = lst[0]\n    b = lst[1]\n    if a[0] < b[0]:\n        return([a[0], b[0]])\n    else:\n        return([a[0], b[0]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst)\n    list1 = lst[:len(lst)//2]\n    list2 = lst[len(lst)//2:]\n    lst = []\n    for i in list1:\n        lst.append(i[0])\n    for i in list2:\n        lst.append(i[1])\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for el in lst:\n        merged.append([el[0],el[1]])\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    res = [[], []]\n    for i in lst:\n        res[0].append(i[0])\n        res[1].append(i[1])\n    return res\n    \n    \n    \n    \n    \n    \ndef is_divisible(num, lst):\n    '''\n    Write a python function which takes a list of integers and returns a list of integers whose elements are divisible by the elements in the list which is passed to the function.\n    '''\n    lst = list(lst)\n    lst = sorted(lst, reverse=True)\n    res = []\n    for i in lst:\n        if i % num == 0:\n            res.append(i)\n    res = sorted(res, reverse=True)\n    return res\n    \n    \n    \n    \n    \n    \ndef is_palindrome(strng):\n    '''\n    Write a python function which takes a string as input and returns a boolean value\n    '''\n    strng = strng.lower()\n    strng = strng.replace(\" \", \"\")\n    if strng[::-1] == strng:\n        return True\n    else:\n        return False\n        \n        \n        \n    \n    \n    \n    \ndef valid_palindrome(strng):\n    '''\n    Write a python function which takes a string and returns True or False depending on whether the string is a palindrome or not. A palindrome is a word, phrase, or sequence that is spelled the same backward and forward. An example of a palindrome are: \"racecar\", \"tacocat\".\n    '''\n    strng = strng.lower()\n    strng = strng.replace(\" \", \"\")\n    if strng == strng[::-1]:\n        return True\n    else:\n        return False\n        \n        \n        \n    \n    \n    \ndef divisible_by_three(num):\n    '''\n    Write a python function which takes an integer as input and returns True or False depending on whether the integer is divisible by 3 or not. An integer is divisible by 3 if it is evenly divisible by 3.\n    '''\n    if num % 3 == 0:\n        return True\n    else:\n        return False\n        \n        \n    \n    \n    \n    \ndef is_prime(num):\n    '''\n    Write a python function which takes an integer as input and returns True or False depending on whether the integer is prime or not. A prime number is a natural number greater than 1 that cannot be formed by multiplying other natural numbers. For example, 2, 3, 5, 7, 11, and 13 are prime numbers.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num):\n            if num % i == 0:\n                return False\n        return True\n        \n        \n    \n    \n    \n    \ndef is_unique(strng):\n    '''\n    Write a python function which takes a string as input and returns True or False depending on whether the string is unique or not.\n    '''\n    if strng == \"\":\n        return True\n    else:\n        strng = strng.replace(\" \", \"\")\n        strng = strng.replace(\"'\", \"\")\n        strng = strng.replace(\"-\", \"\")\n        if len(set(strng)) == len(strng):\n            return True\n        else:\n            return False\n        \n        \n        \n    \n    \n    \ndef is_unique_sequence(strng):\n    '''\n    Write a python function which takes a string as input and returns True or False depending on whether the string is a sequence of unique characters or not.\n    '''\n    if strng == \"\":\n        return True\n    else:\n        strng = strng.replace(\" \", \"\")\n        strng = strng.replace(\"'\", \"\")\n        strng = strng.replace(\"-\", \"\")\n        if len(set(strng)) == len(strng):\n            return True\n        else:\n            return False\n        \n        \n        \n    \n    \n    \ndef longest_substring_without_repeating_characters(strng):\n    '''\n    Write a python function which takes a string as input and returns the length of the longest substring without repeating characters.\n    '''\n    if strng == \"\":\n        return 0\n    else:\n        setStr = set(strng)\n        strng = list(strng)\n        longest = \"\"\n        for i in range(len(strng)):\n            if strng[i] in setStr:\n                strng[i] = \"\"\n        for j in range(len(strng)):\n            if strng[j] == \"\":\n                strng[j] = \" \"\n        for i in range(len(strng)):\n            if len(longest) < len(strng[i]):\n                longest = strng[i]\n        return len(longest)\n        \n        \n        \n    \n    \n    \n    \ndef is_palindrome_permutation(strng):\n    '''\n    Write a python function which takes a string as input and returns True or False depending on whether the string is a permutation of a palindrome or not. A palindrome is a word, phrase, or sequence that is spelled the same backward and forward. An example of a palindrome are: \"racecar\", \"tacocat\".\n    '''\n    strng = strng.lower()\n    strng = strng.replace(\" \", \"\")\n    if strng == strng[::-1]:\n        return True\n    else:\n        return False\n        \n        \n        \n    \n    \n    \ndef check_possibility(strng):\n    '''\n    Write a python function which takes a string as input and returns True or False depending on whether the string is a possible solution of a puzzle. A possible solution is a sequence of words that is used to describe a puzzle.\n    '''\n    if strng == \"\":\n        return False\n    else:\n        if len(strng) % 2!= 0:\n            return False\n        else:\n            lst = []\n            for i in range(len(strng)):\n                if strng[i].isupper():\n                    lst.append(strng[i])\n            if len(lst)!= 3:\n                return False\n            else:\n                return True\n        \n        \n        \n    \n    \n    \ndef remove_duplicate_letters(strng):\n    '''\n    Write a python function which takes a string as input and returns a string with all duplicate letters removed from it. For example, if the input is \u201cppljwqf\u201d, the output should be \u201cpwf\u201d.\n    '''\n    if strng == \"\":\n        return \"\"\n    else:\n        lst = list(strng)\n        for i in range(len(lst)):\n            if lst[i] in lst[i+1:]:\n                lst[i+1:] = [j for j in lst[i+1:] if j!= lst[i]]\n        strng = \"\".join(lst)\n        return strng\n        \n        \n        \n    \n    \n    \ndef parse_int(s):\n    '''\n    Write a python function which takes a string as input and returns an integer. The string can contain numbers, commas, and (and only if the comma comes first and immediately following) whitespaces.\n    '''\n    if s == \"\":\n        return 0\n    else:\n        while True:\n            if s[0].isnumeric():\n                res = s[0]\n                s = s[1:]\n            else:\n                break\n        s = s.replace(\",\", \"\")\n        while True:\n            if s[0].isnumeric():\n                res += s[0]\n                s = s[1:]\n            else:\n                break\n        if s == \"\":\n            return int(res)\n        else:\n            return -1\n        \n        \n        \n    \n    \n    \n    \ndef is_palindrome_permutation(strng):\n    '''\n    Write "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    lst3 = []\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(lst[i][0])\n        new_list.append(lst[i][1])\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merge_lst = []\n    \n    while len(lst)!= 0:\n        merge_lst.append(lst[0][0])\n        merge_lst.append(lst[0][1])\n        del lst[0]\n        \n    return merge_lst\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new = []\n    for i in range(len(lst)):\n        new.append([lst[i][0], lst[i][1]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    '''\n    sample input:\n    [1,2,3]\n    [4,5,6]\n    \n    output:\n    [1,4]\n    [2,5]\n    [3,6]\n    '''\n    merged = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][0] == lst[j][0]:\n                merged.append(lst[i])\n                merged.append(lst[j])\n                break\n    print(merged)\nmerge([[1,2],[4,5],[3,6]])"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    x = []\n    for i in range(0, len(lst)):\n        x.append([lst[i][0], lst[i][1]])\n    return x\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_to_be_returned = []\n    for i in range(len(test_list)):\n        j = i + 1\n        if j == len(test_list):\n            list_to_be_returned.append(test_list[i])\n        else:\n            list_to_be_returned.append(test_list[i] + test_list[j])\n    return tuple(list_to_be_returned)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #test_list = (1,2,3,4,5,6,7,8,9)\n    for i in range(len(test_list)-1):\n        test_list[i] = test_list[i] + test_list[i+1]\n    print(test_list)\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    my_dict = {}\n    if len(test_list) == 0:\n        return []\n    my_dict = {**my_dict, **{value: 0 for value in test_list}}\n    new_list = []\n    for i in range(1, len(test_list)):\n        my_dict[test_list[i]] += my_dict[test_list[i-1]]\n        new_list.append(my_dict[test_list[i]])\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    from itertools import accumulate\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    count = 0\n    cum_sum = 0\n    for i in test_list:\n        count += 1\n        cum_sum += i\n    return cum_sum, count\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(0,len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for index in range(0, len(test_list)):\n        result += test_list[index]\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_sum = 0\n    for i in test_list:\n        list_sum += i\n    return list_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_of_averages = []\n    for t in nums:\n        sum_of_tuple = 0\n        for element in t:\n            sum_of_tuple += element\n        list_of_averages.append(sum_of_tuple/len(t))\n    return list_of_averages\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    res = []\n    for t in nums:\n        res.append(sum(t)/len(t))\n    return res\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x) / len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            a += nums[i][j]\n        b += nums[i][0]\n    b = b / len(nums)\n    return [a, b]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create a list of lists which is of length n (number of lists in the tuple)\n    # create a list for average values\n    average_list = []\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum_values = []\n    for i in range(len(nums)):\n        sum_values.append(sum(nums[i]))\n    return sum_values\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for num_tuple in nums:\n        num_list.append(sum(num_tuple) / len(num_tuple))\n    return num_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_to_list = []\n    for i in nums:\n        tuple_to_list.append(tuple(i))\n    average_list = []\n    for i in tuple_to_list:\n        average_list.append(sum(i)/len(i))\n    return tuple(average_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        for i in range(0, len(tup)):\n            total += tup[i]\n        averages.append(total/len(tup))\n    return averages\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    # your code here\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = ans + (test_tup1[i] % test_tup2[i], )\n    return ans\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    for i in range(len(test_tup1)):\n        assert type(test_tup1[i]) == int or type(test_tup1[i]) == float\n        assert type(test_tup2[i]) == int or type(test_tup2[i]) == float\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Tuples should be of the same length'\n    if len(test_tup1) == 0:\n        return ()\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #tuple_modulo(tuple1, tuple2) -> {new_tuple}\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] % test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert(len(test_tup1) == len(test_tup2))\n    res = ()\n    for i in range(len(test_tup1)):\n        res = res + (test_tup1[i] % test_tup2[i], )\n    return res\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i]%test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    if steps == 1: \n        return 1\n    if steps < 0: \n        return -1\n    if steps > d: \n        return -1\n    if steps == d: \n        return 1\n    if steps == 0: \n        return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #steps = steps\n    #d = d\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    elif steps < 0:\n        return -1\n    else:\n        if steps >= d:\n            return 1\n        else:\n            if steps - d >= 0:\n                return 1 + min_Jumps(steps - d, d)\n            else:\n                return -1\n            \ndef longest_common_subsequence(seq1, seq2):\n    '''\n    Write a function to check for the longest common sub sequence.\n    '''\n    dp = [[0 for i in range(len(seq2) + 1)] for j in range(len(seq1) + 1)]\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Write your code here\n    jumps = 0\n    pos = 0\n    while(pos < steps):\n        if pos + d > steps:\n            jumps += 1\n            break\n        else:\n            pos = pos + d\n            jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for step in steps:\n        if d in steps[step]:\n            count += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps[0] = 1\n    steps[1] = 2\n    n = len(steps)\n    for i in range(2, n):\n        steps[i] = steps[i-1] + steps[i-2]\n    if steps[n-1] < d:\n        return -1\n    steps[n-1] = 0\n    res = -1\n    for i in range(n-1, 0, -1):\n        if steps[i] > d:\n            return i\n        else:\n            res = i\n    return res\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d < 0 or steps < 0: \n        return -1\n    elif d == 0 and steps == 0: \n        return 0\n    elif steps == 0: \n        return -1\n    else: \n        min_jumps = 1 + min_Jumps(d, steps - 1)\n        if (d, 0) in seen_jumps: \n            min_jumps = seen_jumps[(d, 0)]\n        seen_jumps[(d, 0)] = min_jumps \n        return min_jumps \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 2:\n        return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump = 0\n    while steps>0:\n        jump += 1\n        steps -= d\n        if steps < 0:\n            return -1\n    return jump\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    count = 1\n    i = 0\n    while i < steps:\n        if d == i:\n            return count\n        elif d < i:\n            count += 1\n        else:\n            count = 1\n            d = i\n        i += 1\n    return count\n    \n    \ndef max_min(a,b):\n    '''\n    Write a function to find the maximum and minimum numbers from the given set of numbers.\n    '''\n    max_num = max(a)\n    min_num = min(a)\n    return (max_num, min_num)\n    \n    \ndef b_search(a, b):\n    '''\n    Write a function to find the element in the given array that has the minimum absolute difference between its left element and its right element.\n    '''\n    n = len(a)\n    if n < 1:\n        return None\n    start = 0\n    end = n - 1\n    min_abs_diff = abs(a[start] - a[end])\n    while start <= end:\n        mid = (start + end) // 2\n        mid_abs_diff = abs(a[mid] - a[mid + 1])\n        if mid_abs_diff < min_abs_diff:\n            min_abs_diff = mid_abs_diff\n        if mid_abs_diff > b:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return a[start]\n    \n    \ndef count_squares(M):\n    '''\n    Write a function to count the number of squares that lie in a given matrix.\n    '''\n    if not isinstance(M, list) or len(M) == 0:\n        return 0\n    rows, cols = len(M), len(M[0])\n    result = 0\n    for row in range(rows):\n        for col in range(cols):\n            if M[row][col] == 0:\n                continue\n            else:\n                for r in range(row, rows):\n                    for c in range(col, cols):\n                        if r == row or c == col:\n                            continue\n                        if M[r][c] == 0:\n                            continue\n                        elif (M[r][col] == M[row][c]):\n                            result += 1\n    return result\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function to compute the nth Fibonacci number\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef sort_algo(arr):\n    '''\n    Write a function to sort an array using the insertion sort algorithm.\n    '''\n    if len(arr) < 1:\n        return None\n    for i in range(len(arr)):\n        j = i\n        while j > 0 and arr[j] < arr[j-1]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n    return arr\n    \n    \ndef palindrome_check(s):\n    '''\n    Write a function to check if a given string is a palindrome. A palindrome is defined as a string that is written the same forward and backward.\n    '''\n    if len(s) < 1:\n        return None\n    if len(s) == 1:\n        return True\n    s = s.lower()\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \n    \ndef find_first_common_occurrence(s1, s2):\n    '''\n    Write a function to find the first occurrence of the longest common subsequence of two given strings in string.\n    '''\n    if len(s1) < 1 or len(s2) < 1:\n        return -1\n    if s1 == s2:\n        return 0\n    s1 = s1.lower()\n    s2 = s2.lower()\n    m = len(s1)\n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n    \n    \ndef is_substring(s1, s2):\n    '''\n    Write a function to check if one string is a substring of another.\n    '''\n    if len(s1) < 1 or len(s2) < 1:\n        return False\n    if s1 in s2:\n        return True\n    return False\n    \n    \ndef string_compression(s):\n    '''\n    Write a function to check if a string is comprimible or not\n    '''\n    if len(s) < 1:\n        return None\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if s == s[::-1]:\n            return s\n        else:\n            return s + \"x\"\n    i = 1\n    while i < len(s):\n        j = 1\n        while j < len(s) and s[j] == s[i]:\n            j += 1\n        s = s[:i] + (j - 1) * s[i] + s[i+1:]\n        i += 1\n    return s\n    \n    \ndef find_missing_number(nums):\n    '''\n    Write a function to find the first missing number in a sorted array.\n    '''\n    if len(nums) < 1:\n        return None\n    if len(nums) == 1:\n        return 1\n    nums = sorted(nums)\n    i = 0\n    while i < len(nums):\n        if nums[i] == i + 1:\n            i += 1\n        else:\n            break\n    return nums[i]\n    \n    \ndef long_repeat(s):\n    '''\n    Write a function that check if the given string has any\n    substring that repeats more than once.\n    '''\n    if len(s) < 1:\n        return None\n    if len(s) == 1:\n        return 1\n    length = 0\n    while length < len(s):\n        j = length\n        while j < len(s):\n            if s[j]!= s[length]:\n                length += 1\n            else:\n                j += 1\n                break\n        if j == len(s):\n            return length + 1\n    return length + 1\n    \n    \ndef hamming_dist(x, y):\n    '''\n    Write a function to calculate the Hamming distance (or number of bit\n    different) between two integers.\n    '''\n    if len(x) < 1 or len(y) < 1:\n        return None\n    return str(bin(int(x,2) ^ int(y,2))).count('1')\n    \n    \ndef multiply(a, b):\n    '''\n    Write a function that multiplies two numbers\n    '''\n    if a == None or b == None:\n        return None\n    if len(a) == 0 or len(b) == 0:\n        return None\n    return int(a, 2) * int(b, 2)\n    \n    \ndef rotate_array(arr, d):\n    '''\n    Write a function to rotate an array of size n by d places.\n    '''\n    if d > len(arr) or d < 1:\n        return None\n    new_arr = arr[:]\n    for i in range(d):\n        last_element = new_arr[0]\n        for j in range(len(new_arr) - 1):\n            new_arr[j] = new_arr[j + 1]\n       "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    num1 = nums1[:]\n    num2 = nums2[:]\n    len_1 = len(num1)\n    len_2 = len(num2)\n    for i in range(0,len_2):\n        num1[i] = num1[i]/num2[i]\n    for i in range(len_1):\n        num2[i] = num2[i]/num1[i]\n    return num1+num2\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i = 0\n    while i < len(nums1):\n        nums1[i] = nums1[i] / nums2[i]\n        i += 1\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i]/nums2[i])\n    return ans\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]=nums1[i]/nums2[i]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [a/b for a,b in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list1 = []\n    for num in nums1:\n        list1.append(num/nums2)\n    return list1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n    if len(nums1)<1 or len(nums2)<1:\n        return []\n    else:\n        return (list(divmod(sum(nums1),sum(nums2))))\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    i = 0\n    j = 0\n    while(i < len(nums1) and j < len(nums2)):\n        new_list.append(nums1[i]/nums2[j])\n        i += 1\n        j += 1\n    return new_list\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    '''\n    for num in range(0, len(test_str)):\n        if test_str[num].isdigit():\n            test_str = test_str[0] + test_str[1: ]\n    print(test_str)\n    '''\n    # with step\n    '''\n    a = test_str.split()\n    for i in range(len(a)):\n        if a[i].isdigit():\n            a.insert(i, a.pop(i + 1))\n    return \" \".join(a)\n    '''\n    # with index\n    '''\n    a = test_str.split()\n    for i in range(len(a)):\n        if a[i].isdigit():\n            a.pop(i)\n            a.insert(i + 1, a.pop(i))\n    return \" \".join(a)\n    '''\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    for ch in test_str:\n        if ch.isnumeric():\n            num_str += ch\n    while '0' in num_str:\n        num_str.replace('0', '')\n    for i in range(0, len(num_str)):\n        test_str = test_str.replace(num_str[i], '', 1)\n        test_str = test_str + num_str[i]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for i in test_str:\n        if i.isnumeric():\n            new_str = new_str + i + \" \"\n    return new_str.rstrip()\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # string of numbers\n    numbers = '31415926535897'\n    # string to print\n    temp_string = ''\n    for i in range(len(numbers)):\n        temp_string += numbers[i]\n    # print(temp_string)\n    return ''.join(list(filter(lambda x: x.isalpha(), temp_string)))\n    # return ''.join(list(filter(lambda x: x.isalpha() and x.isdigit(), temp_string)))\n    # return ''.join(list(filter(lambda x: not x.isalpha(), temp_string)))\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for i in test_str:\n        if not i.isdigit():\n            result += i\n            continue\n        else:\n            result += test_str[test_str.find(i)+1:]\n            result += i\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) == 0:\n        return ''\n    if len(test_str) == 1:\n        return test_str\n    '''\n    using slicing\n    '''\n    test_str = test_str[1:] + test_str[0]\n    return test_str\n    '''\n    using list\n    '''\n    test_str = test_str.replace(test_str[0],'')\n    return test_str + test_str[0]\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for c in test_str:\n        if not c.isdigit():\n            result += c\n    for i in range(len(test_str)):\n        if not test_str[i].isdigit():\n            result += test_str[i]\n            test_str = test_str[:i] + test_str[i+1:]\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = []\n    num_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isnumeric():\n            num_list.append(test_str[i])\n        else:\n            continue\n    while num_list:\n        new_str.append(num_list.pop())\n    return \"\".join(new_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    a = test_str.split()\n    print(a)\n    b = ''.join(a)\n    print(b)\n    return b\n    \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # if no numbers found: return\n    if '0' not in test_str:\n        return test_str\n    #\n    test_str = test_str.replace('0','')\n    test_str = test_str + '0'\n    #\n    return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # The largest subset should be at least as big as the first pair.\n    if a[0] == 0:\n        return 0\n    \n    # largest_sum is used to track the largest sum found so far.\n    largest_sum = 0\n    \n    # max_size is used to track the size of the largest subset.\n    max_size = 1\n    \n    # Note that we must add 1 to the length of a because we are only looking for size 1 and 2 subsets\n    for size in range(1, len(a) + 1):\n        # The current largest subset is a subset of a with size size.\n        largest_subset = a[:size]\n        \n        # The current largest subset is a subset of a with size size.\n        current_sum = sum(largest_subset)\n        \n        # If the current largest subset is bigger than the largest_sum, then update largest_sum and max_size.\n        if current_sum > largest_sum:\n            largest_sum = current_sum\n            max_size = size\n            \n    # Return the size of the largest subset\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest(a):\n        s=[]\n        def find(lst,arr,n):\n            if len(lst)==0:\n                return []\n            elif len(lst)==1:\n                if int(lst[0])%arr[0]==0:\n                    s.append(arr[0])\n                return s\n            else:\n                t=find(lst[1:],arr,arr[0])\n                if len(t)>0:\n                    s.append(arr[0])\n                    return s+t\n                else:\n                    return s\n        return find(a,s,[])\n    n=len(a)\n    if n==0:\n        return []\n    elif n==1:\n        return a\n    else:\n        return largest(a)\n    \ndef euler0028(n):\n    '''\n    Given the number n, write a function that returns the nth Fibonacci number. \n    '''\n    def fibonacci(n):\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return fibonacci(n-1)+fibonacci(n-2)\n    return fibonacci(n)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # a = [4,3,6,1,2,9,8]\n    n = len(a)\n    for i in range(n):\n        for j in range(i,n):\n            if (j-i) % a[i] == 0:\n                continue\n            else:\n                break\n        else:\n            print(\"The largest subset is : \",a[i:j+1])\n            return\n    else:\n        print(\"The largest subset is : \",a)\n        return\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    nums = set(a)\n    if len(nums) < 2:\n        return len(nums)\n    n = 1\n    while True:\n        #if n is the product of two numbers in nums, break\n        if n == max(nums):\n            break\n        #find an element in nums that if multiplied by n, satisfies the condition\n        #i.e. we need to satisfy the condition to add n to the subset\n        #otherwise, we try another element\n        for i in nums:\n            if n == i:\n                break\n            if n % i == 0:\n                break\n        else:\n            n += 1\n    return n\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 1\n    if len(a) == 2:\n        return 2\n    else:\n        max_size = 0\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if a[i] % a[j] == 0:\n                    max_size = max(max_size, a[i] // a[j] + largest_subset(a[:i] + a[i + 1:]))\n        return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    ans = 0\n    for i in range(n-1):\n        if a[i]%a[i+1]==0:\n            ans+=1\n    return ans\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    c = []\n    res = {}\n    n = len(a)\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] % a[j] == 0:\n                res[a[i]] = res.get(a[i], 0) + 1\n    for i in res:\n        if res[i] > 0:\n            c.append(i)\n    print(c)\n    print(res)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    subset_count = 0\n    subsets = {}\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if (j-i) not in subset_count:\n                subset_count += 1\n                subsets[(i, j)] = (a[i] + a[j]) % a[i]\n    return max(subset_count, key = lambda k: len(subsets[k]))\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    l = sorted(a)\n    n = len(l)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if l[i]%l[j]==0:\n                dp[i][j]=1\n            else:\n                dp[i][j]=max(dp[i][j-1],dp[i+1][j])\n    return n-max(max(row) for row in dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = 0\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            if j - i == a[i] - a[j]:\n                s = s + 1\n    return s\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        raise ValueError('list must have at least 1 element')\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    return sorted((arr1[0], arr2[0]))[1]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        n = len(arr1)\n        arr1, arr2 = arr2, arr1\n    \n    for i in range(n):\n        if arr1[i] < arr2[i]:\n            arr1[i], arr2[i] = arr2[i], arr1[i]\n    \n    m = len(arr1)\n    if m % 2 == 1:\n        return arr1[int((m + 1) / 2)]\n    else:\n        return (arr1[int(m/2)] + arr2[int(m/2)]) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    m = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            m = m + 1\n            i = i + 1\n        else:\n            j = j + 1\n    if m == 0:\n        return max(arr1)\n    elif m == len(arr1):\n        return min(arr2)\n    else:\n        return (max(arr1)+min(arr2))/2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[(len(arr)-1)//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    if n%2!= 0:\n        m = n//2 + 1\n        while i < n and j < n:\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n        if i < n:\n            m = i\n        if j < n:\n            m = j\n        \n        return arr1[m]\n    else:\n        m = (n-1)//2\n        while i < n and j < n:\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n        if i < n:\n            m = i\n        if j < n:\n            m = j\n        \n        return (arr1[m] + arr1[m+1])/2.0\n    \n    \n    \ndef get_maximum_value(arr1, arr2, n):\n    '''\n    Write a function to find the maximum value.\n    '''\n    i = 0\n    j = 0\n    if n%2!= 0:\n        m = n//2 + 1\n        while i < n and j < n:\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n        if i < n:\n            m = i\n        if j < n:\n            m = j\n        \n        return max(arr1[m], arr2[m])\n    else:\n        m = (n-1)//2\n        while i < n and j < n:\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n        if i < n:\n            m = i\n        if j < n:\n            m = j\n        \n        return max(arr1[m], arr2[m])\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==1:\n        return (arr1[0] + arr2[0])//2\n    elif n==2:\n        return (min(arr1[0], arr2[0]) + max(arr1[1], arr2[1]))/2\n    else:\n        # [0, 1, 2, 3, 4]\n        # arr1[0] = arr2[0] = arr1[1] = arr2[1] = arr1[2] = arr2[2]\n        # arr1[1] = arr2[1] = arr1[2] = arr2[2] = arr1[3] = arr2[3]\n        # arr1[2] = arr2[2] = arr1[3] = arr2[3] = arr1[4] = arr2[4]\n        # arr1[4] = arr2[4] = arr1[5] = arr2[5] = arr1[6] = arr2[6]\n        # arr1[5] = arr2[5] = arr1[6] = arr2[6] = arr1[7] = arr2[7]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == len(arr2):\n        return get_median_recur(arr1, arr2, n)\n    else:\n        return get_median_recur(arr2, arr1, n)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    n = len(arr1)\n    # print(sorted_arr1)\n    # print(sorted_arr2)\n    i = j = 0\n    # print(n)\n    # print(\"sorted_arr1[:n//2]\",sorted_arr1[:n//2])\n    while i < n and j < n:\n        # print(sorted_arr1[i], sorted_arr2[j], i, j)\n        if sorted_arr1[i] < sorted_arr2[j]:\n            arr1[n//2] = sorted_arr1[i]\n            i += 1\n        else:\n            arr1[n//2] = sorted_arr2[j]\n            j += 1\n        n //= 2\n    # print(arr1)\n    while i < n:\n        arr1[n//2] = sorted_arr1[i]\n        i += 1\n        n //= 2\n    while j < n:\n        arr1[n//2] = sorted_arr2[j]\n        j += 1\n        n //= 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n%2!= 0):\n        return median(arr1, arr2)\n    else:\n        return median_partition(arr1, arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = arr1[:n]\n    arr2 = arr2[:n]\n    arr1.sort()\n    arr2.sort()\n    return(int(len(arr1)/2)) + (int(len(arr2)/2))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def pow(x,n):\n        if n == 0:\n            return 1\n        else:\n            return x*pow(x,n-1)\n    return [pow(x,n) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    result = []\n    for i in range(len(nums)):\n        result.append(n*power)\n        power = power * nums[i]\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    out=[]\n    for i in nums:\n        out.append(i**n)\n    return out\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    result = []\n    \n    for i in range(len(nums)):\n        result.append(n ** i)\n    \n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #creating a list\n    s = list(range(n))\n    #creating a copy of the list\n    o = nums.copy()\n    #dictionary for number and their corresponding power\n    d = {1:1}\n    #iterating through the list\n    for i in range(1,n+1):\n        for j in range(len(nums)):\n            if nums[j] in d.keys():\n                d[nums[j]] = d[nums[j]] * (i)\n            else:\n                d[nums[j]] = i\n    #dictionary with list as the keys and the power as the values\n    for k in d.keys():\n        if k in nums:\n            s.append(d[k])\n    return s\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #use list comprehension\n    return nums ** n\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]=nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    result = []\n    for n in range(len(nums)):\n        result.append(n ** n)\n    print(result)\n    \nnums = [2,3,4]\nnth_nums(nums,2)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return [n**i for i in nums]\n    else:\n        return [n**i for i in nums] + nth_nums(nums,n-1)\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    print('Given String : ', string)\n    print('Upper Case : ', string.upper())\n    \n    \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    #return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Code here\n    return string.upper()\nprint(is_upper('hey'))\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # String.upper()\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)>=2:\n        newList[0], newList[-1]=newList[-1], newList[0]\n    else:\n        newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n        \nif __name__ == '__main__':\n    print(\"Enter the list of numbers in the list : \")\n    input_List = input().split(\",\")\n    print(\"The list is : \", input_List)\n    print(\"The new list is : \", swap_List(input_List))\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    l = newList[0]\n    newList.remove(l)\n    newList.insert(0,l)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size=len(newList)\n    newList[0],newList[size-1]=newList[size-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if(newList == []):\n        print('Empty List')\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(len(newList)):\n        if(i == 0):\n            newList.insert(0, newList.pop(-1))\n            return newList\n        elif(i == len(newList)):\n            newList.insert(len(newList), newList.pop(0))\n            return newList\n        else:\n            newList.insert(i, newList.pop(-1))\n            newList.insert(i, newList.pop(0))\n            return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a=[]\n    b=[]\n    for i in range(len(newList)):\n        if i==0:\n            a.append(newList[i])\n        if i==len(newList)-1:\n            b.append(newList[i])\n    newList.remove(newList[0])\n    newList.remove(newList[0])\n    newList.insert(0,a)\n    newList.insert(len(newList),b)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n    \nprint(swap_List([1,2,3,4,5,6]))\nprint(swap_List([7,8,9,10]))\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length - 1]\n    newList[0] = last\n    newList[length - 1] = first\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0\n    for i in range(1, int(r)+1):\n        area = area + 1/math.sqrt(r**2 - i**2)\n    return round(area, 5)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def largest_triangle_area(r):\n        import math\n        import math\n        if (r == 0):\n            print(\"The area of a triangle is zero\")\n        else:\n            A = math.sqrt(r*r*r)\n            B = 2*A\n            C = math.sqrt(2*(A*(A+r)))\n            D = (A*A) + (B*B) + (C*C)\n            print(\"The area of a triangle is\", round(math.sqrt(D), 3))\n            \n    largest_triangle_area(r)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def sant_char(r):\n        s = 3.14159\n        s1 = s * (r ** 2)\n        return s1\n    if type(r) == int and r >= 0:\n        sant = sant_char(r)\n        sant1 = sant * 0.5\n        return sant1\n    else:\n        print(\"Please enter a valid radius.\")\n        return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    #Check if r is greater than zero\n    if r > 0 :\n        area = math.sqrt(((r**2)*3)/4)\n    else :\n        area = 0\n    print(\"The area of the triangle inscribed in a semicircle with radius\",r,\"is :\",area)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area_triangle = (1/2) * (r*r * math.sin(math.pi/3))\n    return area_triangle\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(0, 180):\n        angle = i * 3.14 / 180\n        h = (r ** 2) * (3.14 / 180)\n        area += (h / 2) * (angle ** 2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * 3.14 * r ** 2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (1/3)*r*(r*r*r - r + 2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = r * math.sqrt(2)\n    print('The area of the largest triangle inscribed in a semicircle with a radius',r,'is',a)\ndef cylinder_area(r,h) :\n    '''\n    Write a python function to find the surface area of a cylinder with a given radius and height.\n    '''\n    import math\n    area = 2 * math.pi * r * h\n    print('The surface area of the cylinder with a radius',r,'and height',h,'is',area)\ndef rectangle_area(w,h) :\n    '''\n    Write a python function to find the surface area of a rectangle with a given width and height.\n    '''\n    area = w * h\n    print('The surface area of the rectangle with width',w,'and height',h,'is',area)\ndef triangle_volume(a,h) :\n    '''\n    Write a python function to find the volume of a triangle with given side lengths and height.\n    '''\n    import math\n    volume = (1 / 3) * math.sqrt(h * a * a * a)\n    print('The volume of the triangle with side lengths',a,'and height',h,'is',volume)\ndef rectangle_volume(w,h) :\n    '''\n    Write a python function to find the volume of a rectangle with given width and height.\n    '''\n    volume = w * h\n    print('The volume of the rectangle with width',w,'and height',h,'is',volume)\ndef cylinder_volume(r,h) :\n    '''\n    Write a python function to find the volume of a cylinder with given radius and height.\n    '''\n    volume = math.pi * r * r * h\n    print('The volume of the cylinder with radius',r,'and height',h,'is',volume)\ndef cone_volume(r,h) :\n    '''\n    Write a python function to find the volume of a cone with given radius and height.\n    '''\n    volume = (1/3) * math.pi * (r * h) * r\n    print('The volume of the cone with radius',r,'and height',h,'is',volume)\ndef sph_volume(r) :\n    '''\n    Write a python function to find the volume of the sphere with given radius.\n    '''\n    volume = 4 / 3 * math.pi * r * r * r\n    print('The volume of the sphere with radius',r,'is',volume)\ndef cone_surface_area(r,h) :\n    '''\n    Write a python function to find the surface area of a cone with given radius and height.\n    '''\n    import math\n    area = 2 * math.pi * r * r * h\n    print('The surface area of the cone with radius',r,'and height',h,'is',area)\ndef cylinder_surface_area(r,h) :\n    '''\n    Write a python function to find the surface area of a cylinder with given radius and height.\n    '''\n    import math\n    area = 2 * math.pi * r * h\n    print('The surface area of the cylinder with radius',r,'and height',h,'is',area)\ndef cone_surface_area(r,h) :\n    '''\n    Write a python function to find the surface area of a cone with given radius and height.\n    '''\n    import math\n    area = 2 * math.pi * r * (r + h)\n    print('The surface area of the cone with radius',r,'and height',h,'is',area)\ndef sphere_surface_area(r) :\n    '''\n    Write a python function to find the surface area of a sphere with given radius.\n    '''\n    import math\n    area = 4 * math.pi * r * r\n    print('The surface area of the sphere with radius',r,'is',area)\ndef cone_surface_volume(r,h) :\n    '''\n    Write a python function to find the volume of a cone with given radius and height.\n    '''\n    import math\n    volume = (1/3) * math.pi * (r * r * h)\n    print('The volume of the cone with radius',r,'and height',h,'is',volume)\ndef cylinder_surface_volume(r,h) :\n    '''\n    Write a python function to find the volume of a cylinder with given radius and height.\n    '''\n    import math\n    volume = (1/3) * math.pi * r * h\n    print('The volume of the cylinder with radius',r,'and height',h,'is',volume)\ndef sphere_surface_volume(r) :\n    '''\n    Write a python function to find the volume of a sphere with given radius.\n    '''\n    volume = (4/3) * math.pi * r * r * r\n    print('The volume of the sphere with radius',r,'is',volume)\ndef cone_surface_volume(r,h) :\n    '''\n    Write a python function to find the volume of a cone with given radius and height.\n    '''\n    import math\n    volume = (1/3) * math.pi * (r * r * h)\n    print('The volume of the cone with radius',r,'and height',h,'is',volume)\ndef sphere_volume(r) :\n    '''\n    Write a python function to find the volume of a sphere with given radius.\n    '''\n    volume = (4/3) * math.pi * r * r * r\n    print('The volume of the sphere with radius',r,'is',volume)\ndef cone_volume(r,h) :\n    '''\n    Write a python function to find the volume of a cone with given radius and height.\n    '''\n    import math\n    volume = (1/3) * math.pi * (r * r * h)\n    print('The volume of the cone with radius',r,'and height',h,'is',volume)\ndef sphere_volume(r) :\n    '''\n    Write a python function to find the volume of a sphere with given radius.\n    '''\n    volume = (4/3) * math.pi * r * r * r\n    print('The volume of the sphere with radius',r,'is',volume)\ndef cone_volume(r,h) :\n    '''\n    Write a python function to find the volume of a cone with given radius and height.\n    '''\n    import math\n    volume = (1/3) * math.pi * (r * r * h)\n    print('The volume of the cone with radius',r,'and height',h,'is',volume)\ndef sphere_surface_area(r) :\n    '''\n    Write a python function to find the surface area of a sphere with given radius.\n    '''\n    import math\n    area = 4 * math.pi * r * r\n    print('The surface area of the sphere with radius',r,'is',area)\ndef cone_surface_area(r,h) :\n    '''\n    Write a python function to find the surface area of a cone with given radius and height.\n    '''\n    import math\n    area = 2 * math.pi * r * (r + h)\n    print('The surface area of the cone with radius',r,'and height',h,'is',area)\ndef sphere_surface_area(r) :\n    '''\n    Write a python function to find the surface area of a sphere with given radius.\n    '''\n    import math\n    area = 4 * math.pi * r * r\n    print('The surface area of the sphere with radius',r,'is',area)\ndef cone_surface_area(r,h) :\n    '''\n    Write a python function to find the surface area of a cone with given radius and height.\n    '''\n    import math\n    area = 2 * math.pi * r * (r + h)\n    print('The surface area of the cone with radius',r,'and height',h,'is',area)\ndef sphere_surface_volume(r) :\n    '''\n    Write a python function to find the volume of a sphere with given radius.\n    '''\n    import math\n    volume = (4/3) * math.pi * r * r * r\n    print('The volume of the sphere with radius',r,'is',volume)\ndef cone_surface_volume(r,h) :\n    '''\n    Write a python function to find the volume of a cone with given radius and height.\n    '''\n    import math\n    volume = (1/3) * math"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def circum(r) :\n        return 2*math.pi*r\n    def triangle_area(r) :\n        return (circum(r)**2)/4\n    return triangle_area(r)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    while start < end:\n        mid = (start + end) // 2\n        if array[mid] == mid+1:\n            start = mid + 1\n        elif array[mid] == mid:\n            end = mid\n        else:\n            return mid+1\n    return start+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start==end:\n        return start+1\n    if array[start]==array[end]:\n        return find_First_Missing(array,start+1,end-1)\n    if array[start]<array[end]:\n        mid=start+((end-start)/2)\n        if array[mid]<array[start]:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid]>array[end]:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,start,mid-1)\n    else:\n        mid=start+((end-start)/2)\n        if array[mid]>array[end]:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid]<array[end]:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,start,mid-1)\ndef find_First_Missing_from_Sorted_Array(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    length=len(array)\n    for i in range(0,length):\n        if i not in array:\n            return i\n    return length+1\ndef find_First_Missing_from_Sorted_Array(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    length=len(array)\n    for i in range(0,length):\n        if array[i]!=i+1:\n            return i+1\n    return length+1\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    for i in range(0,len(array)):\n        diff=target-array[i]\n        if diff in array and array[i]!=array[diff]:\n            return array.index(diff),i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    for i in range(0,len(array)):\n        diff=target-array[i]\n        if diff in array and array[i]!=array[diff]:\n            return array.index(diff),i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]=i\n    return None\ndef two_sum(array,target):\n    '''\n    Write a python function to return the indices of two numbers in an array, whose sum is equal to the target value.\n    '''\n    hash={}\n    for i in range(0,len(array)):\n        if target-array[i] in hash:\n            return hash[target-array[i]],i\n        else:\n            hash[array[i]]"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array)\n    if end==0:\n        return 0\n    if end==1:\n        return 1\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return mid+1\n    elif array[mid]<mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    elif start==end:\n        if array[start]==start:\n            return start+1\n        return array[start]\n    else:\n        if array[start]==start:\n            return find_First_Missing(array,start+1,end)\n        elif array[start]>start:\n            return find_First_Missing(array,start+1,end)\n        else:\n            return find_First_Missing(array,start,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing(array,mid + 1,end)\ndef find_First_Missing_from_sorted_arr(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing_from_sorted_arr(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing_from_sorted_arr(array,mid + 1,end)\ndef find_First_Missing_from_unsorted_arr(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from an unsorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing_from_unsorted_arr(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing_from_unsorted_arr(array,mid + 1,end)\ndef find_First_Missing_from_inverted_arr(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from an array of integers where the integers are sorted in an ascending order, and then the integers are reversed.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing_from_inverted_arr(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing_from_inverted_arr(array,mid + 1,end)\ndef find_First_Missing_from_inverted_and_sorted_arr(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from an array of integers where the integers are sorted in an ascending order, and then the integers are reversed.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing_from_inverted_and_sorted_arr(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing_from_inverted_and_sorted_arr(array,mid + 1,end)\ndef find_First_Missing_from_sorted_arr_reverse(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from an array of integers where the integers are sorted in an ascending order, and then the integers are reversed.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing_from_sorted_arr_reverse(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing_from_sorted_arr_reverse(array,mid + 1,end)\ndef find_First_Missing_from_unsorted_arr_reverse(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from an array of integers where the integers are sorted in an ascending order, and then the integers are reversed.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing_from_unsorted_arr_reverse(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing_from_unsorted_arr_reverse(array,mid + 1,end)\ndef find_First_Missing_from_inverted_and_sorted_arr_reverse(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from an array of integers where the integers are sorted in an ascending order, and then the integers are reversed.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing_from_inverted_and_sorted_arr_reverse(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing_from_inverted_and_sorted_arr_reverse(array,mid + 1,end)\ndef find_First_Missing_from_sorted_arr_all_reverse(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from an array of integers where the integers are sorted in an ascending order, and then the integers are reversed.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing_from_sorted_arr_all_reverse(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing_from_sorted_arr_all_reverse(array,mid + 1,end)\ndef find_First_Missing_from_unsorted_arr_all_reverse(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from an array of integers where the integers are sorted in an ascending order, and then the integers are reversed.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if array[start] > end:\n        return end + 1\n    elif array[start] <= array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > mid:\n        return find_First_Missing_from_unsorted_arr_all_reverse(array,start,mid - 1)\n    if array[mid] <= array[end]:\n        return find_First_Missing_from_unsorted_arr_all_reverse(array,mid + 1,end)\ndef find_First_Missing_from_inverted_and_sorted_arr_all_reverse(array,start="
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if end-start==0:\n        return array[0]\n    else:\n        middle=(start+end)//2\n        left=find_First_Missing(array,start,middle)\n        right=find_First_Missing(array,middle+1,end)\n        if right!=None and left!=None and left>right:\n            return left\n        else:\n            return right\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return -1\n    if array[start] == start:\n        return start\n    if array[end] == end:\n        return end\n    middle = start + (end - start) // 2\n    if array[middle] == middle:\n        return middle\n    if array[start] <= array[middle]:\n        if array[middle] < array[end]:\n            return find_First_Missing(array,start,middle)\n        else:\n            return find_First_Missing(array,middle+1,end)\n    elif array[middle] > array[end]:\n        if array[middle] < array[start]:\n            return find_First_Missing(array,middle+1,end)\n        else:\n            return find_First_Missing(array,start,middle)\n    else:\n        if array[middle] > array[middle+1]:\n            return find_First_Missing(array,middle,end)\n        else:\n            return find_First_Missing(array,start,middle)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start == end:\n        return start+1\n    #print(start,end)\n    mid = (start+end)//2\n    if mid < array[mid]:\n        return find_First_Missing(array,start,mid)\n    elif mid > array[mid]:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return mid+1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    temp = string.replace(\" \", \"%20\")\n    return temp\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for c in string:\n        if c =='':\n            new_string += '%20'\n        else:\n            new_string += c\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for i in range(0, len(string)):\n        if string[i] =='':\n            new_string += '%20'\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            l.append(list[i])\n    return l\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    count = 0\n    newlist = []\n    for i in list:\n        if i % 2 == 0:\n            newlist.append(i)\n            count += 1\n        if count == 2:\n            return newlist\n    return newlist\n    \nif __name__ == \"__main__\":\n    \n    testList = []\n    print(f\"Original List : {testList}\")\n    print(f\"Even numbers : {Split(testList)}\")\n    "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even =[]\n    for i in range(len(list)):\n        if(list[i]%2 == 0):\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_of_even=[]\n    for i in list:\n        if i%2==0:\n            list_of_even.append(i)\n    return list_of_even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n    \nprint(Split(list))\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    sub.append((x+1,y)) \n    sub.append((x-1,y)) \n    sub.append((x,y-1)) \n    sub.append((x,y+1)) \n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(x+ele, y+ele), (x-ele, y+ele), (x-ele, y-ele), (x+ele, y-ele)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == None:\n        return sub\n    sub.append(ele)\n    return adjac(table[ele[0]][ele[1]], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x, y-1),(x+1, y-1),(x+1, y), (x+1, y+1),(x, y+1), (x-1, y+1), (x-1, y), (x-1, y-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] < 0 or ele[0] >= len(grid) or ele[1] < 0 or ele[1] >= len(grid[0]):\n        return []\n    elif grid[ele[0]][ele[1]] == 0:\n        return []\n    elif grid[ele[0]][ele[1]] == 1:\n        if (ele[0]+1, ele[1]) in sub:\n            sub.remove((ele[0]+1, ele[1]))\n        elif (ele[0]-1, ele[1]) in sub:\n            sub.remove((ele[0]-1, ele[1]))\n        elif (ele[0], ele[1]-1) in sub:\n            sub.remove((ele[0], ele[1]-1))\n        elif (ele[0], ele[1]+1) in sub:\n            sub.remove((ele[0], ele[1]+1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    elif grid[ele[0]][ele[1]] == 2:\n        if (ele[0]+1, ele[1]) in sub:\n            sub.remove((ele[0]+1, ele[1]))\n        elif (ele[0]-1, ele[1]) in sub:\n            sub.remove((ele[0]-1, ele[1]))\n        elif (ele[0], ele[1]-1) in sub:\n            sub.remove((ele[0], ele[1]-1))\n        elif (ele[0], ele[1]+1) in sub:\n            sub.remove((ele[0], ele[1]+1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    elif grid[ele[0]][ele[1]] == 3:\n        if (ele[0]+1, ele[1]) in sub:\n            sub.remove((ele[0]+1, ele[1]))\n        elif (ele[0]-1, ele[1]) in sub:\n            sub.remove((ele[0]-1, ele[1]))\n        elif (ele[0], ele[1]-1) in sub:\n            sub.remove((ele[0], ele[1]-1))\n        elif (ele[0], ele[1]+1) in sub:\n            sub.remove((ele[0], ele[1]+1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    elif grid[ele[0]][ele[1]] == 4:\n        if (ele[0]+1, ele[1]) in sub:\n            sub.remove((ele[0]+1, ele[1]))\n        elif (ele[0]-1, ele[1]) in sub:\n            sub.remove((ele[0]-1, ele[1]))\n        elif (ele[0], ele[1]-1) in sub:\n            sub.remove((ele[0], ele[1]-1))\n        elif (ele[0], ele[1]+1) in sub:\n            sub.remove((ele[0], ele[1]+1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    elif grid[ele[0]][ele[1]] == 5:\n        if (ele[0]+1, ele[1]) in sub:\n            sub.remove((ele[0]+1, ele[1]))\n        elif (ele[0]-1, ele[1]) in sub:\n            sub.remove((ele[0]-1, ele[1]))\n        elif (ele[0], ele[1]-1) in sub:\n            sub.remove((ele[0], ele[1]-1))\n        elif (ele[0], ele[1]+1) in sub:\n            sub.remove((ele[0], ele[1]+1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    elif grid[ele[0]][ele[1]] == 6:\n        if (ele[0]+1, ele[1]) in sub:\n            sub.remove((ele[0]+1, ele[1]))\n        elif (ele[0]-1, ele[1]) in sub:\n            sub.remove((ele[0]-1, ele[1]))\n        elif (ele[0], ele[1]-1) in sub:\n            sub.remove((ele[0], ele[1]-1))\n        elif (ele[0], ele[1]+1) in sub:\n            sub.remove((ele[0], ele[1]+1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    elif grid[ele[0]][ele[1]] == 7:\n        if (ele[0]+1, ele[1]) in sub:\n            sub.remove((ele[0]+1, ele[1]))\n        elif (ele[0]-1, ele[1]) in sub:\n            sub.remove((ele[0]-1, ele[1]))\n        elif (ele[0], ele[1]-1) in sub:\n            sub.remove((ele[0], ele[1]-1))\n        elif (ele[0], ele[1]+1) in sub:\n            sub.remove((ele[0], ele[1]+1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    elif grid[ele[0]][ele[1]] == 8:\n        if (ele[0]+1, ele[1]) in sub:\n            sub.remove((ele[0]+1, ele[1]))\n        elif (ele[0]-1, ele[1]) in sub:\n            sub.remove((ele[0]-1, ele[1]))\n        elif (ele[0], ele[1]-1) in sub:\n            sub.remove((ele[0], ele[1]-1))\n        elif (ele[0], ele[1]+1) in sub:\n            sub.remove((ele[0], ele[1]+1))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0], ele[1]+1))\n        return sub\n    elif grid[ele[0]][ele[1]] == 9:\n        if (ele[0]+1, ele[1]) in sub:\n            sub.remove((ele[0]+1, ele[1]))\n        elif (ele[0]-1, ele[1]) in sub:\n            sub.remove((ele[0]-1, ele[1]))\n        elif (ele[0], ele[1]-1) in sub:\n            sub.remove((ele[0], ele[1]-1))\n        elif (ele[0], ele[1]+1) in sub:\n            sub.remove((ele"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    dx = 0\n    dy = 0\n    if x-1 >= 0:\n        if (x-1,y) not in sub:\n            sub.append((x-1,y))\n            dx += 1\n        if y-1 >= 0:\n            if (x-1,y-1) not in sub:\n                sub.append((x-1,y-1))\n                dy += 1\n        if y+1 < N:\n            if (x-1,y+1) not in sub:\n                sub.append((x-1,y+1))\n                dy += 1\n    if x+1 < N:\n        if (x+1,y) not in sub:\n            sub.append((x+1,y))\n            dx += 1\n        if y-1 >= 0:\n            if (x+1,y-1) not in sub:\n                sub.append((x+1,y-1))\n                dy += 1\n        if y+1 < N:\n            if (x+1,y+1) not in sub:\n                sub.append((x+1,y+1))\n                dy += 1\n    if y-1 >= 0:\n        if (x,y-1) not in sub:\n            sub.append((x,y-1))\n            dy += 1\n        if x-1 >= 0:\n            if (x-1,y-1) not in sub:\n                sub.append((x-1,y-1))\n                dx += 1\n        if x+1 < N:\n            if (x+1,y-1) not in sub:\n                sub.append((x+1,y-1))\n                dx += 1\n    if y+1 < N:\n        if (x,y+1) not in sub:\n            sub.append((x,y+1))\n            dy += 1\n        if x-1 >= 0:\n            if (x-1,y+1) not in sub:\n                sub.append((x-1,y+1))\n                dx += 1\n        if x+1 < N:\n            if (x+1,y+1) not in sub:\n                sub.append((x+1,y+1))\n                dx += 1\n    return(dx,dy)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] < 0 or ele[0] > 7:\n        return sub\n    if ele[1] < 0 or ele[1] > 7:\n        return sub\n    if ele[0] == 0 and ele[1] == 0:\n        return sub\n    if ele[0] == 0 and ele[1] == 7:\n        return sub\n    if ele[0] == 7 and ele[1] == 0:\n        return sub\n    if ele[0] == 7 and ele[1] == 7:\n        return sub\n    sub.append((ele[0]-1, ele[1]))\n    sub.append((ele[0]+1, ele[1]))\n    sub.append((ele[0], ele[1]-1))\n    sub.append((ele[0], ele[1]+1))\n    return sub\n    \ndef is_safe(ele, black_list):\n    '''\n    Write a function that returns True if the position is not adjacent to black_list.\n    '''\n    if ele in black_list:\n        return False\n    for e in adjac(ele):\n        if e in black_list:\n            return False\n    return True\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    y,x = ele\n    new = []\n    for i in range(max(0, y-1), min(y+2, 7)):\n        for j in range(max(0, x-1), min(x+2, 7)):\n            if i!= y or j!= x:\n                new.append((i, j))\n    return new\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in text:\n        if i == \" \":\n            new_text += \"_\"\n        else:\n            new_text += i\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_',' ')\n    \ndef solution(s):\n    '''\n    Write a function that converts a string to an acronym. An acronym is a word formed by the first letters of \n    words in a string separated by a period. For example, \u201cusa.gov\u201d would return \u201cusa.gov\u201d.\n    '''\n    return '.'.join(s.split('.')[0].lower()+'.'.join(s.split('.')[1:]).split(' '))\n    \ndef strings(s):\n    '''\n    Write a function that reverses a string. The input string is given as an array of characters char[].\n    '''\n    return s[::-1]\n    \ndef reverse_alternate(s):\n    '''\n    Write a function that reverses the alternating part of a string. For example, \u201chello\u201d -> \u201colleh\u201d.\n    '''\n    return ''.join(reversed(s[::2]))+''.join(reversed(s[1::2]))\n    \ndef reverse_in_place(s):\n    '''\n    Write a function that reverses the string word by word.\n    '''\n    i = 0\n    j = len(s)-1\n    while i < j:\n        s[i],s[j] = s[j],s[i]\n        i+=1\n        j-=1\n    return ''.join(s)\n    \ndef is_even(n):\n    '''\n    Write a function that returns true if n is even.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    # list comprehensions\n    # text = text.split()\n    # for i, word in enumerate(text):\n    #     text[i] = word.replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # print(text.replace(' ', '_'))\n    # print(text.replace('_',''))\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pos=0\n    for i in range(len(num_list)):\n        if num_list[i]!=0:\n            num_list[pos]=num_list[i]\n            pos+=1\n    for j in range(pos,len(num_list)):\n        num_list[j]=0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(0, len(num_list)):\n        if num_list[i] == 0:\n            count += 1\n    for i in range(count, len(num_list)):\n        num_list[i] = num_list[i - count]\n    for i in range(0, count):\n        num_list[i] = 0\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list_length = len(num_list)\n    zero_index = 0\n    while zero_index < num_list_length:\n        if num_list[zero_index] == 0:\n            zero_index += 1\n            continue\n        else:\n            temp = num_list[zero_index]\n            num_list[zero_index] = num_list[zero_index + 1]\n            num_list[zero_index + 1] = temp\n            zero_index += 2\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    num_list2 = num_list.copy()\n    for i in range(len(num_list2)):\n        if num_list2[i]!= 0:\n            num_list2.insert(i+count,0)\n            count += 1\n    return num_list2\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Write your code here\n    # print(num_list)\n    length = len(num_list)\n    count = 0\n    for index in range(length):\n        if num_list[index]!= 0:\n            num_list[index], num_list[count] = num_list[count], num_list[index]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    final = []\n    for num in num_list:\n        if num!= 0:\n            final.append(num)\n    for num in final:\n        num_list.remove(num)\n        num_list.append(num)\n    return num_list\n    # Code here\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    flag = True\n    while flag:\n        flag = False\n        for i in range(0, len(num_list)):\n            if num_list[i]!= 0:\n                flag = True\n                if i == len(num_list) - 1:\n                    break\n                else:\n                    temp = num_list[i]\n                    num_list[i] = num_list[i + 1]\n                    num_list[i + 1] = temp\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            new_list.append(num_list[i])\n    for i in range(len(new_list)):\n        num_list.remove(0)\n        num_list.append(new_list[i])\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    if n == 0:\n        return num_list\n    for i in range(n):\n        if num_list[i] == 0:\n            for j in range(i+1, n):\n                if num_list[j]!= 0:\n                    num_list[i] = num_list[j]\n                    num_list[j] = 0\n            break\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    n = len(num_list)\n    while index < n:\n        if num_list[index]!= 0:\n            index += 1\n        else:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    xor_sum = 0\n    for i in range(0,n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pairs = []\n    for i in range(n):\n        for j in range(i+1,n):\n            pairs.append(arr[i] ^ arr[j])\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if (n <= 1) : \n        return 0\n    sum = 0\n    for i in range(0, n) : \n        for j in range(i + 1, n) : \n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += arr[i] ^ arr[j]\n    return res\ndef pair_xor_Sum_Optimized(arr,n):\n    '''\n    Optimized Solution\n    '''\n    if(n == 1):\n        return arr[0]\n    arr.sort()\n    res = 0\n    i = 0\n    while i < n:\n        res += arr[i] ^ arr[i+1]\n        i += 2\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum=sum+int(arr[i])^int(arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            result += (arr[i] ^ arr[j])\n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # Python function to find the sum of xor of all pairs of numbers in the given list. \n    sum = 0\n    \n    # Traverse through the given array. \n    for i in range(0, n) : \n        \n        # Number of pairs of numbers with XOR \n        # equals to 0. \n        count = 0\n        \n        # Traverse the array again and find the number \n        # of pairs of numbers with XOR. \n        for j in range(i+1, n) : \n            \n            # If there are no pair of numbers with XOR \n            # equal to 0. \n            if(arr[i] ^ arr[j] == 0) : \n                \n                # Increment the count of pairs with XOR equal \n                # to 0. \n                count += 1\n                \n        # If there are no pair of numbers with XOR \n        # equal to 0. \n        if(count == 0) : \n            \n            # Increment the sum of xor of all pairs of numbers \n            # in the given array. \n            sum += arr[i]\n    \n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pair_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            pair_sum = pair_sum ^ (arr[i] + arr[j])\n    return pair_sum\nprint(pair_xor_Sum([1,2,3,4],4))\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            ans = ans^arr[i]^arr[j]\n    return ans \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum(a^b for a,b in zip(arr[:n],arr[1:]))\n    "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in range(len(iterable)):\n        hq.heappush(h,iterable[i])\n    return sorted(h)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) < 1:\n        return iterable\n    heap = []\n    heapq.heapify(heap)\n    for i in iterable:\n        hq.heappush(heap,i)\n    sorted_list = []\n    while len(heap) > 0:\n        max_val = heapq.heappop(heap)\n        sorted_list.append(max_val)\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return sorted(h)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #using heapq.heapify\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        iterable[i] = hq.heappop(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        h.append(i)\n    return hq.heapify(h)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # cnt = len(iterable)\n    # srt_iterable = iterable.copy()\n    # hq.heapify(srt_iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h,item)\n    sorted_list = []\n    while len(h)!= 0:\n        sorted_list.append(hq.heappop(h))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    out = []\n    for i in iterable:\n        hq.heappush(out, i)\n    return(out)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sorted_heap = []\n    for i in iterable:\n        hq.heappush(sorted_heap, i)\n    \n    for i in range(len(sorted_heap)):\n        iterable[i] = hq.heappop(sorted_heap)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for num in iterable:\n        hq.heappush(h, num)\n    return [hq.heappop(h) for _ in range(len(h))]\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: \n        print(\"No Profit No Loss\")\n        return False\n    else: \n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost*0.2) < sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\ndef noprofit_noloss_p(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = actual_cost + sale_amount\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_cost = actual_cost + sale_amount\n    if total_cost <= 0:\n        print(\"No Profit and no Loss\")\n    else:\n        print(\"Profit and Loss\")\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    speed_of_air = 2.24\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t + 273.15 # Kelvin to celcius\n    A = 35.74 + 0.6215 * t - 35.75 * math.pow(t,0.16) + 0.4275 * math.pow(t,0.16)\n    B = 0.6215 * t - 35.75 * math.pow(t,0.16)\n    C = 0.0065 * t - 11.27\n    return A + (v * (B + (math.sqrt(math.pow(v,2) + (4.8 * math.pow(math.sqrt(t),2))))) / 2 ) + (C * math.pow(t,0.16))\ndef kph_to_mph(kph):\n    return kph / (1.609)\ndef mph_to_kph(mph):\n    return mph * (1.609)\ndef miles_to_km(miles):\n    return miles * 1.609\ndef km_to_miles(km):\n    return km / 1.609\ndef celsius_to_fahrenheit(celsius):\n    return (celsius * 1.8) + 32\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) / 1.8\ndef fahrenheit_to_kelvin(fahrenheit):\n    return (fahrenheit + 459.67) / 1.8\ndef kelvin_to_fahrenheit(kelvin):\n    return (kelvin - 273.15) * 1.8\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) / 1.8\ndef celsius_to_kelvin(celsius):\n    return (celsius + 459.67) / 1.8\ndef kelvin_to_celsius(kelvin):\n    return (kelvin - 273.15)\ndef kelvin_to_fahrenheit(kelvin):\n    return (kelvin + 459.67) / 1.8\ndef kph_to_miles(kph):\n    return kph / 1.609\ndef mph_to_kph(mph):\n    return mph * (1.609)\ndef miles_to_kph(miles):\n    return miles * 1.609\ndef km_to_miles(km):\n    return km / 1.609\ndef distance_in_meters(miles):\n    return miles * 1609\ndef distance_in_kilometers(km):\n    return km / 1000\ndef distance_in_miles(miles):\n    return miles / 1609\ndef distance_in_kilometers(km):\n    return km / 1000\ndef get_curve(r):\n    if r <=0.0:\n        return 0.0\n    if r >= 1.0:\n        return 1.0\n    return (r * r) * 0.25 + 0.62\ndef get_temp(temp, scale):\n    if scale == 'c':\n        return temp + 273.15\n    return temp\ndef get_windchill(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'c')\n    v = kph_to_mph(v)\n    return wind_chill(v, t)\ndef get_windchill_f(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f')\n    v = kph_to_mph(v)\n    return wind_chill(v, t)\ndef get_windchill_k(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'k')\n    v = kph_to_mph(v)\n    return wind_chill(v, t)\ndef get_windchill_m(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t,'m')\n    v = kph_to_mph(v)\n    return wind_chill(v, t)\ndef get_windchill_kph(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'kph')\n    v = mph_to_kph(v)\n    return wind_chill(v, t)\ndef get_windchill_miles(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t,'miles')\n    v = mph_to_miles(v)\n    return wind_chill(v, t)\ndef get_windchill_kph_miles(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'kph_miles')\n    v = mph_to_kph(v)\n    return wind_chill(v, t)\ndef get_windchill_f_miles(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_miles')\n    v = mph_to_miles(v)\n    return wind_chill(v, t)\ndef get_windchill_f_kph_miles(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_kph_miles')\n    v = mph_to_kph(v)\n    return wind_chill(v, t)\ndef get_windchill_f_kph(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_kph')\n    v = mph_to_kph(v)\n    return wind_chill(v, t)\ndef get_windchill_f_miles(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_miles')\n    v = mph_to_miles(v)\n    return wind_chill(v, t)\ndef get_windchill_f_kph(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_kph')\n    v = mph_to_kph(v)\n    return wind_chill(v, t)\ndef get_windchill_f_kph_miles(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_kph_miles')\n    v = mph_to_kph(v)\n    return wind_chill(v, t)\ndef get_windchill_f_miles_kph(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_miles_kph')\n    v = mph_to_miles(v)\n    return wind_chill(v, t)\ndef get_windchill_f_miles_kph_kph(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_miles_kph_kph')\n    v = mph_to_miles(v)\n    return wind_chill(v, t)\ndef get_windchill_f_miles_kph_km(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_miles_kph_km')\n    v = mph_to_miles(v)\n    return wind_chill(v, t)\ndef get_windchill_f_miles_km(v, t):\n    if v <= 0.0:\n        return -1.0\n    t = get_temp(t, 'f_miles_km')\n    v = mph_to_miles(v)\n    return win"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934\n    return 13.12 + (0.6215 * t) - 11.37 * math.pow(wind_speed,0.16) + 0.3965 * math.pow(wind_speed,0.16)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    f = 0.4275\n    wind = v**0.16\n    t = t + 273.1\n    \n    return (a * t - (b * wind) + (c * wind**0.16))/16.0 + (f * t) / (2.0 * f)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    u = v * math.sqrt(0.622 + 0.025 * t)\n    return u\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_b = v ** 2\n    w = 13.12 + (0.6215 * t) - 11.37 * v ** 0.16 + (0.3965 * t) * v ** 0.16\n    wind_chill = w * math.sqrt(v_b)\n    return round(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    V = float(v)\n    T = float(t)\n    if V <= 0:\n        return 0\n    \n    a = 35.74 + 0.6215*T - 35.75*math.pow(V, 0.16) + 0.4275*math.pow(V, 0.16) * T - 0.224*math.pow(V,0.16) * math.pow(T, 0.16)\n    return a\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v\n    t = t\n    w = 35.74 + 0.6215*t + (0.4275*t - 35.75)*(t**0.16)\n    return w\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return (13.12 + 0.6215*t - 11.37*(math.pow(v,0.16)) + 0.3965*(math.pow(v,0.16))*(math.pow(t,0.16)))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    f = math.pow(v,0.16)\n    g = math.pow(v,0.16)\n    h = math.pow(t,0.16)\n    i = a + ((b*f) - (c*g) - d*h) * math.pow(v,0.09)\n    return int(i)\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for s in sample_names:\n        if s.startswith('a') == False:\n            sum_length += len(s)\n    print(sum_length)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0]!= 'j'])\n    \nsample_names = ['Steve', 'Jenny', 'Paul', 'Ricky', 'Elmer', 'Oscar', 'Toby', 'Aaron', 'Brian', 'Julia', 'Kerry', 'Micheal', 'Andy', 'Harper', 'Jesse', 'Kelly', 'Jason', 'Alejandro', 'Hugh', 'Andrea', 'Tina', 'Joel', 'Samuel', 'Gregory', 'Marcus', 'Wesley', 'Ricky', 'Brandon', 'Jacob', 'Heather', 'Marion', 'Lee', 'Mark', 'Dwight', 'Alfred', 'Evan', 'Travis', 'Vincent', 'Ryan', 'Tucker', 'Jefferson', 'Phillip', 'Howard', 'Nathan', 'Tim', 'Michael', 'Adrian', 'Jayden', 'Jordan', 'Dante', 'Aidan', 'Daniel', 'Kyle', 'Frank', 'Herb', 'Lucas', 'Sean', 'Zachary', 'Trenton', 'Cameron', 'Kian', 'Darrick', 'Dmitry', 'Conor', 'Oscar', 'Erick', 'Posey', 'Wilbert', 'Orson', 'Aron', 'Aaron', 'Carl', 'Isaac', 'Rayan', 'Stefan', 'Aidan', 'Zachary', 'Dakota', 'Warren', 'Walter', 'Pablo', 'Vernon', 'Kyle', 'Eli', 'James', 'Ronald', 'Adam', 'Jordan', 'Rafael', 'Kenneth', 'Randy', 'Philip', 'Ansgar', 'Jaxson', 'Raymond', 'Emilio', 'Chad', 'Ray', 'Lewis', 'Ken', 'Bradley', 'Marten', 'Tim', 'Oscar', 'Kieran', 'Joel', 'Cole', 'Trent', 'Alfredo', 'Darius', 'Lloyd', 'Jesse', 'Dennis', 'Toby', 'Jeremiah', 'Abdullah', 'Valentino', 'Herb', 'Alonzo', 'Jaxson', 'Vernon', 'Jacob', 'Abram', 'Donald', 'Gonzales', 'Dion', 'Cameron', 'Zachary', 'Herman', 'Seth', 'Stanley', 'Alfredo', 'Scott', 'Lorenzo', 'Gabriel', 'Jordan', 'Alfredo', 'Trenton', 'Troy', 'Cameron', 'Jaxson', 'Oscar', 'Jacob', 'Wyatt', 'Scott', 'Rory', 'Alex', 'Hank', 'Reggie', 'Vernon', 'Dennis', 'Abram', 'Ramon', 'Victor', 'Ray', 'Carlos', 'Dwight', 'Alfie', 'Ivan', 'Walter', 'Ryan', 'Brad', 'Jaxson', 'Brent', 'Otis', 'Dennis', 'Xavier', 'Jaxson', 'Max', 'Justin', 'Adam', 'Cody', 'Luis', 'Eli', 'Ronald', 'Aaron', 'Gonzalo', 'Arnold', 'Leo', 'Bryan', 'Ramon', 'Owen', 'Tiago', 'Nate', 'Otis', 'Alfie', 'Cameron', 'Adam', 'Ronald', 'Carroll', 'Julian', 'Trent', 'Alfred', 'Cameron', 'Cody', 'Cody', 'Gonzalo', 'Pierce', 'Otis', 'Otis', 'Lucas', 'Toby', 'Tiago', 'Jacob', 'Adam', 'Heath', 'Toby', 'Otis', 'Derek', 'Otis', 'Ramon', 'Kieran', 'Carlo', 'Bryson', 'Dale', 'Jordan', 'Logan', 'Kyle', 'Jesse', 'Caleb', 'Toby', 'Cameron', 'Cody', 'Otis', 'Kieran', 'Heath', 'Dale', 'Otis', 'Logan', 'Kieran', 'Otis', 'Mason', 'Logan', 'Toby', 'Cameron', 'Kieran', 'Alfie', 'Lucas', 'Otis', 'Kieran', 'Dale', 'Alfie', 'Otis', 'Mason', 'Lucas', 'Mason', 'Dexter', 'Mason', 'Otis', 'Kieran', 'Dale', 'Otis', 'Mason', 'Otis', 'Mason', 'Dexter', 'Otis', 'Mason', 'Otis', 'Otis', 'Eli', 'Mason', 'Otis', 'Mason', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Dexter', 'Otis', 'Mason', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Dexter', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis', 'Otis'"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sample_nam(sample_names):\n        total = 0\n        for name in sample_names:\n            if name.lower()[0] not in name:\n                total += len(name)\n        return total\n    return sample_nam\n    \n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # code goes here\n    sample_names = []\n    for name in sample_names:\n        if name[0].lower()!= name[0]:\n            sample_names.append(name)\n    return len(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(x) for x in sample_names if x[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    \n    \n    \n    names = sample_names\n    \n    sample_names = sample_names\n    \n    list1 = []\n    \n    \n    for i in range(0,len(sample_names)):\n        \n        if re.match('[a-z]',sample_names[i]):\n            \n            \n            list1.append(sample_names[i])\n            \n        \n    \n    \n    sum = len(list1)\n    \n    \n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    n=0\n    for i in sample_names:\n        if i[0].isupper():\n            n+=len(i)\n    print(n)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # Initialize a new list\n    new_list = []\n    \n    # For each name in the list\n    for name in sample_names:\n        # Check if it starts with a lowercase letter\n        if not name.startswith('l'):\n            # Add it to the new list\n            new_list.append(name)\n    \n    # Return the sum of the length of the names in the new list\n    return(len(new_list))\n    \ndef first_diff(sample_names):\n    '''\n    Write a function to check whether there is a first name that contains a different letter than its next name.\n    '''\n    \n    # Initialize a new list\n    new_list = []\n    \n    # For each name in the list\n    for name in sample_names:\n        # Add it to the new list\n        new_list.append(name)\n    \n    # For each name in the new list\n    for i in range(len(new_list)-1):\n        # If the first letter of the next name is different than the first letter of the previous name\n        if new_list[i+1][0]!= new_list[i][0]:\n            # Return True\n            return True\n    \n    # Return False\n    return False\n    \ndef count_names(sample_names):\n    '''\n    Write a function to count the number of names in a given list of names.\n    '''\n    \n    # Initialize a new variable\n    name_count = 0\n    \n    # For each name in the list\n    for name in sample_names:\n        # Add one to the name_count\n        name_count += 1\n    \n    # Return name_count\n    return name_count\n    \ndef count_names_with_upper_letter(sample_names):\n    '''\n    Write a function to count the number of names in a given list of names that start with an upper case letter.\n    '''\n    \n    # Initialize a new variable\n    name_count = 0\n    \n    # For each name in the list\n    for name in sample_names:\n        # If the name starts with an upper case letter\n        if name[0].isupper():\n            # Add one to the name_count\n            name_count += 1\n    \n    # Return name_count\n    return name_count\n    \ndef count_names_in_order(sample_names):\n    '''\n    Write a function to count the number of names in a given list of names in the order they were given.\n    '''\n    \n    # Initialize a new list\n    new_list = []\n    \n    # For each name in the list\n    for name in sample_names:\n        # If the name has already been added to the new list\n        if name not in new_list:\n            # Add it to the new list\n            new_list.append(name)\n    \n    # Return the number of names in the new list\n    return len(new_list)\n    \ndef count_names_in_order_with_duplicates(sample_names):\n    '''\n    Write a function to count the number of names in a given list of names in the order they were given with duplicates.\n    '''\n    \n    # Initialize a new list\n    new_list = []\n    \n    # For each name in the list\n    for name in sample_names:\n        # If the name has already been added to the new list\n        if name not in new_list:\n            # Add it to the new list\n            new_list.append(name)\n    \n    # Return the number of names in the new list\n    return len(new_list)\n    \ndef average_length_of_names(sample_names):\n    '''\n    Write a function to calculate the average length of the names in a given list of names.\n    '''\n    \n    # Initialize a new variable\n    average_length = 0\n    \n    # For each name in the list\n    for name in sample_names:\n        # Add one to the average length\n        average_length += len(name)\n    \n    # Return the average length of the names\n    return average_length/len(sample_names)\n    \ndef average_name_length_with_duplicates(sample_names):\n    '''\n    Write a function to calculate the average length of the names in a given list of names with duplicates.\n    '''\n    \n    # Initialize a new variable\n    average_length = 0\n    \n    # For each name in the list\n    for name in sample_names:\n        # Add one to the average length\n        average_length += len(name)\n    \n    # Return the average length of the names\n    return average_length/len(sample_names)\n    \ndef duplicate_name(sample_names):\n    '''\n    Write a function to check whether any name appears more than once in a given list of names.\n    '''\n    \n    # Initialize a new variable\n    duplicate_names = 0\n    \n    # For each name in the list\n    for name in sample_names:\n        # Check if the name appears more than once\n        if sample_names.count(name) > 1:\n            # Return True\n            return True\n    \n    # Return False\n    return False\n    \ndef extract_first_name(sample_names):\n    '''\n    Write a function to extract the first name from a given list of names.\n    '''\n    \n    # Initialize a new variable\n    name = ''\n    \n    # For each name in the list\n    for name in sample_names:\n        # Extract the first name\n        name = name.split()[0]\n        # Add the name to the name variable\n        name +=''\n    \n    # Return the name variable\n    return name\n    \ndef extract_last_name(sample_names):\n    '''\n    Write a function to extract the last name from a given list of names.\n    '''\n    \n    # Initialize a new variable\n    name = ''\n    \n    # For each name in the list\n    for name in sample_names:\n        # Extract the last name\n        name = name.split()[-1]\n        # Add the name to the name variable\n        name +=''\n    \n    # Return the name variable\n    return name\n    \ndef extract_first_and_last_name(sample_names):\n    '''\n    Write a function to extract the first and last name from a given list of names.\n    '''\n    \n    # Initialize a new variable\n    name = ''\n    \n    # For each name in the list\n    for name in sample_names:\n        # Extract the first and last name\n        name = name.split()\n        # Add the name to the name variable\n        name = name[0] +'' + name[-1]\n        # Add the name to the name variable\n        name +=''\n    \n    # Return the name variable\n    return name\n    \ndef extract_first_name_and_last_name(sample_names):\n    '''\n    Write a function to extract the first name and the last name from a given list of names.\n    '''\n    \n    # Initialize a new variable\n    name = ''\n    \n    # For each name in the list\n    for name in sample_names:\n        # Extract the first name and the last name\n        name = name.split()\n        # Add the name to the name variable\n        name = name[0] +'' + name[-1]\n        # Add the name to the name variable\n        name +=''\n    \n    # Return the name variable\n    return name\n    \ndef only_given_names(sample_names):\n    '''\n    Write a function to extract only the given names from a given list of names.\n    '''\n    \n    # Initialize a new variable\n    names = ''\n    \n    # For each name in the list\n    for name in sample_names:\n        # Check if it starts with a lower case letter\n        if not name.startswith('l'):\n            # Add it to the names variable\n            names += name +''\n    \n    # Return the names variable\n    return names\n    \ndef extract_all_names(sample_names):\n    '''\n    Write a function to extract all the given names from a given list of names.\n    '''\n    \n    # Initialize a new variable\n    names = ''\n    \n    # For each name in the list\n    for name in sample_names:"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names[1:]\n    sum_nam = 0\n    for i in sample_names:\n        if i.isalpha():\n            break\n        else:\n            sum_nam += len(i)\n    return sum_nam\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [name for name in sample_names if name[0]!= 'l']\n    return sum([len(name) for name in sample_names])\n    # my solution\n    # def sample_nam(sample_names):\n    #     return sum(len(name) for name in sample_names if name[0]!= 'l')\n    # return sample_nam(sample_names)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = 'Hi my name is RaJat and iam a student in computer science.'\n    items = re.split(r'\\(|\\)|-|\\s\\s|\\s|\\W|\\d+|\\.|,', s)\n    print(items)\n    s = ''\n    for item in items:\n        if item.strip()!= '':\n            s += item\n    print(s)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # O(n)\n    # class Solution:\n    #     def removeParenthesis(self, str):\n    #         for i in range(len(str)):\n    #             if str[i] == '(':\n    #                 str = str.replace('(', '', 1)\n    #             if str[i] == ')':\n    #                 str = str.replace(')', '', 1)\n    #         return str\n    # \n    # if __name__ == \"__main__\":\n    #     s = Solution()\n    #     print(s.removeParenthesis(\"()()()()()(())(())\"))\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = \"()\"\n    for i in range(len(items)):\n        if items[i] in s:\n            return items[:i] + items[i + 1 :]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #remove parenthesis\n    if items[0] == \")\":\n        items = items[1:]\n    elif items[len(items)-1] == \"(\":\n        items = items[0:len(items)-1]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.strip(\"()\").strip(\"[]\").strip(\"{\")\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if(type(items)==str):\n        items=items.split(',')\n    items=list(items)\n    for i in range(0,len(items)):\n        if(len(items[i])==0):\n            continue\n        if(len(items[i])>0):\n            items[i]=items[i].strip()\n        if(items[i][0]=='('):\n            items[i]=items[i][1:]\n        if(items[i][len(items[i])-1]=='('):\n            items[i]=items[i][:len(items[i])-1]\n    return items\ndef remove_parenthesis_2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if(type(items)==str):\n        items=items.split(',')\n    items=list(items)\n    for i in range(0,len(items)):\n        if(len(items[i])==0):\n            continue\n        if(len(items[i])>0):\n            items[i]=items[i].strip()\n        if(items[i][len(items[i])-1]=='('):\n            items[i]=items[i][:len(items[i])-1]\n        if(items[i][0]=='('):\n            items[i]=items[i][1:]\n        if(items[i][len(items[i])-1]==')'):\n            items[i]=items[i][:len(items[i])-1]\n    return items\ndef remove_parenthesis_3(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if(type(items)==str):\n        items=items.split(',')\n    items=list(items)\n    for i in range(0,len(items)):\n        if(len(items[i])==0):\n            continue\n        if(len(items[i])>0):\n            items[i]=items[i].strip()\n        if(items[i][len(items[i])-1]=='('):\n            items[i]=items[i][:len(items[i])-1]\n        if(items[i][0]=='('):\n            items[i]=items[i][1:]\n        if(items[i][len(items[i])-1]==')'):\n            items[i]=items[i][:len(items[i])-1]\n    return items\ndef remove_parenthesis_4(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if(type(items)==str):\n        items=items.split(',')\n    items=list(items)\n    for i in range(0,len(items)):\n        if(len(items[i])==0):\n            continue\n        if(len(items[i])>0):\n            items[i]=items[i].strip()\n        if(items[i][len(items[i])-1]=='('):\n            items[i]=items[i][:len(items[i])-1]\n        if(items[i][0]=='('):\n            items[i]=items[i][1:]\n        if(items[i][len(items[i])-1]==')'):\n            items[i]=items[i][:len(items[i])-1]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items == '':\n        return ''\n    if items[0] == '(':\n        items = items[1:]\n    if items[-1] == ')':\n        items = items[:-1]\n    items = items.replace('(',' ')\n    items = items.replace(')',' ')\n    items = items.split()\n    return items\n    \ndef split_word(items):\n    '''\n    Write a function to split a sentence into words.\n    '''\n    if items == '':\n        return []\n    #items = items.split()\n    #items = items.split(',')\n    items = items.split(';')\n    #items = items.replace(';',' ')\n    #items = items.split('.')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return_list = []\n    for item in items:\n        if item == ')':\n            break\n        else:\n            return_list.append(item)\n    return ''.join(return_list)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for item in items:\n        if item == '(' or item == ')':\n            continue\n        else:\n            new_items.append(item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\(.*?\\)', '', items)\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #start a non-diagonal number to be the 1st diagonal number\n    n=n+1\n    for i in range(1,n):\n        print(n,end=\"\")\n        n=n-1\n    return n\nprint(is_nonagonal(3))\nprint(is_nonagonal(4))\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) + 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n-1\n    x = 0\n    y = 1\n    z = 1\n    while(x!= n):\n        x = x + 1\n        z = z + 1\n        y = y + 2*z - 1\n    return y\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n    \ndef get_nth_diagonal_value(n):\n    '''\n    Write a function to find the nth diagonal value.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    matrix = [[0, 1, 3],\n            [1, 1, 1],\n            [3, 1, 1]]\n    return matrix[n-1][n-1]\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n**2 + n + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (((2 * n) + 1) * (n - 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(input('Enter the row: '))\n    if n%2 == 0:\n        return n*(n+1)\n    else:\n        return n*(n+1)+1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    sum = 1\n    i = 1\n    while(i <= n):\n        sum = sum * (n - i + 1)\n        i = i + 1\n    return sum\n    \n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\bz'\n    if re.search(pattern, text)!= None:\n        if re.search(r'\\bz\\b', text)!= None:\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.findall('z+', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    def middle_check(text):\n        middle_str = text[1:-1]\n        # print(middle_str)\n        if re.match('z', middle_str):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    lst = re.finditer(r'z', text)\n    for i in lst:\n        middle = text[i.start():i.end()]\n        if middle == 'z':\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz = re.findall(r'z(?=\\W|$)', text)\n    return wordz\nprint(text_match_wordz_middle('zzzzzzzzzzzzzz'))\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    text = text.lower()\n    #print(text)\n    result = re.findall(r'z', text)\n    if result:\n        result = 'z' in text\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #The word_match function, I have given you\n    def word_match(txt):\n        # This function takes a string and returns True if the first and last character are z\n        if txt[0] == 'z' and txt[-1] == 'z':\n            return True\n        else:\n            return False\n    # Print out the result of the word_match function on the text\n    print(word_match(text))\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    def check_wordz(word):\n        check_word = \"\"\n        for w in word:\n            if w.isalpha():\n                check_word += w.lower()\n        if check_word[0].isalpha() and check_word[-1].isalpha():\n            return True\n        else:\n            return False\n    return check_wordz(text)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) > 1:\n        if not re.search(r'^z',text) and not re.search(r'^$',text):\n            if re.search(r'z$',text):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search(r'^(\\w+z)+$', text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k>=len(input):\n        return input\n    for i in range(len(input)-k, len(input)):\n        if i==len(input)-k:\n            return input\n        temp = input[i]\n        input[i] = input[i+k]\n        input[i+k] = temp\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    while (i < k): \n        input[i], input[k] = input[k], input[i] \n        i += 1\n        k -= 1\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    i = 0\n    j = n - 1\n    while i < j:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n    return input\n    \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    left = 0\n    right = len(input)-1\n    while left <= right:\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n    return input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # code here \n    n = len(input)\n    if n == 0: \n        return []\n    elif n == 1: \n        return input\n    else: \n        i = n - 1 \n        rev = [] \n        while i >= k: \n            rev.append(input[i]) \n            i -= 1\n        return rev + input[0:k] \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    arr = list(input)\n    arr.reverse()\n    if k < 0:\n        return arr\n    elif k > len(arr):\n        return arr\n    else:\n        for i in range(k):\n            arr.pop()\n        return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k <= len(input):\n        return input[:k][::-1]\n    else:\n        return input[len(input)-k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    ans = []\n    for i in range(len(input)):\n        if i < k:\n            ans.append(input[i])\n    \n    for i in range(len(input)-k):\n        ans.append(input[i])\n    return ans\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input.copy()\n    #print(arr)\n    if k>len(arr):\n        return arr\n    #arr = arr[::-1]\n    start = 0\n    end = k\n    reverse_arr = []\n    while(start<=end):\n        #print(start, end)\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start+=1\n        end-=1\n    reverse_arr = arr[:k+1]\n    return reverse_arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    left = 0\n    right = len(input) - 1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1].update(test_dict))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict, )\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_dict)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    \n    def max_average(path, curr_cost, curr_average):\n        if not path:\n            return curr_cost / (len(path) + 1)\n        \n        next_average = curr_average + (curr_cost / (len(path) + 1))\n        next_cost = curr_cost + cost[path[0]][path[-1]]\n        max_average = max(next_average, max_average(path[1:], next_cost, next_average))\n        return max_average\n    \n    return max_average([0, 1, 2], cost[0][0], 0)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    \n    # Keep track of visited cells\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    \n    # Keep track of the best path\n    best = 0\n    \n    # Best path seen so far\n    best_path = []\n    \n    # Start from the bottom right cell\n    i = n-1\n    j = n-1\n    \n    # Keep traversing up and left until we reach the top left cell\n    while i > 0 and j > 0:\n        \n        # Check if we have already visited this cell\n        if visited[i][j]:\n            break\n        \n        # Check if there is a path from (i,j) to (i-1,j) or (i,j-1)\n        if (i > 0 and not visited[i-1][j]) or (j > 0 and not visited[i][j-1]):\n            # Keep traversing up and left\n            i -= 1\n            j -= 1\n        else:\n            # Keep traversing right and down\n            i -= 1\n            j -= 1\n            \n        # Check if this path is better than the best path\n        # Found a better path, update best and update best_path\n        if (i == j):\n            current_path = cost[i][j] + best_path\n            if current_path > best:\n                best = current_path\n                best_path = cost[i][j]\n            continue\n            \n        # Keep traversing up and left if there is no path from (i,j) to (i-1,j) or (i,j-1)\n        current_path = cost[i][j] + best_path\n        if i > 0 and not visited[i-1][j]:\n            visited[i-1][j] = True\n            best_path.append(cost[i-1][j])\n            current_path += best_path[-1]\n        \n        if j > 0 and not visited[i][j-1]:\n            visited[i][j-1] = True\n            best_path.append(cost[i][j-1])\n            current_path += best_path[-1]\n        \n        # Update best and update best_path\n        if best < current_path:\n            best = current_path\n            best_path = cost[i][j]\n    \n    return best\n    \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #initialize the variable\n    sum_avg=0\n    #initialize the visited cells\n    visited=[[False]*len(cost[0]) for i in range(len(cost))]\n    #initialize the path \n    path=[]\n    #find the cell with maximum average\n    visited[0][0]=True\n    #add first cell to the path\n    path.append([0,0])\n    #first row\n    for i in range(1,len(cost)):\n        #check the left cell\n        if(cost[i][0]<cost[i-1][0]):\n            visited[i][0]=True\n            path.append([i,0])\n        #check the right cell\n        elif(cost[i][0]>cost[i-1][0]):\n            visited[i][0]=True\n            path.append([i-1,0])\n    #first column\n    for j in range(1,len(cost[0])):\n        #check the up cell\n        if(cost[0][j]<cost[0][j-1]):\n            visited[0][j]=True\n            path.append([0,j])\n        #check the down cell\n        elif(cost[0][j]>cost[0][j-1]):\n            visited[0][j]=True\n            path.append([0,j-1])\n    #now to find the maximum average\n    for k in range(len(cost)):\n        for i in range(len(cost[k])):\n            for j in range(len(cost[k])):\n                if(visited[k][i] and visited[k-1][j] and visited[k-1][j]):\n                    sum_avg+=cost[k][j]\n                    #break the loop if path found\n                    if(k==len(cost)-1 and i==len(cost[k])-1):\n                        break\n                    #check the down cell\n                    if(cost[k][i]<cost[k-1][i]):\n                        visited[k][i]=True\n                        path.append([k,i])\n                    #check the left cell\n                    elif(cost[k][i]>cost[k-1][i]):\n                        visited[k][i]=True\n                        path.append([k-1,i])\n                    #check the up cell\n                    elif(cost[k][i]<cost[k-1][i]):\n                        visited[k][i]=True\n                        path.append([k-1,i])\n    return sum_avg/len(path)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[-1 for i in range(n)] for j in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1,n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for j in range(1,n):\n        dp[0][j] = cost[0][j] + dp[0][j-1]\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j],dp[i][j-1])\n    print(dp)\n    return dp[n-1][n-1]/n\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False]*N for _ in range(N)]\n    queue = [(0,0,0)]\n    while queue:\n        curr_cost, i, j = heapq.heappop(queue)\n        if i == N-1 and j == N-1:\n            return curr_cost\n        if not visited[i][j]:\n            visited[i][j] = True\n            for new_i, new_j in [(i,j-1), (i,j+1), (i-1,j), (i+1,j)]:\n                if 0 <= new_i < N and 0 <= new_j < N and not visited[new_i][new_j]:\n                    new_cost = curr_cost + cost[new_i][new_j]\n                    heapq.heappush(queue, (new_cost, new_i, new_j))\n    return -1\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0 and j == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return (sum(dp[N-1]))/N**2\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    visited = [[False for i in range(n)] for j in range(n)]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    min_cell = 0\n    max_cell = 0\n    num_cells = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            num_cells += 1\n            if cost[i][j] < min_cell:\n                min_cell = cost[i][j]\n            if cost[i][j] > max_cell:\n                max_cell = cost[i][j]\n    if num_cells == 0:\n        return 0\n    sum_min_cell = 0\n    sum_max_cell = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if cost[i][j] == min_cell:\n                sum_min_cell += 1\n            if cost[i][j] == max_cell:\n                sum_max_cell += 1\n    avg_min_cell = sum_min_cell/num_cells\n    avg_max_cell = sum_max_cell/num_cells\n    return (avg_min_cell+avg_max_cell)/2\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = float('-inf')\n    m = 0\n    for i in range(n):\n        if max_avg < (sum(cost[i]) / n):\n            max_avg = sum(cost[i]) / n\n            m = 1\n        elif max_avg == (sum(cost[i]) / n) and i + 1 < n:\n            m = i + 1\n    \n    #print(max_avg, m)\n    \n    i = m\n    \n    while i < n:\n        if i + 1 < n:\n            j = i + 1\n            while j < n:\n                if cost[i][j] == cost[i][m] + cost[m][j]:\n                    i = j + 1\n                j += 1\n        i += 1\n    \n    return max_avg\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height_lower = float(input(\"enter the height: \"))\n    weight_lower = float(input(\"enter the weight: \"))\n    height_higher = float(input(\"enter the height: \"))\n    weight_higher = float(input(\"enter the weight: \"))\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    x = list(filter(lambda x: x[0] > h and x[1] > w, students.items()))\n    return x\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res=[]\n    for i in students.items():\n        if (i[1][0]>=h and i[1][1]>=w):\n            res.append(i[0])\n    return res\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for name, data in students.items():\n        if data[0]>=h and data[1]>=w:\n            filtered_data[name] = data\n    return filtered_data\n    "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # new_dict = {}\n    # for k,v in students.items():\n    #     if v[0]>h and v[1]>w:\n    #         new_dict[k]=v\n    # print(new_dict)\n    return {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    l = list(students.values())\n    ans = []\n    for i in l:\n        if i[0]>=h and i[1]>=w:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # alternative solution :\n    # students = {'Matt Damon': (190, 50), 'Ben Affleck': (190, 150), 'Mark Ruffalo': (180, 75)}\n    # filters = {'Matt Damon': (190, 50), 'Mark Ruffalo': (180, 75)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out={}\n    # for i in students:\n    #     if(students[i][1] > h and students[i][0] > w):\n    #         out[i]=students[i]\n    for i in students:\n        if(students[i][1] > h and students[i][0] > w):\n            out[i]=students[i]\n    return out\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_h = min(students, key=lambda x: x[0])\n    min_w = min(students, key=lambda x: x[1])\n    output = filter(lambda x: x[0] > min_h[0] and x[1] > min_w[1], students)\n    return list(output)\n    \n    "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_d = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            new_d[key] = value\n    return new_d\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            result += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError\n    res = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    a = 0\n    b = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            a += 1\n    return a\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for idx in range(len(nums1)):\n        if nums1[idx] == nums2[idx]:\n            result += 1\n    return result\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Solve this with a map/filter/reduce/or using lists of sets\n    # Use a list of sets to store the frequency of each value in nums1 and nums2\n    # Frequency of value in nums1 is count of the number of times the value appears in nums1, count of the number of times\n    # the value appears in nums2\n    nums1 = list(map(set, nums1))\n    nums2 = list(map(set, nums2))\n    return sum(map(len, filter(lambda x: x[0] == x[1], zip(nums1, nums2))))\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2), 'different length of lists'\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for num in range(len(nums1)):\n        if nums1[num] == nums2[num]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    def is_equal(num1, num2):\n        '''\n        Return true if num1 and num2 are equal\n        '''\n        if num1 == num2:\n            return True\n        else:\n            return False\n    def count_difference(num1, num2):\n        '''\n        Return the number of indices where num1!= num2\n        '''\n        count = 0\n        for i in range(len(nums1)):\n            if not is_equal(num1[i], num2[i]):\n                count += 1\n        return count\n    count1 = count_difference(nums1, nums2)\n    count2 = count_difference(nums2, nums1)\n    return count1 + count2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    sum = 0\n    for num in base:\n        sum = sum + int(num) ** power\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    res = 0\n    while(power):\n        res += int(base) % 10\n        base //= 10\n        power -= 1\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = abs(power)\n    sum_digits = 0\n    while(power > 0):\n        digit = int(base)%10\n        sum_digits += digit\n        base = int(base)/10\n        power = power - 1\n    return sum_digits\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for index in range(1, power + 1):\n        sum += int(base)**index\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(1, power + 1):\n        sum += int(base ** i)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = pow(base, power)\n    num_str = str(num)\n    return sum(map(int, num_str))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return 0\n    return base * (10**power)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    print(f'Sum of the digits of {base} raised to the power of {power} is {sum_digits(base, power)}')\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize variables\n    sum_digit = 0\n    # check if the power is not zero and the base is greater than zero\n    if base > 0 and power > 0:\n        # keep calculating the power digit by digit until the power is zero\n        while power > 0:\n            # sum of the digits\n            sum_digit += base % 10\n            # divide base by 10\n            base = base // 10\n            # subtract 1 from power\n            power = power - 1\n    # return sum_digit\n    return sum_digit\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if re.search(r'\"[^\"]*\"',text1):\n        return re.findall(r'\"[^\"]*\"',text1)\n    else:\n        return None\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        start_quotation = text1.index('\"') + 1\n        end_quotation = text1.index('\"', start_quotation)\n        result = text1[start_quotation:end_quotation]\n    except:\n        result = \"\"\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    my_string = text1\n    my_string = my_string.replace(\".\", \"\")\n    my_string = my_string.replace(\"?\", \"\")\n    my_string = my_string.replace(\"!\", \"\")\n    my_string = my_string.replace(\",\", \"\")\n    my_string = my_string.replace(\";\", \"\")\n    my_string = my_string.replace(\"-\", \"\")\n    my_string = my_string.replace(\"\u2014\", \"\")\n    my_string = my_string.replace(\"|\", \"\")\n    my_string = my_string.replace(\"\\\\\", \"\")\n    my_string = my_string.replace(\"'\", \"\")\n    my_string = my_string.replace(\"\u2019\", \"\")\n    my_string = my_string.replace(\"(\", \"\")\n    my_string = my_string.replace(\")\", \"\")\n    my_string = my_string.replace(\"(\", \"\")\n    my_string = my_string.replace(\")\", \"\")\n    my_string = my_string.replace(\"[\", \"\")\n    my_string = my_string.replace(\"]\", \"\")\n    my_string = my_string.replace(\"{\", \"\")\n    my_string = my_string.replace(\"}\", \"\")\n    my_string = my_string.replace(\"\\n\", \"\")\n    my_string = my_string.replace(\"\\t\", \"\")\n    my_string = my_string.replace(\"\\\"\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\\\'\", \"\")\n    my_string = my_string.replace(\"\\\\n\", \"\")\n    my_string = my_string.replace(\"\\\\t\", \"\")\n    my_string = my_string.replace(\"\\\\\\\"\", \"\")\n    my_string = my_string.replace(\"\\\\x0c\", \"\")\n    my_string = my_string.replace(\"\\'\", \"\")\n    my_string = my_string.replace(\"\\\"\", \"\")\n    my_string = my_string.replace(\"\\n\", \"\")\n    my_string = my_string.replace(\"\\t\", \"\")\n    my_string = my_string.replace(\"\\\\\", \"\")\n    my_string = my_string.replace(\"'\", \"\")\n    my_string = my_string.replace(\"\\r\", \"\")\n    my_string = my_string.replace(\"\\t\", \"\")\n    my_string = my_string.replace(\"\\r\", \"\")\n    my_string = my_string.replace(\"\\n\", \"\")\n    my_string = my_string.replace(\"\\r\", \"\")\n    my_string = my_string.replace(\"\\t\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\x0c\", \"\")\n    my_string = my_string.replace(\"\\"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"\\\".*\\\"\"\n    result = re.search(pattern, text1)\n    if result:\n        return result.group(0)\n    return None\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = re.findall('\"(.*?)\"', text1)\n    return(text2)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot = re.findall(r'\"[^\"]+\"|\\w+|\\S+',text1)\n    return quot\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    t = text1\n    d = {'quotation':''}\n    for k, v in d.items():\n        t = t.replace(k, v)\n    return t\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile('\\\"')\n    return pattern.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\" (.*?)\"', text1)\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\"(.*?)\"', text1)\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\"(.*?)\"', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall('\"(.*?)\"', text1)\n    #return result\n    return result\n    \ndef extract_user(text1):\n    '''\n    Write a function to extract the username from the email id of the person in the text.\n    '''\n    result = re.findall('\\w+@\\w+', text1)\n    #return result\n    return result\n    \ndef extract_password(text1):\n    '''\n    Write a function to extract the password from the email id of the person in the text.\n    '''\n    result = re.findall('\\w+@\\w+', text1)\n    #return result\n    return result\n    \ndef extract_value(text1):\n    '''\n    Write a function to extract the values from the text and the return in list\n    '''\n    value = re.findall('[a-zA-Z\\d\\-\\+\\*\\&\\/\\#\\?\\:;\\(\\)\\{\\}\\[\\]\\[\\]\\(\\)\\,\\,\\,\\.]+', text1)\n    #return result\n    return value\n    \ndef extract_email(text1):\n    '''\n    Write a function to extract the email ids from the text and the return in list\n    '''\n    result = re.findall('\\w+@\\w+', text1)\n    #return result\n    return result\n    \ndef extract_phone_number(text1):\n    '''\n    Write a function to extract the phone numbers from the text and the return in list\n    '''\n    result = re.findall('\\d{2}[\\s-]?\\d{2}[\\s-]?\\d{3}[\\s-]?\\d{3}[\\s-]?\\d{2}[\\s-]?\\d{2}', text1)\n    #return result\n    return result\n    \ndef extract_number(text1):\n    '''\n    Write a function to extract the phone numbers from the text and the return in list\n    '''\n    result = re.findall('\\d{2}[\\s-]?\\d{2}[\\s-]?\\d{3}[\\s-]?\\d{3}[\\s-]?\\d{2}[\\s-]?\\d{2}', text1)\n    #return result\n    return result\n    \ndef extract_date(text1):\n    '''\n    Write a function to extract the dates from the text and the return in list\n    '''\n    result = re.findall('[\\d]+', text1)\n    #return result\n    return result\n    \ndef extract_phone_number_list(text1):\n    '''\n    Write a function to extract the phone numbers from the text and the return in list\n    '''\n    result = re.findall('\\d{2}[\\s-]?\\d{2}[\\s-]?\\d{3}[\\s-]?\\d{3}[\\s-]?\\d{2}[\\s-]?\\d{2}', text1)\n    #return result\n    return result\n    \ndef extract_email_list(text1):\n    '''\n    Write a function to extract the email ids from the text and the return in list\n    '''\n    result = re.findall('[\\w\\s]+@[\\w\\s]+', text1)\n    #return result\n    return result\n    \ndef extract_other_name(text1):\n    '''\n    Write a function to extract the other names from the text and the return in list\n    '''\n    result = re.findall('[\\w\\s]+\\.[\\w\\s]+', text1)\n    #return result\n    return result\n    \ndef extract_name(text1):\n    '''\n    Write a function to extract the names from the text and the return in list\n    '''\n    result = re.findall('[\\w\\s]+', text1)\n    #return result\n    return result\n    \ndef extract_other_names(text1):\n    '''\n    Write a function to extract the other names from the text and the return in list\n    '''\n    result = re.findall('[\\w\\s]+\\.[\\w\\s]+', text1)\n    #return result\n    return result\n    \ndef extract_all(text1):\n    '''\n    Write a function to extract the all the elements from the text and the return in list\n    '''\n    result = re.findall('[\\w\\s]+', text1)\n    #return result\n    return result\n    \ndef extract_text(text1):\n    '''\n    Write a function to extract the text from the text and the return in list\n    '''\n    result = re.findall('\\w+', text1)\n    #return result\n    return result\n    \ndef extract_text_list(text1):\n    '''\n    Write a function to extract the text from the text and the return in list\n    '''\n    result = re.findall('\\w+', text1)\n    #return result\n    return result\n    \ndef extract_business_name(text1):\n    '''\n    Write a function to extract the business names from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_company_name(text1):\n    '''\n    Write a function to extract the company names from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_company_names(text1):\n    '''\n    Write a function to extract the company names from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_companies(text1):\n    '''\n    Write a function to extract the companies from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_company_names_list(text1):\n    '''\n    Write a function to extract the company names from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_companies_list(text1):\n    '''\n    Write a function to extract the companies from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_domains(text1):\n    '''\n    Write a function to extract the companies from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_domains_list(text1):\n    '''\n    Write a function to extract the companies from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_email_address(text1):\n    '''\n    Write a function to extract the email addresses from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+[\\.\\,]+\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_email_address_list(text1):\n    '''\n    Write a function to extract the email addresses from the text and the return in list\n    '''\n    result = re.findall('\\w+[\\.\\,]+\\w+[\\.\\,]+\\w+[\\.\\,]+\\w+', text1)\n    #return result\n    return result\n    \ndef extract_domain_name(text1):\n    '''\n    Write a functio"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    total = 1\n    for i in range(len(test_tup)):\n        total = total * test_tup[i]\n    return (total,)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t = tuple(map(lambda x: x * (x + 1), test_tup))\n    return t\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    mult = tuple()\n    for i in range(len(test_tup)):\n        mult += (test_tup[i]*(i+1),)\n    return mult\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x * (x + 1) for x in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_list = []\n    for i in range(len(test_tup) - 1):\n        new_list.append(test_tup[i] * test_tup[i + 1])\n    new_list.append(test_tup[-1])\n    return tuple(new_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i + 1])\n    result.append(test_tup[-1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] * (i + 1))\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_list = []\n    for i in range(0, len(test_tup)):\n        test_list.append(test_tup[i] * (i+1))\n    return tuple(test_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_n = test_tup[::-1]\n    result = []\n    for i, t in enumerate(t_n):\n        result.append(t * t_n[i + 1])\n    return tuple(result)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == len(lst2):\n        final_list = []\n        for index in range(len(lst1)):\n            final_list.append(lst1[index]+lst2[index])\n        return final_list\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef prod_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    if len(lst1) == len(lst2):\n        final_list = []\n        for index in range(len(lst1)):\n            final_list.append(lst1[index]*lst2[index])\n        return final_list\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef find_sum(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns the element at index i of the first list that appears in the second list. If there is no such element, return -1.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] in lst2:\n                return index\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef find_product(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns the element at index i of the first list that appears in the second list. If there is no such element, return -1.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] in lst2:\n                return index\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef find_difference(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns the element at index i of the first list that appears in the second list. If there is no such element, return -1.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] not in lst2:\n                return lst1[index]\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef find_subset_sum(lst1,lst2,sum):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and a sum, and returns True if there is any subset of the first list such that it's sum is equal to sum. Otherwise, return False.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] not in lst2:\n                break\n            elif lst1[index] in lst2:\n                if sum - lst1[index] == 0:\n                    return True\n                else:\n                    continue\n        return False\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef find_subset_diff(lst1,lst2,sum):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and a sum, and returns True if there is any subset of the first list such that it's sum is equal to sum. Otherwise, return False.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] not in lst2:\n                break\n            elif lst1[index] in lst2:\n                if sum - lst1[index] == 0:\n                    return True\n                else:\n                    continue\n        return False\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef find_set_diff(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and a sum, and returns True if there is any subset of the first list such that it's sum is equal to sum. Otherwise, return False.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] not in lst2:\n                break\n            elif lst1[index] in lst2:\n                if lst1[index] == lst2[index]:\n                    continue\n                else:\n                    return True\n        return False\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef find_diff(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and a sum, and returns True if there is any subset of the first list such that it's sum is equal to sum. Otherwise, return False.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] not in lst2:\n                break\n            elif lst1[index] in lst2:\n                if lst1[index] == lst2[index]:\n                    continue\n                else:\n                    return True\n        return False\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef find_set_sum(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and a sum, and returns True if there is any subset of the first list such that it's sum is equal to sum. Otherwise, return False.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] not in lst2:\n                break\n            elif lst1[index] in lst2:\n                if lst1[index] == lst2[index]:\n                    continue\n                else:\n                    return True\n        return False\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef find_sum_diff(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and a sum, and returns True if there is any subset of the first list such that it's sum is equal to sum. Otherwise, return False.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] not in lst2:\n                break\n            elif lst1[index] in lst2:\n                if lst1[index] == lst2[index]:\n                    continue\n                else:\n                    return True\n        return False\n    else:\n        raise Exception('Lists length are not equal')\n        \ndef is_subset(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and a sum, and returns True if there is any subset of the first list such that it's sum is equal to sum. Otherwise, return False.\n    '''\n    if len(lst1) == len(lst2):\n        for index in range(len(lst1)):\n            if lst1[index] not in lst2:\n                break\n            elif lst1[index] in lst2:\n                if lst1[index] == lst2[index]:\n                    continue\n                else:\n                    return True\n        return False\n    else"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] + lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1)==len(lst2)\n    lst3=[]\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(zip(lst1,lst2))\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #    sum_list([1,2,3], [4,5,6]) = [1+4, 2+5, 3+6]\n    #    sum_list([1,2,3], [4,5,6,7]) = [1+4, 2+5, 3+6, 7]\n    #    sum_list([1,2], [3,4,5]) = [1+3, 2+4]\n    #    sum_list([1,2,3], []) = [1+1, 2+2, 3+3]\n    #    sum_list([1], [1,2]) = [1+1, 1+2]\n    #    sum_list([], [1,2]) = []\n    lst = lst1 + lst2\n    if len(lst1) == 0:\n        return lst2\n    if len(lst2) == 0:\n        return lst1\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #my solution, write in terms of dictionary\n    #d = {}\n    #for n in nums:\n    #    d[n] = d.get(n, 0) + 1\n    #return d.values()\n    #my solution, use python zip\n    return list(map(list, zip(*[(v, i + 1) for i, v in groupby(sorted(nums))])))[0]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for x, y in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(set(nums))\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    count = 0\n    for key,group in groupby(nums):\n        count += 1\n        if count > 2:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Solution 1: sort the list and then go through the list one by one\n    # def consecutive_duplicates(nums):\n    #     nums.sort()\n    #     i = 0\n    #     while i < len(nums) - 1:\n    #         if nums[i] == nums[i+1]:\n    #             del nums[i]\n    #         else:\n    #             i += 1\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i)\n            i -= 1\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # once we encounter a duplicate we need to remove it\n    if len(nums) == 0: return nums\n    # use a set to keep track of the last unique number\n    s = set()\n    for i in range(len(nums)):\n        if nums[i] not in s:\n            s.add(nums[i])\n        else:\n            # as we've encountered a duplicate, we need to remove it\n            # so we can continue looping\n            s.remove(nums[i])\n    return list(s)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = sorted(nums)\n    j = 0\n    for i,g in groupby(s):\n        if i!= j:\n            nums[j] = g.next()\n        j += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    result = []\n    count = 0\n    for item in nums:\n        if count == 0:\n            count = 1\n            result.append(item)\n        elif item == result[-1]:\n            count += 1\n        else:\n            count = 0\n            result.append(item)\n    return result\nprint(consecutive_duplicates([1,2,2,3,4,4,4,4,5,5,6]))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = set(nums)\n    return list(s)\nprint(consecutive_duplicates([1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7, 1, 2, 3, 4, 1, 2, 5, 2, 7"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r * (r + h)\n    return lateral_surface\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = math.pi * r**2\n    b = math.pi * r**2 * h\n    c = 2*math.pi*r*h\n    d = 2*math.pi*r\n    return a + b + c + d\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    surf = math.pi * (r**2) * h\n    return surf\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Solved using trigonometry and hyperbolic geometry\n    area = math.pi * (r**2) - (math.sqrt((2*r*math.sin(math.pi/3))**2 + (r**2*math.cos(math.pi/3))**2 + (h*math.sin(math.pi/3))**2))\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    b = math.pi*r**2\n    c = math.pi*r**2*h\n    a = b+c\n    return a\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralSurfaceArea = (2*math.pi*r**2)*h + (math.pi*r**2)\n    return lateralSurfaceArea\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi)*r*h/3\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    f = 2*math.pi*r\n    h = 2*math.pi*r*h\n    ans = f*(h**2)\n    return ans\nprint(lateralsurface_cone(3,2))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    from math import pi\n    #print(\"r: \",r,\" h: \",h)\n    if h<0:\n        return 0\n    if r<0:\n        return 0\n    return pi*r**2*h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*h\ndef topsurface_cone(r,h):\n    '''\n    Write a function to find the top surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*math.pow(h,2)\ndef bottomsurface_cone(r,h):\n    '''\n    Write a function to find the bottom surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*math.pow(h,-2)\ndef cone_surface(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*math.pow(h,2)\ndef lateralsurface_paraparallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given its adjacent sides a and b.\n    '''\n    return (a*b)/2\ndef topsurface_paraparallelogram(a,b):\n    '''\n    Write a function to find the top surface area of a parallelogram given its adjacent sides a and b.\n    '''\n    return math.pow(a,2)*b\ndef bottomsurface_paraparallelogram(a,b):\n    '''\n    Write a function to find the bottom surface area of a parallelogram given its adjacent sides a and b.\n    '''\n    return math.pow(a,2)*math.pow(b,2)\ndef paraparallelogram_surface(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram given its adjacent sides a and b.\n    '''\n    return math.pow(a,2)*math.pow(b,2)\ndef lateralsurface_rhombus(a,b):\n    '''\n    Write a function to find the lateral surface area of a rhombus given its adjacent sides a and b.\n    '''\n    return math.pow(a,2)/2\ndef topsurface_rhombus(a,b):\n    '''\n    Write a function to find the top surface area of a rhombus given its adjacent sides a and b.\n    '''\n    return a*b\ndef bottomsurface_rhombus(a,b):\n    '''\n    Write a function to find the bottom surface area of a rhombus given its adjacent sides a and b.\n    '''\n    return math.pow(a,2)/2\ndef rhombus_surface(a,b):\n    '''\n    Write a function to find the surface area of a rhombus given its adjacent sides a and b.\n    '''\n    return a*b\ndef lateralsurface_star(r,h):\n    '''\n    Write a function to find the lateral surface area of a star given its radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*math.pow(h,2)\ndef topsurface_star(r,h):\n    '''\n    Write a function to find the top surface area of a star given its radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*math.pow(h,2)\ndef bottomsurface_star(r,h):\n    '''\n    Write a function to find the bottom surface area of a star given its radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*math.pow(h,-2)\ndef star_surface(r,h):\n    '''\n    Write a function to find the surface area of a star given its radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*math.pow(h,2)\ndef lateralsurface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given its adjacent sides a, b, and c.\n    '''\n    return a+b+c\ndef topsurface_triangle(a,b,c):\n    '''\n    Write a function to find the top surface area of a triangle given its adjacent sides a, b, and c.\n    '''\n    return a*b*c\ndef bottomsurface_triangle(a,b,c):\n    '''\n    Write a function to find the bottom surface area of a triangle given its adjacent sides a, b, and c.\n    '''\n    return math.pow(a,2)*b*c\ndef triangle_surface(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given its adjacent sides a, b, and c.\n    '''\n    return a*b*c\ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its adjacent sides a and b.\n    '''\n    return math.pow(a,2)+math.pow(b,2)\ndef topsurface_rectangle(a,b):\n    '''\n    Write a function to find the top surface area of a rectangle given its adjacent sides a and b.\n    '''\n    return a*b\ndef bottomsurface_rectangle(a,b):\n    '''\n    Write a function to find the bottom surface area of a rectangle given its adjacent sides a and b.\n    '''\n    return math.pow(a,2)*b\ndef rectangle_surface(a,b):\n    '''\n    Write a function to find the surface area of a rectangle given its adjacent sides a and b.\n    '''\n    return a*b\ndef lateralsurface_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given its adjacent sides a, b, c, and d.\n    '''\n    return (a+b)*c/2\ndef topsurface_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the top surface area of a trapezoid given its adjacent sides a, b, c, and d.\n    '''\n    return (a+b+c)*d/2\ndef bottomsurface_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the bottom surface area of a trapezoid given its adjacent sides a, b, c, and d.\n    '''\n    return (a+b+c)*d/2\ndef trapezoid_surface(a,b,c,d):\n    '''\n    Write a function to find the surface area of a trapezoid given its adjacent sides a, b, c, and d.\n    '''\n    return (a+b+c+d)/2\ndef lateralsurface_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given its adjacent sides a and b.\n    '''\n    return math.sqrt(math.pow(a,2)+math.pow(b,2))\ndef topsurface_parallelogram(a,b):\n    '''\n    Write a function to find the top surface area of a parallelogram given its adjacent sides a and b.\n    '''\n    return (a*b)/2\ndef bottomsurface_parallelogram(a,b):\n    '''\n    Write a function to find the bottom surface area of a parallelogram given its adjacent sides a and b.\n    '''\n    return math.sqrt(math.pow(a,2)+math.pow(b,2))\ndef parallelogram_surface(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram given its adjacent sides a and b.\n    '''\n    return a*b\ndef lateralsurface_circumcircle(a,b,c,d):\n    '''\n    Write a function to find the lateral surface area of a circumcircle given its adjacent sides a, b, c, and d.\n    '''\n    return math.sqrt(a+b+c+d)/4\ndef topsurface_circumcircle(a,b,c,d):\n    '''\n    Write a function to find the top surface are"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    import re\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in text:\n        if i == \" \":\n            text = text.replace(\" \", \":\")\n        elif i == \",\":\n            text = text.replace(\",\", \":\")\n        elif i == \".\":\n            text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #replace all spaces\n    text = re.sub(' ', ':', text)\n    #replace all commas\n    text = re.sub(',', ':', text)\n    #replace all dots\n    text = re.sub('.', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\" \", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(' ',':')\n    text=text.replace(',','.')\n    text=text.replace('.','.')\n    return text\ndef remove_all(string,char):\n    '''\n    Write a function to remove all the occurrences of a specific character from a string\n    '''\n    return string.replace(char,'')\ndef capitalize_text(text):\n    '''\n    Write a function to capitalize the first letter of every word in a string\n    '''\n    return text.title()\ndef create_regex(strng):\n    '''\n    Write a regex expression that matches a number of special characters.\n    '''\n    return re.compile('[0-9]')\ndef count_match_within_regex(strng):\n    '''\n    Write a function that takes a string as an argument and counts the number of times each of the characters in the \n    string occur within the string using a regex\n    '''\n    #re.compile() function in python uses a regular expression to check\n    #for each character in the string\n    return strng.count('.')\ndef find_substring(strng):\n    '''\n    Write a function that takes a string as an argument and returns a string containing all the substrings of the \n    string that contain exactly four characters.\n    '''\n    #using findall() function in python will provide the count of each substring in the string\n    #using list comprehension in python will provide all the substrings of a string\n    #using group() function in python will provide the first occurring substring of a string\n    #findall() function in python uses a regular expression to check\n    #for each character in the string\n    #finding all the substrings that contain exactly four characters\n    substrings = re.findall(r'\\w{4}',strng)\n    return substrings\ndef create_regex_with_set(strng):\n    '''\n    Write a function to replace all occurrences of the specified character set in a string with a specified character\n    '''\n    # using re.sub() function in python takes a regular expression and a replacement character and \n    # replaces all occurrences of the specified character set in a string with the specified replacement character\n    # using re.sub() function in python takes a regular expression and a replacement character and replaces all \n    #occurrences of the specified character set in a string with the specified replacement character\n    return re.sub(r'[\\S]','#',strng)\ndef is_valid_email(email):\n    '''\n    Write a function that takes a string as an argument and returns a boolean value \n    to indicate whether the string is a valid email address or not\n    '''\n    # check if @ symbol is present and if it is the first character in the email\n    # if \"@\" symbol is not present and if it is the first character in the email\n    # if \"@\" symbol is not present and if it is not the first character in the email\n    # returns True if the email is valid otherwise returns False\n    return bool(re.search(r'[^@]+@[^@]+\\.[^@]+',email))\ndef create_regex_with_set_with_findall(strng):\n    '''\n    Write a function to replace all occurrences of the specified character set in a string with a specified replacement character\n    '''\n    # using re.sub() function in python takes a regular expression and a replacement character and \n    # replaces all occurrences of the specified character set in a string with the specified replacement character\n    # using re.sub() function in python takes a regular expression and a replacement character and replaces all \n    #occurrences of the specified character set in a string with the specified replacement character\n    return re.sub(r'[\\S]','#',strng)\ndef index_of_substring(strng):\n    '''\n    Write a function to return the index of the first occurrence of a specified substring in a string\n    '''\n    return strng.find('$')\ndef reverse_string(strng):\n    '''\n    Write a function to reverse a string.\n    '''\n    return strng[::-1]\ndef remove_url(text):\n    '''\n    Write a function to remove all the URLs from a string\n    '''\n    return re.sub(r'https?://\\S+|www\\.\\S+', '',text)\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all the multiple spaces from a string\n    '''\n    return re.sub(r'\\s+','',text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all the punctuation characters from a string\n    '''\n    return re.sub(r'[^\\w\\s]','',text)\ndef remove_all_stopwords(text):\n    '''\n    Write a function to remove all the stopwords from a string\n    '''\n    return re.sub(r'\\b(a|an|the)\\b',' ',text)\ndef count_hyphen_in_string(strng):\n    '''\n    Write a function to count the number of hyphens (\u2018-\u2019) in a string\n    '''\n    return strng.count('-')\ndef strip_string(text):\n    '''\n    Write a function that takes a string as an argument and returns a string containing all the characters from the \n    start and end of the string\n    '''\n    # using strip() function in python will remove all the characters from the string\n    #using strip() function in python will remove all the characters from the string\n    return text.strip()\ndef count_non_alphanumeric(strng):\n    '''\n    Write a function to count the number of characters that are not alphanumeric characters in a string.\n    '''\n    #using re.sub() function in python takes a regular expression and a replacement character and replaces all \n    #occurrences of the specified character set in a string with the specified replacement character\n    return len(re.sub(r'[^\\w\\s]','',strng))\ndef remove_char_list(strng,list):\n    '''\n    Write a function to remove the characters from a string given a list of characters from the given string\n    '''\n    #using re.sub() function in python takes a regular expression and a replacement character and replaces all \n    #occurrences of the specified character set in a string with the specified replacement character\n    return re.sub(r'['+'\\s'.join(list)+']','',strng)\ndef replace_char(strng,char1,char2):\n    '''\n    Write a function that takes a string as an argument and returns a string with the first occurrence of each \n    occurrence of a character from the string replaced with another character given in the argument\n    '''\n    return strng.replace(char1,char2)\ndef solve_puzzle(strng):\n    '''\n    Write a function that takes a string as an argument and returns a string with the characters in the string \n    replaced by their corresponding unicode values.\n    '''\n    #using replace() function in python will replace each occurrence of a character with its corresponding unicode value\n    #using replace() function in python will replace each occurrence of a character with its corresponding unicode value\n    return strng.replace('a','\\u0061')\ndef count_char_and_word(strng):\n    '''\n    Write a function that takes a string as an argument and returns a tuple where the first item is the number of \n    occurrences of the first character of the string and the second item is the number of occurrences of the second \n    character of the string.\n    '''\n    #using split() function in python will split a string into a list using the delimiter ',' as the delimiter and \n    #returning the list\n    #using split() function in python will split a string into a list using the delimiter ',' as the delimiter and \n    #returning the list\n    #using split() function in python will split a string into a list using the delimiter ',' as the delimiter and \n    #returning the list\n    return (strng.count(',')+1,strng.count(','))\ndef replace_char_in_str(strng,char1,char2):\n    '''\n    Write a function that takes a string and a pair of characters as arguments and returns a string with each pair \n    of characters inserted between the pair of characters in the string\n    '''\n    #using re.sub() function in pytho"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[,.;:()\\\"]','',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = text\n    result = result.replace(',', ':')\n    result = result.replace('.', ':')\n    result = result.replace(' ', ':')\n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if text == \"\":\n        return text\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\",\", \":\", text)\n    text = re.sub(r\"\\.\", \":\", text)\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while (left <= right):\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A == None:\n        return None\n    \n    if x in A:\n        return A.index(x)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A)\n    while lo < hi:\n        mid = (lo + hi)//2\n        if A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            high = mid - 1\n        if A[mid] < x:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x in A:\n        return A.index(x)\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    try:\n        i = 0\n        j = len(A)-1\n        if x < A[i] or x >= A[j]:\n            return -1\n        while i <= j:\n            mid = i + (j-i)//2\n            if A[mid] == x:\n                return mid\n            elif A[mid] > x:\n                j = mid - 1\n            else:\n                i = mid + 1\n    except:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n        index += 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    size = len(arr)\n    ans = 0\n    for i in range(size):\n        for j in range(size):\n            prod = arr[i] * arr[j]\n            if i!= j:\n                ans += prod\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    len_arr=len(arr)\n    sum_prod=[]\n    for i in range(len_arr):\n        for j in range(i,len_arr):\n            prod=1\n            for k in range(i,j+1):\n                prod*=arr[k]\n            sum_prod.append(prod)\n    return sum(sum_prod)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l = len(arr)\n    \n    '''\n    We can solve this problem using 2 methods:\n    '''\n    # 1. Using Dynamic Programming:\n    # dp = [[0 for _ in range(l)] for _ in range(l)]\n    \n    # for i in range(l):\n    #     for j in range(i, l):\n    #         for k in range(j, l):\n    #             dp[i][j] += arr[i] * arr[j] * arr[k]\n    \n    # print(dp)\n    \n    # 2. Using Precomputed Sum:\n    \n    # If we assume that our list of size n is sorted, then the sum of products of n contiguous sub-lists of a given array is sum[n] = sum[0] + sum[1] +... + sum[n-1] + sum[n].\n    # Then the sum of products of sublists of size i can be computed as sum[i] = sum[i-1] * arr[i-1] * arr[i] + sum[i-1] * arr[i] * arr[i+1] +... + sum[i-1] * arr[i] * arr[i+1] * arr[i+2] +... + sum[i-1] * arr[i] * arr[i+1] * arr[i+2] *... * arr[i+n-1].\n    \n    # To compute the sum of products of n contiguous sub-lists, we can simply iterate over the list and compute the product of each element and add the product to sum.\n    # Then sum[i] = sum[i-1] * arr[i-1] + sum[i-1] * arr[i] +... + sum[i-1] * arr[i+1] +... + sum[i-1] * arr[i+n-1]\n    \n    # Therefore, sum[n] = sum[i] * arr[i] * arr[i+1] *... * arr[i+n-1]\n    \n    # Hence, sum[n] = sum[n-1] * arr[n-1] * arr[n] + sum[n-2] * arr[n-1] * arr[n] +... + sum[n-1] * arr[n-1] * arr[n] * arr[n+1] +... + sum[n-1] * arr[n-1] * arr[n] * arr[n+1] *... * arr[n] * arr[n+n-1]\n    \n    # Hence, sum[n] = sum[0] + sum[1] +... + sum[n-1] + sum[n]\n    \n    # Time Complexity: O(n^2)\n    # Space Complexity: O(n^2)\n    \n    sum = 0\n    \n    for i in range(1, l):\n        sum += arr[i]\n    \n    for i in range(0, l - 1):\n        for j in range(i + 1, l):\n            for k in range(j, l):\n                sum += arr[i] * arr[j] * arr[k]\n    \n    return sum\n    \n    \n    '''\n    The above algorithm is not correct. It is wrong because we are not checking whether the elements of the subarrays are sorted.\n    If the elements of the array are not sorted, then the sum of products of all subarrays will be wrong.\n    '''\n    \n    # The above algorithm is correct but the same algorithm can be used to compute the sum of all products of sublists.\n    # Hence, we can use the above algorithm to compute the sum of products of all sublists.\n    \n    # time complexity: O(n^2)\n    # space complexity: O(n)\n    \n    '''\n    Let us compute the sum of products of all subarrays of a given array A of size n.\n    We can start by considering the empty array. We can pick any index x of size 1 as the starting index and construct an array of size n-1. For each of the remaining n-1 indices x = 1 to n, we can compute the product of all elements of A except A[x]. We can then compute the sum of the products of all subarrays of A of size n-1.\n    \n    Let us compute the sum of products of all subarrays of a given array A of size n.\n    \n    We can start by considering the empty array. We can pick any index x of size 1 as the starting index and construct an array of size n-1. For each of the remaining n-1 indices x = 1 to n, we can compute the product of all elements of A except A[x]. We can then compute the sum of the products of all subarrays of A of size n-1.\n    \n    The time complexity of the above algorithm is O(n^2) and the space complexity of the above algorithm is O(n).\n    '''\n    \n    # Time Complexity: O(n^3)\n    # Space Complexity: O(1)\n    \n    # Sum of products of all subarrays of a given array A of size n.\n    # We can use the above algorithm to compute the sum of products of all sublists of a given array.\n    \n    # The above algorithm is incorrect. It is wrong because we are not checking whether the elements of the subarrays are sorted.\n    \n    # Let us compute the sum of products of all subarrays of a given array A of size n.\n    # We can use the above algorithm to compute the sum of products of all sublists of a given array.\n    \n    # The above algorithm is correct but the same algorithm can be used to compute the sum of all products of sublists.\n    # Hence, we can use the above algorithm to compute the sum of products of all sublists.\n    \n    '''\n    We can compute sum[i] as sum[i-1] * arr[i-1] * arr[i] + sum[i-1] * arr[i] * arr[i+1] +... + sum[i-1] * arr[i] * arr[i+1] * arr[i+2] +... + sum[i-1] * arr[i] * arr[i+1] * arr[i+2] *... * arr[i+n-1] + sum[i-1] * arr[i] * arr[i+1] * arr[i+2] *... * arr[i+n-1] * arr[i+n] + sum[i-1] * arr[i] * arr[i+1] * arr[i+2] *... * arr[i+n-1] * arr[i+n] *... * arr[i+n-n] * arr[i] * arr[i+1] * arr[i+2] *... * arr[i+n-1] * arr[i+n].\n    \n    The above algorithm is correct but the same algorithm can be used to compute the sum of all products of sublists.\n    Hence, we can use the above algorithm to compute the sum of all products of sublists.\n    '''\n    \n    # Time Complexity: O(n^3)\n    # Space Complexity: O(n)\n    \n    '''\n    Let us compute the sum of products of all subarrays of a given array A of size n.\n    We can use the above algorithm to compute the sum of products of all sublists of a given array.\n    \n    The above algorithm is correct but the same algorithm can be used to compute the sum of all products of sublists.\n    Hence, we can use the above algorithm to compute the sum of all products of sublists.\n    '''\n    \n    # Time Complexity: O(n^2)\n    # Space Complexity: O(1)\n    \n    # Sum of products of all subarrays of a given array A of size n.\n    # We can use the above algorithm to compute the sum of products of all sublists of a given array.\n    \n    # The above algorithm is correct but the same algorithm can be used to compute the sum of all products of sublists.\n    # Hence, we can use the above algorithm to compute the sum of all products of sublists.\n    \n    '''\n    Let us compute the sum of products of all subarrays of a given array A of size n.\n    We can use the above algorithm to compute the sum of products of all sublists of a given array."
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) < 1:\n        return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            total+=arr[i:j+1]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    \n    if n == 0:\n        return 0\n    \n    total = arr[0]\n    \n    for i in range(1, n):\n        total *= arr[i]\n        \n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            res += total//(j-i) * arr[i:j]\n            \n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    i = 0\n    while i < len(arr):\n        j = 0\n        while j < len(arr) and i + j < len(arr):\n            sum += arr[i+j] * arr[i]\n            j += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    print(\"\\n\\n---SUM OF PRODUCTS OF ALL POSSIBLE SUBLISTS---\")\n    # Note: For calculating sum of products, if we calculate only first element of the list, then the answer will be 1.\n    # For calculating sum of products, if we calculate first element of the list and the second element of the list\n    # then the answer will be 1 * 2 = 2.\n    # But we should calculate the answer by considering all possible pairs in the array. So, the answer is 1 * 2 * 3 = 6.\n    # Which is equal to sum of all pairs of the elements of the array.\n    # Note: sum of all pairs of elements is always in ascending order. So, there is no need to sort the array.\n    # This is a question of generating the permutations of the given array.\n    # So, we need to make use of permutation and combination function of Python.\n    \n    # Solution:\n    # Using permutation and combination function of Python.\n    # Note: Both these solutions are okay. But since we are considering sum of products, we need to calculate sum of all permutations of array first and then calculate sum of products of all permutations.\n    # So, we can use it in combination of previous two solutions.\n    \n    # Solution 1: Using permutation\n    '''\n    Note: This solution requires the use of permutation function.\n    '''\n    from itertools import permutations\n    \n    def perm(arr, n):\n        if n == 1:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    yield arr[i]\n        else:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    for p in perm(arr[i + 1:], n - 1):\n                        yield arr[i] + p\n                    \n    p = perm(arr, len(arr))\n    ans = 0\n    for i in range(len(p)):\n        ans += p[i] * p[i]\n    return ans\n    \n    # Solution 2: Using combination function of Python\n    '''\n    Note: This solution requires the use of combination function of Python.\n    '''\n    from itertools import combinations\n    \n    def comb(arr, n):\n        if n == 1:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    yield arr[i]\n        else:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    for c in comb(arr[i + 1:], n - 1):\n                        yield arr[i] + c\n                    \n    c = comb(arr, len(arr))\n    ans = 0\n    for i in range(len(c)):\n        ans += c[i] * c[i]\n    return ans\n    \n    # Solution 3: Using zip function of Python\n    '''\n    Note: This solution requires the use of zip function of Python.\n    '''\n    def zipp(arr, n):\n        if n == 1:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    yield arr[i]\n        else:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    for z in zip(arr[i + 1:], n - 1):\n                        yield arr[i] + z\n                    \n    z = zipp(arr, len(arr))\n    ans = 0\n    for i in range(len(z)):\n        ans += z[i] * z[i]\n    return ans\n    \n    # Solution 4: Using itertools combinations and permutations\n    '''\n    Note: This solution requires the use of itertools.\n    '''\n    from itertools import combinations, permutations\n    \n    def comb(arr, n):\n        if n == 1:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    yield arr[i]\n        else:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    for c in combinations(arr[i + 1:], n - 1):\n                        yield arr[i] + tuple(c)\n                    \n    c = comb(arr, len(arr))\n    ans = 0\n    for i in range(len(c)):\n        ans += c[i] * c[i]\n    return ans\n    \n    # Solution 5: Using itertools combinations and product\n    '''\n    Note: This solution requires the use of itertools.\n    '''\n    from itertools import combinations, product\n    \n    def comb(arr, n):\n        if n == 1:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    yield arr[i]\n        else:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    for c in product(arr[i + 1:], n - 1):\n                        yield arr[i] + tuple(c)\n                    \n    c = comb(arr, len(arr))\n    ans = 0\n    for i in range(len(c)):\n        ans += c[i] * c[i]\n    return ans\n    \n    # Solution 6: Using itertools permutations and product\n    '''\n    Note: This solution requires the use of itertools.\n    '''\n    from itertools import combinations, product\n    \n    def comb(arr, n):\n        if n == 1:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    yield arr[i]\n        else:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    for p in product(arr[i + 1:], n - 1):\n                        yield arr[i] + tuple(p)\n                    \n    c = comb(arr, len(arr))\n    ans = 0\n    for i in range(len(c)):\n        ans += c[i] * c[i]\n    return ans\n    \n    # Solution 7: Using itertools permutations and combinations\n    '''\n    Note: This solution requires the use of itertools.\n    '''\n    from itertools import combinations, permutations\n    \n    def comb(arr, n):\n        if n == 1:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    yield arr[i]\n        else:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    for p in combinations(arr[i + 1:], n - 1):\n                        yield arr[i] + tuple(p)\n                    \n    c = comb(arr, len(arr))\n    ans = 0\n    for i in range(len(c)):\n        ans += c[i] * c[i]\n    return ans\n    \n    # Solution 8: Using itertools combinations and product\n    '''\n    Note: This solution requires the use of itertools.\n    '''\n    from itertools import combinations, product\n    \n    def comb(arr, n):\n        if n == 1:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    yield arr[i]\n        else:\n            for i in range(len(arr)):\n                if arr[i] % 2!= 0:\n                    for p in product(arr[i + 1:], n - 1):\n                        yield arr[i] + tuple(p)\n                    \n    c = comb(arr, len(arr))\n    ans = 0\n    for i in range(len(c)):\n        ans += c[i] * c[i]\n    return ans\n    \n    # Solution 9: Using itertools combinations and product\n    '''\n    Note: This solution requires the use of itertools.\n    '''\n    from itertools import combinations, product\n    \n    def comb(arr, n):\n        if n == 1:\n            for i in range(len(arr)):\n                if arr[i] % 2!"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    sum_of_sub_arr = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum_of_sub_arr += prod*arr[j]\n            prod *= arr[i]\n            if j == len(arr)-1:\n                break\n    return sum_of_sub_arr\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            res += arr[i]*arr[j]\n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = 2**(n)\n    #print(m)\n    first = m>>1\n    second = m>>1\n    last = m\n    print(first,second,last)\n    first = first ^ 1\n    second = second ^ 1\n    last = last ^ 1\n    #print(first,second,last)\n    return first, second, last\n    \nif __name__ == '__main__':\n    num = int(input())\n    first, second, last = set_middle_bits(num)\n    if first == 0 and second == 0 and last == 0:\n        print(first,second,last)\n    else:\n        print(last)"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & 0b101010\n    n = n | (n >> 1)\n    n = n & 0b111111\n    n = n | (n << 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    binary = bin(n)\n    print(binary)\n    n = n | (2**(len(binary)-2))\n    print(binary)\n    n = n ^ (2**(len(binary)-2))\n    print(binary)\n    \n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n | (1 << (n.bit_length() - 1) ) | (1 << (n.bit_length() - 1) )\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Binary representation of n\n    # 3 = 0000 0001\n    # 7 = 1111 0000\n    # 1111 = 1111 0000\n    binary_rep = bin(n)[2:]\n    # print binary_rep\n    \n    # Toggle bits in place\n    binary_rep = binary_rep[1:] + binary_rep[0]\n    # print binary_rep\n    \n    # convert to int\n    n = int(binary_rep, 2)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n < 0:\n        n = 0x100000000 + n\n    res = n ^ (n >> 1)\n    res = res >> 2\n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if(n==0):\n        return 0\n    s = 0\n    n1 = n\n    while(n1):\n        s = s|n1&1\n        n1 = n1>>1\n    return s\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n >> 1\n    n = n | (n << 1)\n    return n\n    "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    result = n ^ (n >> 1)\n    return result\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a)-1\n    while l < r:\n        mid = (l+r)//2\n        if a[mid] > x:\n            r = mid\n        else:\n            l = mid + 1\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return -1\n    else:\n        return index - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # edge case, if empty or single element list, return 0.\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 0\n    # if x is less than the first element in the list, it should be inserted before the first element.\n    if x < a[0]:\n        return 0\n    # else, binary search\n    l = 0\n    h = len(a) - 1\n    # find the index of x.\n    while(l <= h):\n        mid = l + (h - l) // 2\n        if a[mid] == x:\n            return mid + 1\n        # if x is greater than the mid element, then we should search on the left side.\n        if x > a[mid]:\n            l = mid + 1\n        # else, x is smaller than mid element, so we should search on the right side.\n        else:\n            h = mid - 1\n    # if l is still equal to h, that means no element in the list has x.\n    # so, insert x before the first element.\n    return l + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos==0:\n        return 0\n    if a[pos-1]==x:\n        return pos-1\n    return pos\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n == 0:\n        return n\n    else:\n        index = bisect.bisect(a, x)\n        if a[index] == x:\n            return index\n        else:\n            if index == 0:\n                if a[index] > x:\n                    return 0\n                else:\n                    return index\n            if a[index] < x:\n                return index + 1\n            else:\n                if a[index] > x:\n                    return index\n                else:\n                    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i - 1\na = [0, 3, 4, 6, 9, 10, 11, 15, 20, 22, 25]\nx = 9\nprint(left_insertion(a, x))"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif x <= a[i]:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if x > a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 0\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    return i+1\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #return bool(re.search('^[aeiouAEIOU][A-Za-z0-9_]*', string))\n    return re.match(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    reg = re.compile(regex)\n    return bool(reg.match(string))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    if bool(re.match(regex,string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        if match.group(0) in ['a', 'e', 'i', 'o', 'u']:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex,string))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if(re.match(pattern,string)): \n        return True\n    else: \n        return False\n    \n        \nprint(check_str('Krishna'))\nprint(check_str('katya'))\nprint(check_str('cadw'))\nprint(check_str('abc'))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n > 1:\n        return n * (n - 1)\n    return 1\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return geometric_sum(n-1) + geometric_sum(n-2)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*(1+geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n*(n-1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def recursion_geo_sum(n):\n        if n == 0:\n            return 1\n        else:\n            return recursion_geo_sum(n - 1) * (1 + n)\n    return recursion_geo_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return geometric_sum(n-1) * (n+1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (n - 1)) / 2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def sieve(n): \n        # i is the index of the current prime \n        # being considered in the n-th iteration \n        prime = [True for i in range(n + 1)] \n        p = 2\n        while (p * p <= n): \n            # If prime[p] is not changed, then it is \n            # a prime \n            if (prime[p] == True): \n                # Update all multiples of p \n                for i in range(p * 2, n + 1, p): \n                    prime[i] = False\n            p += 1\n        prime[0]= False\n        prime[1]= False\n        # Print all prime numbers \n        for p in range(n + 1): \n            if prime[p]: \n                print(p, end=',') \n        return \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    from math import sqrt\n    for i in range(n):\n        x = i + 1\n        y = int(sqrt(x))\n        if x == y*y:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n - 1\n    for i in range(2,n+1):\n        sum = 0\n        for j in range(1,i+1):\n            sum += j\n        if sum == i:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n1=1\n    n2=1\n    n3=1\n    n4=1\n    while True:\n        n1=n2\n        n2=n3\n        n3=n4\n        n4=n1+n2+n3\n        if n4==n:\n            return n3\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Your code here\n    n = int(n)\n    x = 1\n    \n    while n >= x :\n        x = x * (x + 1) // 2\n        print(x)\n    return x - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    result = 0\n    for i in range(0,n):\n        a = (10**i)**3\n        if result < a:\n            result = a\n    print(result)\n    return result\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a,b,c = 0,0,0\n    d = n-1\n    for i in range(2,int(math.sqrt(n))+1):\n        #print(i)\n        if n % i == 0:\n            a = i\n            b = n//i\n            c = b-a\n            break\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    total = 1\n    for i in range(1, n):\n        total = total * (n - i)\n    for i in range(1, total + 1):\n        for j in range(1, n - i + 1):\n            print(i * j, end = \" \")\n        print()\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Your code here\n    n=int(n)\n    i=0\n    while(i<=math.pow(10,(n-1))):\n        i=i+1\n    return i\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def isTriangularNumber(n):\n        return (int(math.sqrt(1 + 8 * n)) ** 2) == 1 + 8 * n\n    if isTriangularNumber(n):\n        return -1\n    for i in range(n):\n        if isTriangularNumber(i):\n            return i\n    return -1\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dct = {}\n    for i, j in enumerate(test_tup):\n        dct[j] = test_tup[i+1]\n    return dct\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    d = {}\n    i = 0\n    for x in test_tup:\n        d[x] = test_tup[i+1]\n        i += 2\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    for i in range(0,len(test_tup),2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            dict_tup.update({test_tup[i]: test_tup[i + 1]})\n    return dict_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = i\n        d[key] = value\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)-1):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = dict()\n    for i in range(0, len(test_tup), 2):\n        res[test_tup[i]] = test_tup[i+1]\n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = i\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for idx in range(len(test_tup)):\n        d[test_tup[idx]] = test_tup[idx+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dct = {}\n    for i in range(len(test_tup)):\n        dct[test_tup[i]] = test_tup[i+1]\n    return dct\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 1 : return True\n    if s[0]!= s[1] : return False\n    return all_Characters_Same(s[1:])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) <= 1 :\n        return True\n    elif s[0] == s[1] :\n        return all_Characters_Same(s[1:])\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.lower() == s.lower()\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # code here\n    return all(s[i] == s[i + 1] for i in range(len(s) - 1))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Input\n    # aba\n    # b\n    # a\n    # Output\n    # True\n    s = s.lower()\n    s = s.replace(' ','')\n    if len(s)==0 or len(s)==1 :\n        return False\n    else :\n        if s[0]==s[-1] :\n            return all_Characters_Same(s[1:-1])\n        else :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s_lst = list(s)\n    for i in range(len(s_lst)-1) :\n        if s_lst[i]!= s_lst[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    n = len(s)\n    if n <= 1 :\n        return True\n    if n == 2 :\n        if s[0] == s[1] :\n            return True\n        else :\n            return False\n    if n == 3 :\n        if s[0] == s[1] and s[1] == s[2] :\n            return True\n        else :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i!=j and s[i]!=s[j]:\n                return False\n    return True\nprint(all_Characters_Same(\"abcd\"))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    if len(s) < 2 :\n        return False\n    \n    return s[0] == s[-1] and all_Characters_Same(s[1:-1])\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*math.sqrt(3)/3*side**3\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi*radius**2\ndef area_cuboid(width, height, depth):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    return width*height*depth\ndef area_cone(height, radius):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi*radius**2*height\ndef area_pyramid(width, height):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    return width*height/3\ndef area_cylinder(radius, height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return math.pi*radius**2*height\ndef area_trunc_cone(radius, height, base_radius):\n    '''\n    Write a function to caluclate the area of a truncated cone.\n    '''\n    return math.pi*(radius**2+height*radius+base_radius**2)/2\ndef area_trapezoid(length1, width1, length2, width2):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    return 1/2*length1*width1+1/2*length2*width2\ndef area_parallelogram(height1, width1, height2, width2):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    return height1*width1+height2*width2\ndef area_trapezoid_parallelogram(height1, width1, length2, width2, height2, width3):\n    '''\n    Write a function to caluclate the area of a trapezoid parallelogram.\n    '''\n    return height1*width1*length2+height2*width2*height2+height2*width3*length2\ndef area_triangle(height1, width1, height2, width2, height3, width3):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    return height1*width1+height2*width2+height3*width3\ndef area_square(length):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return length**2\ndef area_square_hypotenuse(a, b):\n    '''\n    Write a function to caluclate the area of a square hypotenuse.\n    '''\n    return math.sqrt(a**2+b**2)\ndef area_right_triangle(base, height):\n    '''\n    Write a function to caluclate the area of a right triangle.\n    '''\n    return 1/2*base*height\ndef area_circle_square(radius):\n    '''\n    Write a function to caluclate the area of a square circle.\n    '''\n    return radius**2*math.pi\ndef area_right_triangle_square(base, height):\n    '''\n    Write a function to caluclate the area of a right triangle square.\n    '''\n    return height*base/2\ndef area_right_triangle_right_triangle(a, b, c):\n    '''\n    Write a function to caluclate the area of a right triangle right triangle.\n    '''\n    return 0.5*a*b\ndef area_right_triangle_circle(radius, height):\n    '''\n    Write a function to caluclate the area of a right triangle circle.\n    '''\n    return radius**2*height*math.pi/4\ndef area_right_triangle_circle_square(radius, height):\n    '''\n    Write a function to caluclate the area of a right triangle square circle.\n    '''\n    return radius**2*height\ndef area_right_triangle_circle_square_right_triangle(radius, height, a, b):\n    '''\n    Write a function to caluclate the area of a right triangle square circle right triangle.\n    '''\n    return radius**2*height/2\ndef area_right_triangle_rectangle(length, width):\n    '''\n    Write a function to caluclate the area of a right triangle rectangle.\n    '''\n    return width*height\ndef area_right_triangle_rectangle_square(length, width):\n    '''\n    Write a function to caluclate the area of a right triangle square rectangle.\n    '''\n    return length*width\ndef area_right_triangle_rectangle_square_rectangle(length, width, a, b):\n    '''\n    Write a function to caluclate the area of a right triangle square rectangle right triangle.\n    '''\n    return length*width\ndef area_rectangle_rectangle(length1, width1, length2, width2):\n    '''\n    Write a function to caluclate the area of a rectangle rectangle.\n    '''\n    return length1*width1+length2*width2\ndef area_rectangle_rectangle_square(length1, width1, length2, width2):\n    '''\n    Write a function to caluclate the area of a rectangle square rectangle.\n    '''\n    return length1*width1+length2*width2\ndef area_rectangle_rectangle_square_rectangle(length1, width1, length2, width2, a, b):\n    '''\n    Write a function to caluclate the area of a rectangle square rectangle right triangle.\n    '''\n    return length1*width1+width1*length1\ndef area_rectangle_rectangle_square_rectangle_square(length1, width1, length2, width2, a, b):\n    '''\n    Write a function to caluclate the area of a rectangle square rectangle right triangle square.\n    '''\n    return length1*width1+length2*width2\ndef area_rectangle_rectangle_rectangle(length1, width1, length2, width2, length3, width3):\n    '''\n    Write a function to caluclate the area of a rectangle rectangle rectangle.\n    '''\n    return length1*width1+length2*width2+length3*width3\ndef area_rectangle_rectangle_rectangle_rectangle(length1, width1, length2, width2, length3, width3, a, b):\n    '''\n    Write a function to caluclate the area of a rectangle rectangle rectangle right triangle square.\n    '''\n    return length1*width1+length2*width2+width1*length1\ndef area_rectangle_rectangle_rectangle_rectangle_rectangle(length1, width1, length2, width2, length3, width3, a, b, c):\n    '''\n    Write a function to caluclate the area of a rectangle rectangle rectangle right triangle square right triangle square.\n    '''\n    return length1*width1+length2*width2+width1*length1+width2*length2+c*a*b\ndef area_rectangle_rectangle_rectangle_rectangle_rectangle_rectangle(length1, width1, length2, width2, length3, width3, a, b, c):\n    '''\n    Write a function to caluclate the area of a rectangle rectangle rectangle right triangle square right triangle square right triangle square.\n    '''\n    return length1*width1+length2*width2+width1*length1+width2*length2+width3*a*b+c*a*b\ndef area_rectangle_rectangle_rectangle_rectangle_rectangle_rectangle_rectangle_rectangle(length1, width1, length2, width2, length3, width3, a, b, c, d):\n    '''\n    Write a function to caluclate the area of a rectangle rectangle rectangle right triangle square right triangle square right triangle square right triangle square right triangle square right triangle square right triangle square.\n    '''\n    return length1*width1+length2*width2+width1*length1+width2*length2+width3*a*b+d*a*b\ndef area_rectangle_rectangle_rectangle_rectangl"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area_val = side**2/2\n    return area_val\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3)*math.sqrt(5)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    pi = 3.14159265359\n    return (side**2) / 2 * pi\n    # use pi = 3.14159265359\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2 / 2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_sq = side * side\n    s = 0.5 * (side_sq - math.sqrt(4*side_sq))\n    return s\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        print(\"The area of the tetrahedron is\",4/3)\n    elif side == 2:\n        print(\"The area of the tetrahedron is\",sqrt(2)*4/3)\n    elif side == 3:\n        print(\"The area of the tetrahedron is\",sqrt(2)*4/3)\n    else:\n        print(\"The area of the tetrahedron is\",sqrt(2)*4/3)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side**2)/(2*math.sqrt(3))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)/4\ndef is_triangle(side,angle):\n    '''\n    Write a function to check if a triangle is right-angled triangle.\n    '''\n    return side*math.sin(math.radians(angle/2))**2 == side**2\ndef is_square(side):\n    '''\n    Write a function to check if a square is right-angled square.\n    '''\n    return side == math.sqrt(4*side**2)\ndef square_area(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return side**2\ndef circle_area(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*radius**2\ndef is_rectangle(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle.\n    '''\n    return length == width * 2\ndef is_square_using_pythagoras(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return math.sqrt(side**2 + hypotenuse**2) == side\ndef is_square_using_pythagoras2(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return side**2 == hypotenuse**2\ndef is_rectangle_using_pythagoras(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return width == length * 2\ndef is_rectangle_using_pythagoras2(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return width == length * 2\ndef is_square_using_pythagoras3(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return math.sqrt(side**2 + hypotenuse**2) == side\ndef is_square_using_pythagoras4(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return math.sqrt(side**2 + hypotenuse**2) == side\ndef is_rectangle_using_pythagoras3(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return length == width * 2\ndef is_rectangle_using_pythagoras4(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return length == width * 2\ndef is_pentagon(side,angle):\n    '''\n    Write a function to check if a pentagon is right-angled pentagon.\n    '''\n    return side*math.sin(math.radians(angle/3))**2 == side**2\ndef is_triangle_using_pythagoras(side,hypotenuse):\n    '''\n    Write a function to check if a triangle is right-angled triangle using pythagoras theorem.\n    '''\n    return side == math.sqrt(4*side**2 - hypotenuse**2)\ndef is_pentagon_using_pythagoras(side,hypotenuse):\n    '''\n    Write a function to check if a pentagon is right-angled pentagon using pythagoras theorem.\n    '''\n    return math.sqrt(side**2 - hypotenuse**2) == side\ndef is_triangle_using_pythagoras2(side,hypotenuse):\n    '''\n    Write a function to check if a triangle is right-angled triangle using pythagoras theorem.\n    '''\n    return side == math.sqrt(4*side**2 - hypotenuse**2)\ndef is_square_using_pythagoras2(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return side == math.sqrt(hypotenuse**2 - 4*side**2)\ndef is_rectangle_using_pythagoras2(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return length == width * 2\ndef is_square_using_pythagoras3(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return math.sqrt(side**2 + hypotenuse**2) == side\ndef is_rectangle_using_pythagoras3(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return length == width * 2\ndef is_pentagon_using_pythagoras3(side,hypotenuse):\n    '''\n    Write a function to check if a pentagon is right-angled pentagon using pythagoras theorem.\n    '''\n    return side == math.sqrt(4*side**2 - hypotenuse**2)\ndef is_triangle_using_pythagoras4(side,hypotenuse):\n    '''\n    Write a function to check if a triangle is right-angled triangle using pythagoras theorem.\n    '''\n    return side == math.sqrt(4*side**2 - hypotenuse**2)\ndef is_rectangle_using_pythagoras4(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return length == width * 2\ndef is_square_using_pythagoras4(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return side == math.sqrt(hypotenuse**2 - 4*side**2)\ndef is_square_using_pythagoras5(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return side == math.sqrt(4*side**2 - hypotenuse**2)\ndef is_rectangle_using_pythagoras5(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return length == width * 2\ndef is_square_using_pythagoras6(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return side == math.sqrt(4*side**2 - hypotenuse**2)\ndef is_rectangle_using_pythagoras6(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return length == width * 2\ndef is_square_using_pythagoras7(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return side == math.sqrt(4*side**2 - hypotenuse**2)\ndef is_rectangle_using_pythagoras7(width,length):\n    '''\n    Write a function to check if a rectangle is right-angled rectangle using pythagoras theorem.\n    '''\n    return length == width * 2\ndef is_square_using_pythagoras8(side,hypotenuse):\n    '''\n    Write a function to check if a square is right-angled square using pythagoras theorem.\n    '''\n    return side == math.sqrt("
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # side = 2 * ( (5 * 5 ) + (12 * 5 ) )\n    # return 0.5 * side * side\n    return (side * (side - 1) * (side - 2) / 6)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    size = len(list)\n    j = size - m\n    for i in range(j):\n        list[i], list[i+m] = list[i+m], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    c = 0\n    for i in range(0,m):\n        list[i],list[c] = list[c],list[i]\n        c += 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # get length of the list\n    size = len(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # make a copy of the list\n    copy = list.copy()\n    # rotate list by m to right\n    for i in range(m):\n        tmp = copy[0]\n        copy = copy[1:]\n        copy.append(tmp)\n    return copy\n    \ndef rotate_right2(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # initialising variables\n    l = len(list)\n    new_list = []\n    for i in range(0, m):\n        new_list.append(list[i])\n    for i in range(m, l):\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > 0:\n        m = m % len(list)\n        return list[m:] + list[:m]\n    else:\n        m = abs(m)\n        if m < len(list):\n            return list[m:] + list[:m]\n        else:\n            return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n == 0:\n        return []\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    count = 0\n    for i in range(m):\n        count += 1\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Rotate right by n items\n    # Input : list = [1,2,3,4,5,6], m = 3\n    # Output : [5,6,1,2,3,4]\n    # Explanation : Items rotated right by 3 items are 5, 6, 1\n    \n    if len(list) == 0:\n        return None\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            print(\"Tuple has at least one none value.\")\n            return False\n    print(\"Tuple does not have any none value.\")\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_flag = False\n    if not test_tup:\n        print(\"The given tuple is empty.\")\n    else:\n        for val in test_tup:\n            if val is None:\n                print(\"The given tuple has a None value.\")\n                test_flag = True\n                break\n    return test_flag\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x == None for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if (None in test_tup):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return map(lambda x: x if sum(x.split('.')[0].split('-')) % 10 == 0 else None, range(startnum, endnum+1))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(number):\n        number = str(number)\n        for i in range(0, len(number)):\n            if (int(number[i]) % int(number)!= 0):\n                return False\n        return True\n    def divisible_by_digits_list(startnum, endnum):\n        divisible = []\n        for i in range(startnum, endnum+1):\n            if is_divisible(i):\n                divisible.append(i)\n        return divisible\n    return divisible_by_digits_list(startnum, endnum)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum + 1):\n        if num % 1 == 0:\n            num = str(num)\n            if num.count(num) == len(num):\n                print(num)\n    return True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    # get all the digits\n    all_digits = list(range(startnum, endnum + 1))\n    \n    # create a list of functions\n    all_functions = []\n    for i in range(startnum, endnum + 1):\n        all_functions.append(lambda x: x % i == 0)\n    \n    # apply each function to the list\n    res = map(all_functions, all_digits)\n    \n    # convert the result to a set and then convert it to a list\n    res = list(set(res))\n    \n    #print(res)\n    return res\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(x % int(num) == 0 for num in str(x)), range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        if all(i % int(j) == 0 for j in str(i)):\n            print(i)\n    \ndef greatest_factor(n):\n    '''\n    Write a function that takes a number as a parameter and returns the greatest factor of n. \n    If the number is prime then it returns itself.\n    '''\n    for i in range(1,n+1):\n        if n%i==0:\n            print(i)\n        else:\n            continue\n    \ndef nearest_square(n):\n    '''\n    Write a function that takes a positive integer as a parameter and returns the square of the nearest positive integer that is lower than the given number. \n    If no such square exists, it returns the given number itself.\n    '''\n    ans = 1\n    while ans*ans<n:\n        ans+=1\n    return ans*ans\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: x % 2 == 0, range(startnum, endnum+1))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for x in range(startnum, endnum+1):\n        for i in range(len(str(x))):\n            if not x%int(str(x)[i])==0:\n                break\n        else:\n            print(x)\n    print(x)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda numbers: [num for num in numbers if int(re.sub(r'\\D', '', str(num))) % int(re.sub(r'\\D', '', str(num))) == 0 ]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #for i in range(startnum, endnum + 1):\n    #    if i % 2 == 0:\n    #        print(i)\n    return(list(filter(lambda x: (x%startnum==0) and (x%endnum==0), range(startnum, endnum + 1))))\n    \ndivisible_by_digits(2, 10)\ndivisible_by_digits(1, 20)\ndivisible_by_digits(15,20)\ndivisible_by_digits(1,10)\ndivisible_by_digits(9,10)\ndivisible_by_digits(2,10)\ndivisible_by_digits(1,5)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r > 0 and a > 0 and a < 360:\n        return r * r * math.sin(math.radians(a))\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = (r**2)*math.sin(math.radians(a))\n    return sector_area\n    \ndef rotate(angle,axis):\n    '''\n    Write a function to rotate points along a given axis. The function takes the angle and axis of rotation as inputs. It should return a list of all the new points after rotation.\n    '''\n    new_x = None\n    new_y = None\n    new_z = None\n    \n    if(axis == 'x'):\n        new_x = math.cos(math.radians(angle))*new_x + math.sin(math.radians(angle))*new_y\n        new_y = -1*math.sin(math.radians(angle))*new_x + math.cos(math.radians(angle))*new_y\n        new_z = new_z\n        return (new_x,new_y,new_z)\n    \n    elif(axis == 'y'):\n        new_y = math.cos(math.radians(angle))*new_y + math.sin(math.radians(angle))*new_x\n        new_x = -1*math.sin(math.radians(angle))*new_y + math.cos(math.radians(angle))*new_x\n        new_z = new_z\n        return (new_x,new_y,new_z)\n    \n    elif(axis == 'z'):\n        new_z = math.cos(math.radians(angle))*new_z + math.sin(math.radians(angle))*new_y\n        new_y = -1*math.sin(math.radians(angle))*new_z + math.cos(math.radians(angle))*new_y\n        new_x = new_x\n        return (new_x,new_y,new_z)\n    \n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or r<0:\n        return None\n    elif a==0:\n        return math.pi*r**2\n    else:\n        return math.pi*r**2*(a/180*math.sin(a/180*math.pi))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return math.pi*r**2*math.sin(math.radians(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi)*(r**2)*(math.sin((math.radians(a))) )\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    try:\n        a = math.radians(a)\n    except ValueError:\n        print(\"Angle must be in radians.\")\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #todo: fix angle > 360\n    if a > math.pi*2:\n        return None\n    if a > math.pi:\n        a = math.pi - a\n    return (math.pi*2*r*r)/(a*a)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * (a / 360)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0 or a > 360:\n        return None\n    if (r > 0 and r!= float(\"inf\")) or (a > 0 and a!= float(\"inf\")):\n        a_mod = a % 360\n        if a_mod > 90:\n            return None\n        else:\n            if r!= float(\"inf\"):\n                area = math.pi * r ** 2 * 0.5\n            else:\n                area = math.pi * a_mod * math.sin(math.radians(a_mod))\n            return area\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi*r*r) * (a/360)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp_arr = [[[0 for i in range(o+1)] for i in range(n+1)] for i in range(m+1)] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, o+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    dp_arr[i][j][k] = dp_arr[i-1][j-1][k-1] + 1\n                else: \n                    dp_arr[i][j][k] = max(dp_arr[i-1][j][k], dp_arr[i][j-1][k], dp_arr[i][j][k-1]) \n    return dp_arr\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    x = len(X)\n    y = len(Y)\n    z = len(Z)\n    c = [[None]*(y+1) for i in range(x+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0 for i in range(o)] for j in range(n)] for k in range(m)]\n    for i in range(m): \n        for j in range(n): \n            for k in range(o): \n                if (i == 0 or j == 0 or k == 0): \n                    dp[i][j][k] = 0\n                elif (X[i] == Y[j] and X[i] == Z[k]): \n                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1] \n                else: \n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m-1][n-1][o-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    len_x = len(X)\n    len_y = len(Y)\n    len_z = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    len_X, len_Y, len_Z = len(X), len(Y), len(Z)\n    L = [[[0 for j in range(len_Z+1)] for i in range(len_Y+1)] for k in range(len_X+1)] \n    for i in range(1, len_X+1): \n        for j in range(1, len_Y+1): \n            for k in range(1, len_Z+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i][j-1][k], L[i][j][k-1], L[i-1][j][k]) \n    return L[len_X][len_Y][len_Z] \n    \n    "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # if (len(X) == 0 or len(Y) == 0 or len(Z) == 0):\n    #     return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m, n = len(X), len(Y)\n    lcs = [[[0] * (n + 1) for _ in range(m + 1)] for _ in range(n + 1)] \n    \n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                lcs[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    \n    return lcs[n][m]\n    \n    \n    '''\n    Time complexity : O(m * n) \n    Space complexity : O(m * n) \n    '''\n    \ndef lcs_of_two(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    \n    m, n = len(X), len(Y)\n    lcs = [[0] * (n + 1) for _ in range(m + 1)] \n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    \n    return lcs[m][n]\n    \n    \n    '''\n    Time complexity : O(m * n) \n    Space complexity : O(m + n)\n    '''\n    \ndef lcs_of_one(X): \n    '''\n    Write a function to find the longest common subsequence for the given one string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-one-string/\n    '''\n    \n    m = len(X)\n    lcs = [[0] * (m + 1) for _ in range(m + 1)] \n    \n    for i in range(1, m + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == X[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    \n    return lcs[m][m]\n    \n    \n    '''\n    Time complexity : O(m * n) \n    Space complexity : O(m + n)\n    '''\n    \ndef lcs_of_string(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    \n    m, n = len(X), len(Y)\n    lcs = [[0] * (n + 1) for _ in range(m + 1)] \n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    \n    return lcs[m][n]\n    \n    \n    '''\n    Time complexity : O(m * n) \n    Space complexity : O(m + n)\n    '''\n    \n    \ndef lcs_of_string_substring(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    \n    m, n = len(X), len(Y)\n    lcs = [[0] * (n + 1) for _ in range(m + 1)] \n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    \n    return lcs[m][n]\n    \n    \n    '''\n    Time complexity : O(m * n) \n    Space complexity : O(m + n)\n    '''\n    \n    \ndef lcs_of_string_substring_with_memoization(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    \n    m, n = len(X), len(Y)\n    lcs = [[0] * (n + 1) for _ in range(m + 1)] \n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    \n    memo = {}\n    \n    def lcs_of_string_substring(X, Y, i, j):\n        if (i, j) in memo:\n            return memo[(i, j)]\n        \n        if X[i - 1] == Y[j - 1]:\n            memo[(i, j)] = lcs_of_string_substring(X, Y, i - 1, j - 1) + 1\n        else:\n            memo[(i, j)] = max(lcs_of_string_substring(X, Y, i - 1, j), lcs_of_string_substring(X, Y, i, j - 1))\n        \n        return memo[(i, j)]\n    \n    return lcs_of_string_substring(X, Y, m, n)\n    \n    \n    '''\n    Time complexity : O(m * n) \n    Space complexity : O(m + n)\n    '''\n    \n    \ndef lcs_of_string_substring_with_concatenation(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    \n    m, n = len(X), len(Y)\n    lcs = [[0] * (n + 1) for _ in range(m + 1)] \n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    \n    return lcs[m][n]\n    \n    \n    '''\n    Time complexity : O(m * n) \n    Space complexity : O(m + n)\n    '''\n    \n    \ndef lcs_of_string_substrin"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    a, b, c = X, Y, Z\n    M = [[[0 for i in range(len(c) + 1)] for j in range(len(b) + 1)] for k in range(len(a) + 1)]\n    \n    for i in range(1, len(a) + 1):\n        for j in range(1, len(b) + 1):\n            for k in range(1, len(c) + 1):\n                if a[i-1] == b[j-1] == c[k-1]:\n                    M[i][j][k] = M[i-1][j-1][k-1] + 1\n                else:\n                    M[i][j][k] = max(M[i-1][j][k], M[i][j-1][k], M[i][j][k-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not len(X) or not len(Y) or not len(Z):\n        return 0\n    if X == Z and Y == Z:\n        return len(X)\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n    dp = [[0]*(len(Y)+1) for _ in range(len(X)+1)]\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # spliting the string into list of words\n    words = str1.split()\n    # iterating through the words\n    for i in range(len(words)):\n        # if the word is a capital word\n        if words[i][0].isupper():\n            # insert space in between the words\n            words[i] = words[i]+\" \"\n    return \"\".join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    print(re.sub(r'\\b[A-Z]\\b','\\g<0>', str1))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if not str1:\n        return str1\n    return re.sub(r\"([a-zA-Z0-9])\\1{3,}\", r\"\\1 \", str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    for i in range(0,len(words)):\n        words[i] = words[i].capitalize()\n    return \" \".join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    list1 = str1.split()\n    newstr = \"\"\n    for i in range(len(list1)):\n        if list1[i][0].isupper():\n            if i == 0:\n                newstr += list1[i] +''\n            else:\n                newstr += list1[i][0].lower() + list1[i][1:] +''\n        else:\n            newstr += list1[i] +''\n    return newstr\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #print(str1)\n    if str1 == \"\":\n        return str1\n    str1 = str1.split()\n    #print(str1)\n    for i in range(len(str1)):\n        #print(str1[i][0].isupper())\n        #print(str1[i][0].isalpha())\n        if str1[i][0].isupper() and str1[i][0] == str1[i][0].upper():\n            #print(str1[i])\n            str1[i] = str1[i] + \" \"\n        else:\n            str1[i] = str1[i] + \" \"\n    str1 =''.join(str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    cap_words = re.sub(r\"([a-zA-Z])([\\s]+)([A-Z])\", r\"\\g<1> \\g<3>\", str1)\n    return cap_words\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #findall and group are used to capture words with capital letters\n    words = re.findall('[A-Z][a-z]+',str1)\n    #capitalize the words in list and join to make a single string\n    return''.join(word.title() for word in words)\n    \nprint(capital_words_spaces('hello   world'))\nprint(capital_words_spaces('hello world'))\nprint(capital_words_spaces('hello  world'))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z][a-z]+)|([a-z][A-Z]+)|([A-Z]+[a-z]+)',' \\g<1> ',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    words=str1.split(\" \")\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i]=\" \"+words[i]\n    return \" \".join(words)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        nums.append(float(num))\n    nums = sorted(nums)\n    return [str(num) for num in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for num in nums_str:\n        nums_list.append(int(num))\n    nums_list.sort()\n    nums_list = ''.join([str(x) for x in nums_list])\n    print(nums_list)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = nums_str.split()\n    sorted_nums = sorted(nums, key=lambda x: float(x))\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = nums_str.split(\" \")\n    nums_list.sort(key=lambda x:int(x))\n    return \" \".join(nums_list)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # if \"\".join(nums_str)==\"\":\n    #     return nums_str\n    return sorted(nums_str, key=float)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split()\n    sorted_nums = sorted(nums_str, key=sort_string)\n    return''.join(sorted_nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # 1st Approach - Using sort\n    nums = [x for x in nums_str if x.isnumeric()]\n    nums.sort(key=lambda x: x)\n    print('\\nSorted list of strings of numbers using sort\\n',nums)\n    # 2nd Approach - Using sorted\n    # nums = sorted(nums_str, key=str.isdigit)\n    # print('\\nSorted list of strings of numbers using sorted\\n',nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        for j in range(len(nums_str)-1):\n            if nums_str[j] > nums_str[j+1]:\n                nums_str[j], nums_str[j+1] = nums_str[j+1], nums_str[j]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if test_tup[0] == test_list[i][0]:\n            test_list[i][1] += test_tup[1]\n            return\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #print(test_list)\n    test_list.append(test_tup)\n    return(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    \ndef remove_tuple(test_list, test_tup):\n    '''\n    Write a function to remove the given tuple from the given list.\n    '''\n    test_list.remove(test_tup)\n    \ndef remove_last_tuple(test_list):\n    '''\n    Write a function to remove the last item in the given list.\n    '''\n    test_list.pop()\n    \ndef last_tuple(test_list):\n    '''\n    Write a function to return the last item in the given list.\n    '''\n    return test_list[-1]\n    \ndef remove_middle_tuple(test_list):\n    '''\n    Write a function to remove the middle item in the given list.\n    '''\n    test_list.pop(len(test_list)//2)\n    \ndef add_middle_tuple(test_list):\n    '''\n    Write a function to add the given tuple to the middle item in the given list.\n    '''\n    test_list.insert(len(test_list)//2, test_tup)\n    \ndef swap_tuple(test_list, i, j):\n    '''\n    Write a function to swap the elements of the tuple at the given indices.\n    '''\n    test_list[i], test_list[j] = test_list[j], test_list[i]\n    \ndef create_list(test_list):\n    '''\n    Write a function to create a new list of given size and fill it with given tuple.\n    '''\n    test_list = test_list[:size]\n    return test_list\n    \ndef create_list_with_fill(test_list, test_tup, size):\n    '''\n    Write a function to create a new list of given size and fill it with given tuple.\n    '''\n    test_list = test_list[:size]\n    for i in range(len(test_list), size):\n        test_list.append(test_tup)\n    return test_list\n    \ndef sort_list(test_list):\n    '''\n    Write a function to sort the list in ascending order.\n    '''\n    test_list.sort()\n    \ndef sort_list_with_key(test_list):\n    '''\n    Write a function to sort the list in ascending order using the given key.\n    '''\n    test_list.sort(key=lambda x: x[2])\n    \ndef sort_list_with_key_reverse(test_list):\n    '''\n    Write a function to sort the list in descending order using the given key.\n    '''\n    test_list.sort(key=lambda x: x[2], reverse=True)\n    \ndef swap_n_tuple(test_list, i, j):\n    '''\n    Write a function to swap the i-th and j-th element of the list.\n    '''\n    test_list[i], test_list[j] = test_list[j], test_list[i]\n    \ndef sort_list_by_length(test_list):\n    '''\n    Write a function to sort the list in ascending order by length.\n    '''\n    test_list.sort(key=len)\n    \ndef sort_list_by_length_reverse(test_list):\n    '''\n    Write a function to sort the list in ascending order by length in reverse order.\n    '''\n    test_list.sort(key=len, reverse=True)\n    \ndef sort_list_by_second_element(test_list):\n    '''\n    Write a function to sort the list in ascending order by the second element in the list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    \ndef sort_list_by_second_element_reverse(test_list):\n    '''\n    Write a function to sort the list in ascending order by the second element in the list in reverse order.\n    '''\n    test_list.sort(key=lambda x: x[1], reverse=True)\n    \ndef sort_list_by_third_element(test_list):\n    '''\n    Write a function to sort the list in ascending order by the third element in the list.\n    '''\n    test_list.sort(key=lambda x: x[2])\n    \ndef sort_list_by_third_element_reverse(test_list):\n    '''\n    Write a function to sort the list in ascending order by the third element in the list in reverse order.\n    '''\n    test_list.sort(key=lambda x: x[2], reverse=True)\n    \ndef sort_list_by_fourth_element(test_list):\n    '''\n    Write a function to sort the list in ascending order by the fourth element in the list.\n    '''\n    test_list.sort(key=lambda x: x[3])\n    \ndef sort_list_by_fourth_element_reverse(test_list):\n    '''\n    Write a function to sort the list in ascending order by the fourth element in the list in reverse order.\n    '''\n    test_list.sort(key=lambda x: x[3], reverse=True)\n    \ndef sort_list_by_fifth_element(test_list):\n    '''\n    Write a function to sort the list in ascending order by the fifth element in the list.\n    '''\n    test_list.sort(key=lambda x: x[4])\n    \ndef sort_list_by_fifth_element_reverse(test_list):\n    '''\n    Write a function to sort the list in ascending order by the fifth element in the list in reverse order.\n    '''\n    test_list.sort(key=lambda x: x[4], reverse=True)\n    \ndef sort_list_by_sixth_element(test_list):\n    '''\n    Write a function to sort the list in ascending order by the sixth element in the list.\n    '''\n    test_list.sort(key=lambda x: x[5])\n    \ndef sort_list_by_sixth_element_reverse(test_list):\n    '''\n    Write a function to sort the list in ascending order by the sixth element in the list in reverse order.\n    '''\n    test_list.sort(key=lambda x: x[5], reverse=True)\n    \ndef sort_list_by_seventh_element(test_list):\n    '''\n    Write a function to sort the list in ascending order by the seventh element in the list.\n    '''\n    test_list.sort(key=lambda x: x[6])\n    \ndef sort_list_by_seventh_element_reverse(test_list):\n    '''\n    Write a function to sort the list in ascending order by the seventh element in the list in reverse order.\n    '''\n    test_list.sort(key=lambda x: x[6], reverse=True)\n    \ndef sort_list_by_eighth_element(test_list):\n    '''\n    Write a function to sort the list in ascending order by the eighth element in the list.\n    '''\n    test_list.sort(key=lambda x: x[7])\n    \ndef sort_list_by_eighth_element_reverse(test_list):\n    '''\n    Write a function to sort the list in ascending order by the eighth element in the list in reverse order.\n    '''\n    test_list.sort(key=lambda x: x[7], reverse=True)\n    \ndef sort_list_by_ninth_element(test_list):\n    '''\n    Write a function to sort the list in ascending order by the ninth element in the list.\n    '''\n    test_list.sort(key=lambda x: x[8])\n    \ndef sort_list_by_ninth_element_reverse(test_list):\n    '''\n    Write a function to sort the list in ascending order by the ninth element in the list in reverse order.\n    '''\n    test_list.sort(key=lambda x: x[8], reverse=True)\n    \ndef sort_list_by_tenth_element(test_list):\n    '''\n    Write a function to sort the list in ascending order by the tenth element in the list.\n    '''\n    test_list.sort(key=lambda x: x[9])\n    \ndef sort"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if (i >= len(arr)):\n        return True\n    if (arr[i] < arr[i+1]):\n        return False\n    return check_min_heap_helper(arr, i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0:\n        if arr[i] > arr[2 * i]:\n            return check_min_heap_helper(arr, 2 * i)\n        elif arr[i] < arr[2 * i + 1]:\n            return check_min_heap_helper(arr, 2 * i + 1)\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if n/2 - 1, n/2\n    min_n = int(math.floor(len(arr)/2)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == 1 or i == 2:\n        return False\n    if arr[i] < arr[i - 1] or arr[i] < arr[i - 2]:\n        return False\n    return check_min_heap_helper(arr, i - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr)-1:\n        return True\n    if arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return True\n    if arr[i] > arr[2 * i + 1] and arr[i] > arr[2 * i + 2]:\n        return False\n    return check_min_heap_helper(arr, i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i==0:\n        return True\n    parent = (i-1)//2\n    if arr[parent] < arr[i]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return True\n    if arr[0] > arr[len(arr) - 1]:\n        return False\n    if i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            return False\n    if i!= 0:\n        if arr[i] > arr[i - 1]:\n            return False\n    return check_min_heap_helper(arr[0:len(arr) - 1], len(arr) - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if all elements are less than or equal to its parent, it is a min heap.\n    if i >= 0:\n        if arr[i] <= arr[int((i-1)/2)]:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # length of array\n    n = len(arr)\n    if i>=0 and i<n:\n        # parent element \n        if i==0:\n            return True\n        else:\n            parent_index = math.floor(i/2)\n            if arr[parent_index] >= arr[i]:\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if (i*2+1) < len(arr):\n        if arr[i] > arr[(i*2+1)]:\n            return False\n        else:\n            return check_min_heap_helper(arr, (i*2+1))\n    else:\n        return False\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    assert (n > 0)\n    if (n == 1): \n        return 1\n    else:\n        return jacobsthal_num(n - 1) * (3 * jacobsthal_num(n - 1) + 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    assert n > 0\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        count += 1\n    return a\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # 1\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # step 1 - initialize two variables\n    a = 0\n    b = 1\n    # step 2 - initialize the jacobsthal numbers array\n    jacobsthal_numbers = []\n    jacobsthal_numbers.append(a)\n    jacobsthal_numbers.append(b)\n    # step 3 - loop over n\n    while(n > len(jacobsthal_numbers)):\n        # step 4 - compute new number\n        a, b = b, a + b\n        # step 5 - add new number to array\n        jacobsthal_numbers.append(b)\n        # step 6 - update n\n        n = n - 1\n    return jacobsthal_numbers[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n    c = 1\n    for i in range(n):\n        a, b, c = b, a + b, c + a\n    return c\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    i = 0\n    while True:\n        i += 1\n        if i == n:\n            return i\n            break\n        elif (n - i) % 2 == 0:\n            n = (n - i) // 2\n            continue\n        elif (n - i) % 2!= 0:\n            n = (n - i) // 2 + 1\n            continue\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    from math import sqrt\n    n_1 = sqrt(n)\n    lucas_n = (1 + sqrt(5)) / 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return lucas_n\n    i = 3\n    while i < n:\n        i += 1\n        if i % 2 == 1:\n            lucas_n = (lucas_n + 1 + sqrt(5)) / 2\n        else:\n            lucas_n = (lucas_n - 1 - sqrt(5)) / 2\n    return lucas_n\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n == 6:\n        return 8\n    if n == 7:\n        return 13\n    if n == 8:\n        return 21\n    if n == 9:\n        return 34\n    if n == 10:\n        return 55\n    if n == 11:\n        return 89\n    if n == 12:\n        return 144\n    if n == 13:\n        return 233\n    if n == 14:\n        return 377\n    if n == 15:\n        return 610\n    if n == 16:\n        return 987\n    if n == 17:\n        return 1723\n    if n == 18:\n        return 2857\n    if n == 19:\n        return 4181\n    if n == 20:\n        return 6561\n    if n == 21:\n        return 10946\n    if n == 22:\n        return 24789\n    if n == 23:\n        return 45891\n    if n == 24:\n        return 72936\n    if n == 25:\n        return 111527\n    if n == 26:\n        return 25461\n    if n == 27:\n        return 50907\n    if n == 28:\n        return 87162\n    if n == 29:\n        return 137464\n    if n == 30:\n        return 29759\n    if n == 31:\n        return 51444\n    if n == 32:\n        return 87040\n    if n == 33:\n        return 144784\n    if n == 34:\n        return 339024\n    if n == 35:\n        return 610848\n    if n == 36:\n        return 1134912\n    if n == 37:\n        return 2693456\n    if n == 38:\n        return 5164976\n    if n == 39:\n        return 8947200\n    if n == 40:\n        return 14873184\n    if n == 41:\n        return 36853088\n    if n == 42:\n        return 65740608\n    if n == 43:\n        return 107282672\n    if n == 44:\n        return 271365488\n    if n == 45:\n        return 545985680\n    if n == 46:\n        return 898895808\n    if n == 47:\n        return 1538945152\n    if n == 48:\n        return 347740896\n    if n == 49:\n        return 655118080\n    if n == 50:\n        return 1149897072\n    if n == 51:\n        return 2676225248\n    if n == 52:\n        return 5444555296\n    if n == 53:\n        return 8914452672\n    if n == 54:\n        return 14579912000\n    if n == 55:\n        return 32714761632\n    if n == 56:\n        return 5573700800\n    if n == 57:\n        return 9012316080\n    if n == 58:\n        return 1766500544\n    if n == 59:\n        return 34950051232\n    if n == 60:\n        return 60765449664\n    if n == 61:\n        return 11505289872\n    if n == 62:\n        return 2714719200\n    if n == 63:\n        return 54428347296\n    if n == 64:\n        return 8917480576\n    if n == 65:\n        return 14665212288\n    if n == 66:\n        return 32943501184\n    if n == 67:\n        return 55426165184\n    if n == 68:\n        return 90123254432\n    if n == 69:\n        return 17676374400\n    if n == 70:\n        return 35034281632\n    if n == 71:\n        return 65451880416\n    if n == 72:\n        return 115257516832\n    if n == 73:\n        return 26895752032\n    if n == 74:\n        return 54444238432\n    if n == 75:\n        return 8918504448\n    if n == 76:\n        return 14760664096\n    if n == 77:\n        return 33031426752\n    if n == 78:\n        return 5542354304\n    if n == 79:\n        return 90123176008\n    if n == 80:\n        return 17691430752\n    if n == 81:\n        return 33903935264\n    if n == 82:\n        return 66027631232\n    if n == 83:\n        return 11524904080\n    if n == 84:\n        return 26916413024\n    if n == 85:\n        return 54438528976\n    if n == 86:\n        return 8918705824\n    if n == 87:\n        return 14745457600\n    if n == 88:\n        return 33090227680\n    if n == 89:\n        return 55410686544\n    if n == 90:\n        return 90123164832\n    if n == 91:\n        return 1769443392\n    if n == 92:\n        return 33904872800\n    if n == 93:\n        return 66028176704\n    if n == 94:\n        return 11525672688\n    if n == 95:\n        return 26951819456\n    if n == 96:\n        return 54440738464\n    if n == 97:\n        return 8919382672\n    if n == 98:\n        return 14746753600\n    if n == 99:\n        return 32882800096\n    if n == 100:\n        return 55437392032\n    if n == 101:\n        return 90123094496\n    if n == 102:\n        return 17696930848\n    if n == 103:\n        return 33904840800\n    if n == 104:\n        return 66033159808\n    if n == 105:\n        return 115252528864\n    if n == 106:\n        return 26956388848\n    if n == 107:\n        return 54445771616\n    if n == 108:\n        return 8918432448\n    if n == 109:\n        return 147506808000\n    if n == 110:\n        return 33034023776\n    if n == 111:\n        return 55416094432\n    if n == 112:\n        return 9012208720\n    if n == 113:\n        return 17698131408\n    if n == 114:\n        return 35038194432\n    if n == 115:\n        return 65452167968\n    if n == 116:\n        return 11524263616\n    if n == 117:\n        return 26895679824\n    if n == 118:\n        return 54444274808\n    if n == 119:\n        return 8918652816\n    if n == 120:\n        return 14748108800\n    if n == 121:\n        return 33036477152\n    if n == 122:\n        return 5542093088\n    if n == 123:\n        return 9012276080\n    if n == 124:\n        return 17695105472\n    if n == 125:\n        return 3390459360\n    if n == 126:\n        return 66040243552\n    if n == 127:\n        return 115253936032\n    if n == 128:\n        return 26957338432\n    if n == 129:\n        return 54446240016\n    if n == 130:\n        return 8918632720\n    if n == 131:\n        return 14754445200\n    if n == 132:\n        return 3309592688\n    if n == 133:\n        return 55415761616\n    if n == 134:\n        return 90122974496\n    if n == 135:\n        return 17696957344\n    if n == 136:\n        return 33904863808\n    if n == 137:\n        return 66033492672\n    if n ="
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    for j in range(len(test_list)):\n        k_min = K + 1\n        for i in range(j, len(test_list)):\n            if k_min > len(test_list[i]):\n                k_min = len(test_list[i])\n                k_min_tuple = test_list[i]\n        if k_min == K:\n            return k_min_tuple\n        if k_min < K:\n            k_min_tuple = test_list[j]\n            k_min -= 1\n        if k_min == K:\n            return k_min_tuple\n    return None\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    if len(test_list) < K:\n        return None\n    if K == 1:\n        return test_list[0]\n    k_min = test_list[0]\n    for i in range(1, K):\n        if test_list[i] < k_min:\n            k_min = test_list[i]\n    return k_min\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a empty list\n    output_list = []\n    # Traverse through the given list\n    for element in test_list:\n        # If element is in output_list, then ignore\n        if element in output_list:\n            continue\n        # Otherwise if element is smaller than K\n        elif len(output_list) < K:\n            # Add element to output_list\n            output_list.append(element)\n        # If element is smaller than K\n        else:\n            # Get the smallest element in output_list\n            min_element = min(output_list)\n            # Pop the smallest element\n            output_list.remove(min_element)\n            # Add element to output_list\n            output_list.append(element)\n    # Return the output list\n    return output_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Start with the smallest element in the array and move the index forward\n    min_elem = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i] < min_elem:\n            min_elem = test_list[i]\n            min_index = i\n    for i in range(min_index, len(test_list)):\n        if test_list[i] < min_elem:\n            min_elem = test_list[i]\n            min_index = i\n    for i in range(min_index, len(test_list)):\n        if test_list[i] < min_elem:\n            min_elem = test_list[i]\n            min_index = i\n    return test_list[:min_index] + test_list[min_index + 1:]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # if not test_list:\n    #     raise ValueError('test_list is empty')\n    \n    # new_list = []\n    # for i in test_list:\n    #     if i not in new_list:\n    #         new_list.append(i)\n    # new_list.sort(key=lambda x: x[0])\n    \n    # for i in range(len(new_list)):\n    #     if i > K:\n    #         break\n    #     else:\n    #         yield new_list[i]\n    \n    '''\n    Read in key-value pairs from list:\n    \n    if key in list\n        return key-value pairs\n    else\n        find minimum k elements in list\n    \n    '''\n    \n    if not test_list:\n        raise ValueError('test_list is empty')\n    \n    # new_list = []\n    # for i in test_list:\n    #     if i not in new_list:\n    #         new_list.append(i)\n    # new_list.sort(key=lambda x: x[0])\n    \n    # for i in range(len(new_list)):\n    #     if i > K:\n    #         break\n    #     else:\n    #         yield new_list[i]\n    \n    #     for i in range(len(new_list) - 1):\n    #         if new_list[i][0] > new_list[i + 1][0]:\n    #             break\n    #     yield tuple(new_list[i])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Kth smallest element is always the smallest element of k smallest elements.\n    # Time Complexity: O(nlogK)\n    k_smallest = sorted(test_list)[:K]\n    return k_smallest\n    "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return []\n    if len(test_list) == 1:\n        return test_list[0]\n    min_element = test_list[0]\n    for i in range(1, len(test_list)):\n        if min_element[1] > test_list[i][1]:\n            min_element = test_list[i]\n    return min_element\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[0:K]\n    # END\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    count = 0\n    s = []\n    for i in range(len(test_list)):\n        if count < K:\n            s.append(test_list[i])\n            count += 1\n    \n    return s\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result = []\n    for i in test_list:\n        if len(result) < K:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Create a dictionary:\n    d = {}\n    for i in range(len(l1)):\n        d[i] = l1[i]\n    for i in range(len(l2)):\n        if d.get(i)!= None:\n            d[i] = d[i] + l2[i]\n    for i in range(len(l3)):\n        if d.get(i)!= None:\n            d[i] = d[i] + l3[i]\n    index_list = []\n    for i in range(len(d)):\n        if d[i] > 1:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    index = 0\n    final = []\n    while index < len(l1) and index < len(l2) and index < len(l3):\n        if l1[index] == l2[index] == l3[index]:\n            final.append(l1[index])\n        index = index + 1\n    return final\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            list1.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3:\n            list2.append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2:\n            list3.append(l3[i])\n    print('Common elements in list1 and list2 are: ',list1)\n    print('Common elements in list2 and list3 are: ',list2)\n    print('Common elements in list3 and list1 are: ',list3)\n    common_list = []\n    for i in list1:\n        if i in list2 and i in list3:\n            common_list.append(i)\n    print('Common elements between the three lists are: ',common_list)\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_l1 = set()\n    index_l2 = set()\n    index_l3 = set()\n    result_list = []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list_1 = []\n    index_list_2 = []\n    index_list_3 = []\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list_1.append(i)\n    for j in range(len(l2)):\n        if l2[j] in l1 and l2[j] in l3:\n            index_list_2.append(j)\n    for k in range(len(l3)):\n        if l3[k] in l1 and l3[k] in l2:\n            index_list_3.append(k)\n    for i in index_list_1:\n        if i in index_list_2 and i in index_list_3:\n            common.append(i)\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = list(set(l1))\n    l2 = list(set(l2))\n    l3 = list(set(l3))\n    return list(set(l1) & set(l2) & set(l3))\n    \n    \ndef extract_index_list_in_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list(l1, l2):\n    '''\n    We say that an element is common for list l1, l2 if it appears in the same index in l1 and l2. Write a function to find common elements from two lists. The function should return a list.\n    '''\n    l1 = list(set(l1))\n    l2 = list(set(l2))\n    return list(set(l1) & set(l2))\n    \n    \ndef get_index_list_by_element_list_in_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [list(set(i)) for i in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [list(set(i)) for i in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for j in l]\n    return [i for j in l for i in j]\n    \n    \ndef get_index_list_by_element_list_in_list_list_list_list(l):\n    '''\n    Given a list of lists, return a list which contains all indexes from all lists. The list should be in the same order as the original list.\n    '''\n    l = [[list(set(i)) for i in j] for "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n    return list(l1_set.intersection(l2_set, l3_set))\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    i = 0\n    output = []\n    while i < len(l1):\n        if l1[i] in l2 and l1[i] in l3:\n            output.append(l1[i])\n        i += 1\n    return output\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    i1 = i2 = i3 = 0\n    while(i1 < len(l1) and i2 < len(l2) and i3 < len(l3)):\n        if(l1[i1] == l2[i2] and l2[i2] == l3[i3] and l1[i1] == l3[i3]):\n            l.append(l1[i1])\n        i1 += 1\n        i2 += 1\n        i3 += 1\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    output_list = []\n    \n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j == k:\n                    output_list.append(i)\n    \n    return output_list\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #numbers.sort()\n    #numbers.sort(key=lambda x: x, reverse=True)\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = numbers.copy()\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #sort and get index of the smallest number\n    sorted_nums = sorted(numbers)\n    smallest_index = numbers.index(sorted_nums[0])\n    \n    #change the first value to second smallest number\n    second_smallest = sorted_nums[1]\n    numbers[smallest_index] = second_smallest\n    return numbers\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # If there are less than 2 numbers in the list, then return None.\n    if len(numbers) < 2:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    \n    if len(numbers) == 1:\n        return numbers[0]\n    \n    if len(numbers) == 2:\n        return sorted(numbers)[1]\n    \n    #insertion sort\n    for i in range(1, len(numbers)):\n        cur_min = numbers[i]\n        cur_min_index = i\n        \n        for j in range(i):\n            if numbers[j] < cur_min:\n                cur_min = numbers[j]\n                cur_min_index = j\n        \n        if i!= cur_min_index:\n            numbers[i], numbers[cur_min_index] = numbers[cur_min_index], numbers[i]\n    \n    #checking if a new smallest number is found\n    for i in range(len(numbers)):\n        if numbers[i] == numbers[1]:\n            return numbers[i+1]\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r'ab+', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    x = re.findall(r\"a+b\", text)\n    return x\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall('ab+', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match(r'a(?:b+)',text)\n    if result:\n        return result.group(0)\n    else:\n        return \"No match\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*'\n    result = re.match(pattern,text)\n    if result:\n        print(result.group())\n    else:\n        print(\"No match found\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_matches = re.match(r'a(b)?', text)\n    if text_matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower()\n    return re.match(r'^[ab]+$', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Regex to match 'a' followed by 'a'\n    regex = re.compile(r'a{1,}a')\n    #Checking if it matches\n    if regex.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'ab+',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a\\sb+')\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return False\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    test_list.sort(key=lambda x: len(x), reverse=True)\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i]!= test_list[j] and (test_list[i]+test_list[j]) in test_list:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i]==test_list[j][::-1]:\n                count+=1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] == test_list[j]:\n                continue\n            if test_list[i][::-1] == test_list[j]:\n                reverse_pairs += 1\n    return reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = set(test_list)\n    count = 0\n    for i in test_list:\n        rev = i[::-1]\n        if rev in test_list:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    num_pairs = 0\n    \n    # list that will contain the reverse strings\n    rev_list = []\n    for i in range(len(test_list)):\n        # reverse the string\n        rev_list.append(test_list[i][::-1])\n    \n    # iterate over the list to find the pairs\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if rev_list[i] == rev_list[j]:\n                num_pairs += 1\n    \n    return num_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    for i in range(len(test_list)):\n        if reverse_dict.get(test_list[i][::-1]):\n            reverse_dict[test_list[i][::-1]] += 1\n        else:\n            reverse_dict[test_list[i][::-1]] = 1\n    return reverse_dict\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = list(test_list)\n    return sum(1 for i,j in zip(test_list, test_list[::-1]) if i == j)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    new_list = []\n    for i in test_list:\n        temp = i[::-1]\n        if temp not in new_list:\n            new_list.append(temp)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return(dict([[list1.count(i) for i in set(list1)]][0]))\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        if list1[i] not in dict:\n            dict[list1[i]] = 1\n        else:\n            dict[list1[i]] += 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in list1:\n        if type(i)!= list:\n            continue\n        else:\n            tup = tuple(i)\n            if tup in counts:\n                counts[tup] += 1\n            else:\n                counts[tup] = 1\n    return counts\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    lst=[]\n    dct={}\n    for i in list1:\n        lst.append(tuple(i))\n    for i in lst:\n        if i in dct:\n            dct[i]+=1\n        else:\n            dct[i]=1\n    return dct\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {\n        # YOUR CODE HERE\n    }\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts_dict = {}\n    for sublist in list1:\n        for i in sublist:\n            counts_dict[tuple(i)] = sublist.count(i)\n    return counts_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n    # unique_sublists = {}\n    # if len(list1) == 0:\n    #     unique_sublists = {tuple(): 0}\n    # else:\n    #     for i in range(len(list1)-1):\n    #         for j in range(i+1,len(list1)):\n    #             sublist1 = list1[i:j+1]\n    #             unique_sublists[tuple(sublist1)] = 0\n    # return unique_sublists\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    for a in list1:\n        if a not in new_list:\n            new_list.append(a)\n    dic = {}\n    for a in new_list:\n        dic[a] = new_list.count(a)\n    return dic\nprint(unique_sublists([[1,2],[1,3],[2,3],[1,2],[3,4]]))\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Your code here\n    # Sample input\n    # ['1', '2', '3', '4']\n    # ['1', '2', '4', '5', '5', '5']\n    # ['1', '2', '3', '4']\n    \n    d = {}\n    #Solution 1\n    # for i in range(len(list1)):\n    #     # d[list1[i]] = 0\n    #     if list1[i] in d:\n    #         d[list1[i]] += 1\n    #     else:\n    #         d[list1[i]] = 1\n    # return d\n    \n    #Solution 2\n    \n    for item in list1:\n        d[tuple(item)] = list1.count(item)\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        t = (list1[i],)\n        if t not in count:\n            count[t] = 1\n        else:\n            count[t] = count[t] + 1\n    return count\n    "
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if not (num.count('.')>1 or num.count('e')>1) else False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') == 1:\n        if num[0] == '-':\n            n = num[1:]\n        else:\n            n = num\n        if ',' not in n and 'e' not in n:\n            n = n.replace(',','')\n        else:\n            n = n.replace('.','')\n            n = n.replace(',','')\n            n = n.replace('e','')\n        if n.isnumeric():\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if str.isdecimal(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    if re.search(r'^[-+]?\\d+(\\.\\d*)?$', num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    num = num.replace(\".\", \"\")\n    if len(num)!= len(num.split(\".\")[-1]):\n        return False\n    else:\n        for i in range(len(num)):\n            if num.count(num[i]) > 1:\n                return False\n            else:\n                pass\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    pattern = '^[+-]?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)([eE][+-]?\\d+)?$'\n    return bool(re.match(pattern, num))\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_str = num\n    try:\n        num = float(num_str)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if num.find(\".\") == -1:\n        return False\n    \n    num = num.split(\".\")\n    num = num[1].split(\"0\")\n    num = \"\".join(num)\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    seen = []\n    for i in arr:\n        if i in seen:\n            return False\n        else:\n            seen.append(i)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i=0\n    for j in arr:\n        if i<=len(arr)-1:\n            if arr[i]==arr[i+1]:\n                return False\n        i+=1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = []\n    for x in arr:\n        if x not in seen:\n            seen.append(x)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # 1st way:\n    # all_numbers = set(arr)\n    # return len(all_numbers) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if len(arr) > 1:\n            if arr.count(i) > 1:\n                return False\n            else:\n                return True\n        else:\n            return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    try:\n        set_of_numbers = set(arr)\n        if len(set_of_numbers)!= 1:\n            print(\"No, array contains duplicate numbers\")\n        else:\n            print(\"Yes, array contains only one distinct number\")\n    except TypeError:\n        print(\"No, array is empty\")\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # code here\n    \n    seen_set = set()\n    for item in arr:\n        if item in seen_set:\n            return False\n        else:\n            seen_set.add(item)\n    return True\n    "
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        else:\n            seen.add(num)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        dict = {}\n        for elem in arr:\n            if elem in dict:\n                return False\n            else:\n                dict[elem] = 1\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #bruteforce\n    #temp_arr = []\n    #for i in range(len(arr)):\n        #if arr.count(arr[i]) == 1:\n            #temp_arr.append(arr[i])\n    #if len(temp_arr) == 1:\n        #print(\"True\")\n    #else:\n        #print(\"False\")\n    #dict approach\n    #return len(set(arr))==1\n    #set approach\n    #return len(set(arr))==1\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%2 == 0:\n        return 30\n    else:\n        return 31\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n        \n    \ndef check_if_leap_year(year3):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year3%4 == 0:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # month_30 = \"February\"\n    # month_30 = \"February\"\n    month_30 = \"February\"\n    if month_30 == monthnum3:\n        print(\"The month number is 30 days\")\n    else:\n        print(\"The month number is not 30 days\")"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber = monthnum3\n    if monthnum3 == 1:\n        if monthnum3 == 1:\n            monthnumber = 31\n        elif monthnum3 == 2:\n            monthnumber = 28\n        elif monthnum3 == 3:\n            monthnumber = 31\n        elif monthnum3 == 4:\n            monthnumber = 30\n        elif monthnum3 == 5:\n            monthnumber = 31\n        elif monthnum3 == 6:\n            monthnumber = 30\n        elif monthnum3 == 7:\n            monthnumber = 31\n        elif monthnum3 == 8:\n            monthnumber = 31\n        elif monthnum3 == 9:\n            monthnumber = 30\n        elif monthnum3 == 10:\n            monthnumber = 31\n        elif monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 2:\n        if monthnum3 == 2:\n            monthnumber = 28\n        elif monthnum3 == 3:\n            monthnumber = 31\n        elif monthnum3 == 4:\n            monthnumber = 30\n        elif monthnum3 == 5:\n            monthnumber = 31\n        elif monthnum3 == 6:\n            monthnumber = 30\n        elif monthnum3 == 7:\n            monthnumber = 31\n        elif monthnum3 == 8:\n            monthnumber = 31\n        elif monthnum3 == 9:\n            monthnumber = 30\n        elif monthnum3 == 10:\n            monthnumber = 31\n        elif monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 3:\n        if monthnum3 == 3:\n            monthnumber = 31\n        elif monthnum3 == 4:\n            monthnumber = 30\n        elif monthnum3 == 5:\n            monthnumber = 31\n        elif monthnum3 == 6:\n            monthnumber = 30\n        elif monthnum3 == 7:\n            monthnumber = 31\n        elif monthnum3 == 8:\n            monthnumber = 31\n        elif monthnum3 == 9:\n            monthnumber = 30\n        elif monthnum3 == 10:\n            monthnumber = 31\n        elif monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 4:\n        if monthnum3 == 4:\n            monthnumber = 30\n        elif monthnum3 == 5:\n            monthnumber = 31\n        elif monthnum3 == 6:\n            monthnumber = 30\n        elif monthnum3 == 7:\n            monthnumber = 31\n        elif monthnum3 == 8:\n            monthnumber = 31\n        elif monthnum3 == 9:\n            monthnumber = 30\n        elif monthnum3 == 10:\n            monthnumber = 31\n        elif monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 5:\n        if monthnum3 == 5:\n            monthnumber = 31\n        elif monthnum3 == 6:\n            monthnumber = 30\n        elif monthnum3 == 7:\n            monthnumber = 31\n        elif monthnum3 == 8:\n            monthnumber = 30\n        elif monthnum3 == 9:\n            monthnumber = 31\n        elif monthnum3 == 10:\n            monthnumber = 31\n        elif monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 6:\n        if monthnum3 == 6:\n            monthnumber = 30\n        elif monthnum3 == 7:\n            monthnumber = 31\n        elif monthnum3 == 8:\n            monthnumber = 31\n        elif monthnum3 == 9:\n            monthnumber = 30\n        elif monthnum3 == 10:\n            monthnumber = 31\n        elif monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 7:\n        if monthnum3 == 7:\n            monthnumber = 31\n        elif monthnum3 == 8:\n            monthnumber = 30\n        elif monthnum3 == 9:\n            monthnumber = 31\n        elif monthnum3 == 10:\n            monthnumber = 30\n        elif monthnum3 == 11:\n            monthnumber = 31\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 8:\n        if monthnum3 == 8:\n            monthnumber = 31\n        elif monthnum3 == 9:\n            monthnumber = 30\n        elif monthnum3 == 10:\n            monthnumber = 31\n        elif monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 9:\n        if monthnum3 == 9:\n            monthnumber = 30\n        elif monthnum3 == 10:\n            monthnumber = 31\n        elif monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 10:\n        if monthnum3 == 10:\n            monthnumber = 31\n        elif monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 11:\n        if monthnum3 == 11:\n            monthnumber = 30\n        elif monthnum3 == 12:\n            monthnumber = 31\n    elif monthnum3 == 12:\n        if monthnum3 == 12:\n            monthnumber = 31\n    return monthnumber\ndef check_monthnumber_weekday(monthnum4):\n    '''\n    Write a function to check whether the given month number contains the number of days of the week.\n    '''\n    monthnumber = monthnum4\n    if monthnum4 == 1:\n        if monthnum4 == 1:\n            monthnumber = 31\n        elif monthnum4 == 2:\n            monthnumber = 28\n        elif monthnum4 == 3:\n            monthnumber = 31\n        elif monthnum4 == 4:\n            monthnumber = 30\n        elif monthnum4 == 5:\n            monthnumber = 31\n        elif monthnum4 == 6:\n            monthnumber = 30\n        elif monthnum4 == 7:\n            monthnumber = 31\n        elif monthnum4 == 8:\n            monthnumber = 31\n        elif monthnum4 == 9:\n            monthnumber = 30\n        elif monthnum4 == 10:\n            monthnumber = 31\n        elif monthnum4 == 11:\n            monthnumber = 30\n        elif monthnum4 == 12:\n            monthnumber = 31\n    elif monthnum4 == 2:\n        if monthnum4 == 2:\n            monthnumber = 28\n        elif monthnum4 == 3:\n            monthnumber = 31\n        elif monthnum4 == 4:\n            monthnumber = 30\n        elif monthnum4 == 5:\n            monthnumber = 31\n        elif monthnum4 == 6:\n            monthnumber = 30\n        elif monthnum4 == 7:\n            monthnumber = 31\n        elif monthnum4 == 8:\n            monthnumber = 31\n        elif monthnum4 == 9:\n            monthnumber = 30\n        elif monthnum4 == 10:\n            monthnumber = 31\n        elif monthnum4 == 11:\n            monthnumber = 30\n        elif monthnum4 == 12:\n            monthnumber = 31\n    elif monthnum4 == 3:\n        if monthnum4 == 3:\n            monthnumber = 31\n        elif monthnum4 == 4:\n            monthnumber = 30\n        elif monthnum4 == 5:\n            monthnumber = 31\n        elif monthnum4 == 6:\n            monthnumber = 30\n        elif monthnum4 == 7:\n            monthnumber = 31\n        elif monthnum4 == 8:\n            monthnumber = 31\n        elif monthnum4 == 9:\n            monthnumber = 30\n        elif monthnum4 == 10:\n            monthnumber = 31\n        elif monthnum4 == 11:\n            monthnumber = 30\n        elif monthnum4 == 12:\n            monthnumber = 31\n    elif monthnum4 == 4:\n        if monthnum4 == 4:\n            monthnumber = 30\n    "
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"31 days\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"30 days\")\n    else:\n        print(\"Invalid month number\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    print('Question: {}'.format(question))\n    print('Expected output: {}'.format(expected_output))\n    print('Actual output: {}'.format(check_monthnumber_number(monthnum3)))\n    print()\n    \n    return True if 30==check_monthnumber_number(monthnum3) else False\n    "
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    print(\"----------------------------------\")\n    print(\"Checking whether the given month number contains 30 days or not.\")\n    print(\"----------------------------------\")\n    if(monthnum3>0 and monthnum3<=12):\n        return print(\"Yes\")\n    else:\n        return print(\"No\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month30 = [4, 6, 9, 11]\n    month31 = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum3 in month31:\n        return True\n    elif monthnum3 in month30:\n        return False\n    else:\n        return False\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==1: return 0\n    min_diff = float('inf')\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            min_diff = min(min_diff, abs(arr[i]-arr[j]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 1000000\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[j]-arr[i] < min_diff:\n                min_diff = arr[j]-arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = float('inf')\n    for i in range(len(arr)-1):\n        diff = min(diff,arr[i+1]-arr[i])\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(abs(arr[i+1]-arr[i]), min_diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Initialize minimum and diff values\n    minDiff = float('inf')\n    diff = float('inf')\n    for i in range(n-1):\n        for j in range(i+1,n):\n            diff = abs(arr[i] - arr[j])\n            if diff < minDiff:\n                minDiff = diff\n    return minDiff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    m = float('inf')\n    for i in range(n-1):\n        m = min(m,arr[i+1] - arr[i])\n    return m\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1,n-1):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    n=len(arr)\n    if n<2:\n        return -1\n    return min(abs(arr[i]-arr[i-1]) for i in range(1,n))\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)-1):\n        if abs(arr[i+1]-arr[i]) < min_diff:\n            min_diff = abs(arr[i+1]-arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # 1: use two pointers and find the min difference from the array\n    if n==1:\n        return abs(arr[0]-arr[1])\n    # 2: use two pointers and find the min difference from the array\n    min_diff=float('inf')\n    left=0\n    right=n-1\n    while left<right:\n        temp_min_diff=abs(arr[left]-arr[right])\n        if temp_min_diff<min_diff:\n            min_diff=temp_min_diff\n        if arr[left]<arr[right]:\n            left+=1\n        else:\n            right-=1\n    return min_diff\n    # 3: use three pointers and find the min difference from the array\n    min_diff=float('inf')\n    i,j=0,n-1\n    while i<j:\n        temp_min_diff=abs(arr[i]-arr[j])\n        if temp_min_diff<min_diff:\n            min_diff=temp_min_diff\n        if arr[i]<arr[j]:\n            i+=1\n        else:\n            j-=1\n    return min_diff\n    # 4: use two pointers and find the min difference from the array\n    min_diff=float('inf')\n    for i in range(n-1):\n        # the max difference is between the previous element and the current element\n        max_diff=abs(arr[i+1]-arr[i])\n        min_diff=min(max_diff,min_diff)\n    return min_diff\n        # 5: use two pointers and find the min difference from the array\n    min_diff=float('inf')\n    for i in range(n-1):\n        # the max difference is between the previous element and the current element\n        max_diff=abs(arr[i+1]-arr[i])\n        min_diff=min(max_diff,min_diff)\n        max_diff=abs(arr[i]-arr[i+1])\n        min_diff=min(max_diff,min_diff)\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len([str.isdigit() for str in str])\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for x in str:\n        if x.isdigit():\n            n += 1\n    return n\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    print(\"Number of digits in given string is: {}\".format(count))\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12\")\nnumber_ctr(\"I am 5 years old, and my age in another language is 12.234\")\nnumber_ctr(\"I am 5 year"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    total_num = 0\n    for char in str:\n        if char.isdigit():\n            total_num += 1\n    return total_num\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if(len(str) == 0):\n        return 0\n    else:\n        count = 0\n        for i in range(0,len(str)):\n            if(str[i].isdigit() == True):\n                count = count + 1\n        return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for x in str:\n        if x.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0:\n        return 1\n    \n    if n==1:\n        return 2\n    \n    if n==2:\n        return 3\n    \n    if n==3:\n        return 4\n    \n    if n==4:\n        return 5\n    \n    if n==5:\n        return 6\n    \n    if n==6:\n        return 7\n    \n    if n==7:\n        return 8\n    \n    if n==8:\n        return 9\n    \n    if n==9:\n        return 10\n    \n    if n==10:\n        return 11\n    \n    if n==11:\n        return 12\n    \n    if n==12:\n        return 13\n    \n    if n==13:\n        return 14\n    \n    if n==14:\n        return 15\n    \n    if n==15:\n        return 16\n    \n    if n==16:\n        return 17\n    \n    if n==17:\n        return 18\n    \n    if n==18:\n        return 19\n    \n    if n==19:\n        return 20\n    \n    if n==20:\n        return 21\n    \n    if n==21:\n        return 22\n    \n    if n==22:\n        return 23\n    \n    if n==23:\n        return 24\n    \n    if n==24:\n        return 25\n    \n    if n==25:\n        return 26\n    \n    if n==26:\n        return 27\n    \n    if n==27:\n        return 28\n    \n    if n==28:\n        return 29\n    \n    if n==29:\n        return 30\n    \n    if n==30:\n        return 31\n    \n    if n==31:\n        return 32\n    \n    if n==32:\n        return 33\n    \n    if n==33:\n        return 34\n    \n    if n==34:\n        return 35\n    \n    if n==35:\n        return 36\n    \n    if n==36:\n        return 37\n    \n    if n==37:\n        return 38\n    \n    if n==38:\n        return 39\n    \n    if n==39:\n        return 40\n    \n    if n==40:\n        return 41\n    \n    if n==41:\n        return 42\n    \n    if n==42:\n        return 43\n    \n    if n==43:\n        return 44\n    \n    if n==44:\n        return 45\n    \n    if n==45:\n        return 46\n    \n    if n==46:\n        return 47\n    \n    if n==47:\n        return 48\n    \n    if n==48:\n        return 49\n    \n    if n==49:\n        return 50\n    \n    if n==50:\n        return 51\n    \n    if n==51:\n        return 52\n    \n    if n==52:\n        return 53\n    \n    if n==53:\n        return 54\n    \n    if n==54:\n        return 55\n    \n    if n==55:\n        return 56\n    \n    if n==56:\n        return 57\n    \n    if n==57:\n        return 58\n    \n    if n==58:\n        return 59\n    \n    if n==59:\n        return 60\n    \n    if n==60:\n        return 61\n    \n    if n==61:\n        return 62\n    \n    if n==62:\n        return 63\n    \n    if n==63:\n        return 64\n    \n    if n==64:\n        return 65\n    \n    if n==65:\n        return 66\n    \n    if n==66:\n        return 67\n    \n    if n==67:\n        return 68\n    \n    if n==68:\n        return 69\n    \n    if n==69:\n        return 70\n    \n    if n==70:\n        return 71\n    \n    if n==71:\n        return 72\n    \n    if n==72:\n        return 73\n    \n    if n==73:\n        return 74\n    \n    if n==74:\n        return 75\n    \n    if n==75:\n        return 76\n    \n    if n==76:\n        return 77\n    \n    if n==77:\n        return 78\n    \n    if n==78:\n        return 79\n    \n    if n==79:\n        return 80\n    \n    if n==80:\n        return 81\n    \n    if n==81:\n        return 82\n    \n    if n==82:\n        return 83\n    \n    if n==83:\n        return 84\n    \n    if n==84:\n        return 85\n    \n    if n==85:\n        return 86\n    \n    if n==86:\n        return 87\n    \n    if n==87:\n        return 88\n    \n    if n==88:\n        return 89\n    \n    if n==89:\n        return 90\n    \n    if n==90:\n        return 91\n    \n    if n==91:\n        return 92\n    \n    if n==92:\n        return 93\n    \n    if n==93:\n        return 94\n    \n    if n==94:\n        return 95\n    \n    if n==95:\n        return 96\n    \n    if n==96:\n        return 97\n    \n    if n==97:\n        return 98\n    \n    if n==98:\n        return 99\n    \n    if n==99:\n        return 100\n    \n    if n==100:\n        return 101\n    \n    if n==101:\n        return 102\n    \n    if n==102:\n        return 103\n    \n    if n==103:\n        return 104\n    \n    if n==104:\n        return 105\n    \n    if n==105:\n        return 106\n    \n    if n==106:\n        return 107\n    \n    if n==107:\n        return 108\n    \n    if n==108:\n        return 109\n    \n    if n==109:\n        return 110\n    \n    if n==110:\n        return 111\n    \n    if n==111:\n        return 112\n    \n    if n==112:\n        return 113\n    \n    if n==113:\n        return 114\n    \n    if n==114:\n        return 115\n    \n    if n==115:\n        return 116\n    \n    if n==116:\n        return 117\n    \n    if n==117:\n        return 118\n    \n    if n==118:\n        return 119\n    \n    if n==119:\n        return 120\n    \n    if n==120:\n        return 121\n    \n    if n==121:\n        return 122\n    \n    if n==122:\n        return 123\n    \n    if n==123:\n        return 124\n    \n    if n==124:\n        return 125\n    \n    if n==125:\n        return 126\n    \n    if n==126:\n        return 127\n    \n    if n==127:\n        return 128\n    \n    if n==128:\n        return 129\n    \n    if n==129:\n        return 130\n    \n    if n==130:\n        return 131\n    \n    if n==131:\n        return 132\n    \n    if n==132:\n        return 133\n    \n    if n==133:\n        return 134\n    \n    if n==134:\n        return 135\n    \n    if n==135:\n        return 136\n    \n    if n==136:\n        return 137\n    \n    if n==137:\n        return 138\n    \n    if n==138:\n        return 139\n    \n    if n==139:\n        return 140\n    \n    if n==140:\n        return 141\n    \n    if n==141:\n        return 142\n    \n    if n==142:\n        return 143\n    \n    if n==143:\n        return 144\n    \n    if n==144:\n        return 145\n    \n    if n==145:\n        return 146\n    \n    if n==146:\n        return 147\n    \n    if n==147:\n        return 148\n    \n    if n==148:\n        return 149\n    \n    if n==149:\n        return 150\n    \n    if n==150:\n        return 151\n    \n    if n==151:\n        return 152\n    \n    if n==152:\n        return 153\n    \n    if n==153:\n        retur"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    a=1\n    b=0\n    k=1\n    while k<=n:\n        a=a+b\n        b=a-b\n        k=k+1\n    return a\n    \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n == 0):\n        return 0\n    if(n == 1):\n        return 1\n    # a=n//2+1\n    # b=n//2-1\n    # c=n//2\n    a=math.ceil(math.sqrt(n))\n    b=math.floor(math.sqrt(n))\n    c=n\n    print(a,b,c)\n    if(c%2==0):\n        return c\n    else:\n        return c-1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    polite = []\n    x = 1\n    while x <= n:\n        if count == 0:\n            polite.append(x)\n            count = 1\n        elif count == 1:\n            x += 1\n        elif count == 2:\n            count = 0\n            x += 1\n            polite.append(x)\n    return polite[n - 1]\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    a = int(n ** 0.5)\n    ans = (n - 1) / (a - 1)\n    return int(ans) + 1 \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        p = 1\n        for i in range(3,n+1):\n            p = p * i // math.gcd(p,i)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 19\n    elif n == 8:\n        return 22\n    elif n == 9:\n        return 25\n    elif n == 10:\n        return 28\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 34\n    elif n == 13:\n        return 37\n    elif n == 14:\n        return 40\n    elif n == 15:\n        return 43\n    elif n == 16:\n        return 46\n    elif n == 17:\n        return 49\n    elif n == 18:\n        return 52\n    elif n == 19:\n        return 55\n    elif n == 20:\n        return 58\n    elif n == 21:\n        return 61\n    elif n == 22:\n        return 64\n    elif n == 23:\n        return 67\n    elif n == 24:\n        return 70\n    elif n == 25:\n        return 73\n    elif n == 26:\n        return 76\n    elif n == 27:\n        return 79\n    elif n == 28:\n        return 82\n    elif n == 29:\n        return 85\n    elif n == 30:\n        return 88\n    elif n == 31:\n        return 91\n    elif n == 32:\n        return 94\n    elif n == 33:\n        return 97\n    elif n == 34:\n        return 100\n    elif n == 35:\n        return 103\n    elif n == 36:\n        return 106\n    elif n == 37:\n        return 109\n    elif n == 38:\n        return 112\n    elif n == 39:\n        return 115\n    elif n == 40:\n        return 118\n    elif n == 41:\n        return 121\n    elif n == 42:\n        return 124\n    elif n == 43:\n        return 127\n    elif n == 44:\n        return 130\n    elif n == 45:\n        return 133\n    elif n == 46:\n        return 136\n    elif n == 47:\n        return 139\n    elif n == 48:\n        return 142\n    elif n == 49:\n        return 145\n    elif n == 50:\n        return 148\n    elif n == 51:\n        return 151\n    elif n == 52:\n        return 154\n    elif n == 53:\n        return 157\n    elif n == 54:\n        return 160\n    elif n == 55:\n        return 163\n    elif n == 56:\n        return 166\n    elif n == 57:\n        return 169\n    elif n == 58:\n        return 172\n    elif n == 59:\n        return 175\n    elif n == 60:\n        return 178\n    elif n == 61:\n        return 181\n    elif n == 62:\n        return 184\n    elif n == 63:\n        return 187\n    elif n == 64:\n        return 190\n    elif n == 65:\n        return 193\n    elif n == 66:\n        return 196\n    elif n == 67:\n        return 199\n    elif n == 68:\n        return 202\n    elif n == 69:\n        return 205\n    elif n == 70:\n        return 208\n    elif n == 71:\n        return 211\n    elif n == 72:\n        return 214\n    elif n == 73:\n        return 217\n    elif n == 74:\n        return 220\n    elif n == 75:\n        return 223\n    elif n == 76:\n        return 226\n    elif n == 77:\n        return 229\n    elif n == 78:\n        return 232\n    elif n == 79:\n        return 235\n    elif n == 80:\n        return 238\n    elif n == 81:\n        return 241\n    elif n == 82:\n        return 244\n    elif n == 83:\n        return 247\n    elif n == 84:\n        return 250\n    elif n == 85:\n        return 253\n    elif n == 86:\n        return 256\n    elif n == 87:\n        return 259\n    elif n == 88:\n        return 262\n    elif n == 89:\n        return 265\n    elif n == 90:\n        return 268\n    elif n == 91:\n        return 271\n    elif n == 92:\n        return 274\n    elif n == 93:\n        return 277\n    elif n == 94:\n        return 280\n    elif n == 95:\n        return 283\n    elif n == 96:\n        return 286\n    elif n == 97:\n        return 289\n    elif n == 98:\n        return 292\n    elif n == 99:\n        return 295\n    elif n == 100:\n        return 298\n    elif n == 101:\n        return 301\n    elif n == 102:\n        return 304\n    elif n == 103:\n        return 307\n    elif n == 104:\n        return 310\n    elif n == 105:\n        return 313\n    elif n == 106:\n        return 316\n    elif n == 107:\n        return 319\n    elif n == 108:\n        return 322\n    elif n == 109:\n        return 325\n    elif n == 110:\n        return 328\n    elif n == 111:\n        return 331\n    elif n == 112:\n        return 334\n    elif n == 113:\n        return 337\n    elif n == 114:\n        return 340\n    elif n == 115:\n        return 343\n    elif n == 116:\n        return 346\n    elif n == 117:\n        return 349\n    elif n == 118:\n        return 352\n    elif n == 119:\n        return 355\n    elif n == 120:\n        return 358\n    elif n == 121:\n        return 361\n    elif n == 122:\n        return 364\n    elif n == 123:\n        return 367\n    elif n == 124:\n        return 370\n    elif n == 125:\n        return 373\n    elif n == 126:\n        return 376\n    elif n == 127:\n        return 379\n    elif n == 128:\n        return 382\n    elif n == 129:\n        return 385\n    elif n == 130:\n        return 388\n    elif n == 131:\n        return 391\n    elif n == 132:\n        return 394\n    elif n == 133:\n        return 397\n    elif n == 134:\n        return 400\n    elif n == 135:\n        return 403\n    elif n == 136:\n        return 406\n    elif n == 137:\n        return 409\n    elif n == 138:\n        return 412\n    elif n == 139:\n        return 415\n    elif n == 140:\n        return 418\n    elif n == 141:\n        return 421\n    elif n == 142:\n        return 424\n    elif n == 143:\n        return 427\n    elif n == 144:\n        return 430\n    elif n == 145:\n        return 433\n    elif n == 146:\n        return 436\n    elif n == 147:\n        return 439\n    elif n == 148:\n        return 442\n    elif n == 149:\n        return 445\n    elif n == 150:\n        return 448\n    elif n == 151:\n        return 451\n    elif n == 152:\n        return 453\n    elif n == 153:\n        return 456\n    elif n == 154:\n        return 458\n    elif n == 155:\n        return 461\n    elif n == 156:\n        return 464\n    elif n == 157:\n        return 467\n    elif n == 158:\n        return 470\n    elif n == 159:\n        return 473\n    elif n == 160:\n        return 476\n    elif n == 161:\n        return 479\n    elif n == 162:\n        return 482\n    elif n == 163:\n        return 485\n    elif n == 164:\n        return 488\n    e"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    a = n // 2\n    b = n // 3\n    c = n // 5\n    d = n // 7\n    f = n // 11\n    g = n // 13\n    h = n // 17\n    i = n // 19\n    j = n // 23\n    k = n // 29\n    l = n // 31\n    m = n // 37\n    n = n // 41\n    o = n // 43\n    p = n // 47\n    q = n // 53\n    r = n // 59\n    s = n // 61\n    t = n // 67\n    u = n // 71\n    v = n // 73\n    w = n // 79\n    x = n // 83\n    y = n // 89\n    z = n // 97\n    a = a + 1\n    b = b + 1\n    c = c + 1\n    d = d + 1\n    f = f + 1\n    g = g + 1\n    h = h + 1\n    i = i + 1\n    j = j + 1\n    k = k + 1\n    l = l + 1\n    m = m + 1\n    n = n + 1\n    o = o + 1\n    p = p + 1\n    q = q + 1\n    r = r + 1\n    s = s + 1\n    t = t + 1\n    u = u + 1\n    v = v + 1\n    w = w + 1\n    x = x + 1\n    y = y + 1\n    z = z + 1\n    return a\n    \n    \ndef solution(A):\n    '''\n    You are given a sequence A of N integers, A1, A2,\u2026, AN. You want to find the K-th element of the sequence in O(1) time.\n    Note that it is possible to find a particular element in a sequence by repeatedly slicing the sequence.\n    '''\n    \n    for i in range(A[0]+1):\n        if i in A:\n            return i\n    \n    \n    def two_sums(arr,target):\n        # arr = list of elements\n        # target = target\n        d={}\n        for i in range(len(arr)):\n            if arr[i] in d:\n                return [d[arr[i]],i]\n            else:\n                d[target-arr[i]]=i\n    \n    for i in range(len(A)):\n        if A[i]==two_sums(A,A[i])[0]:\n            return i\n    \n    \n    def max_value(A,n):\n        if n == 1:\n            return A[0]\n        # max_value is equal to max of A[0], max of A[1] and max of A[2]...\n        # where n = 2, 3, 4 and so on\n        return max(max_value(A,n-1),A[n-1])\n    \n    def max_index(A,n):\n        if n == 1:\n            return A.index(max(A))\n        # max_index is equal to max of A.index(max(A,n-1)) and max of A.index(max(A,n-2)) and so on\n        return max_index(A,n-1)\n    \n    def is_polite(n):\n        a = n\n        if n == 0:\n            return 0\n        a = n // 2\n        b = n // 3\n        c = n // 5\n        d = n // 7\n        f = n // 11\n        g = n // 13\n        h = n // 17\n        i = n // 19\n        j = n // 23\n        k = n // 29\n        l = n // 31\n        m = n // 37\n        n = n // 41\n        o = n // 43\n        p = n // 47\n        q = n // 53\n        r = n // 59\n        s = n // 61\n        t = n // 67\n        u = n // 71\n        v = n // 73\n        w = n // 79\n        x = n // 83\n        y = n // 89\n        z = n // 97\n        a = a + 1\n        b = b + 1\n        c = c + 1\n        d = d + 1\n        f = f + 1\n        g = g + 1\n        h = h + 1\n        i = i + 1\n        j = j + 1\n        k = k + 1\n        l = l + 1\n        m = m + 1\n        n = n + 1\n        o = o + 1\n        p = p + 1\n        q = q + 1\n        r = r + 1\n        s = s + 1\n        t = t + 1\n        u = u + 1\n        v = v + 1\n        w = w + 1\n        x = x + 1\n        y = y + 1\n        z = z + 1\n        return a\n    \n    \n    # global function\n    def max_value(A,n):\n        if n == 1:\n            return A[0]\n        # max_value is equal to max of A[0], max of A[1] and max of A[2]...\n        # where n = 2, 3, 4 and so on\n        return max(max_value(A,n-1),A[n-1])\n    \n    def max_index(A,n):\n        if n == 1:\n            return A.index(max(A))\n        # max_index is equal to max of A.index(max(A,n-1)) and max of A.index(max(A,n-2)) and so on\n        return max_index(A,n-1)\n    \n    def is_polite(n):\n        a = n\n        if n == 0:\n            return 0\n        a = n // 2\n        b = n // 3\n        c = n // 5\n        d = n // 7\n        f = n // 11\n        g = n // 13\n        h = n // 17\n        i = n // 19\n        j = n // 23\n        k = n // 29\n        l = n // 31\n        m = n // 37\n        n = n // 41\n        o = n // 43\n        p = n // 47\n        q = n // 53\n        r = n // 59\n        s = n // 61\n        t = n // 67\n        u = n // 71\n        v = n // 73\n        w = n // 79\n        x = n // 83\n        y = n // 89\n        z = n // 97\n        a = a + 1\n        b = b + 1\n        c = c + 1\n        d = d + 1\n        f = f + 1\n        g = g + 1\n        h = h + 1\n        i = i + 1\n        j = j + 1\n        k = k + 1\n        l = l + 1\n        m = m + 1\n        n = n + 1\n        o = o + 1\n        p = p + 1\n        q = q + 1\n        r = r + 1\n        s = s + 1\n        t = t + 1\n        u = u + 1\n        v = v + 1\n        w = w + 1\n        x = x + 1\n        y = y + 1\n        z = z + 1\n        return a\n    \n    \n    \n    # this solution works but the worst case is O(n^2)\n    def largest_number_using_two_sums(A):\n        '''\n        Find the largest number in A, using 2 sum algorithm\n        '''\n        # Step 1: Find the maximum element in A\n        max_num = max(A)\n        # Step 2: Sort the A\n        A.sort()\n        # Step 3: Find the two elements that add up to max_num\n        # this method is O(n)\n        sorted_array = A\n        # i = 0\n        # j = len(A) - 1\n        # while i < j:\n        #     # if the difference between i and j is not equal to max_num\n        #     # if A[i] + A[j] == max_num:\n        #     #     return A[i] + A[j]\n        #     # else:\n        #     #     if A[i] + A[j] < max_num:\n        #     #         i += 1\n        #     #     else:\n    "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # complete this function\n    if (n <= 1):\n        return 1\n    elif (n == 2):\n        return 1\n    else:\n        return (n * (n - 1) + (n - 2) * (n - 3)) / 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # number of polite numbers\n    polite = 0\n    # starting value of n \n    number = 0\n    \n    # calculate the number of \n    # polite numbers \n    polite = n // 2\n    \n    # return nth polite number \n    return number + polite \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pw_list = []\n    for i in range(len(l1)-1):\n        pw_list.append([l1[i], l1[i+1]])\n    return pw_list\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    p = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            p.append([l1[i],l1[j]])\n    return p\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(len(l1)-1):\n        l2.append(l1[i:i+2])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    pairs = []\n    for i in range(len(l1)):\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # use for loop\n    \n    # l1 = input('Enter List:')\n    # l1 = [int(x) for x in l1.split(',')]\n    l1 = ['1', '2', '3', '4']\n    \n    # for i in l1:\n    #     for j in l1:\n    #         if j == i:\n    #             continue\n    #         print(i,'', j)\n    \n    # for i in range(len(l1)):\n    #     for j in range(i+1,len(l1)):\n    #         print(i,'', j)\n        \n    # use zip()\n    \n    # l1 = [int(x) for x in l1.split(',')]\n    \n    for i,j in zip(l1, l1[1:]):\n        print(i,'', j)\n    \n    # use enumerate()\n    \n    # for i,j in enumerate(l1):\n    #     if j == i:\n    #         continue\n    #     print(i,'', j)\n    \n    # use enumerate()\n    \n    # for i,j in enumerate(l1):\n    #     print(i,'', j)\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(len(l1)):\n        if i == 0:\n            l2.append(l1[i])\n        elif i == len(l1) - 1:\n            l2.append(l1[i])\n            l3.append(l2)\n        else:\n            l2.append(l1[i])\n            l3.append(l2)\n            l2 = []\n    return l3\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(0, len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Create a dictionary to hold the count of numbers in the list, for each number i,\n    # in the list, count the number of pairs whose sum is equal to sum - i.\n    # Store the count in a dictionary and return the value\n    # https://www.geeksforgeeks.org/count-pairs-whose-sum-is-equal-to-a-given-value/\n    # {x: count for x in arr if x in sum}\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return sum in count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Write your solution here\n    pairs = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #Solution 1:\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n    return count\n    '''\n    #Solution 2:\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n    return count\n    '''\n    #Solution 3:\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 4:\n    '''\n    #Solution 4:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 5:\n    '''\n    #Solution 5:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 6:\n    '''\n    #Solution 6:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 7:\n    '''\n    #Solution 7:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 8:\n    '''\n    #Solution 8:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 9:\n    '''\n    #Solution 9:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 10:\n    '''\n    #Solution 10:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 11:\n    '''\n    #Solution 11:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 12:\n    '''\n    #Solution 12:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 13:\n    '''\n    #Solution 13:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 14:\n    '''\n    #Solution 14:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 15:\n    '''\n    #Solution 15:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 16:\n    '''\n    #Solution 16:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 17:\n    '''\n    #Solution 17:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 18:\n    '''\n    #Solution 18:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 19:\n    '''\n    #Solution 19:\n    '''\n    count = 0\n    temp = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count+=1\n                temp.append(arr[i])\n                temp.append(arr[j])\n    return count,temp\n    '''\n    #Solution 20:\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    # Write your code here\n    pairs = {}\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                result += 1\n                pairs[(arr[i], arr[j])] = 1\n                pairs[(arr[j], arr[i])] = 1\n    return result, pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # write your python function here\n    pairs_count = 0\n    i = 0\n    while i < len(arr):\n        if sum - arr[i] in arr:\n            pairs_count += 1\n        i += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    num_pairs = 0\n    for index in range(len(arr)):\n        target = sum - arr[index]\n        if target in arr:\n            if arr.count(target) > 1:\n                num_pairs += 1\n            continue\n        num_pairs += 1\n    return num_pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]+arr[j] == sum):\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    for i in li2:\n        if i not in li1:\n            return i\n    return 'Both lists have same values'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [i for i in li1 if i not in li2]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d = []\n    for i in li1:\n        if i not in li2:\n            d.append(i)\n    return d\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1 = set(li1)\n    li2 = set(li2)\n    return li1.difference(li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = []\n    for i in li1:\n        if i not in li2:\n            li.append(i)\n    return li\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    new_list=[]\n    for i in li1:\n        if i not in li2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if (len(li1)!=len(li2)):\n        return -1\n    diff = []\n    for i in range(len(li1)):\n        if (li1[i]!=li2[i]):\n            diff.append(li1[i])\n    return diff\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    odd_nums = list(range(1,n+1,2))\n    odd_nums_squared = list(map(lambda num : num**4, odd_nums))\n    odd_num_sum = sum(odd_nums_squared)\n    return odd_num_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i%2==1):\n            sum += i**4\n    return sum\nprint(\"Answer :\",odd_num_sum(20))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_num = 0\n    for i in range(1,n+1) : \n        if i % 2 == 0 : \n            continue\n        else : \n            sum_num += (i**4)\n    return sum_num\nodd_num_sum(10)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    if n <= 0 : \n        return \"Invalid number\"\n    else : \n        for i in range(n, 0, -1): \n            if (i % 2) == 1 : \n                sum += i ** 4\n        return sum\n        \ndef multiply_numbers(n1,n2) : \n    '''\n    Write a python function to multiply two numbers using recursion. \n    '''\n    if n2 == 0 : \n        return 0\n    else : \n        return n1 + multiply_numbers(n1, n2-1)\n        \ndef factorial(n) : \n    '''\n    Write a python function to compute the factorial of n using recursion.\n    '''\n    if n == 0: \n        return 1\n    else : \n        return n * factorial(n-1)\n        \ndef power_n(n, x) : \n    '''\n    Write a python function to compute nth power of x using recursion.\n    '''\n    if n==1 : \n        return x\n    else : \n        return x * power_n(n-1, x)\n        \ndef is_palindrome(str1) : \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    if str1 == '': \n        return False\n    if len(str1)%2 == 0: \n        return str1[:len(str1)//2] == str1[len(str1)//2:][::-1]\n    else: \n        return str1[:len(str1)//2] == str1[len(str1)//2+1:][::-1]\n        \ndef is_palindrome_using_stack(str1) : \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    if str1 == '': \n        return False\n    s = []\n    for i in range(len(str1)): \n        s.append(str1[i])\n        if len(s) > 1 and s[-2] == s[-1]: \n            s.pop()\n            s.pop()\n    return False if s else True\n        \ndef palindrome_using_stack(str1) : \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    if str1 == '': \n        return False\n    s = []\n    for i in range(len(str1)): \n        s.append(str1[i])\n        if len(s) > 1 and s[-2] == s[-1]: \n            s.pop()\n            s.pop()\n    return False if s else True\n        \ndef reverse_string_recur(s, left, right) : \n    if left >= right : \n        return\n    s[left], s[right] = s[right], s[left] \n    reverse_string_recur(s, left + 1, right - 1)\n        \ndef reverse_string_recur_using_stack(s, left, right) : \n    if left >= right : \n        return\n    s[left], s[right] = s[right], s[left] \n    reverse_string_recur_using_stack(s, left + 1, right - 1)\n    \ndef reverse_string(s) : \n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(s) == 0 : \n        return s\n    reverse_string_recur_using_stack(s, 0, len(s)-1)\n    \ndef reverse_string_using_stack(s) : \n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(s) == 0 : \n        return s\n    s = list(s)\n    reverse_string_recur_using_stack(s, 0, len(s)-1)\n    return \"\".join(s)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    odd_nums = []\n    for num in range(1, n+1):\n        if num % 2!= 0:\n            odd_nums.append(num)\n    for num in odd_nums:\n        sum += num**2\n    return sum\n    \ndef permutation(s): \n    '''\n    Write a python function to determine if a string contains a permutation of a palindrome.\n    '''\n    if set(s) == set(s[::-1]):\n        return \"It is a palindrome\"\n    else:\n        return \"Not a palindrome\"\n    \ndef binary_string(s): \n    '''\n    Write a python function to print the binary string representation of an integer.\n    '''\n    binary = ''\n    while s!= 0:\n        rem = s % 2\n        binary = str(rem) + binary\n        s = s//2\n    return binary\n    \ndef convert_binary_to_decimal(binary): \n    '''\n    Write a python function to convert a binary string to its decimal equivalent.\n    '''\n    return int(binary, 2)\n    \ndef compute_common_divisor(a, b): \n    '''\n    Write a python function to compute the common divisor of a and b.\n    '''\n    return a if b == 0 else compute_common_divisor(b, a % b)\n    \ndef compute_fibonacci(n):\n    '''\n    Write a python function to compute the fibonacci numbers upto n.\n    '''\n    if n <= 1:\n        return n\n    return compute_fibonacci(n-1) + compute_fibonacci(n-2)\n    \ndef sum_squares(n):\n    '''\n    Write a python function to compute the sum of squares of the first n natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        sum += num**2\n    return sum\n    \ndef find_prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a given integer.\n    '''\n    factors = []\n    if n <= 1:\n        return factors\n    if n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                factors.append(i)\n                n = n // i\n            else:\n                i = i + 2\n    return factors\n    \ndef count_occurrences(s, sub): \n    '''\n    Write a python function to count occurrences of a sub-string in a string.\n    '''\n    count = 0\n    length = len(sub)\n    for i in range(len(s)):\n        if s[i:i+length] == sub:\n            count += 1\n    return count\n    \ndef reverse_string(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef add_parentheses(s): \n    '''\n    Write a python function to add parentheses in between each of the words of a given string.\n    '''\n    index = 0\n    new_s = []\n    while index < len(s):\n        if s[index] == '(':\n            new_s.append('(')\n            new_s.append(s[index])\n            index += 1\n        elif s[index] == ')':\n            new_s.append(')')\n            index += 1\n        else:\n            new_s.append(s[index])\n            index += 1\n    return ''.join(new_s)\n    \ndef is_palindrome(s): \n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef find_the_duplicate(s):\n    '''\n    Write a python function to find the duplicate character in a string.\n    '''\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        else:\n            seen.add(char)\n    return -1\n    \ndef count_freq(s):\n    '''\n    Write a python function to count the frequencies of all the characters in a given string.\n    '''\n    if not s:\n        return {}\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n    \ndef count_distinct(s):\n    '''\n    Write a python function to count the distinct characters in a given string.\n    '''\n    if not s:\n        return 1\n    count = 0\n    for char in s:\n        if char in count:\n            count += 1\n    return count\n    \ndef count_adjacent(s, char):\n    '''\n    Write a python function to count the number of times a given character 'char' repeats consecutively in a given string.\n    '''\n    count = 0\n    if len(s) == 0:\n        return count\n    if char not in s:\n        return count\n    if s[0] == char:\n        count += 1\n        if s[1] == char:\n            count += 1\n        elif s[1]!= char:\n            count = 0\n    else:\n        count = 0\n    if s[-1] == char:\n        count += 1\n    elif s[-1]!= char:\n        count = 0\n    return count\n    \ndef palindrome_partition(s):\n    '''\n    Write a python function to partition a given string such that every substring is a palindrome.\n    '''\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    # For every substring in the string\n    for i in range(len(s)):\n        # Find the start index\n        start = i\n        # Find the end index\n        end = i\n        while start >= 0 and end < len(s) and s[start] == s[end]:\n            start -= 1\n            end += 1\n        # The current substring is palindrome so return it.\n        if start < 0:\n            return s[:i+1] + s[i+1:]\n        # The current substring is not palindrome so return it with a slash in between.\n        else:\n            return s[:start] + '-' + s[start:end+1] + '-' + s[end+1:]\n    \ndef is_palindrome_partition(s):\n    '''\n    Write a python function to check if a string is a palindrome partition.\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    # For every substring in the string\n    for i in range(len(s)):\n        # Find the start index\n        start = i\n        # Find the end index\n        end = i\n        while start >= 0 and end < len(s) and s[start] == s[end]:\n            start -= 1\n            end += 1\n        # If the current substring is not a palindrome then return False.\n        if start < 0:\n            return True\n        # If the current substring is not a palindrome then return False.\n        elif end == len(s):\n            return True\n    return False\n    \ndef is_palindrome_partition_reverse(s):\n    '''\n    Write a python function to check if a string is a palindrome partition.\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    # For every substring in the string\n    for i in range(len(s)):\n        # Find the start index\n        start = i\n        # Find the end index\n        end = i\n        while start >= 0 and end < len(s) and s[start] == s[end]:\n            start -= 1\n        "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        if i%2!= 0:\n            sum = sum + pow(i,4)\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    while(num <= n) :\n        num += 2\n        sum = 0\n        while(num > 0) :\n            sum += num**2\n            num -= 1\n        print(sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if (i % 2) == 1 :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            s += i**4\n    return s\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0 \n    for i in range(n+1) : \n        if i % 2 == 1 : \n            s += i ** 3 \n    return s \n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in \"([{\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif char == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif char == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    # Dictionary of opening brackets\n    brackets = {'(':')', '{':'}', '[':']'}\n    open_brackets = ['(', '{', '[']\n    # stack to keep track of opening brackets\n    stack = []\n    # flag is to check if brackets are balanced or not\n    flag = True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    # Check for balanced parentheses\n    for token in exp:\n        if token == \"(\":\n            stack.append(token)\n        elif token == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    brackets = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n    stack = []\n    for c in exp:\n        if c in '([{':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            if c == brackets[stack[-1]]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    paren = deque()\n    if exp[0] == '(':\n        paren.append(1)\n    elif exp[0] == ')':\n        paren.append(-1)\n    else:\n        paren.append(0)\n    for i in range(1, len(exp)):\n        if exp[i] == '(' or exp[i] == ')':\n            paren.append(0)\n        elif exp[i] == '+' or exp[i] == '-' or exp[i] == '*' or exp[i] == '/':\n            paren.append(0)\n        else:\n            paren.append(paren[i-1])\n    if len(paren) == 1 and paren[0] == 0:\n        return True\n    elif len(paren) == 1 and paren[0] == -1:\n        return False\n    else:\n        return paren[len(paren)-1] == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            last = stack.pop()\n            if i == ')' and last!= '(':\n                return False\n            if i == '}' and last!= '{':\n                return False\n            if i == ']' and last!= '[':\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    print(exp)\n    stack = []\n    for i in exp:\n        if i == '(' or i == '[' or i == '{':\n            stack.append(i)\n        elif i == ')' or i == ']' or i == '}':\n            if len(stack) == 0:\n                return False\n            tmp = stack.pop()\n            if i == ')' and tmp!= '(':\n                return False\n            elif i == ']' and tmp!= '[':\n                return False\n            elif i == '}' and tmp!= '{':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_brackets_count = 0\n    close_brackets_count = 0\n    stack = []\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    brackets = {'{': '}', '(': ')', '[': ']', '<': '>'}\n    for char in exp:\n        if char in brackets.keys():\n            stack.append(char)\n        elif char in brackets.values():\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= brackets[char]:\n                return False\n        else:\n            return False\n    return len(stack) == 0\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # print(test_str)\n    length_list = []\n    for i in range(len(test_str)):\n        for j in range(i,len(test_str)+1):\n            if len(test_str[i:j]) == K:\n                length_list.append(test_str[i:j])\n    # print(length_list)\n    return''.join(length_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # # Just a simple code\n    # return ''.join([x for x in test_str.split() if len(x)!= K])\n    # using a generator\n    return''.join([x for x in test_str.split() if len(x)!= K])\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Write your code here\n    string_list = test_str.split()\n    new_string = []\n    for word in string_list:\n        if len(word) == K:\n            new_string.append(word)\n    return''.join(new_string)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = \"\"\n    if test_str == \"\":\n        return \"\"\n    for i in test_str.split():\n        if len(i) == K:\n            continue\n        new_str += i+\" \"\n    return new_str.rstrip()\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(filter(lambda x: len(x)!= K, test_str.split(' ')))\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not isinstance(test_str, str):\n        raise TypeError(\"remove_length() argument must be of type str\")\n    if not isinstance(K, int):\n        raise TypeError(\"remove_length() argument must be of type int\")\n    if K < 0 or K > len(test_str) - 1:\n        raise ValueError(\"remove_length() argument must be between 0 and len(test_str) - 1\")\n    result = \"\"\n    for i in range(len(test_str)):\n        if i!= K:\n            result += test_str[i]\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0:\n        return \"\"\n    test_str = test_str.split()\n    if len(test_str) >= K:\n        test_str = \" \".join(test_str[:-K])\n    return test_str\n    \nif __name__ == '__main__':\n    \n    test_str = \"the sky is blue\"\n    K = 3\n    print(remove_length(test_str, K))\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # import re\n    # print re.findall(r\"\\b\\w{%d}\\b\" % K, test_str)\n    # return re.findall(r\"\\b\\w{%d}\\b\" % K, test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    K = int(K)\n    result = []\n    for i in test_str.split(\" \"):\n        if len(i) == K:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    for word in test_str.split(\" \"):\n        if len(word) == K:\n            continue\n        else:\n            res.append(word)\n    return \" \".join(res)\n    \nif __name__ == \"__main__\":\n    test_str = \"Hello World! 123 hello 123\"\n    print(remove_length(test_str, 4))"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        print(match.start(),match.end(),match.span())\n    else:\n        print(None)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result:\n        #print(\"The string '{}' starts with '{}' at position {}\".format(text,pattern,result.start()))\n        return {\"string\":text,\"position\":result.start()}\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) == 0:\n        return None\n    if len(pattern) == 0:\n        return None\n    if len(text) < len(pattern):\n        return None\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence_list = []\n    i=0\n    while(True):\n        try:\n            match = re.search(pattern,text[i:]).start()\n            if match:\n                occurrence_list.append(match)\n                i+=match+1\n            else:\n                break\n        except:\n            break\n    return occurrence_list\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    string = text.lower()\n    pat = pattern.lower()\n    string = re.sub('\\s+','', string)\n    pat = re.sub('\\s+','', pat)\n    string = re.sub('\\W','', string)\n    pat = re.sub('\\W','', pat)\n    d = {}\n    for i in range(len(string)-len(pat)+1):\n        if string[i:i+len(pat)] == pat:\n            d[i] = d.get(i,0) + 1\n    if len(d) == 0:\n        return None\n    else:\n        d = sorted(d.items(), key=lambda kv: kv[0])\n        index = d[0][0]\n        return {'string':string, 'index':index, 'pattern':pattern}\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    index = 0\n    while count < len(text):\n        count = text.find(pattern,index)\n        if count == -1:\n            return None\n        else:\n            return count,count+len(pattern)\ndef occurance_pattern(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    index = 0\n    while count < len(text):\n        count = text.count(pattern,index)\n        if count == 0:\n            return None\n        else:\n            return count,count+len(pattern)\ndef string_rotation(string):\n    '''\n    Write a function to find the occurrence of a substring within a string. Return None if there is no match.\n    '''\n    if len(string) < 2:\n        return None\n    first_index = 0\n    second_index = 1\n    if string[first_index] == string[second_index]:\n        return None\n    while second_index < len(string):\n        if string[first_index]!= string[second_index]:\n            return None\n        first_index += 1\n        second_index += 1\n    return first_index,second_index\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\ndef longest_palindrome(string):\n    '''\n    Write a function to find the longest palindrome within a given string.\n    '''\n    if len(string) < 2:\n        return string\n    if string[0] == string[-1]:\n        return string\n    if string[0]!= string[-1]:\n        if len(string) < 3:\n            return string\n        for i in range(0,len(string)):\n            if string[i]!= string[len(string)-i-1]:\n                return string[i:len(string)-i]\n    return string\ndef find_unique(text):\n    '''\n    Write a function to find the unique characters within a string.\n    '''\n    freq = {}\n    for c in text:\n        if c not in freq:\n            freq[c] = 1\n        else:\n            freq[c] += 1\n    return freq\ndef find_unique_and_sort(text):\n    '''\n    Write a function to find the unique characters within a string.\n    '''\n    freq = {}\n    for c in text:\n        if c not in freq:\n            freq[c] = 1\n        else:\n            freq[c] += 1\n    freq = sorted(freq.items(),key=lambda kv:kv[1])\n    return freq\ndef find_unique_and_sort2(text):\n    '''\n    Write a function to find the unique characters within a string.\n    '''\n    freq = {}\n    for c in text:\n        if c not in freq:\n            freq[c] = 1\n        else:\n            freq[c] += 1\n    freq = list(freq.items())\n    return sorted(freq,key=lambda kv:kv[1],reverse=True)\ndef find_unique_and_sort3(text):\n    '''\n    Write a function to find the unique characters within a string.\n    '''\n    freq = {}\n    for c in text:\n        if c not in freq:\n            freq[c] = 1\n        else:\n            freq[c] += 1\n    freq = sorted(freq.items(),key=lambda kv:kv[1],reverse=True)\n    return freq\ndef find_unique_and_sort4(text):\n    '''\n    Write a function to find the unique characters within a string.\n    '''\n    freq = {}\n    for c in text:\n        if c not in freq:\n            freq[c] = 1\n        else:\n            freq[c] += 1\n    freq = list(freq.items())\n    return sorted(freq,key=lambda kv:kv[1],reverse=True)\ndef str_swap_case(text):\n    '''\n    Write a function to swap the case of all characters in a string.\n    '''\n    text = text.lower()\n    text = text.upper()\n    return text\ndef str_swap_case2(text):\n    '''\n    Write a function to swap the case of all characters in a string.\n    '''\n    return text.swapcase()\ndef str_swap_case3(text):\n    '''\n    Write a function to swap the case of all characters in a string.\n    '''\n    return text.swapcase()\ndef str_swap_case4(text):\n    '''\n    Write a function to swap the case of all characters in a string.\n    '''\n    return text.swapcase()\ndef str_swap_case_by_regex(text):\n    '''\n    Write a function to swap the case of all characters in a string.\n    '''\n    return re.sub(r'([a-z]|[A-Z])','X',text)\ndef str_rotation(text):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(text) < 2:\n        return None\n    for i in range(len(text)):\n        if text[i] == text[len(text)-i-1]:\n            return None\n    for i in range(len(text)-1):\n        if text[i]!= text[len(text)-i-1]:\n            return i\n    return len(text)\ndef str_rotation2(text):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(text) < 2:\n        return None\n    for i in range(len(text)):\n        if text[i] == text[len(text)-i-1]:\n            return i\n    return len(text)\ndef str_rotation3(text):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(text) < 2:\n        return None\n    if text[0] == text[len(text)-1]:\n        return 0\n    if text[0]!= text[len(text)-1]:\n        return len(text)\n    return len(text)-1\ndef str_rotation4(text):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(text) < 2:\n        return None\n    if text[0] == text[len(text)-1]:\n        return 0\n    if text[0]!= text[len(text)-1]:\n        return len(text)\n    return len(text)-1\ndef str_rotation5(text):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(text) < 2:\n        return None\n    if text[0] == text[len(text)-1]:\n        return 0\n    if text[0]!= text[len(text)-1]:\n        return len(text)\n    return len(text)-1\ndef str_rotation6(text):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(text) < 2:\n        return None\n    if text[0] == text[len(text)-1]:\n        return 0\n    if text[0]!= text[len(text)-1]:\n        return len(text)\n    return len(text)-1\ndef str_rotation7(text):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(text) < 2:\n        return None\n    if text[0] == text[len(text)-1]:\n        return 0\n    if text[0]!= text[len(text)-1]:\n        return len(text)\n    return len(text)-1\ndef str_rotation8(text):\n    '''\n    Write a function to find the rotation index of a string.\n    '''\n    if len(text) < 2:\n    "
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    found=[]\n    patt=re.findall(pattern,text)\n    if len(patt)>0:\n        for item in patt:\n            count=text.count(item)\n            found.append((count,item))\n        return found\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occ_pos = []\n    #print(text)\n    if pattern in text:\n        #print(text.split(pattern))\n        for i in range(len(text)):\n            if text.split(pattern)[i] == pattern:\n                occ_pos.append(i)\n        return occ_pos\n    else:\n        return None\n        \ndef sub_function(str1,str2):\n    '''\n    Write a function to count the occurance of the substrings within a string. Return -1 if there is no match.\n    '''\n    count = 0\n    if str1 in str2:\n        for i in range(len(str1)):\n            if str1[i] == str2[i]:\n                count += 1\n        return count\n    else:\n        return -1\n        \ndef odd_even_substring(text):\n    '''\n    Write a function to find the occurrence and position of the odd and even substrings within a string. Return None if there is no match.\n    '''\n    odd_even = []\n    #print(text)\n    if text in odd_even:\n        odd_even_occ_pos = []\n        if odd_even.index(text) % 2 == 0:\n            odd_even_occ_pos.append(odd_even.index(text) - 1)\n            odd_even_occ_pos.append(odd_even.index(text))\n            odd_even_occ_pos.append(odd_even.index(text) + 1)\n        elif odd_even.index(text) % 2!= 0:\n            odd_even_occ_pos.append(odd_even.index(text))\n            odd_even_occ_pos.append(odd_even.index(text) + 1)\n            odd_even_occ_pos.append(odd_even.index(text) - 1)\n        return odd_even_occ_pos\n    else:\n        return None\n        \ndef make_tuple_tuple(tuples):\n    '''\n    Write a function to convert a list of tuples into a list of lists.\n    '''\n    list_of_tuple = []\n    for i in range(len(tuples)):\n        if tuples[i] not in list_of_tuple:\n            list_of_tuple.append(tuples[i])\n    return list_of_tuple\n        \ndef key_value_pairs(arr):\n    '''\n    Write a function to find the number of key-value pairs in an array. Return -1 if there is no match.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] in arr:\n            count += 1\n    return count\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    search = re.finditer(pattern,text)\n    for m in search:\n        start = m.start()\n        end = m.end()\n        matches.append((start,end))\n    return matches\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there i"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2==0:\n            continue\n        else:\n            if nums[i]%2!=0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    flag = True\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if nums[i] % 2 == 0:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if i%2!=0:\n            odd.append(nums[i])\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2 == 0:\n            if nums[i]%2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums == None or len(nums) == 0:\n        return False\n    if nums == None or len(nums) == 1:\n        return False\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #returns true if any of the list contains odd numbers\n    #return any(n in nums for n in range(0,len(nums)) if n%2==1)\n    #return any(n%2!=0 for n in nums)\n    #return any(n for n in nums if n%2!=0)\n    #return any(n%2==1 for n in nums)\n    return any(n%2==1 for n in nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if (i % 2 == 0):\n            continue\n        else:\n            if (nums[i] % 2!= 0):\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    flag = True\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i%2 == 0:\n            continue\n        else:\n            if nums[i]%2 == 1:\n                return False\n            else:\n                continue\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    #pass\n    # better method\n    # count = 0\n    # for i in range(len(test_str)-1):\n    #     if test_str[i] in \"aeiou\" and test_str[i+1] in \"aeiou\":\n    #         count += 1\n    # return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','y']\n    count = 0\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for vowel in vowels:\n        count += test_str.count(vowel)\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # print(test_str[::])\n    # print(test_str[0],test_str[1],test_str[2])\n    # print(test_str[-1],test_str[-2],test_str[-3])\n    # print(test_str[0:3])\n    # print(test_str[:3])\n    # print(test_str[3:])\n    # print(test_str[3:6])\n    # print(test_str[3:])\n    # print(test_str[2:4])\n    # print(test_str[-3:-2])\n    # print(test_str[1:8:2])\n    # print(test_str[1::2])\n    # print(test_str[1::3])\n    # print(test_str[::3])\n    # print(test_str[::4])\n    # print(test_str[::-1])\n    # print(test_str[::-2])\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] == \"a\" or test_str[i] == \"e\" or test_str[i] == \"i\" or test_str[i] == \"o\" or test_str[i] == \"u\"):\n            if (test_str[i+1] == \"a\" or test_str[i+1] == \"e\" or test_str[i+1] == \"i\" or test_str[i+1] == \"o\" or test_str[i+1] == \"u\"):\n                count += 1\n        elif (test_str[i] == \"A\" or test_str[i] == \"E\" or test_str[i] == \"I\" or test_str[i] == \"O\" or test_str[i] == \"U\"):\n            if (test_str[i+1] == \"a\" or test_str[i+1] == \"e\" or test_str[i+1] == \"i\" or test_str[i+1] == \"o\" or test_str[i+1] == \"u\"):\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = 'aeiou'\n    n_vowels = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            n_vowels += 1\n        else:\n            n_vowels = 0\n    return count, n_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i!= 0 and test_str[i-1] not in vowels:\n                count += 1\n            elif i!= len(test_str) - 1 and test_str[i+1] not in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            if test_str[i - 1] in ['a', 'e', 'i', 'o', 'u'] or test_str[i + 1] in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    n = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou':\n            if test_str[i+1] in 'aeiou':\n                n += 1\n    return n\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            count += arr[i]\n    print(count)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    ans = 0\n    for i in arr:\n        ans = ans + i\n    return ans\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #put a pass statement in here\n    for i in arr:\n        if arr.count(i) == 1:\n            return arr.count(i)\n        else:\n            pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr_sum = 0\n    non_repeated = []\n    for i in range(len(arr)):\n        if arr[i] not in non_repeated:\n            non_repeated.append(arr[i])\n            arr_sum += arr[i]\n    print(arr_sum)\n    return arr_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    unique = set()\n    for i in arr:\n        sum = sum + i\n        unique.add(i)\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count = count + i\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in range(len(arr)): \n        res += arr[i]\n    return res\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n=len(arr)\n    count = 0\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            count += arr[i]\n    print(count)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    s = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            s += i\n    print(s)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    a = list(groupby(list1))\n    newlist = []\n    for group in a:\n        if(group[0]==None):\n            pass\n        else:\n            newlist.append(list(group[0]))\n    print(newlist)\n    \npack_consecutive_duplicates([1,2,3,4,5,6,7,8,1,2,3])"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    from collections import Counter\n    # counter = Counter(list1)\n    # print(counter)\n    # count = 0\n    # for k,v in counter.items():\n    #     if v > 1:\n    #         for i in range(0,v-1):\n    #             list1.insert(count,k)\n    #             count += 1\n    #     else:\n    #         count += 1\n    # return list1\n    \n    '''\n    Solution 2:\n    '''\n    # output = []\n    # for key,group in groupby(list1):\n    #     output.append(list(group))\n    # return output\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    s = set(list1)\n    return sorted([[x] + [list1.count(x)] if x!= j else [j] for i, j in groupby(sorted(list1))])\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    return [list(map(int, list(g))) for k, g in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        group = list(group)\n        #print(key, group)\n        if len(group)>1:\n            result.append([key] + sorted(group))\n    return result\n    \nif __name__ == '__main__':\n    #input list\n    print(\"Enter list of integers\")\n    l1 = list(map(int, input().split()))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    count = 0\n    for key, group in groupby(list1):\n        if key == 0:\n            count += 1\n            list2 = []\n        else:\n            list2.append(list(group))\n            count += 1\n    return list2\n    "
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, value in groupby(list1):\n        # print(key)\n        # print(value)\n        l1 = len(list(value))\n        l2 = len(list(key))\n        print(l1,l2)\n        if l1 == l2:\n            print(key, list(key))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(list1):\n        #print(k)\n        #print(g)\n        #if k is list(g):\n        if len(list(g)) >= 2:\n            yield (k,list(g))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    n=len(list1)\n    lst = []\n    for i in range(n):\n        for j in range(i+1,n):\n            if list1[i]==list1[j]:\n                lst.append(list1[i])\n    return lst\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(tuple(i))\n    dct = {}\n    for i in new_list:\n        if i in dct.keys():\n            dct[i] += 1\n        else:\n            dct[i] = 1\n    return(dct)\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #base case: if the list is empty return 0\n    if len(list1) == 0:\n        return 0\n    #otherwise keep counting with 1\n    else:\n        count = 1\n        return count + unique_sublists(list1[1:])\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in list1:\n        if type(i) is list:\n            if i not in counts:\n                counts[tuple(i)] = 1\n            else:\n                counts[tuple(i)] += 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if type(i) == list:\n            i = tuple(i)\n        elif type(i) == tuple:\n            i = list(i)\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    unique_list = {}\n    for i in range(len(list1)):\n        if list1[i] not in unique_list:\n            unique_list[tuple(list1[i])] = 1\n        else:\n            unique_list[tuple(list1[i])] += 1\n    return unique_list\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    list_dict = {}\n    \n    for lis in list1:\n        if lis in list_dict.keys():\n            list_dict[lis] += 1\n        else:\n            list_dict[lis] = 1\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #implement your solution here\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #test\n    #list1 = [1,2,3,4,5,6,7,7,8]\n    #print(unique_sublists(list1))\n    \n    # use set\n    list1_set = set(list1)\n    result = {}\n    for item in list1_set:\n        result[item] = list1.count(item)\n    return result\n    \n    \n    \ndef delete_duplicates(list1):\n    '''\n    Write a function to find the duplicate number in a list. The function should print all duplicates.\n    '''\n    #test\n    #list1 = [1,1,2,2,3,4,4,5,5,6,6,7,7,8,8,9]\n    #print(delete_duplicates(list1))\n    \n    # use set\n    list1_set = set(list1)\n    result = []\n    for item in list1_set:\n        if list1.count(item) > 1:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n    return {}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lists = []\n    for i in list1:\n        temp = []\n        for j in i:\n            temp.append(tuple(j))\n        lists.append(tuple(temp))\n    #print(lists)\n    d = {}\n    for l in lists:\n        d[l] = 0\n    for i in lists:\n        d[i] += 1\n    return d"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1,len(test_list)+1):\n        combinations_list += list(combinations(test_list,i))\n    combinations_list = list(set(combinations_list))\n    for i in range(0,len(combinations_list)):\n        combinations_list[i] = tuple(combinations_list[i])\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        combinations_list = combinations(test_list, i)\n        for comb in combinations_list:\n            result.append(tuple(comb))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = list(combinations(test_list, 2))\n    print(\"The combinations_list from combinations() are: \" + str(combinations_list))\n    print(\"The type of combinations_list from combinations() is: \" + str(type(combinations_list)))\n    for i in range(len(combinations_list)):\n        if sum(combinations_list[i]) == 100:\n            print(\"The combinations_list are: \" + str(combinations_list[i]))\n            print(\"The type of combinations_list are: \" + str(type(combinations_list[i])))\n        else:\n            pass\n    print(\"\\n\")\n    # task completed\n    #combinations_list = list(combinations(test_list, 2))\n    #print(\"The combinations_list from combinations() are: \" + str(combinations_list))\n    #print(\"The type of combinations_list from combinations() is: \" + str(type(combinations_list)))\n    #print(\"The combinations_list are: \" + str(combinations_list))\n    #print(\"The type of combinations_list are: \" + str(type(combinations_list)))\n    #for i in range(len(combinations_list)):\n    #    print(\"The combinations_list are: \" + str(combinations_list[i]))\n    #    print(\"The type of combinations_list are: \" + str(type(combinations_list[i])))\n    #    if sum(combinations_list[i]) == 100:\n    #        print(\"The combinations_list are: \" + str(combinations_list[i]))\n    #        print(\"The type of combinations_list are: \" + str(type(combinations_list[i])))\n    #    else:\n    #        pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    res = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                temp = test_list[i] + test_list[j] + test_list[k]\n                if temp == 0:\n                    res.append((test_list[i], test_list[j], test_list[k]))\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(combinations(test_list, 3))\n    return test_list\n    \n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n        print(test_list[i])\n    '''\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_with_tuples = []\n    for i in range(1, len(test_list)+1):\n        combinations_with_tuples.append(combinations(test_list,i))\n    combinations_with_tuples = set([tuple(sorted(i)) for i in combinations_with_tuples])\n    return combinations_with_tuples\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 2)\n    \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    combinations_ = []\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            combinations_.append((test_list[i],test_list[j]))\n    return combinations_\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,2))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # print(list(combinations(test_list, 2)))\n    combination_list = []\n    for i in range(len(test_list)-2):\n        for j in range(i+1, len(test_list)-1):\n            for k in range(j+1, len(test_list)):\n                combination_list.append(tuple(sorted([test_list[i], test_list[j], test_list[k]])))\n    return combination_list\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Your Code Here\n    return n\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) :\n        if n % i == 0 :\n            count = count + 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count+=1\n    if count % 2 == 0:\n        print(\"the count of divisors are even\")\n    else:\n        print(\"the count of divisors are odd\")\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n==1) : \n        return False\n    i = 1\n    count = 0\n    while (i <= math.sqrt(n)): \n        if (n % i == 0) : \n            count = count + 2\n        i = i + 1\n    if (count == 2) : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            divisors.append(i) \n            if i!= n // i : \n                divisors.append(n//i) \n    return len(divisors)\n    "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) : \n        if n%i == 0: \n            count += 1\n    if count % 2 == 0 : \n        print(n, \"is a Prime Number\")\n    else : \n        print(n, \"is a Composite Number\")\ncount_divisors(7)\ncount_divisors(5)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n//2 + 1) :\n        if n % i == 0 :\n            divisors += 1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) : \n        if n % i == 0 : \n            count += 1\n    if count % 2 == 0 : \n        return True \n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        divisors = 0\n        for i in range(1,int(math.sqrt(n))+1):\n            if n % i == 0:\n                divisors += 2\n        if n > 1:\n            divisors += 1\n        return divisors\ndef is_perfect_square(n):\n    '''\n    Write a python function to check whether the given number is perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-22.php\n    '''\n    root = math.sqrt(n)\n    if root == int(root):\n        return True\n    else:\n        return False\ndef perfect_square(n):\n    '''\n    Write a python function to find the largest perfect square which is less than or equal to the given number.\n    Input : 4\n    Output : 2\n    Input : 15\n    Output : 7\n    Input : 2\n    Output : -1\n    Input : 10\n    Output : -1\n    Input : -4\n    Output : -1\n    '''\n    if is_perfect_square(n):\n        return 1\n    if n == 1:\n        return n\n    else:\n        max_sq_num = math.ceil(math.sqrt(n))\n        min_sq_num = math.floor(math.sqrt(n))\n        if max_sq_num**2 == n:\n            return max_sq_num\n        elif min_sq_num**2 == n:\n            return min_sq_num\n        else:\n            return -1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    if n == 1 :\n        return 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total = 0\n    for i in range(n-1):\n        if arr[i] % 2!= 0:\n            for j in range(i+1, n):\n                if arr[j] % 2!= 0:\n                    total += arr[j]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)-1):\n            total += arr[j]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    if len(arr) == 0:\n        return 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # code here\n    s=0\n    for i in range(len(arr)):\n        if i%2==1:\n            s=s+arr[i]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr_len = len(arr)\n    total = 0\n    for i in range(arr_len):\n        for j in range(i, arr_len):\n            if j == i:\n                continue\n            total += arr[i:j+1]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i%2)!= 0:\n            sum_odd += arr[i]\n    return sum_odd\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # initializing sum\n    sum = 0\n    # traverse the array\n    for i in range(len(arr)):\n        # sum of an array starting from 0th index\n        sum = sum + arr[i]\n        # add every sum using the formula\n        # sum = sum + (arr[i] * i)\n        # to get sum of odd length subarrays\n        if i % 2 == 1:\n            sum = sum + arr[i]\n    # return the final sum\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # if len(arr) < 1:\n    #     return -1\n    # start_index = 0\n    # result = 0\n    # length = len(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)-1):\n        if (i+1) % 2 == 1:\n            sum = sum + arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i)%2 == 1:\n                sum += arr[i:j+1]\n    return sum\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # converting rgb to hsv model\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0.0:\n        hue = 0.0\n    elif cmax == r:\n        hue = ((60.0 * ((g - b) / delta) + 360.0) % 360.0) / 360.0\n    elif cmax == g:\n        hue = ((60.0 * ((b - r) / delta) + 120.0) % 360.0) / 360.0\n    else:\n        hue = ((60.0 * ((r - g) / delta) + 240.0) % 360.0) / 360.0\n    saturation = delta / cmax\n    v = cmax\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_v = max(r, g, b)\n    min_v = min(r, g, b)\n    delta = max_v - min_v\n    if delta == 0:\n        h = 0\n        s = 0\n        v = max_v\n    else:\n        if r == max_v:\n            h = (g - b) / delta\n        elif g == max_v:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n        if h > 360:\n            h -= 360\n        if 0 <= h < 120:\n            s = delta / (max_v - min_v)\n        elif 120 <= h < 240:\n            s = delta / (max_v - min_v)\n        elif 240 <= h < 360:\n            s = delta / (max_v - min_v)\n    return h, s, v\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if s == 0.0:\n        v *= 0.0\n    else:\n        v *= 1.0\n        s /= 1.0\n    if (h == 0.0):\n        h = 360\n    h /= 60.0\n    i = int(h)\n    f = h - i\n    p = v * (1.0 - s)\n    q = v * (1.0 - s * f)\n    t = v * (1.0 - s * (1.0 - f))\n    r = v * (1.0 - s * (1.0 - f) * f)\n    if i == 0:\n        r, g, b = v, t, p\n    elif i == 1:\n        r, g, b = q, v, p\n    elif i == 2:\n        r, g, b = p, v, t\n    elif i == 3:\n        r, g, b = p, q, v\n    elif i == 4:\n        r, g, b = t, p, v\n    else:\n        r, g, b = v, p, q\n    return r, g, b\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # define the hsv value\n    hsv = {\n        'h' : 0,\n       's' : 0,\n        'v' : 0\n    }\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    if (r == 0.0 and g == 0.0 and b == 0.0):\n        return 0.0, 0.0, 0.0\n    min = float(min(r, g, b))\n    max = float(max(r, g, b))\n    delta = max - min\n    if delta == 0:\n        h = 0\n    elif max == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    if h < 0:\n        h += 360\n    s = 0 if min == max else delta / max\n    return h, s, s\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #Implementing hsv hue sat value.\n    if (max(r, g, b) == r):\n        h = (60 * ((g - r) / (max(r, g, b) - min(r, g, b))) + 360) % 360\n    elif (max(r, g, b) == g):\n        h = (60 * ((b - r) / (max(r, g, b) - min(r, g, b))) + 120) % 360\n    else:\n        h = (60 * ((r - g) / (max(r, g, b) - min(r, g, b))) + 240) % 360\n    if (max(r, g, b) == 0):\n        s = 0\n    else:\n        s = (max(r, g, b) / max(r, g, b)) * 100\n    if (r == g and g == b):\n        v = 100\n    else:\n        v = (max(r, g, b) / (max(r, g, b))) * 100\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    maximum = max(r, g, b)\n    minimum = min(r, g, b)\n    delta = maximum - minimum\n    if delta == 0:\n        h = 0\n    elif maximum == r:\n        h = (60 * (((g - b) / delta) % 6)) % 360\n    elif maximum == g:\n        h = (60 * (((b - r) / delta) + 2)) % 360\n    elif maximum == b:\n        h = (60 * (((r - g) / delta) + 4)) % 360\n    if maximum == 0:\n        s = 0\n    else:\n        s = delta / maximum\n    v = maximum\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if cmax == r:\n            h = 60 * ((g - b) / delta % 6)\n        elif cmax == g:\n            h = 120 + 60 * ((b - r) / delta % 6)\n        else:\n            h = 240 + 60 * ((r - g) / delta % 6)\n        h = h / 360\n        s = delta / cmax\n    if cmax == 0:\n        v = 0\n    else:\n        v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n        saturation = 0\n        value = 0\n    elif cmax == r:\n        hue = 60 * ((g - b) / delta % 6)\n        saturation = delta / cmax\n        value = cmax\n    elif cmax == g:\n        hue = 60 * ((b - r) / delta % 6) + 120\n        saturation = delta / cmax\n        value = cmax\n    elif cmax == b:\n        hue = 60 * ((r - g) / delta % 6) + 240\n        saturation = delta / cmax\n        value = cmax\n    \n    return hue, saturation, value\n    \ndef rgb_to_lab(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    def rgb_to_xyz(r, g, b):\n        # convert to XYZ\n        r, g, b = r/255.0, g/255.0, b/255.0\n        \n        # initialize values\n        x, y, z = 0, 0, 0\n        \n        # equations\n        # https://en.wikipedia.org/wiki/Lab_color_space#Relative_equations\n        # https://en.wikipedia.org/wiki/Lab_color_space#Non-linear_categories\n        # https://en.wikipedia.org/wiki/Lab_color_space#Relative_equations_for_colorants\n        y = 0.412453 * r + 0.35758 * g + 0.180423 * b\n        x = 0.212671 * r + 0.71516 * g + 0.072169 * b\n        z = 0.019334 * r + 0.119193 * g + 0.950227 * b\n        \n        return x, y, z\n    \n    def xyz_to_xyz(x, y, z):\n        # convert to XYZ\n        x, y, z = x/255.0, y/255.0, z/255.0\n        \n        # equations\n        # https://en.wikipedia.org/wiki/Lab_color_space#Relative_equations\n        # https://en.wikipedia.org/wiki/Lab_color_space#Non-linear_categories\n        # https://en.wikipedia.org/wiki/Lab_color_space#Relative_equations_for_colorants\n        X = (4*x - y - z) / (x + y + z)\n        Y = (x - y) / (x + y)\n        Z = (16 + y - 3 * z) / (x + 15 * y + 3 * z)\n        \n        return X, Y, Z\n    \n    # convert to XYZ\n    x, y, z = rgb_to_xyz(r, g, b)\n    \n    # convert to lab\n    cx, cy, cz = xyz_to_xyz(x, y, z)\n    \n    # convert to lab\n    h, s, v = rgb_to_hsv(cx, cy, cz)\n    \n    return h, s, v\n    \ndef rgb_to_luv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    def rgb_to_xyz(r, g, b):\n        # convert to XYZ\n        r, g, b = r/255.0, g/255.0, b/255.0\n        \n        # equations\n        # https://en.wikipedia.org/wiki/Lab_color_space#Relative_equations\n        # https://en.wikipedia.org/wiki/Lab_color_space#Non-linear_categories\n        # https://en.wikipedia.org/wiki/Lab_color_space#Relative_equations_for_colorants\n        y = 0.212671 * r + 0.71516 * g + 0.072169 * b\n        x = 0.019334 * r + 0.119193 * g + 0.950227 * b\n        z = 0.019334 * r + 0.119193 * g + 0.950227 * b\n        \n        return x, y, z\n    \n    def xyz_to_xyz(x, y, z):\n        # convert to XYZ\n        x, y, z = x/255.0, y/255.0, z/255.0\n        \n        # equations\n        # https://en.wikipedia.org/wiki/Lab_color_space#Relative_equations\n        # https://en.wikipedia.org/wiki/Lab_color_space#Non-linear_categories\n        # https://en.wikipedia.org/wiki/Lab_color_space#Relative_equations_for_colorants\n        X = (4*x - y - z) / (x + y + z)\n        Y = (x - y) / (x + y)\n        Z = (16 + y - 3 * z) / (x + 15 * y + 3 * z)\n        \n        return X, Y, Z\n    \n    # convert to XYZ\n    x, y, z = rgb_to_xyz(r, g, b)\n    \n    # convert to lab\n    cx, cy, cz = xyz_to_xyz(x, y, z)\n    \n    # convert to lab\n    h, s, v = rgb_to_hsv(cx, cy, cz)\n    \n    return h, s, v\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # define the ranges\n    max_hue = 360\n    min_saturation = 0\n    min_value = 0\n    max_value = 255\n    \n    # convert to degrees\n    h = h / max_hue\n    s = s / 100\n    v = v / 100\n    \n    # compute hue\n    hue = h * 6\n    \n    # compute the chroma\n    c = v * (1 - abs((hue / 60) % 2 - 1))\n    \n    # compute the saturation\n    s = v * (1 - s)\n    \n    # compute the value\n    val = v\n    \n    # convert to RGB\n    r, g, b = 0, 0, 0\n    \n    # compute r\n    if val <= (1 - s):\n        r = val\n    else:\n        r = val - (1 - s)\n        \n    # compute g\n    if (2/3) <= hue:\n        g = val\n    else:\n        g = val - ((2/3) - hue) * s\n        \n    # compute b\n    if (hue) >= (2/3):\n        b = val\n    else:\n        b = val - (((2/3) - hue) * s)\n        \n    # convert to RGB\n    r, g, b = int(r * 255), int(g * 255), int(b * 255)\n    \n    return r, g, b\n    \ndef luv_to_rgb(l, u, v):\n    '''\n    Write a function to convert luv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    def luv_to_xyz(l, u, v):\n        # convert to XYZ\n        l, u, v = l/100, u/100, v/100\n        \n        # equations\n        # https://en.wikipedia.org/wiki/Lab_color_space#Relative_eq"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in list1:\n        if(i%2 == 0):\n            even_prod *= i\n        else:\n            odd_prod *= i\n    return even_prod, odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(f\"Even number : {even}\")\n    print(f\"Odd number : {odd}\")\n    print(f\"Multiplication : {even[0] * odd[0]}\")\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    product_even_odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_numbers.append(list1[i])\n        else:\n            odd_numbers.append(list1[i])\n    product_even_odd = product_even_odd + even_numbers[0] * even_numbers[1]\n    for i in range(len(odd_numbers)):\n        product_even_odd = product_even_odd + odd_numbers[i]\n    print(product_even_odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(f'even list is: {even_list}')\n    print(f'odd list is: {odd_list}')\n    print(f'product is: {even_list[0]*odd_list[0]}')\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list_result = []\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if (i % 2) == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    for i in range(len(even)):\n        list_result.append(even[i] * odd[i])\n    return list_result\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list=[]\n    odd_list=[]\n    for num in list1:\n        if num%2==0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    prod_even=1\n    prod_odd=1\n    for num in even_list:\n        prod_even=prod_even*num\n    for num in odd_list:\n        prod_odd=prod_odd*num\n    return prod_even,prod_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    product_even = 1\n    product_odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            count_even += 1\n            product_even *= i\n        else:\n            count_odd += 1\n            product_odd *= i\n    if count_even > count_odd:\n        product = product_odd\n    else:\n        product = product_even\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even_prod *= list1[i]\n        else:\n            odd_prod *= list1[i]\n    return even_prod, odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in list1:\n        if i%2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in range(0, len(list1)):\n        if i%2==0:\n            result *= list1[i]\n        else:\n            result *= list1[i]\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str is None:\n        return ()\n    return tuple([int(x) for x in test_str.split(',')])\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return tuple(map(int, test_str.split(\",\")))\n    \n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    \n    return tuple(map(float, test_str.split(\",\")))\n    \n    \ndef tuple_str_string(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    \n    return tuple(test_str.split(\",\"))\n    \n    \ndef tuple_int_str(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").split()\n    \n    \ndef tuple_int_str_int(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").split()\n    \n    \ndef tuple_int_str_float(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").split()\n    \n    \ndef tuple_str_int_tuple(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return tuple(map(int, test_str.split(\"|\")))\n    \n    \ndef tuple_str_int_list(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return list(map(int, test_str.split(\"|\")))\n    \n    \ndef tuple_str_float_list(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return list(map(float, test_str.split(\"|\")))\n    \n    \ndef tuple_str_float_float_list(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return list(map(float, test_str.split(\"|\")))\n    \n    \ndef tuple_int_str_tuple(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_int_str_int_list(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_int_str_float_list(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_str_int_tuple_list(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return str(test_str).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_str_float_tuple_list(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return str(test_str).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_float_str_tuple(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_float_str_int_list(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_float_str_float_list(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_int_tuple_str(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_int_tuple_int(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_int_tuple_float(test_tup):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_str_tuple_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return str(test_str).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_str_tuple_float(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return str(test_str).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_str_tuple_str(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    return str(test_str).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_float_tuple_str(test_tup):\n    '''\n    Write a function to convert tuple float to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_float_tuple_int(test_tup):\n    '''\n    Write a function to convert tuple float to string tuple.\n    '''\n    \n    return str(test_tup).replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\" \").replace(\"'\",\"\").replace(\"-\",\"\").replace(\"|\",\",\").split(\",\")\n    \n    \ndef tuple_float_tuple_float(test_tup):\n    '''"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.strip(\"()\").split(\",\")\n    return tuple(int(i) for i in test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    l_test_str = list(test_str)\n    l_test_str.reverse()\n    for i in range(0,len(l_test_str)):\n        l_test_str[i] = int(l_test_str[i])\n    l_test_str.reverse()\n    return tuple(l_test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        if \",\" in test_str:\n            test_str = test_str.split(\",\")\n        return int(tuple(map(int,test_str)))\n    except ValueError:\n        raise TypeError(\"Wrong type of argument\")\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(item) for item in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a) - 1\n    while lo < hi:\n        mid = (lo + hi)//2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    if x <= a[l - 1]:\n        return l\n    else:\n        return bisect.bisect_right(a, x, l)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # index = bisect.bisect_right(a, x)\n    # if index == 0 or a[index-1] > x:\n    #     return index\n    # else:\n    #     return index - 1\n    index = bisect.bisect_right(a, x)\n    if index == 0 or a[index-1] > x:\n        return index\n    else:\n        return index - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x == a[mid]:\n            return mid\n        if x > a[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == 0:\n        return 0\n    if i == len(a):\n        return i\n    if x == a[i-1]:\n        return i\n    if x > a[i-1]:\n        return i\n    return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_right(a, x)\n    if i == n or a[i]!= x:\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return None\n    else:\n        return i\n    \na = [1,2,3,4,5]\nx = 6\nprint(right_insertion(a, x))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a: return 0\n    left = 0\n    right = len(a)-1\n    if x>a[right]: return right + 1\n    while left<=right:\n        mid = (left+right)//2\n        if x>a[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    if a[i] == x:\n        return i\n    return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if a[mid] == x:\n            return mid\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = re.compile(r\"ab{3}\")\n    mo = regex.search(text)\n    if mo:\n        return mo.group()\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #mo = re.search('ab*', text)\n    #print(mo.group())\n    return re.search('ab*', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'ab',text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'ab+b', text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(\"a.+b+b+b\")\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'ab*b', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'ab*b', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = re.compile(r'ab.*b.*b.*b')\n    if re.match(pat,text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(a)(b)(b)\")\n    match = pattern.match(text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list\n    new_list.append(test_str)\n    new_tuple = tuple(new_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple = new_tuple + tuple(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    print(\"String:\", test_str)\n    print(\"List:\", test_list)\n    new_list = []\n    for i in range(len(test_str)):\n        new_list.append(test_str[i])\n    new_tuple = tuple(new_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = tuple(test_list)\n    return (test_str, tup)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    temp_list = []\n    for i in range(0, len(test_str)):\n        temp_list.append(test_str[i])\n    result_tuple = tuple(temp_list)\n    return result_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str, )\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + list(test_str))\n    \ndef print_tuple(test_tuple):\n    '''\n    Print the tuple.\n    '''\n    for i in range(0, len(test_tuple)):\n        print(test_tuple[i])\n    return None\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = True\n    for i in range(0, len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if type(nums)!= list:\n        return False\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 0 for i in range(len(nums)))\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all([val % 2 == 0 for val in nums])\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # loop through list using range()\n    for index in range(len(nums)):\n        if index % 2!= 0:\n            # print(\"Index: {}\".format(index))\n            # print(\"Value: {}\".format(nums[index]))\n            if nums[index] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return True if all(n % 2 == 0 for n in nums) else False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    lst=[]\n    for i in range(len(nums)):\n        if(i%2==0 and nums[i]%2==0):\n            lst.append(True)\n        else:\n            lst.append(False)\n    return all(lst)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!=0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_positions = []\n    \n    for index, value in enumerate(nums):\n        if index % 2 == 0:\n            even_positions.append(value)\n    \n    if len(even_positions) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # even_pos = 0\n    # for i in range(len(nums)):\n    #     if nums[i] % 2 == 0:\n    #         even_pos = even_pos + 1\n    # if even_pos == len(nums):\n    #     return True\n    # else:\n    #     return False\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    i=0\n    for j in range(len(test_tup)-1):\n        if type(test_tup[j])==tuple:\n            i+=1\n            if i==1:\n                return (test_tup[0:j]+test_tup[j+1:])\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = test_tup[0]\n    for i in range(len(nested_tup)):\n        if type(nested_tup[i]) == tuple:\n            remove_nested(nested_tup[i])\n        else:\n            continue\n    print(test_tup)\n    #print(nested_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #print(test_tup)\n    res = []\n    for tup in test_tup:\n        res.append(tup)\n    return tuple(res)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for i in test_tup:\n        if type(i) == tuple:\n            lst.append(i[0])\n        else:\n            lst.append(i)\n    return tuple(lst)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        test_tup = (test_tup,)\n    # \n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for tup in test_tup:\n        if isinstance(tup, tuple):\n            return remove_nested(tup)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = []\n    for i in range(len(test_tup)):\n        if type(test_tup[i])==tuple:\n            for j in range(len(test_tup[i])):\n                if type(test_tup[i][j])==tuple:\n                    for k in range(len(test_tup[i][j])):\n                        if type(test_tup[i][j][k])==tuple:\n                            for m in range(len(test_tup[i][j][k])):\n                                if type(test_tup[i][j][k][m])==tuple:\n                                    for n in range(len(test_tup[i][j][k][m])):\n                                        if type(test_tup[i][j][k][m][n])==tuple:\n                                            tup.append(test_tup[i][j][k][m][n])\n                                        else:\n                                            continue\n                            else:\n                                continue\n                        else:\n                            continue\n                    else:\n                        continue\n                else:\n                    continue\n            else:\n                continue\n        else:\n            continue\n    else:\n        return tup\n    \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if test_tup[0] == ():\n        return test_tup[1]\n    return (test_tup[0], remove_nested(test_tup[1]))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(i for i in test_tup if i!= tuple(i))\n    \n    \ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove duplicates from the given tuple.\n    '''\n    return tuple(set(test_tup))\n    \ndef main():\n    '''\n    Write a function to sort the tuples in the given tuple.\n    '''\n    # (('a', 1), ('b', 2), ('c', 2), ('d', 1), ('e', 2))\n    test_tup = (('a', 1), ('b', 2), ('c', 2), ('d', 1), ('e', 2))\n    \n    # remove duplicates\n    print(remove_duplicates(test_tup))\n    \n    # remove nested tuples\n    print(remove_nested(test_tup))\n    \n    # remove tuples with duplicates\n    print(remove_duplicates_with_hashmap(test_tup))\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    list = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            list.append(i)\n        else:\n            list.append(i)\n    return tuple(list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    i=0\n    for i in range(len(input_list)):\n        if(isinstance(input_list[i],list)):\n            i=i+1\n    return i\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for ele in input_list:\n        if type(ele) == type([]):\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i,list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_of_list = 0\n    for ele in input_list:\n        if isinstance(ele,list):\n            num_of_list += 1\n    return num_of_list\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    while i<len(arr)-1:\n        i+=1\n        if arr[i]==x:\n            break\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while(l<=r):\n        mid=l+(r-l)//2\n        if arr[mid]<x:\n            l=mid+1\n        else:\n            r=mid-1\n    return r\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return -1\n    start=0\n    end=len(arr)-1\n    while start<end:\n        mid=(start+end)//2\n        if arr[mid]==x:\n            end=mid\n        elif arr[mid]>x:\n            end=mid-1\n        else:\n            start=mid+1\n    return end\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    h=len(arr)-1\n    while(l<=h):\n        mid=l+(h-l)/2\n        if arr[mid]<x:\n            l=mid+1\n        elif arr[mid]>x:\n            h=mid-1\n        else:\n            return mid\n    return -1\nprint(last([3,4,5,1,2],3))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    size = len(arr)\n    if size <= 1:\n        return -1\n    else:\n        middle = int(size/2)\n        if arr[middle] == x:\n            return middle\n        elif arr[middle] > x:\n            return last(arr[0:middle],x)\n        else:\n            return last(arr[middle+1:size],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] == x:\n            return i\n    return -1\narr = input('Enter the array elements: ').split()\narr = list(map(int,arr))\nx = int(input('Enter the element: '))\nprint(last(arr,x))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr or arr[-1] == x:\n        return -1\n    if arr[-1] > x:\n        return len(arr)-1\n    for i in range(len(arr)-2,-1,-1):\n        if arr[i] <= x and arr[i+1] >= x:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    elif len(arr)==1:\n        return 0\n    elif arr[len(arr)-1]==x:\n        return len(arr)-1\n    elif arr[0]==x:\n        return 0\n    else:\n        mid=int(len(arr)/2)\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]<x:\n            return last(arr[mid+1:],x)\n        else:\n            return last(arr[:mid],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length=len(arr)\n    if length==0:\n        return -1\n    if length==1:\n        if x==arr[0]:\n            return 0\n        else:\n            return -1\n    if length>1:\n        if x==arr[length-1]:\n            return length-1\n        else:\n            return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    mid = (lo + hi) // 2\n    \n    while lo < hi and arr[mid]!= x:\n        if arr[mid] > x:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n        mid = (lo + hi) // 2\n    \n    if arr[mid] == x:\n        return mid\n    else:\n        return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p = re.compile('a.*b')\n    m = p.search(text)\n    return m\n    \ndef test_text_starta_endb():\n    assert text_starta_endb('abc') == None\n    assert text_starta_endb('abcabc') == None\n    assert text_starta_endb('abcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabc') == None\n    assert text_starta_endb('abcdabcd') == None\n    assert text_starta_endb('aabcdef') == None\n    assert text_starta_endb('aabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabc') == None\n    assert text_starta_endb('abcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta_endb('abcabcabcabcabcabcabc') == None\n    assert text_starta"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    return re.match(r'a[\\w]*b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$')\n    match = regex.search(text)\n    return match is not None\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a[a-z]+b$')\n    mo = regex.search(text)\n    if mo:\n        print('found')\n        return mo.group()\n    else:\n        print('not found')\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = \"a\"\n    b = \"b\"\n    pat = a+\".*\"+b\n    match = re.search(pat, text)\n    if match:\n        return match.span()\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.b'\n    if re.search(pattern,text) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    s = r\"^a(.*)b$\"\n    m = re.match(s, text)\n    if m:\n        return m.groups()\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*?)b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.compile('^a.*?b$')\n    m = text.match(text)\n    if m:\n        print(\"Match Found\")\n    else:\n        print(\"No Match\")\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search('^a.*b$',text):\n        print('Pattern found')\n    else:\n        print('Not found')\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not isinstance(dict, dict):\n        raise TypeError\n    else:\n        sum = 0\n        for i in dict:\n            if isinstance(i, int) or isinstance(i, float):\n                sum += i\n        return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    try:\n        sum = 0\n        for i in dict.values():\n            sum += i\n        return sum\n    except ValueError as e:\n        print(e)\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\nprint(return_sum({1:10, 2:20, 3:30, 4:40}))\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Your code here\n    s=0\n    for i in dict.keys():\n        s+=dict[i]\n    return s\n    \ndef return_count(dict):\n    '''\n    Write function to find the count of the given key.\n    '''\n    # Your code here\n    count=0\n    for i in dict.keys():\n        if i==key:\n            count+=1\n    return count\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 1: \n        odd_sum = 0\n        for i in range(n + 1): \n            if i % 2!= 0: \n                odd_sum = odd_sum + i \n        return odd_sum\n    else:\n        return 0\n    \n    # Python code to sum all the odd numbers within the range l and r \n    # try: \n    #     sum = 0\n    #     for i in range(l, r + 1): \n    #         if i % 2!= 0: \n    #             sum = sum + i \n    #     return sum\n    # except Exception as e: \n    #     print(e) \n    #     return 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    x = 0\n    for i in range(l, r+1):\n        if i%2!= 0:\n            x += i\n    return x\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, 100\n    s = 0\n    while l <= r:\n        if l % 2!= 0:\n            s = s + l\n        l = l + 1\n    print(s)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    n_1 = 0\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            n_1 = n_1 + i\n    return n_1\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1,n):\n        if(i % 2!= 0):\n            s = s + i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n < 0):\n        raise ValueError(\"Negative number\")\n    # Write your solution below:\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_odd(n - 2)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n+1) if i%2!=0)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Start with l and r\n    l = 1\n    r = 6\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through from l to r\n    while l <= r:\n        if l % 2 == 1:\n            sum += l\n        l += 1\n    \n    # Print the final sum\n    print(sum)\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n*(n+1))//2\n    \nprint(sum_odd(20))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%2!=0):\n            sum=sum+i\n    return sum\n    \ndef fibonacci(n):\n    '''\n    Write a python function to return the nth fibonacci number.\n    '''\n    a=1\n    b=1\n    c=0\n    if(n==0):\n        return a\n    elif(n==1):\n        return b\n    else:\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n        return c\n        \ndef reverse_word_order(s):\n    '''\n    Write a python function to return a string in which the words are arranged in reverse order.\n    '''\n    rstr=\"\"\n    for i in s.split(\" \"):\n        rstr=i+\" \"+rstr\n    return rstr\n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to return the sum of the digits in a number.\n    '''\n    sum=0\n    while n>0:\n        rem=n%10\n        sum=sum+rem\n        n=n//10\n    return sum\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    reversed=reverse_word_order(s)\n    if(reversed==s):\n        return True\n    return False\n    \ndef is_palindrome_rec(s,low=0,high=None):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    if(low==high):\n        return low==len(s)\n    else:\n        if(s[low]!=s[high]):\n            return False\n        else:\n            return is_palindrome_rec(s,low+1,high-1)\n            \ndef palindrome_checker(s):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return is_palindrome(s)\n    \ndef single_letter_count(word):\n    '''\n    Write a python function to count the number of single letters in a word.\n    '''\n    c=0\n    for i in word:\n        if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u'):\n            c=c+1\n    return c\n    \ndef count_char(word,char):\n    '''\n    Write a python function to count the number of times a particular character appears in a word.\n    '''\n    c=0\n    for i in word:\n        if(i==char):\n            c=c+1\n    return c\n    \ndef sum_of_multiples(n,m):\n    '''\n    Write a python function to calculate the sum of the multiples of 3 and 5 between 0 to n.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%m==0):\n            sum=sum+i\n    return sum\n    \ndef palindrome_reverse(word):\n    '''\n    Write a python function to reverse a word using recursion.\n    '''\n    if(len(word)==1):\n        return word\n    else:\n        return word[-1]+palindrome_reverse(word[:-1])\n    \ndef palindrome_reverse_recursive(word):\n    '''\n    Write a python function to reverse a word using recursion.\n    '''\n    if(len(word)==1):\n        return word\n    else:\n        return word[-1]+palindrome_reverse_recursive(word[:-1])\n    \ndef no_of_substring(s,char):\n    '''\n    Write a python function to count the number of times a particular substring appears in a word.\n    '''\n    count=0\n    for i in range(len(s)):\n        if(s[i:i+len(char)]==char):\n            count=count+1\n    return count\n    \ndef sum_of_number(n):\n    '''\n    Write a python function to sum of digits in a number.\n    '''\n    s=0\n    while(n>0):\n        r=n%10\n        s=s+r\n        n=n//10\n    return s\n    \ndef sum_of_number_rec(n):\n    '''\n    Write a python function to sum of digits in a number.\n    '''\n    if(n==0):\n        return 0\n    else:\n        return n+sum_of_number_rec(n//10)\n    \ndef is_power_of_2(n):\n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return True\n    else:\n        return is_power_of_2(n//2)\n    \ndef is_power_of_3(n):\n    '''\n    Write a python function to check whether the given number is a power of 3 or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return True\n    else:\n        return is_power_of_3(n//3)\n    \ndef is_power_of_5(n):\n    '''\n    Write a python function to check whether the given number is a power of 5 or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return True\n    else:\n        return is_power_of_5(n//5)\n    \ndef is_power_of_7(n):\n    '''\n    Write a python function to check whether the given number is a power of 7 or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return True\n    else:\n        return is_power_of_7(n//7)\n    \ndef number_divisible_by_two(n):\n    '''\n    Write a python function to check whether the given number is divisible by 2 or not.\n    '''\n    if(n%2==0):\n        return True\n    return False\n    \ndef number_divisible_by_two_rec(n):\n    '''\n    Write a python function to check whether the given number is divisible by 2 or not.\n    '''\n    if(n==0):\n        return True\n    elif(n==1):\n        return True\n    elif(n==2):\n        return True\n    else:\n        return number_divisible_by_two_rec(n//2)\n    \ndef check_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if(n==1):\n        return False\n    elif(n==2):\n        return True\n    else:\n        for i in range(2,n):\n            if(n%i==0):\n                return False\n    return True\n    \ndef check_prime_rec(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if(n==1):\n        return False\n    elif(n==2):\n        return True\n    else:\n        return check_prime_rec(n-1)\n    \ndef check_prime_divisible_by_2_3_5(n):\n    '''\n    Write a python function to check whether the given number is divisible by 2,3,5 or not.\n    '''\n    if(n%2==0 or n%3==0 or n%5==0):\n        return True\n    return False\n    \ndef check_prime_divisible_by_2_3_5_rec(n):\n    '''\n    Write a python function to check whether the given number is divisible by 2,3,5 or not.\n    '''\n    if(n==1):\n        return False\n    elif(n%2==0 or n%3==0 or n%"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s+=i\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    _sum = 0\n    for i in range(len(arr)):\n        _sum += arr[i]\n    return _sum\n    \n    \ndef _max(arr):\n    '''\n    Write a python function to find the max of an array.\n    '''\n    _max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > _max:\n            _max = arr[i]\n    return _max\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i]\n    return result\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum=sum+arr[i]\n    return sum\nprint(_sum([1,2,3,4,5]))\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #write your code here\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    summ = 0\n    for i in arr:\n        summ = summ + i\n    return summ\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Bit-shifting method\n    # return (n << d | n >> (32 - d)) & 0xffffffff\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #a = \"1011\"\n    #a = \"00010010\"\n    #a = \"00100000\"\n    #a = \"00110010\"\n    #a = \"00000111\"\n    a = bin(n)\n    b = bin(d)\n    c = a[2:]\n    d = c+b\n    print (d)\n    e = int(d,2)\n    return e\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    a=1<<(d)\n    b=(n << d) | ((n & a)>>(32-d))\n    return b\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # pythonic way:\n    # num = int(bin(n)[2:])\n    # num = int(num[d:] + num[:d], 2)\n    # for i in range(d):\n    #     num = num << 1\n    # return num\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    bit_shift = (n << d) | ((n >> (32 - d)) & (0xffffffff))\n    return bit_shift\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # write your code here\n    # convert the number to binary format\n    a = bin(n)\n    # find the number of bits in the number\n    r = len(a)-2\n    # split the binary number into individual bits\n    b = a[2:]\n    # keep shifting the bits left by d bits\n    c = '0'*d+b[:r]\n    # convert back to decimal\n    d = int(c,2)\n    return d\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = re.sub('\\s+','', text)\n    return result\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\n    pass\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"The number of equal numbers are:\",x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y==z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if(x == y) and (x == z):\n        count += 1\n    elif (x == y) or (x == z):\n        count += 1\n    elif (y == z):\n        count += 1\n    print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert (x == y == z) == True, \"x, y, z are not equal\"\n    print(\"x, y, z are equal\")\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    count = 0\n    if x == y and x == z:\n        count = count + 1\n    if y == x and y == z:\n        count = count + 1\n    if z == x and z == y:\n        count = count + 1\n    if count == 0:\n        print(\"No number is equal\")\n    else:\n        print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if x == y == z:\n        count+=1\n    if x == y!= z:\n        count+=1\n    if x!= y == z:\n        count+=1\n    if x!= y!= z:\n        count+=1\n    return count\n        \n    \n    \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def isSorted(arr, i, j):\n        for k in range(i, j):\n            if arr[k] > arr[k+1]:\n                return False\n        return True\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    size = len(arr)\n    c1,c2=0,0\n    start = 0\n    end = size-1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    max_element=arr[-1]\n    low=0\n    high=n-1\n    print(max_element)\n    while low<=high:\n        mid=(low+high)//2\n        # print(low,mid,high)\n        if mid+1<n and arr[mid+1]>arr[mid]:\n            # mid+=1\n            print(\"mid\",mid)\n            print(arr)\n            break\n        if mid-1>=0 and arr[mid-1]>arr[mid]:\n            # mid-=1\n            print(\"mid\",mid)\n            print(arr)\n            break\n        if arr[mid]>arr[high]:\n            low=mid+1\n        elif arr[mid]<arr[high]:\n            high=mid-1\n    return low\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    print(arr)\n    count = 0\n    i = 1\n    j = len(arr) - 1\n    if(arr[i] >= arr[j]):\n        return 0\n    while(i < j):\n        while(arr[i] <= arr[j]):\n            i += 1\n        while(arr[j] >= arr[i]):\n            j -= 1\n        count += 1\n    return count\n        \nif __name__ == \"__main__\":\n    print(count_rotation([10,20, 30,40,50,60,70,80,90,100]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]))\n    print(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    '''\n    An array A consisting of N integers is given. The consecutive elements of array A represent consecutive cars on a road.\n    \n    Array A contains only 0s and/or 1s:\n    \n    0 represents a car traveling east,\n    1 represents a car traveling west.\n    The goal is to count the number of pairs of cars that will make a road of straight length K.\n    \n    For example, consider array A such that:\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Write your code here\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-1):\n            if arr[i] > arr[j+1]:\n                temp = arr[i]\n                arr[i] = arr[j+1]\n                arr[j+1] = temp\n                count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    l = len(arr)\n    for i in range(l-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    while left <= right:\n        count += 1\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            temp = arr[left]\n            arr[left] = arr[right]\n            arr[right] = temp\n            left += 1\n            right -= 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    length = len(arr)\n    while arr!= sorted(arr):\n        count+=1\n        temp = arr[0]\n        for i in range(length):\n            if arr[i] < temp:\n                temp = arr[i]\n        arr[0] = temp\n        arr = arr[1:]\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq = int(math.sqrt(n))\n    if sq * sq == n:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #return abs(n ** 0.5 - int(n ** 0.5)) < 1e-6\n    return (int(n ** 0.5) ** 2 == n)\n    \n    \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while(i*i <= n) :\n        if(n%i==0) :\n            if(i*i == n) :\n                return True\n            else:\n                return False\n        i += 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n < 2:\n    #     return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Corner cases\n    if (n <= 0) :\n        return False\n    if (n == 1) :\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return int(sqrt(n))**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i*i <= n:\n        if i * i == n:\n            return True\n        i = i + 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # code here\n    \n    if n < 2:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if int(n**0.5) == n**0.5:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if not arr:\n        return False\n    return sum(arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # print(\"Check if the product of numbers in a list is even or not\")\n    # print(\"\\n\")\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr[0] * arr[1] * arr[2] == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return False\n    \n    total = 1\n    for i in arr:\n        total *= i\n    \n    return total % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == []:\n        return False\n    return arr[0] * arr[1] % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even_product = 1\n    for i in arr:\n        even_product = even_product * i\n    return even_product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = 1\n    while (n <= len(arr)):\n        #print(n)\n        #print(arr[n-1])\n        #print(arr[n-2])\n        #print(arr[n-3])\n        #print(arr[n-4])\n        #print(arr[n-5])\n        #print(arr[n-6])\n        #print(arr[n-7])\n        #print(arr[n-8])\n        #print(arr[n-9])\n        if n <= len(arr)-2:\n            if (arr[n-1]*arr[n-2]*arr[n-3]*arr[n-4]*arr[n-5]*arr[n-6]*arr[n-7]*arr[n-8]*arr[n-9] == 0):\n                print(arr[n-1]*arr[n-2]*arr[n-3]*arr[n-4]*arr[n-5]*arr[n-6]*arr[n-7]*arr[n-8]*arr[n-9])\n                return True\n            else:\n                n += 1\n        else:\n            return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        return (arr[0] * arr[1]) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    if arr[0] == 0:\n        return False\n    if arr[1] == 0:\n        return True\n    if arr[0]!= 0 and arr[1]!= 0:\n        return True\n    return False\nprint(is_product_even([2,0,0,2,4]))\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return 0\n    list_sum = 0\n    max_sum = 0\n    for i in range(len(lists)):\n        list_sum = 0\n        for j in range(len(lists[i])):\n            list_sum += lists[i][j]\n        if list_sum > max_sum:\n            max_sum = list_sum\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = 0\n    max_list = []\n    for i in lists:\n        if sum(i) > highest:\n            highest = sum(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    highest = []\n    if len(lists) == 1:\n        return lists\n    if len(lists) == 0:\n        return lists\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if i!= j:\n                new_sum = sum(lists[i][0:j]) + sum(lists[j][0:i])\n                if new_sum > max_sum:\n                    max_sum = new_sum\n                    highest = lists[i]\n                    highest.extend(lists[j])\n    return highest\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for i in range(0,len(lists)):\n        lists[i].sort()\n    \n    max_sum = 0\n    for i in range(0,len(lists)):\n        max_sum = max(max_sum,lists[i][-1]+lists[i][-2]+lists[i][-3])\n        \n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    lists.sort(key=lambda l: l[0])\n    sum_list = 0\n    max_list = []\n    for i in range(0, len(lists)):\n        sum_list += lists[i][0]\n        if(sum_list > max_list[0]):\n            max_list = []\n            max_list.append(lists[i])\n        elif(sum_list == max_list[0]):\n            max_list.append(lists[i])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n    list1 = max_sum_list(lists[1:])\n    list2 = []\n    for i in range(len(lists[0])):\n        list2.append(lists[0][i] + list1[i])\n    return list2\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if i == j:\n                continue\n            temp_sum = 0\n            temp_sum += lists[i][j]\n            temp_sum += lists[j][i]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_sum_list = lists[i][j], lists[j][i]\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            temp = lists[i][j]\n            if temp > max_sum:\n                max_sum = temp\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for index, item in enumerate(lists):\n        if max_sum < sum(lists[index]):\n            max_sum = sum(lists[index])\n            max_list = lists[index]\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    c = 0\n    res = []\n    for i in test_str:\n        if i.isupper():\n            c = c + 1\n            if len(res) == 0:\n                res.append(i)\n            else:\n                if i < res[-1]:\n                    res.pop()\n                    res.append(i)\n                else:\n                    res.append(i)\n        else:\n            c = 0\n    \n    return len(res)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    length = len(test_str)\n    count = 0\n    max_length = 0\n    for i in range(0, length):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        max_length = max(max_length, count)\n    return max_length\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    length_dict = {}\n    length_list = []\n    for i in range(len(test_str)):\n        if test_str[i] in length_dict:\n            length_dict[test_str[i]] += 1\n        else:\n            length_dict[test_str[i]] = 1\n    print(length_dict)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    char_max = 0\n    for i in range(len(test_str)):\n        if test_str[i] >= test_str[char_max]:\n            char_max = i\n    return char_max\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # base case - if input is empty return 0\n    if not test_str:\n        return 0\n    # keep track of last occurrence of each letter\n    last_occurrence = dict()\n    last_occurrence['A'] = -1\n    last_occurrence['Z'] = -1\n    \n    # find max_length\n    max_length = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'A' or test_str[i] == 'Z':\n            last_occurrence[test_str[i]] = i\n            if i - last_occurrence['Z'] > max_length:\n                max_length = i - last_occurrence['Z']\n            if i - last_occurrence['A'] > max_length:\n                max_length = i - last_occurrence['A']\n        else:\n            if i - last_occurrence['Z'] > max_length:\n                max_length = i - last_occurrence['Z']\n            if i - last_occurrence['A'] > max_length:\n                max_length = i - last_occurrence['A']\n    \n    return max_length\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    curr_char = \"\"\n    for c in test_str:\n        if c.isupper():\n            if c == curr_char:\n                curr_run += 1\n            else:\n                curr_run = 1\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_char = c\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # a) Time complexity:\n    # Time Complexity : O(n)O(n)\n    # space complexity: O(1)O(1)\n    # b) Runtime and Space complexity:\n    # The runtime and space compelixty are the same as the question.\n    # This question is a key question to find the maximum run of uppercase character.\n    \n    max_run = 1\n    i = 0\n    while i < len(test_str)-1:\n        if test_str[i].isupper():\n            i += 1\n        else:\n            i += 1\n            max_run = max(max_run,i-i-1)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # max_count = 0\n    # count = 0\n    # for i in range(len(test_str)):\n    #     if test_str[i].isupper() and max_count < i:\n    #         max_count = i\n    #         count = 1\n    #     elif test_str[i].isupper() and max_count == i:\n    #         count += 1\n    #     else:\n    #         if count > max_count:\n    #             max_count = count\n    # return max_count\n    # two pointer approach\n    n = len(test_str)\n    if n == 0:\n        return 0\n    count = 0\n    i = 0\n    while i < n:\n        if test_str[i].isupper():\n            count = 1\n            while i < n and test_str[i].isupper():\n                count += 1\n                i += 1\n        else:\n            i += 1\n            if count > i - i:\n                i = count\n            else:\n                i += 1\n    return i\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x % 2 == 1:\n            return x\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2 == 1:\n            return num\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return(nums[0] if (nums[0] % 2 == 1) else None)\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # if the input list is empty, return None\n    if not nums:\n        return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums = set(nums)\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    else:\n        return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in range(len(nums)):\n        if nums[x] % 2!= 0:\n            return nums[x]\n    return -1\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Solution 1\n    # if test_tup[0]==test_tup[1] and test_tup[0]!=test_tup[2]:\n    #     return True\n    # if test_tup[2]==test_tup[0] and test_tup[2]!=test_tup[1]:\n    #     return True\n    # return False\n    # Solution 2\n    if test_tup[0]==test_tup[1] or test_tup[0]==test_tup[2] or test_tup[2]==test_tup[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    match = False\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            match = True\n            break\n    return match\n    \ndef get_2nd_K(test_tup, K):\n    '''\n    Write a function to get the second k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return i + 1\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0]==K and test_tup[1]==K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K or test_tup[1] == K or test_tup[2] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for test in test_tup:\n        if test[0] == K or test[1] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    K_flag = False\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == K:\n            K_flag = True\n        elif test_tup[i][1] == K:\n            K_flag = True\n        elif test_tup[i][2] == K:\n            K_flag = True\n        else:\n            continue\n    return K_flag\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for k in K:\n        if k not in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(x < y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] > test_tup1[i]:\n                return False\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            count += 1\n    return count == len(test_tup2)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1 < test_tup2\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(test_tup1[i] <= test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n        else:\n            return False\n    \nprint(check_smaller((1,2,3,4,5,6),(2,3,6,7,8,9)))"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n    \ncheck_smaller((5, 9, 2, 5, -5, 20), (1, 3, 2, 3, 4, 5))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]\n"
    }
]