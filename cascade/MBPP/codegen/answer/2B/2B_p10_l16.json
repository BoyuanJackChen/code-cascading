[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n    shared_elements = list(set_1.intersection(set_2))\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(test_tup1)):\n        list1.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        list2.append(test_tup2[i])\n    list1.sort()\n    list2.sort()\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] == list2[j]:\n            print(list1[i])\n            i += 1\n            j += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    elements = []\n    if len(test_tup1) < len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] in test_tup2:\n                elements.append(test_tup1[i])\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup2[i] in test_tup1:\n                elements.append(test_tup2[i])\n    return elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for element in test_tup1:\n        if element in test_tup2:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list_1 = test_tup1[0]\n    list_2 = test_tup2[0]\n    list_3 = test_tup1[1]\n    list_4 = test_tup2[1]\n    \n    for i in range(len(list_1)):\n        if list_1[i] in list_2 and list_1[i] in list_3 and list_1[i] in list_4:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    if len(test_tup1) > len(test_tup2):\n        list1, list2 = test_tup1, test_tup2\n    else:\n        list1, list2 = test_tup2, test_tup1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n <= 1):\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            return False\n    \n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n%i==0:\n            return False\n    return True\ndef factorize(n):\n    '''\n    Write a python function to factorize the number.\n    '''\n    if n<=0:\n        return False\n    if n==1:\n        return [1]\n    factor=[]\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            factor.append(i)\n    return factor+factorize(n//i)\n    \ndef compute_chunks(lst, n):\n    '''\n    Write a python function to compute chunks of a list.\n    '''\n    if lst==[]:\n        return []\n    if len(lst)%n==0:\n        return [[lst[i] for i in range(0, len(lst), n)]]\n    return [[lst[i] for i in range(0, len(lst), n)]]+compute_chunks(lst, n)\ndef mult_chunks(lst):\n    '''\n    Write a python function to multiply all the chunk in the list.\n    '''\n    if lst==[]:\n        return 1\n    res=1\n    for i in lst:\n        res*=i\n    return res\ndef compute_gcd(a,b):\n    '''\n    Write a python function to compute GCD of two numbers.\n    '''\n    while b!=0:\n        c=a%b\n        a=b\n        b=c\n    return a\ndef compute_lcm(a,b):\n    '''\n    Write a python function to compute LCM of two numbers.\n    '''\n    return a*b//compute_gcd(a,b)\ndef compute_min(a,b):\n    '''\n    Write a python function to compute minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    return b\ndef compute_max(a,b):\n    '''\n    Write a python function to compute maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\ndef compute_sum(lst):\n    '''\n    Write a python function to compute sum of list of numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        return lst[0]+compute_sum(lst[1:])\n    else:\n        return compute_sum(lst[1:])\ndef compute_product(lst):\n    '''\n    Write a python function to compute product of list of numbers.\n    '''\n    if lst==[]:\n        return 1\n    if isinstance(lst[0], int):\n        return lst[0]*compute_product(lst[1:])\n    else:\n        return compute_product(lst[1:])\ndef compute_fibonacci(n):\n    '''\n    Write a python function to compute Fibonacci numbers.\n    '''\n    if n==0 or n==1:\n        return 1\n    return compute_fibonacci(n-1)+compute_fibonacci(n-2)\ndef compute_doubling_time(lst):\n    '''\n    Write a python function to compute doubling time of list of numbers.\n    '''\n    return compute_sum(lst)/2\ndef compute_sum_of_squares(lst):\n    '''\n    Write a python function to compute sum of squares of list of numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        return lst[0]**2+compute_sum_of_squares(lst[1:])\n    else:\n        return compute_sum_of_squares(lst[1:])\ndef compute_average(lst):\n    '''\n    Write a python function to compute average of list of numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        return lst[0]/len(lst)\n    return compute_average(lst[1:])\ndef compute_median(lst):\n    '''\n    Write a python function to compute median of list of numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        return lst[0]\n    return compute_median(sorted(lst))\ndef compute_variance(lst):\n    '''\n    Write a python function to compute variance of list of numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        return (compute_sum_of_squares(lst)-compute_sum(lst)**2/len(lst))/len(lst)\n    return compute_variance(sorted(lst))\ndef compute_standard_deviation(lst):\n    '''\n    Write a python function to compute standard deviation of list of numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        return math.sqrt(compute_variance(lst))\n    return compute_standard_deviation(sorted(lst))\ndef compute_std_deviation(n,m):\n    '''\n    Write a python function to compute standard deviation of two numbers.\n    '''\n    if n<0 or m<0:\n        return 0\n    return (n-m)**2\ndef compute_mean(lst):\n    '''\n    Write a python function to compute mean of list of numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        return compute_sum(lst)/len(lst)\n    return compute_mean(sorted(lst))\ndef compute_mode(lst):\n    '''\n    Write a python function to compute mode of list of numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        cnt=1\n        max_elm=-1\n        max_count=-1\n        for i in lst:\n            if i!=max_elm:\n                max_count=0\n            if i==max_elm:\n                max_count+=1\n            if max_count>cnt:\n                max_count=cnt\n                max_elm=i\n        return max_elm\n    return compute_mode(sorted(lst))\ndef compute_median_of_three(lst):\n    '''\n    Write a python function to compute median of three numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        return sorted(lst)[1]\n    if isinstance(lst[0], float):\n        return sorted(lst)[1]\n    return compute_median_of_three(sorted(lst)[:3])\ndef compute_average_of_triangle(lst):\n    '''\n    Write a python function to compute average of triangle of numbers.\n    '''\n    if lst==[]:\n        return 0\n    if isinstance(lst[0], int):\n        return compute_average_of_triangle(sorted(lst)[:3])\n    return compute_average_of_triangle(sorted(lst)[1:3])\ndef compute_square(n):\n    '''\n    Write a python function to compute square of number.\n    '''\n    if n==0:\n        return 0\n    if isinstance(n, int):\n        return n**2\n    return compute_square(n[0])*"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    if(n == 1):\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n <= 1):\n        return False\n    if(n == 2):\n        return True\n    for i in range(2, n):\n        if(n % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2!= 0 and n!= 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    while True:\n        if n == 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    prime_list=[]\n    if n > 1:\n        for i in range(2,n):\n            if n % i == 0:\n                prime_list.append(i)\n                break\n    else:\n        prime_list.append(n)\n    if len(prime_list) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h=[]\n    for i in range(n):\n        h.append(nums[i])\n    hq.heapify(h)\n    for i in range(n,len(nums)):\n        if nums[i]>h[0]:\n            hq.heappushpop(h,nums[i])\n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q = []\n    for num in nums:\n        hq.heappush(q, -num)\n    for _ in range(n):\n        q.pop()\n    return q\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #create heap\n    heap = nums[0:n]\n    #heapify\n    for i in range(n,len(nums)):\n        if nums[i]>=heap[0]:\n            continue\n        else:\n            hq.heapify(heap)\n        hq.heappush(heap,nums[i])\n    #return the heap\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums or n<1 or n>len(nums):\n        return []\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n>len(nums):\n        print(\"Not enough elements.\")\n        return\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    ans = []\n    h = nums[:n]\n    hq.heapify(h)\n    for i in range(n,len(nums)):\n        if nums[i] > h[0]:\n            hq.heapreplace(h,nums[i])\n        else:\n            hq.heapreplace(h,h[0])\n            hq.heapreplace(h,nums[i])\n    for i in h:\n        ans.append(i)\n    return ans\n    \nprint(heap_queue_largest([-1,2,3,4,-5],2)) # [4,-5,-1,3]\nprint(heap_queue_largest([2,1,3,4,-5],2)) # [-5,2,3,4]\nprint(heap_queue_largest([-1,2,3,4,-5],3)) # [-5,-1,3,4]\nprint(heap_queue_largest([],1)) # []\nprint(heap_queue_largest([],0)) # []\nprint(heap_queue_largest([-1,-2,3,4,5],1)) # [-1]\nprint(heap_queue_largest([1,1,1],1)) # []\nprint(heap_queue_largest([1,1,1],2)) # [-1,1]\nprint(heap_queue_largest([1,1,1],3)) # [-1,1,1]\nprint(heap_queue_largest([1,1,1],4)) # [-1,1,1,1]\nprint(heap_queue_largest([1,1,1],5)) # [-1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1],6)) # [-1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1],7)) # [-1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1],8)) # [-1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1],9)) # [-1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1],10)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],11)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],12)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],13)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],14)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],15)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],16)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],17)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],18)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],19)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],20)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],21)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],22)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\nprint(heap_queue_largest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],23)) # [-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    heap = nums[:n]\n    hq.heapify(heap)\n    result = []\n    while heap:\n        result.append(heap[0])\n        heap[0] = heapq.heappop(heap)\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums==None or len(nums)<=0:\n        return []\n    heapq.heapify(nums)\n    res=[]\n    for i in range(n):\n        res.append(heapq.heappop(nums))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums==[]:\n        return []\n    min_heap=[]\n    for i in range(n):\n        hq.heappush(min_heap,nums[i])\n    return list(hq.heappop(min_heap) for _ in range(n))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == len(nums): return nums\n    h = []\n    for i in range(n):\n        hq.heappush(h, nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] > h[0]:\n            hq.heapreplace(h, nums[i])\n    return h\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0 : \n        return True\n    else : \n        return False\n        \n    \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = 0\n    if x == 0:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    result = 1\n    while result<=x:\n        result=result<<1\n    if result==x:\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!=0:\n        rem = x % 10\n        x = x // 10\n        if rem!=0:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>0:\n        while x:\n            if x%2:\n                return False\n            x>>=1\n        return True\n    return False\n    \ndef is_Power_Of_Two(x):\n    '''\n    Write a Python program to check whether a number is power of two.\n    '''\n    if x>0:\n        return x & -x == x\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    flag = 0\n    while (x > 0):\n        flag = flag + (x & 1)\n        x = x >> 1\n    return flag\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        if x%2==0:\n            return True\n        x = x // 2\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Printing \"NO\" if x and y are same values\n    if x == y:\n        print(\"NO\")\n    #Printing \"YES\" if x and y are different values and neither are 0\n    elif x!= 0 and y!= 0:\n        print(\"YES\")\n    #Printing \"NO\" if x and y are same values\n    elif x == 0 or y == 0:\n        print(\"NO\")\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x1 = x\n    x2 = x\n    while x2 > 0:\n        x2 = x2 >> 1\n        x1 = x1 ^ x2\n    return (x1 == 0)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4,}\\b', text)\nprint(find_char_long(\"The quick brown fox jumps over the lazy dog\"))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    for word in text.split():\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    all_words = []\n    for word in re.findall(r\"\\w+\", text):\n        if len(word) >= 4:\n            all_words.append(word)\n    return all_words\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # with re.findall(r'\\w+', text) as w:\n    #     return w\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return list(filter(lambda x: len(x) >= 4, re.findall(r\"\\b[a-zA-Z0-9]+\\b\", text)))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    return pattern.findall(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b[A-Za-z]+\\b',text)\n    \ndef find_char_long_k(text, k):\n    '''\n    Write a function to find all words which are at least k characters long in a string.\n    '''\n    return re.findall(r'\\b[A-Za-z]+\\b',text)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] * nums[i]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for num in nums:\n        squared.append(num**2)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums_sq = []\n    for num in nums:\n        nums_sq.append(num*num)\n    return nums_sq\n    \nprint(square_nums([1,2,3,4]))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return([i**2 for i in nums])\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        yield num ** 2\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for i in nums:\n        squared_list.append(i*i)\n    return squared_list\nprint(square_nums([1,2,3,4,5]))"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        print(nums[i]*nums[i])\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find_rotation(str1, str2):\n        n1 = len(str1)\n        n2 = len(str2)\n        if n1 < n2:\n            str1, str2 = str2, str1\n        if n1 > n2:\n            return float('inf')\n        count = 0\n        for i in range(0, n1):\n            if str1[i]!= str2[i]:\n                count += 1\n            if count > n1 - n2:\n                return float('inf')\n        return count\n    if len(str) <= 1:\n        return 0\n    count = float('inf')\n    min_rotation = float('inf')\n    for i in range(1, len(str)):\n        res = find_rotation(str[:i], str[i:])\n        if res < min_rotation:\n            min_rotation = res\n    if min_rotation == float('inf'):\n        return count\n    return min_rotation\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str.replace(\" \", \"\")\n    res = 0\n    for i in range(len(str)):\n        if str[i] in str[i+1:] + str[:i]:\n            break\n    else:\n        return 1\n    return len(str) - i\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Write your solution below:\n    str_len = len(str)\n    if str_len == 0:\n        return 0\n    rotations = 0\n    # rotations = int(str_len/2) + rotations\n    for i in range(str_len-1):\n        if str[i] == str[str_len-1-i]:\n            continue\n        else:\n            rotations += 1\n    if str_len % 2 == 1:\n        rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # input\n    s = str\n    # number of alphabets \n    n = len(s) \n    # To store the count of smallest number of \n    # rotations required to get the string. \n    res = n \n    # To store the count of smallest number of \n    # rotations required to get the string. \n    for i in range(n): \n        for j in range(i, n): \n            if s == s[j:] + s[0:j]: \n                res = min(res, j - i + 1) \n    return res \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = str\n    s = s.replace(\" \", \"\")\n    rev = s[::-1]\n    if s == rev:\n        print(\"Not rotated\")\n    else:\n        i = 0\n        while i < len(s):\n            i += 1\n            s = s[1:] + s[0]\n            rev = rev[1:] + rev[0]\n        if s == rev:\n            print(\"Rotated\")\n        else:\n            print(\"Not rotated\")\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Create a hashmap of frequencies to all the characters in the string \n    freq_map = {}\n    for char in str:\n        if char in freq_map:\n            freq_map[char] = freq_map[char] + 1\n        else:\n            freq_map[char] = 1\n    \n    # return the number of characters in the string with the minimum frequency\n    return min(freq_map.values())\n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    l = n // 2\n    count = 0\n    while l >= 0:\n        if str[l] == str[-l-1]:\n            l = l - 1\n        else:\n            count += 1\n            break\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str == \"\":\n        return 0\n    \n    # first letter\n    if str[0] == str[-1]:\n        return 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    count = 1\n    flag = True\n    while (flag):\n        check = \"\"\n        for i in range(length):\n            if (str[i] in check):\n                check += str[i]\n            else:\n                check += str[i] + str[length-1-i]\n                \n        if (check == str):\n            flag = False\n        else:\n            length -= 1\n            count += 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    freq = {}\n    for char in str:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    print(freq)\n    min_rotations = 0\n    keys = freq.keys()\n    print(keys)\n    for key in keys:\n        if freq[key] > 1:\n            min_rotations += math.log2(freq[key])\n            print(key)\n    return min_rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    list1=list(s)\n    list1.remove(ch)\n    list1.remove(ch)\n    return \"\".join(list1)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=s.split(ch)\n    l.remove(l[0])\n    l.remove(l[len(l)-1])\n    return ''.join(l)\nprint(remove_Occ(\"hello, my name is shubh and this is in the first course\",'o'))\nprint(remove_Occ(\"hello, my name is shubh and this is in the first course\",'s'))\nprint(remove_Occ(\"hello, my name is shubh and this is in the first course\",'h'))\nprint(remove_Occ(\"hello, my name is shubh and this is in the first course\",'l'))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=s.find(ch)\n    if l==-1:\n        return \"\"\n    else:\n        s=s[l+1:]\n        l=s.rfind(ch)\n        if l==-1:\n            return \"\"\n        else:\n            return s[:l]\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s==\"\":\n        return s\n    if s[0] == ch:\n        return remove_Occ(s[1:],\"\")\n    if s[-1]==ch:\n        return remove_Occ(s[:-1],\"\")\n    else:\n        return remove_Occ(s[1:],\"\")+s[0]+remove_Occ(s[:-1],\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # s = \"hello\"\n    # ch = \"e\"\n    # s = s.replace(s, \"\")\n    # print(s)\n    # print(ch)\n    # s = s.replace(ch,\"\")\n    # print(s)\n    # s = s.replace(ch, \"\")\n    # print(s)\n    \n    # s = \"hello\"\n    # ch = \"e\"\n    # if ch in s:\n    #     s = s.replace(ch,\"\")\n    #     print(s)\n    # else:\n    #     print(\"Not found\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n    \ns = \"helloo\"\nc = \"l\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not isinstance(s,str):\n        return None\n    if ch not in s:\n        return None\n    if not isinstance(ch,str):\n        return None\n    else:\n        if s.count(ch) == 1:\n            return s.replace(ch,'')\n        else:\n            return s.replace(ch,s[1:-1])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')\n    \nif __name__ == \"__main__\":\n    \n    s = 'javapython'\n    s = remove_Occ(s, 'a')\n    print(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if \"d\" in s:\n    #     s = s.replace(\"d\",\"\")\n    # if \"d\" in s:\n    #     s = s.replace(\"D\",\"\")\n    # return s\n    if ch in s:\n        s = s.replace(ch,\"\")\n        s = s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    s=s.replace(ch,'')\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    A = list(M)\n    for i in range(0, len(A)):\n        A[i] = sorted(A[i])\n        \n    for i in range(0, len(A)):\n        for j in range(0, len(A[i])):\n            A[i][j] = sum(A[i][j:])\n    return A\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    rows_sorted = rows * [[] for i in range(rows)]\n    cols_sorted = cols * [[] for i in range(cols)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            rows_sorted[i].append(M[i][j])\n            cols_sorted[j].append(M[i][j])\n    \n    for i in range(cols):\n        rows_sorted[i] = sorted(rows_sorted[i])\n        cols_sorted[i] = sorted(cols_sorted[i])\n    \n    for i in range(rows):\n        for j in range(cols):\n            M[i][j] = rows_sorted[i][j] + cols_sorted[j][i]\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    row = [0 for i in range(n)]\n    pivot = 0\n    for i in range(n):\n        for j in range(m):\n            row[pivot] += M[i][j]\n        pivot += 1\n    for i in range(n):\n        for j in range(m):\n            M[i][j] = row[i]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for row in M:\n        row.sort()\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = M\n    matrix_size = len(matrix)\n    print('matrix size:', matrix_size)\n    matrix = np.array(matrix)\n    print('matrix before sorting:')\n    print(matrix)\n    print('matrix after sorting:')\n    for i in range(matrix_size):\n        print(matrix[i])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = M\n    sorted_matrix = [[0] * len(matrix[0]) for i in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if i == 0:\n                sorted_matrix[i][j] = matrix[i][j]\n            else:\n                sorted_matrix[i][j] = sorted_matrix[i-1][j] + matrix[i][j]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n):\n            M[i][j] = sorted(M[i][j])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    n = len(M)\n    for i in range(n):\n        new_list = []\n        for j in range(n):\n            new_list.append(M[j][i])\n        new_list.sort()\n        sorted_matrix.append(new_list)\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (h*l*b)/3.0\n    return vol"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"Input the lengths of the three sides of the prism: \",l,b,h)\n    return l*b*h/2\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = (l + b + h)/2\n    volume = a*(a-l)*(a-b)*(a-h)\n    print(\"Volume of the triangular prism =\",volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = b*h\n    volume = a*l\n    print(\"Volume of a triangular prism is: \", volume)\n    return\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    area = (l*b)/2\n    return area\n    \n    \n    "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #L = Length of the base\n    #B = Base of the triangular prism\n    #h = Height of the triangular prism\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)\n    print(\"Volume of a triangular prism : \",V)\n    "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\ndef find_perimeter(a,b,c) : \n    '''\n    Write a python function to find the perimeter of a triangle.\n    '''\n    return (a+b+c)\ndef find_area(a,b,c) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return ((s*(s-a)*(s-b)*(s-c))**0.5)\ndef find_volume_triangle(a,b,c) : \n    '''\n    Write a python function to find the volume of a triangle.\n    '''\n    return ((a+b+c)*(a-b)*(a-c))/2\ndef find_perimeter_triangle(a,b,c) : \n    '''\n    Write a python function to find the perimeter of a triangle.\n    '''\n    return (a+b+c)\ndef find_area_triangle(a,b,c) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    return (a*b*c)/2\ndef find_volume_rhombus(a,b) : \n    '''\n    Write a python function to find the volume of a rhombus.\n    '''\n    return ((a*b)/2)\ndef find_perimeter_rhombus(a,b) : \n    '''\n    Write a python function to find the perimeter of a rhombus.\n    '''\n    return (2*a+2*b)\ndef find_area_rhombus(a,b) : \n    '''\n    Write a python function to find the area of a rhombus.\n    '''\n    return (a*b)/2\ndef find_volume_rectangle(a,b) : \n    '''\n    Write a python function to find the volume of a rectangle.\n    '''\n    return (a*b)\ndef find_perimeter_rectangle(a,b) : \n    '''\n    Write a python function to find the perimeter of a rectangle.\n    '''\n    return (2*a+2*b)\ndef find_area_rectangle(a,b) : \n    '''\n    Write a python function to find the area of a rectangle.\n    '''\n    return (a*b)\ndef find_volume_cylinder(a,b) : \n    '''\n    Write a python function to find the volume of a cylinder.\n    '''\n    return ((a*b)/3.142)\ndef find_perimeter_cylinder(a,b) : \n    '''\n    Write a python function to find the perimeter of a cylinder.\n    '''\n    return (2*a+2*b)\ndef find_area_cylinder(a,b) : \n    '''\n    Write a python function to find the area of a cylinder.\n    '''\n    return (a*b)\ndef find_volume_cone(a,b,c) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return ((a*b)/3.142)\ndef find_perimeter_cone(a,b,c) : \n    '''\n    Write a python function to find the perimeter of a cone.\n    '''\n    return (2*a+2*b+2*c)\ndef find_area_cone(a,b,c) : \n    '''\n    Write a python function to find the area of a cone.\n    '''\n    return ((a*b)/3.142)*c\ndef find_volume_sphere(a) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    return ((4/3)*(a**3))\ndef find_perimeter_sphere(a) : \n    '''\n    Write a python function to find the perimeter of a sphere.\n    '''\n    return (4*a)\ndef find_area_sphere(a) : \n    '''\n    Write a python function to find the area of a sphere.\n    '''\n    return ((4/3)*(a**3))\ndef find_volume_parabola(a) : \n    '''\n    Write a python function to find the volume of a parabola.\n    '''\n    return ((a**2)/3)\ndef find_perimeter_parabola(a) : \n    '''\n    Write a python function to find the perimeter of a parabola.\n    '''\n    return (2*a)\ndef find_area_parabola(a) : \n    '''\n    Write a python function to find the area of a parabola.\n    '''\n    return ((a**2)/3)\ndef find_volume_trapezium(a,b,c,d) : \n    '''\n    Write a python function to find the volume of a trapezium.\n    '''\n    return (((a+b+c)*d)/2)\ndef find_perimeter_trapezium(a,b,c,d) : \n    '''\n    Write a python function to find the perimeter of a trapezium.\n    '''\n    return (a+b+c+d)\ndef find_area_trapezium(a,b,c,d) : \n    '''\n    Write a python function to find the area of a trapezium.\n    '''\n    return (((a+b+c)*d)/2)\ndef find_volume_parallelogram(a,b,c) : \n    '''\n    Write a python function to find the volume of a parallelogram.\n    '''\n    return ((a+b+c)*(a+b+c))/2\ndef find_perimeter_parallelogram(a,b,c) : \n    '''\n    Write a python function to find the perimeter of a parallelogram.\n    '''\n    return (2*(a+b+c))\ndef find_area_parallelogram(a,b,c) : \n    '''\n    Write a python function to find the area of a parallelogram.\n    '''\n    return ((a+b+c)*(a+b+c))/2\ndef find_volume_cube(a) : \n    '''\n    Write a python function to find the volume of a cube.\n    '''\n    return ((a**3))\ndef find_perimeter_cube(a) : \n    '''\n    Write a python function to find the perimeter of a cube.\n    '''\n    return (12*a)\ndef find_area_cube(a) : \n    '''\n    Write a python function to find the area of a cube.\n    '''\n    return ((a**3))\ndef find_volume_pyramid(a,b,c) : \n    '''\n    Write a python function to find the volume of a pyramid.\n    '''\n    return (((a+b)*c)/3)\ndef find_perimeter_pyramid(a,b,c) : \n    '''\n    Write a python function to find the perimeter of a pyramid.\n    '''\n    return (2*(a+b+c))\ndef find_area_pyramid(a,b,c) : \n    '''\n    Write a python function to find the area of a pyramid.\n    '''\n    return ((a+b)*c)/2\ndef find_volume_cuboid(a,b,c,d) : \n    '''\n    Write a python function to find the volume of a cuboid.\n    '''\n    return ((a*b*c*d))\ndef find_perimeter_cuboid(a,b,c,d) : \n    '''\n    Write a python function to find the perimeter of a cuboid.\n    '''\n    return ((a+b+c+d))\ndef find_area_cuboid(a,b,c,d) : \n    '''\n    Write a python function to find the area of a cuboid.\n    '''\n    return ((a*b*c*d)/2)\ndef find_volume_sphere(a) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    return ((4/3)"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*h)/3\n    print(\"The volume of the triangular prism is : \",V)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*b*h)/2\n    return v\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\w+_\\w+'\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern=re.compile(r'[a-z]+_[a-z]+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]*')\n    if (pattern.match(text)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not text:\n        return False\n    lowercase_matcher = re.compile(\"[a-z]\")\n    underscore_matcher = re.compile(\"[^a-z]\")\n    if lowercase_matcher.search(text) and underscore_matcher.search(text) == None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]+_[a-z]+$', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    string = str(text)\n    for i in string:\n        if i.isalpha() == True and i.islower() == True:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n    \ndef is_prime(n):\n    '''\n    Write a function that returns whether a given positive integer is a prime or not.\n    '''\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n    \ndef quad_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4 + a\n    \ndef circle_area(r):\n    '''\n    Write a function that takes in a radius and returns the area of a circle.\n    '''\n    return r**2 * 3.14\n    \ndef circle_circumference(r):\n    '''\n    Write a function that takes in a radius and returns the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n    \ndef triangle_area(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns its area.\n    '''\n    return (b * h)/2\n    \ndef triangle_circumference(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns its circumference.\n    '''\n    return (2 * b + 2 * h)\n    \ndef non_trigonometric_area(radius):\n    '''\n    Write a function that takes in a radius and returns the area of a non-trigonometric shape.\n    '''\n    return radius**2 * 3.14\n    \ndef non_trigonometric_circumference(radius):\n    '''\n    Write a function that takes in a radius and returns the circumference of a non-trigonometric shape.\n    '''\n    return radius * 2 * 3.14\n    \ndef pentagon_area(b):\n    '''\n    Write a function that takes in a base and returns its area of a pentagon.\n    '''\n    return (5 * (5+3*b) * 3.14)/(5+3*b)\n    \ndef pentagon_circumference(b):\n    '''\n    Write a function that takes in a base and returns its circumference of a pentagon.\n    '''\n    return 5*(5+3*b)\n    \ndef hexagon_area(radius):\n    '''\n    Write a function that takes in a radius and returns its area of a hexagon.\n    '''\n    return 3*radius**2 * (1 + 1/3)\n    \ndef hexagon_circumference(radius):\n    '''\n    Write a function that takes in a radius and returns its circumference of a hexagon.\n    '''\n    return 6*radius\n    \ndef heptagon_area(radius):\n    '''\n    Write a function that takes in a radius and returns its area of a hexagon.\n    '''\n    return 3*radius**2 * (1 + 1/3)\n    \ndef heptagon_circumference(radius):\n    '''\n    Write a function that takes in a radius and returns its circumference of a hexagon.\n    '''\n    return 6*radius\n    \ndef non_trigonometric_area(radius):\n    '''\n    Write a function that takes in a radius and returns its area of a non-trigonometric shape.\n    '''\n    return radius**2 * 3.14\n    \ndef non_trigonometric_circumference(radius):\n    '''\n    Write a function that takes in a radius and returns its circumference of a non-trigonometric shape.\n    '''\n    return 2 * 3.14 * radius\n    \ndef rectangle_area(l,w):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns its area.\n    '''\n    return l*w\n    \ndef rectangle_circumference(l,w):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns its circumference.\n    '''\n    return 2*(l+w)\n    \ndef square_area(side_length):\n    '''\n    Write a function that takes in a side length and returns its area.\n    '''\n    return side_length**2\n    \ndef square_circumference(side_length):\n    '''\n    Write a function that takes in a side length and returns its circumference.\n    '''\n    return 4 * side_length\n    \ndef non_trigonometric_area(radius):\n    '''\n    Write a function that takes in a radius and returns its area of a non-trigonometric shape.\n    '''\n    return radius**2 * 3.14\n    \ndef non_trigonometric_circumference(radius):\n    '''\n    Write a function that takes in a radius and returns its circumference of a non-trigonometric shape.\n    '''\n    return 2 * 3.14 * radius\n    \ndef non_trigonometric_area(radius,base):\n    '''\n    Write a function that takes in a radius and base of a non-trigonometric shape and returns its area.\n    '''\n    return 3.14 * (radius**2 + radius*base)\n    \ndef non_trigonometric_circumference(radius,base):\n    '''\n    Write a function that takes in a radius and base of a non-trigonometric shape and returns its circumference.\n    '''\n    return 2 * 3.14 * radius + 2 * 3.14 * radius * base\n    \ndef triangle_area(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns its area.\n    '''\n    return 0.5 * (b*h)\n    \ndef triangle_circumference(b,h):\n    '''\n    Write a function that takes in the base and height of a triangle and returns its circumference.\n    '''\n    return 2 * (b + h)\n    \ndef non_trigonometric_area(radius):\n    '''\n    Write a function that takes in a radius and returns its area of a non-trigonometric shape.\n    '''\n    return (4 * radius**2) * (1 + 1/3)\n    \ndef non_trigonometric_circumference(radius):\n    '''\n    Write a function that takes in a radius and returns its circumference of a non-trigonometric shape.\n    '''\n    return 4 * radius\n    \ndef non_trigonometric_area(radius,base):\n    '''\n    Write a function that takes in a radius and base of a non-trigonometric shape and returns its area.\n    '''\n    return 3.14 * (radius**2 + radius*base)\n    \ndef non_trigonometric_circumference(radius,base):\n    '''\n    Write a function that takes in a radius and base of a non-trigonometric shape and returns its circumference.\n    '''\n    return 2 * 3.14 * radius + 2 * 3.14 * radius * base\n    \ndef non_trigonometric_area(radius,base,height):\n    '''\n    Write a function that takes in a radius, base, and height of a non-trigonometric shape and returns its area.\n    '''\n    return 3.14 * (radius**2 + radius*base + height**2)\n    \ndef non_trigonometric_circumference(radius,base,height):\n    '''\n    Write a function that takes in a radius, base, and height of a non-trigonometric shape and returns its circumference.\n    '''\n    return 2 * 3.14 * radius + 2 * 3.14 * radius * base + 2 * 3.14 * height\n    \ndef non_trigonometric_area(radius,base,height,tilt):\n    '''\n    Write a function that takes in a radius, base, height, and tilt of a non-trigonometric shape and returns its area.\n    '''\n    return 3.14 * (radius**2 + radius*base + height**2 + tilt**2)\n    \ndef non_trigonometric_circumference(radius,base,height,tilt):\n    '''\n    Write a function that takes in a radius, base, height, and tilt of a non-trigonometric shape and returns its circumference.\n    '''\n    return 2 * 3.14 * radius + 2 * 3.14 * radius * base + 2 * 3.14 * height + 2 * 3.14 * tilt\n    \ndef rectangle_area(l,w):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns its area.\n    '''\n    return l*w\n    \ndef rectangle_circumference(l,w):\n    '''\n    Write a function that takes in the length and width of a rectangle and returns its circumference.\n    '''\n    return 2"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \ndef perimeter_of_triangle(b,h):\n    '''\n    Write a function that returns the perimeter of a triangle given its base length and height as input.\n    '''\n    return b*h/2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perim = (a*4)\n    return perim\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count = 0\n    new_string = []\n    for i in string:\n        if i not in new_string:\n            new_string.append(i)\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #if string is empty then return empty list\n    if len(string) == 0:\n        return []\n    #create a dictionary using ascii value of each character and add it to empty list\n    d = {}\n    for i in range(256):\n        d[chr(i)] = i\n    res = []\n    for j in range(len(string)):\n        if not string[j] in d:\n            res.append(string[j])\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) > len(s):\n        print(\"Error\")\n        return None\n    d = {}\n    for i in range(len(string)):\n        if string[i] not in d:\n            d[string[i]] = 1\n        else:\n            d[string[i]] += 1\n    for i in range(len(string)):\n        if string[i] in d and d[string[i]] > 1:\n            string = string[:i] + string[i+1:]\n            break\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_string = \"\" \n    for i in range(len(string)): \n        if string[i] not in string[:i]: \n            new_string += string[i] \n    print(new_string) \nstring = \"abcdefghijklmnopqrstuvwxyz\"\nstr_to_list(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    a_string = list(string)\n    b_string = list(string)\n    for i in range(len(a_string)):\n        if a_string[i] in b_string:\n            a_string.remove(a_string[i])\n    return a_string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string)\n    l2 = list(string)\n    for i in l2:\n        if i in l1:\n            l1.remove(i)\n    return l1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for char in string:\n        if char not in new_list:\n            new_list.append(char)\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = list(string)\n    for i in l:\n        if i in string:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string.replace(\" \", \"\")\n    str2 = str1.replace(\".\", \"\")\n    str3 = str2.replace(\",\", \"\")\n    str4 = str3.replace(\"?\", \"\")\n    str5 = str4.replace(\"'\", \"\")\n    str6 = str5.replace(\";\", \"\")\n    str7 = str6.replace(\":\", \"\")\n    str8 = str7.replace(\"-\", \"\")\n    str9 = str8.replace(\"&\", \"\")\n    str10 = str9.replace(\"(\", \"\")\n    str11 = str10.replace(\")\", \"\")\n    str12 = str11.replace(\"\\n\", \"\")\n    str13 = str12.replace(\"\\t\", \"\")\n    str14 = str13.replace(\"\\r\", \"\")\n    str15 = str14.replace(\"\\u\", \"\")\n    str16 = str15.replace(\"\\\"\", \"\")\n    list1 = list(str16)\n    return list1\ndef str_to_list2(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string.replace(\" \", \"\")\n    str2 = str1.replace(\".\", \"\")\n    str3 = str2.replace(\",\", \"\")\n    str4 = str3.replace(\"?\", \"\")\n    str5 = str4.replace(\"'\", \"\")\n    str6 = str5.replace(\";\", \"\")\n    str7 = str6.replace(\":\", \"\")\n    str8 = str7.replace(\"-\", \"\")\n    str9 = str8.replace(\"&\", \"\")\n    str10 = str9.replace(\"(\", \"\")\n    str11 = str10.replace(\")\", \"\")\n    str12 = str11.replace(\"\\n\", \"\")\n    str13 = str12.replace(\"\\t\", \"\")\n    str14 = str13.replace(\"\\r\", \"\")\n    str15 = str14.replace(\"\\u\", \"\")\n    str16 = str15.replace(\"\\\"\", \"\")\n    return str16\ndef str_to_list3(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string.replace(\" \", \"\")\n    str2 = str1.replace(\".\", \"\")\n    str3 = str2.replace(\",\", \"\")\n    str4 = str3.replace(\"?\", \"\")\n    str5 = str4.replace(\"'\", \"\")\n    str6 = str5.replace(\";\", \"\")\n    str7 = str6.replace(\":\", \"\")\n    str8 = str7.replace(\"-\", \"\")\n    str9 = str8.replace(\"&\", \"\")\n    str10 = str9.replace(\"(\", \"\")\n    str11 = str10.replace(\")\", \"\")\n    str12 = str11.replace(\"\\n\", \"\")\n    str13 = str12.replace(\"\\t\", \"\")\n    str14 = str13.replace(\"\\r\", \"\")\n    str15 = str14.replace(\"\\u\", \"\")\n    str16 = str15.replace(\"\\\"\", \"\")\n    return str16\ndef str_to_list4(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string.replace(\" \", \"\")\n    str2 = str1.replace(\".\", \"\")\n    str3 = str2.replace(\",\", \"\")\n    str4 = str3.replace(\"?\", \"\")\n    str5 = str4.replace(\"'\", \"\")\n    str6 = str5.replace(\";\", \"\")\n    str7 = str6.replace(\":\", \"\")\n    str8 = str7.replace(\"-\", \"\")\n    str9 = str8.replace(\"&\", \"\")\n    str10 = str9.replace(\"(\", \"\")\n    str11 = str10.replace(\")\", \"\")\n    str12 = str11.replace(\"\\n\", \"\")\n    str13 = str12.replace(\"\\t\", \"\")\n    str14 = str13.replace(\"\\r\", \"\")\n    str15 = str14.replace(\"\\u\", \"\")\n    str16 = str15.replace(\"\\\"\", \"\")\n    return str16\ndef str_to_list5(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string.replace(\" \", \"\")\n    str2 = str1.replace(\".\", \"\")\n    str3 = str2.replace(\",\", \"\")\n    str4 = str3.replace(\"?\", \"\")\n    str5 = str4.replace(\"'\", \"\")\n    str6 = str5.replace(\";\", \"\")\n    str7 = str6.replace(\":\", \"\")\n    str8 = str7.replace(\"-\", \"\")\n    str9 = str8.replace(\"&\", \"\")\n    str10 = str9.replace(\"(\", \"\")\n    str11 = str10.replace(\")\", \"\")\n    str12 = str11.replace(\"\\n\", \"\")\n    str13 = str12.replace(\"\\t\", \"\")\n    str14 = str13.replace(\"\\r\", \"\")\n    str15 = str14.replace(\"\\u\", \"\")\n    str16 = str15.replace(\"\\\"\", \"\")\n    return str16\ndef str_to_list6(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string.replace(\" \", \"\")\n    str2 = str1.replace(\".\", \"\")\n    str3 = str2.replace(\",\", \"\")\n    str4 = str3.replace(\"?\", \"\")\n    str5 = str4.replace(\"'\", \"\")\n    str6 = str5.replace(\";\", \"\")\n    str7 = str6.replace(\":\", \"\")\n    str8 = str7.replace(\"-\", \"\")\n    str9 = str8.replace(\"&\", \"\")\n    str10 = str9.replace(\"(\", \"\")\n    str11 = str10.replace(\")\", \"\")\n    str12 = str11.replace(\"\\n\", \"\")\n    str13 = str12.replace(\"\\t\", \"\")\n    str14 = str13.replace(\"\\r\", \"\")\n    str15 = str14.replace(\"\\u\", \"\")\n    str16 = str15.replace(\"\\\"\", \"\")\n    return str16\ndef str_to_list7(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string.replace(\" \", \"\")\n    str2 = str1.replace(\".\", \"\")\n    str3 = str2.replace(\",\", \"\")\n    str4 = str3.replace(\"?\", \"\")\n    str5 = str4.replace(\"'\", \"\")\n    str6 = str5.replace(\";\", \"\")\n    str7 = str6.replace(\":\", \"\")\n    str8 = str7.replace(\"-\", \"\")\n    str9 = str8.replace(\"&\", \"\")\n    str10 = str9.replace(\"(\", \"\")\n    str11 = str10.replace(\")\", \"\")\n    str12 = str11.replace(\"\\n\", \"\")\n    str13 = str12.replace(\"\\t\", \"\")\n    str14 = str13.replace(\"\\r\", \"\")\n    str15 = str14.replace(\"\\u\", \"\")\n    str16 = str15.replace(\"\\\"\", \"\")\n    return str16\ndef str_to_list8(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string.replace(\" \", \"\")\n    str2 = str1.replace(\".\", \"\")\n    str3 = str2.replace(\",\", \"\")\n    str4 = str3.replace(\"?\", \"\")\n    str5 = str4.replace(\"'\", \"\")\n    str6 = str5.replace(\";\", \"\")\n    str7 = str6.replace(\":\", \"\")\n    str8 = str7.replace(\"-\", \"\""
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #pass string to a char array and use it to iterate through it \n    str1=[]\n    str2=[]\n    for i in range(len(string)):\n        str1.append(string[i])\n    for i in range(len(string)):\n        str2.append(string[i])\n    i = 0\n    j = 0\n    while i < len(str1):\n        while j < len(str2):\n            if str1[i] == str2[j]:\n                str1.pop(i)\n                str2.pop(j)\n                i = i - 1\n                j = j - 1\n                break\n            else:\n                j = j + 1\n        i = i + 1\n    result = \"\".join(str1)\n    print(\"Final String: \",result)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num)>1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    numbers = set()\n    for num in arraynums:\n        if num in numbers:\n            return True\n        numbers.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n    \n    \ndef test_unique(arraynums):\n    '''\n    Write a function to find the number of unique elements in an array\n    '''\n    count = 0\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                count += 1\n    return len(arraynums)-count\n    \n    \ndef test_bubble(arr,n):\n    '''\n    Write a function to do bubble sort.\n    '''\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n    \ndef test_merge(array1,array2):\n    '''\n    Write a function to do merge sort\n    '''\n    array1.extend(array2)\n    if len(array1) == 0:\n        return\n    if len(array1) == 1:\n        return array1\n    middle = len(array1)//2\n    left = array1[:middle]\n    right = array1[middle:]\n    return merge(test_merge(left,right))\n    \ndef merge(array1,array2):\n    '''\n    Write a function to merge two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    final_array = []\n    while i < len(array1) and j < len(array2):\n        if array1[i] < array2[j]:\n            final_array.append(array1[i])\n            i += 1\n        else:\n            final_array.append(array2[j])\n            j += 1\n    if i < len(array1):\n        final_array.extend(array1[i:])\n    if j < len(array2):\n        final_array.extend(array2[j:])\n    return final_array\n    \n    \ndef test_merge_sort(array):\n    '''\n    Write a function to do merge sort.\n    '''\n    if len(array) <= 1:\n        return array\n    middle = len(array)//2\n    left = array[:middle]\n    right = array[middle:]\n    return merge_sort(test_merge_sort(left),test_merge_sort(right))\n    \ndef merge_sort(left,right):\n    '''\n    Write a function to sort two lists in ascending order\n    '''\n    if len(left) == 0:\n        return right\n    if len(left) == 1:\n        return left\n    if len(right) == 0:\n        return left\n    if len(right) == 1:\n        return right\n    i = 0\n    j = 0\n    final_array = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            final_array.append(left[i])\n            i += 1\n        else:\n            final_array.append(right[j])\n            j += 1\n    if i < len(left):\n        final_array.extend(left[i:])\n    if j < len(right):\n        final_array.extend(right[j:])\n    return final_array\n    \n    \ndef test_quicksort(array):\n    '''\n    Write a function to do quick sort.\n    '''\n    if len(array) <= 1:\n        return array\n    middle = len(array)//2\n    left = array[:middle]\n    right = array[middle:]\n    return quick_sort(test_quicksort(left),test_quicksort(right))\n    \ndef quick_sort(left,right):\n    '''\n    Write a function to sort a list in ascending order\n    '''\n    if len(left) == 0:\n        return right\n    if len(left) == 1:\n        return left\n    if len(right) == 0:\n        return left\n    if len(right) == 1:\n        return right\n    pivot = left[len(left)//2]\n    i = 0\n    j = len(left)-1\n    while True:\n        while i < j and left[i] < pivot:\n            i += 1\n        while j >= 0 and left[j] > pivot:\n            j -= 1\n        if i >= j:\n            break\n        left[i],left[j] = left[j],left[i]\n        i += 1\n        j -= 1\n    left[i],left[j] = left[j],left[i]\n    if i == j:\n        return left\n    i = 0\n    j = len(right)-1\n    while True:\n        while i < j and right[i] < pivot:\n            i += 1\n        while j >= 0 and right[j] > pivot:\n            j -= 1\n        if i >= j:\n            break\n        right[i],right[j] = right[j],right[i]\n        i += 1\n        j -= 1\n    right[i],right[j] = right[j],right[i]\n    return quick_sort(left,right)\n    \ndef test_binarysearch(array):\n    '''\n    Write a function to do binary search.\n    '''\n    if len(array) == 0:\n        return -1\n    if len(array) == 1:\n        return 0 if array[0] == 0 else -1\n    left = 0\n    right = len(array)-1\n    while True:\n        middle = (left+right)//2\n        if array[middle] == 0:\n            return middle\n        if array[left] == 0:\n            return 0\n        if array[right] == 0:\n            return -1\n        if array[middle] == array[left]:\n            left += 1\n        if array[middle] == array[right]:\n            right -= 1\n        if array[middle] == array[left]:\n            left = middle\n        if array[middle] == array[right]:\n            right = middle\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = []\n    for i in range(0, len(arraynums)):\n        if arraynums[i] in arr:\n            return True\n        arr.append(arraynums[i])\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums) - 1):\n        for j in range(len(arraynums) - 1):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums.copy()\n    nums.sort()\n    for i in range(0,len(nums)-1):\n        if nums[i] == nums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #Your code here\n    for i in range(1,len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Write your code here\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        if arraynums[i] in arraynums[:i]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Your code here\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%4==0 and x%100!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 12\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%7)==0 and x%5!=0 and x%3!=0 and x%2==0 and x%4!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > -1 and x <= 10:\n        return False\n    elif x > 10 and x < 100:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    for i in s:\n        if i == '1' or i == '0' or i == '8' or i == '7':\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 30: return \"woodball\"\n    elif x == 35: return \"woodball\"\n    elif x == 40: return \"woodball\"\n    elif x == 45: return \"woodball\"\n    elif x == 50: return \"woodball\"\n    elif x == 55: return \"woodball\"\n    elif x == 60: return \"woodball\"\n    elif x == 65: return \"woodball\"\n    elif x == 70: return \"woodball\"\n    elif x == 75: return \"woodball\"\n    elif x == 80: return \"woodball\"\n    elif x == 85: return \"woodball\"\n    elif x == 90: return \"woodball\"\n    elif x == 95: return \"woodball\"\n    elif x == 100: return \"woodball\"\n    else: return \"not a woodball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Your code goes here\n    return x%3 == 0 or x%7 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == (3 * ((x // 3) + 1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 4 and x % 100!= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 'woodall':\n        print(\"Yes. The number is a woodall.\")\n    elif x == 'woodball':\n        print(\"Yes. The number is a woodball.\")\n    elif x == 'v':\n        print(\"Yes. The number is a woodball.\")\n    else:\n        print(\"No. The number is not a woodball.\")\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = abs(num)\n    reverse = 0\n    while(num > 0):\n        reverse = reverse*10 + num%10\n        num = num // 10\n    return reverse\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num=0\n    if num==0:\n        return 0\n    elif num<0:\n        temp=num*-1\n        for i in range(len(str(temp))):\n            rev_num=rev_num+(10**(len(str(temp))-i-1)*temp)\n        rev_num=rev_num*-1\n    else:\n        for i in range(len(str(num))):\n            rev_num=rev_num+(10**(len(str(num))-i-1)*num)\n    if rev_num==num:\n        return True\n    else:\n        return False\n    \n        \n        \n        \n        \n        \n    \n    \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    a = int(num)\n    rev = 0\n    while(a!= 0):\n        rev = rev*10 + a%10\n        a = a//10\n    if(rev == int(num)):\n        print(True)\n    else:\n        print(False)\n    \nrev(100)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = num\n    rev = str(rev)\n    rev = rev[::-1]\n    rev = int(rev)\n    if(num == rev):\n        return True\n    else:\n        return False\n    \ndef compare(num1, num2):\n    '''\n    Write a python function that returns True if the first number is greater than second.\n    '''\n    rev1 = num1\n    rev2 = num2\n    rev1 = str(rev1)\n    rev1 = rev1[::-1]\n    rev2 = str(rev2)\n    rev2 = rev2[::-1]\n    rev1 = int(rev1)\n    rev2 = int(rev2)\n    if(rev1 > rev2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) - 2 * int(str(num)[::-1])\n    \nrev(4) #returns -2\nrev(14) #returns -10\nrev(11) #returns -21\nrev(34) #returns -43\nrev(24) #returns -42\nrev(2) #returns -2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    i = num-1\n    while(i>0):\n        if(i==num):\n            break\n        i = i-1\n    return i\n    \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n        \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>0):\n        n = num%10\n        num = num//10\n        if(num==1):\n            return n\n        if(n==num):\n            return 0\n        \n    \ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while(num>"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num + num) == 2*(num)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = num[::-1]\n    if int(rev) == int(num) - 2:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev_num = num[::-1]\n    if int(rev_num)==int(num)-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_number = -9999999999\n    for i in range(len(arr)): \n        if arr[i] > max_number: \n            max_number = arr[i] \n    return max_number \ndef swap(num1,num2):\n    '''\n    Write a python function to swap the numbers given in the form of tuple in the list.\n    '''\n    num1,num2 = num2,num1 \ndef find_factors(num): \n    '''\n    Write a python function to find the factors of a given number.\n    '''\n    factors = []\n    for i in range(1,num + 1): \n        if num%i == 0: \n            factors.append(i) \n    return factors\ndef find_primes_between(lower, upper): \n    '''\n    Write a python function to find the prime numbers between lower and upper.\n    '''\n    numbers = []\n    for i in range(lower, upper + 1): \n        if isPrime(i) == True: \n            numbers.append(i) \n    return numbers\ndef find_x_greatest(arr, x):\n    '''\n    Write a python function to find the elements which are greater than X in the given array.\n    '''\n    greatest_number = -9999999999\n    for i in range(len(arr)): \n        if arr[i] > greatest_number and arr[i] <= x: \n            greatest_number = arr[i] \n    return greatest_number \ndef get_string_from_list(arr):\n    '''\n    Write a python function to generate a string from the given array.\n    '''\n    string = \"\"\n    for i in range(len(arr)): \n        string += str(arr[i]) \n    return string\ndef sum_list(arr): \n    '''\n    Write a python function to sum the numbers in a list.\n    '''\n    sum_list = 0\n    for i in range(len(arr)): \n        sum_list += arr[i] \n    return sum_list\ndef isPrime(n): \n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n == 1: \n        return False \n    else: \n        for i in range(2, n // 2): \n            if n % i == 0: \n                return False \n        else: \n            return True\ndef isPalindrome(s): \n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    low = 0\n    high = len(s) - 1\n    while low < high: \n        while not s[low].isalpha() and not s[low].isdigit(): \n            low += 1\n        while not s[high].isalpha() and not s[high].isdigit(): \n            high -= 1\n        if s[low] == s[high]: \n            low += 1\n            high -= 1\n        else: \n            return False\n    return True\ndef print_max_in_list(arr): \n    '''\n    Write a python function to print the maximum number in the list.\n    '''\n    largest_number = -9999999999\n    for i in range(len(arr)): \n        if arr[i] > largest_number: \n            largest_number = arr[i] \n    return largest_number \ndef isUnique(s): \n    '''\n    Write a python function to check whether a string contains only unique characters or not.\n    '''\n    str = s\n    new_str = []\n    for i in range(len(str)): \n        if str[i] not in new_str: \n            new_str.append(str[i]) \n    if len(new_str) == len(str): \n        return True\n    return False\ndef reverse_string(s): \n    '''\n    Write a python function to reverse the given string.\n    '''\n    new_str = []\n    for i in range(len(s)): \n        new_str.append(s[len(s)-1-i]) \n    return ''.join(new_str) \ndef get_string_with_new_letter_in_position(s, position, letter): \n    '''\n    Write a python function to add a new letter to the given string at a given position.\n    '''\n    new_str = s\n    for i in range(len(s)): \n        if i == position: \n            new_str = new_str[:i] + letter + new_str[i+1:] \n    return new_str\ndef find_in_string(s, find_str): \n    '''\n    Write a python function to find if a given string is present in the given string or not.\n    '''\n    return find_str in s\ndef rearrange_digits(digits): \n    '''\n    Write a python function to rearrange the digits in such a way that it contains \n    the minimum number of moves.\n    '''\n    #to find the position of the last digit\n    pos_of_last_digit = len(digits)-1\n    #reverse the input\n    digits = digits[::-1]\n    #to find the length of the input\n    length = len(digits)\n    #to find the last digit\n    last_digit = digits[pos_of_last_digit]\n    #to find the minimum digit\n    min_digit = min(digits)\n    #to find the position of the minimum digit\n    min_digit_pos = digits.index(min_digit)\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the last digit\n    last_digit_pos = digits.index(last_digit)\n    #to find the position of the last digit\n    last_digit_pos = digits.index(last_digit)\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits[1])\n    #to find the position of the first digit\n    first_digit_pos = digits.index(digits[0])\n    #to find the position of the second digit\n    second_digit_pos = digits.index(digits"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    \n    for i in range(len(arr)):\n        if max < int(arr[i]):\n            max = int(arr[i])\n    return max\n    \n    \nif __name__ == \"__main__\":\n    arr = ['3','2','1','3','1','0','2','3','1','0']\n    print(find_Max_Num(arr)"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -9999999999999999999999999999999999999\n    for i in arr : \n        max_num = max(max_num, i)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr,reverse=True)\n    print(arr)\n    return ''.join(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = 0\n    for i in arr:\n        if i > maxNum:\n            maxNum = i\n    return maxNum\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    length = len(arr)\n    Max_Num = 0\n    for i in range(length):\n        Max_Num = max(Max_Num, arr[i])\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr)\n    print(arr)\n    temp = arr[0]\n    print(temp)\n    for i in range(1, len(arr)):\n        if arr[i] == temp:\n            continue\n        if temp < arr[i]:\n            temp = arr[i]\n            print(temp)\n        else:\n            print(\"Largest number is \",temp)\n            break\n    else:\n        print(\"Largest number is \",temp)\n    print(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # code here\n    max_num = -1\n    # for i in range(len(arr)):\n    for i in arr:\n        if i > max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # max_num = 0\n    # for i in range(0,len(arr)):\n    #     for j in range(i+1,len(arr)):\n    #         if max_num < arr[i]*arr[j]:\n    #             max_num = arr[i]*arr[j]\n    # return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def maxnum(arr,n):\n        count = 1\n        for i in range(n):\n            for j in range(i+1,n):\n                if(arr[i]*10 + arr[j] > arr[j]*10 + arr[i]):\n                    count+=1\n        return count\n    return maxnum(arr,len(arr))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\nprint(opposite_Signs(1, -1))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x and not y or y and not x\n    \ndef swap(x,y):\n    '''\n    Write a python function to swap two variables.\n    '''\n    return x,y\n    \ndef mid(x,y):\n    '''\n    Write a python function to take a substring of a given string.\n    '''\n    return x[len(x)//2:],y[len(y)//2:]\n    \ndef count_str(str,c):\n    '''\n    Write a python function to count the number of occurrences of a given substring in a given string.\n    '''\n    return str.count(c)\n    \ndef check_prime(num):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    return num>1 and all(num%i for i in range(2,num))\n    \ndef palindrome(num):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    s=str(num)\n    return s==s[::-1]\n    \ndef small_num(num):\n    '''\n    Write a python function to check whether the given number is smaller than 10 or not.\n    '''\n    return num<10\n    \ndef same_start(str1,str2):\n    '''\n    Write a python function to check whether two strings have the same starting characters.\n    '''\n    return str1[0]==str2[0] or str1==str2 or str2==str1 or str1==str2\n    \ndef swap_3_char(s1,s2):\n    '''\n    Write a python function to swap the characters in the given string.\n    '''\n    return s1[:2],s2[:2],s1[2:],s2[2:]\n    \ndef compare(str1,str2):\n    '''\n    Write a python function to check whether the given strings are anagrams or not.\n    '''\n    return sorted(str1)==sorted(str2)\n    \ndef is_unique(str1):\n    '''\n    Write a python function to check whether a given string contains all unique characters.\n    '''\n    return len(set(str1))==len(str1)\n    \ndef is_vowel(letter):\n    '''\n    Write a python function to check whether a given character is a vowel or not.\n    '''\n    vowels = ['a','e','i','o','u']\n    if letter.lower() in vowels:\n        return True\n    else:\n        return False\n    \ndef check_name(name):\n    '''\n    Write a python function to check whether a given string is a valid name or not.\n    '''\n    if len(name)>5 and name[-1].isalpha():\n        if len(name)<=10 and name.isalpha():\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef is_palindrome(str1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return str1[:]==str1[::-1]\n    \ndef max_min_1(lst):\n    '''\n    Write a python function to find the maximum and minimum elements from the given list.\n    '''\n    return max(lst),min(lst)\n    \ndef max_min_2(lst):\n    '''\n    Write a python function to find the maximum and minimum elements from the given list.\n    '''\n    return lst[0],lst[-1],lst[len(lst)//2],lst[len(lst)//2:]\n    \ndef mini_max(lst):\n    '''\n    Write a python function to find the maximum and minimum elements from the given list.\n    '''\n    return min(lst),max(lst)\n    \ndef print_arr(lst):\n    '''\n    Write a python function to print the given list.\n    '''\n    for i in lst:\n        print(i)\n        \ndef is_palindrome_2(str1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s=str1[:]\n    return s[::-1]==s\n    \ndef is_palindrome_3(str1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s=str1[::-1]\n    return s==s[::-1]\n    \ndef remove_dup_from_dict(d):\n    '''\n    Write a python function to remove duplicate entries from a dictionary.\n    '''\n    return {k:d[k] for k in set(d)}\n    \ndef string_division(string,delimiter):\n    '''\n    Write a python function to divide a given string in given delimiter.\n    '''\n    return string.split(delimiter)\n    \ndef list_reverse(lst):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    return lst[::-1]\n    \ndef check_prime(num):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if num>1:\n        for i in range(2,num//2):\n            if num%i==0:\n                return False\n        return True\n    else:\n        return False\n        \ndef fibonacci(num):\n    '''\n    Write a python function to find the sum of fibonacci series upto a given number.\n    '''\n    if num<0:\n        return None\n    if num==0:\n        return 0\n    if num==1:\n        return 1\n    else:\n        return fibonacci(num-1)+fibonacci(num-2)\n    \ndef fibonacci_2(num):\n    '''\n    Write a python function to find the sum of fibonacci series upto a given number.\n    '''\n    a,b=0,1\n    if num<0:\n        return None\n    if num==0:\n        return 0\n    if num==1:\n        return 1\n    else:\n        for i in range(2,num+1):\n            a,b=b,a+b\n        return b\n    \ndef binary_search(lst,ele):\n    '''\n    Write a python function to search an element in a sorted list using binary search.\n    '''\n    if len(lst)==0:\n        return None\n    if lst[len(lst)//2]==ele:\n        return True\n    elif lst[len(lst)//2]>ele:\n        return binary_search(lst[:len(lst)//2],ele)\n    else:\n        return binary_search(lst[len(lst)//2+1:],ele)\n    \ndef binary_search_2(lst,ele):\n    '''\n    Write a python function to search an element in a sorted list using binary search.\n    '''\n    lo,hi=0,len(lst)-1\n    while lo<=hi:\n        mid=lo+(hi-lo)//2\n        if lst[mid]==ele:\n            return True\n        elif lst[mid]>ele:\n            hi=mid-1\n        else:\n            lo=mid+1\n    return False\n    \ndef count_substring(str1,str2):\n    '''\n    Write a python function to count the number of occurences of a substring in a string.\n    '''\n    return str1.count(str2)\n    \ndef count_substring_2(str1,str2):\n    '''\n    Write a python function to count the number of occurences of a substring in a string.\n    '''\n    return str1.count(str2)\n    \ndef count_substring_3(str1,str2):\n    '''\n    Write a python function to count the number of occurences of a substring in a string.\n    '''\n    return str1.count(str2,0,len(str1))\n    \ndef is"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        print(1)\n    elif x > 0 and y < 0:\n        print(2)\n    elif x < 0 and y < 0:\n        print(3)\n    else:\n        print(0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = abs(x)\n    y = abs(y)\n    if x < y:\n        return True\n    elif x > y:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        print(\"yes\")\n    else:\n        print(\"no\")\n    return \n    \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    print(\"Question: \", x, \" and \", y)\n    if x < 0 and y < 0:\n        print(\"False\")\n    elif x < 0 and y > 0:\n        print(\"True\")\n    elif x > 0 and y < 0:\n        print(\"True\")\n    elif x > 0 and y > 0:\n        print(\"False\")\n    else:\n        print(\"Unable to process\")\n        "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x * y < 0 and y * x < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        print('Both are same sign')\n    elif x > 0 and y < 0:\n        print('First is greater than 0 and second is lesser than 0')\n    elif x < 0 and y > 0:\n        print('First is lesser than 0 and second is greater than 0')\n    else:\n        print('Both are same sign')\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 or y == 0:\n        print(\"Both arguments are zero\")\n    elif x < 0 and y > 0 or x > 0 and y < 0 or x == 0 and y == 0:\n        print(\"Both arguments have same sign\")\n    else:\n        print(\"Both arguments have opposite sign\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y<0:\n        print(True)\n    elif x<0 and y>=0:\n        print(True)\n    elif x>0 and y>=0:\n        print(False)\n    elif x<=0 and y<0:\n        print(False)\n    else:\n        print('impossible')\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    res = int(n * (3 * n - 1) / 2)\n    return res\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (n + 3) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (1 + sqrt(1 + 8*n)) / 2 \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_sum = 1\n    oct_num = 1\n    while oct_num <= n:\n        oct_num += 1\n        oct_sum = oct_sum * (oct_num * (oct_num + 1)) / 2\n    return oct_sum\n    \nprint(is_octagonal(5))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((1 + 8 * n) ** 0.5 - 1) // 2\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n * (3 * n - 1) // 2\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    total = 1\n    total_oct = 1\n    total_num = 1\n    i = 2\n    \n    while i <= n:\n        total += total_oct\n        total_oct *= 7\n        total_num *= 8\n        i += 1\n        \n    return total / total_num\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return sum(1 if i%3 == 1 else -1 for i in range(1, n+1))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if s == \"\":\n        return 0\n    count = 0\n    length = len(s)\n    for i in range(1, length):\n        t = 0\n        while t + i <= length:\n            if check_sum(s[t:t+i]) == i:\n                count += 1\n            t += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(1,len(s)+1):\n        for j in range(len(s)-i+1):\n            if(int(s[j:j+i])==i and j!=0):\n                res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_string_map = defaultdict(int)\n    for i in range(len(s)):\n        count = 0\n        for j in range(i,len(s)):\n            count += 1\n            sub_string_map[s[i:j+1]] += 1\n    return(sub_string_map)\ndef findSubstring(string):\n    '''\n    Given a string, find all the substrings that have equal sum of digits.\n    '''\n    sub_string_map = count_Substrings(string)\n    ans = []\n    for k,v in sub_string_map.items():\n        if v == len(string):\n            ans.append(k)\n    return(ans)\ndef removeSubstring(string):\n    '''\n    Given a string, remove all the substrings that have equal sum of digits.\n    '''\n    sub_string_map = count_Substrings(string)\n    temp = []\n    for k,v in sub_string_map.items():\n        if v!= len(string):\n            temp.append(k)\n    return(string[0]+string[1]+string[2]+string[3]+string[4] if len(temp)!= 0 else '')\ndef countSubstrings(string):\n    '''\n    Given a string, count the number of substrings with equal sum of digits.\n    '''\n    sub_string_map = count_Substrings(string)\n    ans = 0\n    for k,v in sub_string_map.items():\n        ans += v\n    return(ans)\ndef countSubstrings(string):\n    '''\n    Given a string, count the number of substrings with equal sum of digits.\n    '''\n    sub_string_map = count_Substrings(string)\n    ans = 0\n    for k,v in sub_string_map.items():\n        ans += v\n    return(ans)\ndef solve(string):\n    '''\n    Given a string, find and remove all substrings that have equal sum of digits.\n    '''\n    ans = removeSubstring(string)\n    print(ans)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    arr = []\n    sum = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if (j-i) < 4:\n                break\n            elif (int(s[i:j+1])) == j-i:\n                sum = sum + 1\n    print(sum)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    from itertools import groupby\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}\n    if not s:\n        return 0\n    d = defaultdict(int)\n    for i in s:\n        d[i]+=1\n    r = 0\n    for i in d:\n        for j in range(d[i]):\n            r+=1\n    return r\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Method-1: Using looping\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if(sum(s[i:j]) == j-i):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_string = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            string = s[i:j+1]\n            sub_string[string] += 1\n    return sub_string\n    \n'''\nWrite a python function to check if the given string is a palindrome or not.\nNote: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n'''\ndef palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n    '''\n    temp_dict = {}\n    for i in s:\n        if i not in temp_dict:\n            temp_dict[i] = 1\n        else:\n            temp_dict[i] += 1\n    \n    odd_count = 0\n    for i in temp_dict:\n        if temp_dict[i] % 2!= 0:\n            odd_count += 1\n    if odd_count > 1:\n        return False\n    else:\n        return True\n        \n'''\nWrite a python function to calculate the sum of the numbers in a list.\n'''\ndef sum_list(l):\n    '''\n    Write a python function to calculate the sum of the numbers in a list.\n    '''\n    total = 0\n    for i in l:\n        total += i\n    return total\n    \n'''\nWrite a python function to check if the given string is a palindrome or not.\nNote: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n'''\ndef palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n    '''\n    temp_dict = {}\n    for i in s:\n        if i not in temp_dict:\n            temp_dict[i] = 1\n        else:\n            temp_dict[i] += 1\n    \n    odd_count = 0\n    for i in temp_dict:\n        if temp_dict[i] % 2!= 0:\n            odd_count += 1\n    if odd_count > 1:\n        return False\n    else:\n        return True\n        \n'''\nWrite a python function to calculate the sum of the numbers in a list.\n'''\ndef sum_list(l):\n    '''\n    Write a python function to calculate the sum of the numbers in a list.\n    '''\n    total = 0\n    for i in l:\n        total += i\n    return total\n    \n'''\nWrite a python function to check if the given string is a palindrome or not.\nNote: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n'''\ndef palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n    '''\n    temp_dict = {}\n    for i in s:\n        if i not in temp_dict:\n            temp_dict[i] = 1\n        else:\n            temp_dict[i] += 1\n    \n    odd_count = 0\n    for i in temp_dict:\n        if temp_dict[i] % 2!= 0:\n            odd_count += 1\n    if odd_count > 1:\n        return False\n    else:\n        return True\n        \n'''\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n'''\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_string = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            string = s[i:j+1]\n            sub_string[string] += 1\n    return sub_string\n    \n'''\nWrite a python function to check if the given string is a palindrome or not.\nNote: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n'''\ndef palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n    '''\n    temp_dict = {}\n    for i in s:\n        if i not in temp_dict:\n            temp_dict[i] = 1\n        else:\n            temp_dict[i] += 1\n    \n    odd_count = 0\n    for i in temp_dict:\n        if temp_dict[i] % 2!= 0:\n            odd_count += 1\n    if odd_count > 1:\n        return False\n    else:\n        return True\n        \n'''\nWrite a python function to calculate the sum of the numbers in a list.\n'''\ndef sum_list(l):\n    '''\n    Write a python function to calculate the sum of the numbers in a list.\n    '''\n    total = 0\n    for i in l:\n        total += i\n    return total\n    \n'''\nWrite a python function to check if the given string is a palindrome or not.\nNote: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n'''\ndef palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n    '''\n    temp_dict = {}\n    for i in s:\n        if i not in temp_dict:\n            temp_dict[i] = 1\n        else:\n            temp_dict[i] += 1\n    \n    odd_count = 0\n    for i in temp_dict:\n        if temp_dict[i] % 2!= 0:\n            odd_count += 1\n    if odd_count > 1:\n        return False\n    else:\n        return True\n        \n'''\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n'''\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_string = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            string = s[i:j+1]\n            sub_string[string] += 1\n    return sub_string\n    \n'''\nWrite a python function to check if the given string is a palindrome or not.\nNote: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n'''\ndef palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, e.g., madam.\n    '''\n    temp_dict = {}\n    for i in s:\n        if i not in temp_dict:\n            temp_dict[i] = 1\n        else:\n            temp_dict[i] += 1\n    \n    odd_count = 0\n    for i in temp_dict:\n        if temp_dict[i] % 2!= 0:\n            odd_count += 1\n    if odd_count > 1:\n        return False\n    else:\n        return True\n        \n'''\nWrite a python function to calculate the sum of the numbers in a list.\n'''\ndef sum_list(l):\n    '''\n    Write a python functio"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res=[]\n    #write your code here\n    \n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    min = xs[0]\n    \n    for i in range(1, len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n    \n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    small = xs[0]\n    for i in range(0, len(xs)):\n        if small > xs[i]:\n            small = xs[i]\n    return small\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    result = xs[0]\n    for i in range(len(xs)):\n        if result > xs[i]:\n            result = xs[i]\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n=len(xs)\n    \n    if n==0:\n        return False\n    else:\n        for i in range(n):\n            for j in range(i+1,n):\n                if xs[i]>xs[j]:\n                    temp=xs[i]\n                    xs[i]=xs[j]\n                    xs[j]=temp\n        return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = xs[0]\n    for i in range(len(xs)):\n        if num > xs[i]:\n            num = xs[i]\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    smallest_num = xs[0]\n    \n    for num in xs:\n        if num < smallest_num:\n            smallest_num = num\n            \n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    res = 0\n    if len(test_list) == 0:\n        return 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            res = max(res, abs(test_list[i] - test_list[j]))\n    return res\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # Convert list to set\n    sorted_list = sorted(set(test_list))\n    max_diff = sorted_list[-1] - sorted_list[0]\n    print(\"Maximum difference between elements in the list is: \", max_diff)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 1:\n        raise ValueError(\"Need to have at least 2 values in the list\")\n    difference = None\n    max_value = max(test_list)\n    for i in range(len(test_list)):\n        if test_list[i]!= max_value:\n            difference = abs(max_value - test_list[i])\n            if difference > difference:\n                difference = difference\n            else:\n                difference = difference\n    return difference\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -100\n    max_item = ''\n    for item in test_list:\n        if abs(item[0]-item[1]) > max_diff:\n            max_diff = abs(item[0]-item[1])\n            max_item = item\n    print(max_item)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # your code here\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i]-test_list[j]) > max_diff:\n                max_diff = abs(test_list[i]-test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(max(test_list)-min(test_list)), abs(max(test_list)-max(test_list)))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff not in result:\n                result.append(diff)\n    return max(result)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_length = len(test_list)\n    index = 0\n    diff = 0\n    while index < list_length - 1:\n        diff = max(diff, test_list[index+1] - test_list[index])\n        index += 1\n    return diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # return (max(test_list) - min(test_list))\n    result = (max(test_list) - min(test_list))\n    print(f\"maximum difference between pairs is {result}\")\n    return result\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    temp_list = []\n    sorted_list = []\n    while(len(subjectmarks)!= 0):\n        temp = subjectmarks.pop()\n        temp_list.append(temp)\n    temp_list = sorted(temp_list, key=lambda x: x[1])\n    for x in range(len(temp_list)):\n        sorted_list.append(temp_list[x])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    data = []\n    for i in subjectmarks:\n        data.append((i[0],i[1]))\n    data.sort(key=lambda x: x[1])\n    data = sorted(data,key=lambda x: x[1])\n    return data\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda subjectmarks: subjectmarks[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1], reverse=True)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = []\n    for i in subjectmarks:\n        marks.append(i[0])\n    marks.sort(reverse=True)\n    for i in range(len(subjectmarks)):\n        subjectmarks[i] = (subjectmarks[i][0], marks[i])\n    return subjectmarks\nprint(subject_marks([(1, 2), (4, 3), (4, 2), (2, 1)]))\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if type(subjectmarks) == list:\n        new_list = sorted(subjectmarks, key=lambda x: x[1])\n        return new_list\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l=[]\n    for i in subjectmarks:\n        l.append(i[1])\n    l.sort()\n    for i in l:\n        for j in range(0,len(subjectmarks)):\n            if subjectmarks[j][1]==i:\n                subjectmarks[j]=subjectmarks[j][0]\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks,key=lambda x: x[1])\n    print('Sorted List:')\n    for item in subjectmarks:\n        print(item)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], int):\n        return sum(data_list)\n    else:\n        return sum(recursive_list_sum(data_list[1:]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum([i for l in data_list for i in l])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for num in data_list:\n        if type(num) is list:\n            total += recursive_list_sum(num)\n        else:\n            total += num\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for val in data_list:\n        if type(val) == type([]):\n            sum += recursive_list_sum(val)\n        else:\n            sum += val\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif type(data_list)!= list:\n        return data_list\n    else:\n        return sum(data_list) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    if data_list == []:\n        return sum\n    else:\n        for i in range(len(data_list)):\n            if type(data_list[i]) == list:\n                sum += recursive_list_sum(data_list[i])\n            else:\n                sum += data_list[i]\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for i in range(len(data_list)):\n        if type(data_list[i]) == list:\n            sum += recursive_list_sum(data_list[i])\n        else:\n            sum += data_list[i]\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    elif type(data_list[0]) == list:\n        return sum(recursive_list_sum(data_list[0])) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for i in data_list:\n        if isinstance(i, list):\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for x in list:\n        if x > 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # print(list)\n    pos_cnt = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            pos_cnt += 1\n    return pos_cnt\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for element in list:\n        if element >= 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = 0\n    for i in list:\n        if i > 0:\n            n += 1\n    return n\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n    # your code goes here\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list) - list.count(-1)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    list.sort()\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    ways = {1:1}\n    \n    for i in range(2, n+1):\n        ways[i] = 0\n        for k in range(1, i):\n            ways[i] = ways[i] + ways[i-k]\n    \n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def recur(n,i):\n        if i == n+1:\n            return 1\n        if n == i:\n            return 0\n        if n % i == 0:\n            return 0\n        return recur(n,i-1)+recur(n,i+1)\n    return recur(n,2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    \n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n    \nprint(bell_number(6)) # => "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    assert n > 0\n    \n    dp = [[0]*(n+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        for j in range(i+1):\n            dp[i][j] = 0\n            \n    for i in range(n+1):\n        dp[i][0] = 1\n        \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i][j-1]\n            \n    return dp[n][n]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n <= 1:\n        return 1\n    \n    count = 0\n    for i in range(1, n + 1):\n        if bell_number(i - 1) <= n:\n            count += bell_number(n - i)\n    \n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def get_combinations(n):\n        return int(math.factorial(2*n)/(math.factorial(n) * math.factorial(n+1)))\n    return get_combinations(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    fact = [[1] + [0] * n for i in range(n + 1)]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def count(n):\n        if n <= 1:\n            return 1\n        if n == 2:\n            return 2\n        return count(n-1)+count(n-2)\n    return count(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    flag = True\n    if n == 0:\n        return flag\n    if n == 1:\n        return flag\n    if A[0] <= A[n-1]:\n        for i in range(n-1):\n            if A[i] > A[i+1]:\n                flag = False\n        return flag\n    if A[n-1] <= A[0]:\n        for i in range(n-1):\n            if A[i] < A[i+1]:\n                flag = False\n        return flag\n    \n    \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0:\n        return False\n    increasing = True\n    decreasing = True\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            increasing = False\n        if A[i]<A[i+1]:\n            decreasing = False\n    return (increasing and decreasing)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    a = A\n    b = sorted(A)\n    if a == b:\n        return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i]<A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)==0:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A==None or len(A)==0:\n        return False\n    if A==[]:\n        return True\n    up=False\n    down=False\n    for i in range(len(A)-1):\n        if A[i]<=A[i+1]:\n            down=True\n            break\n        elif A[i]>=A[i+1]:\n            up=True\n    if up and down:\n        return True\n    else:\n        return False\n    \ndef has_cycle(A): \n    '''\n    Write a python function to check whether the given array contains any cycles or not.\n    '''\n    if A==None or len(A)==0:\n        return False\n    if A==[]:\n        return False\n    stk=[]\n    for i in range(len(A)):\n        if A[i] in stk:\n            return True\n        else:\n            stk.append(A[i])\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n):\n        for j in range(1, n-i):\n            if A[i] > A[i+j]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Brute force method \n    # Time complexity : O(n) | Space complexity : O(1)\n    # for i in range(len(A)-1):\n    #     if A[i] >= A[i+1]:\n    #         return False\n    # return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\nA = [-1,-2,-3]\nprint(is_Monotonic(A)"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if not A: \n        return 0\n    lo = 0\n    hi = len(A) - 1\n    while lo < hi: \n        if A[lo] < A[hi]: \n            lo += 1\n        else: \n            hi -= 1\n    return 1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(0, len(l)):\n        if l[i:len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == s:\n        return True\n    if l == None or l == []:\n        return False\n    for i in range(len(s)):\n        if i == 0:\n            if l[0] == s[0]:\n                if is_sublist(l[1:], s[1:]):\n                    return True\n                else:\n                    return False\n        elif i == len(s) - 1:\n            if l[i] == s[i]:\n                if is_sublist(l[:i], s[:i]):\n                    return True\n                else:\n                    return False\n        else:\n            if l[i] == s[i]:\n                if is_sublist(l[:i], s[:i]):\n                    return True\n                else:\n                    return False\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) <= len(s):\n        for i in range(len(l)):\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        for j in range(len(s)):\n            if i + j >= len(l):\n                break\n            if l[i+j]!= s[j]:\n                return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    #print(l,s)\n    for i in range(len(l)):\n        #print(l[i])\n        if l[i]==s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if (len(l) > 0 and len(s) > 0) and (l[len(l)-1] == s[0]):\n        for i in range(len(l)):\n            if (l[i] == s[0]):\n                for j in range(1, len(s)):\n                    if (l[i + j]!= s[j]):\n                        return False\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[0:len(s)] == s\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    from itertools import combinations\n    from collections import Counter\n    n = len(Input)\n    com = combinations(Input, n//2)\n    if any(len(i)!= n//2 for i in com):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            lst.append(True)\n        else:\n            lst.append(False)\n    if all(lst) == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    L=len(Input)\n    if L==0:\n        return False\n    else:\n        for i in range(L):\n            for j in range(L):\n                if len(Input[i])!=len(Input[j]):\n                    return False\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)!= 0:\n        return all(len(i) == len(Input[0]) for i in Input)\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    List = []\n    for i in range(len(Input)):\n        for j in range(i,len(Input)):\n            List.append(Input[i]==Input[j])\n    if True in List:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return False\n    else:\n        for i in range(len(Input)-1):\n            if Input[i].size!= Input[i+1].size:\n                return False\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            for k in range(len(Input[i])):\n                if (Input[i][j]!= Input[i][k]):\n                    return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    \n    for i in range(0, n):\n        for j in range(i+1, n):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = len(Input[0])\n    if len(Input) == 0 or len(Input[0])!= l:\n        return False\n    for i in range(len(Input)):\n        if l!= len(Input[i]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length-1\n    \n    while gap >= 1:\n        for i in range(gap, length):\n            tmp = nums[i]\n            j = i-gap\n            while j >= 0 and nums[j] > tmp:\n                nums[j+gap] = nums[j]\n                j = j-gap\n            nums[j+gap] = tmp\n        gap = gap//2\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    count = 1\n    while count!= 0:\n        count = 0\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                count += 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    start = len(nums)\n    while start >= 1:\n        for i in range(start-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n        start -= 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    for j in range(len(nums)):\n        i = j\n        while i > 0 and nums[i - 1] > nums[i]:\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n            i -= 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    it is not the same as inbuilt sorted(),\n    but i can get the list in sorted order using it.\n    '''\n    # we can use a last part of the list to check for uniqueness\n    for j in range(len(nums)-1,0,-1):\n        for i in range(j):\n            if nums[i]>nums[i+1]:\n                nums[i],nums[i+1]=nums[i+1],nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return\n    step = 1\n    while step <= len(nums):\n        if step == 1:\n            step = 2 * step\n        end = len(nums)\n        while step <= end:\n            if nums[step-2] > nums[step-1]:\n                temp = nums[step-1]\n                nums[step-1] = nums[step-2]\n                nums[step-2] = temp\n            step += step\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    N = len(nums)\n    if N <= 1:\n        return nums\n    # partition\n    p = nums[0]\n    i, j = 0, 1\n    while j < N:\n        if nums[j] < p:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n        j += 1\n    nums[i], nums[0] = nums[0], nums[i]\n    # conquer\n    left, right = i-1, i\n    while right < N:\n        if nums[left] < nums[right]:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n        right += 1\n    # after conquer\n    for i in range(i, N):\n        nums[i] = nums[i]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    for i in range(n,0,-1):\n        \n        # to make difference \n        diff_sq = i*i \n        \n        # if diff_sq is equal to n \n        if diff_sq == n:\n            return \"Yes\" \n        \n        # if the diff_sq is less than n \n        elif diff_sq < n:\n            \n            # decreasing the square \n            for j in range(i,1,-1):\n                diff_sq = diff_sq - j*j \n                if diff_sq == n: \n                    return \"Yes\" \n                    break\n                if diff_sq < n:\n                    break\n                    \n            # if the diff_sq is greater than n \n            if diff_sq > n:\n                return \"No\" \n                break\n            \n        # if the diff_sq is greater than n \n        elif diff_sq > n:\n            break\n    \n    # if diff_sq is greater than n \n    return \"No\" \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)):\n        if n - i*i == i*i:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = 0\n    while n > 0:\n        r = n % 10\n        n = n // 10\n        s = s + r\n    if s * s == n:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import sqrt \n    \n    def is_Square(n): \n        return sqrt(n) == int(sqrt(n))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return (1<=n<=1000) and (1<=n-1)\ndef dif_Triangle(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of three squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2)\ndef dif_Pentagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of five squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4)\ndef dif_Hexagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of six squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5)\ndef dif_Octagonal(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of seven squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6)\ndef dif_Hexagonal_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of eight squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7)\ndef dif_Octagonal_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of nine squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7) and (1<=n-8)\ndef dif_Pentagonal_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of ten squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7) and (1<=n-8) and (1<=n-9)\ndef dif_Hexagonal_Reverse_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of eleven squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7) and (1<=n-8) and (1<=n-9) and (1<=n-10)\ndef dif_Octagonal_Reverse_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of twelve squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7) and (1<=n-8) and (1<=n-9) and (1<=n-10) and (1<=n-11)\ndef dif_Hexagonal_Reverse_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of thirteen squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7) and (1<=n-8) and (1<=n-9) and (1<=n-10) and (1<=n-11) and (1<=n-12)\ndef dif_Pentagonal_Reverse_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of fourteen squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7) and (1<=n-8) and (1<=n-9) and (1<=n-10) and (1<=n-11) and (1<=n-12) and (1<=n-13)\ndef dif_Octagonal_Reverse_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of fifteen squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7) and (1<=n-8) and (1<=n-9) and (1<=n-10) and (1<=n-11) and (1<=n-12) and (1<=n-13) and (1<=n-14)\ndef dif_Hexagonal_Reverse_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of sixteen squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7) and (1<=n-8) and (1<=n-9) and (1<=n-10) and (1<=n-11) and (1<=n-12) and (1<=n-13) and (1<=n-14) and (1<=n-15)\ndef dif_Pentagonal_Reverse_Reverse(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of seventeen squares or not.\n    '''\n    return (1<=n<=10000) and (1<=n-1) and (1<=n-2) and (1<=n-3) and (1<=n-4) and (1<=n-5) and (1<=n-6) and (1<=n-7) and (1<=n-8) and (1<=n-9) and (1<=n-10) and (1<=n-11) and (1<=n-12) an"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(n):\n        if n <= 0:\n            return False\n        else:\n            return int(math.sqrt(n)) ** 2 == n\n    \n    return all(map(is_square, range(n + 1)))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(sqrt(n))\n    if sqrt_n * sqrt_n == n:\n        return True\n    return False\n    \ndef dif_Cube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two cubes or not.\n    '''\n    sqrt_n = int(sqrt(n))\n    if sqrt_n * sqrt_n * sqrt_n == n:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #print(\"\\nDifference of Square\\n\")\n    if (n < 0):\n        return False\n    if (n == 0):\n        return True\n    \n    for i in range(1, n+1):\n        if (i*i == n):\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n <= 10):\n        return False\n    if (n == 11):\n        return True\n    if (n == 12):\n        return False\n    if (n == 13):\n        return True\n    if (n == 14):\n        return False\n    if (n == 15):\n        return True\n    if (n == 16):\n        return False\n    if (n == 17):\n        return True\n    if (n == 18):\n        return False\n    if (n == 19):\n        return True\n    if (n == 20):\n        return False\n    if (n == 21):\n        return True\n    if (n == 22):\n        return False\n    if (n == 23):\n        return True\n    if (n == 24):\n        return False\n    if (n == 25):\n        return True\n    if (n == 26):\n        return False\n    if (n == 27):\n        return True\n    if (n == 28):\n        return False\n    if (n == 29):\n        return True\n    if (n == 30):\n        return False\n    if (n == 31):\n        return True\n    if (n == 32):\n        return False\n    if (n == 33):\n        return True\n    if (n == 34):\n        return False\n    if (n == 35):\n        return True\n    if (n == 36):\n        return False\n    if (n == 37):\n        return True\n    if (n == 38):\n        return False\n    if (n == 39):\n        return True\n    if (n == 40):\n        return False\n    if (n == 41):\n        return True\n    if (n == 42):\n        return False\n    if (n == 43):\n        return True\n    if (n == 44):\n        return False\n    if (n == 45):\n        return True\n    if (n == 46):\n        return False\n    if (n == 47):\n        return True\n    if (n == 48):\n        return False\n    if (n == 49):\n        return True\n    if (n == 50):\n        return False\n    if (n == 51):\n        return True\n    if (n == 52):\n        return False\n    if (n == 53):\n        return True\n    if (n == 54):\n        return False\n    if (n == 55):\n        return True\n    if (n == 56):\n        return False\n    if (n == 57):\n        return True\n    if (n == 58):\n        return False\n    if (n == 59):\n        return True\n    if (n == 60):\n        return False\n    if (n == 61):\n        return True\n    if (n == 62):\n        return False\n    if (n == 63):\n        return True\n    if (n == 64):\n        return False\n    if (n == 65):\n        return True\n    if (n == 66):\n        return False\n    if (n == 67):\n        return True\n    if (n == 68):\n        return False\n    if (n == 69):\n        return True\n    if (n == 70):\n        return False\n    if (n == 71):\n        return True\n    if (n == 72):\n        return False\n    if (n == 73):\n        return True\n    if (n == 74):\n        return False\n    if (n == 75):\n        return True\n    if (n == 76):\n        return False\n    if (n == 77):\n        return True\n    if (n == 78):\n        return False\n    if (n == 79):\n        return True\n    if (n == 80):\n        return False\n    if (n == 81):\n        return True\n    if (n == 82):\n        return False\n    if (n == 83):\n        return True\n    if (n == 84):\n        return False\n    if (n == 85):\n        return True\n    if (n == 86):\n        return False\n    if (n == 87):\n        return True\n    if (n == 88):\n        return False\n    if (n == 89):\n        return True\n    if (n == 90):\n        return False\n    if (n == 91):\n        return True\n    if (n == 92):\n        return False\n    if (n == 93):\n        return True\n    if (n == 94):\n        return False\n    if (n == 95):\n        return True\n    if (n == 96):\n        return False\n    if (n == 97):\n        return True\n    if (n == 98):\n        return False\n    if (n == 99):\n        return True\n    if (n == 100):\n        return False\n    if (n == 101):\n        return True\n    if (n == 102):\n        return False\n    if (n == 103):\n        return True\n    if (n == 104):\n        return False\n    if (n == 105):\n        return True\n    if (n == 106):\n        return False\n    if (n == 107):\n        return True\n    if (n == 108):\n        return False\n    if (n == 109):\n        return True\n    if (n == 110):\n        return False\n    if (n == 111):\n        return True\n    if (n == 112):\n        return False\n    if (n == 113):\n        return True\n    if (n == 114):\n        return False\n    if (n == 115):\n        return True\n    if (n == 116):\n        return False\n    if (n == 117):\n        return True\n    if (n == 118):\n        return False\n    if (n == 119):\n        return True\n    if (n == 120):\n        return False\n    if (n == 121):\n        return True\n    if (n == 122):\n        return False\n    if (n == 123):\n        return True\n    if (n == 124):\n        return False\n    if (n == 125):\n        return True\n    if (n == 126):\n        return False\n    if (n == 127):\n        return True\n    if (n == 128):\n        return False\n    if (n == 129):\n        return True\n    if (n == 130):\n        return False\n    if (n == 131):\n        return True\n    if (n == 132):\n        return False\n    if (n == 133):\n        return True\n    if (n == 134):\n        return False\n    if (n == 135):\n        return True\n    if (n == 136):\n        return False\n    if (n == 137):\n        return True\n    if (n == 138):\n        return False\n    if (n == 139):\n        return True\n    if (n == 140):\n        return False\n    if (n == 141):\n        return True\n    if (n == 142):\n        return False\n    if (n == 143):\n        return True\n    if (n == 144):\n        return False\n    if (n == 145):\n        return True\n    if (n == 146):\n        return False\n    if (n == 147):\n        return True\n    if (n == 148):\n        return False\n    if (n == 149):\n        return True\n    if (n == 150):\n        return False\n    if (n == 151):\n        return True\n    if (n == 152):\n        return False\n    if (n == 153):\n        return True\n    if (n == 154):\n        return False\n    if (n == 155):\n        return True\n    if (n == 156):\n        return False\n    if (n == 157):\n        return True\n    if (n == 158):\n        return False\n    if (n == 159):\n        return True\n    if (n == 160):\n        return False\n    if (n == 161):\n        return True\n    if (n == 162):\n        return False\n    if (n == 163):\n        return True\n    if (n == 164):\n        return False\n    if (n == 165):\n        return True\n    if (n == 166):\n        return False\n    if (n == 167):\n        return True\n    if (n == 168):\n        return False\n    if (n == 169):\n        return True\n    if (n == 170):\n        return False\n    if (n == 171):\n        return True\n    if (n == 172):\n        return False\n    if (n == 173):\n        return True\n    if (n == 174):\n        return False\n    if (n == 175):\n        return True\n    if (n == 176):\n        return False\n    i"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n**0.5)%1==0:\n        return True\n    else:\n        return False\ndef dif_cube(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two cubes or not.\n    '''\n    return n%3==0\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index = 0\n    while index < len(patterns):\n        if len(colors)!= len(patterns[index]):\n            return False\n        for i in range(len(colors)):\n            if patterns[index][i]!= colors[i]:\n                return False\n        index += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #Your code here\n    print(\"Given colors: \" + str(colors))\n    print(\"Given patterns: \" + str(patterns))\n    for color in colors:\n        if (color in patterns) == True:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_patterns = dict(zip(colors, patterns))\n    for key, value in color_patterns.items():\n        if len(value) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(colors):\n        if patterns[i] == \"R\":\n            if colors[i] == \"G\" or colors[i] == \"B\":\n                return False\n        if patterns[i] == \"G\":\n            if colors[i] == \"R\" or colors[i] == \"B\":\n                return False\n        if patterns[i] == \"B\":\n            if colors[i] == \"G\" or colors[i] == \"R\":\n                return False\n        i += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return False\n    elif len(colors) == 0:\n        return False\n    elif len(colors) == len(patterns):\n        patterns.reverse()\n        return patterns == colors\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # If patterns is empty, return True\n    if len(patterns) == 0:\n        return True\n    \n    # If there is no colors and patterns, return False\n    if len(colors) == 0:\n        return False\n    \n    # If there is no patterns, return False\n    if len(patterns) == 0:\n        return False\n    \n    # If patterns is of length 1, return False\n    if len(patterns) == 1:\n        return False\n    \n    # Initialize variables\n    color_index = 0\n    pattern_index = 0\n    \n    # Check if all colors are followed by the pattern\n    while color_index < len(colors):\n        color = colors[color_index]\n        pattern = patterns[pattern_index]\n        \n        # If pattern is 0, return False\n        if pattern == 0:\n            return False\n        \n        # If the pattern is 1, return False\n        if pattern == 1:\n            return False\n        \n        # If the colors match, continue to check the patterns\n        if pattern_index < len(patterns) - 1:\n            pattern_index += 1\n        else:\n            return False\n        \n        # If the colors don't match, return False\n        if not compare_colors(color, pattern):\n            return False\n        \n        # Increment color and pattern indexes\n        color_index += 1\n        pattern_index += 1\n    \n    # Return True\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if(patterns == None or len(patterns) == 0):\n        return False\n    \n    if(colors == None or len(colors) == 0):\n        return False\n    \n    if(len(colors)!= len(patterns)):\n        return False\n    \n    if(patterns == None or len(patterns) == 0):\n        return True\n    \n    for i in range(len(colors)):\n        if(colors[i]!= patterns[i]):\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not is_validpattern(colors, pattern):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == 'r':\n            if colors[i]!= colors[i+1]:\n                return False\n        elif patterns[i] == 'o':\n            if colors[i]!= colors[i-1]:\n                return False\n        elif patterns[i] == 'y':\n            if colors[i]!= colors[i-1] and colors[i]!= colors[i+1]:\n                return False\n    return True\n    \n    \ndef get_color_list(colors,patterns):\n    '''\n    Write a function to return a list of the colors\n    that matches the patterns given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == 'r':\n            if colors[i]!= colors[i+1]:\n                return False\n        elif patterns[i] == 'o':\n            if colors[i]!= colors[i-1]:\n                return False\n        elif patterns[i] == 'y':\n            if colors[i]!= colors[i-1] and colors[i]!= colors[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) < 2:\n        return test_list\n    else:\n        #sort the list in ascending order\n        test_list.sort()\n        #find the middle of the list\n        middle = len(test_list)//2\n        #split the list in half\n        left_list = test_list[:middle]\n        right_list = test_list[middle:]\n        #loop through the left half of the list\n        for i in range(len(left_list)):\n            #compare the element to each element of the right half of the list\n            for j in range(len(right_list)):\n                #if the element is divisible\n                if left_list[i] % K == 0 and right_list[j] % K == 0:\n                    #add the elements of the lists into a list\n                    result = list(left_list[i:len(left_list)]) + list(right_list[j:len(right_list)])\n                    #sort the result\n                    result.sort()\n                    #return the result\n                    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if ((i!= j) and (test_list[i][0] % K == 0)):\n                result.append((test_list[i], test_list[j]))\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 or test_list[i][1] % K == 0:\n            result_list.append(test_list[i])\n    return result_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [i for i in test_list if i[0] % K == i[1] % K == i[2] % K == i[3] % K == i[4] % K == i[5] % K == i[6] % K == i[7] % K == i[8] % K == i[9] % K]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # TODO: Write your solution here\n    ans = set()\n    for tup in test_list:\n        n = tup[0]\n        for i in range(1, len(tup)):\n            if tup[i] % K!= 0:\n                break\n        else:\n            ans.add(tuple(tup))\n    return ans\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    K_multiples = []\n    for i in range(1, K + 1):\n        for j in test_list:\n            if i % j == 0:\n                K_multiples.append(i)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tup_list = []\n    for i in range(len(test_list)):\n        if (sum(test_list[i]) % K == 0):\n            tup_list.append(test_list[i])\n    return(tup_list)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        if (len(test_list[i]) == K):\n            res.append(test_list[i])\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    num = 1\n    while len(test_list) < K:\n        for i in range(len(test_list)):\n            if num % test_list[i][0] == 0:\n                if num % test_list[i][1] == 0:\n                    test_list.pop(i)\n                    break\n            else:\n                num += 1\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all(i%K == 0 for i in x), test_list))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n    \ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is even or odd.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n    \ndef is_Prime(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n    \ndef is_Palindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    reversenumber=0\n    while(n>0):\n        rem=n%10\n        reversenumber=reversenumber*10+rem\n        n=n//10\n    if reversenumber==n:\n        return True\n    else:\n        return False\n        \ndef is_Palindrome_using_Reverse(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    reversenumber=0\n    while(n>0):\n        rem=n%10\n        reversenumber=reversenumber*10+rem\n        n=n//10\n    if reversenumber==n:\n        return True\n    else:\n        return False\n    \ndef is_Palindrome_using_reverse(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    n=str(n)\n    return n==n[::-1]\n    \ndef is_Palindrome_using_reverse(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    n=str(n)\n    return n==n[::-1]\n    \ndef is_Power(a,b): \n    '''\n    Write a python function to find whether a number is power of another number.\n    '''\n    if a**b==b:\n        return True\n    else:\n        return False\n    \ndef is_Power_using_forloop(a,b): \n    '''\n    Write a python function to find whether a number is power of another number.\n    '''\n    # a,b=input().split()\n    # a=int(a)\n    # b=int(b)\n    for i in range(1,b+1):\n        if a**i==b:\n            return True\n    return False\n    \ndef is_Power_using_whileloop(a,b): \n    '''\n    Write a python function to find whether a number is power of another number.\n    '''\n    # a,b=input().split()\n    # a=int(a)\n    # b=int(b)\n    a=int(a)\n    b=int(b)\n    i=1\n    while(i<=b):\n        if a**i==b:\n            return True\n        i=i+1\n    return False\n    \ndef is_Power_using_functions(a,b): \n    '''\n    Write a python function to find whether a number is power of another number.\n    '''\n    # a,b=input().split()\n    # a=int(a)\n    # b=int(b)\n    a=int(a)\n    b=int(b)\n    return a**b==b\n    \ndef is_Divisible(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_forloop(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    for i in range(1,k):\n        if n%i==0:\n            return True\n    return False\n    \ndef is_Divisible_using_forloop(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    for i in range(1,k):\n        if n%i==0:\n            return True\n    return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if(n,k): \n    '''\n    Write a python function to find whether a number is divisible by another number.\n    '''\n    if n%k==0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_using_if"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)%2==0):\n        return True\n    else:\n        return False\n    \nword_len(\"hello world\")"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\nprint(word_len(\"abcdefghijklmnopqrstuvwxyz\"))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        print('False') \n    else: \n        print('True') \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    n = len(s)\n    if n%2!= 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    w_len = len(s)\n    if w_len % 2 == 0:\n        print(\"The length of the word is even\")\n    else:\n        print(\"The length of the word is odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return True\n    else:\n        return False\n    \n    \ndef word_count(s):\n    '''\n    Write a python function to check whether the word has even number of letters or not.\n    '''\n    count=0\n    for i in s:\n        if len(i)%2!=0:\n            count+=1\n    return count\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1))//2\n    \n    \ndef fibonacci_number(n):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if n<=1:\n        return n\n    else:\n        return fibonacci_number(n-1) + fibonacci_number(n-2)\n        \n        \ndef sum_series(n, a = 0, b = 1):\n    '''\n    Write a function that returns the nth element in a sum series.\n    '''\n    return a + n*(b-a)\n    \n    \ndef test_sum_series():\n    '''\n    Write a test that tests your function.\n    '''\n    assert sum_series(1) == 1\n    assert sum_series(2) == 1\n    assert sum_series(3) == 1\n    assert sum_series(4) == 2\n    assert sum_series(5) == 3\n    assert sum_series(6) == 5\n    assert sum_series(7) == 8\n    assert sum_series(8) == 13\n    assert sum_series(9) == 21\n    assert sum_series(10) == 28\n    \n    \ndef is_square(n):\n    '''\n    Write a function to determine if a number is a perfect square.\n    '''\n    return n**(0.5) == int(n**(0.5))\n    \n    \ndef is_square(n):\n    '''\n    Write a function to determine if a number is a perfect square.\n    '''\n    return n**0.5 == int(n**0.5)\n    \n    \ndef palindrome(word):\n    '''\n    Write a function that determines if a word is a palindrome.\n    '''\n    return word == word[::-1]\n    \n    \ndef palindrome(word):\n    '''\n    Write a function that determines if a word is a palindrome.\n    '''\n    return word == word[::-1]\n    \n    \ndef palindrome(word):\n    '''\n    Write a function that determines if a word is a palindrome.\n    '''\n    return word == word[::-1]\n    \n    \ndef palindrome(word):\n    '''\n    Write a function that determines if a word is a palindrome.\n    '''\n    return word == word[::-1]\n    \n    \ndef palindrome(word):\n    '''\n    Write a function that determines if a word is a palindrome.\n    '''\n    return word == word[::-1]\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%divisor == 0:\n            return False\n        else:\n            divisor += 1\n    return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    divisor = 2\n    while n > 1 and divisor < n:\n        if n%di"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    count = 1\n    while count!= n:\n        a += 1\n        count += 1\n        a = (a*a*a) - (a+1) + 1\n    return a\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([int(i) for i in str(n*(n + 1)/2)])\n    "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n-1) * (n-2) / 6)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n -= 1\n    a = (1/3)**(1/2)\n    m = a**n + (1-a**n)/2\n    return m\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((1 + n * n * (n - 1) / 2))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n=int(n)\n    i=0\n    p=0\n    q=0\n    z=0\n    x=0\n    while i<n:\n        p=p*3\n        q=q*4\n        z=z+p+q\n        x=x+1\n        i=i+1\n    return z\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    else:\n        return int((n * (n + 1) * (n + 2)) / 6)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = int(n)\n    if n < 1:\n        return 1\n    return 0\n    \nprint(tetrahedral_number(3))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n+1):\n        if nth_tetrahedral_number(i):\n            return i\n    else:\n        return -1\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    pi = math.pi\n    volume = 4/3 * pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    radius = float(r)\n    V = 4/3*math.pi*radius**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    def surface_area(r):\n        return 4 * math.pi * (r**2)\n    print(\"The surface area of the sphere is\", surface_area(r))\n    print(\"The volume of the sphere is\", 4/3 * math.pi * (r**3))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    vol = (4/3)*pi*r**3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4 / 3 * pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * (r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    sphere_volume = (4/3) * pi * (r**3)\n    return sphere_volume\nprint(volume_sphere(2))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if(strr == \"\"):\n        return None\n    dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    output = 0\n    for i in range(len(strr)):\n        output = output + dict[strr[i]] % 26\n    return output\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    count=0\n    for i in strr:\n        count+=ord(i)\n    return count%26\nprint(get_Char('abcd'))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res=0\n    for i in range(len(strr)):\n        res=res+(ord(strr[i])+i)%26\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr((ord(strr[0]) + ord(strr[1])) % 26 + 65)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = 'python'\n    ascii_value_list = []\n    for char in strr:\n        ascii_value_list.append(ord(char))\n        \n    return sum(ascii_value_list) % 26\n    \nif __name__ == '__main__':\n    #strr = input()\n    #print(get_Char(strr))\n    strr = 'python'\n    print(get_Char(strr)"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for ch in strr:\n        res = res + ord(ch)\n    return res % 26\n    \nif __name__ == \"__main__\":\n    strr = input(\"Enter the string\")\n    result = get_Char(strr)\n    print(\"The ASCII value of the given string is \",result)\n    "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # the modulo operator\n    return (ord(strr) + ord('a') + ord('A')) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ch=ord(strr)\n    k=ch+ord('a')-ord('a')\n    k=k%26\n    str1=chr(k)\n    return str1\nprint(get_Char('z'))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for x in strr:\n        res += ord(x)\n    return (res%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    list1 = list(strr)\n    i = 0\n    while i < len(list1):\n        list1[i] = chr((ord(list1[i])+ord('a')) % 26 + ord('a'))\n        i = i + 1\n    return ''.join(list1)\n    "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum(2**i if i < n else 1 for i in range(1,n+1))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num = 1\n    i = 0\n    while i < n:\n        num = (num + 2) * (num + 1) / 2\n        i = i + 1\n    return num\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return 1 if n < 1 else sequence(n - 1) + n\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    else:\n        return newman_conway_sequence(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = []\n    seq_length = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sequence.append(1)\n        elif i % 2 == 1:\n            sequence.append(0)\n        seq_length += 1\n    sequence = sequence + sequence\n    return sequence\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 2\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def fib(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return fib(n - 1) + fib(n - 2)\n    return fib(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return next(n for n in range(1, n+1))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 3\n    if n == 4: return 2\n    if n == 5: return 2\n    if n == 6: return 3\n    if n == 7: return 3\n    if n == 8: return 5\n    if n == 9: return 6\n    if n == 10: return 6\n    if n == 11: return 7\n    if n == 12: return 7\n    if n == 13: return 8\n    if n == 14: return 8\n    if n == 15: return 9\n    if n == 16: return 9\n    if n == 17: return 10\n    if n == 18: return 10\n    if n == 19: return 11\n    if n == 20: return 11\n    if n == 21: return 12\n    if n == 22: return 12\n    if n == 23: return 13\n    if n == 24: return 13\n    if n == 25: return 14\n    if n == 26: return 14\n    if n == 27: return 15\n    if n == 28: return 15\n    if n == 29: return 16\n    if n == 30: return 16\n    if n == 31: return 17\n    if n == 32: return 17\n    if n == 33: return 18\n    if n == 34: return 18\n    if n == 35: return 19\n    if n == 36: return 19\n    if n == 37: return 20\n    if n == 38: return 20\n    if n == 39: return 21\n    if n == 40: return 21\n    if n == 41: return 22\n    if n == 42: return 22\n    if n == 43: return 23\n    if n == 44: return 23\n    if n == 45: return 24\n    if n == 46: return 24\n    if n == 47: return 25\n    if n == 48: return 25\n    if n == 49: return 26\n    if n == 50: return 26\n    if n == 51: return 27\n    if n == 52: return 27\n    if n == 53: return 28\n    if n == 54: return 28\n    if n == 55: return 29\n    if n == 56: return 29\n    if n == 57: return 30\n    if n == 58: return 30\n    if n == 59: return 31\n    if n == 60: return 31\n    if n == 61: return 32\n    if n == 62: return 32\n    if n == 63: return 33\n    if n == 64: return 33\n    if n == 65: return 34\n    if n == 66: return 34\n    if n == 67: return 35\n    if n == 68: return 35\n    if n == 69: return 36\n    if n == 70: return 36\n    if n == 71: return 37\n    if n == 72: return 37\n    if n == 73: return 38\n    if n == 74: return 38\n    if n == 75: return 39\n    if n == 76: return 39\n    if n == 77: return 40\n    if n == 78: return 40\n    if n == 79: return 41\n    if n == 80: return 41\n    if n == 81: return 42\n    if n == 82: return 42\n    if n == 83: return 43\n    if n == 84: return 43\n    if n == 85: return 44\n    if n == 86: return 44\n    if n == 87: return 45\n    if n == 88: return 45\n    if n == 89: return 46\n    if n == 90: return 46\n    if n == 91: return 47\n    if n == 92: return 47\n    if n == 93: return 48\n    if n == 94: return 48\n    if n == 95: return 49\n    if n == 96: return 49\n    if n == 97: return 50\n    if n == 98: return 50\n    if n == 99: return 51\n    if n == 100: return 51\n    if n == 101: return 52\n    if n == 102: return 52\n    if n == 103: return 53\n    if n == 104: return 53\n    if n == 105: return 54\n    if n == 106: return 54\n    if n == 107: return 55\n    if n == 108: return 55\n    if n == 109: return 56\n    if n == 110: return 56\n    if n == 111: return 57\n    if n == 112: return 57\n    if n == 113: return 58\n    if n == 114: return 58\n    if n == 115: return 59\n    if n == 116: return 59\n    if n == 117: return 60\n    if n == 118: return 60\n    if n == 119: return 61\n    if n == 120: return 61\n    if n == 121: return 62\n    if n == 122: return 62\n    if n == 123: return 63\n    if n == 124: return 63\n    if n == 125: return 64\n    if n == 126: return 64\n    if n == 127: return 65\n    if n == 128: return 65\n    if n == 129: return 66\n    if n == 130: return 66\n    if n == 131: return 67\n    if n == 132: return 67\n    if n == 133: return 68\n    if n == 134: return 68\n    if n == 135: return 69\n    if n == 136: return 69\n    if n == 137: return 70\n    if n == 138: return 70\n    if n == 139: return 71\n    if n == 140: return 71\n    if n == 141: return 72\n    if n == 142: return 72\n    if n == 143: return 73\n    if n == 144: return 73\n    if n == 145: return 74\n    if n == 146: return 74\n    if n == 147: return 75\n    if n == 148: return 75\n    if n == 149: return 76\n    if n == 150: return 76\n    if n == 151: return 77\n    if n == 152: return 77\n    if n == 153: return 78\n    if n == 154: return 78\n    if n == 155: return 79\n    if n == 156: return 79\n    if n == 157: return 80\n    if n == 158: return 80\n    if n == 159: return 81\n    if n == 160: return 81\n    if n == 161: return 82\n    if n == 162: return 82\n    if n == 163: return 83\n    if n == 164: return 83\n    if n == 165: return 84\n    if n == 166: return 84\n    if n == 167: return 85\n    if n == 168: return 85\n    if n == 169: return 86\n    if n == 170: return 86\n    if n == 171: return 87\n    if n == 172: return 87\n    if n == 173: return 88\n    if n == 174: return 88\n    if n == 175: return 89\n    if n == 176: return 89\n    if n == 177: return 90\n    if n == 178: return 90\n    if n == 179: return 91\n    if n == 180: return 91\n    if n == 181: return 92\n    if n == 182: return 92\n    if n == 183: return 93\n    if n == 184: return 93\n    if n == 185: return 94\n    if n == 186: return 94\n    if n == 187: return 95\n    if n == 188: return 95\n    if n == 189: return 96\n    if n == 190: return 96\n    if n == 191: return 97\n    if n == 192: return 97\n    if n == 193: return 98\n    if n == 194: return 98\n    if n == 195: return 99\n    if n == 196: return 99\n    if n == 197: return 100\n    if n == 198: return 100\n    if n == 199: return 101\n    if n == 200: return 101\n    if n == 201: return 102\n    if n == 202: return 102\n    if n == 203: return 103\n    if n == 204: return 103\n    if n == 205: return 104\n    if n == 206: return 104\n    if n == 207: return 105\n    if n == 208: return 105\n    if n == 209: return 106\n    if n == 210: return 106\n    if n == 211: return 107\n    if n == 212: return 107\n    if n == 213: return 108\n    if n == 214: return 108\n    if n == 215: return 109\n    if n == 216: return 109\n    if n == 217: return 110\n    if n == 218: return 110\n    if n == 219: return 111\n    if n == 220: return 111\n    if n == 221: return 112\n    if n == 222: return 112\n    if n == 223: retur"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def sequence_helper(n, pos, x, y):\n        if n == 0:\n            return x, y\n        else:\n            n = n - 1\n            x, y = sequence_helper(n, pos, y, x)\n            if pos == 1:\n                y = y + x\n                x = x - 1\n            else:\n                x = x + 1\n                y = y - 1\n            return x, y\n    return sequence_helper(n, 1, 0, 1)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_radius = r\n    sphere_surface_area = 4*math.pi*sphere_radius**2\n    return sphere_surface_area\nprint(surfacearea_sphere(2))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # c=float(math.pi*r**2)\n    # print(c)\n    return 4*math.pi*(r**2)\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # c=2*math.pi*r*h\n    # print(c)\n    return 2*math.pi*(r+h)\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=float(b*h)/2\n    return s\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    # c=float(math.pi*r**2*(math.sin(math.pi/3)**2))\n    # print(c)\n    return (math.pi*r**2)+(math.pi*r*(math.sin(math.pi/3))**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    a = 4 * math.pi * r * r\n    print(\"The surface area of a sphere with radius {} is {}\".format(r,a))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    print(area)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * math.pow(r,2)\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    S = 4*math.pi*r**2\n    return S\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14\n    area = 4 * pi * (r**2)\n    return area\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x=1\n    i=1\n    n=n-1\n    while n!=0:\n        x=x*2+1\n        i+=1\n        if i%3==1:\n            n-=1\n    return x\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (1 - 2 * n) * (n ** 2 + n) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            n_i = i / 2 + 1\n        else:\n            n_i = i / 2 - 1\n        print(f'{n_i ** 2}')\n        if n_i == 1:\n            return n_i\n    return None\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    import numpy as np\n    def centered_hexagonal_number_np(n):\n        return np.float(n * (3 * np.sqrt(3) - 2 * np.sqrt(15)) / (9 * np.sqrt(3)))\n    return centered_hexagonal_number_np(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n ** 2 - (n - 1) ** 2"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return 0\n    # base case\n    if n == 0:\n        return 0\n    else:\n        return 6*centered_hexagonal_number(n-1) - (2*n+1)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (0.5*(n*(n+1) + (n+1)*(n+1)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    assert n > 0\n    assert n <= 15\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    assert n > 0\n    if n == 1:\n        return 1\n    else:\n        n_s = (n - 1) // 2\n        return 2 * n_s * (2 * n_s + 1) // 2 + 1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for keys1,values1 in dict1.items():\n        if keys1 not in dict2.keys():\n            dict4[keys1] = values1\n        else:\n            dict4[keys1] = values1\n    for keys2,values2 in dict2.items():\n        if keys2 not in dict1.keys():\n            dict4[keys2] = values2\n        else:\n            dict4[keys2] = values2\n    for keys3,values3 in dict3.items():\n        if keys3 not in dict1.keys():\n            dict4[keys3] = values3\n        else:\n            dict4[keys3] = values3\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items() | dict2.items() | dict3.items())\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merge = {}\n    for k, v in dict1.items():\n        dict_merge[k] = dict_merge.get(k, {})\n        dict_merge[k]['dict2'] = dict_merge.get(k, {})\n        dict_merge[k]['dict3'] = dict_merge.get(k, {})\n        dict_merge[k]['dict2']['dict1'] = dict_merge.get(k, {})\n        dict_merge[k]['dict2']['dict1']['v1'] = v['dict1']['v1']\n        dict_merge[k]['dict2']['dict1']['v2'] = v['dict1']['v2']\n        dict_merge[k]['dict2']['dict1']['v3'] = v['dict1']['v3']\n        dict_merge[k]['dict2']['dict1']['v4'] = v['dict1']['v4']\n        dict_merge[k]['dict2']['dict1']['v5'] = v['dict1']['v5']\n        dict_merge[k]['dict2']['dict1']['v6'] = v['dict1']['v6']\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = {}\n    for i in dict1:\n        if i in dict2:\n            if i in dict3:\n                final_dict[i] = dict1[i] + dict2[i] + dict3[i]\n            else:\n                final_dict[i] = dict1[i] + dict2[i]\n        else:\n            if i in dict3:\n                final_dict[i] = dict3[i]\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    for d1, d2, d3 in zip(dict1.values(),dict2.values(),dict3.values()):\n        dict_merged[d1] = d2\n        dict_merged[d2] = d3\n        dict_merged[d3] = d1\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for key in dict1:\n        if key in dict2:\n            res[key] = dict1[key] + dict2[key]\n        else:\n            res[key] = dict1[key]\n    for key in dict2:\n        if key in dict3:\n            res[key] = dict2[key] + dict3[key]\n        else:\n            res[key] = dict2[key]\n    for key in dict3:\n        if key not in res:\n            res[key] = dict3[key]\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict={}\n    for key, value in dict1.items():\n        merged_dict[key]=value\n    for key, value in dict2.items():\n        merged_dict[key]=value\n    for key, value in dict3.items():\n        merged_dict[key]=value\n    return merged_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #frequencies_dict = {}\n    #for i in range(len(list1)):\n        #frequencies_dict[list1[i]] = list1.count(list1[i])\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = {}\n    for element in list1:\n        counts[element] = counts.get(element, 0) + 1\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count=collections.Counter(list1)\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        if list1[i] in freq:\n            freq[list1[i]] += 1\n        else:\n            freq[list1[i]] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for x in list1:\n        if x not in freq:\n            freq[x] = 1\n        else:\n            freq[x] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\ndef check_duplicates(d):\n    '''\n    Write a function to check if a dictionary contains any duplicate keys.\n    '''\n    d1 = collections.Counter(d)\n    print(d1)\n    if len(d1)!= len(d):\n        print('No duplicate keys')\n    else:\n        print('duplicate keys')\ndef vowels(s):\n    '''\n    Write a program to count the number of vowels and consonants in a string.\n    '''\n    v = 0\n    c = 0\n    for i in s:\n        if i.lower() in \"aeiou\":\n            v = v + 1\n        else:\n            c = c + 1\n    print('vowels:',v,'\\n','consonants:',c)\ndef freq_count_sorted(l):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l)\n    d = sorted(d.items(), key = lambda x: x[1],reverse= True)\n    return d\ndef sorter_frequency(l1,l2):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d1 = collections.Counter(l1)\n    d2 = collections.Counter(l2)\n    d1 = sorted(d1.items(), key = lambda x: x[1],reverse=True)\n    d2 = sorted(d2.items(), key = lambda x: x[1],reverse=True)\n    print(d1,d2)\n    print(dict(d1).keys(),dict(d2).keys())\ndef unique_elements(l):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l)\n    l = sorted(d.items(), key = lambda x: x[0],reverse=False)\n    print(l)\n    l = list(map(lambda x:x[0],l))\n    print(l)\n    l = list(set(l))\n    print(l)\ndef filter_even_odd(l):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l)\n    l = sorted(d.items(), key = lambda x: x[1],reverse=False)\n    print(l)\n    l = list(map(lambda x:x[0],l))\n    print(l)\n    l = list(set(l))\n    print(l)\ndef reverse_list_item(l):\n    '''\n    Write a program to reverse the items of a list, one item at a time.\n    '''\n    l1 = []\n    while len(l)!=0:\n        l1.append(l.pop())\n    print(l1)\ndef last_last(l):\n    '''\n    Write a program to find the last third element of a given list.\n    '''\n    if len(l)%3 == 0:\n        l1 = l[len(l)-(len(l)//3):len(l)-(len(l)//3)]\n        print(l1[-1])\n    else:\n        l1 = l[len(l)-(len(l)//3+1):len(l)-(len(l)//3+1)]\n        print(l1[-1])\ndef max_count(l1,l2):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l1)\n    d1 = collections.Counter(l2)\n    d = d + d1\n    d = sorted(d.items(), key = lambda x: x[1],reverse= True)\n    print(d)\ndef second_highest_number(l1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l1)\n    d = sorted(d.items(), key = lambda x: x[1],reverse=True)\n    print(d)\n    d = d[1][0]\n    return d\ndef rotate_dict(l1,l2):\n    '''\n    Write a function to rotate a dictionary,\n    the keys are in sorted order, and the dictionary should be rotated by l2 keys.\n    '''\n    d = collections.OrderedDict(l1)\n    d1 = collections.OrderedDict(l2)\n    d.update(d1)\n    print(d)\ndef dict_values_larger(l1):\n    '''\n    Write a program to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l1)\n    d = sorted(d.items(), key = lambda x: x[1],reverse= True)\n    d = dict(d)\n    print(d)\ndef find_longest_word(l1,l2):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l1)\n    d1 = collections.Counter(l2)\n    d = d + d1\n    d = sorted(d.items(), key = lambda x: x[1],reverse= True)\n    print(d)\n    d = d[-1][0]\n    return d\ndef dict_values_smaller(l1):\n    '''\n    Write a program to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l1)\n    d = sorted(d.items(), key = lambda x: x[1],reverse= False)\n    d = dict(d)\n    print(d)\ndef most_common_number(l1):\n    '''\n    Write a program to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l1)\n    d = sorted(d.items(), key = lambda x: x[0],reverse= False)\n    print(d)\n    d = d[0][0]\n    return d\ndef common_member(l1,l2):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    The function should return dictionary in sorted order of the frequencies.\n    '''\n    d = collections.Counter(l1)\n    d1 = collections.Counter(l2)\n    d = d + d1\n    d = sorted(d.items(), key = lambda x: x[1],reverse= False)\n    print(d)\n    d = d[0][0]\n    return d\ndef palindrome_check(s):\n    '''\n    Write a program to check if a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        print('palindrome')\n    else:\n        print('Not palindrome')\ndef palindrome_check2(s):\n    '''\n    Write a program to check if a string is a palindrome or not.\n    '''\n    flag = 1\n    for i in range(len(s)//2):\n        if s[i]!= s[len(s)-i-1]:\n            flag = 0\n            break\n    if flag == 1:\n        print('palindrome')\n    else:\n        print('Not palindrome')\ndef string_sp"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    mydict = collections.Counter(list1)\n    return mydict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # If not 1, then loop down to find 1.\n    while n >= 1:\n        if n > 1 and (n - 1) * 10 <= N:\n            N = (n - 1) * 10\n        elif n > 1 and (n - 1) * 10 >= N:\n            N = (n - 1) * 10\n        else:\n            return n\n        n = n - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num(N):\n        if N % 2 == 0:\n            return int(N / 2)\n        else:\n            return int((N + 1) / 2)\n    return closest_num(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Approach 1\n    # return min(N, min(N//5, N//3, N//2, N-1, N-2, N-3, N-4))\n    \n    # Approach 2\n    return min([num for num in range(N+1) if num%2==0])\n    \n    # Approach 3\n    return max([num for num in range(N-1, -1, -1) if num%2!=0])\n    \n    \nif __name__ == \"__main__\":\n    \n    test_cases = [\n        [1, 5, 0, -2, 2, -5, -2, 4, 2, -3, 4],\n        [1, 5, 0, -2, 2, -5, -2, 4, 2, -3, 4, 8, 1, -8, 5],\n    ]\n    \n    for test_case in test_cases:\n        result = closest_num(test_case)\n        print(\"The closest number is \", result"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    \n    if N % 2 == 0:\n        return N//2\n    else:\n        return N//2 + 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num_recursive(N, min_num):\n        if N > min_num:\n            return closest_num_recursive(N - 1, min_num)\n        elif N < min_num:\n            return min_num\n        else:\n            return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    if N > n:\n        print(\"The closest number is less than n\")\n    else:\n        if N < n:\n            print(\"The closest number is n\")\n        else:\n            print(\"The closest number is the number itself\")\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = N\n    while N > 0:\n        #print(N)\n        if N % 2 == 0:\n            N = N / 2\n        else:\n            N = (N * 3) + 1\n        if abs(N - closest_num) < abs(closest_num - N):\n            closest_num = N\n    return closest_num\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = []\n    list1.sort()\n    for i in range(len(list1)):\n        if list1[i] not in longest:\n            longest.append(list1[i])\n    return len(longest)\n    \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # max = 0\n    # for x in list1:\n    #     if len(x) > max:\n    #         max = len(x)\n    #         return max\n    return max([len(x) for x in list1])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split(\" \")\n    return max(len(word) for word in list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    x = max(list1, key = len)\n    return len(x)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    temp =''.join(list1)\n    return len(temp)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1)==0:\n        return 0\n    max_len=0\n    for i in range(len(list1)):\n        if max_len<len(list1[i]):\n            max_len=len(list1[i])\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    word = list1[0]\n    for i in range(1, len(list1)):\n        if len(list1[i]) >= len(word):\n            word = list1[i]\n    return len(word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len_dict = {}\n    max_len = 0\n    word = \"\"\n    for word in list1:\n        if word not in word_len_dict:\n            word_len_dict[word] = len(word)\n        else:\n            word_len_dict[word] = word_len_dict[word] + 1\n            if word_len_dict[word] > max_len:\n                max_len = word_len_dict[word]\n                word = word\n    print(word_len_dict)\n    print(\"The length of the longest word is \" + str(max_len) + \" and the word is \" + word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort(key = len)\n    length = len(list1)\n    return length\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1 = str1.lower()\n    sub_str = sub_str.lower()\n    sub_str_length = len(sub_str)\n    for i in range(0, len(str1)-sub_str_length+1):\n        if str1[i:i+sub_str_length] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # for index in range(0, len(str1)):\n    #     for item in sub_str:\n    #         if str1[index]!= item:\n    #             break\n    #     else:\n    #         return True\n    # return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == sub_str:\n            return True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i:j]==sub_str:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    sub_str_set = set(sub_str)\n    for word in str1:\n        if (word in sub_str_set):\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True\n    else: \n        return not n % 2 == 0 and is_undulating(n-1)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0: \n        return False\n    if (n%2==0 and n%5==0) or (n%3==0 and n%5==0):\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # we will use math.log() to perform log on a number\n    return math.log(n,2) == math.log(n,2)*(2**(1/2))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        count = 1\n        while n!= 1:\n            if n % count == 0:\n                count += 1\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Check if the number is divisible by 5\n    if (n % 5 == 0):\n        return False\n    \n    # Take each digit and multiply by that digit\n    # If the sum becomes divisible by 15 then return true\n    for i in range(len(str(n))):\n        digit = int(str(n)[i])\n        sum = sum + digit * int(str(digit))\n    \n    if sum % 15 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n & (n - 1)) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = n * 3 + 1\n        count += 1\n    if count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n_sqr = n * n\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n == 1 or n == 0) and (n % 2) == 1:\n        return False\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        while n > 1:\n            if (n % 2) == 1:\n                return False\n            n = n / 2\n        return True\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (type(a) == int) and (type(b) == int) and (a >= 0) and (b >= 0):\n        return pow(a,b)\n    else:\n        print('Invalid input')\n        return\n        \nprint(power(10,2))\nprint(power(10,1))\nprint(power(10,0))\nprint(power(10,-1))\nprint(power(10,-2))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return a**b\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_tuple = test_list[0]\n    for i in range(1,len(test_list)):\n        if test_list[i][1] < min_tuple[1]:\n            min_tuple = test_list[i]\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_with_tuples = [(x[0], x[1]) for x in test_list]\n    #print(\"List with tuples: \", list_with_tuples)\n    #print(list_with_tuples)\n    list_with_tuple_dict = {}\n    for item in list_with_tuples:\n        #print(\"Item: \", item)\n        #print(\"Item[0] before: \", item)\n        list_with_tuple_dict[item[0]] = item[1]\n        #print(\"Item[0] after: \", item)\n    #print(\"List with tuple dictionary: \", list_with_tuple_dict)\n    smallest_pair = min(list_with_tuple_dict.items(), key=itemgetter(1))\n    #print(\"Smallest pair in list: \", smallest_pair)\n    #print(\"Smallest pair in dictionary: \", list_with_tuple_dict[smallest_pair[0]])\n    return (smallest_pair[0], list_with_tuple_dict[smallest_pair[0]])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))\nprint(index_minimum([(5, 7), (2, 3), (4, 2), (7, 3), (2, 3), (4, 2)]))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(0,1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n    \ntest_list = [(5,'a'), (1,'b'), (1,'c'), (3,'d'), (2,'e'), (4,'f'), (4,'g'), (7,'h'), (8,'i'), (9,'j')]\nprint(index_minimum(test_list))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_val = []\n    minimum = (test_list[0], test_list[0][1])\n    for i in range(len(test_list)):\n        if test_list[i][1] < minimum[1]:\n            minimum = (test_list[i], test_list[i][1])\n    minimum_val = minimum[0]\n    return minimum_val\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list_1 = []\n    for i in range(len(test_list)):\n        test_list_1.append(itemgetter(1,2)(test_list[i]))\n    min_tuple = min(test_list_1, key=lambda x: x[1])\n    return min_tuple[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key = itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    result = []\n    for i in range(len(lst)):\n        length = len(lst[i])\n        if length not in result:\n            result.append(length)\n    return result\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for row in lst:\n        if len(row) < min_len:\n            min_len = len(row)\n    return min_len\n    \ndef Find_Min_Sum(lst):  \n    '''\n    Write a python function to find the minimum sum of elements in the list of lists.\n    '''\n    min_sum = float('inf')\n    for row in lst:\n        if sum(row) < min_sum:\n            min_sum = sum(row)\n    return min_sum\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    max_len = 0\n    for row in lst:\n        if len(row) > max_len:\n            max_len = len(row)\n    return max_len\n    \ndef Find_Max_Sum(lst):  \n    '''\n    Write a python function to find the maximum sum of elements in the list of lists.\n    '''\n    max_sum = float('-inf')\n    for row in lst:\n        if sum(row) > max_sum:\n            max_sum = sum(row)\n    return max_sum\n    \ndef Find_Max_Row_Sum(lst):  \n    '''\n    Write a python function to find the maximum sum of elements in a list of lists.\n    '''\n    max_sum = float('-inf')\n    for row in lst:\n        for elem in row:\n            if elem > max_sum:\n                max_sum = elem\n    return max_sum\n    \ndef Find_Max_Col_Sum(lst):  \n    '''\n    Write a python function to find the maximum sum of elements in a column in a matrix.\n    '''\n    max_sum = float('-inf')\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] > max_sum:\n                max_sum = lst[i][j]\n    return max_sum\n    \ndef Find_Sum_Of_Diag_1(lst):  \n    '''\n    Write a python function to find the sum of elements in the main diagonal of a matrix.\n    '''\n    sum_of_diag = 0\n    for i in range(len(lst)):\n        sum_of_diag += lst[i][i]\n    return sum_of_diag\n    \ndef Find_Sum_Of_Diag_2(lst):  \n    '''\n    Write a python function to find the sum of elements in the secondary diagonal of a matrix.\n    '''\n    sum_of_diag = 0\n    for i in range(len(lst)):\n        sum_of_diag += lst[i][-i-1]\n    return sum_of_diag\n    \ndef Find_Min_of_1st_diagonal_2nd_diagonal(lst):  \n    '''\n    Write a python function to find the minimum of the sum of elements in the main diagonal \n    and the second diagonal of a matrix.\n    '''\n    min_of_diag = float('inf')\n    for i in range(len(lst)):\n        min_of_diag = min(min_of_diag, lst[i][i] + lst[i][-i-1])\n    return min_of_diag\n    \ndef Find_Max_of_1st_diagonal_2nd_diagonal(lst):  \n    '''\n    Write a python function to find the maximum of the sum of elements in the main diagonal \n    and the second diagonal of a matrix.\n    '''\n    max_of_diag = float('-inf')\n    for i in range(len(lst)):\n        max_of_diag = max(max_of_diag, lst[i][i] + lst[i][-i-1])\n    return max_of_diag\n    \ndef Find_Min_of_Diagonal(lst):  \n    '''\n    Write a python function to find the minimum of the sum of elements in the main diagonal of \n    a matrix.\n    '''\n    min_of_diag = float('inf')\n    for i in range(len(lst)):\n        min_of_diag = min(min_of_diag, lst[i][i])\n    return min_of_diag\n    \ndef Find_Max_of_Diagonal(lst):  \n    '''\n    Write a python function to find the maximum of the sum of elements in the main diagonal of \n    a matrix.\n    '''\n    max_of_diag = float('-inf')\n    for i in range(len(lst)):\n        max_of_diag = max(max_of_diag, lst[i][i])\n    return max_of_diag\n    \ndef Find_Cols_With_Zeros(lst):  \n    '''\n    Write a python function to find the number of columns which contains 0s in a given matrix.\n    '''\n    cols = 0\n    for row in lst:\n        if 0 in row:\n            cols += 1\n    return cols\n    \ndef Find_Rows_With_Zeros(lst):  \n    '''\n    Write a python function to find the number of rows which contains 0s in a given matrix.\n    '''\n    rows = 0\n    for row in lst:\n        if 0 in row:\n            rows += 1\n    return rows\n    \ndef Find_Indeces_of_Zeros(lst):  \n    '''\n    Write a python function to find the indeces of rows and columns which contains 0s in a given matrix.\n    '''\n    indeces_of_rows = []\n    for i in range(len(lst)):\n        if 0 in lst[i]:\n            indeces_of_rows.append(i)\n    indeces_of_cols = []\n    for i in range(len(lst)):\n        if 0 in lst[:,i]:\n            indeces_of_cols.append(i)\n    return indeces_of_rows, indeces_of_cols\n    \ndef Find_Zeros_in_Cols(lst):  \n    '''\n    Write a python function to find the number of columns which contains 0s in a given matrix.\n    '''\n    cols = 0\n    for row in lst:\n        if 0 in row:\n            cols += 1\n    return cols\n    \ndef Find_Zeros_in_Rows(lst):  \n    '''\n    Write a python function to find the number of rows which contains 0s in a given matrix.\n    '''\n    rows = 0\n    for row in lst:\n        if 0 in row:\n            rows += 1\n    return rows\n    \ndef Find_Zeros_in_Main_Diagonal(lst):  \n    '''\n    Write a python function to find the number of main diagonal elements which contains 0s in a given matrix.\n    '''\n    rows = 0\n    for row in lst:\n        for elem in row:\n            if elem == 0:\n                rows += 1\n    return rows\n    \ndef Find_Zeros_in_Secondary_Diagonal(lst):  \n    '''\n    Write a python function to find the number of secondary diagonal elements which contains 0s in a given matrix.\n    '''\n    cols = 0\n    for row in lst:\n        for elem in row:\n            if elem == 0:\n                cols += 1\n    return cols\n    \ndef Find_Zero_Indeces_in_2nd_diagonal(lst):  \n    '''\n    Write a python function to find the indeces of rows and columns which contains 0s in a given matrix.\n    '''\n    indeces_of_rows = []\n    for i in range(len(lst)):\n        if 0 in lst[i]:\n            indeces_of_rows.append(i)\n    indeces_of_cols = []\n    for i in range(len(lst)):\n        if 0 in lst[:,i]:\n            indeces"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    m = len(lst)\n    \n    for i in range(m):\n        if(len(lst[i])<len(lst[m-1])):\n            m = i\n            \n    return len(lst[m])\n            \n            \n            \n            \nif __name__ == \"__main__\":\n    \n    \n    lst = [[1, 4, 5, 10],\n        [2, 6, 7, 8],\n        [3, 9, 10, 11],\n        [4, 12, 13, 14]]\n        \n    print(\"The minimum length is \", Find_Min_Length(lst))"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i])<min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if(lst==[]):\n        return 0\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i)<min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if(len(lst)==0):\n        return 0\n    else:\n        return min([len(lst1) for lst1 in lst])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    n = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < n:\n            n = len(lst[i])\n    return n\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return len(lst[0])\n    else:\n        return 1 + Find_Min_Length(lst[1:])\n    "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    i = 0\n    while i < len(lst):\n        if len(lst[i]) < len(lst[i-1]):\n            break\n        i += 1\n    return len(lst[i-1])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_val = 0\n    for i in range(0,len(lst)):\n        if(len(lst[i])<min_val):\n            min_val = len(lst[i])\n    return min_val\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return 1 + divisor(n-1)\n        \n    \ndef rec_divisor(n,d):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if d == 1:\n        return 1\n    else:\n        return 1 + rec_divisor(n,d-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i < n:\n        if n % i == 0:\n            count = count + 1\n        i = i + 1\n    print(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # number of divisors are 1 and itself\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count=count+1\n        i=i+1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return divisors(int(n))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return n+1\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    if n==1:\n        return 1\n    for i in range(1,n//2+1):\n        if n%i==0:\n            count+=1\n    return count+1\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n//2+1):\n        if n%i==0:\n            count+=1\n    return count+1\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    while n!=1:\n        if n%2==0:\n            n/=2\n            count+=1\n        else:\n            n-=1\n            count+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    while n!=1:\n        if n%2==0:\n            n/=2\n            count+=1\n        else:\n            n-=1\n            count+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    while n!=1:\n        if n%2==0:\n            n/=2\n            count+=1\n        else:\n            n-=1\n            count+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n    while i<=n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return count\n    \n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=1\n    count=0\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count+=1\n    return count\nprint(divisor(12))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if(n%i==0):\n            count = count + 1\n    return(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n + 1):\n        if (n % i == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if not isinstance(list1,list):\n        raise Exception(\"List input required\")\n    \n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] = freq_dict[i] + 1\n    \n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq_dict = {}\n    for i in list1:\n        for k in i:\n            if k in freq_dict:\n                freq_dict[k] += 1\n            else:\n                freq_dict[k] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for val in list1:\n        if val in d:\n            d[val] += 1\n        else:\n            d[val] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = list(map(list, list1))\n    flattened_list = list(chain.from_iterable(list1))\n    freq = {}\n    for item in flattened_list:\n        if item in freq.keys():\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    print(dict(map(lambda x: (x, list1.count(x)), list1)))\n    \ndef check_duplicates(list1):\n    '''\n    Write a function to return the number of duplicates in a list.\n    '''\n    n=0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j]:\n                n += 1\n    return n\n    \ndef check_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n%2 == 0 or n < 2:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n%i == 0:\n            return False\n    return True\n    \ndef max_sum(list1):\n    '''\n    Write a function to find the largest element in a list.\n    '''\n    return max(list1)\n    \ndef min_sum(list1):\n    '''\n    Write a function to find the smallest element in a list.\n    '''\n    return min(list1)\n    \ndef max_min(list1):\n    '''\n    Write a function to find the minimum and maximum element in a list.\n    '''\n    return min(list1), max(list1)\n    \ndef index_pos(list1, value):\n    '''\n    Write a function to find the index of first occurrence of an element in a list.\n    '''\n    return list1.index(value)\n    \ndef insert_element(list1, new_element, position):\n    '''\n    Write a function to insert an element into a list at a particular position.\n    '''\n    return list1[:position] + [new_element] + list1[position:]\n    \ndef insert_elements(list1, new_elements, position):\n    '''\n    Write a function to insert an element into a list at a particular position.\n    '''\n    return list1[:position] + new_elements + list1[position:]\n    \ndef delete_element(list1, value):\n    '''\n    Write a function to delete the first occurrence of a value in a list.\n    '''\n    return list1.pop(list1.index(value))\n    \ndef delete_elements(list1, value):\n    '''\n    Write a function to delete the first occurrence of a value in a list.\n    '''\n    return list1.pop(list1.index(value))\n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef partition_list(list1, value):\n    '''\n    Write a function to partition a list around a value.\n    '''\n    index1 = list1.index(value)\n    return list1[:index1] + list1[index1+1:]\n    \ndef partition_elements(list1, low, high):\n    '''\n    Write a function to partition a list around a value.\n    '''\n    return list1[:low] + list1[high+1:]\n    \ndef count_occurrence(list1, value):\n    '''\n    Write a function to count the number of times an element appears in a list.\n    '''\n    return list1.count(value)\n    \ndef is_element_in_list(list1, value):\n    '''\n    Write a function to check if an element is present in a list.\n    '''\n    return value in list1\n    \ndef is_element_not_in_list(list1, value):\n    '''\n    Write a function to check if an element is present in a list.\n    '''\n    return not value in list1\n    \ndef reverse_sublist(list1, low, high):\n    '''\n    Write a function to reverse a sublist.\n    '''\n    return list1[:low] + list1[high:][::-1]\n    \ndef max_char(string1):\n    '''\n    Write a function to find the maximum length of the characters in a string.\n    '''\n    return max(len(i) for i in string1)\n    \ndef is_palindrome(string1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return string1 == string1[::-1]\n    \ndef get_unique_char(string1):\n    '''\n    Write a function to find the unique characters in a string.\n    '''\n    return list(set(string1))\n    \ndef reverse_iterative(list1):\n    '''\n    Write a function to reverse a list in iterative manner.\n    '''\n    n = len(list1)\n    start, end = 0, n - 1\n    while start < end:\n        list1[start], list1[end] = list1[end], list1[start]\n        start += 1\n        end -= 1\n    return list1\n    \ndef reverse_recursive(list1):\n    '''\n    Write a function to reverse a list in recursion.\n    '''\n    def _reverse(start, end):\n        if start < end:\n            list1[start], list1[end] = list1[end], list1[start]\n            _reverse(start+1, end-1)\n        return list1\n    _reverse(0, len(list1)-1)\n    return list1\n    \ndef reverse_inplace(list1):\n    '''\n    Write a function to reverse a list in place.\n    '''\n    list1.reverse()\n    return list1\n    \ndef is_palindrome_recursive(string1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    return string1 == string1[::-1]\n    \ndef find_all_duplicates(list1):\n    '''\n    Write a function to find all the duplicates in a list.\n    '''\n    return list(set(i for i in list1 if list1.count(i) > 1))\n    \ndef find_all_duplicates_iterative(list1):\n    '''\n    Write a function to find all the duplicates in a list.\n    '''\n    output = set()\n    for i in list1:\n        if list1.count(i) > 1:\n            output.add(i)\n    return output\n    \ndef find_all_duplicates_recursive(list1):\n    '''\n    Write a function to find all the duplicates in a list.\n    '''\n    return set(i for i in list1 if list1.count(i) > 1)\n    \ndef count_occurrence_iterative(list1, value):\n    '''\n    Write a function to count the number of times an element appears in a list.\n    '''\n    return sum(1 for i in list1 if i == value)\n    \ndef count_occurrence_recursive(list1, value):\n    '''\n    Write a function to count the number of times an element appears in a list.\n    '''\n    if not list1:\n        return 0\n    if list1[0] == value:\n        return 1 + count_occurrence_recursive(list1[1:], value)\n    return count_occurrence_recursive(list1[1:], value)\n    \ndef find_element_index_iterative(list1, value):\n    '''\n    Write a function to find the index of first occurrence of an element in a list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == value:\n            return i\n    return -1\n    \ndef find_element_index_recursive(list1, value):\n    '''\n    Write a function to find the index of first occurrence of an element in a list.\n    '''\n    if list1:\n        if list1[0] == value:\n            return 0\n        return find_element_index_recursive(list1[1:], value)\n    return -1\n    \ndef partition_list_iterative(list1, low"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if len(list1) == 1:\n        return {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    lst = list(map(lambda x: len(x), list1))\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if type(list1)!= list:\n        return None\n    result = {}\n    for element in list1:\n        if type(element)!= list:\n            result[element] = list1.count(element)\n        else:\n            result.update(frequency_lists(element))\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = {}\n    for i in range(len(list1)):\n        my_dict[list1[i]] = my_dict.get(list1[i], 0) + 1\n    return my_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result={}\n    for i in list1:\n        for k in i:\n            if k in result:\n                result[k]+=1\n            else:\n                result[k]=1\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    assert isinstance(numbers, list), f\"{numbers} is not a list\"\n    assert len(numbers) > 0, f\"{numbers} list has no number\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers.sort()\n    return sum(numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numbers*2\nprint(multiply_num([3,4,5,6]))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result = result * i\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for num in numbers:\n        sum = sum * num\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    number_sum = 1\n    for number in numbers:\n        number_sum *= number\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = 1\n    for num in numbers:\n        res *= num\n    res = res / len(numbers)\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # return bin(n)[2:]\n    # return str(bin(n))[2:]\n    return bin(n).lstrip('0b')\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    \n    output = ''\n    while n!= 0:\n        output += str(n%2)\n        n = n//2\n    \n    return output[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = \"\"\n    if n==0: \n        return result \n    while n>0: \n        result = str(n%2) + result \n        n = n // 2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    bin_num = \"\"\n    while n > 0:\n        if n % 2 == 0:\n            bin_num += \"0\"\n            n = n // 2\n        else:\n            bin_num += \"1\"\n            n = n // 2\n            \n    return bin_num\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n%2) + binary\n        n = int(n/2)\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # pass\n    \n    result = ''\n    while n > 0:\n        result = result + str(n%2)\n        n = n//2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    n = int(n)\n    temp = \"\"\n    while(n!= 0):\n        temp = str(n%2) + temp\n        n = n//2\n    return temp\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        return decimal_to_binary(n//2) + str(n%2) \n    "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Use the first approach, with an upper and lower bound\n    num = str(num)\n    i, j = 0, len(num) - 1\n    while i < j:\n        if num[i] == num[j]:\n            i += 1\n            j -= 1\n        else:\n            break\n    i += 1\n    j -= 1\n    return int(num[i:j+1])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num.lower()\n    num = num.replace(' ', '')\n    len_num = len(num)\n    if len_num <= 1:\n        return 0\n    for i in range(1, len_num):\n        if num[i] < num[i - 1]:\n            return num[i - 1] + (num[i - 1] * 10) + 1\n    return num[0] + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = \"\"\n    if num < 0:\n        return None\n    else:\n        i = int(num / 2)\n        while num > result:\n            result += str(i)\n            i = int(i / 2)\n        return int(result)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # this is done by checking if the current number is a palindrome, and if not, then a new number\n    # is generated by iterating in reverse\n    while not is_palindrome(num):\n        num += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    a = num\n    while True:\n        if is_palindrome(a):\n            return a\n        a += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def isPalindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    # get the reverse of the num and check to see if it's the same\n    rev = int(str(num)[::-1])\n    if isPalindrome(rev):\n        return rev\n    \n    # else use the smallest int divisible by the factor of 5\n    divisor = 5\n    while divisor < 9:\n        if isPalindrome(num/divisor):\n            return num/divisor\n        divisor += 5\n    \n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #iterate over the entire string\n    #check if current char is a palindrome\n    #if not, get next char\n    #if palindrome, return the current char\n    #trim leading zeros\n    #if there is more than one palindrome\n    #keep getting the next char until we get to a palindrome\n    #then trim leading zeros\n    #return the lowest palindrome\n    current_string = str(num)\n    if current_string[0] == '0':\n        current_string = current_string[1:]\n    if current_string == current_string[::-1]:\n        return int(current_string)\n    for i in range(len(current_string)):\n        if current_string[i] == current_string[-1-i]:\n            continue\n        else:\n            return int(current_string[:i] + current_string[i+1:])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 1\n    while i <= num:\n        if is_palindrome(i):\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    # Using Dynamic Programming, we will optimize the time and space complexity\n    def next_smallest(num):\n        for i in range(len(num)):\n            if num == ''.join(reversed(num[i:] + num[:i])):\n                return int(num[:i] + ''.join(reversed(num[i:])))\n        return int(num) + 1\n    return next_smallest(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        # TODO: Complete this method\n        return False\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    i = 0\n    while (i < k):\n        i += 1\n    return arr[i-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # print(n)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        # print(left, mid, right)\n        if arr[mid] == k - 1:\n            return arr[mid]\n        elif arr[mid] < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[left]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = low + (high - low) // 2\n        if arr[mid] == k:\n            return mid + 1\n        elif arr[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # sort and find kth element\n    \n    arr.sort()\n    return arr[k-1]\n    \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == k - 1:\n            return arr[mid]\n        elif arr[mid] > k - 1:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = 0\n    r = len(arr)-1\n    while l <= r:\n        mid = l + (r-l)//2\n        if k == mid:\n            return arr[mid]\n        elif k > mid:\n            l = mid + 1\n        else:\n            r = mid - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    #print(\"arr :\", arr)\n    \n    for i in range(len(arr)):\n        if(k == arr[i]):\n            #print(i)\n            return i\n    return -1\n    \n    "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr==[]:\n        return -1\n    \n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low + high)//2\n        if k==arr[mid]:\n            return mid+1\n        if k > arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #try:\n    return arr[k-1]\n    #except IndexError:\n        #return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if k > length:\n    #     return None\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    i = 0\n    result = \"\"\n    while i < len(word):\n        if word[i] == '_':\n            result += word[i].upper()\n        else:\n            result += word[i]\n        i += 1\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Solution 1\n    # word = word.replace('_', '')\n    # return word.title()\n    \n    # Solution 2\n    return word.replace('_','').title().replace(' ', '')\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    # Edge cases for empty string and single char strings\n    if not word:\n        return word\n    if len(word) == 1:\n        return word.upper()\n    \n    # Swap the words in the string\n    new_string = \"\"\n    for i in range(len(word)):\n        if word[i] == \"_\":\n            if word[i+1].islower():\n                new_string += word[i+1].upper()\n            else:\n                new_string += word[i+1]\n            continue\n        \n        if word[i] == \".\":\n            if i == 0:\n                if word[i+1].islower():\n                    new_string += word[i+1].upper()\n                else:\n                    new_string += word[i+1]\n            else:\n                new_string += word[i-1] + word[i+1]\n            continue\n        new_string += word[i]\n    \n    return new_string\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for index, letter in enumerate(word):\n        if letter == \"_\":\n            if index == 0:\n                camel_case = camel_case + word[index + 1]\n            else:\n                camel_case = camel_case + word[index - 1] + word[index + 1]\n        else:\n            camel_case = camel_case + letter\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].capitalize() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = ''\n    word = word.split('_')\n    for item in word:\n        camel += item[0].upper() + item[1:]\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + ''.join(map(str.capitalize,word[1:]))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:].replace('_','').title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(map(lambda x: x.title() if x.isupper() else x, word))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #To solve this problem, we want to take the word and loop through it with the index -1. \n    #Then we return the word with the index + 1 and repeat the process until we are \n    #at the end of the word.\n    #This is essentially a conversion to a CamelCase.\n    word = word.split(\"_\")\n    word = word[0] + word[1].lower()\n    return word\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i % 2 == 0 and j % 2 == 1:\n                count += 1\n            elif i % 2 == 1 and j % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 1 or m <= 1:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 0 or m <= 0:\n        print('Invalid Inputs')\n    elif m == 0:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    def dfs(curr, visited, adj_list, visited_dict, visit_order):\n        \n        if curr in visited_dict:\n            visited_dict[curr] += 1\n        else:\n            visited_dict[curr] = 1\n        visited.append(curr)\n        visit_order.append(curr)\n        \n        for node in adj_list[curr]:\n            if node in visited:\n                continue\n            dfs(node, visited, adj_list, visited_dict, visit_order)\n        \n        visited.pop()\n        visited_dict.pop(curr)\n        visit_order.pop()\n        \n    adj_list = {}\n    visited = []\n    visited_dict = {}\n    visit_order = []\n    \n    for i in range(1, m + 1):\n        adj_list[i] = []\n    \n    for i in range(1, n + 1):\n        adj_list[i] = []\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if i!= j:\n                adj_list[i].append(j)\n    \n    for node in range(1, n + 1):\n        dfs(node, visited, adj_list, visited_dict, visit_order)\n        \n    for i in range(1, m + 1):\n        if i in visited_dict:\n            if visited_dict[i] % 2 == 1:\n                return i\n            \n    return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0 or n == 0:\n        return 0\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*(n-1)//2 + m*(m-1)//2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m > 0 and n > 0:\n        if (n%2) == 0:\n            return 0\n        elif m == 1 and n == 2:\n            return 1\n        elif m == 2 and n == 3:\n            return 3\n        elif n == 1:\n            return 2\n        elif m == 1 and n > 2:\n            return 1 + eulerian_num(n - 2, m)\n        elif n == m:\n            return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n        elif n == m + 1:\n            return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1) + 1\n        elif m > 1 and n > m:\n            return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m - 2) + eulerian_num(n - 1, m - m) + eulerian_num(n - m, m)\n        elif m > 1 and n == m:\n            return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m - 2) + eulerian_num(n - 1, m - m) + eulerian_num(n - 1, m - m + 1)\n        elif m > 1 and n < m:\n            return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m - 2) + eulerian_num(n - 1, m - m) + eulerian_num(n - 1, m - m + 1) + eulerian_num(n - 1, m - m + 2)\n        elif m == 1 and n < m:\n            return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m - 2) + eulerian_num(n - 1, m - m) + eulerian_num(n - 1, m - m + 1)\n        elif m == 1 and n > m:\n            return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m - 2) + eulerian_num(n - 1, m - m) + eulerian_num(n - m, m)\n    else:\n        return 0\n    \nprint(eulerian_num(1, 1))\nprint(eulerian_num(2, 1))\nprint(eulerian_num(2, 2))\nprint(eulerian_num(3, 3))\nprint(eulerian_num(4, 1))\nprint(eulerian_num(5, 1))\nprint(eulerian_num(5, 2))\nprint(eulerian_num(5, 3))\nprint(eulerian_num(5, 4))\nprint(eulerian_num(6, 1))\nprint(eulerian_num(6, 2))\nprint(eulerian_num(7, 3))\nprint(eulerian_num(8, 3))\nprint(eulerian_num(9, 1))\nprint(eulerian_num(9, 2))\nprint(eulerian_num(9, 4))\nprint(eulerian_num(10, 1))\nprint(eulerian_num(10, 2))\nprint(eulerian_num(10, 3))\nprint(eulerian_num(10, 4))\nprint(eulerian_num(11, 1))\nprint(eulerian_num(11, 2))\nprint(eulerian_num(11, 3))\nprint(eulerian_num(12, 1))\nprint(eulerian_num(12, 2))\nprint(eulerian_num(12, 3))\nprint(eulerian_num(12, 4))\nprint(eulerian_num(13, 1))\nprint(eulerian_num(13, 2))\nprint(eulerian_num(13, 3))\nprint(eulerian_num(13, 4))\nprint(eulerian_num(13, 5))\nprint(eulerian_num(14, 1))\nprint(eulerian_num(14, 2))\nprint(eulerian_num(14, 3))\nprint(eulerian_num(14, 4))\nprint(eulerian_num(14, 5))\nprint(eulerian_num(14, 6))\nprint(eulerian_num(14, 7))\nprint(eulerian_num(15, 1))\nprint(eulerian_num(15, 2))\nprint(eulerian_num(15, 3))\nprint(eulerian_num(15, 4))\nprint(eulerian_num(15, 5))\nprint(eulerian_num(15, 6))\nprint(eulerian_num(15, 7))\nprint(eulerian_num(15, 8))\nprint(eulerian_num(16, 1))\nprint(eulerian_num(16, 2))\nprint(eulerian_num(16, 3))\nprint(eulerian_num(16, 4))\nprint(eulerian_num(16, 5))\nprint(eulerian_num(16, 6))\nprint(eulerian_num(16, 7))\nprint(eulerian_num(16, 8))\nprint(eulerian_num(16, 9))\nprint(eulerian_num(17, 1))\nprint(eulerian_num(17, 2))\nprint(eulerian_num(17, 3))\nprint(eulerian_num(17, 4))\nprint(eulerian_num(17, 5))\nprint(eulerian_num(17, 6))\nprint(eulerian_num(17, 7))\nprint(eulerian_num(17, 8))\nprint(eulerian_num(17, 9))\nprint(eulerian_num(18, 1))\nprint(eulerian_num(18, 2))\nprint(eulerian_num(18, 3))\nprint(eulerian_num(18, 4))\nprint(eulerian_num(18, 5))\nprint(eulerian_num(18, 6))\nprint(eulerian_num(18, 7))\nprint(eulerian_num(18, 8))\nprint(eulerian_num(18, 9))\nprint(eulerian_num(19, 1))\nprint(eulerian_num(19, 2))\nprint(eulerian_num(19, 3))\nprint(eulerian_num(19, 4))\nprint(eulerian_num(19, 5))\nprint(eulerian_num(19, 6))\nprint(eulerian_num(19, 7))\nprint(eulerian_num(19, 8))\nprint(eulerian_num(19, 9))\nprint(eulerian_num(20, 1))\nprint(eulerian_num(20, 2))\nprint(eulerian_num(20, 3))\nprint(eulerian_num(20, 4))\nprint(eulerian_num(20, 5))\nprint(eulerian_num(20, 6))\nprint(eulerian_num(20, 7))\nprint(eulerian_num(20, 8))\nprint(eulerian_num(20, 9))\nprint(eulerian_num(21, 1))\nprint(eulerian_num(21, 2))\nprint(eulerian_num(21, 3))\nprint(eulerian_num(21, 4))\nprint(eulerian_num(21, 5))\nprint(eulerian_num(21, 6))\nprint(eulerian_num(21, 7))\nprint(eulerian_num(21, 8))\nprint(eulerian_num(21, 9))\nprint(eulerian_num(22, 1))\nprint(eulerian_num(22, 2))\nprint(eulerian_num(22, 3))\nprint(eulerian_num(22, 4))\nprint(eulerian_num(22, 5))\nprint(eulerian_num(22, 6))\nprint(eulerian_num(22, 7))\nprint(eulerian_num(22, 8))\nprin"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return int(math.factorial(n)/math.factorial(n-m))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 0\n    if n <= 1:\n        return 0\n    if m == 1:\n        return n\n    a = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        a[i][i] = 1\n    for i in range(1, n + 1):\n        a[i][i + 1] = 2\n        a[i + 1][i] = 2\n        for j in range(2, n):\n            a[i][j] = a[i][j - 1] + a[i][j]\n            a[i + 1][j] = a[i + 1][j - 1] + a[i + 1][j]\n            a[j][i] = a[j][i - 1] + a[j][i]\n            a[j + 1][i] = a[j + 1][i - 1] + a[j + 1][i]\n    for i in range(1, n):\n        res += a[i][m]\n    return res\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Make a copy of the list so that we don't mess up the original list.\n    result = copy.deepcopy(input_list)\n    # Sort each sublist using a helper function.\n    for sublist in result:\n        merge_sort(sublist)\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in range(len(input_list)):\n        sorted_list = sorted(input_list[i])\n        output_list.append(sorted_list)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in input_list:\n        new_list.append(sorted(i))\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = input_list[i][j].lower()\n    \n    for i in range(len(input_list)-1):\n        for j in range(len(input_list[i])):\n            if input_list[i][j]>input_list[i+1][j]:\n                input_list[i], input_list[i+1] = input_list[i+1], input_list[i]\n    \n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for i in input_list:\n        for j in i:\n            result.append(j)\n    result = sorted(result)\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    print(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda x: x[1])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # first create a new list called output_list to hold the sorted sublists\n    output_list = []\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for x in lst if x)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code here\n    return len([x for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in lst:\n        if i:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code here\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n    \n    \ndef product(lst1, lst2):   \n    '''\n    Write a python function to multiply two list elements and return the product.\n    '''\n    # your code here\n    lst3 = []\n    for i in lst1:\n        for j in lst2:\n            lst3.append(i*j)\n    return lst3\n    \n    \ndef multiply_strings(string1, string2):   \n    '''\n    Write a python function to multiply two strings and return the product.\n    '''\n    # your code here\n    lst = []\n    for i in string1:\n        for j in string2:\n            lst.append(i+j)\n    return lst\n    \n    \ndef divide(lst1, lst2):   \n    '''\n    Write a python function to divide a list into equal parts and return the \n    resultant list.\n    '''\n    # your code here\n    lst = []\n    while len(lst1)!= 0:\n        if len(lst2)!= 0:\n            lst.append(lst1.pop()//lst2.pop())\n        else:\n            break\n    return lst\n    \n    \ndef count_odd_even(lst):   \n    '''\n    Write a python function to count the odd and even elements in the given list.\n    '''\n    # your code here\n    odd_count = 0\n    even_count = 0\n    for i in lst:\n        if i%2!= 0:\n            odd_count += 1\n        elif i%2 == 0:\n            even_count += 1\n    return odd_count, even_count\n    \n    \ndef zero_matrix(lst):   \n    '''\n    Write a python function to count the zero elements in the given list.\n    '''\n    # your code here\n    zero_count = 0\n    for i in lst:\n        if i == 0:\n            zero_count += 1\n    return zero_count\n    \n    \ndef sum_list(lst):   \n    '''\n    Write a python function to sum the elements of the given list.\n    '''\n    # your code here\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\n    \n    \ndef sum_even_odd(lst):   \n    '''\n    Write a python function to sum the even elements of the given list and\n    odd elements of the given list.\n    '''\n    # your code here\n    sum = 0\n    for i in lst:\n        if i%2 == 0:\n            sum += i\n    return sum\n    \n    \ndef count_all_odd_even(lst):   \n    '''\n    Write a python function to count the even and odd elements of the given list.\n    '''\n    # your code here\n    odd_count = 0\n    even_count = 0\n    for i in lst:\n        if i%2!= 0:\n            odd_count += 1\n        elif i%2 == 0:\n            even_count += 1\n    return odd_count, even_count\n    \n    \ndef count_in_list(lst, item):   \n    '''\n    Write a python function to count the number of occurrences of the given item in the given list.\n    '''\n    # your code here\n    count = 0\n    for i in lst:\n        if i == item:\n            count += 1\n    return count\n    \n    \ndef find_prime_numbers(n):   \n    '''\n    Write a python function to print all prime numbers between 1 and n.\n    '''\n    # your code here\n    lst = []\n    for i in range(n+1):\n        if i>1:\n            for j in range(2,i):\n                if i%j == 0:\n                    break\n            else:\n                lst.append(i)\n    return lst\n    \n    \ndef insertion_sort(lst):   \n    '''\n    Write a python function to sort the given list using insertion sort algorithm.\n    '''\n    # your code here\n    for i in range(1,len(lst)):\n        key = lst[i]\n        j = i-1\n        while j >= 0 and key < lst[j]:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = key\n    return lst\n    \n    \ndef next_prime(n):   \n    '''\n    Write a python function to find the next prime number after the given one.\n    '''\n    # your code here\n    while True:\n        if is_prime(n):\n            return n\n        else:\n            n += 1\n            \n        \ndef is_prime(n):   \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    # your code here\n    if n == 1:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n        return True\n    \n    \ndef next_prime_v2(n):   \n    '''\n    Write a python function to find the next prime number after the given one.\n    '''\n    # your code here\n    primes = [2,3,5,7,11,13,17,19,23,29]\n    while True:\n        if n in primes:\n            primes.append(n+1)\n            return n\n        else:\n            n += 1\n            \n    \ndef is_prime_v2(n):   \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    # your code here\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef insertion_sort_v2(lst):   \n    '''\n    Write a python function to sort the given list using insertion sort algorithm.\n    '''\n    # your code here\n    for i in range(1,len(lst)):\n        key = lst[i]\n        j = i-1\n        while j >= 0 and key < lst[j]:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = key\n    return lst\n    \n    \ndef is_palindrome(str1):   \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    # your code here\n    str1 = str1.replace(' ', '')\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef swap_case(str1):   \n    '''\n    Write a python function to swap the case of the given string.\n    '''\n    # your code here\n    str1 = str1.swapcase()\n    return str1\n    \n    \ndef factorial(n):   \n    '''\n    Write a python function to find the factorial of the given number.\n    '''\n    # your code here\n    fac = 1\n    for i in range(1,n+1):\n        fac = fac*i\n    return fac\n    \n    \ndef convert_base(num, base):   \n    '''\n    Write a python function to convert the given number to any base between 2 and 36.\n    '''\n    # your code here\n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    if base <= 0 or base > 36:\n        return -1\n    elif num == 0:\n        return digits[0]\n    else:\n        return digits[num]\n    \n    \ndef count_occurences(lst, item):   \n    '''\n    Write a python function to count the occurrences of the given item in the given list.\n    '''\n    # your code here\n    count = 0\n    for i in lst:\n        if i == item:\n            count += "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst = lst\n    print(lst.count(True))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + test_tup\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #for i in range(len(test_list)):\n    #    test_list[i].append(test_tup[i])\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # \n    # for each_item in test_list:\n    #     for each_tup in test_tup:\n    #         test_tup.append(each_item)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_to_add = test_list + test_tup\n    return list_to_add\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            sorted_list.append(num1[0])\n            num1.pop(0)\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            sorted_list.append(num2[0])\n            num2.pop(0)\n        elif num3[0] <= num1[0] and num3[0] <= num2[0]:\n            sorted_list.append(num3[0])\n            num3.pop(0)\n    while len(num1) > 0:\n        sorted_list.append(num1.pop(0))\n    while len(num2) > 0:\n        sorted_list.append(num2.pop(0))\n    while len(num3) > 0:\n        sorted_list.append(num3.pop(0))\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_heap = num1\n    num2_heap = num2\n    num3_heap = num3\n    list_heap = []\n    while(len(num1_heap)!= 0) and (len(num2_heap)!= 0) and (len(num3_heap)!= 0):\n        num_1 = heapq.heappop(num1_heap)\n        num_2 = heapq.heappop(num2_heap)\n        num_3 = heapq.heappop(num3_heap)\n        if num_1 < num_2:\n            heapq.heappush(list_heap, num_1)\n            heapq.heappush(list_heap, num_2)\n            heapq.heappush(list_heap, num_3)\n        else:\n            heapq.heappush(list_heap, num_2)\n            heapq.heappush(list_heap, num_3)\n            heapq.heappush(list_heap, num_1)\n    while(len(num2_heap)!= 0):\n        num_2 = heapq.heappop(num2_heap)\n        heapq.heappush(list_heap, num_2)\n    while(len(num1_heap)!= 0):\n        num_1 = heapq.heappop(num1_heap)\n        heapq.heappush(list_heap, num_1)\n    while(len(num3_heap)!= 0):\n        num_3 = heapq.heappop(num3_heap)\n        heapq.heappush(list_heap, num_3)\n    return list_heap\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #create 3 lists\n    list1=[]\n    list2=[]\n    list3=[]\n    #merge the three lists and make the list1 sorted\n    for i in range(len(num1)):\n        list1.append(num1[i])\n    for j in range(len(num2)):\n        list2.append(num2[j])\n    for k in range(len(num3)):\n        list3.append(num3[k])\n    list1.extend(list2)\n    list1.extend(list3)\n    list1.sort()\n    return list1\ndef heap_sort(num):\n    '''\n    Write a function to sort a list of numbers using the heap sort algorithm.\n    '''\n    #create a heap and a heap of length len(num)\n    heap=[]\n    for i in range(len(num)):\n        heapq.heappush(heap,num[i])\n    #pop the elements from the heap and put them in a new list\n    new_list=[]\n    while(len(heap)!=0):\n        new_list.append(heapq.heappop(heap))\n    #return the new list\n    return new_list\ndef heap_sort_simple(num):\n    '''\n    Write a function to sort a list of numbers using the heap sort algorithm.\n    Use a list of length num-1.\n    '''\n    #create a heap and a heap of length len(num)\n    heap=[]\n    for i in range(len(num)):\n        heapq.heappush(heap,num[i])\n    #pop the elements from the heap and put them in a new list\n    new_list=[]\n    while(len(heap)!=0):\n        new_list.append(heapq.heappop(heap))\n    #return the new list\n    return new_list\ndef selection_sort(num):\n    '''\n    Write a function to sort a list of numbers using the selection sort algorithm.\n    '''\n    #create a new list\n    new_list=[]\n    #iterate through num and add the first number to new_list\n    for i in range(len(num)):\n        #create a variable to hold the current element in the num list\n        current_element=num[i]\n        #create a variable to hold the position of the current element\n        position=i\n        #iterate through the num list and find the next number to be compared to\n        while position>0 and num[position-1]>current_element:\n            #move the position of the current element to the end\n            num[position]=num[position-1]\n            #move the position back to the correct spot\n            position-=1\n        #add the current element to the new list\n        new_list.append(current_element)\n    #return the new list\n    return new_list\ndef selection_sort_simple(num):\n    '''\n    Write a function to sort a list of numbers using the selection sort algorithm.\n    Use a list of length num-1.\n    '''\n    #create a new list\n    new_list=[]\n    #iterate through num and add the first number to new_list\n    for i in range(len(num)):\n        #create a variable to hold the current element in the num list\n        current_element=num[i]\n        #create a variable to hold the position of the current element\n        position=i\n        #iterate through the num list and find the next number to be compared to\n        while position>0 and num[position-1]>current_element:\n            #move the position of the current element to the end\n            num[position]=num[position-1]\n            #move the position back to the correct spot\n            position-=1\n        #add the current element to the new list\n        new_list.append(current_element)\n    #return the new list\n    return new_list\ndef bubble_sort(num):\n    '''\n    Write a function to sort a list of numbers using the bubble sort algorithm.\n    '''\n    #create a new list\n    new_list=[]\n    #iterate through num and add the first number to new_list\n    for i in range(len(num)):\n        #create a variable to hold the current element in the num list\n        current_element=num[i]\n        #create a variable to hold the position of the current element\n        position=i\n        #iterate through the num list and find the next number to be compared to\n        while position>0 and num[position-1]>current_element:\n            #move the position of the current element to the end\n            num[position]=num[position-1]\n            #move the position back to the correct spot\n            position-=1\n        #add the current element to the new list\n        new_list.append(current_element)\n    #return the new list\n    return new_list\ndef bubble_sort_simple(num):\n    '''\n    Write a function to sort a list of numbers using the bubble sort algorithm.\n    Use a list of length num-1.\n    '''\n    #create a new list\n    new_list=[]\n    #iterate through num and add the first number to new_list\n    for i in range(len(num)):\n        #create a variable to hold the current element in the num list\n        current_element=num[i]\n        #create a variable to hold the position of the current element\n        position=i\n        #iterate through the num list and find the next number to be compared to\n        while position>0 and num[position-1]>current_element:\n            #move the position of the current element to the end\n            num[position]=num[position-1]\n            #move the position back to the correct spot\n            position-=1\n        #add the current element to the new list\n        new_list.append(current_element)\n    #return the new list\n    return new_list\ndef insertion_sort(num):\n    '''\n    Write a function to sort a list of numbers using the insertion sort algorithm.\n    '''\n    #create a new list\n    new_list=[]\n    #iterate through num and add the first number to new_list\n    for i in range(len(num)):\n        #create a variable to hold the current element in the num list\n        current_element=num[i]\n        #create a variable to hold the position of the current element\n        position=i\n        #iterate through the num list and find the next number to be compared to\n        while position>0 and num[position-1]>current_element:\n            #move the position of the current element to the end\n            num[position]=num[position-1]\n            #move the position back to the correct spot\n            position-=1\n        #add the current element to the new list\n        new_list.append(current_element)\n    #return the new list\n    return new_list\ndef insertion_sort_simple(num):\n    '''\n    Write a function to sort a list of numbers using the insertion sort algorithm.\n    Use a list of length num-1.\n    '''\n    #create a new list\n    new_list=[]\n    #iterate through num and add the first number to new_list\n    for i in range(len(num)):\n        #create a variable to hold the current element in the num list\n        current_element=num[i]\n        #create a variable to hold the position of the current element\n        position=i\n        #iterate through the num list and find the next number to be compared to\n        while position>0 and num[position-1]>current_element:\n            #move the position of the current element to the end\n            num[position]=num[position-1]\n            #move the position back to the correct spot\n            position-=1\n        #add the current element to the new list\n        new_list.append(current_element)\n    #return the new list\n    return new_list\ndef merge_sort(num):\n    '''\n    Write a function to sort a list of numbers using the merge sort algorithm.\n    '''\n    #create a new list\n    new_list=[]\n    #iterate through num and add the first number to new_list\n    for i in range(len(num)):\n        #create a variable to hold the current element in the num list\n        current_element=num[i]\n        #create a variabl"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i=0\n    j=0\n    k=0\n    merge_list=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            merge_list.append(num1[i])\n            i+=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            merge_list.append(num2[j])\n            j+=1\n        else:\n            merge_list.append(num3[k])\n            k+=1\n    while i<len(num1):\n        merge_list.append(num1[i])\n        i+=1\n    while j<len(num2):\n        merge_list.append(num2[j])\n        j+=1\n    while k<len(num3):\n        merge_list.append(num3[k])\n        k+=1\n    return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp_list = []\n    p1 = num1\n    p2 = num2\n    p3 = num3\n    while p1 and p2:\n        if p1 > p2:\n            temp_list.append(p1)\n            p1 = num1\n        else:\n            temp_list.append(p2)\n            p2 = num2\n    if p1:\n        temp_list.append(p1)\n    if p2:\n        temp_list.append(p2)\n    return temp_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #code here\n    i = j = k = 0\n    newlist = []\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i] < num2[j]:\n            newlist.append(num1[i])\n            i += 1\n        else:\n            newlist.append(num2[j])\n            j += 1\n        k += 1\n    newlist += num1[i:]\n    newlist += num2[j:]\n    newlist += num3[k:]\n    return newlist\n    \ndef merge_sort_list(arr):\n    '''\n    Write a function that takes an array and sorts it using the merge sort algorithm.\n    '''\n    #code here\n    if len(arr) == 1:\n        return arr\n    else:\n        mid = len(arr)//2\n        left_arr = merge_sort_list(arr[:mid])\n        right_arr = merge_sort_list(arr[mid:])\n        return merge_sorted_list(left_arr,right_arr,arr)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n        k+=1\n    result += num1[i:]\n    result += num2[j:]\n    result += num3[k:]\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list=[]\n    while len(num1)>0 and len(num2)>0 and len(num3)>0:\n        if num1[0]<=num2[0]:\n            merged_list.append(num1[0])\n            num1.pop(0)\n        else:\n            merged_list.append(num2[0])\n            num2.pop(0)\n    while len(num1)>0:\n        merged_list.append(num1[0])\n        num1.pop(0)\n    while len(num2)>0:\n        merged_list.append(num2[0])\n        num2.pop(0)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_heap = num1\n    num2_heap = num2\n    num3_heap = num3\n    heap_list = []\n    while len(num1_heap) > 0 or len(num2_heap) > 0 or len(num3_heap) > 0:\n        if len(num1_heap) > 0 and len(num2_heap) > 0:\n            if num1_heap[0] < num2_heap[0]:\n                heapq.heappush(heap_list,num1_heap.pop(0))\n            else:\n                heapq.heappush(heap_list,num2_heap.pop(0))\n        elif len(num1_heap) > 0:\n            heapq.heappush(heap_list,num1_heap.pop(0))\n        elif len(num2_heap) > 0:\n            heapq.heappush(heap_list,num2_heap.pop(0))\n    return heap_list\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i=0\n    s=list(s)\n    while (i<n):\n        temp=s[0]\n        s[0]=s[-1]\n        s[-1]=temp\n        i+=1\n    return ''.join(s)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if type(s)!= str or type(n)!= int:\n        print(\"Error: Only Strings are accepted\")\n    else:\n        if s == \"\":\n            return 0\n        return odd_Equivalent(s[1:],n) + odd_Equivalent(s[0],n)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans=0\n    for i in range(0,n):\n        s=rotate(s)\n        ans=ans+1 if odd_num(s) else ans\n    return ans\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    ans=0\n    for i in range(0,n):\n        s=rotate(s)\n        ans=ans+1 if even_num(s) else ans\n    return ans\n    \ndef is_permutation(str1,str2):\n    '''\n    Write a python function to check if two string are permutation of each other.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    #instead of using list of frequency, we use dictionary\n    dic1={}\n    dic2={}\n    for i in str1:\n        if i not in dic1:\n            dic1[i]=1\n        else:\n            dic1[i]+=1\n    for i in str2:\n        if i not in dic2:\n            dic2[i]=1\n        else:\n            dic2[i]+=1\n    if dic1==dic2:\n        return True\n    return False\n        \ndef rotate(s):\n    '''\n    Write a python function to rotate a binary string the given number of times.\n    '''\n    length=len(s)\n    if length<1:\n        return False\n    res=\"\"\n    for i in range(0,length-1):\n        res=res+s[length-1-i]\n    res=res+s[0]\n    return res\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n=n%2\n    s1=s[::-1]\n    if n==0:\n        return s1\n    if n==1:\n        return s1+'1'\nif __name__ == \"__main__\":\n    s = \"010110\"\n    n = 4\n    print(odd_Equivalent(s, n))"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l = len(s)\n    for i in range(n):\n        c = 0\n        for j in range(l):\n            if s[j]=='1':\n                c+=1\n        s = \"\".join(s[-c:])\n        s = s+'0'*c\n    return int(s,2)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    x=s[0]\n    y=s[1]\n    s1=x+y\n    s2=s[2]\n    s3=s[3]\n    s4=s[4]\n    s5=s[5]\n    s6=s[6]\n    s7=s[7]\n    s8=s[8]\n    s9=s[9]\n    s10=s[10]\n    s11=s[11]\n    s12=s[12]\n    s13=s[13]\n    s14=s[14]\n    s15=s[15]\n    s16=s[16]\n    s17=s[17]\n    s18=s[18]\n    s19=s[19]\n    s20=s[20]\n    s21=s[21]\n    s22=s[22]\n    s23=s[23]\n    s24=s[24]\n    s25=s[25]\n    s26=s[26]\n    s27=s[27]\n    s28=s[28]\n    s29=s[29]\n    s30=s[30]\n    s31=s[31]\n    s32=s[32]\n    s33=s[33]\n    s34=s[34]\n    s35=s[35]\n    s36=s[36]\n    s37=s[37]\n    s38=s[38]\n    s39=s[39]\n    s40=s[40]\n    s41=s[41]\n    s42=s[42]\n    s43=s[43]\n    s44=s[44]\n    s45=s[45]\n    s46=s[46]\n    s47=s[47]\n    s48=s[48]\n    s49=s[49]\n    s50=s[50]\n    s51=s[51]\n    s52=s[52]\n    s53=s[53]\n    s54=s[54]\n    s55=s[55]\n    s56=s[56]\n    s57=s[57]\n    s58=s[58]\n    s59=s[59]\n    s60=s[60]\n    s61=s[61]\n    s62=s[62]\n    s63=s[63]\n    s64=s[64]\n    s65=s[65]\n    s66=s[66]\n    s67=s[67]\n    s68=s[68]\n    s69=s[69]\n    s70=s[70]\n    s71=s[71]\n    s72=s[72]\n    s73=s[73]\n    s74=s[74]\n    s75=s[75]\n    s76=s[76]\n    s77=s[77]\n    s78=s[78]\n    s79=s[79]\n    s80=s[80]\n    s81=s[81]\n    s82=s[82]\n    s83=s[83]\n    s84=s[84]\n    s85=s[85]\n    s86=s[86]\n    s87=s[87]\n    s88=s[88]\n    s89=s[89]\n    s90=s[90]\n    s91=s[91]\n    s92=s[92]\n    s93=s[93]\n    s94=s[94]\n    s95=s[95]\n    s96=s[96]\n    s97=s[97]\n    s98=s[98]\n    s99=s[99]\n    s100=s[100]\n    s101=s[101]\n    s102=s[102]\n    s103=s[103]\n    s104=s[104]\n    s105=s[105]\n    s106=s[106]\n    s107=s[107]\n    s108=s[108]\n    s109=s[109]\n    s110=s[110]\n    s111=s[111]\n    s112=s[112]\n    s113=s[113]\n    s114=s[114]\n    s115=s[115]\n    s116=s[116]\n    s117=s[117]\n    s118=s[118]\n    s119=s[119]\n    s120=s[120]\n    s121=s[121]\n    s122=s[122]\n    s123=s[123]\n    s124=s[124]\n    s125=s[125]\n    s126=s[126]\n    s127=s[127]\n    s128=s[128]\n    s129=s[129]\n    s130=s[130]\n    s131=s[131]\n    s132=s[132]\n    s133=s[133]\n    s134=s[134]\n    s135=s[135]\n    s136=s[136]\n    s137=s[137]\n    s138=s[138]\n    s139=s[139]\n    s140=s[140]\n    s141=s[141]\n    s142=s[142]\n    s143=s[143]\n    s144=s[144]\n    s145=s[145]\n    s146=s[146]\n    s147=s[147]\n    s148=s[148]\n    s149=s[149]\n    s150=s[150]\n    s151=s[151]\n    s152=s[152]\n    s153=s[153]\n    s154=s[154]\n    s155=s[155]\n    s156=s[156]\n    s157=s[157]\n    s158=s[158]\n    s159=s[159]\n    s160=s[160]\n    s161=s[161]\n    s162=s[162]\n    s163=s[163]\n    s164=s[164]\n    s165=s[165]\n    s166=s[166]\n    s167=s[167]\n    s168=s[168]\n    s169=s[169]\n    s170=s[170]\n    s171=s[171]\n    s172=s[172]\n    s173=s[173]\n    s174=s[174]\n    s175=s[175]\n    s176=s[176]\n    s177=s[177]\n    s178=s[178]\n    s179=s[179]\n    s180=s[180]\n    s181=s[181]\n    s182=s[182]\n    s183=s[183]\n    s184=s[184]\n    s185=s[185]\n    s186=s[186]\n    s187=s[187]\n    s188=s[188]\n    s189=s[189]\n    s190=s[190]\n    s191=s[191]\n    s192=s[192]\n    s193=s[193]\n    s194=s[194]\n    s195=s[195]\n    s196=s[196]\n    s197=s[197]\n    s198=s[198]\n    s199=s[199]\n    s200=s[200]\n    s201=s[201]\n    s202=s[202]\n    s203=s[203]\n    s204=s[204]\n    s205=s[205]\n    s206=s[206]\n    s207=s[207]\n    s208=s[208]\n    s209=s[209]\n    s210=s[210]\n    s211=s[211]\n    s212=s[212]\n    s213=s[213]\n    s214=s[214]\n    s215=s[215]\n    s216=s[216]\n    s217=s[217]\n    s218=s[218]\n    s219=s[219]\n    s220=s[220]\n    s221=s"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    return int(s[n//2:].replace(s[n//2], '0'), 2) + int(s[:n//2].replace(s[:n//2], '0'), 2)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i=0\n    k=0\n    while i<n:\n        s=s[1:]+s[:1]\n        k=k+1\n        i=i+1\n    return k\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s)==0:\n        return 0\n    elif len(s)==1:\n        return 1\n    else:\n        odd=0\n        for i in range(len(s)):\n            if int(s[i])%2!=n:\n                odd+=1\n        return odd\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == '0':\n        return 1\n    if n == 0:\n        return 1\n    if n == 1:\n        return (len(s)-1)*2\n    if n > 1:\n        count = 0\n        i = n-1\n        while i >= 0:\n            if s[i] == '0':\n                count += odd_Equivalent(s[i+1:],n-1)\n            elif s[i] == '1':\n                count += odd_Equivalent(s[i+1:],n-1)\n                count += odd_Equivalent(s[:i],n-1)\n            i-=1\n        return count\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    try:\n        nested_dict = {}\n        for nested_list in nestedlist:\n            nested_dict[nested_list[0]] = nested_list[1:]\n        \n        result = set(nested_dict['common'])\n        for i in nested_dict['other']:\n            result = result.intersection(set(i))\n        return result\n    except TypeError:\n        return None\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for a in nestedlist:\n        if len(set(a)) == 1:\n            common.append(a[0])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedList = nestedlist\n    nestedList1 = nestedList[0]\n    nestedList2 = nestedList[1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return_list = []\n    for num in nestedlist:\n        if isinstance(num, list):\n            return_list.extend(common_in_nested_lists(num))\n        else:\n            return_list.append(num)\n    return list(set(return_list))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        if isinstance(i, list):\n            common_in_nested_lists(i)\n        else:\n            for j in i:\n                if j in nestedlist:\n                    nestedlist.remove(j)\n    return nestedlist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    com = []\n    for i in range(len(nestedlist)):\n        if isinstance(nestedlist[i],list) == True:\n            com += common_in_nested_lists(nestedlist[i])\n        else:\n            com.append(nestedlist[i])\n    return(set(com))\n    \ndef common_in_list(list1, list2):\n    '''\n    Write a function to find the common elements in two lists.\n    '''\n    com = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            com.append(list1[i])\n    return(com)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # Returns a set that contains all elements that are present in all lists.\n    # It returns the list which contains all common elements from all the lists.\n    def flat_nested_list(nestedlist):\n        \n        # Here we have done a list comprehension to flatten the nested list.\n        # So we are now getting a list of all the elements that are present in \n        # all the lists.\n        \n        return [item for sublist in nestedlist for item in sublist]\n    \n    # Here, we are taking a nested list and using a function to get a list.\n    # This means that if we have nested list [[1,2,3,4],['a','b','c','d']]\n    # then the output will be [[1,2,3,4],'a','b','c','d']\n    \n    # Returns the list which contains all common elements from all the lists.\n    def common_elements(nestedlist):\n        \n        # We are now flattening the nested list.\n        # So we are getting a list of all the elements that are present in \n        # all the lists.\n        \n        flat_list = flat_nested_list(nestedlist)\n        \n        # Now we are returning a list which contains all elements from all lists that are present in the list.\n        # So, as all the elements from all lists are common,\n        # then that is the common elements in the given list.\n        return list(set(flat_list))\n    \n    # We are returning the common elements from the nested list which is given.\n    return common_elements(nestedlist)\n    "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        print(len(i))\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    print(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for i in nestedlist:\n        for j in i:\n            common.add(j)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not isinstance(nestedlist, list):\n        return None\n    if len(nestedlist) == 0:\n        return []\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        value = int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all([len(i)==0 for i in list1])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list1 = [{}, {}, {}, {}]\n    for item in list1:\n        if len(item)>0:\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1==[]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not bool(d) for d in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        return False\nprint(empty_dit([]))"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if len(x)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    #solution in O(N) time and O(1) space.\n    #create a list of zeros in size of the number in nums.\n    #For each element in the given tuple, add 1 to the list.\n    #add up the list. \n    #return the sum of the list.\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i] * (10 ** i)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(str(sum(nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    \ndef normalize(x):\n    '''\n    Write a function which normalizes a given number into a float, as follows:\n    Given a float x, it returns x / max(x, 0.0001).\n    '''\n    maxx = max(x, 0.0001)\n    return x / maxx\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    total = 0\n    \n    for num in nums:\n        total = total * 10 + num\n    \n    return total\n    \n    \n    \n    \nprint(tuple_to_int((1,2,3))) # 30\nprint(tuple_to_int((3,4,5))) # 55\nprint(tuple_to_int((10,20,30))) # 210\nprint(tuple_to_int((20,50,10))) # 210\nprint(tuple_to_int((20,50,10,3))) # 210\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    return (nums[0] + 1) * 10 ** (len(nums) - 1) + tuple_to_int(nums[1:])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #brute force approach\n    total = 0\n    for num in nums:\n        total += num\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # n = 0\n    # for n in nums:\n    #     n = n*10 + n\n    return sum(n*10**i for i, n in enumerate(nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0]*10 + nums[1]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    s = 0\n    for i in nums:\n        s = s * 10 + i\n    return s\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if not test_list:\n        return []\n    else:\n        return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except:\n            pass\n    \n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for i in range(len(test_list)):\n            for j in range(len(test_list[i])):\n                test_list[i][j] = float(test_list[i][j])\n    except ValueError:\n        print('wrong input')\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    test_list_result = []\n    for el in test_list:\n        try:\n            float(el)\n            test_list_result.append(float(el))\n        except ValueError:\n            test_list_result.append(None)\n    return test_list_result\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j]!= 'null' and type(test_list[i][j]) == str:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = test_list[i][j]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in row] for row in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return list(map(lambda x: float(x) if type(x) is str else x, test_list))\n    \ndef avg_to_string(a_list):\n    '''\n    Write a function that converts the average of a list of integers to a string. \n    '''\n    return (str(int(round(a_list[0] / a_list[1]))) + '%')\n    \ndef quicksort(array):\n    '''\n    Write a function that takes as input a list of non-negative integers and returns the \n    same list sorted in increasing order. Use the quicksort algorithm.\n    '''\n    if len(array) <= 1:\n        return array\n    else:\n        pivot = array[0]\n        less = [n for n in array[1:] if n <= pivot]\n        greater = [n for n in array[1:] if n > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n    \ndef calc_fibonacci_nth_term(n):\n    '''\n    Write a function that takes as input a positive integer n and returns the nth term in the Fibonacci\n    sequence. \n    '''\n    return (0 if n <= 2 else 1) + (calc_fibonacci_nth_term(n - 1) if n <= 2 else calc_fibonacci_nth_term(n - 2) + calc_fibonacci_nth_term(n - 3))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for test_list_item in test_list:\n        if type(test_list_item) is list:\n            list_to_float(test_list_item)\n        else:\n            test_list_item = float(test_list_item)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                test_list[i][j] = 'NAN'\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split() \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    return string.split()\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ')\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    s = string.split()\n    return s\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n    \n    while lo < hi:\n        mid = lo + (hi-lo)//2\n        \n        if arr[mid] > arr[hi]:\n            lo = mid + 1\n        else:\n            hi = mid\n    \n    return arr[lo]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if(n==1):\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    myList=arr\n    for i in range(len(myList)-1):\n        if myList[i]!=myList[i+1]:\n            if myList[i+1]==myList[i]:\n                return myList[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        return arr[0]\n    \n    # find middle point\n    mid = l // 2\n    \n    if l % 2 == 1:\n        mid += 1\n    \n    # if element at mid appears only once\n    if arr[mid] == arr[mid-1]:\n        return arr[mid]\n    \n    # if element at mid appears twice\n    if arr[mid] == arr[mid+1]:\n        return arr[mid+1]\n    \n    # if element at mid appears 3 times\n    if arr[mid] == arr[mid-1] or arr[mid] == arr[mid+1]:\n        return search(arr[:mid])\n    else:\n        return search(arr[mid+1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    if n<2:\n        return 0\n    for i in range(n):\n        if arr[i]!=arr[i-1]:\n            return arr[i]\n    return 0\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == arr[mid+1] and arr[mid] == arr[mid-1]:\n            start = mid + 1\n        elif arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n            end = mid - 1\n        elif arr[mid] == arr[mid+1]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    size = len(arr)\n    if size == 0:\n        return None\n    elif size == 1:\n        return arr[0]\n    elif size == 2:\n        if arr[0] == arr[1]:\n            return arr[1]\n        else:\n            return arr[0]\n    else:\n        mid = int(size/2)\n        if arr[mid] == arr[mid-1]:\n            return search(arr[:mid])\n        elif arr[mid] == arr[mid+1]:\n            return search(arr[mid+1:])\n        else:\n            return arr[mid]\n    \nif __name__ == \"__main__\":\n    arr = [1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4]\n    print(search(arr))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return\n    max_product = list1[0][0] * list1[1][0]\n    for i in range(len(list1)):\n        if list1[i][0] * list1[i][1] > max_product:\n            max_product = list1[i][0] * list1[i][1]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    max_tuple = []\n    for i in list1:\n        first_val = i[0]\n        second_val = i[1]\n        if max < max_val_product(first_val, second_val):\n            max = max_val_product(first_val, second_val)\n            max_tuple = i\n    return max_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0, len(list1), 2):\n        product = list1[i][0] * list1[i+1][0]\n        if product > max_product:\n            max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    max_prod = list1[0][0]*list1[0][1]\n    for i in range(1, len(list1)):\n        temp_prod = list1[i][0]*list1[i][1]\n        if temp_prod > max_prod:\n            max_prod = temp_prod\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product(list2):\n        if len(list2)<2:\n            return 0\n        ans=list2[0]\n        for i in range(1,len(list2)):\n            if list2[i][0]<0:\n                return max_product(list2[i-1])\n            ans=max(ans,list2[i][0]*list2[i][1])\n        return ans\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #If we want to find the max product from a single tuple, we can use max in a list comprehension\n    return max(max(list1))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maxi = (list1[0][0], list1[0][1])\n    for i in range(1, len(list1)):\n        if list1[i][0] > maxi[0]:\n            maxi = (list1[i][0], list1[i][1])\n        if list1[i][1] > maxi[1]:\n            maxi = (list1[i][0], list1[i][1])\n    return maxi\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for tup in list1:\n        x, y = tup\n        if x > 0 and y > 0:\n            if max < x*y:\n                max = x*y\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1 = max2 = max3 = max4 = max5 = 0\n    for ele in list1:\n        if ele[0] > max1:\n            max1 = ele[0]\n        if ele[1] > max2:\n            max2 = ele[1]\n        if ele[2] > max3:\n            max3 = ele[2]\n        if ele[3] > max4:\n            max4 = ele[3]\n        if ele[4] > max5:\n            max5 = ele[4]\n    return (max1, max2, max3, max4, max5)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    if len(list1) > 1:\n        list1.sort()\n        for i in range(0, len(list1)-1, 2):\n            if max_prod < list1[i+1][0] * list1[i][1]:\n                max_prod = list1[i+1][0] * list1[i][1]\n    return max_prod\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = set()\n    for i in range(1, limit):\n        divisors_sum = sum(divisors(i))\n        if i == divisors_sum:\n            continue\n        if divisors_sum in amicable_nums:\n            amicable_nums.add(i)\n            amicable_nums.add(divisors_sum)\n    print(sum(amicable_nums))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1, limit):\n        sum1 = sum2 = 0\n        if i < 2:\n            continue\n        for j in range(i, 1, -1):\n            if i == j:\n                continue\n            sum2 = i + j\n            if sum1 == sum2:\n                result += i\n                break\n            sum1 = sum2\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # a/b = b/a\n    sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i) and is_amicable(sum - i):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    #Returns a list of amicable numbers between 1 and limit\n    def sum_amicable_numbers(limit):\n        amicable_numbers = []\n        for i in range(1,limit):\n            #Check if i can be made from a sum of two other numbers\n            if sum(amicable_numbers)==i:\n                #Add to the list if true\n                amicable_numbers.append(i)\n                #Then, go to the next i\n                i+=1\n            else:\n                i+=1\n        return amicable_numbers\n    \n    #Returns the sum of all amicable numbers\n    def sum_sum_amicable_numbers(limit):\n        sum_numbers = 0\n        for i in range(1,limit):\n            #Check if i can be made from a sum of two other numbers\n            if sum_amicable_numbers(i)==i:\n                #Add to the sum if true\n                sum_numbers+=i\n        return sum_numbers\n    \n    #Returns True if number is amicable and False if not\n    def is_amicable_number(number):\n        divisors = []\n        for i in range(1,number):\n            if number%i==0:\n                divisors.append(i)\n        if len(divisors) == 2:\n            #Check if number is amicable\n            if sum_amicable_numbers(number)==number:\n                return True\n            else:\n                return False\n    \n    #Returns a list of the first n amicable numbers\n    def find_first_n_amicable_numbers(n):\n        amicable_numbers = []\n        for i in range(1,n):\n            if is_amicable_number(i):\n                amicable_numbers.append(i)\n        return amicable_numbers\n    \n    #Returns the list of the first n amicable numbers where sum is equal to limit\n    def find_first_n_amicable_numbers_sum_equal(n,limit):\n        sum_numbers = find_first_n_amicable_numbers(n)\n        for i in range(0,len(sum_numbers)):\n            if sum_numbers[i]==limit:\n                return sum_numbers\n    \n    #Returns the number of amicable numbers between 1 and limit\n    def find_amicable_number_count(limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(1000,limit)\n        return len(sum_numbers)\n    \n    #Returns the sum of the first 1000 amicable numbers\n    def find_sum_of_first_n_amicable_numbers():\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(1000,250000)\n        return sum(sum_numbers)\n    \n    #Returns the number of amicable numbers between 1 and limit\n    def find_amicable_number_count_sum_equal(limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(1000,limit)\n        return len(sum_numbers)\n    \n    #Returns the sum of the first 1000 amicable numbers\n    def find_sum_of_first_n_amicable_numbers_sum_equal(limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(1000,limit)\n        return sum(sum_numbers)\n    \n    #Returns the list of the first n amicable numbers\n    def find_first_n_amicable_numbers_sum_equal(n,limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return sum_numbers\n    \n    #Returns the number of amicable numbers between 1 and limit\n    def find_amicable_number_count_sum_equal_n(n):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,100000)\n        return len(sum_numbers)\n    \n    #Returns the sum of the first 1000 amicable numbers\n    def find_sum_of_first_n_amicable_numbers_sum_equal_n(n):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,100000)\n        return sum(sum_numbers)\n    \n    #Returns the list of the first n amicable numbers\n    def find_first_n_amicable_numbers_sum_equal_n(n,limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return sum_numbers\n    \n    #Returns the number of amicable numbers between 1 and limit\n    def find_amicable_number_count_sum_equal_n_limit(limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(1000,limit)\n        return len(sum_numbers)\n    \n    #Returns the sum of the first 1000 amicable numbers\n    def find_sum_of_first_n_amicable_numbers_sum_equal_n_limit(limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(1000,limit)\n        return sum(sum_numbers)\n    \n    #Returns the list of the first n amicable numbers\n    def find_first_n_amicable_numbers_sum_equal_n_limit(n,limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return sum_numbers\n    \n    #Returns the number of amicable numbers between 1 and limit\n    def find_amicable_number_count_sum_equal_n_limit_n(n,limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return len(sum_numbers)\n    \n    #Returns the sum of the first 1000 amicable numbers\n    def find_sum_of_first_n_amicable_numbers_sum_equal_n_limit_n(limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return sum(sum_numbers)\n    \n    #Returns the list of the first n amicable numbers\n    def find_first_n_amicable_numbers_sum_equal_n_limit_n(n,limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return sum_numbers\n    \n    #Returns the number of amicable numbers between 1 and limit\n    def find_amicable_number_count_sum_equal_n_limit_n_limit(n,limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return len(sum_numbers)\n    \n    #Returns the sum of the first 1000 amicable numbers\n    def find_sum_of_first_n_amicable_numbers_sum_equal_n_limit_n_limit(limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return sum(sum_numbers)\n    \n    #Returns the list of the first n amicable numbers\n    def find_first_n_amicable_numbers_sum_equal_n_limit_n_limit(n,limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return sum_numbers\n    \n    #Returns the number of amicable numbers between 1 and limit\n    def find_amicable_number_count_sum_equal_n_limit_n_limit(limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return len(sum_numbers)\n    \n    #Returns the sum of the first 1000 amicable numbers\n    def find_sum_of_first_n_amicable_numbers_sum_equal_n_limit_n_limit(limit):\n        sum_numbers = find_first_n_amicable_numbers_sum_equal(n,limit)\n        return sum(sum_numbers)\n    \n    #Returns th"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(n):\n        '''\n        Returns the sum of all divisors of a given number.\n        '''\n        return sum([i for i in range(1, n) if n % i == 0])\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = []\n    for i in range(1, limit + 1):\n        sum_of_divisors = 0\n        for j in range(1, i):\n            if i % j == 0:\n                sum_of_divisors += j\n        if sum_of_divisors == i and i!= sum_of_divisors:\n            amicables.append(i)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    \n    for i in range(1,limit):\n        sum += i\n        amicable = False\n        for j in range(1,i):\n            if i % j == 0:\n                n = i // j\n                if j == n and j > i and n > 1:\n                    amicable = True\n        if amicable:\n            sum -= i\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    print(\"Sum of amicable numbers from 1 to {}: {}\".format(limit, sum(range(1, limit)) - sum([sum(divisor, divisor) for divisor in range(1, limit) if sum(divisor, divisor) < limit])))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    amicable_numbers = []\n    amicable_numbers_dict = {}\n    # Add 1 to the limit to account for the 1\n    for num in range(2, limit+1):\n        # When num is divisible by the first number (num)\n        if num % int(num / 2) == 0:\n            sum_amicable_numbers += num\n            # Account for the first number (num)\n            if num in amicable_numbers_dict:\n                amicable_numbers.append(num)\n                amicable_numbers_dict[num] += 1\n            # account for the second number\n            if num in amicable_numbers_dict:\n                amicable_numbers.append(num)\n                amicable_numbers_dict[num] += 1\n        # When num is divisible by the second number (num)\n        elif num % int(num / 2) == 0:\n            sum_amicable_numbers += num\n            # Account for the second number\n            if num in amicable_numbers_dict:\n                amicable_numbers.append(num)\n                amicable_numbers_dict[num] += 1\n            # account for the first number\n            if num in amicable_numbers_dict:\n                amicable_numbers.append(num)\n                amicable_numbers_dict[num] += 1\n    return amicable_numbers, sum_amicable_numbers\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if not a:\n        return 0\n    else:\n        return cmath.phase(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a*b.conjugate()\n    return cmath.phase(c)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return math.atan(b/a)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import math\n    cmath.phase(a,b)\n    print (math.degrees(math.phase(a,b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_ab = cmath.phase(b) - cmath.phase(a)\n    if angle_ab < -cmath.pi:\n        angle_ab += 2*cmath.pi\n    elif angle_ab > cmath.pi:\n        angle_ab -= 2*cmath.pi\n    else:\n        angle_ab = 0\n    return angle_ab\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a/b)\n    if a.real>0 and b.real>0:\n        return angle\n    else:\n        return -angle\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import math\n    return math.acos(a.real/math.sqrt(a.real**2+a.imag**2))+math.acos(b.real/math.sqrt(b.real**2+b.imag**2))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    phase = a.real * b.real + a.imaginary * b.imaginary\n    if phase < 0:\n        phase = -phase\n    return phase\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang=(a.real)*(a.real)+((a.imag)*(a.imag))\n    ang_ar=ang*180/3.14\n    return ang_ar\ndef angle(a,b):\n    '''\n    Write a function to get the angle of a number.\n    '''\n    ang_real=((a.real)*(a.real)+((a.imag)*(a.imag)))**(0.5)\n    ang_ar=ang_real*180/3.14\n    return ang_ar\ndef complex_form(a,b):\n    '''\n    Write a function to take the complex number and return its angle\n    '''\n    ang_ar=angle(a,b)\n    return ang_ar\ndef complex_form2(a,b):\n    '''\n    Write a function to take the complex number and return its magnitude\n    '''\n    magnitude=cmath.sqrt((a.real)**2+(a.imag)**2)\n    return magnitude\ndef complex_form3(a,b):\n    '''\n    Write a function to take the complex number and return its real and imaginary parts\n    '''\n    x=a.real\n    y=a.imag\n    return x,y\ndef complex_form4(a,b):\n    '''\n    Write a function to take the complex number and return its imaginary part only.\n    '''\n    z=a.imag\n    return z\ndef complex_form5(a,b):\n    '''\n    Write a function to take the complex number and return its real part only.\n    '''\n    x=a.real\n    return x\ndef complex_form6(a,b):\n    '''\n    Write a function to take the complex number and return its modulus, which is\n    the square root of the sum of the squares of the real and imaginary parts.\n    '''\n    x=a.real**2+a.imag**2\n    return x\ndef complex_form7(a,b):\n    '''\n    Write a function to take the complex number and return its modulus, which is\n    the square root of the sum of the squares of the real and imaginary parts.\n    '''\n    m=cmath.sqrt(x)\n    return m\ndef complex_form8(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.imag\n    n=-a.real\n    return m,n\ndef complex_form9(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.imag\n    n=-a.real\n    return m,n\ndef complex_form10(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.imag\n    n=-a.real\n    return m,n\ndef complex_form11(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form12(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form13(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form14(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form15(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form16(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form17(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form18(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form19(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form20(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form21(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form22(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form23(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form24(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form25(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form26(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form27(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form28(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form29(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form30(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form31(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form32(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form33(a,b):\n    '''\n    Write a function to take the complex number and return its conjugate.\n    '''\n    m=a.real\n    n=a.imag\n    return m,n\ndef complex_form34(a,b):\n    '''\n    Write a function to take the complex numbe"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #https://leetcode.com/problems/maximum-length-of-repeated-subarray/discuss/216876/Python-solution-with-explanation-and-code\n    count0 = count1 = 0\n    maxDiff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        maxDiff = max(maxDiff, abs(count0 - count1))\n    return maxDiff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    curr_max_diff = 0\n    for idx in range(len(string)):\n        if string[idx] == \"1\":\n            curr_max_diff = max(curr_max_diff, curr_max_diff - 1)\n        else:\n            curr_max_diff = max(curr_max_diff, curr_max_diff + 1)\n    return curr_max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count += 1\n            else:\n                count = 0\n            if count > max_count:\n                max_count = count\n    return max_count\n    \n    \ndef main():\n    print(find_length(\"010101011\"))\n    print(find_length(\"1101\"))\n    print(find_length(\"0001001\"))\n    print(find_length(\"00111\"))\n    print(find_length(\"110001\"))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    def left_count(s):\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                count += 1\n            else:\n                count -= 1\n        return count\n    \n    def right_count(s):\n        count = 0\n        for i in range(len(s)-1, -1, -1):\n            if s[i] == '0':\n                count += 1\n            else:\n                count -= 1\n        return count\n    \n    l0 = left_count(string)\n    r0 = right_count(string)\n    \n    length = max(l0, r0)\n    length_max = -1\n    while length <= len(string) and length > length_max:\n        l1 = left_count(string[length:])\n        r1 = right_count(string[length:])\n        length_max = max(length_max, l1, r1)\n        length += 1\n    return length_max\n    "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_len = 0\n    zero_cnt = 0\n    one_cnt = 0\n    max_len_zero = 0\n    max_len_one = 0\n    for i in range(len(string)):\n        if (string[i] == '0'):\n            zero_cnt += 1\n        else:\n            one_cnt += 1\n        if zero_cnt < one_cnt:\n            zero_cnt = one_cnt\n        max_len_one = max(max_len_one, zero_cnt)\n        max_len_zero = max(max_len_zero, one_cnt)\n    if (max_len_zero > max_len_one):\n        max_len = max_len_zero\n    else:\n        max_len = max_len_one\n    return max_len\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_length = 0\n    lengths = []\n    for i in range(n):\n        lengths.append(0)\n    for i in range(n):\n        for j in range(i, n):\n            if string[i] == '0':\n                lengths[j] = lengths[j] + 1\n            if string[i] == '1':\n                lengths[j] = lengths[j] - 1\n            if lengths[j] > max_length:\n                max_length = lengths[j]\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        elif string[i] == '1':\n            count -= 1\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def calculate_substring_length(string, len_substring):\n        # Returns length of substring.\n        # If no such substring found return -1\n        # else return the length of substring\n        string = list(string)\n        if len(string) == 0:\n            return -1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    maxlength = 0\n    i = 0\n    while i < len(string) :\n        if string[i] == '0' :\n            length += 1\n            i += 1\n        else :\n            length -= 1\n            i += 1\n        maxlength = max(maxlength, length)\n    return maxlength\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n    else:\n        return a+b\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    '''\n    def common_divisors(a,b): \n        n = 0\n        for i in range(1,min(a,b)+1):\n            if a % i == 0 and b % i == 0:\n                n += 1\n        return n\n    '''\n    common_divisors = lambda a, b: a if b == 0 else common_divisors(b, a % b)\n    \n    return common_divisors(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count=0\n    a=int(a)\n    b=int(b)\n    for i in range(1,min(a,b)+1):\n        if(a%i==0 and b%i==0):\n            count=count+i\n    print(count)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_sum = 0\n    while(b%a == 0):\n        divisor_sum = divisor_sum + a\n        b = b/a\n        a = a-1\n    print(divisor_sum)\nsum(3,12)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,min(a,b) + 1):\n        if (a % i == 0) and (b % i == 0):\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=0\n    for i in range(1,a):\n        if(a%i==0 and b%i==0):\n            c=c+i\n    print(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    num1=[]\n    num2=[]\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            num1.append(i)\n    for i in range(1,b+1):\n        if a%i==0 and b%i==0:\n            num2.append(i)\n    return num1,num2\nprint(sum(8,6)"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            s.append(i)\n    return sum(s)\nprint(sum(12,12))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 1 or b == 1: \n        return a * b \n    else: \n        gcd = 1\n        for i in range(2,min(a,b)+1): \n            if(a%i == 0 and b%i == 0): \n                gcd = i \n        return a*b//gcd\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div1=[]\n    div2=[]\n    for i in range(1,a+1):\n        if(a%i==0):\n            div1.append(i)\n    for j in range(1,b+1):\n        if(b%j==0):\n            div2.append(j)\n    return(sum(div1,div2))\n    \n    \n    \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \nprint(multiply_int(2, 3))\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return 0\n    if y < 0:\n        y = -y\n        x = -x\n        \n    num = 0\n    while x!= 0:\n        num = (num * 10) + y\n        x = x - 1\n    return num\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str.split():\n        if len(word)>n:\n            print(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return''.join(words)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    s = []\n    result = []\n    \n    for word in str:\n        if len(word)>n:\n            s.append(word)\n    \n    for word in s:\n        if len(word) == n:\n            result.append(word)\n            \n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words_list = str.split()\n    result = []\n    for i in words_list:\n        if len(i) >= n:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for i in str:\n        if len(i) > n:\n            long.append(i)\n    return long\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for i in str:\n        if len(i) > n:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 0:\n        return False\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix[i]):\n            return False\n        for j in range(len(my_matrix)):\n            if i == j and my_matrix[i][j]!= 0:\n                return False\n            if (i+j) == len(my_matrix) and my_matrix[i][j]!= 0:\n                return False\n            if i+j!= len(my_matrix) and my_matrix[i][j]!= 0:\n                return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check that its a square matrix, if not then quit\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if all values are in range of 0 and 9\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] < 0 or my_matrix[i][j] > 9:\n                return False\n    \n    # Check if the values are in the same row, column and diagonal\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i])!= (i+1)*(i+1):\n            return False\n    \n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i][i::])!= (i+1)*(i+1):\n            return False\n    \n    for i in range(len(my_matrix)):\n        if sum(my_matrix[len(my_matrix)-i-1][i::])!= (len(my_matrix)-i+1)*(i+1):\n            return False\n    \n    return True\n    "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not is_matrix(my_matrix):\n        return False\n    n = len(my_matrix)\n    m = len(my_matrix[0])\n    if n!= m:\n        return False\n    if n!= 0:\n        if m!= n:\n            return False\n    for i in range(n):\n        my_row = my_matrix[i]\n        if len(my_row)!= n:\n            return False\n        sum_row = 0\n        for j in range(n):\n            sum_row = sum_row + my_row[j]\n        if sum_row!= n*n:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #print(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_sum = 0\n    for x in range(0, len(my_matrix)):\n        for y in range(0, len(my_matrix)):\n            if(my_matrix[x][y] == 0):\n                return False\n            my_sum += my_matrix[x][y]\n    if(my_sum!= 36):\n        return False\n    for x in range(0, len(my_matrix)):\n        if(my_sum % 2!= 0):\n            return False\n        my_sum = my_sum - my_matrix[x][x]\n    for x in range(0, len(my_matrix)):\n        if(my_sum % 2!= 0):\n            return False\n        my_sum = my_sum - my_matrix[x][len(my_matrix)-1-x]\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list) or my_matrix == None:\n        return False\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix):\n            return False\n        if not all(isinstance(num, int) for num in my_matrix[i]):\n            return False\n    if len(my_matrix)!= len(set(sum(my_matrix, []))):\n        return False\n    if len(my_matrix)!= len(set(sum(zip(*my_matrix), []))):\n        return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= sum(my_matrix[0:i] + my_matrix[i+1:len(my_matrix)] + my_matrix[0:j] + my_matrix[j+1:len(my_matrix)]):\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # make a function to check if a matrix is magic\n    def magic_square(my_matrix):\n        for i in range(0,len(my_matrix)):\n            if sum(my_matrix[i])!= i*i:\n                return False\n        for j in range(0,len(my_matrix[0])):\n            sum_list = []\n            for k in range(0,len(my_matrix)):\n                sum_list.append(my_matrix[k][j])\n            if sum(sum_list)!= j*len(my_matrix):\n                return False\n        for k in range(0,len(my_matrix)):\n            sum_list = []\n            for l in range(0,len(my_matrix)):\n                sum_list.append(my_matrix[k][l])\n            if sum(sum_list)!= k*len(my_matrix):\n                return False\n        for k in range(0,len(my_matrix)):\n            sum_list = []\n            for l in range(0,len(my_matrix)):\n                sum_list.append(my_matrix[l][k])\n            if sum(sum_list)!= k*len(my_matrix):\n                return False\n        return True\n    # print(my_matrix)\n    # print(magic_square(my_matrix))\n    return magic_square(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    assert len(my_matrix) == 9\n    assert len(my_matrix[0]) == 9\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    count = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    is_magic = True\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix[i][0]):\n            is_magic = False\n            break\n        for j in range(len(my_matrix[i])):\n            if j!= (len(my_matrix[i]) - 1):\n                if my_matrix[i][j]!= my_matrix[i][j + 1]:\n                    is_magic = False\n                    break\n            if i!= (len(my_matrix) - 1):\n                if my_matrix[i][j]!= my_matrix[i + 1][j]:\n                    is_magic = False\n                    break\n    return is_magic\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash_map = defaultdict(int)\n    for i in nums:\n        hash_map[i] += 1\n    max_freq = max(hash_map.values())\n    return max([k for k,v in hash_map.items() if v==max_freq])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    \n    max_count = max(counts.values())\n    return [num for num in counts if counts[num] == max_count]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occur = {}\n    for n in nums:\n        if n not in occur:\n            occur[n] = 1\n        else:\n            occur[n] += 1\n    max_val = -1\n    max_key = -1\n    for k,v in occur.items():\n        if v > max_val:\n            max_val = v\n            max_key = k\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_freq = 0\n    res = None\n    for key, val in d.items():\n        if val > max_freq:\n            max_freq = val\n            res = key\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    max_item = []\n    max_count = -1\n    for item, count in d.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for num in nums:\n        dic[num] += 1\n    max_key = max(dic,key=dic.get)\n    return max_key,dic[max_key]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #ans = max(set(nums), key=nums.count)\n    #return max(nums, key=nums.count)\n    return max(set(nums), key=nums.count)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    res = None\n    max_val = 0\n    for k, v in d.items():\n        if v > max_val:\n            max_val = v\n            res = k\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_count = 0\n    max_item = ''\n    for k,v in d.items():\n        if v > max_count:\n            max_item = k\n            max_count = v\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #num_counts = defaultdict(int)\n    #for num in nums:\n        #num_counts[num] += 1\n    #max_num = max(num_counts.items(), key = lambda x: x[1])[0]\n    #print(max_num, num_counts[max_num])\n    return max(nums,key = nums.count)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #vowels = set('aeiou')\n    vowels = set('aeiouyAEIOUY')\n    new_string = \"\"\n    for char in str1:\n        if char in vowels:\n            new_string = new_string + char\n    return new_string\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    str2 = str1.lower()\n    for letter in str2:\n        if letter in vowels:\n            str2 = str2.replace(letter, \"\")\n            str2 = str2[::-1]\n            str2 = str2 + letter\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    vowels_set = set(str1) & vowels\n    new_str = \"\"\n    for c in str1:\n        if c in vowels_set:\n            new_str += c\n        else:\n            new_str += c.upper()\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = str1.lower()\n    rev_str = \"\"\n    for i in str1:\n        if i not in vowels:\n            rev_str = rev_str + i\n        else:\n            rev_str = rev_str + i.upper()\n    print(rev_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    list_a = list(str1)\n    new_list = []\n    vowels = ['a','e','i','o','u','y']\n    for i in list_a:\n        if i in vowels:\n            new_list.append(i)\n    print(new_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    n = str1\n    new_string = \"\"\n    for i in n:\n        if i not in vowels:\n            new_string += i\n    print(new_string)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    str2 = \"\"\n    for letter in str1:\n        if letter not in vowels:\n            str2 = str2 + letter\n    print(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    s = list(str1)\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] in vowels:\n            i += 1\n        elif s[j] in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return \"\".join(s)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    \n    i=0\n    new_str=\"\"\n    while i<len(str1):\n        if str1[i] not in vowels:\n            new_str+=str1[i]\n        else:\n            new_str+=\"o\"\n            new_str+=str1[i]\n        i+=1\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str2 = list(str1)\n    for i in range(len(str2)):\n        if str2[i] not in vowels:\n            str2[i] = str2[i].upper()\n    return \"\".join(str2)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for t in tup1:\n        s += str(t) +''\n    return s[:-1]\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    print(sum([-i for i in nums]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    ans = 0\n    for num in nums:\n        if num < 0:\n            ans += num\n    return ans\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    print('sum_negativenum()')\n    return sum([n for n in nums if n < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    output = 0\n    \n    for i in range(len(nums)):\n        if nums[i] < 0:\n            output += nums[i]\n            \n    return output\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negativenum += nums[i]\n    return negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((6 * n + 1) ** 2 - n ** 2) / 4"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * ((3 * n) - 1) / 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hexagon(n):\n        '''\n        This is a recursion function.\n        '''\n        if n == 1:\n            return 1\n        else:\n            return hexagon(n-1) + 3*(2*n-1)\n        \n    return hexagon(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(3*n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        return hexagonal_num(n-1)+2*hexagonal_num(n-2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = -1\n    b = -1\n    c = -1\n    i = 0\n    while (i < n):\n        a = (2 * i + 1) ** 2\n        b = (2 * i + 1) ** 2 - 1\n        c = (2 * i + 1) ** 2 - 3 * (2 * i) + 2\n        if (a + b + c == n):\n            return a + b + c\n        i += 1\n    return 'Wrong!'\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = (1 + sqrt(5))/2\n    return int(x**(n/2) * (2*x - 1))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # total_numbers = 3*2**(n-1)\n    # return total_numbers\n    if n==1:\n        return 3\n    elif n==2:\n        return 1\n    else:\n        total_numbers = 3*2**(n-1) + 1\n        return total_numbers\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * (3 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (6 * hexagonal_num(n - 1)) - (2 * n)\n        \nprint(hexagonal_num(1)) # should print 1\nprint(hexagonal_num(2)) # should print 6\nprint(hexagonal_num(3)) # should print 18\nprint(hexagonal_num(4)) # should print 48\nprint(hexagonal_num(5)) # should print 132\nprint(hexagonal_num(6)) # should print 156\nprint(hexagonal_num(7)) # should print 196\nprint(hexagonal_num(8)) # should print 240\nprint(hexagonal_num(9)) # should print 280\nprint(hexagonal_num(10)) # should print 324\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0)/nums.count(0)\n    \n    \ndef no_duplicates(nums):\n    '''\n    Write a function to remove duplicates from an array.\n    '''\n    nums_list = list(set(nums))\n    return len(nums_list)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #method_1\n    #return float(sum(num == 0 for num in nums)) / len(nums)\n    \n    #method_2\n    #arr = array('i', nums)\n    #return float(arr.count(0))/len(arr)\n    \n    #method_3\n    return float(sum(num == 0 for num in nums)) / len(nums)\n    \n    \n    \n    \n    #method_4\n    # arr = array('i', nums)\n    # return float(sum(1 for num in arr if num==0))/len(arr)\n    \n    \n    #method_5\n    # arr = array('i', nums)\n    # zeroes = sum(1 for num in arr if num==0)\n    # return zeroes/len(arr)\n    \n    \n    #method_6\n    # count = 0\n    # for i in nums:\n    #     if i == 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_7\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_8\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_9\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_10\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_11\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_12\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_13\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_14\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_15\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_16\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_17\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_18\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_19\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_20\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_21\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_22\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_23\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_24\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_25\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_26\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_27\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_28\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_29\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_30\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_31\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_32\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_33\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_34\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_35\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_36\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_37\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_38\n    # count = 0\n    # for i in nums:\n    #     if i!= 0:\n    #         count += 1\n    # return count/len(nums)\n    \n    \n    #method_39\n    # count = 0\n    # for i in nu"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\ndef count(nums):\n    '''\n    Write a function to count the number of subarrays with sum equal to a specific target.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(nums[i:j+1])\n            if s == target:\n                count += 1\n    return count\ndef count1(nums, target):\n    '''\n    Write a function to count the number of subarrays with sum equal to a specific target.\n    '''\n    count = 0\n    n = len(nums)\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(nums[i:j+1])\n            if s == target:\n                count += 1\n    return count\ndef sum_m(nums, m):\n    '''\n    Write a function to find the sum of an array of integers.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(nums[i:j+1])\n            if s == m:\n                return True\n    return False\ndef sum_pairs(nums, target):\n    '''\n    Write a function that takes an array of numbers (integers for the tests)\n    and returns the number of pairs of elements that sum to a specific target.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef sum_pairs_1(nums, target):\n    '''\n    Write a function that takes an array of numbers (integers for the tests)\n    and returns the number of pairs of elements that sum to a specific target.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef sum_pairs_2(nums, target):\n    '''\n    Write a function that takes an array of numbers (integers for the tests)\n    and returns the number of pairs of elements that sum to a specific target.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef sum_pairs_3(nums, target):\n    '''\n    Write a function that takes an array of numbers (integers for the tests)\n    and returns the number of pairs of elements that sum to a specific target.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef sum_pairs_4(nums, target):\n    '''\n    Write a function that takes an array of numbers (integers for the tests)\n    and returns the number of pairs of elements that sum to a specific target.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef sum_pairs_5(nums, target):\n    '''\n    Write a function that takes an array of numbers (integers for the tests)\n    and returns the number of pairs of elements that sum to a specific target.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef pair(nums, target):\n    '''\n    Write a function that takes an array of integers and a target sum and \n    returns the number of possible combinations that add up to a target sum.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef pair_1(nums, target):\n    '''\n    Write a function that takes an array of integers and a target sum and \n    returns the number of possible combinations that add up to a target sum.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef pair_2(nums, target):\n    '''\n    Write a function that takes an array of integers and a target sum and \n    returns the number of possible combinations that add up to a target sum.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef pair_3(nums, target):\n    '''\n    Write a function that takes an array of integers and a target sum and \n    returns the number of possible combinations that add up to a target sum.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef pair_4(nums, target):\n    '''\n    Write a function that takes an array of integers and a target sum and \n    returns the number of possible combinations that add up to a target sum.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef pair_5(nums, target):\n    '''\n    Write a function that takes an array of integers and a target sum and \n    returns the number of possible combinations that add up to a target sum.\n    '''\n    count = 0\n    nums = array('i', nums)\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            s = nums[i] + nums[j]\n            if s == target:\n                count += 1\n    return count\ndef pair_6(nums, target):\n    '''\n    Write a function that takes an array of integers and a target sum and \n    returns the number of possible combinations that add up to a target sum.\n    '''\n    count = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zero_count = 0\n    non_zero = 0\n    for i in range(n):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            non_zero += 1\n    return zero_count/non_zero\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n=0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            n+=1\n    return n/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    numbers_length = len(nums)\n    if numbers_length == 0:\n        return -1\n    zeroes_count = 0\n    non_zeroes_count = 0\n    for num in nums:\n        if num == 0:\n            zeroes_count += 1\n        else:\n            non_zeroes_count += 1\n    return zeroes_count / non_zeroes_count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums)==0:\n        return 0\n    count = 0\n    for i in range(0,len(nums)):\n        if nums[i]==0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    c0 = 0\n    c1 = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            c0 += 1\n        else:\n            c1 += 1\n    return c0 / c1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    \n    sum = 0\n    while n > 0:\n        if n == 0:\n            return False\n        sum += (n & 1)\n        n = n >> 1\n    if sum <= 1:\n        return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        s = n//2\n        if s > 1 and n%2:\n            return False\n        n = n % 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Code here\n    if(n<1):\n        return False\n    sum=0\n    while(n>0):\n        if(n%2==0):\n            n=n//2\n        else:\n            return False\n        sum=sum+1\n    if(sum==1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    i = 1\n    count = 1\n    while (i < n):\n        i = i << 1\n        count = count << 1\n    return (count == n)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #return not (n & (n-1))\n    return (n & 0xaaaaaaaa) == 0 and (n - 1) & 0xaaaaaaaa == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return False\n    else:\n        while n > 1:\n            if not is_prime(n):\n                return False\n            else:\n                n -= 2\n        return True\n    \ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,n//2+1):\n            if not (n % i):\n                return False\n        else:\n            return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #python code\n    n = int(input())\n    if(n > 0 and n < 1000000):\n        return 0\n    if(n == 0 or n == 1):\n        return 1\n    while(True):\n        if(n%2 == 0):\n            n = n/2\n            if(n == 0 or n == 1):\n                return 0\n            if(n < 0 or n > 1000000):\n                return 0\n        else:\n            return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0): \n        return False\n    \n    if (n <= 0): \n        return False\n    \n    while (n % 2 == 0): \n        n = n // 2\n    \n    for i in range(3, int(math.sqrt(n))+1, 2): \n        while (n % i == 0): \n            n = n // i \n    \n    if (n > 2): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # code here\n    if(n == 0):\n        return False\n    temp = n\n    sum = 0\n    while(temp!= 0):\n        sum = sum + temp%2\n        temp = temp//2\n    if(n == sum):\n        return True\n    return False\n    \ndef Print_Numbers_in_range(lower, upper): \n    '''\n    Write a python function to print all the numbers between lower and upper limit.\n    '''\n    # code here\n    for i in range(lower, upper+1):\n        print(i, end ='')\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            return False\n    return True\nprint(is_Sum_Of_Powers_Of_Two(21)) # True\nprint(is_Sum_Of_Powers_Of_Two(1)) # False\nprint(is_Sum_Of_Powers_Of_Two(2)) # True\nprint(is_Sum_Of_Powers_Of_Two(3)) # False\nprint(is_Sum_Of_Powers_Of_Two(6)) # False\nprint(is_Sum_Of_Powers_Of_Two(29)) # False\nprint(is_Sum_Of_Powers_Of_Two(0)) # False\nprint(is_Sum_Of_Powers_Of_Two(-1)) # False\nprint(is_Sum_Of_Powers_Of_Two(1000)) # True\nprint(is_Sum_Of_Powers_Of_Two(0)) # False\nprint(is_Sum_Of_Powers_Of_Two(13)) # True\nprint(is_Sum_Of_Powers_Of_Two(15)) # False\nprint(is_Sum_Of_Powers_Of_Two(13**2)) # True\nprint(is_Sum_Of_Powers_Of_Two(13**3)) # False\nprint(is_Sum_Of_Powers_Of_Two(13**5)) # False\nprint(is_Sum_Of_Powers_Of_Two(13**7)) # True\nprint(is_Sum_Of_Powers_Of_Two(1000000000000)) # False\nprint(is_Sum_Of_Powers_Of_Two(12**20)) # True\nprint(is_Sum_Of_Powers_Of_Two(12**20)) # True\nprint(is_Sum_Of_Powers_Of_Two(12**100)) # True\nprint(is_Sum_Of_Powers_Of_Two(1000000000)) # False"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    if type(r)!= float:\n        print('Error, radius must be a float.')\n        return None\n    if r < 0:\n        print('Error, radius must be non-negative.')\n        return None\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list == None:\n        return set()\n    elif type(test_list) == set:\n        return test_list\n    else:\n        return test_list.union(extract_singly(test_list[1:]))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list += test_list[i]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    assert type(test_list) == list, \"ERROR: input must be a list.\"\n    for i in range(len(test_list)):\n        assert type(test_list[i]) == list, \"ERROR: input must be a list of lists.\"\n        for j in range(len(test_list[i])):\n            assert type(test_list[i][j]) == int, \"ERROR: element at index %d in list at index %d must be an int.\" % (j, i)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        if type(i) == type([]):\n            flat_list.extend(extract_singly(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(test_list)\n    \ndef convert_nested(test_list):\n    '''\n    Write a function to convert a nested list into a single list.\n    '''\n    return list(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Your Code here\n    res = []\n    for item in test_list:\n        for i in item:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError(\"Invalid input type\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    return(sum(test_list, []))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return set()\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pancake_sort(nums):\n        '''\n        This is a variation of the sort_smallest function.\n        We don't need to deal with the last element.\n        We can just swap it with the first element.\n        '''\n        while len(nums) > 1:\n            swap_idx = min(nums)\n            nums.remove(swap_idx)\n            nums.append(swap_idx)\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    res = []\n    def swap(a, b):\n        if a > b:\n            a, b = b, a\n        return a, b\n    def find_max(nums):\n        max_idx = nums.index(max(nums))\n        return max_idx, max(nums)\n    def find_min(nums):\n        min_idx = nums.index(min(nums))\n        return min_idx, min(nums)\n    def reverse_range(nums, start_idx, end_idx):\n        while start_idx < end_idx:\n            nums[start_idx], nums[end_idx] = swap(nums[start_idx], nums[end_idx])\n            start_idx, end_idx = find_max(nums)\n    def shift(nums, start_idx, end_idx):\n        while start_idx < end_idx:\n            nums[start_idx], nums[end_idx] = swap(nums[start_idx], nums[end_idx])\n            start_idx, end_idx = find_min(nums)\n    def pancake_sort_helper(nums):\n        n = len(nums)\n        if n <= 1:\n            return\n        end = n - 1\n        start = 0\n        while start < end:\n            # \u4ece\u5927\u5230\u5c0f\u7b97\n            start_idx, start_value = find_max(nums)\n            # \u4ece\u5c0f\u5230\u5927\u7b97\n            end_idx, end_value = find_min(nums)\n            # \u4ece\u5c0f\u5230\u5927\u7b97\n            reverse_range(nums, start_idx, end_idx)\n            # \u4ece\u5927\u5230\u5c0f\u7b97\n            shift(nums, start_idx, end_idx)\n            start += 1\n        return\n    pancake_sort_helper(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # find the biggest element and put it to the end\n        if i == len(nums) - 1:\n            nums = nums[:i] + nums[i+1:]\n        elif nums[i] > nums[i + 1]:\n            nums = nums[:i] + [nums[i]] + nums[i + 1:]\n    print(nums)\npancake_sort([3, 2, 1]"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        cur_min = i\n        for j in range(i+1, n):\n            if nums[j] < nums[cur_min]:\n                cur_min = j\n        if i!= cur_min:\n            nums[i], nums[cur_min] = nums[cur_min], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pancake_sort_helper(nums, result):\n        # base case\n        if len(nums) == 1:\n            return result + [nums]\n        # recursive case\n        else:\n            # find largest\n            largest = max(nums)\n            # move largest to the end\n            nums.remove(largest)\n            # reverse list\n            nums.reverse()\n            # result\n            result.append(largest)\n            # recursive call\n            return pancake_sort_helper(nums, result)\n    return pancake_sort_helper(nums, [])\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums, a, b):\n        while a < b:\n            if nums[a] >= nums[b]:\n                tmp = nums[a]\n                nums[a] = nums[b]\n                nums[b] = tmp\n            a += 1\n        return nums\n    for i in range(len(nums)):\n        nums = sort(nums, 0, len(nums)-1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Time: O(n)\n    # Space:O(1)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Time: O(n)\n    # Space: O(1)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            res = res + 1\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_2(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_3(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_4(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_5(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_6(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_7(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_8(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_9(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_10(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #for each item in the list, count how many items in the other two lists are equal to that item and the third list.\n    #then divide by the length of the third list and multiply by the length of the second list.\n    c = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            c += 1\n    #then divide the product by the number of items in the third list.\n    n=len(list3)\n    return (c/n)\n    \ndef count_multitemp_11(list1,list2,list3):\n    '''\n    Write a function to coun"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    i=0\n    count=0\n    while i<len(list1):\n        if list1[i]==list2[i]:\n            if list1[i]==list3[i]:\n                count=count+1\n        i=i+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    count=count+1\n                    break\n                else:\n                    count=count\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!=len(list2) or len(list2)!=len(list3):\n        print(\"There is mismatch in the length of the lists\")\n        return 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            return 1\n    return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_index,list2_index,list3_index = [], [], []\n    for index in range(len(list1)):\n        list1_index.append(index)\n        list2_index.append(index)\n        list3_index.append(index)\n    \n    for index in range(len(list1)):\n        if list1[index] == list2[index] and list1[index] == list3[index]:\n            list1_index[index] = list2_index[index] = list3_index[index] = True\n    \n    if False in list1_index:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    input = Input\n    #l = list(input)\n    count = 0\n    for i in input:\n        for j in input:\n            if i == j:\n                count += 1\n    return count\n        "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    count = 0\n    # for _ in range(len(Input)):\n    #     if type(Input[0]) == list:\n    #         count += 1\n    # return count\n    return sum(1 for x in Input if type(x) == list)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    for i in Input:\n        if type(i)==list:\n            return 1\n    return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        if type(i)==list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum(1 for i in Input if type(i) is list)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) is tuple:\n        count = 0\n        for i in range(len(Input)):\n            if type(Input[i]) is list:\n                count += 1\n        return count\n    else:\n        raise Exception\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #take any list as an input\n    lists = []\n    #convert the input to a tuple \n    tupleInput = tuple(Input)\n    #sort the tuple\n    sortedTuple = sorted(tupleInput)\n    #append the sorted tuple to the empty lists\n    lists.append(sortedTuple)\n    #iterate through the sorted tuple\n    for i in range(len(sortedTuple)-1):\n        #check if the index is equal to the length of the tuple\n        if sortedTuple[i] == sortedTuple[i+1]:\n            #append the tuple to the empty lists\n            lists.append(sortedTuple[i+1])\n    return len(lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_of_lists =[]\n    count = 0\n    for each in Input:\n        if each not in list_of_lists:\n            list_of_lists.append(each)\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input_tuple = tuple(map(int, Input))\n    number_of_list = 0\n    for i in Input_tuple:\n        if type(i) == list:\n            number_of_list += 1\n    print(number_of_list)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = len(Input)\n    if(n>0):\n        count = 0\n        for i in range(n):\n            if(type(Input[i]) == type([])):\n                count = count + 1\n        return count\n    else:\n        return 0\n    \nInput = (3,[],6)\nOutput = find_lists(Input)\nprint(Output)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -sys.maxsize-1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = -999\n    min_index = -1\n    for i in range(0, len(arr)): \n        if (arr[i] > maxDiff): \n            maxDiff = arr[i] - minDiff\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Your code here\n    \n    max_diff = -1\n    \n    for i in range(len(arr)-1):\n        if arr[i]>max_diff:\n            max_diff = arr[i] - arr[i+1]\n    \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    min_val = arr[0]\n    max_val = arr[0]\n    min_idx = 0\n    max_idx = 0\n    for i in range(len(arr)):\n        if(arr[i]>max_val):\n            max_val = arr[i]\n            max_idx = i\n    for j in range(len(arr)):\n        if(arr[j]<min_val):\n            min_val = arr[j]\n            min_idx = j\n    return max_val-min_val\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)): \n        if arr[i] - arr[i - 1] > max_diff: \n            max_diff = arr[i] - arr[i - 1] \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2: \n        return 0\n    max_ = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            max_ = max(abs(arr[i]-arr[j]), max_)\n    return max_\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    mx = arr[0]\n    mn = arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # define a min_Abs_Diff function\n    def min_Abs_Diff(arr):\n        '''\n        define a min_Abs_Diff function\n        '''\n        # initialize an empty list\n        min_diff_list = []\n        # check the length of array\n        if len(arr) == 1:\n            min_diff_list.append(0)\n        else:\n            # initialize minimum difference\n            min_diff = abs(arr[0] - arr[1])\n            # check for the minimum difference\n            for i in range(len(arr)):\n                # if element is negative\n                if arr[i] < 0:\n                    # calculate absolute value\n                    min_diff = abs(arr[i] - arr[i - 1])\n                # if element is positive\n                elif arr[i] > 0:\n                    # calculate absolute value\n                    min_diff = abs(arr[i] - arr[i - 1])\n            # append the minimum difference to the list\n            min_diff_list.append(min_diff)\n        # return minimum difference from list\n        return min_diff_list\n    # get the minimum difference from the array\n    min_diff_list = min_Abs_Diff(arr)\n    # initialize an empty array\n    max_diff = []\n    # calculate the maximum difference\n    for i in range(len(min_diff_list)):\n        max_diff.append(min_diff_list[i] + abs(min_diff_list[i]))\n    # return the maximum difference\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0] - arr[1] \n    for i in range(1, len(arr)-1): \n        diff = abs(arr[i] - arr[i+1]) \n        if max < diff: \n            max = diff \n    return max\nprint(\"Max Difference \", max_Abs_Diff([3, -1, 5, 4, 2])) \nprint(\"Max Difference \", max_Abs_Diff([1, 3, 4, 2])) \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    max_index = None\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1]-arr[i])\n        if diff > max_diff:\n            max_diff = diff\n            max_index = i+1\n    return max_diff, max_index\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n+1):\n        # TODO: find a solution for i\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    if a == 0 and b == 0 and n == 0:\n        return (0, 0)\n    if a == 0 and b == 0 and n!= 0:\n        return None\n    x = (n - b) / a\n    if (int(x) == x and int(n - b) == (n - b)) and (a * int(x)) + b == n:\n        return (int(x), int(n - b))\n    else:\n        return find_solution(a, b, n - int(x))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(1,n+1):\n        if a*i + b*i == n:\n            x = i\n            y = a*i\n            return x, y\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if (a * i) + (b * j) == n:\n                return i, j\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, b + 1):\n        y = n - a * x\n        if y >= 0 and y % a == 0:\n            return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    ans = []\n    for i in range(len(a)):\n        x = n // a[i]\n        if n % a[i]!= 0:\n            break\n        y = b // a[i]\n        if n % b == 0:\n            return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(int(n / b) + 1):\n        for y in range(int(n / a) + 1):\n            if a * x + b * y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    while True:\n        x1 = x + 1\n        y1 = y + 1\n        x2 = x - 1\n        y2 = y - 1\n        if (a * x1) + (b * y1) == n:\n            return x1, y1\n        elif (a * x2) + (b * y2) == n:\n            return x2, y2\n        elif (a * x) + (b * y) == n:\n            return x, y\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        elif (a * x2) + (b * y1) == n:\n            return x2, y1\n        elif (a * x) + (b * y1) == n:\n            return x, y1\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        x += 1\n        y += 1\n        \ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    while True:\n        x1 = x + 1\n        y1 = y + 1\n        x2 = x - 1\n        y2 = y - 1\n        if (a * x1) + (b * y1) == n:\n            return x1, y1\n        elif (a * x2) + (b * y2) == n:\n            return x2, y2\n        elif (a * x) + (b * y) == n:\n            return x, y\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        elif (a * x2) + (b * y1) == n:\n            return x2, y1\n        elif (a * x) + (b * y1) == n:\n            return x, y1\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        x += 1\n        y += 1\n        \ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    while True:\n        x1 = x + 1\n        y1 = y + 1\n        x2 = x - 1\n        y2 = y - 1\n        if (a * x1) + (b * y1) == n:\n            return x1, y1\n        elif (a * x2) + (b * y2) == n:\n            return x2, y2\n        elif (a * x) + (b * y) == n:\n            return x, y\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        elif (a * x2) + (b * y1) == n:\n            return x2, y1\n        elif (a * x) + (b * y1) == n:\n            return x, y1\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        x += 1\n        y += 1\n        \ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    while True:\n        x1 = x + 1\n        y1 = y + 1\n        x2 = x - 1\n        y2 = y - 1\n        if (a * x1) + (b * y1) == n:\n            return x1, y1\n        elif (a * x2) + (b * y2) == n:\n            return x2, y2\n        elif (a * x) + (b * y) == n:\n            return x, y\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        elif (a * x2) + (b * y1) == n:\n            return x2, y1\n        elif (a * x) + (b * y1) == n:\n            return x, y1\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        x += 1\n        y += 1\n        \ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    while True:\n        x1 = x + 1\n        y1 = y + 1\n        x2 = x - 1\n        y2 = y - 1\n        if (a * x1) + (b * y1) == n:\n            return x1, y1\n        elif (a * x2) + (b * y2) == n:\n            return x2, y2\n        elif (a * x) + (b * y) == n:\n            return x, y\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        elif (a * x2) + (b * y1) == n:\n            return x2, y1\n        elif (a * x) + (b * y1) == n:\n            return x, y1\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        x += 1\n        y += 1\n        \ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    while True:\n        x1 = x + 1\n        y1 = y + 1\n        x2 = x - 1\n        y2 = y - 1\n        if (a * x1) + (b * y1) == n:\n            return x1, y1\n        elif (a * x2) + (b * y2) == n:\n            return x2, y2\n        elif (a * x) + (b * y) == n:\n            return x, y\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        elif (a * x2) + (b * y1) == n:\n            return x2, y1\n        elif (a * x) + (b * y1) == n:\n            return x, y1\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        x += 1\n        y += 1\n        \ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    while True:\n        x1 = x + 1\n        y1 = y + 1\n        x2 = x - 1\n        y2 = y - 1\n        if (a * x1) + (b * y1) == n:\n            return x1, y1\n        elif (a * x2) + (b * y2) == n:\n            return x2, y2\n        elif (a * x) + (b * y) == n:\n            return x, y\n        elif (a * x1) + (b * y2) == n:\n            return x1, y2\n        elif (a * x2) + (b * y1) == n:\n            return x2, y1\n        elif (a * x) + (b * y1) == n:\n            retur"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    for i in range(1, n):\n        if (a*x + b*y) == n:\n            return (x, y)\n        elif (a*x + b*y) < n:\n            x += 1\n        else:\n            y += 1\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # f(x,y) = x^2 - y^2 - n, f'(x,y) = 2 * x * y, f''(x,y) = 2 * y^2\n    # def f(x,y):\n    #     return x**2 - y**2 - n\n    # def fprime(x,y):\n    #     return 2 * x * y\n    # def fprime2(x,y):\n    #     return 2 * y**2\n    # x = -b / (2 * a)\n    # y = -n / (2 * a)\n    # print(x, y)\n    # fprime2 = 2 * a\n    # fprime2 = 2 * a\n    # fprime2 = fprime(2*a, 0)\n    # print(fprime2)\n    # if f(x,y) > 0:\n    #     print(\"There is no solution\")\n    # else:\n    #     print(\"The solution is : {} {}\".format(x, y))\n    if b == 0:\n        return (a, 0)\n    else:\n        x = -b / (2 * a)\n        y = -n / (2 * a)\n        if x > 0:\n            return (x, y)\n        else:\n            return (a, 0)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l1_set = set(list1)\n    l2_set = set(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = list1 + list2\n    list3 = [value for value in list3 if value not in list2]\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for ele in list2:\n        if ele in list1:\n            list1.remove(ele)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    temp_list = list1.copy()\n    for ele in list2:\n        if ele in temp_list:\n            temp_list.remove(ele)\n    return temp_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    remove = []\n    for i in list1:\n        if i not in list2:\n            remove.append(i)\n    return remove\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for ele in list2:\n        if ele in list1:\n            list1.remove(ele)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return[i for i in list1 if i not in list2]\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return n + (n-2) + (n-4) + (n-6) + (n-8) + (n-10) + (n-12)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + (n - 2 * i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    ans = 0\n    for i in range(n):\n        ans += (n - 2 * i)\n    return ans\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 2 * sum_series(n // 2)\n    else:\n        return sum_series(n // 2) + sum_series(n // 2 + 1)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i < n:\n        total += i\n        i += 1\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    while n >= 0:\n        result += n\n        n -= 2\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    assert n >= 0\n    n = abs(n)\n    s = 0\n    for i in range(n // 2 + 1):\n        s += (n - 2*i)\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # def sum_series(n):\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return n + (sum_series(n-2))\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sum_series(n - 2) + (n - 2) + sum_series(n - 4)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s/2.0\n    return pi * (s*s) / (3*l)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Just calculate the area of a regular polygon with sides l and n\n    # using Heron's formula:\n    area = l**2 / (4 * tan(pi / n))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = float(s)\n    l = float(l)\n    return ((s * l) / 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s/2)*(1-tan(pi/s))\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * (pi ** 2) / (4 * tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        return 0\n    return (s * l * (s - tan(pi / s))) / (4 * tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(f\"The area of the regular polygon is: {((s*l)/2)*pi}\")\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * (s - l) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if not s.is_integer() or s <= 0 or l <= 0:\n        return None\n    n = s/2\n    a = (n * (n+1)) / 2\n    p = a * pi\n    return p * l\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        raise ValueError\n    return 0.5 * pi * s * (l - 2)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_div = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum_div += i\n        if sum_div == n:\n            return True\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Your code here\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    num1, num2 = n, n\n    for i in range(1, int(math.sqrt(num1)) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            num1 = num1 / i\n            num2 = num2 / i\n    return num1 == num2 \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total=0\n    for x in range(1,n): \n        if n%x==0: \n            total+=x \n    return total==n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n <= 1:\n        return False\n    \n    divisors = []\n    for i in range(1, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n/i:\n                divisors.append(n/i)\n    return sum(divisors) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    factors = []\n    n = int(n)\n    for i in range(1,n+1):\n        if n % i == 0:\n            factors.append(i)\n    sum1 = sum(factors)\n    factors2 = []\n    n = int(n)\n    for i in range(1,n+1):\n        if n % i == 0:\n            factors2.append(i)\n    sum2 = sum(factors2)\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return math.gcd(n,int(n/2)) == 1\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n//2 + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if sum(divisors) == n:\n        print(\"Sum of the divisors = \",sum(divisors))\n        print(\"The numbers are: \",divisors)\n        print(\"This is the sum\")\n    else:\n        print(\"The numbers are not the sum\")\ndiv_sum(12)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = int(input(\"Enter the numbers to find the divisors: \"))\n    div = []\n    for i in range(1,n+1):\n        if (n%i) == 0:\n            div.append(i)\n    \n    print(div)\n    if len(div)==2:\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    count = 0\n    \n    for i in char_pos_dict:\n        if char_pos_dict[i] == 1:\n            count += 1\n            \n    return count\n    \ndef count_char_position2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position3(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position4(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position5(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position6(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position7(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position8(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position9(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position10(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position11(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position12(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str1[i]] = 1\n            \n    return len([i for i in char_pos_dict if char_pos_dict[i] == 1])\n    \ndef count_char_position13(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    char_pos_dict = {}\n    \n    for i in range(len(str1)):\n        \n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]] += 1\n        else:\n            char_pos_dict[str"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # The positions are shifted by 13 to make them positive and lowercase\n    char_pos = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    count = 0\n    for i in range(1, 27):\n        if str1.count(chr(i + 13)) > 0:\n            count += str1.count(chr(i + 13))\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialising the dictionary and the counter\n    count = 0\n    d = {}\n    # Checking if the string is empty or not \n    if len(str1) == 0:\n        return 0\n    # Converting the string to lower case\n    # str1 = str1.lower()\n    # Loop through the string\n    for i in range(len(str1)):\n        # If the character is already in the dictionary \n        # then increment the count\n        if str1[i] in d:\n            count += 1\n        # If the character is not in the dictionary\n        # then add it to the dictionary and add 1 to count \n        else:\n            d[str1[i]] = 1\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letter_dict = {}\n    count_letters = 0\n    \n    for letter in str1:\n        if letter.lower() not in letter_dict.keys():\n            letter_dict[letter.lower()] = 1\n        else:\n            letter_dict[letter.lower()] += 1\n            \n    for letter, count in letter_dict.items():\n        if count == 1:\n            count_letters += 1\n    return count_letters\n    \nif __name__ == '__main__':\n    str1 = 'In the end, it\\'s the same as a game of chance.'\n    print(count_char_position(str1))"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    '''\n    Accepts a string as an argument and counts the number of characters in the string that occur in the same position in the English alphabet.\n    '''\n    '''\n    Input: \"GeeksForGeeks\"\n    Output: 5\n    Explanation: \n    Geeks and Keeks occur in the same position.\n    '''\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    i=0\n    while i<len(str1):\n        if str1[i]==str1[i].upper():\n            count+=1\n        i+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    count2 = 0\n    count3 = 0\n    count4 = 0\n    count5 = 0\n    count6 = 0\n    count7 = 0\n    count8 = 0\n    count9 = 0\n    count10 = 0\n    count11 = 0\n    count12 = 0\n    count13 = 0\n    count14 = 0\n    count15 = 0\n    count16 = 0\n    count17 = 0\n    count18 = 0\n    count19 = 0\n    count20 = 0\n    count21 = 0\n    count22 = 0\n    count23 = 0\n    count24 = 0\n    count25 = 0\n    count26 = 0\n    count27 = 0\n    count28 = 0\n    count29 = 0\n    count30 = 0\n    count31 = 0\n    count32 = 0\n    count33 = 0\n    count34 = 0\n    count35 = 0\n    count36 = 0\n    count37 = 0\n    count38 = 0\n    count39 = 0\n    count40 = 0\n    count41 = 0\n    count42 = 0\n    count43 = 0\n    count44 = 0\n    count45 = 0\n    count46 = 0\n    count47 = 0\n    count48 = 0\n    count49 = 0\n    count50 = 0\n    count51 = 0\n    count52 = 0\n    count53 = 0\n    count54 = 0\n    count55 = 0\n    count56 = 0\n    count57 = 0\n    count58 = 0\n    count59 = 0\n    count60 = 0\n    count61 = 0\n    count62 = 0\n    count63 = 0\n    count64 = 0\n    count65 = 0\n    count66 = 0\n    count67 = 0\n    count68 = 0\n    count69 = 0\n    count70 = 0\n    count71 = 0\n    count72 = 0\n    count73 = 0\n    count74 = 0\n    count75 = 0\n    count76 = 0\n    count77 = 0\n    count78 = 0\n    count79 = 0\n    count80 = 0\n    count81 = 0\n    count82 = 0\n    count83 = 0\n    count84 = 0\n    count85 = 0\n    count86 = 0\n    count87 = 0\n    count88 = 0\n    count89 = 0\n    count90 = 0\n    count91 = 0\n    count92 = 0\n    count93 = 0\n    count94 = 0\n    count95 = 0\n    count96 = 0\n    count97 = 0\n    count98 = 0\n    count99 = 0\n    count100 = 0\n    count101 = 0\n    count102 = 0\n    count103 = 0\n    count104 = 0\n    count105 = 0\n    count106 = 0\n    count107 = 0\n    count108 = 0\n    count109 = 0\n    count110 = 0\n    count111 = 0\n    count112 = 0\n    count113 = 0\n    count114 = 0\n    count115 = 0\n    count116 = 0\n    count117 = 0\n    count118 = 0\n    count119 = 0\n    count120 = 0\n    count121 = 0\n    count122 = 0\n    count123 = 0\n    count124 = 0\n    count125 = 0\n    count126 = 0\n    count127 = 0\n    count128 = 0\n    count129 = 0\n    count130 = 0\n    count131 = 0\n    count132 = 0\n    count133 = 0\n    count134 = 0\n    count135 = 0\n    count136 = 0\n    count137 = 0\n    count138 = 0\n    count139 = 0\n    count140 = 0\n    count141 = 0\n    count142 = 0\n    count143 = 0\n    count144 = 0\n    count145 = 0\n    count146 = 0\n    count147 = 0\n    count148 = 0\n    count149 = 0\n    count150 = 0\n    count151 = 0\n    count152 = 0\n    count153 = 0\n    count154 = 0\n    count155 = 0\n    count156 = 0\n    count157 = 0\n    count158 = 0\n    count159 = 0\n    count160 = 0\n    count161 = 0\n    count162 = 0\n    count163 = 0\n    count164 = 0\n    count165 = 0\n    count166 = 0\n    count167 = 0\n    count168 = 0\n    count169 = 0\n    count170 = 0\n    count171 = 0\n    count172 = 0\n    count173 = 0\n    count174 = 0\n    count175 = 0\n    count176 = 0\n    count177 = 0\n    count178 = 0\n    count179 = 0\n    count180 = 0\n    count181 = 0\n    count182 = 0\n    count183 = 0\n    count184 = 0\n    count185 = 0\n    count186 = 0\n    count187 = 0\n    count188 = 0\n    count189 = 0\n    count190 = 0\n    count191 = 0\n    count192 = 0\n    count193 = 0\n    count194 = 0\n    count195 = 0\n    count196 = 0\n    count197 = 0\n    count198 = 0\n    count199 = 0\n    count200 = 0\n    count201 = 0\n    count202 = 0\n    count203 = 0\n    count204 = 0\n    count205 = 0\n    count206 = 0\n    count207 = 0\n    count208 = 0\n    count209 = 0\n    count210 = 0\n    count211 = 0\n    count212 = 0\n    count213 = 0\n    count214 = 0\n    count215 = 0\n    count216 = 0\n    count217 = 0\n    count218 = 0\n    count219 = 0\n    count220 = 0\n    count221 = 0\n    count222 = 0\n    count223 = 0\n    count224 = 0\n    count225 = 0\n    count226 = 0\n    count227 = 0\n    count228 = 0\n    count229 = 0\n    count230 = 0\n    count231 = 0\n    count232 = 0\n    count233 = 0\n    count234 = 0\n    count235 = 0\n    count236 = 0\n    count237 = 0\n    count238 = 0\n    count239 = 0\n    count240 = 0\n    count241 = 0\n    count242 = 0\n    count243 = 0\n    count244 = 0\n    count245 = 0\n    count246 = 0\n    count247 = 0\n    count248 = 0\n    count249 = 0\n    count250 = 0\n    count251 = 0\n    count252 = 0\n    count253 = 0\n    count254 = 0\n    count255 = 0\n    count256 = 0\n    count257 = 0\n    count258 = 0\n    count259 = 0\n    count260 = 0\n    count261 = 0\n    count262 = 0\n    count263 = 0\n    count264 = 0\n    count265 = 0\n    count266 = 0\n    count267 = 0\n    count268 = 0\n    count269 = 0\n    count270 = 0\n    count271 = 0\n    count272 = 0\n    count273 = 0\n    count274 = 0\n    count275 = 0\n    count276 = 0\n    count277 = 0\n    count278 = 0\n    count279 = 0\n    count280 = 0\n    count281 = 0\n    count282 = 0\n    count283 = 0\n    count284 = 0\n    count285 = 0\n    count286 = 0\n    count287 = 0\n    count288 = 0\n    count289 = 0\n    count290 = 0\n    count291 = 0\n    count292 = 0\n    count293 = 0\n    count294 = 0\n    count295 = 0\n    count296 = 0\n    count297 = 0\n    count298 = 0\n    count299 = 0\n    count300 = 0\n    count301 = 0\n    count302 = 0\n    count303 = 0\n    count304 = 0\n    count305 = 0\n    count306 = 0\n    count307 = 0\n    count308 = 0\n    count309 = 0\n    count310 = 0\n    count311 = 0\n    count312 = 0\n    count313 = 0\n    count314 = 0\n    count315 = 0\n    count316 = 0\n    count317 = 0\n    count318 = 0\n    count319 = 0\n    count320 = 0\n    count321 = 0\n    count322 = 0\n    count323 = 0\n    count324 = 0\n    count325 = 0\n    count326 = 0\n    count327 = 0\n    count328 = 0\n    count329 = 0\n    count330 = 0\n    count331 = 0\n    count332 = 0\n    count333 = "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    d = dict() \n    for i in str1.lower(): \n        if i in d: \n            d[i] += 1\n        else: \n            d[i] = 1\n    return sum(d.values())\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Write your count_char_position function here\n    char_pos = {}\n    for i in range(len(str1)):\n        if char_pos.get(str1[i]):\n            char_pos[str1[i]] += 1\n        else:\n            char_pos[str1[i]] = 1\n    return char_pos\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {}\n    for i in range(ord('a'), ord('z')):\n        char_dict[chr(i)] = i\n    pos_count = 0\n    for i in range(len(str1)):\n        if str1[i] in char_dict.keys():\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    l = len(A)\n    l1 = list()\n    count = 0\n    for i in range(0, l):\n        x = A[i] ^ A[i+1]\n        l1.append(x)\n    \n    for i in range(0, l):\n        for j in range(i+1, l):\n            if l1[i] ^ l1[j] == 0:\n                count = count + 1\n                \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if A[i]!= A[j] and A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #return len([a for a in A if xor(a,2)==0])\n    evens = 0\n    for a in A:\n        if xor(a,2) == 0:\n            evens += 1\n    return evens\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if xor(A[i], A[j]) % 2 == 0:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    dict_A = dict()\n    n = len(A)\n    for i in range(n):\n        if A[i] not in dict_A:\n            dict_A[A[i]] = 1\n        else:\n            dict_A[A[i]] += 1\n    count = 0\n    for i in dict_A.values():\n        if i % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_sum = 0\n    \n    for x in A:\n        #Check whether the element at the index is even\n        if x % 2 == 0:\n            even_sum += 1\n    \n    return even_sum\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    x = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                x += 1\n    return x\n    \n    \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_number = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_number += 1\n    return even_number\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Solution\n    # for each element in the list:\n        # add 1 to count\n        # if xor of 1 and 2 is even, add 1 to count\n    # return count\n    \n    # using Counter\n    count = 0\n    \n    for x in A:\n        if xor(x, 2) % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    max_power = 0\n    for i in range(1,n):\n        if(i*i>n):\n            max_power = i\n            break\n        else:\n            max_power = max(max_power,i)\n    return max_power\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while True:\n        if (2**i) > n:\n            return (2**i)\n        i = i + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    i = 0\n    while(2**i < n):\n        i += 1\n    return 2**i\n    \n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    \n    if (n > 1):\n        for i in range(2, n):\n            if (n % i == 0):\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = n\n    while x!= 0:\n        x = x >> 1\n    return x + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x=1\n    while x<n:\n        x*=2\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # lower_limit = 2**(n.bit_length())-1\n    # upper_limit = 2**(n.bit_length()+1)-1\n    # print(\"lower_limit:\",lower_limit)\n    # print(\"upper_limit:\",upper_limit)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    def next_power_of_2_rec(n, n_2=1): \n        if n_2 == 1: \n            return n\n        return next_power_of_2_rec(n, n_2 << 1)\n    return next_power_of_2_rec(n)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n >= 1:\n        return 1 << (n - 1).bit_length()\n    else:\n        return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    assert n > 0, \"n should be a positive integer.\"\n    if n <= 1:\n        return 1\n    while n!= 1:\n        n >>= 1\n        if n == 0:\n            return 1\n    return 2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n >= 1: \n        n = n >> 1\n    return n + 1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    l=list()\n    f=0\n    for i in range(len(a)):\n        if a[i]==x:\n            f=f+1\n    l.append(f)\n    return l\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            c = c+1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    \ndef swap(a,i,j):\n    '''\n    Write a function to swap the two elements at index i and j in a given list.\n    '''\n    \n    temp = a[i]\n    a[i] = a[j]\n    a[j] = temp\n    \ndef first_unique(a,x):\n    '''\n    Write a function to find the first occurrence of a given element in a given list.\n    '''\n    \n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n            \n    return -1\n    \ndef unique(a):\n    '''\n    Write a function to find the number of unique elements in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] not in a[i+1:]:\n            count += 1\n    return count\n    \ndef sequence(a):\n    '''\n    Write a function to find the first repeated number in a given list.\n    '''\n    \n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] == a[j]:\n                return a[i]\n                \n    return -1\n    \ndef rotate(a):\n    '''\n    Write a function to rotate a given list by k elements.\n    '''\n    \n    k = len(a)\n    i = 0\n    j = k - 1\n    \n    while j > i:\n        temp = a[i]\n        a[i] = a[j]\n        a[j] = temp\n        i += 1\n        j -= 1\n    \ndef add_to_right(a,b):\n    '''\n    Write a function to add the two numbers in a given list.\n    '''\n    \n    a = a + b\n    \ndef remove_from_right(a):\n    '''\n    Write a function to remove the first element of a list.\n    '''\n    \n    a.pop(0)\n    \ndef insert(a,x,i):\n    '''\n    Write a function to insert a new element in a given position in a given list.\n    '''\n    \n    a.insert(i,x)\n    \ndef append_list_to_list(a,b):\n    '''\n    Write a function to append the elements of a list to another list.\n    '''\n    \n    for i in range(len(a)):\n        a.append(a[i])\n        \ndef reverse_list(a):\n    '''\n    Write a function to reverse a list.\n    '''\n    \n    a.reverse()\n    \ndef is_palindrome(a):\n    '''\n    Write a function to check if a given list is a palindrome or not.\n    '''\n    \n    temp = a.copy()\n    temp.reverse()\n    \n    if temp == a:\n        return True\n    \n    return False\n    \ndef remove_duplicates(a):\n    '''\n    Write a function to remove all duplicate elements from a given list.\n    '''\n    \n    a = list(set(a))\n    \ndef move_to_end(a,i):\n    '''\n    Write a function to move the element at index i to the end of a given list.\n    '''\n    \n    a.append(a.pop(i))\n    \ndef print_list(a):\n    '''\n    Write a function to print a list.\n    '''\n    \n    print(a)\n    \ndef min_number(a):\n    '''\n    Write a function to find the minimum value in a given list.\n    '''\n    \n    min = a[0]\n    for i in range(len(a)):\n        if a[i] < min:\n            min = a[i]\n    \n    return min\n    \ndef max_number(a):\n    '''\n    Write a function to find the maximum value in a given list.\n    '''\n    \n    max = a[0]\n    for i in range(len(a)):\n        if a[i] > max:\n            max = a[i]\n    \n    return max\n    \ndef sort_list(a):\n    '''\n    Write a function to sort the elements of a given list.\n    '''\n    \n    a.sort()\n    \ndef average(a):\n    '''\n    Write a function to find the average of all the elements in a given list.\n    '''\n    \n    total = 0\n    \n    for i in range(len(a)):\n        total += a[i]\n        \n    return total/len(a)\n    \ndef merge_sort(a):\n    '''\n    Write a function to sort a given list using the merge sort algorithm.\n    '''\n    \n    if len(a) == 1:\n        return a\n    \n    mid = int(len(a)/2)\n    left = merge_sort(a[:mid])\n    right = merge_sort(a[mid:])\n    \n    return merge(left,right)\n    \ndef merge(a,b):\n    '''\n    Write a function to merge two sorted lists.\n    '''\n    \n    c = []\n    i = 0\n    j = 0\n    \n    while (i < len(a)) and (j < len(b)):\n        if a[i] < b[j]:\n            c.append(a[i])\n            i += 1\n        else:\n            c.append(b[j])\n            j += 1\n    \n    while i < len(a):\n        c.append(a[i])\n        i += 1\n        \n    while j < len(b):\n        c.append(b[j])\n        j += 1\n        \n    return c\n    \ndef palindrome(a):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    \n    if a == a[::-1]:\n        return True\n    \n    return False\n    \ndef count_vowels(a):\n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    \n    vowels = ['a','e','i','o','u']\n    count = 0\n    \n    for i in range(len(a)):\n        if a[i] in vowels:\n            count += 1\n    \n    return count\n    \ndef count_digits(a):\n    '''\n    Write a function to count the number of digits in a given string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(a)):\n        if a[i].isdigit():\n            count += 1\n            \n    return count\n    \ndef count_words(a):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(a)):\n        if a[i].isalpha():\n            count += 1\n            \n    return count\n    \ndef count_letters(a):\n    '''\n    Write a function to count the number of letters in a given string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(a)):\n        if a[i].isalpha():\n            count += 1\n            \n    return count\n    \ndef count_special(a):\n    '''\n    Write a function to count the number of special characters in a given string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(a)):\n        if a[i] == '!':\n            count += 1\n        elif a[i] == '#':\n            count += 1\n        elif a[i] == '$':\n            count += 1\n        elif a[i] == '%':\n            count += 1\n        elif a[i] == '^':\n            count += 1\n        elif a[i] == '&':\n            count += 1\n        elif a[i] == '*':\n            count += 1\n        elif a[i] == '"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    print(\"The frequency of {} is {}.\".format(x,count))\ndef swap(a,i,j):\n    '''\n    Write a function to swap two elements in a list.\n    '''\n    a[i],a[j] = a[j],a[i]\n    return a\ndef reverse_list(a,start,end):\n    '''\n    Write a function to reverse a list of elements.\n    '''\n    while start < end:\n        a[start],a[end] = a[end],a[start]\n        start += 1\n        end -= 1\n    print(\"The reverse of the given list is {}\".format(a))\ndef reverse_list2(a):\n    '''\n    Write a function to reverse a list of elements.\n    '''\n    left = 0\n    right = len(a)-1\n    while right > left:\n        a[left],a[right] = a[right],a[left]\n        left += 1\n        right -= 1\n    print(\"The reversed list is {}\".format(a))\ndef filter_list(a,check):\n    '''\n    Write a function to filter the list of elements for those elements divisible by 2.\n    '''\n    print(\"The list is {}\".format(a))\n    new_list = []\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            new_list.append(a[i])\n    print(\"The filtered list is {}\".format(new_list))\ndef check_prime(a):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    count = 0\n    for i in range(2,a):\n        if a % i == 0:\n            count += 1\n    if count == 0:\n        print(\"{} is a prime number\".format(a))\n    else:\n        print(\"{} is not a prime number\".format(a))\ndef count_items(a,i,j):\n    '''\n    Write a function to count the number of items in a given range.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] in range(i,j+1):\n            count += 1\n    print(\"The number of items in the range {} to {} is {}\".format(i,j,count))\ndef sort_string(a):\n    '''\n    Write a function to sort the string.\n    '''\n    for i in range(len(a)):\n        min = i\n        for j in range(i+1,len(a)):\n            if a[j] < a[min]:\n                min = j\n        a[i],a[min] = a[min],a[i]\n    print(\"The sorted string is {}\".format(a))\ndef delete_item(a):\n    '''\n    Write a function to delete an item from a list.\n    '''\n    item = input(\"Enter the item you want to delete : \")\n    a.remove(item)\n    print(\"The item {} is deleted from the list\".format(item))\ndef copy_list(a):\n    '''\n    Write a function to copy a list.\n    '''\n    b = []\n    for i in a:\n        b.append(i)\n    print(\"The copied list is {}\".format(b))\ndef check_duplicate(a):\n    '''\n    Write a function to check if a given list contains any duplicate elements.\n    '''\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] == a[j]:\n                print(\"{} and {} are duplicate\".format(a[i],a[j]))\n                return True\n    print(\"There are no duplicate element in the list\")\n    return False\ndef merge_sorted_list(a,b):\n    '''\n    Write a function to merge two lists in a single sorted list.\n    '''\n    for i in range(len(b)):\n        for j in range(len(a)):\n            if b[i] < a[j]:\n                a.insert(j,b[i])\n                break\n    return a\ndef merge_sorted_list2(a,b):\n    '''\n    Write a function to merge two sorted lists in a single sorted list.\n    '''\n    i = 0\n    j = 0\n    new_list = []\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            new_list.append(a[i])\n            i += 1\n        else:\n            new_list.append(b[j])\n            j += 1\n    while i < len(a):\n        new_list.append(a[i])\n        i += 1\n    while j < len(b):\n        new_list.append(b[j])\n        j += 1\n    return new_list\ndef sort_list(a):\n    '''\n    Write a function to sort a list of numbers.\n    '''\n    for i in range(len(a)):\n        min = i\n        for j in range(i+1,len(a)):\n            if a[j] < a[min]:\n                min = j\n        a[i],a[min] = a[min],a[i]\n    print(\"The sorted list is {}\".format(a))\ndef print_in_order(a):\n    '''\n    Write a function to print a list in ascending order.\n    '''\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if a[i] > a[j]:\n                a[i],a[j] = a[j],a[i]\n    print(\"The list in ascending order is {}\".format(a))\ndef print_in_order_reverse(a):\n    '''\n    Write a function to print a list in descending order.\n    '''\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if a[i] < a[j]:\n                a[i],a[j] = a[j],a[i]\n    print(\"The list in descending order is {}\".format(a))\ndef palindrome(a):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i]!= a[n-i-1]:\n            return False\n    return True\ndef print_name(a,b):\n    '''\n    Write a function to print two given strings in one line.\n    '''\n    print(\"{} and {}\".format(a,b))\ndef is_palindrome(a):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    s = \"\"\n    for i in range(len(a)):\n        s = s + a[i]\n    return s == s[::-1]\ndef print_even(a):\n    '''\n    Write a function to print all even numbers in a list.\n    '''\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            print(a[i])\ndef swap_last_two_list(a,b):\n    '''\n    Write a function to swap last two elements in a list.\n    '''\n    a[-1],a[-2] = a[-2],a[-1]\n    print(\"The list is {}\".format(a))\ndef get_second_highest(a):\n    '''\n    Write a function to get the second highest number in a list.\n    '''\n    new_list = []\n    for i in range(len(a)):\n        if a[i] not in new_list:\n            new_list.append(a[i])\n    new_list.sort(reverse = True)\n    return new_list[1]\ndef remove_duplicates(a):\n    '''\n    Write a function to remove all duplicates from a list.\n    '''\n    b = []\n    for i in rang"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i==x:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter = 0\n    for i in a:\n        if i == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1) or n > len(list1):\n        raise ValueError(\"Invalid indices\")\n    else:\n        return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for num in list1:\n        if m <= num <= n:\n            sum += num\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for x in range(m, n + 1):\n        result += list1[x]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) == 0:\n        return 0\n    start_index = 0\n    end_index = len(list1)-1\n    while start_index <= end_index:\n        if m <= start_index and end_index <= n:\n            return sum_range_list(list1, start_index + 1, end_index) + list1[start_index]\n        if m > start_index and n > end_index:\n            return sum_range_list(list1, start_index + 1, end_index)\n        if m > end_index:\n            start_index += 1\n            end_index = start_index + 1\n            continue\n        if n < m:\n            end_index -= 1\n            continue\n        if m < m:\n            start_index += 1\n            continue\n        if n > n:\n            end_index -= 1\n            continue\n        return list1[m-1] + list1[n-1]\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # your code here\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Your code goes here\n    res = 0\n    for i in range(m, n):\n        res += list1[i]\n    return res\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((5*(a**2)-math.sqrt(3)*a)*(4*a-3))/2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #determine the value of the perimeter\n    p = 5 * (a * (a - 1))/4\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    area = (5 * math.sqrt(5) ) / 4\n    s = math.sqrt(area)\n    print(round(s, 2))\n    return round(s, 2)\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * 3) ** 2\n    \ndef number_of_sides(a):\n    '''\n    Write a function to find the number of sides of a regular pentagon from the length of its sides.\n    '''\n    return (5 * a) + 1\n    \ndef area_of_regular_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(a ** 2 * (1 / 5))\n    \ndef find_triangle_perimeter(side_1, side_2, side_3):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return (side_1 + side_2 + side_3)\n    \ndef find_triangle_area(side_1, side_2, side_3):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    return 0.5 * (side_1 * side_2)\n    \ndef find_square_perimeter(side):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return side * 4\n    \ndef find_square_area(side):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return side ** 2\n    \ndef find_circle_perimeter(radius):\n    '''\n    Write a function to find the perimeter of a circle from the radius.\n    '''\n    return radius * 2 * math.pi\n    \ndef find_circle_area(radius):\n    '''\n    Write a function to find the area of a circle from the radius.\n    '''\n    return math.pi * radius ** 2\n    \ndef find_rectangle_perimeter(width, length):\n    '''\n    Write a function to find the perimeter of a rectangle from the width and length.\n    '''\n    return 2 * (width + length)\n    \ndef find_rectangle_area(width, length):\n    '''\n    Write a function to find the area of a rectangle from the width and length.\n    '''\n    return width * length\n    \ndef find_square_perimeter(side):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return side * 4\n    \ndef find_square_area(side):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return side ** 2\n    \ndef find_rectangle_perimeter(width, length):\n    '''\n    Write a function to find the perimeter of a rectangle from the width and length.\n    '''\n    return 2 * (width + length)\n    \ndef find_rectangle_area(width, length):\n    '''\n    Write a function to find the area of a rectangle from the width and length.\n    '''\n    return width * length\n    \ndef find_rhombus_perimeter(length, width):\n    '''\n    Write a function to find the perimeter of a rhombus from the length and width.\n    '''\n    return 2 * (length + width)\n    \ndef find_rhombus_area(length, width):\n    '''\n    Write a function to find the area of a rhombus from the length and width.\n    '''\n    return 0.5 * length * width\n    \ndef find_square_perimeter(side):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return side * 4\n    \ndef find_square_area(side):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return side ** 2\n    \ndef find_triangle_perimeter(side_1, side_2, side_3):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return side_1 + side_2 + side_3\n    \ndef find_triangle_area(side_1, side_2, side_3):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    return (side_1 * side_2) / 2\n    \ndef find_circle_perimeter(radius):\n    '''\n    Write a function to find the perimeter of a circle from the radius.\n    '''\n    return 2 * math.pi * radius\n    \ndef find_circle_area(radius):\n    '''\n    Write a function to find the area of a circle from the radius.\n    '''\n    return math.pi * radius ** 2\n    \ndef find_square_perimeter(side):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return side * 4\n    \ndef find_square_area(side):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return side ** 2\n    \ndef find_triangle_perimeter(side_1, side_2, side_3):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return side_1 + side_2 + side_3\n    \ndef find_triangle_area(side_1, side_2, side_3):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    return (side_1 * side_2) / 2\n    \ndef find_circle_perimeter(radius):\n    '''\n    Write a function to find the perimeter of a circle from the radius.\n    '''\n    return 2 * math.pi * radius\n    \ndef find_circle_area(radius):\n    '''\n    Write a function to find the area of a circle from the radius.\n    '''\n    return math.pi * radius ** 2\n    \ndef find_square_perimeter(side):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return side * 4\n    \ndef find_square_area(side):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return side ** 2\n    \ndef find_triangle_perimeter(side_1, side_2, side_3):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return side_1 + side_2 + side_3\n    \ndef find_triangle_area(side_1, side_2, side_3):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    return (side_1 * side_2) / 2\n    \ndef find_circle_perimeter(radius):\n    '''\n    Write a function to find the perimeter of a circle from the radius.\n    '''\n    return 2 * math.pi * radius\n    \ndef find_circle_area(radius):\n    '''\n    Write a function to find the area of a circle from the radius.\n    '''\n    return math.pi * radius ** 2\n    \ndef find_square_perimeter(side):\n    '''\n    Write a function to find the perimeter of a square from the length of its sides.\n    '''\n    return side * 4\n    \ndef find_square_area(side):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return side ** 2\n    \ndef find_triangle_perimeter(side_1, side_2, side_3):\n    '''\n    Write a function to find the perimeter of a triangle from the length of its sides.\n    '''\n    return side_1 + side_2 + side_3\n    \ndef find_triangle_area(side_1, side_2, side_3):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    return (side_1 * side_2) / 2\n    \ndef find_circle_pe"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #assert isinstance(a, int), 'a must be an integer'\n    #assert a > 0, 'a must be a number greater than 0'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + (5 - a) * 4 * math.sqrt(5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * 5) * math.sqrt(5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 3*a\n    return p\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = \"\".join(s.split())\n    cnt = s.count(\"std\")\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if type(s)!= str:\n        raise TypeError\n    else:\n        n = 0\n        for i in range(len(s)-len(s)+1):\n            if s[i:i+len(s)] =='std':\n                n += 1\n        return n\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # s = 'xpto'\n    # s = 'xpto is the best place to learn and practice coding'\n    occ_count = s.count('std')\n    print(occ_count)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    return s.count('std')\n    \n    \n    \n    \n    \ndef find_occurance(s, substring):\n    '''\n    Write a function to find the position of a substring in a string.\n    Return -1 if substring not found.\n    '''\n    \n    for i in range(len(s)):\n        if substring == s[i:i+len(substring)]:\n            return i\n    return -1\n    \n    \n    \n    \n    \ndef reverse_sub(s, start, end):\n    '''\n    Write a function to revers the string.\n    '''\n    \n    s = list(s)\n    new_s = list()\n    \n    if start <= end:\n        for i in range(end-start+1):\n            new_s.append(s[start+i])\n        return ''.join(new_s)\n    else:\n        for i in range(len(s)-start-1):\n            new_s.append(s[start+i])\n        return ''.join(new_s)\n    \n    \n    \n    \n    \ndef two_sum(nums, target):\n    '''\n    Write a function to find all the numbers that sum up to a specific target.\n    '''\n    \n    nums = set(nums)\n    \n    for num in nums:\n        if (target - num) in nums:\n            return (target - num)\n    \n    return []\n    \n    \n    \n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to determine if two strings are anagrams.\n    '''\n    \n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    \n    if len(s1) == len(s2):\n        return sorted(s1) == sorted(s2)\n    else:\n        return False\n    \n    \n    \n    \n    \ndef sum_array(arr):\n    '''\n    Write a function to determine the sum of an array.\n    '''\n    \n    if not arr:\n        return 0\n    else:\n        return sum(arr)\n    \n    \n    \n    \n    \ndef fizz_buzz(n):\n    '''\n    Write a function to determine if a number is divisible by both 3 and 5.\n    '''\n    \n    if n % 3 == 0 and n % 5 == 0:\n        return 'Fizz Buzz'\n    elif n % 3 == 0:\n        return 'Fizz'\n    elif n % 5 == 0:\n        return 'Buzz'\n    else:\n        return n\n    \n    \n    \n    \n    \ndef insertion_sort(arr):\n    '''\n    Write a function to sort an array of strings by the length of their longest one.\n    '''\n    \n    if not arr:\n        return arr\n    \n    for i in range(1,len(arr)):\n        j = i\n        while j > 0 and len(arr[j-1]) < len(arr[j]):\n            swap(arr, j-1, j)\n            j -= 1\n    \n    return arr\n    \n    \n    \n    \n    \ndef swap(arr, x, y):\n    arr[x], arr[y] = arr[y], arr[x]\n    \n    \n    \n    \n    \ndef min_max(arr):\n    '''\n    Write a function to find minimum and maximum value in an array of integers.\n    '''\n    \n    if not arr:\n        return []\n    else:\n        return [min(arr), max(arr)]\n    \n    \n    \n    \n    \ndef reverse(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    \n    if not s:\n        return s\n    else:\n        return s[::-1]\n    \n    \n    \n    \n    \ndef is_balanced(s):\n    '''\n    Write a function to check if a string is balanced or not.\n    '''\n    \n    open_bracket = set(['(','{','['])\n    close_bracket = set([')','}',']')\n    \n    open_list = []\n    \n    for i in s:\n        if i in open_bracket:\n            open_list.append(i)\n        elif i in close_bracket:\n            pos = close_bracket.index(i)\n            if len(open_list) > 0 and open_bracket[pos] == open_list[len(open_list)-1]:\n                open_list.pop()\n            else:\n                return False\n    if len(open_list) == 0:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \ndef make_list(arr):\n    '''\n    Write a function to convert a single list into a list of lists.\n    '''\n    \n    if not arr:\n        return []\n    else:\n        return [[arr[i]] for i in range(len(arr))]\n    \n    \n    \n    \n    \ndef is_balanced(s):\n    '''\n    Write a function to check if a string is balanced or not.\n    '''\n    \n    open_bracket = set(['(','{','['])\n    close_bracket = set([')','}',']')\n    \n    open_list = []\n    \n    for i in s:\n        if i in open_bracket:\n            open_list.append(i)\n        elif i in close_bracket:\n            pos = close_bracket.index(i)\n            if len(open_list) > 0 and open_bracket[pos] == open_list[len(open_list)-1]:\n                open_list.pop()\n            else:\n                return False\n    if len(open_list) == 0:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \ndef solution(arr1, arr2):\n    '''\n    Write a function to determine the sum of two integer arrays.\n    '''\n    \n    result = list()\n    \n    if len(arr1) == 0 or len(arr2) == 0:\n        return []\n    else:\n        for i in range(len(arr1)):\n            result.append(arr1[i]+arr2[i])\n    return result\n    \n    \n    \n    \n    \ndef merge_the_tools(string, k):\n    '''\n    Write a function that takes a string and a number k, and rearranges the letters in the string so that each\n    letter appears every kth time.\n    '''\n    \n    if not string:\n        return ''\n    else:\n        string = list(string)\n        for i in range(len(string)):\n            string[i] = list(string[i])\n        \n        new_string = list()\n        \n        for i in range(len(string)):\n            new_string.extend(string[i])\n        \n        \n        \n        \n        \n        \n        \n        \n        \ndef reverse_each_word(string):\n    '''\n    Write a function to reverse the words in a given string.\n    '''\n    \n    if not string:\n        return ''\n    else:\n        string = list(string)\n        new_string = list()\n        for i in range(len(string)):\n            if string[i] =='':\n                new_string.append(' ')\n            else:\n                new_string.append(string[i])\n        new_string.reverse()\n        return ''.join(new_string)\n    \n    \n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    \n    s = s.replace(' ','')\n    return s == s[::-1]\n    \n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    \n    s = s.replace(' ','')\n    return s == s[::-1]\n    \n    \n    \n    \n    \ndef longest_word(arr):\n    '''\n    Write a function to find the longest word in a sentence."
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-len(std)):\n        if s[i:i+len(std)] == std:\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s_occurrence = 0\n    for i in range(0, len(s)):\n        if(s[i:i+len('std')] =='std'):\n            s_occurrence += 1\n    return s_occurrence\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == 'a' and s[i+1] == 'd':\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    elif len(test_tuple) == 1:\n        return True\n    else:\n        return type(test_tuple[0]) == type(test_tuple[1])\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"-\"*80)\n    print(test_tuple)\n    print(\"-\"*80)\n    for i in test_tuple:\n        if not(isinstance(i,type(test_tuple[0]))):\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    temp = []\n    for ele in test_tuple:\n        if type(ele) is int or type(ele) is float or type(ele) is complex or type(ele) is bool:\n            temp.append(True)\n        else:\n            temp.append(False)\n    if all(temp):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if(test_tuple is None):\n        print(\"\\nTest case failed. Please try again\")\n        return\n    if(len(test_tuple) == 0):\n        print(\"\\nTest case failed. Please try again\")\n        return\n    if(len(test_tuple) == 1):\n        print(\"\\nTest case failed. Please try again\")\n        return\n    for i in range(len(test_tuple)):\n        if(isinstance(test_tuple[i], list)):\n            for j in range(len(test_tuple[i])):\n                if(isinstance(test_tuple[i][j], str)):\n                    continue\n                else:\n                    print(\"\\nTest case failed. Please try again\")\n                    return\n        elif(isinstance(test_tuple[i], str)):\n            continue\n        else:\n            print(\"\\nTest case failed. Please try again\")\n            return\n    print(\"\\nTest case passed\")\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    if all(isinstance(x,type(test_tuple[0])) for x in test_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    assert(type(test_tuple) == tuple)\n    assert(type(test_tuple[0]) == int)\n    assert(type(test_tuple[1]) == int)\n    assert(type(test_tuple[2]) == int)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 2:\n        if test_tuple[0] == test_tuple[1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all([type(i)==type(test_tuple[0]) for i in test_tuple]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i],(int,float,complex,bool,str)):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    if len(test_tuple)!= len(set(test_tuple)):\n        return False\n    \n    for val in test_tuple:\n        if type(val)!= type(test_tuple[0]):\n            return False\n        \n    return True\n    \ndef check_type_and_value(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    if len(test_tuple)!= len(set(test_tuple)):\n        return False\n    \n    for val in test_tuple:\n        if type(val)!= type(test_tuple[0]) or val!= test_tuple[0]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n-1\n    while i<=j:\n        mid = i + (j-i)//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            j = mid-1\n        else:\n            i = mid+1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    majority_count = 0\n    x = arr[len(arr)-1]\n    #print(arr)\n    for i in range(0,n):\n        if(arr[i] == x):\n            majority_count += 1\n    if(majority_count > (n/2)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n - 1\n    \n    while i <= j:\n        mid = i + (j - i) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    \n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > (n/2)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n-1\n    while(i < j):\n        mid = (i+j)//2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return True\n            else:\n                return False\n        else:\n            if arr[mid] < x:\n                i = mid+1\n            else:\n                j = mid-1\n    return False\n    \ndef test_is_majority():\n    print(\"Testing is_majority...\")\n    test_cases = [[1, 1, 2, 3, 5, 5, 5, 6, 7, 7, 7],\n                  [1, 1, 2, 3, 4, 5, 6, 7, 7],\n                  [1, 2, 3, 4, 5, 5, 6, 7, 7],\n                  [],\n                  [1, 1, 1, 1, 1],\n                  [1, 1, 1],\n                  [1, 2, 1],\n                  [1, 2, 3, 4, 5, 6, 7, 8, 9],\n                  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n                  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255],\n                  [1, 1, 1, 1, 1, 1],\n                  [1, 2, 1, 2, 1],\n                  [1, 2, 1, 2, 1, 1],\n                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return False\n    if arr[0] == x or arr[len(arr) - 1] == x:\n        return True\n    if arr[0] == x or arr[len(arr) - 1] == x:\n        return True\n    if arr[0]!= x and arr[len(arr) - 1]!= x:\n        return False\n    i = 1\n    c = 0\n    while i < len(arr):\n        if arr[i] == x:\n            c += 1\n        i += 1\n    if c >= n / 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr.count(x) > n // 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c += 1\n    if c > (n/2):\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == x:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            return True\n        elif count < 0:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > n//2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # code here\n    count = 0\n    while(n):\n        count += 1\n        n = n & (n-1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # code here\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return n.count('1') \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = n & (n - 1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return n.bit_length()\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return n & -n\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    binary_num = bin(n)[2:]\n    count = 0\n    for i in range(len(binary_num)):\n        if binary_num[i] == '1':\n            count += 1\n    return count\n    "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #c = 0\n    #while(n):\n    #    c = c + 1 if (n & 1) else c\n    #    n = n >> 1\n    c = 0\n    while n:\n        c += 1\n        n = (n - 1) & n\n    return c\n    \nif __name__ == '__main__':\n    num = 16\n    print(count_Set_Bits(num))\n    \n'''\nOutput:\n3\n'''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l = list(str)\n    l2 = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l2.append(l[i])\n    return ''.join(l2)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = list(str)\n    for i in range(len(str)):\n        if i%2!= 0:\n            lst.pop(i)\n    return \"\".join(lst)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l = len(str)\n    new_str = \"\"\n    for i in range(0,l):\n        if (i % 2 == 0):\n            new_str = new_str + str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for char in str:\n        if str.index(char) % 2 == 0:\n            result += char\n    print(result)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = input()\n    str = list(str)\n    for i in range(len(str)):\n        if i % 2!= 0:\n            str.pop(i)\n    str = ''.join(str)\n    return str\nodd_values_string('abcd')\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(char for i, char in enumerate(str) if i%2==0)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(filter(lambda x: x in str and x % 2 == 0, str))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    #Initializing and calling the function\n    \n    \n    #Initializing variables\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and calling the function\n    x = 0\n    str_new = ''\n    \n    #Iterating through the string\n    while x < len(str):\n        \n        #Incrementing the x variable\n        x = x + 2\n        \n        #Checking the character\n        if x % 2 == 0:\n            str_new = str_new + str[x-1]\n        else:\n            str_new = str_new + ''\n            \n    #Returning the string\n    return str_new\n    \n    \n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #Initializing and callin"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = list(str)\n    for i in range(len(str)):\n        if i % 2!= 0:\n            str[i] =''\n    print(''.join(str))\nodd_values_string(\"I love coding\")\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        elif c>a:\n            return c\n        else:\n            return a\n    elif b>a:\n        if b>c:\n            return b\n        elif c>b:\n            return c\n        else:\n            return b\n    else:\n        if c>b:\n            return c\n        elif b>c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c: \n        return a\n    elif b>a and b>c: \n        return b\n    else: \n        return c\n        \n    \nprint(min_of_three(4,5,6))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # check which is the smallest\n    if a<b and a<c: \n        smallest = a \n    elif b<a and b<c: \n        smallest = b \n    else: \n        smallest = c \n    return smallest \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif a<c<b:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\nprint(min_of_three(10,30,20)"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\nprint(\"\\n*****Min of Three*****\")\nprint(min_of_three(2,3,5))\nprint(min_of_three(1,2,3))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\nprint(min_of_three(10,2,2))\nprint(min_of_three(4,2,1))\nprint(min_of_three(3,2,3))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    return c\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        print(bin(i))\n        print(all_Bits_Set(i))\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    #Using bit operation to check the bits in the range\n    #e.g. for a bit 0 : 10=00000110  and for bit 0: 11=01010101  0&1 == 1\n    #and for bit 1: 00=00000100 and for bit 1: 01=01010101  0&2 == 2\n    #and for bit 2: 00=00001000 and for bit 2: 11=01101111  0&4 == 4\n    #and for bit 3: 00=00010000 and for bit 3: 11=00000100  0&8 == 8\n    \n    for i in range(l,r+1):\n        for j in range(0,n):\n            if i&(1<<j)==0:\n                return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res = 0\n    if n>1:\n        res = (res << (n-1)) | (1 << (l-1))\n        res = res & (1 << (r-1))\n    elif n==1:\n        res = (res << (n-1)) | (1 << (l-1))\n    print(\"Bits in the range {} are :\".format(l,r),bin(res))\n    return res\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(r>l):\n        sum=0\n        for i in range(l,r+1):\n            if i & (i-1) == 0:\n                sum=sum+1\n        if(sum==n):\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"Invalid input\")\n        "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    from collections import deque\n    lst = deque()\n    # print(lst)\n    if l <= n <= r:\n        while n > 0:\n            bit = n & -n\n            if bit:\n                lst.append(bit)\n            n >>= 1\n        if l == 0:\n            print(lst)\n        elif l > 0:\n            while lst:\n                if lst[0] == 0:\n                    return False\n                else:\n                    lst.popleft()\n            return True\n    else:\n        return 'Out of Range'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while r>=n:\n        r-=1\n    while l<=r:\n        if l&1:\n            return False\n        l>>=1\n        r>>=1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(n == 0):\n        return False\n    count = 0\n    while(l <= r):\n        if(n & l!= 0):\n            count = count + 1\n        l = l << 1\n    return count == n.bit_length()\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # # print(bin(n))\n    # # print(bin(l))\n    # # print(bin(r))\n    # # print(l<=r)\n    # # if(n&1):\n    # #     #print(1)\n    # #     return False\n    # # else:\n    # #     #print(0)\n    # #     return True\n    # if(l<=r):\n    #     if(n&1):\n    #         return False\n    #     else:\n    #         return True\n    if(n>>l)&1:\n        return False\n    if(n>>r)&1:\n        return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    while l <= r:\n        count += n & l\n        l = l >> 1\n    if count == r - l + 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count=0\n    while r>=l:\n        print(l,end=' ')\n        count=count+1\n        if r%2==0:\n            l=l+1\n        else:\n            l=l+2\n        r=r-1\n    print()\n    print(count)\ndef all_Bits_Unset_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count=0\n    while r>=l:\n        print(l,end=' ')\n        count=count+1\n        if r%2==1:\n            l=l+1\n        else:\n            l=l+2\n        r=r-1\n    print()\n    print(count)\ndef bit_By_Bit_Inversion(n): \n    '''\n    Write a python function to invert the bits in the given number\n    '''\n    count=0\n    n=bin(n)\n    l=len(n)-2\n    print(l,n[l])\n    for i in range(l):\n        count=count+1\n        if(n[i]=='1'):\n            n=n[:i]+'0'+n[i+1:]\n            if(n[i]=='0'):\n                break\n        else:\n            n=n[:i]+'1'+n[i+1:]\n            if(n[i]=='0'):\n                break\n    print(n)\n    print(count)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return sorted(arr, key=abs)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    a = []\n    b = []\n    for i in range(n):\n        if arr[i] > 0:\n            a.append(arr[i])\n            b.append(arr[i])\n        elif arr[i] < 0:\n            b.append(arr[i])\n            a.append(arr[i])\n        else:\n            a.append(arr[i])\n            b.append(arr[i])\n    c = []\n    for i in range(len(a)):\n        c.append(a[i])\n        c.append(b[i])\n    return c\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] < 0:\n                if arr[j] < 0:\n                    temp = arr[i]\n                    arr[i] = arr[j]\n                    arr[j] = temp\n                else:\n                    break\n            else:\n                break\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start = 0\n    end = n - 1\n    if end > 0:\n        while start < end:\n            if arr[start] > 0:\n                break\n            start += 1\n        while start < end:\n            if arr[end] < 0:\n                break\n            end -= 1\n        if arr[start] < 0 and arr[end] < 0:\n            arr.reverse()\n        if arr[start] < 0:\n            arr.insert(start, -arr[start])\n        if arr[end] < 0:\n            arr.insert(end, -arr[end])\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if arr == None:\n        return []\n    if n == 0:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize empty list\n    output_list = []\n    \n    # initialize counter\n    counter = 0\n    \n    # iterate over the array\n    for element in arr:\n        # if element is negative\n        if element < 0:\n            # append negative element\n            output_list.append(element)\n            \n        # else if element is positive\n        else:\n            # if counter is less than n\n            if counter < n:\n                # append positive element\n                output_list.append(element)\n                \n                # increase counter\n                counter += 1\n                \n            # else if counter is equal to n\n            else:\n                # append negative element\n                output_list.append(element)\n                \n                # decrease counter\n                counter -= 1\n                \n    # return re-arranged array\n    return output_list\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    if n == 0:\n        return\n    elif n > len(arr):\n        n = len(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # for i in range(n):\n    #     temp = arr[i]\n    #     for j in range(i, n):\n    #         if arr[j] <= 0:\n    #             arr[j] = temp\n    #         else:\n    #             continue\n    # return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # copy the array\n    arr_copy = arr.copy()\n    # sort\n    arr_copy.sort()\n    # get indexes\n    pos_index = 0\n    neg_index = n - 1\n    while neg_index < len(arr_copy) and arr_copy[neg_index] <= 0:\n        neg_index += 1\n    # swap\n    while pos_index < n:\n        arr_copy[pos_index], arr_copy[neg_index] = arr_copy[neg_index], arr_copy[pos_index]\n        pos_index += 1\n        neg_index += 1\n    # return copy\n    return arr_copy\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        # print(i)\n        if arr[i] < 0:\n            # print(f\"{i} is a negative index\")\n            temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n            i += 2\n        else:\n            i += 1\n    return arr\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char =='':\n            new_str += char\n        elif char!='':\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    # make sure the string is not empty\n    if len(str1) == 0:\n        return ''\n    # make sure the character is a string\n    if type(char) == str:\n        return str1.replace(\" \", char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",\"\")\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    print(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        if str1[i] =='':\n            lst.append(char)\n        else:\n            lst.append(str1[i])\n    return ''.join(lst)\nprint(replace_blank('hello', 'x'))\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # initialize count\n    count = 0\n    \n    # initialize replace_char\n    replace_char = char\n    \n    # initialize loop\n    loop = len(str1)\n    \n    # initialize while loop\n    while loop > count:\n        if str1[count] == \" \":\n            str1 = str1[:count] + replace_char + str1[count + 1:]\n        count += 1\n        \n        # increment loop\n        loop -= 1\n    \n    # return string\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",\"\")\n    print(str2)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = str1.replace(\" \",\"\")\n    return x\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the strin"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = list(str1)\n    str1 = str1.replace(' ',char)\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1 = sorted(list1,reverse = True)\n    \n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    if n<=len(list1):\n        return(list1[-n:])\n    else:\n        return([])\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1,reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #use a max heap (implement using a heap)\n    #return a list containing the n largest items from the list\n    #if the list is empty, return an empty list\n    #if n is larger than the length of the list, return the entire list\n    heap = []\n    if len(list1) == 0:\n        return []\n    if n > len(list1):\n        return list1\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    for i in range(n,len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heapreplace(heap, list1[i])\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    h=[]\n    for i in range(len(list1)):\n        heapq.heappush(h,(list1[i],i))\n    #print(h)\n    l=[]\n    for i in range(n):\n        l.append(heapq.heappop(h)[0])\n    return l\ndef pop_max(n):\n    '''\n    Write a function that takes in an integer n and returns a list containing the n largest integers from the set of integers {1, 2, 3,..., n}.\n    '''\n    l=[]\n    for i in range(n):\n        l.append(i)\n    return l\ndef min_max(list1):\n    '''\n    Write a function that takes in a list and returns a tuple containing the minimum and maximum values in the list.\n    '''\n    m=list1[0]\n    for i in range(1,len(list1)):\n        if list1[i]<m:\n            m=list1[i]\n    n=list1[0]\n    for i in range(1,len(list1)):\n        if list1[i]>n:\n            n=list1[i]\n    return m,n\ndef words_dict(string):\n    '''\n    Write a function that takes in a string and returns a dictionary containing the letter frequencies in the string.\n    '''\n    d={}\n    for i in string:\n        if i in d.keys():\n            d[i]=d[i]+1\n        else:\n            d[i]=1\n    return d\ndef all_words(words):\n    '''\n    Write a function that takes in a list of words and returns a list of words that have all the same letters as the first word in the list.\n    '''\n    l1=[]\n    for i in words:\n        if set(i)==set(words[0]):\n            l1.append(i)\n    return l1\ndef nnum_and_list(n,l):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l1=[]\n    for i in range(n):\n        heapq.heappush(l1,l[i])\n    return l1\ndef generate_list(m,n):\n    '''\n    Write a function that takes in two integers m and n and returns a list containing m + n unique integers, where each integer is between 1 and m and the integers alternate between being positive and negative.\n    '''\n    l1=[]\n    l2=[]\n    for i in range(m):\n        l1.append(i)\n    for j in range(n):\n        l2.append(m+j)\n    k=0\n    for i in range(m+n):\n        if k%2==0:\n            l1.append(l2[i])\n        else:\n            l1.append(-l2[i])\n        k=k+1\n    return l1\ndef klargest_n(arr,n):\n    '''\n    Write a function that takes in an array of integers and an integer n and returns a list of the n largest integers in the array.\n    '''\n    heapq.heapify(arr)\n    l1=[]\n    for i in range(n):\n        l1.append(heapq.heappop(arr))\n    return l1\ndef is_empty(l):\n    '''\n    Write a function that takes in an empty list and returns True if the list is empty, otherwise, returns False.\n    '''\n    if l==[]:\n        return True\n    else:\n        return False\ndef is_odd(n):\n    '''\n    Write a function that takes in an integer and returns True if the integer is odd, otherwise, returns False.\n    '''\n    if n%2!=0:\n        return True\n    else:\n        return False\ndef is_not_prime(n):\n    '''\n    Write a function that takes in an integer and returns True if the integer is not a prime number, otherwise, returns False.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    else:\n        return False\ndef sum_list(l):\n    '''\n    Write a function that takes in a list and returns the sum of all of the integers in the list.\n    '''\n    s=0\n    for i in range(len(l)):\n        s=s+l[i]\n    return s\ndef squared_list(l):\n    '''\n    Write a function that takes in a list and returns a new list containing all of the integers squared in the original list.\n    '''\n    l1=[]\n    for i in range(len(l)):\n        l1.append(l[i]**2)\n    return l1\ndef reverse_list(l):\n    '''\n    Write a function that takes in a list and returns a new list that is the reverse of the original list.\n    '''\n    l1=[]\n    for i in range(len(l)-1,-1,-1):\n        l1.append(l[i])\n    return l1\ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, otherwise, returns False.\n    '''\n    l=[]\n    for i in s:\n        l.append(i)\n    l1=[]\n    for i in range(len(l)):\n        l1.append(l[i])\n    l1.reverse()\n    if l1==l:\n        return True\n    else:\n        return False\ndef sum_list_1(l):\n    '''\n    Write a function that takes in a list and returns the sum of all of the integers in the list.\n    '''\n    s=0\n    for i in range(len(l)):\n        s=s+l[i]\n    return s\ndef sum_nlist(l):\n    '''\n    Write a function that takes in a list of integers and returns a new list containing all of the integers in the original list multiplied by 3.\n    '''\n    l1=[]\n    for i in range(len(l)):\n        l1.append(l[i]*3)\n    return l1\ndef sum_list_2(l):\n    '''\n    Write a function that takes in a list and returns the sum of all of the integers in the list.\n    '''\n    s=0\n    for i in range(len(l)):\n        s=s+l[i]\n    return s\ndef sum_list_3(l):\n    '''\n    Write a function that takes in a list and returns the sum of all of the integers in the list.\n    '''\n    s=0\n    for i in range(len(l)):\n        s=s+l[i]\n    return s\ndef reverse_list_1(l):\n    '''\n    Write a function that takes in a list and returns a new list that is the reverse of the original list.\n    '''\n    l1=[]\n    for i in range(len(l)-1,-1,-1):\n        l1.append(l[i])\n    return l1\ndef reverse_list_2(l):\n    '''\n    Write a function that takes in a list and returns a new list that is the reverse of the original list.\n    '''\n    l1=[]\n    l1=l[::-1]\n    return l1\ndef is_palindrome_1(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, otherwise, returns False.\n    '''\n    s=s.lower()\n    if s[::-1]==s:\n        return True\n    else:\n        return False\ndef is_palindrome_2(s):\n    '''\n    Write a function that takes in a string and returns True if the string is a palindrome, otherwise, returns False.\n    '''\n    s=s.lower()\n    s1=s[::-1]\n    if s1==s:\n        return True\n    else:\n        return False\ndef sor"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = sorted(list1,reverse=True)\n    print(a)\n    result = []\n    for i in range(n):\n        result.append(a[i])\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = sorted(list1,reverse=True)\n    list3 = []\n    for i in range(n):\n        list3.append(list2[i])\n    return list3\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    i=0\n    while i<n:\n        max=list1[0]\n        for j in range(1,len(list1)):\n            if list1[j]>max:\n                max=list1[j]\n        heapq.heappop(list1)\n        heapq.heappush(list1,max)\n        i+=1\n    return list1\n    \ndef palindrome_check(str1):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome and False otherwise.\n    '''\n    str1=str1.lower()\n    if str1==str1[::-1]:\n        return True\n    return False\n    \ndef three_odd_numbers(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a list containing the three numbers that are odd.\n    '''\n    odd=[]\n    for i in range(len(list1)):\n        if list1[i]%2!=0:\n            odd.append(list1[i])\n    return odd\n    \ndef small_num_sum(list1,n):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the first n smallest numbers in the list.\n    '''\n    i=0\n    while i<n:\n        min=list1[0]\n        for j in range(1,len(list1)):\n            if list1[j]<min:\n                min=list1[j]\n        heapq.heappop(list1)\n        heapq.heappush(list1,min)\n        i+=1\n    return sum(list1)\n    \ndef n_big_num(list1,n):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of the first n largest numbers in the list.\n    '''\n    i=0\n    while i<n:\n        max=list1[0]\n        for j in range(1,len(list1)):\n            if list1[j]>max:\n                max=list1[j]\n        heapq.heappop(list1)\n        heapq.heappush(list1,max)\n        i+=1\n    return sum(list1)\n    \ndef sum_of_lengths(list1):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary containing the frequencies of each character in the list.\n    '''\n    dict1={}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in dict1:\n                dict1[list1[i][j]]+=1\n            else:\n                dict1[list1[i][j]]=1\n    return dict1\n    \ndef binary_search(list1,n):\n    '''\n    Write a function that takes in a sorted list and an integer n and returns the index of the nth smallest item in the list.\n    '''\n    low=0\n    high=len(list1)-1\n    if list1[low]==n:\n        return low\n    if list1[high]==n:\n        return high\n    mid=int((low+high)/2)\n    while low<=high:\n        if list1[mid]==n:\n            return mid\n        if list1[mid]>n:\n            high=mid-1\n        else:\n            low=mid+1\n    return low\n    \ndef bin_search_in_order(list1,n):\n    '''\n    Write a function that takes in a sorted list and an integer n and returns the index of the nth smallest item in the list.\n    '''\n    low=0\n    high=len(list1)-1\n    while low<=high:\n        mid=int((low+high)/2)\n        if list1[mid]==n:\n            return mid\n        if list1[mid]>n:\n            high=mid-1\n        else:\n            low=mid+1\n    return low\n    \ndef n_largest(list1,n):\n    '''\n    Write a function that takes in a list and returns a new list containing the n largest integers in the original list.\n    '''\n    i=0\n    nlist=[]\n    while i<n:\n        max=list1[0]\n        for j in range(1,len(list1)):\n            if list1[j]>max:\n                max=list1[j]\n        heapq.heappop(list1)\n        heapq.heappush(list1,max)\n        nlist.append(max)\n        i+=1\n    return nlist\n    \ndef divisible_by_ten(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a new list containing the numbers that are divisible by 10 in the original list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if list1[i]%10==0:\n            list2.append(list1[i])\n    return list2\n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer n and returns the nth Fibonacci number.\n    '''\n    list1=[1,2]\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        while n>len(list1)-1:\n            list1.append(list1[-1]+list1[-2])\n    return list1[n-1]\n    \ndef flatten_list(list1):\n    '''\n    Write a function that takes in a list of lists and returns a new list containing the same values in each sublist in the original list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list2.append(list1[i][j])\n    return list2\n    \ndef is_perfect_square(n):\n    '''\n    Write a function that takes in a non-negative integer n and returns True if it is a perfect square and False otherwise.\n    '''\n    i=0\n    while i<=n/2:\n        if n%i==0:\n            if (i**2)==n:\n                return True\n        i+=1\n    return False\n    \ndef contains_duplicate(list1):\n    '''\n    Write a function that takes in a list of integers and returns True if there are any duplicate values in the list and False otherwise.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n        list2.append(list1[i])\n    return False\n    \ndef sort_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the same values in the original list sorted in ascending order.\n    '''\n    list2=[]\n    list3=[]\n    while len(list1)!=0:\n        for i in range(len(list1)):\n            if list1[i]>list1[0]:\n                list2.append(list1[i])\n                list3.append(list1[0])\n                list1.pop(0)\n            else:\n                list2.append(list1[0])\n                list3.append(list1[i])\n                list1.pop(i)\n        list1=list2\n        list2=[]\n    return list3\n    \ndef is_power_of(base,num):\n    '''\n    Write a function that takes in 2 integers and returns True if the first integer is a power of the second integer and False otherwise.\n    '''\n    i=0\n    if base==num:\n        return True\n    while base*i<=num:\n        if base*i==num:\n            return True\n        i+=1\n    return False\n    \ndef prime_factors(num):\n    '''\n    Write a function that takes in an integer and returns a list containing the prime factors of that integer.\n    '''\n    lis"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    sorted_list = sorted(list1, reverse = True)\n    #print(sorted_list)\n    return sorted_list[:n]\nprint(larg_nnum([3,6,6,7,4,3,6,7,8,1],3))\ndef count_less_than_n(lst, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a dictionary that contains the\n    number of items less than n and the total number of items in the list.\n    '''\n    item_dict = {}\n    for x in lst:\n        if x in item_dict:\n            item_dict[x] += 1\n        else:\n            item_dict[x] = 1\n    return item_dict\nprint(count_less_than_n([3,6,6,7,4,3,6,7,8,1],3))\ndef kth_smallest(lst, k):\n    '''\n    Write a function that takes in a list and an integer k and returns the kth smallest element in the list.\n    '''\n    return heapq.nsmallest(k,lst)[-1]\nprint(kth_smallest([1,2,3,4,5],2))\ndef len_longest_substr(string):\n    '''\n    Write a function that takes in a string and returns the length of the longest substring without repeating characters.\n    '''\n    substr_dict = {}\n    longest = 0\n    start = 0\n    for i in range(len(string)):\n        if string[i] in substr_dict and substr_dict[string[i]] >= start:\n            start = substr_dict[string[i]] + 1\n        else:\n            longest = max(longest, i - start + 1)\n        substr_dict[string[i]] = i\n    return longest\nprint(len_longest_substr('abcabcbb'))\ndef has_duplicates(lst):\n    '''\n    Write a function that takes in a list and returns a boolean indicating whether the list contains any duplicate elements\n    '''\n    return len(set(lst)) < len(lst)\nprint(has_duplicates([2,1,3,5,4,2]))\ndef count_triple_double(lst):\n    '''\n    Write a function that takes in a list and returns the number of times that there is an element that repeats.\n    '''\n    result = 0\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= 2:\n            result += 1\n    return result\nprint(count_triple_double([3,3,3,3,3,3,3,3,3,3]))\ndef is_sorted(lst):\n    '''\n    Write a function that takes in a list and returns a boolean indicating whether the list is sorted in increasing order\n    '''\n    for i in range(len(lst)):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True\nprint(is_sorted([1,2,3]))\ndef sum_of_3(lst):\n    '''\n    Write a function that takes in a list and returns the sum of the first 3 elements in the list.\n    '''\n    return sum(lst[:3])\nprint(sum_of_3([1,2,3,4,5]))\ndef sum_of_2(lst):\n    '''\n    Write a function that takes in a list and returns the sum of the first 2 elements in the list.\n    '''\n    return sum(lst[:2])\nprint(sum_of_2([1,2,3,4,5]))\ndef has_11(lst):\n    '''\n    Write a function that takes in a list of non-decreasing integers and returns a boolean indicating whether the list contains any element that appears more than once.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\nprint(has_11([1,2,2,3,4,4,5,5,5]))\ndef min_max(lst):\n    '''\n    Write a function that takes in a list and returns a tuple containing the minimum element in the list and the maximum element in the list.\n    '''\n    return min(lst), max(lst)\nprint(min_max([1,2,3,4,5,6,7]))\ndef make_count_dict(lst):\n    '''\n    Write a function that takes in a list and returns a dictionary.\n    '''\n    mydict = {}\n    for i in lst:\n        mydict[i] = mydict.get(i, 0) + 1\n    return mydict\nprint(make_count_dict([1,2,3,4,5,6,7]))\ndef common_letters(a, b):\n    '''\n    Write a function that takes in two lists of strings and returns a list of the common letters between the two lists.\n    '''\n    result = []\n    for i in range(len(a)):\n        if a[i] in b and b[i] in a:\n            result.append(a[i])\n    return result\nprint(common_letters(['a','a','c','a'],['a','a','c','d']))\ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether the string is a palindrome.\n    '''\n    s = s.lower()\n    reversed_string = s[::-1]\n    if reversed_string == s:\n        return True\n    return False\nprint(is_palindrome(\"m\"))\ndef product_of_two_smallest_numbers(lst):\n    '''\n    Write a function that takes in a list of integers and returns the product of the two smallest numbers.\n    '''\n    sorted_lst = sorted(lst)\n    #print(sorted_lst)\n    return sorted_lst[0] * sorted_lst[1]\nprint(product_of_two_smallest_numbers([3,1,6,2,7]))\ndef find_3_numbers(lst):\n    '''\n    Write a function that takes in a list and returns a list of three integers whose product is the largest.\n    '''\n    largest = 0\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] * lst[j] * lst[k] > largest:\n                    result = [lst[i], lst[j], lst[k]]\n                    largest = lst[i] * lst[j] * lst[k]\n    return result\nprint(find_3_numbers([1,2,3,4,5,6,7,8,9]))\ndef max_repeats(lst, k):\n    '''\n    Write a function that takes in a list and an integer k and returns the number of times that k appears in the list.\n    '''\n    counter = 0\n    count_lst = {}\n    for i in range(len(lst)):\n        if k in lst[i]:\n            counter += 1\n        count_lst[lst[i]] = counter\n    return count_lst[k]\nprint(max_repeats([1,2,1,3,3,3,4,4,3,3,3,2,2,3,3,4,3,3,4,4,3,2,1,1,2,3,3,3,3,3,2,3,4,4], 3))\ndef numbers_that_sum_to_2020(lst):\n    '''\n    Write a function that takes in a list of integers and returns a list of the two numbers that sum to 2020.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + ls"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]>heap[0]:\n            heapq.heapreplace(heap,list1[i])\n    return heap\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    import math\n    import numpy as np\n    \n    def lateral_surface_area(r,h):\n        '''\n        Write a function to find the lateral surface area of a cylinder.\n        '''\n        \n        area = math.pi * r**2\n        \n        volume = math.pi * (r**2) * h\n        \n        lateral_surface_area = area - volume\n        \n        return lateral_surface_area\n        \n    \n    \n    \n    # Use the function on your own\n    \n    print(lateralsuface_cylinder(2,3))\n    \n    # Write your function here\n    print(lateralsuface_cylinder(2,3))\n    \n    # Function call\n    print(lateralsuface_cylinder(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(10,4))\n    \n    # Function call\n    print(lateral_surface_area(10,4))\n    \n    # Additional code\n    print(lateral_surface_area(4,3))\n    \n    # Function call\n    print(lateral_surface_area(4,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,2))\n    \n    # Function call\n    print(lateral_surface_area(3,2))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,5))\n    \n    # Function call\n    print(lateral_surface_area(3,5))\n    \n    # Additional code\n    print(lateral_surface_area(4,6))\n    \n    # Function call\n    print(lateral_surface_area(4,6))\n    \n    # Additional code\n    print(lateral_surface_area(1.5,4))\n    \n    # Function call\n    print(lateral_surface_area(1.5,4))\n    \n    # Additional code\n    print(lateral_surface_area(5,5))\n    \n    # Function call\n    print(lateral_surface_area(5,5))\n    \n    # Additional code\n    print(lateral_surface_area(2.5,3))\n    \n    # Function call\n    print(lateral_surface_area(2.5,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,2))\n    \n    # Function call\n    print(lateral_surface_area(3,2))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,1))\n    \n    # Function call\n    print(lateral_surface_area(3.5,1))\n    \n    # Additional code\n    print(lateral_surface_area(5,6))\n    \n    # Function call\n    print(lateral_surface_area(5,6))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,5))\n    \n    # Function call\n    print(lateral_surface_area(3.5,5))\n    \n    # Additional code\n    print(lateral_surface_area(5,3))\n    \n    # Function call\n    print(lateral_surface_area(5,3))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,5))\n    \n    # Function call\n    print(lateral_surface_area(3.5,5))\n    \n    # Additional code\n    print(lateral_surface_area(5,6))\n    \n    # Function call\n    print(lateral_surface_area(5,6))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,5))\n    \n    # Function call\n    print(lateral_surface_area(3.5,5))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,2))\n    \n    # Function call\n    print(lateral_surface_area(3,2))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,5))\n    \n    # Function call\n    print(lateral_surface_area(3.5,5))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,2))\n    \n    # Function call\n    print(lateral_surface_area(3,2))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,5))\n    \n    # Function call\n    print(lateral_surface_area(3.5,5))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,2))\n    \n    # Function call\n    print(lateral_surface_area(3,2))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,5))\n    \n    # Function call\n    print(lateral_surface_area(3.5,5))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,2))\n    \n    # Function call\n    print(lateral_surface_area(3,2))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,5))\n    \n    # Function call\n    print(lateral_surface_area(3.5,5))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,2))\n    \n    # Function call\n    print(lateral_surface_area(3,2))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,5))\n    \n    # Function call\n    print(lateral_surface_area(3.5,5))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,2))\n    \n    # Function call\n    print(lateral_surface_area(3,2))\n    \n    # Additional code\n    print(lateral_surface_area(3.5,5))\n    \n    # Function call\n    print(lateral_surface_area(3.5,5))\n    \n    # Additional code\n    print(lateral_surface_area(2,3))\n    \n    # Function call\n    print(lateral_surface_area(2,3))\n    \n    # Additional code\n    print(lateral_surface_area(3,2))\n    \n    # Function call\n    print(lateral_surface_area(3,2))\n    \n    # Additional code\n    print(lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    area = (math.pi)*(r**2)*(h/2)\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    PI=3.14159\n    a=2*r*h\n    b=2*PI*r\n    return (PI*a*b)\nlateralsuface_cylinder(3,4)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s_lateral = 2*pi*r*h\n    print('The lateral surface area of the cylinder is %.2f.' %s_lateral)\n    \ndef surfaces(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder and the lateral\n    surface of a cone.\n    '''\n    s_cylinder = pi*r**2\n    s_cone = pi*r*(h/2)**2\n    s_total = s_cylinder + s_cone\n    print('The surface area of the cylinder is %.2f, the lateral surface area of the cone is %.2f.' %(s_cylinder,s_cone))\n    print('The total surface area of the cone is %.2f.' %s_total)\n    \ndef area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    s_sphere = 4*pi*(r**2)\n    print('The surface area of the sphere is %.2f.' %s_sphere)\n    \ndef area_cylinder(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    s_cylinder = 2*pi*r*h\n    print('The surface area of the cylinder is %.2f.' %s_cylinder)\n    \ndef area_cone(r,h):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    s_cone = 2*pi*r*(h/2)\n    print('The surface area of the cone is %.2f.' %s_cone)\n    \ndef area_hyperboloid(r,h):\n    '''\n    Write a function to calculate the surface area of a hyperboloid.\n    '''\n    s_hyperboloid = 2*pi*r*h\n    print('The surface area of the hyperboloid is %.2f.' %s_hyperboloid)\n    \ndef area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    s_sphere = 4*pi*(r**2)\n    print('The surface area of the sphere is %.2f.' %s_sphere)\n    \ndef area_cylinder(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    s_cylinder = 2*pi*r*h\n    print('The surface area of the cylinder is %.2f.' %s_cylinder)\n    \ndef area_cone(r,h):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    s_cone = 2*pi*r*(h/2)\n    print('The surface area of the cone is %.2f.' %s_cone)\n    \ndef area_hyperboloid(r,h):\n    '''\n    Write a function to calculate the surface area of a hyperboloid.\n    '''\n    s_hyperboloid = 2*pi*r*h\n    print('The surface area of the hyperboloid is %.2f.' %s_hyperboloid)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    v_sphere = (4/3)*pi*(r**3)\n    print('The volume of the sphere is %.2f.' %v_sphere)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    v_cylinder = pi*r**2*h\n    print('The volume of the cylinder is %.2f.' %v_cylinder)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    v_cone = pi*r*(h/2)**2\n    print('The volume of the cone is %.2f.' %v_cone)\n    \ndef volume_hyperboloid(r,h):\n    '''\n    Write a function to calculate the volume of a hyperboloid.\n    '''\n    v_hyperboloid = pi*r*h\n    print('The volume of the hyperboloid is %.2f.' %v_hyperboloid)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    v_sphere = (4/3)*pi*(r**3)\n    print('The volume of the sphere is %.2f.' %v_sphere)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    v_cylinder = pi*r**2*h\n    print('The volume of the cylinder is %.2f.' %v_cylinder)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    v_cone = pi*r*(h/2)**2\n    print('The volume of the cone is %.2f.' %v_cone)\n    \ndef volume_hyperboloid(r,h):\n    '''\n    Write a function to calculate the volume of a hyperboloid.\n    '''\n    v_hyperboloid = pi*r*h\n    print('The volume of the hyperboloid is %.2f.' %v_hyperboloid)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    v_sphere = (4/3)*pi*(r**3)\n    print('The volume of the sphere is %.2f.' %v_sphere)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    v_cylinder = pi*r**2*h\n    print('The volume of the cylinder is %.2f.' %v_cylinder)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    v_cone = pi*r*(h/2)**2\n    print('The volume of the cone is %.2f.' %v_cone)\n    \ndef volume_hyperboloid(r,h):\n    '''\n    Write a function to calculate the volume of a hyperboloid.\n    '''\n    v_hyperboloid = pi*r*h\n    print('The volume of the hyperboloid is %.2f.' %v_hyperboloid)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    v_sphere = (4/3)*pi*(r**3)\n    print('The volume of the sphere is %.2f.' %v_sphere)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    v_cylinder = pi*r**2*h\n    print('The volume of the cylinder is %.2f.' %v_cylinder)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    v_cone = pi*r*(h/2)**2\n    print('The volume of the cone is %.2f.' %v_cone)\n    \ndef volume_hyperboloid(r,h):\n    '''\n    Write a function to calculate the volume of a hyperboloid.\n    '''\n    v_hyperboloid = pi*r*h\n    print('The volume of the hyperboloid is %.2f.' %v_hyperboloid)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    v_sphere = (4/3)*pi*(r**3)\n    print('The volume of the sphere is %.2f.' %v_sphere)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    cylinder_area = (math.pi * r**2) - (math.pi * (r**2))\n    cylinder_surface = math.pi * (r**2) + (2*math.pi*r) + (2*math.pi*r**2)\n    return cylinder_surface * h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    def surface_area(r,h):\n        return 2*pi*r*h\n    return surface_area(r,h)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area=pi*(r**2)*h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if isinstance(r,(int,float)) and h > 0:\n        LateralArea = pi * (r**2)\n        print(f\"The lateral surface area of a cylinder with radius {r} and height {h} is {LateralArea}\")\n    else:\n        print(\"Error: Invalid input. Please enter a valid integer or float.\")\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2 * pi * r * h\n    return s\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\nprint(volume_cube(3))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l ** 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(3*l**3)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ans = 0 \n    while n:\n        ans = ans << 1 | n & 1\n        n = n >> 1\n    return ans\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return ((n << 1) | n) >> 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x55555555\nprint(even_bit_set_number(0x123))\nprint(even_bit_set_number(0x00123))\nprint(even_bit_set_number(0x00000000000011))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Code here\n    return n & -n\nprint(even_bit_set_number(13))\nprint(even_bit_set_number(15))\nprint(even_bit_set_number(10))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return ((n >> 1) + 1) << 1\nprint(even_bit_set_number(10))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1<<(n.bit_length()//2))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Solution 1.\n    # return n | (1<<(n.bit_length()-1))\n    # Solution 2.\n    return n | (1<<((n.bit_length()-1)//2))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #n &= ~1\n    #return n\n    return n | (1<<(n&1))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\nprint(check_occurences([(1, 1), (2, 1), (3, 2)]))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for tuples in test_list:\n        if tuples not in occurences.keys():\n            occurences[tuples] = 1\n        else:\n            occurences[tuples] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    if len(test_list) == 0:\n        return {}\n    else:\n        dict = {}\n        for tup in test_list:\n            if tup not in dict:\n                dict[tup] = 1\n            else:\n                dict[tup] += 1\n        return dict\n        \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # init empty dict\n    test_dict = {}\n    # iterate over the list\n    for i in test_list:\n        # check if tuple already in dict\n        if i not in test_dict:\n            # add tuple\n            test_dict[i] = 1\n        # else increase count\n        else:\n            # increase count by 1\n            test_dict[i] += 1\n    # return dict\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    my_list = []\n    for i in test_list:\n        if i not in my_list:\n            my_list.append(i)\n            my_dict[i] = 1\n        else:\n            my_dict[i] = my_dict[i] + 1\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # create a dictionary\n    occurences = dict()\n    # iterate through the list\n    for tuples in test_list:\n        # add the tuples to the dictionary if they are not already in there\n        if tuples not in occurences:\n            occurences[tuples] = 1\n        # otherwise add one to the count of the number of occurrences\n        else:\n            occurences[tuples] += 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #TODO: Write your function here\n    occ = dict()\n    for i in range(len(test_list)):\n        tup = test_list[i]\n        if tup in occ:\n            occ[tup] += 1\n        else:\n            occ[tup] = 1\n    return occ\n    \n    \nprint(check_occurences([('a', 'b'), ('a', 'b'), ('a', 'b'), ('a', 'c'), ('a', 'b'), ('b', 'b')]))"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if len(str)%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    str_list = list(str)\n    count = 0\n    for i in range(len(str_list)):\n        if len(str_list[i]) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([c for c in str if c!= \" \"])\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([x for x in str if x!= \"\"])"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # Inefficient - iterate through the string and keep track of the occurrences of the substring\n    # O(n^2)\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] == '':\n                continue\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    '''\n    Examples:\n    Input : str = \"GeeksForGeeks\"\n    Output : 3\n    Output : 2\n    '''\n    '''\n    >>>number_of_substrings('')\n    0\n    >>>number_of_substrings(' ')\n    0\n    >>>number_of_substrings('geeks')\n    2\n    >>>number_of_substrings('For')\n    2\n    >>>number_of_substrings('geeksfor')\n    2\n    >>>number_of_substrings('geeksfor')\n    1\n    '''\n    # length of the string\n    n = len(str)\n    # create a boolean array to store result\n    ans = [0]*n\n    # base case\n    ans[0] = 1\n    # length of the string is more than 1\n    if n>1:\n        for i in range(1,n):\n            # if there is a char then add to result\n            if str[i]!=' ':\n                ans[i] = ans[i-1] + 1\n            # if there is space then subtract from result\n            else:\n                ans[i] = ans[i-1]\n    # return the result\n    return ans[-1]\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        if str[i]!=' ':\n            count+=1\n    print(\"\\nThe number of non-empty substrings of the given string:\",count)\n        "
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            count=count+1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_number_of_sequences(m,n): \n        if n==1:\n            if m>=2:\n                return m\n            else:\n                return 0\n        elif n==2:\n            if m>=6 and m<=10:\n                return ((m*m)-2)*2\n            else:\n                return 0\n        else:\n            if m>=6 and m<=10:\n                return ((m*m)-2)*(get_number_of_sequences(m,n-2)) + (m*m)+2\n            else:\n                return 0\n    return get_number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # solver is done\n    return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # if the nth element is less than 2*(n-1) then there are n-1 possible sequences\n    # since the first number is 0\n    if n==0:\n        return 0\n    if m<2*n-1:\n        return 0\n    # there are 2n+1 possible sequences, the first one is just 1, the others are the same\n    # except the first element is 1 and the last one is 2m\n    return 2*n+1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    sequence = range(2,m)\n    seq = []\n    \n    while True:\n        \n        for seq_i in range(len(sequence)):\n            \n            if sequence[seq_i] > seq[-1] and sequence[seq_i] <= 2*seq[-1]:\n                seq.append(sequence[seq_i])\n                sequence.pop(seq_i)\n                break\n            if sequence[seq_i] > seq[-1]:\n                break\n        \n        else:\n            break\n    \n    return len(seq)\n    \n    \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(m,n):\n        j = 2\n        while j <= m:\n            if j*i <= m:\n                total += 1\n            j += 1\n    print(total)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 0 or n <= 0: \n        raise ValueError('Error: Inputs must be positive integers greater than zero.')\n    \n    return binomial_coefficient(m, n) - binomial_coefficient(m, n - 1) - binomial_coefficient(m - 1, n) + 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    \n    count = 0\n    i = 1\n    while(i*(i+1) <= m):\n        count += (m - (i*(i+1))) // (i+1)\n        i += 1\n    return count \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_total_number_of_sequences(m,n): \n        count = 0\n        for i in range(1, m):\n            for j in range(1, n):\n                if (i * 2) <= m and (i * 2) <= m:\n                    count += 1\n        return count\n    return get_total_number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(np.math.factorial(m)/(np.math.factorial(n)*np.math.factorial(m-n)))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    answer = 0\n    for i in range(n, m+1):\n        if i == 1:\n            answer += 1\n        else:\n            answer += sum(map(lambda x: min(i, x)*2, range(1, i)))\n    return answer\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2[0]\n    list1[-2]=list2[1]\n    list1[-3]=list2[2]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1[:len(list1)-1] + list2[1:]\n    return list1\n    \ndef combine_lists(list1, list2):\n    '''\n    Write a function that combines two lists into a third list. The third list should be comprised of the elements of list1 in the first two positions, and list2 in the next two positions.\n    '''\n    list3 = list1[:2] + list2[:2]\n    return list3\n    \ndef remove_from_list(list1,list2):\n    '''\n    Write a function that takes in two lists. The function should remove any duplicates that are found in the first list from the second list.\n    '''\n    list3 = list(set(list1) - set(list2))\n    return list3\n    \ndef check_list_exists(list1, list2):\n    '''\n    Write a function that takes in two lists and returns the third list that contains the elements of list1 that are not in list2.\n    '''\n    list3 = list1.copy()\n    for i in list2:\n        if i in list1:\n            list3.remove(i)\n    return list3\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and reverses the order of the elements in the list.\n    '''\n    list1.reverse()\n    return list1\n    \ndef unique_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the unique elements of the first list.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef find_common_elements(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that contains the elements that are common to both lists.\n    '''\n    list1 = list(set(list1) & set(list2))\n    return list1\n    \ndef reverse_dictionary(dict1):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the keys and values reversed.\n    '''\n    new_dict = dict(zip(dict1.values(), dict1.keys()))\n    return new_dict\n    \ndef sort_list(list1):\n    '''\n    Write a function that takes in a list and sorts the elements in the list.\n    '''\n    list1 = sorted(list1)\n    return list1\n    \ndef create_list_from_range(start, end):\n    '''\n    Write a function that takes in two integers and creates a list from that range.\n    '''\n    list1 = list(range(start, end))\n    return list1\n    \ndef remove_from_range(start, end):\n    '''\n    Write a function that takes in two integers and returns a list that contains the elements in the range except for the integers that are in the list.\n    '''\n    list1 = list(range(start, end))\n    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n    \ndef find_longest_word(text):\n    '''\n    Write a function that takes in a string and returns the longest word in the string.\n    '''\n    return max(text.split(' '), key=len)\n    \ndef find_longest_word_that_contains_only_vowels(text):\n    '''\n    Write a function that takes in a string and returns the longest word in the string that only contains vowels.\n    '''\n    list1 = text.split(' ')\n    for word in list1:\n        if word[0] not in 'aeiou':\n            return word\n            \ndef find_longest_word_that_contains_only_vowels_and_consonants(text):\n    '''\n    Write a function that takes in a string and returns the longest word in the string that only contains vowels and consonants.\n    '''\n    list1 = text.split(' ')\n    for word in list1:\n        if word[0] in 'aeiou' and word[1] in 'bcdfghjklmnpqrstvwxyz':\n            return word\n            \ndef find_longest_word_containing_at_least_one_of_each_vowel_and_consonant(text):\n    '''\n    Write a function that takes in a string and returns the longest word in the string that contains at least one of each of the vowels and consonants.\n    '''\n    list1 = text.split(' ')\n    for word in list1:\n        if word[0] in 'aeiou' and word[1] in 'bcdfghjklmnpqrstvwxyz':\n            return word\n            \ndef count_evens(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary that has the numbers in the list as keys and the number of times each number has an even number of occurrences as the corresponding value.\n    '''\n    new_dict = {}\n    for i in list1:\n        if i % 2 == 0:\n            new_dict[i] = new_dict.get(i,0) + 1\n    return new_dict\n    \ndef sum_odds(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary that has the numbers in the list as keys and the sum of the numbers as the corresponding value.\n    '''\n    new_dict = {}\n    for i in list1:\n        if i % 2!= 0:\n            new_dict[i] = new_dict.get(i,0) + i\n    return new_dict\n    \ndef find_odds_greater_than_n(list1,n):\n    '''\n    Write a function that takes in a list and a number as parameters and returns a new list that contains the numbers from the original list that are greater than the number.\n    '''\n    new_list = []\n    for i in list1:\n        if i > n:\n            new_list.append(i)\n    return new_list\n    \ndef find_odds_greater_than_n_that_are_multiples_of_3(list1,n):\n    '''\n    Write a function that takes in a list and a number as parameters and returns a new list that contains the numbers from the original list that are greater than the number and are multiples of 3.\n    '''\n    new_list = []\n    for i in list1:\n        if i > n and i % 3 == 0:\n            new_list.append(i)\n    return new_list\n    \ndef find_odds_greater_than_n_that_are_not_multiples_of_3(list1,n):\n    '''\n    Write a function that takes in a list and a number as parameters and returns a new list that contains the numbers from the original list that are greater than the number and are not multiples of 3.\n    '''\n    new_list = []\n    for i in list1:\n        if i > n and i % 3!= 0:\n            new_list.append(i)\n    return new_list\n    \ndef get_first_three(list1):\n    '''\n    Write a function that takes in a list and returns a new list that contains the first three elements of the list.\n    '''\n    return list1[:3]\n    \ndef get_first_three_items(list1):\n    '''\n    Write a function that takes in a list and returns a new list that contains the first three items in the list.\n    '''\n    return list1[:3]\n    \ndef get_last_three(list1):\n    '''\n    Write a function that takes in a list and returns a new list that contains the last three elements of the list.\n    '''\n    return list1[-3:]\n    \ndef get_last_three_items(list1):\n    '''\n    Write a function that takes in a list and returns a new list that contains the last three items in the list.\n    '''\n    return list1[-3:]\n    \ndef get_middle_three(list1):\n    '''\n    Write a function that takes in a list and returns a new list that contains the middle three elements of the list."
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list1)-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list1)-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for i in list2:\n        list1.append(i)\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ndef count_chars(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    character in a string.\n    '''\n    char_dict = {}\n    for i in str1:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    return char_dict\n    \ndef count_words(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    word in a string.\n    '''\n    char_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    return char_dict\n    \ndef count_chars_in_order(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    character in a string in the same order in which they appear in the string.\n    '''\n    char_dict = {}\n    for i in str1:\n        char_dict[i] = str1.count(i)\n    return char_dict\n    \ndef count_words_in_order(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    word in a string in the same order in which they appear in the string.\n    '''\n    word_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        word_dict[i] = words.count(i)\n    return word_dict\n    \ndef count_chars_occurence(str1, char):\n    '''\n    Write a function that returns a dictionary of the count of each\n    character in a string that appears at least once.\n    '''\n    count_dict = {}\n    for i in str1:\n        if i == char:\n            if i in count_dict:\n                count_dict[i] += 1\n            else:\n                count_dict[i] = 1\n    return count_dict\n    \ndef count_words_occurence(str1, word):\n    '''\n    Write a function that returns a dictionary of the count of each\n    word in a string that appears at least once.\n    '''\n    word_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        if i == word:\n            if i in word_dict:\n                word_dict[i] += 1\n            else:\n                word_dict[i] = 1\n    return word_dict\n    \ndef count_chars_words(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    character and the count of each word in a string.\n    '''\n    char_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        char_dict[i] = len(i)\n    word_dict = {}\n    for i in words:\n        word_dict[i] = len(i)\n    return char_dict, word_dict\n    \ndef count_chars_words_pairs(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    character and the count of each word and the count of each word and\n    the count of each character in a string.\n    '''\n    char_dict = {}\n    word_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        char_dict[i] = len(i)\n    word_dict = {}\n    for i in words:\n        word_dict[i] = len(i)\n    char_word_dict = {}\n    for i in words:\n        char_word_dict[i] = len(i)\n    return char_dict, word_dict, char_word_dict\n    \ndef count_chars_words_pairs_in_order(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    character and the count of each word and the count of each word and\n    the count of each character in a string in the same order in which they\n    appear in the string.\n    '''\n    char_dict = {}\n    word_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        char_dict[i] = len(i)\n    word_dict = {}\n    for i in words:\n        word_dict[i] = len(i)\n    char_word_dict = {}\n    for i in words:\n        char_word_dict[i] = len(i)\n    return char_dict, word_dict, char_word_dict\n    \ndef count_words_occurence_and_pairs(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    word and the count of each character in a string that appears at least\n    once and the count of each word and the count of each character in a\n    string that appears at least once and the count of each word and each\n    character in a string that appears at least once.\n    '''\n    word_dict = {}\n    char_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        if i in word_dict:\n            word_dict[i] += 1\n        else:\n            word_dict[i] = 1\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    return word_dict, char_dict\n    \ndef count_words_occurence_and_pairs_in_order(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    word and the count of each character in a string that appears at least\n    once and the count of each word and the count of each character in a\n    string that appears at least once and the count of each word and each\n    character in a string that appears at least once in the same order in\n    which they appear in the string.\n    '''\n    word_dict = {}\n    char_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        if i in word_dict:\n            word_dict[i] += 1\n        else:\n            word_dict[i] = 1\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    return word_dict, char_dict\n    \ndef count_chars_occurence_and_words_occurence(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    character and the count of each word and the count of each word and\n    the count of each character in a string that appears at least once.\n    '''\n    char_dict = {}\n    word_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        if i in word_dict:\n            word_dict[i] += 1\n        else:\n            word_dict[i] = 1\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    return char_dict, word_dict\n    \ndef count_chars_occurence_and_words_occurence_in_order(str1):\n    '''\n    Write a function that returns a dictionary of the count of each\n    character and the count of each word and the count of each word and\n    the count of each character in a string that appears at least once in\n    the same order in which they appear in the string.\n    '''\n    char_dict = {}\n    word_dict = {}\n    words = str1.split(' ')\n    for i in words:\n        if i in word_dict:\n            word_dict[i] += 1\n        else:\n            word_dict[i] = 1\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    return char_dict, word_dict\n    \ndef count_chars_occurence_and_words_occurence_in_order_pairs(str1):\n    '''\n    Write "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Your code here\n    print(len(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str2=str(str1)\n    return len(str2)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_charac = 0\n    for i in range(len(str1)):\n        num_charac += 1\n    return num_charac\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    result = False\n    for x in range(N, 0, -1):\n        if x * x == N:\n            result = x\n            break\n        else:\n            result = False\n    return result\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 1): \n        return 1\n    for i in range(int(math.sqrt(N)), 0, -1): \n        if (i * i == N): \n            return i \n    return 1\n    \ndef num_set(n):\n    \"\"\"\n    Using set, return the factors of a number.\n    \"\"\"\n    # Set\n    return set(range(1, n + 1)) - set(factor(n))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        n = N+1\n        while not isSquare(n):\n            n = n+1\n        if n>N:\n            return n\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<=0:\n        raise Exception(\"N should be positive\")\n    x = N\n    while True:\n        x = math.floor(math.sqrt(x))\n        if x*x == N:\n            return x*x\n        x+=1\n        "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    start=1\n    end=N\n    if N==1:\n        return 1\n    while start<=end:\n        mid=(start+end)//2\n        if mid*mid==N:\n            return mid\n        elif mid*mid>N:\n            end=mid-1\n        else:\n            start=mid+1\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Base case \n    if N <= 0: \n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = int(math.sqrt(N))\n    while i*i<=N:\n        i+=1\n    return i*i\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # If N is a perfect square, N+1 will also be a perfect square\n    \n    # take the floor value of sqrt(N)\n    # this will be N+1\n    sqrtN = math.floor(math.sqrt(N))\n    \n    if sqrtN * sqrtN == N:\n        return sqrtN + 1\n    else:\n        return sqrtN + 2\n    \nprint(next_Perfect_Square(9)) # Correct answer is 10\nprint(next_Perfect_Square(27)) # Correct answer is 28\nprint(next_Perfect_Square(31)) # Correct answer is 32\nprint(next_Perfect_Square(100)) # Correct answer is 101\nprint(next_Perfect_Square(999999)) # Correct answer is 10000\nprint(next_Perfect_Square(100000)) # Correct answer is 100001\nprint(next_Perfect_Square(100000000)) # Correct answer is 1000001\nprint(next_Perfect_Square(1000000000)) # Correct answer is 100000001\nprint(next_Perfect_Square(1000000000000)) # Correct answer is 1000000010\nprint(next_Perfect_Square(100000000000000)) # Correct answer is 10000000000\nprint(next_Perfect_Square(10000000000000000000000000000)) # Correct answer is 10000000000000000000001"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #using binary search to find the next perfect square\n    def next_Perfect_Square(N):\n        lo = 0\n        hi = int(math.sqrt(N))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = int(math.sqrt(N)) + 1\n    while sq*sq!= N:\n        sq += 1\n    return sq*sq\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0], arr[1], arr[2])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr or len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # brute force way\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr) - i):\n            max_sum = max(max_sum, sum(arr[j:j + i + 1]))\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    print(\"Initial Array:\",arr)\n    if len(arr) == 1:\n        return arr[0]\n    \n    #Initialize maximum global variable for current max, the minimum global variable for the max since it must be decreasing\n    global maximum\n    global minimum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Time Complexity: O(n) and Space Complexity: O(n)\n    # Sort array\n    arr = sorted(arr) \n    n = len(arr) \n    # Declare variables for max and current sum \n    max_sum = current_sum = arr[0]\n    # Loop to traverse the array \n    for i in range(1, n): \n        # update current_sum if it's greater than the previous\n        if arr[i] > current_sum: \n            current_sum = arr[i] \n        else: \n            # Else update max_sum if the current_sum is greater than max_sum \n            max_sum = max(max_sum, current_sum) \n            current_sum = arr[i] \n    # Return max_sum \n    return max_sum \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    print(arr)\n    if len(arr)==1:\n        return arr[0]\n    else:\n        temp_arr = arr.copy()\n        temp_arr.sort()\n        i=1\n        while i<=len(temp_arr):\n            sum_arr = 0\n            j=0\n            while j<len(arr) and j<i:\n                sum_arr = sum_arr + arr[j]\n                j+=1\n            i+=1\n        return sum_arr\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i = 0\n    maximum_sum = 0\n    while i < len(arr):\n        start = i\n        while i < len(arr) and arr[i] <= arr[i + 1]:\n            i += 1\n        end = i\n        maximum_sum = max(maximum_sum, sum(arr[start:end + 1]))\n        i += 1\n    return maximum_sum\n    \nprint(max_sum([3, 8, 6, 7, 9]))\nprint(max_sum([9, 8, 6, 7, 3]))\nprint(max_sum([1, 3, -1, -3, 5]))\nprint(max_sum([1, 2, -1, 3, 4]))"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    sub_list = max_sum_helper(arr, 0, len(arr)-1)\n    return max(sub_list)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # If there are more elements than 1, then we can use the array as we are not required to maintain the subsequence\n    if n > 1:\n        i = 0\n        while i + 1 < n:\n            # The while loop is to avoid comparing the first element with itself, which is incorrect \n            if arr[i] > arr[i+1]:\n                # Swapping to check for non-increasing and decreasing elements\n                tmp = arr[i]\n                arr[i] = arr[i+1]\n                arr[i+1] = tmp\n            i += 1\n        # The base case is, the largest number in the array is always the maximum sum\n        if arr[0] > arr[1]:\n            return arr[0]\n        elif arr[-1] > arr[-2]:\n            return arr[-1]\n        else:\n            return max_sum(arr[1:-1])\n    \n    # If there are no elements in the array, the base case is the largest number in the array\n    else:\n        return max(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Base case \n    if len(arr) == 0: \n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    if guess*guess == number:\n        return guess\n    if guess*guess > number:\n        print(\"No solution\")\n        return guess\n    return babylonian_squareroot(number/guess)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    while True:\n        y = (x + number / x) / 2.0\n        if y == x:\n            return y\n        x = y\n    \ndef almost_equal(a, b):\n    '''\n    Write a function that tests whether two numbers are \"almost equal\"\n    '''\n    return (abs(a - b) < 10**-8)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 1\n    previous_root = root\n    iterations = 1\n    while abs(root**2 - number) >= 1:\n        root = (previous_root + number / root) / 2\n        previous_root = root\n        iterations += 1\n    return root, iterations\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #1st iteration\n    h = number/2\n    #2nd iteration\n    while True:\n        #calculate h\n        h = (number/2 - h)/2\n        #check if h is the root\n        if h == number/h:\n            return h\n        #update h\n        number = h\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    step = 0\n    while True:\n        step += 1\n        root = number / 2 + (number / 4)\n        if root == number:\n            return root, step\n        number = root\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"The number must be positive.\")\n    else:\n        previous_guess = 1\n        guess = 1\n        while abs(guess**2 - number) > 1e-9:\n            guess = previous_guess + (guess + number / guess) / 2\n            previous_guess = guess\n        return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return number\n    return 1.0 / babylonian_squareroot(number / 2)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return 1\n    guess = number / 2\n    while True:\n        guess_new = (guess + number / guess) / 2\n        if abs(guess_new - guess) <= 0.001:\n            break\n        guess = guess_new\n    return guess\n    \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    ans = 1\n    while True:\n        ans = (ans + number/ans)/2\n        if abs(ans**2 - number) < 0.00000001:\n            break\n    return int(ans)"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: \n        return len(str)\n    \n    n = len(str) \n    dp_arr = [[0 for j in range(n)] for i in range(n)] \n    # initialize dp_arr \n    max_length = 1\n    for i in range(n): \n        dp_arr[i][i] = 1\n        max_length = 1\n    \n    # fill the table using bottom up approach \n    for length in range(2, n+1): \n        for j in range(0, n-length+1): \n            i = j + length - 1\n            if str[j] == str[i] and dp_arr[j+1][i-1] == length - 1: \n                dp_arr[j][i] = 1\n                max_length = max(max_length, length)\n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    dp=[[0 for i in range(n)] for j in range(n)]\n    if str==str[::-1]:\n        return len(str)\n    for i in range(n):\n        dp[i][i]=1\n    for i in range(n-1):\n        if str[i]==str[i+1]:\n            dp[i][i+1]=2\n        else:\n            dp[i][i+1]=1\n    for i in range(2,n):\n        for j in range(n-i):\n            if str[j]==str[j+i] and dp[j][j+i-1]>=1:\n                dp[j][j+i]=2+dp[j+1][j+i-1]\n            else:\n                dp[j][j+i]=max(dp[j][j+i-1],dp[j+1][j+i])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    max_length = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if (i == j):\n                dp[i][j] = 1\n            elif (i + 1 == j):\n                if (str[i] == str[j]):\n                    dp[i][j] = 2\n                    if max_length < 2:\n                        max_length = 2\n                else:\n                    dp[i][j] = 1\n    print(dp)\n    for i in range(len(str) - 1):\n        for j in range(i + 2, len(str)):\n            if (str[i] == str[j]):\n                if dp[i + 1][j - 1] == 2:\n                    dp[i][j] = 2\n                    if max_length < 2:\n                        max_length = 2\n                    continue\n                else:\n                    dp[i][j] = 1\n            else:\n                dp[i][j] = 1\n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_helper(str,start,end):\n        while (start >= 0 and end < len(str) and str[start] == str[end]):\n            start -= 1\n            end += 1\n        return end - start - 1\n    max_sub_len = 0\n    start = 0\n    end = 0\n    while (start < len(str)):\n        sub_len = lps_helper(str, start, end)\n        if sub_len > max_sub_len:\n            max_sub_len = sub_len\n        end += 1\n        while (start >= 0 and end < len(str) and str[start] == str[end]):\n            start -= 1\n            end += 1\n    return max_sub_len\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # @param A : string\n    # @return an integer\n    n = len(str) \n    dp = [[0 for i in range(n)] \n        for j in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    maxLen = 1\n    start = 0\n    for i in range(n-1,-1,-1): \n        for j in range(i+1,n): \n            if (str[i]==str[j]) and (i!= j): \n                dp[i][j] = dp[i+1][j-1] + 2\n                if (dp[i][j] > maxLen): \n                    maxLen = dp[i][j] \n                    start = i \n    return maxLen \ndef lps(str): \n    n = len(str) \n    maxLen = 1\n    start = 0\n    dp = [[0 for i in range(n)] \n        for j in range(n)] \n    for i in range(1, n): \n        for j in range(i): \n            if (str[i] == str[j]) and (i!= j): \n                dp[i][j] = dp[i - 1][j - 1] + 2\n                if (dp[i][j] > maxLen): \n                    maxLen = dp[i][j] \n                    start = i \n    return maxLen "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    '''\n    Steps :\n        1. Create a dict of {char : index}\n        2. Go through the string and create a stack\n        3. Whenever we encounter a char in dict, \n            append it and the index into the stack \n        4. When we are done traversing the string, pop the topmost element of the stack and keep calculating\n            the length\n    '''\n    d = {}\n    for i, j in enumerate(str):\n        if j not in d:\n            d[j] = i\n    stack = []\n    length = 0\n    for i in range(len(str)):\n        if len(stack) == 0:\n            stack.append(str[i])\n            continue\n        if str[i] == stack[-1]:\n            stack.append(str[i])\n        else:\n            if str[i] == stack[-2]:\n                stack.pop(-1)\n                stack.pop(-1)\n                length += 2\n            else:\n                stack.append(str[i])\n    return length\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_len = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1] == str[i:j+1][::-1] and len(str[i:j+1]) > max_len:\n                max_len = len(str[i:j+1])\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n)] for j in range(n)]\n    max_len = 0\n    for i in range(n): \n        dp[i][i] = 1\n        max_len = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0] * n for i in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str==\"\":\n        return 0\n    \n    len_str=len(str)\n    dp=[[1]*len_str for _ in range(len_str)]\n    \n    for l in range(1,len_str):\n        for i in range(0,len_str-l):\n            if str[i]==str[i+l]:\n                dp[i][i+l]=2\n            else:\n                dp[i][i+l]=1\n                \n            for j in range(i+1,i+l+1):\n                if str[i]==str[j] and dp[i+1][j-1]>0:\n                    dp[i][j]=2+dp[i+1][j-1]\n                else:\n                    dp[i][j]=1\n    max_len=0\n    for i in range(0,len_str):\n        for j in range(0,len_str):\n            if dp[i][j]>max_len:\n                max_len=dp[i][j]\n                \n    return max_len\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n + 1) / 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n * sum(range(1, n))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n-1) * (n/2)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 0 if not n else n * (n-1) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    # use for loop\n    # count = 0\n    # for i in range(1, n+1):\n    #     count += 1/i\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 0:\n        return 0\n    \n    return (1.0/n) + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in an integer n and prints the n-th Fibonacci number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection.append(i)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] == array_nums2[i]:\n            intersection.append(array_nums1[i])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n1 = len(array_nums1)\n    n2 = len(array_nums2)\n    solution = []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set out of both arrays\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    #create a set out of the intersection\n    set_intersection = set_nums1.intersection(set_nums2)\n    #return the sorted list of the intersection\n    return sorted(set_intersection)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_num1 = set(array_nums1)\n    set_num2 = set(array_nums2)\n    return set_num1 & set_num2\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = sorted(array_nums1)\n    array_nums2 = sorted(array_nums2)\n    intersection = []\n    i = j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #sort both arrays\n    array_nums1.sort()\n    array_nums2.sort()\n    i = 0\n    j = 0\n    result_list = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        #check if they are both there\n        if array_nums1[i] == array_nums2[j]:\n            #print(array_nums1[i])\n            result_list.append(array_nums1[i])\n            i = i + 1\n            j = j + 1\n        #check if we are out of bounds\n        elif array_nums1[i] > array_nums2[j]:\n            j = j + 1\n        else:\n            i = i + 1\n    return result_list\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    i, j = 0, 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            res.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1)&set(array_nums2))\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    result = 0\n    for item in tup:\n        if item == x:\n            result += 1\n    return result\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ_of_x = 0\n    for i in tup:\n        if i == x:\n            occ_of_x = occ_of_x+1\n    return occ_of_x\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if element > list[i]:\n            if i == 0:\n                return list[i:i] + list[:i] + [element]\n            elif i == len(list) -1:\n                return list[:i] + [element] + list[i:]\n            else:\n                return list[:i] + [element] + list[i:]\n    return list[:i] + [element] + list[i:]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list = list.copy()\n    list.insert(0,element)\n    list.append(element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if element == list[i]:\n            list.insert(i,element)\n            return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element not in list:\n        list.insert(0,element)\n    else:\n        list.insert(list.index(element),element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return list\n    else:\n        list.insert(0,element)\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if element == list[i]:\n            list.insert(i, element)\n            return list\n    list.append(element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]*len(list) + list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(0,len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.insert(i,list[i])\n    return result\nprint(insert_element([1, 2, 3], 0))    # Should be [0, 1, 2, 3]\nprint(insert_element([], 0))            # Should be [0]\nprint(insert_element([2, 4, 6], -1))    # Should be [2, 4, -1, 6]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:index] +[element] + list[index:]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    temp = 0\n    index = 0\n    if len(list) == 0:\n        list.append(element)\n        return list\n    if len(list) == 1:\n        if element < list[0]:\n            temp = list[0]\n            list[0] = element\n            list.append(temp)\n            return list\n        else:\n            temp = list[0]\n            list[0] = element\n            list.append(temp)\n            return list\n    while index < len(list):\n        if element < list[index]:\n            list.insert(index,element)\n            return list\n        else:\n            index = index + 1\n    list.append(element)\n    return list\n    \ndef bubbleSort(list):\n    '''\n    Write a function that takes in a list and sorts the elements using the bubble sort algorithm.\n    '''\n    for i in range(len(list)-1):\n        swapped = False\n        for j in range(len(list)-1):\n            if list[j] > list[j+1]:\n                list[j], list[j+1] = list[j+1], list[j]\n                swapped = True\n        if swapped == False:\n            break\n    return list\n    \ndef reverseList(list):\n    '''\n    Write a function that takes in a list and reverses the order of the elements in the list.\n    '''\n    return list[::-1]\n    \ndef removeDuplicates(list):\n    '''\n    Write a function that takes in a list and removes all duplicate values from the list.\n    '''\n    while True:\n        if len(list) == 1:\n            break\n        elif list.count(list[0]) == 2:\n            list.remove(list[0])\n        else:\n            list.remove(list[0])\n    return list\n    \ndef uniqueValues(list):\n    '''\n    Write a function that takes in a list and returns a list that contains the unique values in the list.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if list.count(list[i]) == 1:\n            newList.append(list[i])\n    return newList\n    \ndef filterFunc(list,func):\n    '''\n    Write a function that takes in a list and a function and returns a list of all of the elements in the list that are true by the function.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if func(list[i]) == True:\n            newList.append(list[i])\n    return newList\n    \ndef filterFunc2(list,func):\n    '''\n    Write a function that takes in a list and a function and returns a list of all of the elements in the list that are false by the function.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if func(list[i]) == False:\n            newList.append(list[i])\n    return newList\n    \ndef removeDuplicates2(list):\n    '''\n    Write a function that takes in a list and removes all duplicate values from the list.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if list.count(list[i]) == 1:\n            newList.append(list[i])\n    return newList\n    \ndef getMax(list):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if i == 0:\n            newList.append(list[i])\n        elif list[i] > newList[-1]:\n            newList.append(list[i])\n    return newList\n    \ndef getMin(list):\n    '''\n    Write a function that takes in a list of numbers and returns the smallest number in the list.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if i == 0:\n            newList.append(list[i])\n        elif list[i] < newList[-1]:\n            newList.append(list[i])\n    return newList\n    \ndef swapIndex(list,index1,index2):\n    '''\n    Write a function that takes in a list, two integers, and swaps the values in the two elements in the list.\n    '''\n    temp = list[index1]\n    list[index1] = list[index2]\n    list[index2] = temp\n    return list\n    \ndef getWinner(players,n):\n    '''\n    Write a function that takes in a list of players, the number of players, and returns the number of players that are still alive.\n    '''\n    alive = 0\n    if players == 1:\n        return 1\n    else:\n        for i in range(len(players)):\n            if players[i]!= 0:\n                alive = alive + 1\n        return alive\n    \ndef getPlayerIndex(players,player):\n    '''\n    Write a function that takes in a list of players and a player and returns the index of the player in the list.\n    '''\n    for i in range(len(players)):\n        if players[i] == player:\n            return i\n    return -1\n    \ndef multiplyElements(list,multiplyBy):\n    '''\n    Write a function that takes in a list and a number and returns a new list that is the product of the values in the list by the number.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if list[i] > 0:\n            newList.append(list[i] * multiplyBy)\n    return newList\n    \ndef numberOfDubs(list):\n    '''\n    Write a function that takes in a list and returns the number of elements in the list that are dups.\n    '''\n    newList = []\n    for i in range(len(list)):\n        if list[i] > 0:\n            newList.append(list[i])\n    for i in range(len(list)):\n        if list.count(newList[i]) >= 2:\n            return 1\n    return 0\n    \ndef largestIsland(grid):\n    '''\n    Write a function that takes in a grid and returns the largest island in the grid.\n    '''\n    largestIsland = 0\n    largestIslandIndex = -1\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                if j!= 0 and grid[i][j-1] == 1:\n                    grid[i][j-1] = -1\n                if i!= 0 and grid[i-1][j] == 1:\n                    grid[i-1][j] = -1\n                if j!= len(grid[0]) - 1 and grid[i][j+1] == 1:\n                    grid[i][j+1] = -1\n                if i!= len(grid) - 1 and grid[i+1][j] == 1:\n                    grid[i+1][j] = -1\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                currIsland = 1\n                if j!= 0 and grid[i][j-1] == 1:\n                    currIsland = currIsland + 1\n                if i!= 0 and grid[i-1][j] == 1:\n                    currIsland = currIsland + 1\n                if j!= len(grid[0]) - 1 and grid[i][j+1] == 1:\n                    currIsland = currIsland + 1\n                if i!= len(grid) - 1 and grid[i+1][j] == 1:\n                    currIsland = currIsland + 1\n                if currIsland > largestIsland:\n                    largestIsland = currIsland\n                    largestIslandIndex = i * len(grid[0]) + j\n    return largestIslandIndex\n    \ndef getWinnerCount(players,n):\n    '''\n    Write a function that takes in a list of players, the number of players, and returns the number of players tha"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z = complex(numbers[0], numbers[1])\n    a = z.real\n    b = z.imag\n    phi = cmath.phase(z)\n    theta = cmath.polar(z)[1]\n    print(numbers, a, b, phi, theta)\n    #a=z.real\n    #b=z.imag\n    #print(a,b)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if not numbers:\n        return None\n    r=0.0\n    phi=0.0\n    for n in numbers:\n        r=r+n.real\n        phi=phi+n.imag*1j\n    return (r,phi)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = []\n    for i in range(len(numbers)):\n        a,b=numbers[i]\n        r.append(cmath.sqrt(a**2+b**2))\n    return r\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #a = complex(input(\"Enter complex number:\"))\n    #print(a, type(a))\n    #b = complex(input(\"Enter complex number:\"))\n    #print(b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(input())\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #print(\"Enter complex number:\",end=\" \")\n    #b = input()\n    #print(type(b))\n    #b = float(b)\n    #print(type(b))\n    a = complex(input(\"Enter complex number:\"))\n    print(a, type(a))\n    b = complex(input(\"Enter complex number:\"))\n    print(b, type(b))\n    print(\"Enter complex number:\",end=\" \")\n    a = input()\n    print(type(a))\n    a = float(a)\n    print(type(a))\n    b = float(input())\n    print(type(b))\n    b = float(b)\n    print(\"Enter complex number:\",end=\" \")\n    c = input()\n    print(type(c))\n    c = float(c)\n    print(type(c))\n    c = complex(a,b)\n    print(c)\n    c = complex(c)\n    print(c)\n    r = cmath.sqrt(cmath.pow(c.real, 2) + cmath.pow(c.imag, 2))\n    print(r)\n    p = abs(c)\n    print(p)\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, type(b))\n    #print(\"Enter complex number:\",end=\" \")\n    #a = input()\n    #print(type(a))\n    #a = float(a)\n    #print(type(a))\n    #b = float(input())\n    #print(type(b))\n    #b = float(b)\n    #print(a, type(a),b, typ"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radius=0\n    theta=0\n    for number in numbers:\n        if number!=0:\n            radius=abs(number)\n            theta=cmath.phase(number)\n        if number==0:\n            radius=0\n            theta=0\n    return radius,theta\n    \ndef polar(x,y):\n    '''\n    Write a python function to find cartesian coordinates.\n    '''\n    x2=x*x\n    y2=y*y\n    \n    print(\"X = {0} + {1}i\".format(x,y))\n    print(\"Y = {0} - {1}i\".format(x2,y2))\n    \ndef cartesian(r,t):\n    '''\n    Write a python function to find complex numbers.\n    '''\n    x=r*cmath.cos(t)\n    y=r*cmath.sin(t)\n    print(\"{0} + {1}i\".format(x,y))\n    \ndef polar2(number):\n    '''\n    Write a python function to find the radius and theta of a complex number.\n    '''\n    radius=0\n    theta=0\n    if number!=0:\n        radius=abs(number)\n        theta=cmath.phase(number)\n    if number==0:\n        radius=0\n        theta=0\n    return radius,theta\n    \ndef cartesian2(r,t):\n    '''\n    Write a python function to find the cartesian coordinates of a complex number.\n    '''\n    x=r*cmath.cos(t)\n    y=r*cmath.sin(t)\n    return x,y\n    \ndef polar3(number):\n    '''\n    Write a python function to find the radius and theta of a complex number.\n    '''\n    radius=0\n    theta=0\n    if number!=0:\n        radius=abs(number)\n        theta=cmath.phase(number)\n    if number==0:\n        radius=0\n        theta=0\n    return radius,theta\n    \ndef cartesian3(r,t):\n    '''\n    Write a python function to find the cartesian coordinates of a complex number.\n    '''\n    x=r*cmath.cos(t)\n    y=r*cmath.sin(t)\n    return x,y\n    \ndef polar4(number):\n    '''\n    Write a python function to find the radius and theta of a complex number.\n    '''\n    radius=0\n    theta=0\n    if number!=0:\n        radius=abs(number)\n        theta=cmath.phase(number)\n    if number==0:\n        radius=0\n        theta=0\n    return radius,theta\n    \ndef cartesian4(r,t):\n    '''\n    Write a python function to find the cartesian coordinates of a complex number.\n    '''\n    x=r*cmath.cos(t)\n    y=r*cmath.sin(t)\n    return x,y\n    \ndef main():\n    numbers=[1,2,3,4,5]\n    radius,theta=convert(numbers)\n    polar(radius,theta)\n    numbers=[1,2,3,4,5]\n    radius,theta=polar(numbers)\n    cartesian(radius,theta)\n    \n    number1=complex(1.0,0)\n    radius1,theta1=polar2(number1)\n    cartesian2(radius1,theta1)\n    number2=complex(0,1.0)\n    radius2,theta2=polar2(number2)\n    cartesian2(radius2,theta2)\n    \n    number3=complex(0,0)\n    radius3,theta3=polar2(number3)\n    cartesian2(radius3,theta3)\n    \n    numbers=[1,2,3,4,5]\n    radius,theta=convert(numbers)\n    radius,theta=polar(radius,theta)\n    cartesian(radius,theta)\n    \n    number1=complex(1.0,0)\n    radius1,theta1=polar2(number1)\n    cartesian2(radius1,theta1)\n    number2=complex(0,1.0)\n    radius2,theta2=polar2(number2)\n    cartesian2(radius2,theta2)\n    \n    number3=complex(0,0)\n    radius3,theta3=polar2(number3)\n    cartesian2(radius3,theta3)\n    \n    numbers=[1,2,3,4,5]\n    radius,theta=convert(numbers)\n    radius,theta=polar(radius,theta)\n    cartesian(radius,theta)\n    \n    number1=complex(1.0,0)\n    radius1,theta1=polar2(number1)\n    cartesian2(radius1,theta1)\n    number2=complex(0,1.0)\n    radius2,theta2=polar2(number2)\n    cartesian2(radius2,theta2)\n    \n    number3=complex(0,0)\n    radius3,theta3=polar2(number3)\n    cartesian2(radius3,theta3)\n    \n    numbers=[1,2,3,4,5]\n    radius,theta=convert(numbers)\n    radius,theta=polar(radius,theta)\n    cartesian(radius,theta)\n    \n    number1=complex(1.0,0)\n    radius1,theta1=polar2(number1)\n    cartesian2(radius1,theta1)\n    number2=complex(0,1.0)\n    radius2,theta2=polar2(number2)\n    cartesian2(radius2,theta2)\n    \n    number3=complex(0,0)\n    radius3,theta3=polar2(number3)\n    cartesian2(radius3,theta3)\n    \n    numbers=[1,2,3,4,5]\n    radius,theta=convert(numbers)\n    radius,theta=polar(radius,theta)\n    cartesian(radius,theta)\n    \n    number1=complex(1.0,0)\n    radius1,theta1=polar2(number1)\n    cartesian2(radius1,theta1)\n    number2=complex(0,1.0)\n    radius2,theta2=polar2(number2)\n    cartesian2(radius2,theta2)\n    \n    number3=complex(0,0)\n    radius3,theta3=polar2(number3)\n    cartesian2(radius3,theta3)\n    \n    numbers=[1,2,3,4,5]\n    radius,theta=convert(numbers)\n    radius,theta=polar(radius,theta)\n    cartesian(radius,theta)\n    \n    number1=complex(1.0,0)\n    radius1,theta1=polar2(number1)\n    cartesian2(radius1,theta1)\n    number2=complex(0,1.0)\n    radius2,theta2=polar2(number2)\n    cartesian2(radius2,theta2)\n    \n    number3=complex(0,0)\n    radius3,theta3=polar2(number3)\n    cartesian2(radius3,theta3)\n    \n    numbers=[1,2,3,4,5]\n    radius,theta=convert(numbers)\n    radius,theta=polar(radius,theta)\n    cartesian(radius,theta)\n    \n    number1=complex(1.0,0)\n    radius1,theta1=polar2(number1)\n    cartesian2(radius1,theta1)\n    number2=complex(0,1.0)\n    radius2,theta2=polar2(number2)\n    cartesian2(radius2,theta2)\n    \n    number"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    \n    numbers = numbers.split()\n    for i in range(len(numbers)):\n        numbers[i] = complex(numbers[i])\n    res = []\n    for i in numbers:\n        r = i.real\n        c = i.imag\n        res.append(r)\n        res.append(c)\n    res.append(0)\n    return res\n    \nprint(\"Example:\")\nprint(convert(\"1+1i\"))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r=[]\n    for i in range(len(numbers)):\n        number=numbers[i]\n        mag=cmath.polar(number)\n        mag_real=mag[0]\n        mag_imag=mag[1]\n        \n        if mag_imag.real<0:\n            mag_real=-mag_real\n            mag_imag=-mag_imag\n        mag_imag=mag_imag*(180/cmath.pi)\n        \n        r.append([mag_real,mag_imag])\n    return r\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers)!= int and type(numbers)!= float:\n        raise TypeError('Only integers and floats are allowed.')\n    real = 0\n    imag = 0\n    if type(numbers) == int:\n        real = numbers\n        imag = 0\n    elif type(numbers) == float:\n        real = numbers.real\n        imag = numbers.imag\n    magnitude = cmath.sqrt((real**2) + (imag**2))\n    angle = cmath.phase(complex(real, imag))\n    return magnitude, angle\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    '''\n    Pole Complex\n    '''\n    P = []\n    for i in range(len(numbers)):\n        P.append(abs(numbers[i]))\n    P.append(cmath.phase(numbers[0]))\n    return P\ndef detect_number(P):\n    '''\n    Write a python function to detect the number of negative number(s)\n    '''\n    '''\n    Number of Negative Number\n    '''\n    N = []\n    for i in range(len(P)):\n        if P[i]<0:\n            N.append(i)\n    return N\ndef real(P):\n    '''\n    Write a python function to detect the real part of complex numbers.\n    '''\n    '''\n    Real Part\n    '''\n    RE = []\n    for i in range(len(P)):\n        RE.append(P[i].real)\n    return RE\ndef imag(P):\n    '''\n    Write a python function to detect the imaginary part of complex numbers.\n    '''\n    '''\n    Imaginary Part\n    '''\n    IM = []\n    for i in range(len(P)):\n        IM.append(P[i].imag)\n    return IM\ndef conjugate(P):\n    '''\n    Write a python function to detect the conjugate of complex numbers.\n    '''\n    '''\n    Conjugate\n    '''\n    C = []\n    for i in range(len(P)):\n        C.append(P[i].conjugate())\n    return C\ndef conjugate(P):\n    '''\n    Write a python function to detect the inverse of complex numbers.\n    '''\n    '''\n    Inverse\n    '''\n    I = []\n    for i in range(len(P)):\n        I.append(P[i].conjugate())\n    return I\ndef polar_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Polar Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef phase_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Phase Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef normal_form(P):\n    '''\n    Write a python function to convert complex numbers to normal form\n    '''\n    '''\n    Normal Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef normal_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Normal Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef conjugate(P):\n    '''\n    Write a python function to detect the conjugate of complex numbers.\n    '''\n    '''\n    Conjugate\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef polar_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Polar Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef phase_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Phase Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef fft(numbers):\n    '''\n    Write a python function to detect the frequency of complex numbers.\n    '''\n    '''\n    Frequency of Complex Numbers\n    '''\n    D = []\n    for i in range(len(numbers)):\n        D.append(i)\n    D.append(0)\n    D = D*2\n    for i in range(1,len(D)):\n        D[i] = D[i-1]+D[i]\n    return D\ndef fft(numbers):\n    '''\n    Write a python function to detect the frequency of complex numbers.\n    '''\n    '''\n    Frequency of Complex Numbers\n    '''\n    D = []\n    for i in range(len(numbers)):\n        D.append(i)\n    D.append(0)\n    D = D*2\n    for i in range(1,len(D)):\n        D[i] = D[i-1]+D[i]\n    return D\ndef normal_form(P):\n    '''\n    Write a python function to convert complex numbers to normal form\n    '''\n    '''\n    Normal Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef polar_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Polar Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef phase_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Phase Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef conjugate(P):\n    '''\n    Write a python function to detect the conjugate of complex numbers.\n    '''\n    '''\n    Conjugate\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef polar_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Polar Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef phase_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Phase Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef conjugate(P):\n    '''\n    Write a python function to detect the conjugate of complex numbers.\n    '''\n    '''\n    Conjugate\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef polar_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Polar Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex(P[i].real,P[i].imag))\n    return D\ndef phase_form(P):\n    '''\n    Write a python function to convert complex numbers to polar form\n    '''\n    '''\n    Phase Form\n    '''\n    D = []\n    for i in range(len(P)):\n        D.append(complex("
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1_len = len(list1)\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return list1_len, count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i%1 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1_copy = list1.copy()\n    for i in list1_copy:\n        if isinstance(i, int):\n            list1.remove(i)\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i,int):\n            count+=1\n    return count\n    \ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i,str):\n            count+=1\n    return count\n    \ndef count_list_length(list1):\n    '''\n    Write a python function that returns the number of list elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i,list):\n            count+=1\n    return count\n    \ndef count_tuple_length(tuple1):\n    '''\n    Write a python function that returns the number of tuple elements in a given list.\n    '''\n    count=0\n    for i in tuple1:\n        if isinstance(i,tuple):\n            count+=1\n    return count\n    \ndef count_set_length(set1):\n    '''\n    Write a python function that returns the number of set elements in a given list.\n    '''\n    count=0\n    for i in set1:\n        if isinstance(i,set):\n            count+=1\n    return count\n    \ndef count_dict_length(dict1):\n    '''\n    Write a python function that returns the number of dictionary elements in a given list.\n    '''\n    count=0\n    for i in dict1:\n        if isinstance(i,dict):\n            count+=1\n    return count\n    \ndef count_all_elements(list1,tuple1,set1,dict1):\n    '''\n    Write a python function that returns the number of elements of all given lists and tuples and sets.\n    '''\n    count=0\n    if isinstance(list1,list):\n        count+=count_integer(list1)\n    else:\n        count+=0\n    if isinstance(tuple1,tuple):\n        count+=count_integer(tuple1)\n    else:\n        count+=0\n    if isinstance(set1,set):\n        count+=count_integer(set1)\n    else:\n        count+=0\n    if isinstance(dict1,dict):\n        count+=count_integer(dict1)\n    else:\n        count+=0\n    return count\n    \ndef count_all_non_elements(list1,tuple1,set1,dict1):\n    '''\n    Write a python function that returns the number of non-elements of all given lists and tuples and sets.\n    '''\n    count=0\n    if isinstance(list1,list):\n        count+=count_integer(list1)-count_integer(list1)\n    else:\n        count+=0\n    if isinstance(tuple1,tuple):\n        count+=count_integer(tuple1)-count_integer(tuple1)\n    else:\n        count+=0\n    if isinstance(set1,set):\n        count+=count_integer(set1)-count_integer(set1)\n    else:\n        count+=0\n    if isinstance(dict1,dict):\n        count+=count_integer(dict1)-count_integer(dict1)\n    else:\n        count+=0\n    return count\n    \ndef count_total_elements(list1,tuple1,set1,dict1):\n    '''\n    Write a python function that returns the total number of elements of all given lists and tuples and sets.\n    '''\n    count=0\n    if isinstance(list1,list):\n        count+=len(list1)\n    else:\n        count=0\n    if isinstance(tuple1,tuple):\n        count+=len(tuple1)\n    else:\n        count=0\n    if isinstance(set1,set):\n        count+=len(set1)\n    else:\n        count=0\n    if isinstance(dict1,dict):\n        count+=len(dict1)\n    else:\n        count=0\n    return count\n    \ndef count_numbers(list1,tuple1,set1,dict1):\n    '''\n    Write a python function that returns the total number of elements of given lists and tuples and sets that are numeric and non-negative.\n    '''\n    count=0\n    if isinstance(list1,list):\n        count+=count_integer(list1)\n    else:\n        count+=0\n    if isinstance(tuple1,tuple):\n        count+=count_integer(tuple1)\n    else:\n        count+=0\n    if isinstance(set1,set):\n        count+=count_integer(set1)\n    else:\n        count+=0\n    if isinstance(dict1,dict):\n        count+=count_integer(dict1)\n    else:\n        count+=0\n    return count\n    \ndef count_negative_numbers(list1,tuple1,set1,dict1):\n    '''\n    Write a python function that returns the total number of elements of given lists and tuples and sets that are numeric and non-negative.\n    '''\n    count=0\n    if isinstance(list1,list):\n        count+=count_integer(list1)\n    else:\n        count+=0\n    if isinstance(tuple1,tuple):\n        count+=count_integer(tuple1)\n    else:\n        count+=0\n    if isinstance(set1,set):\n        count+=count_integer(set1)\n    else:\n        count+=0\n    if isinstance(dict1,dict):\n        count+=count_integer(dict1)\n    else:\n        count+=0\n    return count\n    \ndef count_negative_numbers_in_one_list(list1):\n    '''\n    Write a python function that returns the total number of elements of given lists that are numeric and non-negative.\n    '''\n    count=0\n    if isinstance(list1,list):\n        count=count_integer(list1)\n    else:\n        count=0\n    return count\n    \ndef count_negative_numbers_in_one_tuple(tuple1):\n    '''\n    Write a python function that returns the total number of elements of given tuples that are numeric and non-negative.\n    '''\n    count=0\n    if isinstance(tuple1,tuple):\n        count=count_integer(tuple1)\n    else:\n        count=0\n    return count\n    \ndef count_negative_numbers_in_one_set(set1):\n    '''\n    Write a python function that returns the total number of elements of given sets that are numeric and non-negative.\n    '''\n    count=0\n    if isinstance(set1,set):\n        count=count_integer(set1)\n    else:\n        count=0\n    return count\n    \ndef count_negative_numbers_in_one_dict(dict1):\n    '''\n    Write a python function that returns the total number of elements of given dictionaries that are numeric and non-negative.\n    '''\n    count=0\n    if isinstance(dict1,dict):\n        count=count_integer(dict1)\n    else:\n        count=0\n    return count\n    \ndef count_negative_numbers_in_all_lists(list1,tuple1,set1,dict1):\n    '''\n    Write a python function that returns the total number of elements of given lists and tuples and sets that are numeric and non-negative.\n    '''\n    count=0\n    if isinstance(list1,list):\n        count=count_integer(list1)\n    else:\n        count=0\n    if isinstance(tuple1,tuple):\n        count+=count_integer(tuple1)\n    else:\n        count+=0\n    if isinstance(set1,set):\n        count+=count_integer(set1)\n    else:\n        count+=0\n    if isinstance(dict1,dict):\n        count+=count_integer(dict1)\n    else:\n        count=0\n    return count\n    \ndef count_negative_numbers_in_all_tuples(tuple1,set1,dict1):\n    '''\n    Write a python function that returns the total number of elements of given tuples and sets that are numeric and non-negative"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if isinstance(list1[i],int):\n            count = count + 1\n    return count\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return map(lambda x: tuple(x) * n, combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l1 = []\n    for i in range(n):\n        comb = combinations_with_replacement(l, i + 1)\n        for j in comb:\n            l1.append(j)\n    return l1\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_colors = list(l)\n    list_comb = combinations_with_replacement(list_colors,n)\n    return list(list_comb)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return [[]]\n    if l == []:\n        return [[]]\n    if n == 1:\n        return [[i] for i in l]\n    combs = combinations_colors(l[:-1], n-1)\n    res = []\n    for comb in combs:\n        for i in range(len(l)):\n            res.append(comb + [l[i]])\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(1, len(l) + 1):\n        for c in combinations_with_replacement(l, i):\n            yield (c)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors3(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors4(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors5(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors6(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors7(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors8(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors9(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors10(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors11(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors12(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors13(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors14(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors15(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors16(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors17(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors18(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors19(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combinations.append(tuple(l[i:i+n]))\n    return combinations\ndef combinations_colors20(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1)"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #Create the combinations \n    combinations = []\n    for i in range(len(l)):\n        combinations.append(l[i])\n    for i in range(len(l)):\n        combinations.append(l[i])\n    #Combine the tuples\n    result = []\n    for i in range(len(combinations)):\n        result.append(tuple(combinations[i]))\n    #return the result\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = list(combinations_with_replacement(l, n))\n    return combinations\ndef is_prime(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    for i in range(2,n):\n        if (n%i==0):\n            return False\n        else:\n            return True\ndef is_prime_v2(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v3(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v4(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v5(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v6(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v7(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v8(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v9(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v10(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v11(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v12(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v13(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef is_prime_v14(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False otherwise.\n    '''\n    if n == 2 o"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = 0\n    for i in range(1, n+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                primes = primes + 1\n    print(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = 0\n    num = 0\n    n = int(n)\n    if n == 1:\n        print(\"0\")\n    elif n == 2:\n        print(\"1\")\n    else:\n        while num < n:\n            num += 1\n            if num % 2 == 0:\n                continue\n            for j in range(3, num):\n                if num % j == 0:\n                    break\n            else:\n                primes += 1\n    print(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    prime_nums = [True for i in range(n+1)]\n    # prime_nums[0] = False\n    # prime_nums[1] = False\n    #\n    # for i in range(2, int(math.sqrt(n))+1):\n    #     if prime_nums[i]:\n    #         for j in range(2*i, n+1, i):\n    #             prime_nums[j] = False\n    for i in range(2, n+1):\n        if prime_nums[i]:\n            for j in range(i+i, n+1, i):\n                prime_nums[j] = False\n    return sum(prime_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #get count of primes up to n\n    n = int(n)\n    n = 2\n    count = 1\n    num = 2\n    while num < n:\n        count += 1\n        num += 1\n        while num!= 1:\n            if num%2 == 0:\n                num = int(num/2)\n            else:\n                num = int(num*3)+1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Base case\n    if n <= 1:\n        return 0\n    # Check if the number is prime\n    if n <= 3:\n        return n - 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    x = 0\n    for i in range(2, n):\n        flag = True\n        for j in range(2, i):\n            if (i % j == 0):\n                flag = False\n                break\n        if flag:\n            x += 1\n    return x\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    assert(n>0)\n    count = 0\n    for i in range(n+1):\n        if check_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # code here\n    prime_nums = []\n    for num in range(1,n):\n        flag = 0\n        for j in range(2,num):\n            if num % j == 0:\n                flag = 1\n                break\n        if flag == 0:\n            prime_nums.append(num)\n    return len(prime_nums)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a + 1\n    b = b + 1\n    return a, b\nprint(swap_numbers(3,4))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swapped = (b,a)\n    return swapped\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\nprint(swap_numbers(2,3))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a, b\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = max(test_tup1)\n    test_tup2 = max(test_tup2)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if test_tup1[1] > test_tup2[1] else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert into a list\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    tup1 = tuple(sorted(tup1, reverse=True))\n    tup2 = tuple(sorted(tup2))\n    return tup1 + tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1[0], test_tup2[0])\n    min_val = min(test_tup1[1], test_tup2[1])\n    if test_tup1[0] >= test_tup2[0]:\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup2\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2\n        elif test_tup1[1] == test_tup2[1]:\n            if test_tup1[2] > test_tup2[2]:\n                return test_tup1\n            elif test_tup1[2] < test_tup2[2]:\n                return test_tup2\n            else:\n                return test_tup1\n    \nif __name__ == '__main__':\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (10, 1, 4)\n    print(maximize_elements(test_tup1, test_tup2))\n    tes"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # sort the tuples\n    max_tup1 = sorted(test_tup1, reverse=True)\n    max_tup2 = sorted(test_tup2, reverse=True)\n    \n    # find the highest value of the two tuples\n    # and return it\n    return max(max_tup1), max(max_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2), test_tup1 if test_tup1[1] > test_tup2[1] else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = (2, 5, 1, 3, 6, 8, 4, 0)\n    test_tup2 = (5, 2, 7, 3, 6, 1, 0, 4)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,\n        101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,\n        193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,\n        293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,\n        409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499]\n    n = int(n)\n    if n < 1:\n        print('Enter a valid integer.')\n        return\n    if n > len(lst):\n        print('Enter a valid integer.')\n        return\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 11\n    if n == 5:\n        return 13\n    if n == 6:\n        return 17\n    if n == 7:\n        return 19\n    if n == 8:\n        return 23\n    if n == 9:\n        return 29\n    if n == 10:\n        return 31\n    if n == 11:\n        return 37\n    if n == 12:\n        return 41\n    if n == 13:\n        return 43\n    if n == 14:\n        return 47\n    if n == 15:\n        return 53\n    if n == 16:\n        return 59\n    if n == 17:\n        return 61\n    if n == 18:\n        return 67\n    if n == 19:\n        return 71\n    if n == 20:\n        return 73\n    if n == 21:\n        return 79\n    if n == 22:\n        return 83\n    if n == 23:\n        return 89\n    if n == 24:\n        return 97\n    if n == 25:\n        return 101\n    if n == 26:\n        return 103\n    if n == 27:\n        return 107\n    if n == 28:\n        return 109\n    if n == 29:\n        return 113\n    if n == 30:\n        return 127\n    if n == 31:\n        return 131\n    if n == 32:\n        return 137\n    if n == 33:\n        return 139\n    if n == 34:\n        return 149\n    if n == 35:\n        return 151\n    if n == 36:\n        return 157\n    if n == 37:\n        return 163\n    if n == 38:\n        return 167\n    if n == 39:\n        return 173\n    if n == 40:\n        return 179\n    if n == 41:\n        return 181\n    if n == 42:\n        return 191\n    if n == 43:\n        return 193\n    if n == 44:\n        return 197\n    if n == 45:\n        return 199\n    if n == 46:\n        return 211\n    if n == 47:\n        return 223\n    if n == 48:\n        return 227\n    if n == 49:\n        return 229\n    if n == 50:\n        return 233\n    if n == 51:\n        return 239\n    if n == 52:\n        return 241\n    if n == 53:\n        return 251\n    if n == 54:\n        return 257\n    if n == 55:\n        return 263\n    if n == 56:\n        return 269\n    if n == 57:\n        return 271\n    if n == 58:\n        return 277\n    if n == 59:\n        return 281\n    if n == 60:\n        return 283\n    if n == 61:\n        return 293\n    if n == 62:\n        return 307\n    if n == 63:\n        return 311\n    if n == 64:\n        return 313\n    if n == 65:\n        return 317\n    if n == 66:\n        return 331\n    if n == 67:\n        return 337\n    if n == 68:\n        return 347\n    if n == 69:\n        return 349\n    if n == 70:\n        return 353\n    if n == 71:\n        return 359\n    if n == 72:\n        return 367\n    if n == 73:\n        return 373\n    if n == 74:\n        return 379\n    if n == 75:\n        return 383\n    if n == 76:\n        return 389\n    if n == 77:\n        return 397\n    if n == 78:\n        return 401\n    if n == 79:\n        return 409\n    if n == 80:\n        return 419\n    if n == 81:\n        return 421\n    if n == 82:\n        return 433\n    if n == 83:\n        return 439\n    if n == 84:\n        return 441\n    if n == 85:\n        return 443\n    if n == 86:\n        return 451\n    if n == 87:\n        return 457\n    if n == 88:\n        return 461\n    if n == 89:\n        return 463\n    if n == 90:\n        return 467\n    if n == 91:\n        return 469\n    if n == 92:\n        return 471\n    if n == 93:\n        return 473\n    if n == 94:\n        return 477\n    if n == 95:\n        return 479\n    if n == 96:\n        return 481\n    if n == 97:\n        return 483\n    if n == 98:\n        return 489\n    if n == 99:\n        return 491\n    if n == 100:\n        return 499\n    else:\n        print('Enter a valid integer.')\n        return\n        \ndef primality_test(n):\n    '''\n    Write a function to test whether a number is a prime number.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n        return True\n    else:\n        return False\n        \ndef prime_divisors(n):\n    '''\n    Write a function to find all prime divisors of a number.\n    '''\n    lst = []\n    for i in range(1,n):\n        if n % i == 0:\n            lst.append(i)\n    return lst\n    \ndef primes_up_to(n):\n    '''\n    Write a function to find all prime numbers up to and including n.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        if primality_test(i):\n            lst.append(i)\n    return lst\n    \ndef list_of_primes(n):\n    '''\n    Write a function to find all prime numbers up to and including n.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        if primality_test(i):\n            lst.append(i)\n    return lst\n    \ndef list_of_primes(n):\n    '''\n    Write a function to find all prime numbers up to and including n.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        if primality_test(i):\n            lst.append(i)\n    return lst\n    \ndef primality_numbers(n):\n    '''\n    Write a function to find all prime numbers up to and including n.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        if primality_test(i):\n            lst.append(i)\n    return lst\n    \ndef prime_numbers(n):\n    '''\n    Write a function to find all prime numbers up to and including n.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        if primality_test(i):\n            lst.append(i)\n    return lst\n    \ndef list_of_factors(n):\n    '''\n    Write a function to find all prime numbers up to and including n.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            continue\n    "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return \"N\u00e3o \u00e9 possivel calcular!\"\n    \n    n = n - 1\n    if n == 0:\n        return 2\n    prime_n = 3\n    \n    while True:\n        if is_prime(prime_n):\n            return prime_n\n        else:\n            prime_n += 2\n            if prime_n > n:\n                return prime_n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def is_prime(n): \n        '''\n        Check whether number is prime\n        '''\n        if n == 2: \n            return True\n        if n % 2 == 0 or n < 2: \n            return False\n        for i in range(3, int(math.sqrt(n) + 1), 2): \n            if n % i == 0: \n                return False\n        return True\n    \n    a = 5\n    while True: \n        if is_prime(a): \n            if n == a: \n                return a\n            n -= a\n        a += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n == 6:\n        return 9\n    if n == 7:\n        return 11\n    if n == 8:\n        return 13\n    if n == 9:\n        return 17\n    if n == 10:\n        return 19\n    if n == 11:\n        return 23\n    if n == 12:\n        return 29\n    if n == 13:\n        return 31\n    if n == 14:\n        return 37\n    if n == 15:\n        return 41\n    if n == 16:\n        return 43\n    if n == 17:\n        return 47\n    if n == 18:\n        return 53\n    if n == 19:\n        return 59\n    if n == 20:\n        return 61\n    if n == 21:\n        return 67\n    if n == 22:\n        return 71\n    if n == 23:\n        return 73\n    if n == 24:\n        return 79\n    if n == 25:\n        return 83\n    if n == 26:\n        return 89\n    if n == 27:\n        return 97\n    if n == 28:\n        return 101\n    if n == 29:\n        return 103\n    if n == 30:\n        return 107\n    if n == 31:\n        return 109\n    if n == 32:\n        return 113\n    if n == 33:\n        return 127\n    if n == 34:\n        return 131\n    if n == 35:\n        return 137\n    if n == 36:\n        return 139\n    if n == 37:\n        return 149\n    if n == 38:\n        return 151\n    if n == 39:\n        return 157\n    if n == 40:\n        return 163\n    if n == 41:\n        return 167\n    if n == 42:\n        return 173\n    if n == 43:\n        return 179\n    if n == 44:\n        return 181\n    if n == 45:\n        return 191\n    if n == 46:\n        return 193\n    if n == 47:\n        return 197\n    if n == 48:\n        return 199\n    if n == 49:\n        return 211\n    if n == 50:\n        return 223\n    if n == 51:\n        return 227\n    if n == 52:\n        return 229\n    if n == 53:\n        return 233\n    if n == 54:\n        return 239\n    if n == 55:\n        return 241\n    if n == 56:\n        return 251\n    if n == 57:\n        return 257\n    if n == 58:\n        return 263\n    if n == 59:\n        return 269\n    if n == 60:\n        return 271\n    if n == 61:\n        return 277\n    if n == 62:\n        return 281\n    if n == 63:\n        return 283\n    if n == 64:\n        return 289\n    if n == 65:\n        return 293\n    if n == 66:\n        return 307\n    if n == 67:\n        return 311\n    if n == 68:\n        return 313\n    if n == 69:\n        return 317\n    if n == 70:\n        return 323\n    if n == 71:\n        return 329\n    if n == 72:\n        return 331\n    if n == 73:\n        return 337\n    if n == 74:\n        return 347\n    if n == 75:\n        return 349\n    if n == 76:\n        return 353\n    if n == 77:\n        return 359\n    if n == 78:\n        return 367\n    if n == 79:\n        return 373\n    if n == 80:\n        return 379\n    if n == 81:\n        return 383\n    if n == 82:\n        return 389\n    if n == 83:\n        return 391\n    if n == 84:\n        return 397\n    if n == 85:\n        return 401\n    if n == 86:\n        return 409\n    if n == 87:\n        return 419\n    if n == 88:\n        return 421\n    if n == 89:\n        return 431\n    if n == 90:\n        return 433\n    if n == 91:\n        return 439\n    if n == 92:\n        return 443\n    if n == 93:\n        return 449\n    if n == 94:\n        return 457\n    if n == 95:\n        return 463\n    if n == 96:\n        return 471\n    if n == 97:\n        return 477\n    if n == 98:\n        return 481\n    if n == 99:\n        return 487\n    if n == 100:\n        return 493\n    if n == 101:\n        return 495\n    if n == 102:\n        return 499\n    if n == 103:\n        return 503\n    if n == 104:\n        return 509\n    if n == 105:\n        return 511\n    if n == 106:\n        return 513\n    if n == 107:\n        return 521\n    if n == 108:\n        return 523\n    if n == 109:\n        return 541\n    if n == 110:\n        return 543\n    if n == 111:\n        return 547\n    if n == 112:\n        return 549\n    if n == 113:\n        return 551\n    if n == 114:\n        return 557\n    if n == 115:\n        return 563\n    if n == 116:\n        return 569\n    if n == 117:\n        return 571\n    if n == 118:\n        return 577\n    if n == 119:\n        return 583\n    if n == 120:\n        return 591\n    if n == 121:\n        return 597\n    if n == 122:\n        return 601\n    if n == 123:\n        return 607\n    if n == 124:\n        return 613\n    if n == 125:\n        return 617\n    if n == 126:\n        return 621\n    if n == 127:\n        return 629\n    if n == 128:\n        return 631\n    if n == 129:\n        return 643\n    if n == 130:\n        return 647\n    if n == 131:\n        return 653\n    if n == 132:\n        return 659\n    if n == 133:\n        return 661\n    if n == 134:\n        return 673\n    if n == 135:\n        return 677\n    if n == 136:\n        return 679\n    if n == 137:\n        return 683\n    if n == 138:\n        return 697\n    if n == 139:\n        return 701\n    if n == 140:\n        return 703\n    if n == 141:\n        return 707\n    if n == 142:\n        return 709\n    if n == 143:\n        return 711\n    if n == 144:\n        return 719\n    if n == 145:\n        return 721\n    if n == 146:\n        return 727\n    if n == 147:\n        return 729\n    if n == 148:\n        return 733\n    if n == 149:\n        return 739\n    if n == 150:\n        return 741\n    if n == 151:\n        return 757\n    if n == 152:\n        return 761\n    if n == 153:\n        return 767\n    if n == 154:\n        return 773\n    if n == 155:\n        return 779\n    if n == 156:\n        return 783\n    if n == 157:\n        return 787\n    if n == 158:\n        return 797\n    if n == 159:\n        return 803\n    if n == 160:\n        return 809\n    if n == 161:\n        return 811\n    if n == 162:\n        return 821\n    if n == 163:\n        return 829\n    if n == 164:\n        return 839\n    if n == 165:\n        return 841\n    if n == 166:\n        return 857\n    if n == 167:\n        return 863\n    if n == 168:\n        return 877\n    if n == 169:\n        return 883\n    if n == 170:\n        return 891\n    if n == 171:\n        return 901\n    if n == 172:\n        return 907\n    if n == 173:\n        return 911\n    if n == 174:\n        return 919\n    if n == 175:\n        return 927\n    i"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math\n    def list_prime(n):\n        '''\n        Generate and return list of n prime numbers\n        '''\n        list_num = []\n        for i in range(1,n+1):\n            if i == 1:\n                list_num.append(1)\n            elif i % 2 == 0:\n                list_num.append(i)\n            else:\n                for j in range(3,int(math.sqrt(i))+1,2):\n                    if i % j == 0:\n                        break\n                else:\n                    list_num.append(i)\n        return list_num\n    \n    def get_lcm(n,m):\n        '''\n        Return L.C.M. of two numbers\n        '''\n        if n % m == 0:\n            return m*n\n        else:\n            return n*get_lcm(m,n%m)\n    \n    def primes_gen():\n        '''\n        Generate a sequence of primes from 2 to 1000000\n        '''\n        a = 2\n        while a <= 1000000:\n            yield a\n            a = a + 1\n    \n    def primes_set():\n        '''\n        Generate a set of primes from 2 to 1000000\n        '''\n        primes = primes_gen()\n        primes_set = set()\n        while True:\n            p = next(primes)\n            primes_set.add(p)\n            if len(primes_set) >= n:\n                break\n        return primes_set\n    \n    def is_prime(num):\n        '''\n        Checks to see if num is a prime number\n        '''\n        if num == 1:\n            return False\n        elif num == 2:\n            return True\n        else:\n            for x in range(2,math.ceil(math.sqrt(num))+1):\n                if num % x == 0:\n                    return False\n            else:\n                return True\n    \n    def newman_solve(n,prime_set):\n        '''\n        Recursive function to solve the equation m = n^(1/p) + 1 where m is a factor of n and p is any prime\n        '''\n        def newman_prime_inner(n,prime_set):\n            '''\n            Recursive function to solve the equation m = n^(1/p) + 1 where m is a factor of n and p is any prime\n            '''\n            prime_list = list(prime_set)\n            prime_list.sort(reverse=True)\n            for i in range(len(prime_list)):\n                if n == 1:\n                    return prime_list[i]\n                elif n % prime_list[i] == 0:\n                    n = n / prime_list[i]\n                    return newman_prime_inner(n,prime_set)\n        return newman_prime_inner(n,prime_set)\n    \n    def newman_solve_dict(n,prime_set):\n        '''\n        Recursive function to solve the equation m = n^(1/p) + 1 where m is a factor of n and p is any prime\n        '''\n        prime_list = list(prime_set)\n        prime_list.sort(reverse=True)\n        newman_dict = {}\n        for i in range(len(prime_list)):\n            if n == 1:\n                newman_dict[prime_list[i]] = 1\n                return newman_dict\n            elif n % prime_list[i] == 0:\n                n = n / prime_list[i]\n                newman_dict[prime_list[i]] = newman_solve_dict[n]\n        return newman_dict\n    \n    def newman_solve_dict_factors(n):\n        '''\n        Recursive function to solve the equation m = n^(1/p) + 1 where m is a factor of n and p is any prime\n        '''\n        prime_list = primes_set()\n        prime_list.sort(reverse=True)\n        newman_dict = {}\n        for i in range(len(prime_list)):\n            if n == 1:\n                newman_dict[prime_list[i]] = 1\n                return newman_dict\n            elif n % prime_list[i] == 0:\n                n = n / prime_list[i]\n                newman_dict[prime_list[i]] = newman_solve_dict_factors[n]\n        return newman_dict\n    \n    def newman_solve_dict_prime(n):\n        '''\n        Recursive function to solve the equation m = n^(1/p) + 1 where m is a factor of n and p is any prime\n        '''\n        prime_list = list(primes_set())\n        prime_list.sort(reverse=True)\n        newman_dict = {}\n        for i in range(len(prime_list)):\n            if n == 1:\n                newman_dict[prime_list[i]] = 1\n                return newman_dict\n            elif n % prime_list[i] == 0:\n                n = n / prime_list[i]\n                newman_dict[prime_list[i]] = newman_solve_dict_prime[n]\n        return newman_dict\n    \n    prime_set = primes_set()\n    n = n\n    m = newman_solve(n,prime_set)\n    #m = newman_prime_inner(n,prime_set)\n    #m = newman_solve_dict(n,prime_set)\n    #m = newman_solve_dict_factors(n)\n    #m = newman_solve_dict_prime(n)\n    return m\n    \n    #print(list_prime(n))\n    #print(get_lcm(list_prime(n),list_prime(n)))\n    #print(is_prime(list_prime(n)))\n    #print(newman_prime(n))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1: \n        return False\n    if n <= 3: \n        return True \n    if n%2 == 0 or n%3 == 0: \n        return False \n    i = 5\n    while i*i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    \n    if n < 3:\n        return n\n    \n    prime = 3\n    \n    while (prime * prime - 1) % n!= 0:\n        prime += 2\n        \n    return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"n should be a positive integer\")\n    if n<=0:\n        raise ValueError(\"n should be a positive integer\")\n    if n==1:\n        return 2\n    for i in range(2,n+1):\n        if is_prime(i):\n            return i\n    return False\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0: \n        return False\n    else:\n        m = 1\n        s = 0\n        n1 = n + 1\n        while m <= n1:\n            t = m\n            while t <= n1:\n                if is_prime(m + t): \n                    s = s + 1\n                t = t + m\n            m = m + 1\n        return s\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (3, 5, 7, 9)\n    test_tup3 = ()\n    \n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        return division_elements_helper(test_tup1, test_tup2)\n    else:\n        return division_elements_helper(test_tup1, test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert isinstance(test_tup1, tuple), f'test_tup1 must be a tuple, {type(test_tup1)} given instead'\n    assert isinstance(test_tup2, tuple), f'test_tup2 must be a tuple, {type(test_tup2)} given instead'\n    assert len(test_tup1) == len(test_tup2), f'test_tup1 and test_tup2 must have the same length'\n    for i in range(len(test_tup1)):\n        assert isinstance(test_tup1[i], (int, float, complex)), f'elements in test_tup1 must be an int, float, or complex, {type(test_tup1[i])} given instead'\n        assert isinstance(test_tup2[i], (int, float, complex)), f'elements in test_tup2 must be an int, float, or complex, {type(test_tup2[i])} given instead'\n        assert test_tup1[i] % test_tup2[i] == 0, f'elements in test_tup1 and test_tup2 must be in the same divisor of the same length, {test_tup1[i]} {test_tup2[i]} given instead'\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(int(x/y) for x, y in zip(test_tup1, test_tup2))\n    \ntest_tup1 = (3,5,7,9)\ntest_tup2 = (2,5,3,4)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return_tuple = ()\n    for i in range(len(test_tup1)):\n        try:\n            element_tuple = (test_tup1[i] / test_tup2[i],)\n            return_tuple += element_tuple\n        except:\n            element_tuple = (0,)\n            return_tuple += element_tuple\n    return return_tuple\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    #return a new tuple with the mathematical division of the elements in the test_tup1 and test_tup2\n    \n    a = test_tup1\n    b = test_tup2\n    \n    c = ()\n    \n    for i in range(len(a)):\n        d = a[i]/b[i]\n        c += (d,)\n    \n    return c\n    \ndef print_sum(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints out the sum of all the elements in the tuple.\n    '''\n    \n    #return the sum of the elements in the test_tup\n    \n    a = test_tup\n    \n    print(a[0]+a[1]+a[2]+a[3])\n    \ndef print_product(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints out the product of all the elements in the tuple.\n    '''\n    \n    #return the product of the elements in the test_tup\n    \n    a = test_tup\n    \n    print(a[0]*a[1]*a[2]*a[3])\n    \ndef print_max(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints out the largest element in the tuple.\n    '''\n    \n    #return the largest element in the test_tup\n    \n    a = test_tup\n    \n    max = a[0]\n    \n    for i in range(len(a)):\n        if max < a[i]:\n            max = a[i]\n            \n    print(max)\n    \ndef print_min(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints out the smallest element in the tuple.\n    '''\n    \n    #return the smallest element in the test_tup\n    \n    a = test_tup\n    \n    min = a[0]\n    \n    for i in range(len(a)):\n        if min > a[i]:\n            min = a[i]\n            \n    print(min)\n    \ndef print_range(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints out the range of the elements in the tuple.\n    '''\n    \n    #return the range of the elements in the test_tup\n    \n    a = test_tup\n    \n    print(a[0] - a[3])\n    \ndef print_average(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints out the average of the elements in the tuple.\n    '''\n    \n    #return the average of the elements in the test_tup\n    \n    a = test_tup\n    \n    print((a[0]+a[1]+a[2]+a[3])/4)\n    \ndef print_sorted(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints the elements in the tuple in sorted order.\n    '''\n    \n    #return the elements in the test_tup in sorted order\n    \n    a = test_tup\n    \n    a.sort()\n    \n    for i in range(len(a)):\n        print(a[i])\n        \ndef print_reverse(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints the elements in the tuple in reverse order.\n    '''\n    \n    #return the elements in the test_tup in reverse order\n    \n    a = test_tup\n    \n    a.reverse()\n    \n    for i in range(len(a)):\n        print(a[i])\n        \ndef print_len(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints the length of the tuple.\n    '''\n    \n    #return the length of the test_tup\n    \n    a = test_tup\n    \n    print(len(a))\n    \ndef print_max_min(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and prints the maximum and minimum element in the tuple.\n    '''\n    \n    #return the maximum and minimum element in the test_tup\n    \n    a = test_tup\n    \n    max = a[0]\n    \n    min = a[0]\n    \n    for i in range(len(a)):\n        if max < a[i]:\n            max = a[i]\n            \n        if min > a[i]:\n            min = a[i]\n            \n    print(max, min)\n    \ndef print_list(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and returns a list of the elements in the tuple.\n    '''\n    \n    #return a list of the elements in the test_tup\n    \n    a = test_tup\n    \n    return a\n    \ndef remove_letter(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and returns a list of the elements in the tuple after the largest element has been removed.\n    '''\n    \n    #return a list of the elements in the test_tup after the largest element has been removed\n    \n    a = test_tup\n    \n    max = a[0]\n    \n    new = []\n    \n    for i in range(len(a)):\n        if max!= a[i]:\n            new += (a[i],)\n            \n    return new\n    \ndef remove_element(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and returns a tuple of length 3 with the first element removed and the last element removed.\n    '''\n    \n    #return a tuple of length 3 with the first element removed and the last element removed\n    \n    a = test_tup\n    \n    new = []\n    \n    max = a[0]\n    \n    for i in range(len(a)):\n        if max!= a[i]:\n            new += (a[i],)\n            \n    return (new[0], new[-1])\n    \ndef return_index(test_tup):\n    '''\n    Write a function that takes in a tuple of length 4 and returns the index of the largest element in the tuple.\n    '''\n    \n    #return the index of the largest element in the test_tup\n    \n    a = test_tup\n    \n    max = a[0]\n    \n    for i in range(len(a)):\n        if max < a[i]:\n            max = a[i]\n            \n    for j in range(len(a)):\n        if max == a[j]:\n            return j\n            \ndef find_word_endings(test_word, test_tup):\n    '''\n    Write a function that takes in a word and a tuple of length 4 and returns a tuple of length 2 with the first element being the count of the number of times the word appears in the test_word and the second element being the ending of the word that appears the most.\n    '''\n    \n    #return a tuple of length 2 with the first element being the count of the number of times the word appears in the test_word and the second element being the ending of the word that appears the most\n    \n    a = test_word\n    \n    b = test_tup\n    \n    a = a.lower()\n    \n    d = {}\n    \n    for i in range(len(b)):\n        if a == b[i][0]:\n            if b[i] in d:\n                d[b[i]] += 1\n            else:\n                d[b[i]] = 1\n    \n    max_value = 0\n    \n    for key, value in d.items():\n        if value > max_value:\n            max_value = value\n            \n    count = 0\n    \n    for key, value in d.items():\n        if value == max_value:\n            count += 1\n            \n    print(count, max_value)\n    \ndef join_list(test_tup):\n    '''\n    Write a function that takes in a tuple of lengt"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    output_list = []\n    for i in range(len(test_tup1)):\n        test_tup1_el = test_tup1[i]\n        test_tup2_el = test_tup2[i]\n        div_el = test_tup1_el / test_tup2_el\n        output_list.append(div_el)\n    return tuple(output_list)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    \n    if len(test_tup1) < len(test_tup2):\n        smaller_tuple = test_tup1\n        larger_tuple = test_tup2\n    else:\n        smaller_tuple = test_tup2\n        larger_tuple = test_tup1\n    \n    assert len(smaller_tuple) == len(larger_tuple)\n    \n    return tuple(x/y for x, y in zip(smaller_tuple, larger_tuple))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #print(test_tup1[0], test_tup2[0])\n    #result = test_tup1[0] / test_tup2[0]\n    #print(result)\n    #tuple = []\n    #for i in range(len(test_tup1)):\n    #    tuple.append(test_tup1[i] / test_tup2[i])\n    #print(tuple)\n    tuple = tuple_element_division(test_tup1, test_tup2)\n    return tuple\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    result_tup_key = ()\n    for i in range(len(test_tup1)):\n        temp_value = test_tup1[i] / test_tup2[i]\n        result_tup = (temp_value, ) + result_tup\n        result_tup_key = (test_tup1[i], ) + result_tup_key\n    return (result_tup, result_tup_key)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < len(list1):\n        return (list1[:L], list1[L:])\n    else:\n        return (list1, [])\n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function is_anagram that takes in two strings and returns True if they are anagrams, and False otherwise.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return sorted(s1) == sorted(s2)\n    \ndef swap_letter(s1, i, j):\n    '''\n    Write a function swap_letter that takes in a string and two integers i and j and returns the string with the letter at index i and the letter at index j swapped.\n    '''\n    if i >= len(s1) or j >= len(s1) or i < 0 or j < 0:\n        return s1\n    s1 = list(s1)\n    s1[i], s1[j] = s1[j], s1[i]\n    s1 = ''.join(s1)\n    return s1\n    \ndef swap_word(s1, i, j):\n    '''\n    Write a function swap_word that takes in a string and two integers i and j and returns the string with the word at index i and the word at index j swapped.\n    '''\n    if i >= len(s1) or j >= len(s1) or i < 0 or j < 0:\n        return s1\n    s1 = s1.split()\n    s1[i], s1[j] = s1[j], s1[i]\n    s1 =''.join(s1)\n    return s1\n    \ndef convert_24(n):\n    '''\n    Write a function convert_24 that takes in an integer n and returns the equivalent 24-hour time in the format hh:mm.\n    '''\n    if n < 12:\n        return str(12-n) + ':00'\n    else:\n        return str(n-12) + ':00'\n    \ndef first_two(s1):\n    '''\n    Write a function first_two that takes in a string and returns the string up to the first two characters. If there are less than two characters, return the string unchanged.\n    '''\n    if len(s1) < 2:\n        return s1\n    else:\n        return s1[:2]\n    \ndef fizzbuzz(n):\n    '''\n    Write a function fizzbuzz that takes in an integer n and returns \"FizzBuzz\" if n is divisible by 3 and 5, and \"Fizz\" if n is divisible by 3, \"Buzz\" if n is divisible by 5, and the string \"FizzBuzz\" otherwise.\n    '''\n    if n % 3 == 0 and n % 5 == 0:\n        return \"FizzBuzz\"\n    elif n % 3 == 0:\n        return \"Fizz\"\n    elif n % 5 == 0:\n        return \"Buzz\"\n    else:\n        return str(n)\n    \ndef max_int(list1):\n    '''\n    Write a function max_int that takes a list of integers and returns the largest integer.\n    '''\n    max_int = 0\n    for i in list1:\n        if i > max_int:\n            max_int = i\n    return max_int\n    \ndef reverse_rec(s1):\n    '''\n    Write a function reverse_rec that takes in a string and returns the string in reverse order.\n    '''\n    if len(s1) == 0:\n        return s1\n    else:\n        return reverse_rec(s1[1:]) + s1[0]\n    \ndef reverse_iter(s1):\n    '''\n    Write a function reverse_iter that takes in a string and returns the string in reverse order.\n    '''\n    if len(s1) == 0:\n        return s1\n    else:\n        return s1[-1] + reverse_iter(s1[:-1])\n    \ndef has_duplicates(l1):\n    '''\n    Write a function has_duplicates that takes in a list and returns True if there are any duplicates in the list and False otherwise.\n    '''\n    if len(l1) == 0:\n        return False\n    for i in range(0, len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j]:\n                return True\n    return False\n    \ndef has_duplicates_no_lists(s1):\n    '''\n    Write a function has_duplicates_no_lists that takes in a string and returns True if there are any duplicates in the string and False otherwise.\n    '''\n    if len(s1) == 0:\n        return False\n    s1 = list(s1)\n    for i in range(0, len(s1)-1):\n        for j in range(i+1, len(s1)):\n            if s1[i] == s1[j]:\n                return True\n    return False\n    \ndef score_words(s1, s2):\n    '''\n    Write a function score_words that takes in two strings and returns the number of words in the first string that appear in the second string.\n    '''\n    if len(s1) == 0:\n        return 0\n    if len(s1) == 0:\n        return 0\n    s1 = s1.split()\n    s2 = s2.split()\n    i = 0\n    for x in s1:\n        if x in s2:\n            i += 1\n    return i\n    \ndef score_words_no_lists(s1, s2):\n    '''\n    Write a function score_words_no_lists that takes in two strings and returns the number of words in the first string that appear in the second string.\n    '''\n    if len(s1) == 0:\n        return 0\n    if len(s1) == 0:\n        return 0\n    s1 = s1.split()\n    s2 = s2.split()\n    i = 0\n    for x in s1:\n        if x in s2:\n            i += 1\n    return i\n    \ndef remove_punctuation(s1):\n    '''\n    Write a function remove_punctuation that takes in a string and returns a string without the punctuation characters in it.\n    '''\n    s1 = list(s1)\n    for i in range(0, len(s1)):\n        if s1[i] in punctuation:\n            s1.pop(i)\n    s1 = ''.join(s1)\n    return s1\n    \ndef remove_punctuation_no_lists(s1):\n    '''\n    Write a function remove_punctuation_no_lists that takes in a string and returns a string without the punctuation characters in it.\n    '''\n    s1 = s1.replace(',', '')\n    s1 = s1.replace('.', '')\n    s1 = s1.replace('!', '')\n    s1 = s1.replace('?', '')\n    s1 = s1.replace(';', '')\n    return s1\n    \ndef is_even(n):\n    '''\n    Write a function is_even that takes in an integer and returns True if the integer is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_even_no_lists(n):\n    '''\n    Write a function is_even_no_lists that takes in an integer and returns True if the integer is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef min_max(l1):\n    '''\n    Write a function min_max that takes in a list and returns a tuple of the minimum and maximum numbers in the list.\n    '''\n    if len(l1) == 0:\n        return (None, None)\n    min = l1[0]\n    max = l1[0]\n    for i in range(1, len(l1)):\n        if l1[i] "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first = []\n    second = []\n    for i in range(len(list1)):\n        if i < len(list1) - L:\n            first.append(list1[i])\n        else:\n            second.append(list1[i])\n    return (first, second)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    while len(list1)>L:\n        list2.append(list1[0])\n        del list1[0]\n    list2.append(list1[0])\n    del list1[0]\n    return (list2,list1)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Using two pointers and a counter\n    \n    # First pointer\n    first_pointer = 0\n    \n    # Second pointer\n    second_pointer = L\n    \n    # Create empty list\n    list_two = []\n    \n    # Loop through the entire list\n    while first_pointer < len(list1):\n    \n        # If the first pointer meets the second pointer, add the items to the list\n        if first_pointer < second_pointer:\n            list_two.append(list1[first_pointer])\n            first_pointer += 1\n        \n        # If the first pointer meets the second pointer, add the items to the list\n        elif first_pointer == second_pointer:\n            list_two.append(list1[first_pointer])\n            first_pointer += 1\n            second_pointer += 1\n    \n    # Return the list\n    return(list_two)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n    \n    "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[i:i+L] for i in range(0, len(list1), L)]\n    \ndef split_two_parts2(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return tuple(list1[i:i+L] for i in range(0, len(list1), L))\n    \n    \n    \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #Get the length of the list\n    n = len(list1)\n    #Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    x = len(list1)\n    first_part = list1[:x//2]\n    second_part = list1[x//2:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return ([list1[:L], list1[L:]])\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age/7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Your code here\n    # convert h_age in dog's years into human readable form\n    if h_age <= 0:\n        return \"You didn't enter a correct dog's age\"\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age / 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age)!= int and type(h_age)!= float:\n        return None\n    else:\n        return h_age/7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return ((h_age * 7) + 5)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    if S == [] or S == None:\n        return []\n    \n    if step == 0 or step == 1:\n        return [S]\n    \n    i = 0\n    split = []\n    \n    while i < len(S):\n        split.append(S[i:i+step])\n        i += step\n    \n    return split\n    "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    sub_list = []\n    for i in range(len(S)):\n        if i % step == 0:\n            if not sub_list:\n                new_list.append(S[:i])\n                S = S[i:]\n            else:\n                sub_list.append(S[:i])\n                S = S[i:]\n                new_list.append(sub_list)\n                sub_list = []\n    new_list.append(sub_list)\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    L = []\n    \n    if len(S) % step == 0:\n        for i in range(0, len(S), step):\n            L.append(S[i:i+step])\n            \n    else:\n        print('invalid')\n    \n    return L\n    \n    \ndef first_two(S):\n    '''\n    Write a function that takes in a string and returns a string that contains the first two characters of the string. If the length of the string is less than 2, return the string itself.\n    '''\n    \n    if len(S) < 2:\n        return S\n    else:\n        return S[:2]\n    \n    \ndef first_four(S):\n    '''\n    Write a function that takes in a string and returns a string that contains the first four characters of the string. If the length of the string is less than 4, return the string itself.\n    '''\n    \n    if len(S) < 4:\n        return S\n    else:\n        return S[:4]\n    \n    \ndef four_plus(S):\n    '''\n    Write a function that takes in a string and returns a string that contains only the characters from the string's first three characters, and then adds 'plus' onto the end. If the length of the string is less than 4, return the string itself.\n    '''\n    \n    if len(S) < 4:\n        return S\n    else:\n        return S[:3] + 'plus'\n    \n    \ndef letters_only(S):\n    '''\n    Write a function that takes in a string and returns a string made of only the letters in the string. If there are no letters in the string, return the string itself.\n    '''\n    \n    letters = ''\n    \n    for i in S:\n        if i.isalpha():\n            letters += i\n    \n    return letters\n    \n    \ndef all_caps(S):\n    '''\n    Write a function that takes in a string and returns a string made of all of the uppercase letters in the string. If there are no uppercase letters in the string, return the string itself.\n    '''\n    \n    caps = ''\n    \n    for i in S:\n        if i.isupper():\n            caps += i\n    \n    return caps\n    \n    \ndef some_caps(S):\n    '''\n    Write a function that takes in a string and returns a string made of all of the uppercase letters in the string, but no more than the first 5. If there are less than 5 uppercase letters, return the string itself.\n    '''\n    \n    if len(S) >= 5:\n        return S[:5]\n    else:\n        return S\n        \n        \ndef long_words(S):\n    '''\n    Write a function that takes in a string and returns a string with each word longer than 5 characters, with the first character in each word at the beginning. If there are no words in the string, return the string itself.\n    '''\n    \n    words = ''\n    \n    for i in S.split(' '):\n        if len(i) > 5:\n            words += i[0] +'' + i[1:]\n            \n    return words\n    \n    \ndef add_1(S):\n    '''\n    Write a function that takes in a string and returns a string where for every character in the string, there are two characters. For example, 'hello' returns 'hhollo'.\n    '''\n    \n    return S + S\n    \n    \ndef double_char(S):\n    '''\n    Write a function that takes in a string and returns a string where for every character in the string, there are two characters. For example, 'hello' returns 'hheellooo'.\n    '''\n    \n    return S * 2\n    \n    \ndef split_every(S, n):\n    '''\n    Write a function that takes in a string and returns a list of all of the substrings of the string.\n    '''\n    \n    splits = []\n    \n    for i in range(0, len(S), n):\n        splits.append(S[i:i+n])\n        \n    return splits\n    \n    \ndef replace(S, old, new):\n    '''\n    Write a function that takes in a string and two strings, old and new, and replaces all instances of old in the string with new.\n    '''\n    \n    S = S.replace(old, new)\n    \n    return S\n    \n    \ndef not_string(S):\n    '''\n    Write a function that takes a string and returns a new string that is the reverse of the old string.\n    '''\n    \n    return S[::-1]\n    \n    \ndef front_times(S, n):\n    '''\n    Write a function that takes in a string and an integer, n, and returns a new string that is the front n characters of the original string.\n    '''\n    \n    return S[:n]\n    \n    \ndef front_four(S):\n    '''\n    Write a function that takes in a string and returns a new string that is the front four characters of the original string.\n    '''\n    \n    return S[:4]\n    \n    \ndef last_four(S):\n    '''\n    Write a function that takes in a string and returns a new string that is the last four characters of the original string.\n    '''\n    \n    return S[-4:]\n    \n    \ndef front_back(S):\n    '''\n    Write a function that takes in a string and returns a new string that is the front and back of the string alternately.\n    '''\n    \n    return S[:1] + S[-1:] + S[1:-1]\n    \n    \ndef front3(S):\n    '''\n    Write a function that takes in a string and returns a new string that is the first three characters of the original string. If the length of the string is less than 3 characters, return the string itself.\n    '''\n    \n    if len(S) < 3:\n        return S\n    else:\n        return S[:3]\n    \n    \ndef front3_2(S):\n    '''\n    Write a function that takes in a string and returns a new string that is the last three characters of the original string. If the length of the string is less than 3 characters, return the string itself.\n    '''\n    \n    if len(S) < 3:\n        return S\n    else:\n        return S[-3:]\n    \n    \ndef string_split(S):\n    '''\n    Write a function that takes in a string and returns a new string made of every other character in the original string. If there are an even number of characters in the string, split the string on the last character and return a list containing each substring. If there are an odd number of characters, return a list with the first and last characters.\n    '''\n    \n    return S[::2]\n    \n    \ndef front_times(S, n):\n    '''\n    Write a function that takes in a string and an integer n and returns a new string made of the first n characters of the original string, so if you call it like this:\n    string_times('Hi', 2) it should return the string 'HiHi'. You can assume that n will always be a valid input (ie. no casting issues).\n    '''\n    \n    return S[:n]\n    \n    \ndef front_times_2(S, n):\n    '''\n    Write a function that takes in a string and an integer n and returns a new string made of the first n characters of the original string, so if you call it like this:\n    string_times('Hi', 2) it should return the string 'HiHi'. You can assume that n will always be a valid input (ie. no casting issues).\n    '''\n    \n    return S[:n] + S[:n]\n    \n    \ndef string_splosion(S):\n    '''\n    Write a function that takes in a string and returns a new string made up of all the characters in the original string, with each character duplicated n times, so 'abc' yields 'abcabcabc'. You can assume that n will always be a valid input (ie. no casting issues).\n    '''\n    \n    if len(S) < 1:\n        return S\n    else:\n        return S[0] + S * len(S)\n    \n    \ndef string_splosion_2(S):\n    ''"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # make a copy of the original list\n    n_copy = len(S)\n    s_copy = S[:]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        return []\n    if not S:\n        return [[]]\n    elif S[0] % step!= 0:\n        return [[S[0]] + list_split(S[1:], step)]\n    else:\n        return list_split(S[1:], step) + [[S[0]] + list_split(S[1:], step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return ([S[x:x+step] for x in range(0,len(S),step)])\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if S is None or step == 0:\n        return []\n    if step is None or step < 0:\n        return []\n    if step > len(S):\n        return []\n    return (list_split(s, step) for s in S)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #l = input()\n    l = float(l)\n    #print(l)\n    #print(\"Surface Area :\", l**2)\n    return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l**2)*3\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    s = l * 6\n    return s * (s - 2 * math.sqrt(3)) / 3\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 2*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(l*6)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert l>=0\n    if l==0:\n        return 0\n    return (l**2)+(l-2)*(l-1)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l < 0:\n        print(\"Input error: The side length of a cube must be positive\")\n        return 0\n    if l == 0:\n        return 6\n    return ((2 * l ** 2) + 6 * l + 5) / 2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert l > 0, 'Side length must be a positive integer.'\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # def lateralsurface_cube(l):\n    #     total_surface = 6 * l * l\n    #     return total_surface\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if(n==0):\n        return 0\n    return (n*(n+1))/2\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\nprint(square_Sum(10))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n,n+1):\n        if i%2!=0:\n            sum+=i*i\n    return sum\n        \ndef sub_tuple(list_numbers):\n    '''\n    Write a python function that takes a list of numbers and returns a tuple containing the minimum and maximum numbers in the list.\n    '''\n    min_number=min(list_numbers)\n    max_number=max(list_numbers)\n    return (min_number,max_number)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n):\n        ans += (i*i)%100\n    return ans\n    "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += (i**2)%1000000007\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Python3 Program to sum even numbers in a range\n    # of 1 to n\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n    \nprint(square_Sum(5))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum=0\n    \n    for i in range(1,n+1):\n        if(i%2!=0):\n            sum=sum+i**2\n    return sum\n    "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 9\n    else:\n        return (3*find_star_num(n-1)) + 9\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return(math.floor((2*n)**0.5-0.5))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = ['*']\n    n -= 1\n    for i in range(len(star)-1, -1, -1):\n        if i == n:\n            return star[i]\n        star.insert(0, star.pop())\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 15\n    if n == 7:\n        return 21\n    if n == 8:\n        return 28\n    if n == 9:\n        return 36\n    if n == 10:\n        return 45\n    if n == 11:\n        return 55\n    if n == 12:\n        return 66\n    if n == 13:\n        return 78\n    if n == 14:\n        return 86\n    if n == 15:\n        return 93\n    if n == 16:\n        return 100\n    if n == 17:\n        return 108\n    if n == 18:\n        return 114\n    if n == 19:\n        return 120\n    if n == 20:\n        return 128\n    if n == 21:\n        return 135\n    if n == 22:\n        return 141\n    if n == 23:\n        return 147\n    if n == 24:\n        return 153\n    if n == 25:\n        return 159\n    if n == 26:\n        return 165\n    if n == 27:\n        return 171\n    if n == 28:\n        return 177\n    if n == 29:\n        return 183\n    if n == 30:\n        return 189\n    if n == 31:\n        return 195\n    if n == 32:\n        return 201\n    if n == 33:\n        return 207\n    if n == 34:\n        return 213\n    if n == 35:\n        return 219\n    if n == 36:\n        return 225\n    if n == 37:\n        return 231\n    if n == 38:\n        return 237\n    if n == 39:\n        return 243\n    if n == 40:\n        return 249\n    if n == 41:\n        return 255\n    if n == 42:\n        return 261\n    if n == 43:\n        return 267\n    if n == 44:\n        return 273\n    if n == 45:\n        return 279\n    if n == 46:\n        return 285\n    if n == 47:\n        return 291\n    if n == 48:\n        return 297\n    if n == 49:\n        return 303\n    if n == 50:\n        return 309\n    if n == 51:\n        return 315\n    if n == 52:\n        return 321\n    if n == 53:\n        return 327\n    if n == 54:\n        return 333\n    if n == 55:\n        return 339\n    if n == 56:\n        return 345\n    if n == 57:\n        return 351\n    if n == 58:\n        return 357\n    if n == 59:\n        return 363\n    if n == 60:\n        return 369\n    if n == 61:\n        return 375\n    if n == 62:\n        return 381\n    if n == 63:\n        return 387\n    if n == 64:\n        return 393\n    if n == 65:\n        return 399\n    if n == 66:\n        return 405\n    if n == 67:\n        return 411\n    if n == 68:\n        return 417\n    if n == 69:\n        return 423\n    if n == 70:\n        return 429\n    if n == 71:\n        return 435\n    if n == 72:\n        return 441\n    if n == 73:\n        return 447\n    if n == 74:\n        return 453\n    if n == 75:\n        return 459\n    if n == 76:\n        return 466\n    if n == 77:\n        return 471\n    if n == 78:\n        return 477\n    if n == 79:\n        return 483\n    if n == 80:\n        return 489\n    if n == 81:\n        return 495\n    if n == 82:\n        return 501\n    if n == 83:\n        return 507\n    if n == 84:\n        return 513\n    if n == 85:\n        return 519\n    if n == 86:\n        return 525\n    if n == 87:\n        return 531\n    if n == 88:\n        return 537\n    if n == 89:\n        return 543\n    if n == 90:\n        return 549\n    if n == 91:\n        return 556\n    if n == 92:\n        return 562\n    if n == 93:\n        return 568\n    if n == 94:\n        return 574\n    if n == 95:\n        return 581\n    if n == 96:\n        return 587\n    if n == 97:\n        return 593\n    if n == 98:\n        return 599\n    if n == 99:\n        return 605\n    if n == 100:\n        return 611\n    if n == 101:\n        return 617\n    if n == 102:\n        return 623\n    if n == 103:\n        return 629\n    if n == 104:\n        return 634\n    if n == 105:\n        return 640\n    if n == 106:\n        return 646\n    if n == 107:\n        return 652\n    if n == 108:\n        return 658\n    if n == 109:\n        return 664\n    if n == 110:\n        return 670\n    if n == 111:\n        return 677\n    if n == 112:\n        return 683\n    if n == 113:\n        return 689\n    if n == 114:\n        return 695\n    if n == 115:\n        return 701\n    if n == 116:\n        return 707\n    if n == 117:\n        return 713\n    if n == 118:\n        return 719\n    if n == 119:\n        return 725\n    if n == 120:\n        return 731\n    if n == 121:\n        return 737\n    if n == 122:\n        return 743\n    if n == 123:\n        return 749\n    if n == 124:\n        return 755\n    if n == 125:\n        return 761\n    if n == 126:\n        return 767\n    if n == 127:\n        return 773\n    if n == 128:\n        return 779\n    if n == 129:\n        return 785\n    if n == 130:\n        return 791\n    if n == 131:\n        return 797\n    if n == 132:\n        return 803\n    if n == 133:\n        return 809\n    if n == 134:\n        return 815\n    if n == 135:\n        return 821\n    if n == 136:\n        return 827\n    if n == 137:\n        return 833\n    if n == 138:\n        return 839\n    if n == 139:\n        return 845\n    if n == 140:\n        return 851\n    if n == 141:\n        return 857\n    if n == 142:\n        return 863\n    if n == 143:\n        return 869\n    if n == 144:\n        return 875\n    if n == 145:\n        return 881\n    if n == 146:\n        return 887\n    if n == 147:\n        return 893\n    if n == 148:\n        return 899\n    if n == 149:\n        return 905\n    if n == 150:\n        return 911\n    if n == 151:\n        return 917\n    if n == 152:\n        return 923\n    if n == 153:\n        return 929\n    if n == 154:\n        return 935\n    if n == 155:\n        return 941\n    if n == 156:\n        return 947\n    if n == 157:\n        return 953\n    if n == 158:\n        return 959\n    if n == 159:\n        return 965\n    if n == 160:\n        return 971\n    if n == 161:\n        return 977\n    if n == 162:\n        return 983\n    if n == 163:\n        return 989\n    if n == 164:\n        return 995\n    if n == 165:\n        return 1001\n    if n == 166:\n        return 1007\n    if n == 167:\n        return 1013\n    if n == 168:\n        return 1019\n    if n == 169:\n        return 1025\n    if n == 170:\n        return 1031\n    if n == 171:\n        return 1037\n    if n == 172:\n        return 1043\n    if n == 173:\n        return 1049\n    if n ="
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 0\n    while n > 0:\n        star_num += 1\n        n -= 1\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    while(num < n):\n        num = num + 1\n        print('The'+ str(num) +'st star number is'+ str(n*(n+1)/2))\n    return\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = str(n)\n    a = 0\n    for i in range(len(n)):\n        a += int(n[i])\n    return a\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (int(n)) * (int(n)) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    assert n>0, \"number should be greater than zero\"\n    if n==1:\n        return 1\n    else:\n        return n*(n-1)//2+1\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    assert(isinstance(k, str))\n    if ord(k) > 126:\n        raise ValueError('chr() argument must be a integer or a character between 32 and 126.')\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = []\n    even_index = []\n    for i in range(len(arr)):\n        if i%2==0:\n            even_list.append(arr[i])\n            even_index.append(i)\n    sum_even_list = sum(even_list)\n    print(even_list)\n    print(even_index)\n    print(sum_even_list)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            even_sum += arr[i]\n            even_index_sum += i\n    print(even_sum)\n    print(even_index_sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            even_sum+=arr[i]\n            \n    return even_sum\n    \nprint(sum_even_and_even_index([1,2,3,4,5]))\nprint(sum_even_and_even_index([10,20,30,40,50]))\nprint(sum_even_and_even_index([10,11,12,13,14]))\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    i = 0\n    while i < len(arr):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            result += arr[i]\n        i += 1\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    ans = 0\n    for i in range(0,len(arr)):\n        if (i%2 == 0):\n            ans = ans + arr[i]\n    return ans\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and i!= 0:\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for i in range(0,len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n        else:\n            odd_sum += arr[i]\n    return (even_sum, odd_sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    if len(arr) > 1:\n        for i in range(0,len(arr)):\n            if i % 2 == 0:\n                even_sum += arr[i]\n        return even_sum\n    else:\n        return False\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum = sum + (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            sum = sum + (i**5)\n            \n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    Sum = 0\n    for i in range(n): \n        if i%2==0:\n            Sum += i**5\n    return Sum\n    \nprint(even_Power_Sum(6))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # example: even_Power_Sum(6) = 1025\n    # first, we start with an empty list\n    L = []\n    \n    # if n is less than 5, return n\n    if n < 5:\n        return n\n    \n    # iterate from 1 to n\n    for i in range(1, n + 1):\n        \n        # if i is even, add i to the list\n        if i % 2 == 0:\n            L.append(i)\n        \n        # if i is not even, continue with the loop\n        else:\n            continue\n        \n        # calculate the sum\n        L_summation = sum(L)\n        \n        # print the output\n        print(L_summation)\n    \n    return L_summation\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum = sum + pow(i, 5)\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += pow(i, 5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 5\n    return (n*(n+1)**i)//2\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum=sum+(i**5)\n    print(sum)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*(n*n*n*n)+(even_Power_Sum(n-1))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #Declare a new list\n    new_list = []\n    \n    #Iterate through the list\n    for tuple in test_list:\n        #Append the rear element of each tuple to the new list\n        new_list.append(tuple[-1])\n    \n    #Return the new list\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][2])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for tup in test_list:\n        return_list.append(tup[1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    temp = []\n    for i in range(len(test_list)):\n        temp.append(test_list[i][1])\n    return temp\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x:x[-1],test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem[-1] for elem in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return(tuple(map(lambda x, y: x-y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(0, len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n    \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns a tuple with the elements of the first tuple multiplied by the elements of the second tuple.\n    '''\n    product = []\n    for i in range(0, len(test_tup1)):\n        product.append(test_tup1[i] * test_tup2[i])\n    return product\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    i = 0\n    while i < len(test_tup1):\n        sub_tup = test_tup1[:i] + (test_tup1[i] - test_tup2[i], ) + test_tup1[i+1:]\n        i += 1\n    return sub_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup += (test_tup1[i] - test_tup2[i],)\n    return sub_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtracted_tuple = ()\n    for i in range(len(test_tup1)):\n        subtracted_tuple += (test_tup1[i] - test_tup2[i],)\n    return subtracted_tuple\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = test_tup1[::]\n    test_tup2 = test_tup2[::]\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        sub = []\n        for i in range(len(test_tup1)):\n            sub.append(test_tup1[i]-test_tup2[i])\n        return tuple(sub)\n    else:\n        print(\"ERROR\")\n        return False\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    for i in range(len(lst1)):\n        lst1[i] = lst1[i]-lst2[i]\n    return tuple(lst1)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = [1]\n    for i in range(1, n + 1):\n        even_index_binomial_coeff = (i * binomial_coeff[-2]) / (i + 1)\n        binomial_coeff.append(even_index_binomial_coeff)\n    print(sum(binomial_coeff[2::2])) \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0.0\n    for i in range(n+1):\n        if i%2 == 0:\n            sum += math.factorial(i) * math.pow(2,i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    Even_Binomial_Coeff = 0\n    k = 2\n    while k <= n:\n        Even_Binomial_Coeff += (math.factorial(n) / (math.factorial(k) * math.factorial(n - k)))\n        k += 1\n    return int(Even_Binomial_Coeff)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0; i = 0; a = 1\n    while i < n+1:\n        c += a\n        i += 1\n        a *= 2\n    return c\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(0, n):\n        sum += binomial_coeff(k,2)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n + 1):\n        sum = sum + math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) \n    return sum\nprint(even_binomial_Coeff_Sum(5))\nprint(even_binomial_Coeff_Sum(6))\nprint(even_binomial_Coeff_Sum(7))\nprint(even_binomial_Coeff_Sum(8))\nprint(even_binomial_Coeff_Sum(9))\nprint(even_binomial_Coeff_Sum(10))\nprint(even_binomial_Coeff_Sum(11))\nprint(even_binomial_Coeff_Sum(12))\nprint(even_binomial_Coeff_Sum(13))\nprint(even_binomial_Coeff_Sum(14))\nprint(even_binomial_Coeff_Sum(15))\nprint(even_binomial_Coeff_Sum(16))\nprint(even_binomial_Coeff_Sum(17))\nprint(even_binomial_Coeff_Sum(18))\nprint(even_binomial_Coeff_Sum(19))\nprint(even_binomial_Coeff_Sum(20))\nprint(even_binomial_Coeff_Sum(21))\nprint(even_binomial_Coeff_Sum(22))\nprint(even_binomial_Coeff_Sum(23))\nprint(even_binomial_Coeff_Sum(24))\nprint(even_binomial_Coeff_Sum(25))\nprint(even_binomial_Coeff_Sum(26))\nprint(even_binomial_Coeff_Sum(27))\nprint(even_binomial_Coeff_Sum(28))\nprint(even_binomial_Coeff_Sum(29))\nprint(even_binomial_Coeff_Sum(30))\nprint(even_binomial_Coeff_Sum(31))\nprint(even_binomial_Coeff_Sum(32))\nprint(even_binomial_Coeff_Sum(33))\nprint(even_binomial_Coeff_Sum(34))\nprint(even_binomial_Coeff_Sum(35))\nprint(even_binomial_Coeff_Sum(36))\nprint(even_binomial_Coeff_Sum(37))\nprint(even_binomial_Coeff_Sum(38))\nprint(even_binomial_Coeff_Sum(39))\nprint(even_binomial_Coeff_Sum(40))\nprint(even_binomial_Coeff_Sum(41))\nprint(even_binomial_Coeff_Sum(42))\nprint(even_binomial_Coeff_Sum(43))\nprint(even_binomial_Coeff_Sum(44))\nprint(even_binomial_Coeff_Sum(45))\nprint(even_binomial_Coeff_Sum(46))\nprint(even_binomial_Coeff_Sum(47))\nprint(even_binomial_Coeff_Sum(48))\nprint(even_binomial_Coeff_Sum(49))\nprint(even_binomial_Coeff_Sum(50))\nprint(even_binomial_Coeff_Sum(51))\nprint(even_binomial_Coeff_Sum(52))\nprint(even_binomial_Coeff_Sum(53))\nprint(even_binomial_Coeff_Sum(54))\nprint(even_binomial_Coeff_Sum(55))\nprint(even_binomial_Coeff_Sum(56))\nprint(even_binomial_Coeff_Sum(57))\nprint(even_binomial_Coeff_Sum(58))\nprint(even_binomial_Coeff_Sum(59))\nprint(even_binomial_Coeff_Sum(60))\nprint(even_binomial_Coeff_Sum(61))\nprint(even_binomial_Coeff_Sum(62))\nprint(even_binomial_Coeff_Sum(63))\nprint(even_binomial_Coeff_Sum(64))\nprint(even_binomial_Coeff_Sum(65))\nprint(even_binomial_Coeff_Sum(66))\nprint(even_binomial_Coeff_Sum(67))\nprint(even_binomial_Coeff_Sum(68))\nprint(even_binomial_Coeff_Sum(69))\nprint(even_binomial_Coeff_Sum(70))\nprint(even_binomial_Coeff_Sum(71))\nprint(even_binomial_Coeff_Sum(72))\nprint(even_binomial_Coeff_Sum(73))\nprint(even_binomial_Coeff_Sum(74))\nprint(even_binomial_Coeff_Sum(75))\nprint(even_binomial_Coeff_Sum(76))\nprint(even_binomial_Coeff_Sum(77))\nprint(even_binomial_Coeff_Sum(78))\nprint(even_binomial_Coeff_Sum(79))\nprint(even_binomial_Coeff_Sum(80))\nprint(even_binomial_Coeff_Sum(81))\nprint(even_binomial_Coeff_Sum(82))\nprint(even_binomial_Coeff_Sum(83))\nprint(even_binomial_Coeff_Sum(84))\nprint(even_binomial_Coeff_Sum(85))\nprint(even_binomial_Coeff_Sum(86))\nprint(even_binomial_Coeff_Sum(87))\nprint(even_binomial_Coeff_Sum(88))\nprint(even_binomial_Coeff_Sum(89))\nprint(even_binomial_Coeff_Sum(90))\nprint(even_binomial_Coeff_Sum(91))\nprint(even_binomial_Coeff_Sum(92))\nprint(even_binomial_Coeff_Sum(93))\nprint(even_binomial_Coeff_Sum(94))\nprint(even_binomial_Coeff_Sum(95))\nprint(even_binomial_Coeff_Sum(96))\nprint(even_binomial_Coeff_Sum(97))\nprint(even_binomial_Coeff_Sum(98))\nprint(even_binomial_Coeff_Sum(99))\nprint(even_binomial_Coeff_Sum(100))\nprint(even_binomial_Coeff_Sum(101))\nprint(even_binomial_Coeff_Sum(102))\nprint(even_binomial_Coeff_Sum(103))\nprint(even_binomial_Coeff_Sum(104))\nprint(even_binomial_Coeff_Sum(105))\nprint(even_binomial_Coeff_Sum(106))\nprint(even_binomial_Coeff_Sum(107))\nprint(even_binomial_Coeff_Sum(108))\nprint(even_binomial_Coeff_Sum(109))\nprint(even_binomial_Coeff_Sum(110))\nprint(even_binomial_Coeff_Sum(111))\nprint(even_binomial_Coeff_Sum(112))\nprint(even_binomial_Coeff_Sum(113))\nprint(even_binomial_Coeff_Sum(114))\nprint(even_binomial_Coeff_Sum(115))\nprint(even_binomial_Coeff_Sum(116))\nprint(even_binomial_Coeff_Sum(117))\nprint(even_binomial_Coeff_Sum(118))\nprint(even_binomial_Coeff_Sum(119))\nprint(even_binomial_Coeff_Sum(120))\nprint(even_binomial_Coeff_Sum(121))\nprint(even_binomial_Coeff_Sum(122))\nprint(even_binomial_Coeff_Sum(123))\nprint(even_binomial_Coeff_Sum(124))\nprint(even_binomial_Coeff_Sum(125))\nprint(even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a=0\n    c=0\n    for i in range(0,n+1):\n        a=i*(2*i-1)\n        c=c+a\n    print(c)\n    \ndef sum_of_squares_of_factors(n): \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of each of the factors of n.\n    '''\n    c=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i==0):\n            c=c+(i**2)\n    print(c)\n    \ndef sum_of_factors(n): \n    '''\n    Write a python function that takes in an integer n and returns the sum of the factors of n.\n    '''\n    c=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            c=c+i\n    print(c)\n    \ndef sum_of_divisors(n): \n    '''\n    Write a python function that takes in an integer n and returns the sum of the factors of n.\n    '''\n    c=0\n    for i in range(1,int(n/2)+1):\n        if(n%i==0):\n            c=c+i\n    print(c)\n    \ndef sum_of_divisors_of_factors(n): \n    '''\n    Write a python function that takes in an integer n and returns the sum of the factors of n.\n    '''\n    c=0\n    for i in range(1,int(n/2)+1):\n        if(n%i==0):\n            c=c+i\n    return(c)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(n):\n        result += math.factorial(i) / math.factorial(2 * i + 1)\n    return result\nprint(even_binomial_Coeff_Sum(10))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeffs = list()\n    for i in range(n+1):\n        if i % 2 == 0:\n            even_binomial_coeffs.append(math.factorial(2*i)/(math.factorial(i)*math.factorial(2*i-i)))\n    return sum(even_binomial_coeffs)\n    \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    print(volume)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159) * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (math.pi*r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n    \nprint(volume_cylinder(4,5))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi * (r**2)*(h/2)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #create a variable to store the volume\n    volume = 3.14*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume=round((math.pi*(r**2)*h),4)\n    print(volume)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi * r * r * h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d=[]\n    for k,v in dict.items():\n        if v>=n:\n            d.append(k)\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # create a new dictionary (like dict)\n    new_dict = {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            filtered_dict[k] = v\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #filter out dictionary with entries with values less than or equal to n\n    \n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,val in dict.items():\n        if val >= n:\n            new_dict[key] = val\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    #L = filter(lambda x: x > n, L)\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filtered = {}\n    for key, value in dict.items():\n        if value >= n:\n            dict_filtered[key] = value\n    return dict_filtered\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    else:\n        return test_tup[0:1] + count_first_elements(test_tup[1:])\n        \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([x for x in test_tup if x < test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup <= test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(min(test_tup))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for item in test_tup:\n        if test_tup.index(item) <= count:\n            count += 1\n        else:\n            return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i-1]!= test_tup[i]:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for elem in test_tup:\n        if test_tup.index(elem)==0:\n            count=1\n        else:\n            count=0\n            break\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0 or n == 1:\n        raise ValueError('Invalid n')\n    num = 0\n    for i in range(n):\n        num += i * (i+1)//2\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    res = []\n    for i in range(1, n+1):\n        dec = str(i * (i+1) // 2)\n        res.append(int(dec))\n    return res\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 1 \n    return n * (1 + n) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return 1 + is_num_decagonal(n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #n = int(input(\"Enter a number: \"))\n    if n == 1:\n        return 1\n    decagonals = [1,3,6,10,15,21,28,36,45,55,66,78,90,105,126,150,\n              181,201,226,264,360,441,571,678,789,900,1001,1250,\n              1500,1700,2000,2100,2400,2700,3000,3300,3600,4000,\n              4500,4800,5000,5400,6000,6400,6900,7800,9000,10000]\n    if n < len(decagonals):\n        return decagonals[n-1]\n    else:\n        return -1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1,n+1):\n        num *= 10\n        num -= (i*(i+1))/2\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0: return 1\n    return int((n*(n+1))/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(((n - 1) * (n + 1)) / 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = (1+5**0.5)/2\n    b = (1-5**0.5)/2\n    d = 1\n    total = 0\n    while n > 0:\n        n -= 1\n        total = total + 6*d\n        d += a - b\n        a = (1+5**0.5)/2\n        b = (1-5**0.5)/2\n    return total\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    return int(pow(n,1/3))\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if not dlist:\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist == []:\n        return False\n    if item == dlist[0]:\n        return (True,0)\n    for i in range(1,len(dlist)):\n        if item == dlist[i]:\n            return (True,i)\n    return False\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Create a boolean to track whether the item has been found\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Starting indices of each part of the list\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return found, index\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if val == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # for i in range(len(dlist)):\n    #     if dlist[i] == item:\n    #         return True, i\n    #     return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for num in test_list:\n        if num not in unique_list:\n            unique_list.append(num)\n    return len(unique_list) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    new_list = []\n    for i in test_list:\n        if i not in new_list:\n            new_list.append(i)\n    if new_list == test_list:\n        print(\"List contains all unique elements.\")\n    else:\n        print(\"List does not contain all unique elements.\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > 0:\n        return len(test_list) == len(set(test_list))\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create an empty list\n    unique_list = []\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i]==test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i]) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    check_set = set(test_list)\n    return len(test_list) == len(check_set)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1) - set(nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]\n    \nprint(sub_list([1,2,3,4], [3,4,5,6]))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(0, len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    list1 = list(nums1)\n    list2 = list(nums2)\n    \n    for i in range(0, len(nums1)):\n        list1[i] -= list2[i]\n    \n    return list1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1) - set(nums2))\n    \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list_diff = []\n    for num1, num2 in zip(nums1, nums2):\n        list_diff.append(num1 - num2)\n    return list_diff\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    nums1.sort()\n    nums2.sort()\n    for i in range(min(len(nums1),len(nums2))):\n        if nums1[i]!= nums2[i]:\n            result.append(nums2[i] - nums1[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i]-nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # if len(nums1) == 0 or len(nums2) == 0:\n    #     return []\n    # for i in range(len(nums1)):\n    #     nums1[i] -= nums2[i]\n    # return nums1\n    return list(map(lambda a,b:a-b,nums1,nums2))\n    \n    \n    \ndef divide_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    # if len(nums1) == 0 or len(nums2) == 0:\n    #     return []\n    # for i in range(len(nums1)):\n    #     nums1[i] = nums1[i]//nums2[i]\n    # return nums1\n    return list(map(lambda a,b:a//b,nums1,nums2))\n    \n    \n    \ndef div_list_2(nums1,nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    # if len(nums1) == 0 or len(nums2) == 0:\n    #     return []\n    # for i in range(len(nums1)):\n    #     nums1[i] = nums1[i]//nums2[i]\n    # return nums1\n    return list(map(lambda a,b:a%b,nums1,nums2))\n    \n    \n    \ndef is_palindrome(word):\n    '''\n    Write a function that returns True if word is a palindrome and False otherwise.\n    '''\n    # if len(word) == 0:\n    #     return True\n    # if len(word) == 1:\n    #     return True\n    # if len(word) == 2:\n    #     if word[0] == word[1]:\n    #         return True\n    #     else:\n    #         return False\n    # if word[0] == word[1] and is_palindrome(word[1:-1]):\n    #     return True\n    # else:\n    #     return False\n    return word == word[::-1]\n    \n    \n    \ndef is_palindrome_2(word):\n    '''\n    Write a function that returns True if word is a palindrome and False otherwise.\n    '''\n    # if len(word) == 0:\n    #     return True\n    # if len(word) == 1:\n    #     return True\n    # if len(word) == 2:\n    #     if word[0] == word[1]:\n    #         return True\n    #     else:\n    #         return False\n    # if word[0] == word[1] and is_palindrome_2(word[1:-1]):\n    #     return True\n    # else:\n    #     return False\n    return word == word[::-1]\n    \n    \n    \ndef find_sum_of_square_numbers(n):\n    '''\n    Write a function that returns the sum of the squares of the numbers from 1 to n.\n    '''\n    return sum(list(map(lambda x:x*x,range(1,n+1))))\n    \n    \n    \ndef find_sum_of_square_numbers_2(n):\n    '''\n    Write a function that returns the sum of the squares of the numbers from 1 to n.\n    '''\n    return sum(list(map(lambda x:x*x,range(1,n+1))))\n    \n    \n    \ndef find_sum_of_square_numbers_3(n):\n    '''\n    Write a function that returns the sum of the squares of the numbers from 1 to n.\n    '''\n    return sum(list(map(lambda x:x*x,range(1,n+1))))\n    \n    \n    \ndef find_sum_of_square_numbers_4(n):\n    '''\n    Write a function that returns the sum of the squares of the numbers from 1 to n.\n    '''\n    return sum(list(map(lambda x:x*x,range(1,n+1))))\n    \n    \n    \ndef find_sum_of_square_numbers_5(n):\n    '''\n    Write a function that returns the sum of the squares of the numbers from 1 to n.\n    '''\n    return sum(list(map(lambda x:x*x,range(1,n+1))))\n    \n    \n    \ndef find_sum_of_square_numbers_6(n):\n    '''\n    Write a function that returns the sum of the squares of the numbers from 1 to n.\n    '''\n    return sum(list(map(lambda x:x*x,range(1,n+1))))\n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if the number n is prime and False otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \n    \n    \ndef is_prime_2(n):\n    '''\n    Write a function that returns True if the number n is prime and False otherwise.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \n    \n    \ndef is_prime_3(n):\n    '''\n    Write a function that returns True if the number n is prime and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i == 0:\n            return False\n    return True\n    \n    \n    \ndef is_prime_4(n):\n    '''\n    Write a function that returns True if the number n is prime and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i == 0:\n            return False\n    return True\n    \n    \n    \ndef is_prime_5(n):\n    '''\n    Write a function that returns True if the number n is prime and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i == 0:\n            return False\n    return True\n    \n    \n    \ndef is_prime_6(n):\n    '''\n    Write a function that returns True if the number n is prime and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i == 0:\n            return False\n    return True\n    \n    \n    \ndef find_prime_factors(n):\n    '''\n    Write a function that returns a list of prime factors of the number n.\n    '''\n    return list(map(lambda x:x,filter(lambda x:x%n==0,range(2,n+1))))\n    \n    \ndef find_prime_factors_2(n):\n    '''\n    Write a function that returns a list of prime factors of the number n.\n    '''\n    return list(filter(lambda x:x%n==0,range(2,n+1)))\n    \n    \n    \ndef find_prime_factors_3(n):\n    '''\n    Write a function that returns a list of prime factors of the number n.\n    '''\n    return list(filter(lambda x:x%n==0"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #write your code here\n    count = {}\n    while n!= 0:\n        count[n%10] = count.get(n%10, 0) + 1\n        n = n//10\n    for k,v in count.items():\n        if v > k:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #code here\n    \n    \n    n=int(n)\n    \n    l=[]\n    \n    \n    for i in range(1,n+1):\n        \n        s=i\n        \n        while s!=0:\n            \n            rem=s%10\n            \n            if rem in l:\n                \n                return False\n            \n            else:\n                \n                l.append(rem)\n                \n            s=s//10\n            \n    return True\n        \n    \n    \n    \n    \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n = str(n)\n    temp = 0\n    for digit in str_n:\n        temp += int(digit)\n        if temp > int(digit):\n            print(\"Invalid Input\")\n            exit(1)\n    print(\"Valid Input\")\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = str(n)\n    d = {x:n.count(x) for x in set(n)}\n    return (d)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit = n\n    digit = str(digit)\n    count = 0\n    for i in range(len(digit)):\n        count += 1\n        count = count + int(digit[i])\n    return count <= int(digit)\nprint(validate(19))\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d={}\n    n=str(n)\n    for i in range(10):\n        d[i]=n.count(str(i))\n    for i in range(10):\n        if d[i]>=i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    for i in range(len(s)):\n        if s.count(s[i])>=s.count(s[i]):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {} \n    \n    while n > 0: \n        temp = n%10\n        if temp in freq: \n            freq[temp] += 1\n        else: \n            freq[temp] = 1\n        n = n//10\n        \n    for key in freq.keys(): \n        if freq[key] > key: \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    if n == 0:\n        return False\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for key in freq:\n        if freq[key] > freq[key] - 1:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    strn = str(n)\n    for i in range(0,len(strn)):\n        if(strn.count(strn[i]) > 1):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if len(list) == 1:\n        return True if list[0] == element else False\n    if list[0] == element:\n        return check_element(list[1:],element)\n    if list[-1] == element:\n        return check_element(list[:-1],element)\n    return check_element(list[1:],element) or check_element(list[:-1],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if(list[i]!=element):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return True if all(item == element for item in list) else False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list == element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    result = True\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            result = False\n    return result\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list == [] or element in list\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if not isinstance(list,list):\n        raise TypeError\n    if len(list) == 0:\n        return False\n    for element in list:\n        if element == element:\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.findall('ab+|ab{2,3}',text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO: Write your function here\n    if re.search(r'ab*', text):\n        return True\n    return False\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_list = list(text)\n    if len(text_list) == 1:\n        return 'N/A'\n    if len(text_list) == 2:\n        if text_list[0] == 'b' and text_list[1] == 'b':\n            return 'YES'\n        else:\n            return 'NO'\n    if len(text_list) == 3:\n        if text_list[0] == 'b' and text_list[1] == 'b' and text_list[2] == 'b':\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search('ab+b', text)\n    return match\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    match = re.search('ab{3}', text)\n    return match\ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    match = re.search('ab{4}', text)\n    return match\ndef text_match_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    match = re.search('ab{5}', text)\n    return match\ndef text_match_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    match = re.search('ab{6}', text)\n    return match\ndef text_match_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    match = re.search('ab{7}', text)\n    return match\ndef text_match_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eight 'b' characters.\n    '''\n    match = re.search('ab{8}', text)\n    return match\ndef text_match_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    match = re.search('ab{9}', text)\n    return match\ndef text_match_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by ten 'b' characters.\n    '''\n    match = re.search('ab{10}', text)\n    return match\ndef text_match_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    match = re.search('ab{11}', text)\n    return match\ndef text_match_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve 'b' characters.\n    '''\n    match = re.search('ab{12}', text)\n    return match\ndef text_match_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirteen 'b' characters.\n    '''\n    match = re.search('ab{13}', text)\n    return match\ndef text_match_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fourteen 'b' characters.\n    '''\n    match = re.search('ab{14}', text)\n    return match\ndef text_match_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fifteen 'b' characters.\n    '''\n    match = re.search('ab{15}', text)\n    return match\ndef text_match_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by sixteen 'b' characters.\n    '''\n    match = re.search('ab{16}', text)\n    return match\ndef text_match_seventeen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seventeen 'b' characters.\n    '''\n    match = re.search('ab{17}', text)\n    return match\ndef text_match_eighteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eighteen 'b' characters.\n    '''\n    match = re.search('ab{18}', text)\n    return match\ndef text_match_nineteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nineteen 'b' characters.\n    '''\n    match = re.search('ab{19}', text)\n    return match\ndef text_match_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty 'b' characters.\n    '''\n    match = re.search('ab{20}', text)\n    return match\ndef text_match_twentyone(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty-one 'b' characters.\n    '''\n    match = re.search('ab{21}', text)\n    return match\ndef text_match_twentytwo(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty-two 'b' characters.\n    '''\n    match = re.search('ab{22}', text)\n    return match\ndef text_match_twentythree(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty-three 'b' characters.\n    '''\n    match = re.search('ab{23}', text)\n    return match\ndef text_match_twentyfour(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty-four 'b' characters.\n    '''\n    match = re.search('ab{24}', text)\n    return match\ndef text_match_twentyfive(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty-five 'b' characters.\n    '''\n    match = re.search('ab{25}', text)\n    return match\ndef text_match_twentysix(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty-six 'b' characters.\n    '''\n    match = re.search('ab{26}', text)\n    return match\ndef text_match_twentyseven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty-seven 'b' characters.\n    '''\n    match = re.search('ab{27}', text)\n    return match\ndef text_match_twentyeight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty-eight 'b' characters.\n    '''\n    match = re.search('ab{28}', text)\n    return match\ndef text_match_twentynine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty-nine 'b' characters.\n    '''\n    match = re.search('ab{29}', text)\n    return match\ndef text_match_thirty(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirty 'b' characters.\n    '''\n    match = re.search('ab{30}', text)\n    return match\ndef text_match_thirtyone(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirty-one 'b' characters.\n    '''\n    match = re.search('ab{31}', text)\n    return match\ndef text_match_thirtytwo(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirty-two 'b' characters.\n    '''\n    match = re.search('ab{32}', text)\n    return match\ndef text_match_thirtythree(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirty-three 'b' characters.\n    '''\n    match = re.search('ab{33}', text)\n    return match\ndef text_match_thirtyfour(text):\n    '''\n    Write a function that checks whether a string contains the '"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.match(r'^(a{2,}|a{3,})',text))\n    \nprint(text_match_two_three(\"aabbccdd\"))\nprint(text_match_two_three(\"aabbcccdd\"))\nprint(text_match_two_three(\"aaaabbbbcccdddd\"))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # make sure it is string\n    if type(text)!= str:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('^ab+', text):\n        print('yes')\n    else:\n        print('no')\n    # print(re.match('^ab+', 'ab'))\n    # print(re.match('^ab+', 'ababbbb'))\n    # print(re.match('^ab+', 'abababab'))\n    # print(re.match('^ab+', 'abababaa'))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ab+',text):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}?'\n    pattern2 = r'ab{2}?'\n    pattern3 = r'ab{1,3}?'\n    return bool(re.search(pattern, text)) and bool(re.search(pattern2, text)) and bool(re.search(pattern3, text))\n    "
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.findall(r'(?=a.*b)',text):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = 0\n    max_sub_sum = 0\n    sum = 0\n    \n    # Implement your solution here\n    for i in range(n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n        sum += a[i]\n        \n        if sum >= max_sub_sum:\n            max_sub_sum = sum\n        \n        if sum < k:\n            sum = 0\n    \n    return max_sub_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a = list(a)\n    arr = []\n    while a:\n        arr.append(sum(a))\n        a = a*k\n    return max(arr)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    curr_sum = 0\n    max_sum = 0\n    for i in range(n): \n        curr_sum += a[i] \n        if i >= k: \n            curr_sum -= a[i - k] \n            if max_sum < curr_sum: \n                max_sum = curr_sum \n    return max_sum \n  "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_so_far = 0\n    current_max = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = float('-inf')\n    start = 0\n    end = 0\n    sum = 0\n    while end < n:\n        sum += a[end]\n        while sum > k:\n            sum -= a[start]\n            start += 1\n        if sum > ans:\n            ans = sum\n        end += 1\n    return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        if i == 0:\n            curr_sum = a[i]\n        elif i == 1:\n            curr_sum = max(a[i], a[0])\n        else:\n            curr_sum = max(a[i], a[i - 1], a[0])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Time complexity : O(n)\n    # Space complexity : O(1)\n    curr_sum = 0\n    max_sum = -999999999\n    curr_max = 0\n    n = len(a)\n    for i in range(n):\n        if curr_sum < 0:\n            curr_sum = a[i]\n        else:\n            curr_sum += a[i]\n        if curr_sum > curr_max:\n            curr_max = curr_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    if max_sum == -999999999:\n        return -1\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr = arr + arr[:k-1]\n    \n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(n):\n        sum = arr[i]\n        if sum > max_sum:\n            max_sum = sum\n            start_index = i\n        for j in range(i+1, n+1):\n            sum = sum + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n                end_index = j-1\n    return max_sum, start_index, end_index\n    \n    \ndef max_sub_array_sum_repeated_2(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr = arr + arr[:k-1]\n    \n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(n):\n        sum = arr[i]\n        if sum > max_sum:\n            max_sum = sum\n            start_index = i\n        for j in range(i+1, n+1):\n            sum = sum + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n                end_index = j-1\n    return max_sum, start_index, end_index\n    \n    \n    \n    \n    \ndef max_sub_array_sum_repeated_3(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr = arr + arr[:k-1]\n    \n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(n):\n        sum = arr[i]\n        if sum > max_sum:\n            max_sum = sum\n            start_index = i\n        for j in range(i+1, n+1):\n            sum = sum + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n                end_index = j-1\n    return max_sum, start_index, end_index\n    \n    \n    \n    \n    \ndef max_sub_array_sum_repeated_4(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr = arr + arr[:k-1]\n    \n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i+1, n+1):\n            sum = sum + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n                start_index = i\n                end_index = j-1\n    return max_sum, start_index, end_index\n    \n    \n    \n    \n    \ndef max_sub_array_sum_repeated_5(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr = arr + arr[:k-1]\n    \n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(n):\n        sum = arr[i]\n        if sum > max_sum:\n            max_sum = sum\n            start_index = i\n        for j in range(i+1, n+1):\n            sum = sum + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n                end_index = j-1\n    return max_sum, start_index, end_index\n    \n    \n    \n    \n    \ndef max_sub_array_sum_repeated_6(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr = arr + arr[:k-1]\n    \n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(n):\n        sum = arr[i]\n        if sum > max_sum:\n            max_sum = sum\n            start_index = i\n        for j in range(i+1, n+1):\n            sum = sum + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n                end_index = j-1\n    return max_sum, start_index, end_index\n    \n    \n    \n    \n    \ndef max_sub_array_sum_repeated_7(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr = arr + arr[:k-1]\n    \n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(n):\n        sum = arr[i]\n        if sum > max_sum:\n            max_sum = sum\n            start_index = i\n        for j in range(i+1, n+1):\n            sum = sum + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n                end_index = j-1\n    return max_sum, start_index, end_index\n    \n    \n    \n    \n    \ndef max_sub_array_sum_repeated_8(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr = arr + arr[:k-1]\n    \n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(n):\n        sum = arr[i]\n        if sum > max_sum:\n            max_sum = sum\n            start_index = i\n        for j in range(i+1, n+1):\n            sum = sum + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n                end_index = j-1\n    return max_sum, start_index, end_index\n    \n    \n    \n    \n    \ndef max_sub_array_sum_repeated_9(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr = arr + arr[:k-1]\n    \n    max_sum = 0\n    start_index = 0\n    end_index = 0\n    for i in range(n):\n        sum = arr[i]\n        if sum > max_sum:\n            max_sum = sum\n            start_index = i\n        for j in range(i+1, n+1):\n            sum = sum + arr[j]\n            if sum > max_sum:\n                max_sum = sum\n            "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    temp_list = []\n    sum_list = []\n    result = []\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -99999999\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if i >= k:\n            current_sum = current_sum - a[i-k]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum_num = 0\n    \n    for i in range(1,n+1):\n        sum_num = sum_num + (i*i)\n    return sum_num\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # your code here\n    if n <= 0:\n        return 0\n    else:\n        summation = 0\n        for i in range(n):\n            if i % 2 == 0:\n                summation += i**2\n        return summation\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #Answer=0\n    for i in range(n):\n        if i%2==0:\n            #print(i**2)\n            Answer+=i**2\n    return Answer"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0;\n    for i in range(n):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # code here\n    sum=0\n    i=0\n    while i<n:\n        sum=sum+pow(i,2)\n        i=i+2\n    return sum\n    "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(0,n):\n        result = result + i**2\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_max_length = []\n    for i in list1:\n        if isinstance(i, list):\n            list_max_length.append(max_length(i))\n        else:\n            list_max_length.append(len(i))\n    return max(list_max_length)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    ans = []\n    for i in list1:\n        if(len(i) > len(ans)):\n            ans = i\n    return len(ans)\n    \nprint(max_length([[1,2],2,3,[2,5]]))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    length_list = len(list1)\n    for i in range(length_list):\n        if max_len < len(list1[i]):\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = -1\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxi = 0\n    for i in range(len(list1)):\n        if maxi < len(list1[i]):\n            maxi = len(list1[i])\n    return maxi\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2 = []\n    for i in list1:\n        if len(i) == len(list2):\n            pass\n        elif len(i) > len(list2):\n            list2 = i\n    return list2\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    m = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > m:\n            m = len(list1[i])\n    return m\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    largest_index = 0\n    largest_length = 0\n    for index,item in enumerate(list1):\n        if len(item) > largest_length:\n            largest_index = index\n            largest_length = len(item)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # TODO: Write your solution here\n    max_list_length = 0\n    for elem in list1:\n        if len(elem) > max_list_length:\n            max_list_length = len(elem)\n    return max_list_length\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(n <= 0):\n        return 0\n    if(n == 1):\n        if(k == 1):\n            return 1\n        return 0\n    if(k == 1):\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(n, k, mem):\n        if n == 0 and k == 0:\n            return 1\n        if n == 0 and k!= 0:\n            return 0\n        if n == 1:\n            if k == 0:\n                return 0\n            if k == 1:\n                return 1\n            if k == 2:\n                return 2\n        if mem[n][k]!= -1:\n            return mem[n][k]\n        else:\n            mem[n][k] = count_ways(n - 1, k, mem) + count_ways(n - 1, k - 1, mem) + count_ways(n - 1, k - 2, mem)\n            return mem[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    arr = []\n    dp = []\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #dp[i][j] : ways to paint fence with i posts and j colors\n    #base condition\n    if k == 1 or k == 0:\n        return 0\n    if k > 3:\n        return 0\n    if n == 1:\n        return k\n    #fence has to be painted k times\n    dp = [[0] * k for _ in range(n + 1)]\n    for j in range(k):\n        dp[1][j] = 1\n    #fence has to be painted 3 times\n    for i in range(2, n + 1):\n        for j in range(1, k):\n            #case1: paint i-1 posts with j colors\n            dp[i][j] = dp[i - 1][j]\n            #case2: paint i-1 posts with j-1 colors\n            if j - 1 >= 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            #case3: paint i-1 posts with j-2 colors\n            if j - 2 >= 0:\n                dp[i][j] += dp[i - 1][j - 2]\n            #case4: paint i-1 posts with j-3 colors\n            if j - 3 >= 0:\n                dp[i][j] += dp[i - 1][j - 3]\n    return dp[n][k-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == k: \n        return 1\n    if k == 0 or k > n or k < 1: \n        return 0\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1) \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def helper(post_length, color_count, color, total):\n        if total == 0:\n            return 1\n        \n        if post_length == 0:\n            return 0\n        \n        # this is a leaf node\n        if color_count == color:\n            return 0\n        \n        if color_count == (color + 1):\n            return helper(post_length - 1, color, color, total)\n        \n        if color_count == (color + 2):\n            return helper(post_length - 1, color, color, total) + helper(post_length - 1, color, color + 1, total)\n        \n        return helper(post_length - 1, color, color, total) + helper(post_length - 1, color, color + 1, total) + helper(post_length - 1, color, color + 2, total)\n        \n    # first case is when the number of posts is equal to the number of colors\n    if n == k:\n        return 1\n    \n    return helper(n, 0, 0, k - 2)\n    \n    \n    \n    # # alternative solution\n    # def helper(post_length, color_count, color, total):\n    #     # base case\n    #     if total == 0:\n    #         return 1\n    \n    #     if post_length == 0:\n    #         return 0\n    \n    #     if color_count == color:\n    #         return 0\n    \n    #     if color_count == (color + 1):\n    #         return helper(post_length - 1, color, color, total)\n    \n    #     if color_count == (color + 2):\n    #         return helper(post_length - 1, color, color, total) + helper(post_length - 1, color, color + 1, total)\n    \n    #     return helper(post_length - 1, color, color, total) + helper(post_length - 1, color, color + 1, total) + helper(post_length - 1, color, color + 2, total)\n        \n        \n    # # alternative solution\n    # def helper(post_length, color_count, color, total):\n    #     # base case\n    #     if total == 0:\n    #         return 1\n    \n    #     if post_length == 0:\n    #         return 0\n    \n    #     if color_count == color:\n    #         return 0\n    \n    #     if color_count == (color + 1):\n    #         return helper(post_length - 1, color, color, total)\n    \n    #     if color_count == (color + 2):\n    #         return helper(post_length - 1, color, color, total) + helper(post_length - 1, color, color + 1, total)\n    \n    #     if color_count == (color + 3):\n    #         return helper(post_length - 1, color, color, total) + helper(post_length - 1, color, color + 1, total) + helper(post_length - 1, color, color + 2, total)\n    \n    #     return helper(post_length - 1, color, color, total) + helper(post_length - 1, color, color + 1, total) + helper(post_length - 1, color, color + 2, total) + helper(post_length - 1, color, color + 3, total)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return 1 if n <= 3 else 4\n    \n    if n <= 3:\n        return 3\n    \n    res = 0\n    \n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    \n    for i in range(n, -1, -1):\n        for j in range(k, -1, -1):\n            if j == k:\n                if i == n:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i + 1][j]\n            else:\n                dp[i][j] = dp[i][j + 1] + dp[i + 1][j] + dp[i + 1][j + 1]\n            \n            res = max(res, dp[i][j])\n    return res"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        dp = []\n        dp.append(1)\n        dp.append(1)\n        for i in range(2, n+1):\n            dp.append(dp[i-2] + dp[i-1])\n        return dp[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    n = len(k)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1] = 1\n    for i in range(1, n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                dp[i][j] += dp[i-1][k-1] + dp[k][j]\n    print(dp[n][n-1])\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    ways = count_no_of_ways(n-1, k)\n    ways = ways + count_no_of_ways(n-1, k-1)\n    return ways\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(f\"Quotient of {n} and {m} is : {n//m}\")\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    assert type(n) == int and type(m) == int\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return m\n    else:\n        return n//m"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    return n//m\n    "
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n // m)\n    \nif __name__ == '__main__':\n    print(find(10,5))\n    print(find(10,7))\n    print(find(3.5,4.5))\n    print(find(3.9,4.9))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\nprint(find(12,3))  "
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m) \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n==0):\n        return 0\n    elif (n<0):\n        return -(-n//m)\n    else:\n        return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*w - h*h)/(2*w)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = h\n    side2 = h/math.tan(math.pi/6)\n    return (side1 + side2)/2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w,h=int(w),int(h)\n    if w==h:\n        return 0\n    a=math.sqrt((w**2)+(h**2)-(w*h))\n    return a\nprint(otherside_rightangle(4,4))\nprint(otherside_rightangle(5,6))\nprint(otherside_rightangle(3,6))\nprint(otherside_rightangle(3,7))\nprint(otherside_rightangle(8,2))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w/2\n    return math.sqrt(a**2+h**2-2*a*h*math.cos(math.radians(60)))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h*h-w*w/math.sin(math.radians(90)))\n    #return w * h / math.sin(math.radians(90))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1=w/2\n    side2=math.sqrt(w*w/4+h*h/4)\n    side3=side1+side2\n    return side3\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_3 = math.sqrt((w**2 + h**2)/2)\n    return side_3\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return(math.sqrt(w**2+h**2))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # print(max(listval))\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for x in listval:\n        if x > max_value:\n            max_value = x\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if max_val <= i:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # define a max value\n    max_value = -1\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return sorted(listval)[-1]\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return list(sorted(listval, reverse = True))[0]\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval[-1]\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval[-1]\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval[-1]\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef ma"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    else:\n        divs = 0\n        for i in range(2, number):\n            if number % i == 0:\n                divs += i\n        return divs + 1\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return 0\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    if number <= 0:\n        raise Exception(\"The number must be a positive integer.\")\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n    \ndef sum_up_to(number):\n    '''\n    Write a function to return the sum of all numbers from 1 to n.\n    '''\n    if number <= 0:\n        raise Exception(\"The number must be a positive integer.\")\n    return (sum(range(1, number+1)))\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 1\n    for i in range(2, number):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1, number):\n        if number % i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    #sums = 0\n    #n = number\n    #for i in range(1, n):\n    #    if n % i == 0:\n    #        sums = sums + i\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(1,len(arr)):\n        for j in range(0,len(arr)-i):\n            if arr[j] > arr[j+1]:\n                count +=1\n    print(count)\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # If array is not empty \n    if len(arr) > 1: \n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Base case\n    if len(arr) <= 1: \n        return 0\n    \n    # Recursive call \n    inv_count = 0\n    n = len(arr) \n    \n    # Sort first and second half \n    # in a different way. \n    arr.sort() \n    \n    # Compute number of inversions in first \n    # and second half \n    for i in range(1, n): \n        if arr[i] < arr[i - 1]: \n            inv_count += (n - i) \n    \n    return inv_count + get_Inv_Count(arr[:len(arr) // 2]) + get_Inv_Count(arr[len(arr) // 2:]) \n        \n        \narr = [4,5,1,3]\nprint(get_Inv_Count(arr))"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    size = len(arr)\n    # Special case for an empty array\n    if size == 0:\n        return 0\n    \n    # Initialise the count of inversions\n    inversion_count = 0\n    \n    # Sort the array\n    i = 0\n    j = 0\n    while (i < size and j < size):\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            inversion_count += size - j\n            j += 1\n    return inversion_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1: \n        return 0\n    n = len(arr) \n    L = [] \n    R = [] \n    for i in range(0, n): \n        L.append(arr[i]) \n    for i in range(n - 1, -1, -1): \n        R.append(arr[i]) \n    return count_inv_helper(L, R) \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return inversion_count(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge(lst, rst): \n        '''\n        Merge two sorted lists \n        '''\n        n1, n2 = len(lst), len(rst) \n        i, j, inv_count = 0, 0, 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Create a global variable to store the number of inversions\n    global count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    count = 0\n    while (i <= j): \n        if (arr[i] > arr[j]): \n            count += j - i \n            j -= 1\n        else: \n            i += 1\n    return count \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == list:\n        return sum(flatten_list(x) for x in list1)\n    else:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if type(i) == list:\n            result += flatten_list(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    else:\n        new_list = []\n        for i in list1:\n            if type(i) == list:\n                new_list.extend(flatten_list(i))\n            else:\n                new_list.append(i)\n        return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for i in list1:\n        if type(i) == list:\n            res.extend(flatten_list(i))\n        else:\n            res.append(i)\n    return res"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1_copy = list(list1)\n    list1_copy.sort(key=len)\n    flattened_list = []\n    while len(list1_copy) > 0:\n        last_item = list1_copy.pop()\n        flattened_list.append(last_item)\n        while len(list1_copy) > 0:\n            if type(last_item) == type(list1_copy[0]):\n                last_item = list1_copy.pop()\n                flattened_list.append(last_item)\n            else:\n                break\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    new_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            new_list += flatten_list(sublist)\n        else:\n            new_list.append(sublist)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if type(list1[i]) is list:\n            new_list.extend(list1[i])\n        else:\n            new_list.append(list1[i])\n    return new_list\n    "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) is list:\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for elem in list1:\n        if type(elem) == list:\n            new_list.extend(elem)\n        else:\n            new_list.append(elem)\n    return new_list\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item[0]] += item[1]\n    # max_val = max(a.values())\n    # return max([(k,v) for k,v in a.items() if v == max_val])\n    a = defaultdict(int)\n    for item in stdata:\n        a[item[0]] += item[1]\n    max_val = max(a.values())\n    return ((k,v) for k,v in a.items() if v == max_val)\n    \ndef max_aggregate_pairs(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item[0]] += item[1]\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item[0]] += item[1]\n    max_val = max(a.values())\n    return ((k,v) for k,v in a.items() if v == max_val)\n    \ndef max_aggregate_sets(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of sets.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item] += 1\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item] += 1\n    max_val = max(a.values())\n    return (item for item in a if item == max_val)\n    \ndef max_aggregate_pairs_sets(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of sets.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item] += 1\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item] += 1\n    max_val = max(a.values())\n    return (item for item in a if item == max_val)\n    \ndef max_aggregate_2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item[0]] += item[1]\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item[0]] += item[1]\n    max_val = max(a.values())\n    return ((k,v) for k,v in a.items() if v == max_val)\n    \ndef max_aggregate_3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item[0]] += item[1]\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item[0]] += item[1]\n    max_val = max(a.values())\n    return (k for k,v in a.items() if v == max_val)\n    \ndef max_aggregate_pairs_2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item[0]] += item[1]\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item[0]] += item[1]\n    max_val = max(a.values())\n    return (k for k,v in a.items() if v == max_val)\n    \ndef max_aggregate_3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item[0]] += item[1]\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item[0]] += item[1]\n    max_val = max(a.values())\n    return (k for k,v in a.items() if v == max_val)\n    \ndef max_aggregate_pairs_2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item[0]] += item[1]\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item[0]] += item[1]\n    max_val = max(a.values())\n    return (k for k,v in a.items() if v == max_val)\n    \ndef max_aggregate_3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item[0]] += item[1]\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item[0]] += item[1]\n    max_val = max(a.values())\n    return (k for k,v in a.items() if v == max_val)\n    \ndef max_aggregate_pairs_3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # return max(stdata)\n    # a = defaultdict(int)\n    # for item in stdata:\n    #     a[item[0]] += item[1]\n    # max_val = max(a.values())\n    # return ((k,v) for k,v in a.items() if v == max_val)\n    a = defaultdict(int)\n    for item in stdata:\n        a[item[0]] += item[1]\n    max_val = max(a.values())\n    return (k for k,v in a.items() if v == max_val)\n    \ndef max_aggregate_sets_3(stdata):\n    '''\n    Write a function to calculate the maximum aggregate fro"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregates = []\n    for t in stdata:\n        aggregates.append(t[0])\n    aggregates = sorted(aggregates)\n    print(aggregates)\n    max_aggregate = 0\n    for i in range(1,len(aggregates)):\n        max_aggregate = max(max_aggregate,aggregates[i] - aggregates[i-1])\n    print(max_aggregate)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n=len(stdata)\n    res={}\n    for i in range(n):\n        res[i]=sum(stdata[i])\n    return(max(res,key=res.get))\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for i in range(len(stdata)):\n        if stdata[i] > max_aggregate:\n            max_aggregate = stdata[i]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxagg = 0\n    #edge case\n    if stdata == []:\n        return 0\n    for tup in stdata:\n        cur_sum = 0\n        for x in tup:\n            cur_sum = cur_sum + x\n        if cur_sum > maxagg:\n            maxagg = cur_sum\n    return maxagg\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_so_far = 0\n    max_combo = (None,0)\n    for (k,v) in stdata:\n        if v > max_so_far:\n            max_so_far = v\n            max_combo = (k,v)\n    return max_combo\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([(t[1],t[0]) for t in stdata])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    tuple_of_tuple = tuple(stdata)\n    aggregate_sum = 0\n    sum_tuple = []\n    for i in tuple_of_tuple:\n        aggregate_sum += i[0]\n        sum_tuple.append(aggregate_sum)\n    max_agg = max(sum_tuple)\n    \n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if stdata == []:\n        return (0,0,0)\n    else:\n        if stdata[0][0] >= stdata[0][1] and stdata[0][0] >= stdata[0][2]:\n            return (stdata[0][0],stdata[0][1],stdata[0][2])\n        else:\n            return (max(stdata[0][0],stdata[0][1],stdata[0][2]),stdata[0][1],stdata[0][2])\n    \ndef max_value_of_product(input_list,size):\n    '''\n    Write a function to find the maximum value of the product of the numbers in the list.\n    '''\n    max_prod = 1\n    for i in range(size):\n        if input_list[i] > max_prod:\n            max_prod = input_list[i]\n    return max_prod\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    \n    for i, j in stdata:\n        data[i] += j\n        \n    return max(data.values())\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #code here\n    for i in range(1<<(n+1)):\n        #print(bin(i))\n        if (i & (i+1))==i:\n            print(bin(i))\n            return 1\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1<<(n-1)):\n        s = 0\n        for j in range(n-1, -1, -1):\n            s += (i >> j) & 1\n        if s == (i >> (n-1)):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def rec(n):\n        if n == 0: return 1\n        if n == 1: return 2\n        return rec(n-1) + rec(n-2)\n    return rec(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0 for _ in range(n)] for _ in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    for l in range(2, n + 1): \n        for i in range(n - l + 1): \n            j = i + l - 1\n            for k in range(i, j + 1): \n                dp[i][j] += dp[i][k] + dp[k + 1][j]\n    return dp[0][n - 1] \n    "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Base case: when n is 0\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 1:\n        return 0\n    count = 0\n    for i in range(2**(n)):\n        s = bin(i)\n        if s[:n] == s[-n:]:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return count_binary_seq(n-1)+count_binary_seq(n-2)\n    \ndef find_missing(lst):\n    '''\n    Find the missing number from the list of sorted numbers.\n    '''\n    res = sum(lst)\n    return res - sum(lst)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    while n!= 0:\n        n -= 1\n        count += 1\n        n = int(n / 2)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Number of combinations is 1 * 2^n - 1\n    return int(bin(2**n-1).count('1'))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        str_i = \"{0:b}\".format(i)\n        first_index = 0\n        last_index = len(str_i)-1\n        binary_sum = int(str_i[first_index]) + int(str_i[last_index])\n        if binary_sum == int(str_i[0]) + int(str_i[-1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        depth = depth + 1 + dict_depth(d[key])\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    else:\n        if len(d) == 0:\n            return 1\n        else:\n            return 1+max([dict_depth(k) for k in d.keys()])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d,dict):\n        return 0\n    if not d:\n        return 0\n    return max([dict_depth(v) for k,v in d.items()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([1]+[depth for k in d for depth in dict_depth(d[k])])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    else:\n        return max(dict_depth(d[key]) for key in d) + 1"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            depth += 1\n    return depth\n    \ndef dict_print(d):\n    '''\n    Write a function to print a dictionary with each key and value separated by a colon (:) \n    '''\n    for key in d:\n        print(key, \":\", d[key])\n        \ndef dict_repr(d):\n    '''\n    Write a function to print a dictionary with each key and value separated by a colon (:) \n    '''\n    for key in d:\n        print(key, \":\", d[key])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d_depth = 0\n    for key in d:\n        d_depth += 1\n        if isinstance(d[key], dict):\n            d_depth += dict_depth(d[key])\n    return d_depth\n    \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth_helper(d, depth = 0):\n        if isinstance(d, dict):\n            return depth + 1\n        if isinstance(d, list):\n            return depth_helper(d[0], depth + 1)\n        if isinstance(d, set):\n            return depth_helper(d[0], depth + 1)\n        if isinstance(d, tuple):\n            return depth_helper(d[0], depth + 1)\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise ValueError(\"Input should be a dictionary\")\n    depth = 0\n    for i in d:\n        depth = max(depth, dict_depth(d[i]))\n    return depth + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < 0 :\n        return -1\n    if index == 0 :\n        return arr[0]\n    #print(\"index \",index,arr,rotations)\n    if index in ranges :\n        return arr[index-1]\n    else :\n        rotated = 0\n        for i in range(index) :\n            rotated += rotations\n        return find_Element(arr,ranges,rotations,rotated)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) : \n        if i==index :\n            if ranges[i]!=0 :\n                return (arr[i] + (ranges[i]*rotations[i]))%mod\n            else :\n                return arr[i]\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    element = arr[ranges[index][0]:ranges[index][1]]\n    print(element)\n    for x in range(rotations[index]) :\n        element.reverse()\n        print(element)\n    return element[0]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(\"index = \",index)\n    #print(\"arr = \",arr)\n    for i in range(0,len(ranges)) :\n        if (index >= ranges[i]) and (index < ranges[i]+rotations[i]) :\n            if rotations[i] == 0 :\n                return arr[index-ranges[i]]\n            return arr[index-ranges[i]+rotations[i]]\n    return -1\n    "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    new_arr = []\n    for i in arr :\n        new_arr.append((i-rotations[index])%ranges[index])\n    return new_arr\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i=0\n    while i<len(arr) and i<index :\n        if arr[i]<ranges[i]:\n            i+=1\n        else:\n            i+=rotations[i]\n    return arr[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    while(index<ranges) :\n        if index == 0:\n            if arr[0] == 1:\n                return 1\n            else:\n                return 0\n        if index >= ranges-rotations:\n            return arr[index-rotations]\n        index = index - rotations\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)) :\n        if arr[i] > ranges[index] :\n            index = i\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        start = ranges*i\n        end = start+ranges\n        for j in range(rotations) :\n            if (arr[start] < arr[start+ranges]) :\n                temp = arr[start]\n                arr[start] = arr[start+ranges]\n                arr[start+ranges] = temp\n            if (arr[start] == arr[start+ranges]) :\n                start = start+1\n            if (arr[end] > arr[end-ranges]) :\n                temp = arr[end]\n                arr[end] = arr[end-ranges]\n                arr[end-ranges] = temp\n            if (arr[end] == arr[end-ranges]) :\n                end = end-1\n    #print(arr)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    ind=index\n    for i in range(len(arr)-1,0,-1):\n        if (ranges[i] < ind) :\n            ind = ind - ranges[i]\n        else :\n            ind = ind - ranges[i] + rotations[i]\n    return arr[ind]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return i\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word\n    return 'no p found'\nprint(start_withp(['apple', 'pear', 'peach', 'peacock', 'penguin', 'penguin', 'penguin']))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #possible solution to this question\n    words_with_p = []\n    for word in words:\n        if word.startswith('p'):\n            words_with_p.append(word)\n    return words_with_p\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [[w.replace('p', '') for w in words if w.startswith('p')][0], \n        [w.replace('p', '') for w in words if w.startswith('p')][1]]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return i[1:],i[:1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith('p'):\n            return i, words.pop(words.index(i))\n    return 'No words start with p'\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0].lower() == 'p':\n            return i, words.index(i)\n    return 'NOT FOUND', -1\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('p')\n    matches = pattern.finditer(words)\n    for match in matches:\n        return (words[match.start(): match.end()])\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for x in words:\n        if x[0] == 'p':\n            return x\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = float('-inf')\n    for i in range(index):\n        max_sum = max(a[i] + max_sum, a[i + 1])\n    if k <= index:\n        max_sum = max(a[k] + max_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #brute force approach\n    # def max_sum_brute_force(a, n, index, k):\n    #     max_sum = -(2**31)\n    #     for i in range(n-1, index-1, -1):\n    #         curr_sum = a[i]\n    #         for j in range(i+1, index):\n    #             curr_sum += a[j]\n    #             if curr_sum > max_sum and curr_sum > k:\n    #                 max_sum = curr_sum\n    #     return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    curr_sum = 0\n    max_sum = float('-inf')\n    for i in range(index, n):\n        curr_sum = max(curr_sum + a[i], a[i])\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for x in range(n+1)] for y in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i][j] = dp[i-1][j]\n        for j in range(i, n+1):\n            dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n    m = -1\n    for i in range(1, n+1):\n        if dp[n][i] >= k and dp[n][i] >= m:\n            m = dp[n][i]\n    return m\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Preprocess - Find all the prefix sums\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n    # Dynamic approach\n    max_sum = -float('inf')\n    for i in range(1, n + 1):\n        if i == 1:\n            max_sum = prefix_sum[i]\n        else:\n            max_sum = max(max_sum, prefix_sum[i] - prefix_sum[i - 1] - k)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or n <= index:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - a[index]) + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index == n:\n        return 0\n    if k < 0:\n        return 0\n    \n    if k == 0:\n        return a[index]\n    \n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or index >= n:\n        return 0\n    if k < 0 or k >= n:\n        return 0\n    max_sum = 0\n    curr_sum = 0\n    for i in range(index, -1, -1):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    curr_sum = 0\n    max_sum = 0\n    for i in range(index, n):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global_max = -1e9\n    sub_max = -1e9\n    sub_max_ind = -1\n    if index == n:\n        return 0\n    if a[index] > k:\n        return 0\n    if a[index] >= global_max:\n        global_max = a[index]\n        sub_max = 0\n        sub_max_ind = index\n    # for sub_ind in range(index+1, n):\n    for sub_ind in range(index+1, n):\n        if a[sub_ind] >= global_max:\n            # print(a[sub_ind], a[index], sub_ind)\n            global_max = a[sub_ind]\n            sub_max = a[index] + a[sub_ind]\n            sub_max_ind = index\n    # print(index, global_max, sub_max_ind, sub_max)\n    return max(max_sum_increasing_subseq(a, n, sub_max_ind+1, k), sub_max)\n    \ndef max_sum_increasing_subseq_memo(a, n, index, k, mem):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    global_max = -1e9\n    sub_max = -1e9\n    sub_max_ind = -1\n    if index == n:\n        return 0\n    if a[index] > k:\n        return 0\n    if a[index] >= global_max:\n        global_max = a[index]\n        sub_max = 0\n        sub_max_ind = index\n    # for sub_ind in range(index+1, n):\n    for sub_ind in range(index+1, n):\n        if a[sub_ind] >= global_max:\n            # print(a[sub_ind], a[index], sub_ind)\n            global_max = a[sub_ind]\n            sub_max = a[index] + a[sub_ind]\n            sub_max_ind = index\n    # print(index, global_max, sub_max_ind, sub_max)\n    if mem[index][k]!= -1:\n        return mem[index][k]\n    mem[index][k] = max(max_sum_increasing_subseq_memo(a, n, sub_max_ind+1, k, mem), sub_max)\n    return mem[index][k]\n    \ndef max_sum_increasing_subseq_memo_dynamic(a, n, index, k, mem):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    global_max = -1e9\n    sub_max = -1e9\n    sub_max_ind = -1\n    if index == n:\n        return 0\n    if a[index] > k:\n        return 0\n    if a[index] >= global_max:\n        global_max = a[index]\n        sub_max = 0\n        sub_max_ind = index\n    # for sub_ind in range(index+1, n):\n    for sub_ind in range(index+1, n):\n        if a[sub_ind] >= global_max:\n            # print(a[sub_ind], a[index], sub_ind)\n            global_max = a[sub_ind]\n            sub_max = a[index] + a[sub_ind]\n            sub_max_ind = index\n    # print(index, global_max, sub_max_ind, sub_max)\n    if mem[index][k]!= -1:\n        return mem[index][k]\n    mem[index][k] = max(max_sum_increasing_subseq_memo_dynamic(a, n, sub_max_ind+1, k, mem), sub_max)\n    return mem[index][k]\n    \ndef max_sum_increasing_subseq_memo_dynamic_optimized(a, n, index, k, mem):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    global_max = -1e9\n    sub_max = -1e9\n    sub_max_ind = -1\n    if index == n:\n        return 0\n    if a[index] > k:\n        return 0\n    if a[index] >= global_max:\n        global_max = a[index]\n        sub_max = 0\n        sub_max_ind = index\n    # for sub_ind in range(index+1, n):\n    for sub_ind in range(index+1, n):\n        if a[sub_ind] >= global_max:\n            # print(a[sub_ind], a[index], sub_ind)\n            global_max = a[sub_ind]\n            sub_max = a[index] + a[sub_ind]\n            sub_max_ind = index\n    # print(index, global_max, sub_max_ind, sub_max)\n    if mem[index][k]!= -1:\n        return mem[index][k]\n    mem[index][k] = max(max_sum_increasing_subseq_memo_dynamic_optimized(a, n, sub_max_ind+1, k, mem), sub_max)\n    return mem[index][k]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m):\n        tuplex = (tuplex[i],) + tuplex[i+1:]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_colon = tuplex[:m] + tuplex[m+1:m+1+n] + tuplex[m+1+n:]\n    return tuplex_colon\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x = []\n    y = []\n    if m == 0:\n        return tuplex\n    for i in range(m):\n        x.append(tuplex[i])\n    for i in range(m,len(tuplex)):\n        y.append(tuplex[i])\n    print(x,y)\n    z = []\n    for i in range(m,m+n):\n        z.append(y[i-m])\n    return x+z\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(n):\n        tuplex.append(m)\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=deepcopy(tuplex)\n    res=[]\n    for i in range(m):\n        res.append(tuplex[i])\n        res.append(tuplex[i])\n    res.append(tuplex[m])\n    return tuple(res)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m!=n:\n        raise TypeError(\"m!=n\")\n    if type(tuplex)!=type(()):\n        raise TypeError(\"Type must be a tuple\")\n    if m>len(tuplex):\n        raise ValueError(\"m can't be bigger than length of tuple\")\n    new_tuplex=deepcopy(tuplex)\n    if m==len(tuplex):\n        return new_tuplex\n    for i in range(m):\n        new_tuplex=new_tuplex+(tuplex[i],)\n    return new_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l = len(tuplex)\n    for i in range(0,l):\n        if tuplex[i][0]==tuplex[i][1] and tuplex[i][0]==m:\n            tuplex[i] = (n,m)\n    return tuplex\ndef get_colon(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l = len(tuplex)\n    for i in range(0,l):\n        if tuplex[i][0]==tuplex[i][1] and tuplex[i][0]==m:\n            tuplex[i] = (n,m)\n    return tuplex\ndef karatsuba(a,b):\n    '''\n    Write a function that implements Karatsuba multiplication.\n    '''\n    if len(a)==1 and len(b)==1:\n        return a*b\n    elif len(a)==1:\n        return karatsuba(b,a)\n    elif len(b)==1:\n        return karatsuba(a,b)\n    else:\n        n = max(len(a),len(b))\n        k = n//2\n        a0 = a[:k]\n        a1 = a[k:]\n        b0 = b[:k]\n        b1 = b[k:]\n        a00 = karatsuba(a0,b0)\n        a01 = karatsuba((a0+a1),b0)\n        a10 = karatsuba(a0,b1)\n        a11 = karatsuba((a0+a1),b1)\n        c00 = a00*10**(2*k) + a01*10**k\n        c01 = a00*10**k + a01*10**(2*k)\n        c10 = a10*10**(2*k) + a11*10**k\n        c11 = a10*10**k + a11*10**(2*k)\n        return (c00*10**(2*k) + c01*10**k + c10*10**(2*k) + c11*10**k)\ndef do_rounding(x):\n    '''\n    Write a function that implements rounding up of an integer.\n    '''\n    if x<0:\n        return int(-(-x)//1)\n    else:\n        return int(x//1)\ndef decimal_to_hex(x):\n    '''\n    Write a function that converts a decimal number into its equivalent hexadecimal number.\n    '''\n    x = str(x)\n    x = x[::-1]\n    l = len(x)\n    res = 0\n    while l>0:\n        res = 10*res + int(x[l-1])\n        l -= 1\n    return res\ndef is_odd(x):\n    '''\n    Write a function that returns True if x is odd, otherwise it returns False.\n    '''\n    if x==0:\n        return False\n    elif x%2==0:\n        return False\n    else:\n        return True\ndef is_palindrome(x):\n    '''\n    Write a function that returns True if x is a palindrome, otherwise it returns False.\n    '''\n    if len(str(x))%2==0:\n        return False\n    else:\n        n = len(str(x))//2\n        l = str(x)[:n]\n        r = str(x)[n:]\n        if l==r[::-1]:\n            return True\n        else:\n            return False\ndef is_palindrome_with_swap(x):\n    '''\n    Write a function that returns True if x is a palindrome, otherwise it returns False.\n    '''\n    if len(str(x))%2==0:\n        return False\n    else:\n        n = len(str(x))//2\n        l = str(x)[:n]\n        r = str(x)[n:]\n        if l==r[::-1]:\n            return True\n        else:\n            return False\ndef get_prime_factors(n):\n    '''\n    Write a function to get prime factors of a number.\n    '''\n    if n<=1:\n        return 0\n    else:\n        factors = []\n        l = 2\n        while l<n:\n            if n%l==0:\n                factors.append(l)\n                n//=l\n                if l**2==n:\n                    break\n            else:\n                l+=1\n        return factors\ndef lcm(x,y):\n    '''\n    Write a function that returns the least common multiple (LCM) of two positive integers.\n    '''\n    if x<y:\n        x,y = y,x\n    while x%y!=0:\n        x,y = y,x%y\n    return y\ndef is_prime(n):\n    '''\n    Write a function that returns True if n is a prime number, otherwise it returns False.\n    '''\n    if n<=1:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        i = 2\n        while i*i<=n:\n            if n%i==0:\n                return False\n            i+=1\n        return True\ndef is_prime_with_swap(n):\n    '''\n    Write a function that returns True if n is a prime number, otherwise it returns False.\n    '''\n    if n<=1:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        i = 2\n        while i*i<=n:\n            if n%i==0:\n                return False\n            i+=1\n        return True\ndef are_coprime(a,b):\n    '''\n    Write a function that checks whether two positive integers are coprime or not.\n    '''\n    if a<0 or b<0:\n        return False\n    elif a==0 or b==0:\n        return False\n    elif a==b:\n        return True\n    elif a<b:\n        return are_coprime(a,b%a)\n    elif b<a:\n        return are_coprime(b,a%b)\n    else:\n        return are_coprime(b,a%b)\ndef gcd(a,b):\n    '''\n    Write a function that returns the greatest common divisor (GCD) of two positive integers.\n    '''\n    if b==0:\n        return a\n    elif b<0:\n        return -1\n    else:\n        return gcd(b,a%b)\ndef lcmm(a,b):\n    '''\n    Write a function that returns the least common multiple (LCM) of two positive integers.\n    '''\n    if a<0 or b<0:\n        return -1\n    elif a==0 or b==0:\n        return 0\n    elif a>b:\n        return a*b//gcd(a,b)\n    else:\n        return b*a//gcd(a,b)\ndef gcmm(a,b):\n    '''\n    Write a function that returns the least common multiple (LCM) of two positive integers.\n    '''\n    if a<0 or b<0:\n        return -1\n    elif a==0 or b==0:\n        return 0\n    elif a>b:\n        return a*b//gcd(a,b)\n    else:\n        return b*a//gcd(a,b)\ndef is_prime_with_swap(n):\n    '''\n    Write a function that returns True if n is a prime number, otherwise it returns False.\n    '''\n    if n<=1:\n        return False\n    elif n==2 or n==3:\n        return True\n    else:\n        i = 2\n        while i*i<=n:\n            if n%i==0:\n                return False\n            i+=1\n        return True\ndef is_prime_with_swap(n):\n    '''\n    Write a function that returns True if n is a prime number"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[0:m] + tuplex[m + 1:])\ndef remove_dup(tuplex):\n    '''\n    Write a function to remove duplicate element in tuple.\n    '''\n    return tuple(set(tuplex))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # m = int(m)\n    # n = int(n)\n    # tuplex = list(tuplex)\n    # for i in range(m):\n    #     tuplex.insert(i,':')\n    # tuplex = tuple(tuplex)\n    # return tuplex\n    if m <= 0 or m >=len(tuplex):\n        raise ValueError('m out of range.')\n    if n < 0 or n >= len(tuplex[0]):\n        raise ValueError('n out of range.')\n    for i in range(m):\n        tuplex = (':') + tuplex\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    x=tuplex[:n]\n    y=tuplex[m:]\n    return x+y\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Base case\n    if N == 0:\n        return []\n    \n    # Construct products and output\n    prod = []\n    \n    # Main function\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            prod.append(nums1[i] * nums2[j])\n    \n    prod.sort(reverse=True)\n    \n    return prod[:N]\n    \nif __name__ == \"__main__\":\n    nums1 = [-1,-2,3,-4,-5,3,2,5,1]\n    nums2 = [-2,5,-1,2,-5,4,5,-2]\n    print(large_product(nums1, nums2, 7))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return []\n    if len(nums1) <= 1 or len(nums2) <= 1:\n        return max(nums1, nums2, key=lambda x: x)\n    if N == 1:\n        return max(nums1, nums2, key=lambda x: x * nums1.count(x))\n    if N == 2:\n        return max(nums1, nums2, key=lambda x: nums1.count(x) * nums2.count(x))\n    if N == 3:\n        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        nums1 = nums1[::-1]\n        nums2 = nums2[::-1]\n        for i in range(len(nums2)):\n            nums1[i] = nums1[i] * nums2[i]\n        nums1 = sorted(nums1, reverse=True)\n        return nums1[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(N):\n        max1 = max(nums1)\n        max2 = max(nums2)\n        result.append((max1*max2)%1000000007)\n        nums1.remove(max1)\n        nums2.remove(max2)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = -1\n    n = N\n    while n > 0:\n        n -= 1\n        i = 0\n        j = 0\n        product = 1\n        while i < len(nums1) and j < len(nums2):\n            product *= max(nums1[i], nums2[j])\n            i += 1\n            j += 1\n        if product > max_product:\n            max_product = product\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    while len(nums1)!= 0 and len(nums2)!= 0:\n        if nums1[0] > nums2[0]:\n            result.append(nums1[0])\n            nums1.pop(0)\n        else:\n            result.append(nums2[0])\n            nums2.pop(0)\n    while len(nums1)!= 0:\n        result.append(nums1[0])\n        nums1.pop(0)\n    while len(nums2)!= 0:\n        result.append(nums2[0])\n        nums2.pop(0)\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = list(nums1)\n    nums2 = list(nums2)\n    nums1.sort()\n    nums2.sort(reverse=True)\n    res = 1\n    i = 0\n    j = 0\n    while i < N and j < N:\n        if nums1[i] > nums2[j]:\n            res *= nums1[i]\n            i += 1\n        else:\n            res *= nums2[j]\n            j += 1\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    s1 = set(nums1)\n    s2 = set(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    max_product = 1\n    k = 0\n    \n    for _ in range(N):\n        if nums1[k] < nums2[k]:\n            nums1[k] = nums1[k] * nums2[k]\n            if nums1[k] > max_product:\n                max_product = nums1[k]\n            k += 1\n        else:\n            nums2[k] = nums2[k] * nums1[k]\n            if nums2[k] > max_product:\n                max_product = nums2[k]\n            k += 1\n    \n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def product(nums):\n        product = 1\n        for num in nums:\n            product *= num\n        return product\n    \n    largest_product = product(nums1) * product(nums2)\n    if largest_product < N:\n        largest_product = product(nums2) * product(nums1)\n        return largest_product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Best Solution:\n    nums1.sort()\n    nums2.sort()\n    print(nums1)\n    print(nums2)\n    res = []\n    for i in range(N):\n        res.append(nums1[i] * nums2[i])\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>=b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return (a,b) if a>b else (b,a)\nprint(maximum(5,9))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nmaximum(8,3)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        print(\"First number is maximum\")\n    else:\n        print(\"Second number is maximum\")\nmaximum(100,200)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \nprint(maximum(4,5))  # 4\nprint(maximum(2,5))  # 5\nprint(maximum(5,2))  # 5\nprint(maximum(3,3))  # 3\nprint(maximum(7,7))  # 7\nprint(maximum(1,2))  # 2\nprint(maximum(3,-3))  # 3\nprint(maximum(-5,-3))  # -3\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        max=a\n    else:\n        max=b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nprint(maximum(2,3))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n    #return str1.split()\n    \n    \ndef print_tuple(t1):\n    '''\n    Write a function to print the given tuple of characters.\n    '''\n    \n    for x in t1:\n        print(x, end=\" \")\n        \n    print()\n        \ndef dict_create():\n    '''\n    Create a dictionary.\n    '''\n    dic = dict()\n    dic = {\"name\" : \"Lakshman\", \"Age\" : 15, \"Class\": \"First Class\", \"Department\" : \"IT\"}\n    print(dic)\n    \n    dic = {2 : \"Lakshman\", \"age\" : 15, \"class\" : \"First Class\", \"department\" : \"IT\"}\n    print(dic)\n    \n    dic = {\"Name\" : \"Lakshman\", \"Age\" : 15, \"Class\": \"First Class\", \"Department\" : \"IT\"}\n    print(dic)\n    \n    dic = {\"Name\": \"Lakshman\", \"Age\": 15, \"Class\": \"First Class\", \"Department\": \"IT\"}\n    print(dic)\n    \n    dic = {1 : \"Lakshman\", \"Age\": 15, \"Class\": \"First Class\", \"Department\": \"IT\"}\n    print(dic)\n    \n    dic = {'Name' : 'Lakshman', 'Age': 15, 'Class': 'First Class', 'Department': 'IT'}\n    print(dic)\n    \n    dic = {}\n    print(dic)\n    \n    dic = { }\n    print(dic)\n    \n    dic = {}\n    print(dic)\n    \n    dic = {}\n    print(dic)\n    \n    dic = {}\n    print(dic)\n    \n    dic = { }\n    print(dic)\n    \n    dic = {}\n    print(dic)\n    \n    dic = {\n        'Name' : 'Lakshman',\n        'Age': 15,\n        'Class': 'First Class',\n        'Department': 'IT',\n        'Email': 'Lakshman@gmail.com',\n        'Phone_Number': '9191919191'\n    }\n    print(dic)\n    \ndef dict_access():\n    '''\n    Create a dictionary with 5 key-value pairs.\n    '''\n    dic = {\n        'Name' : 'Lakshman',\n        'Age': 15,\n        'Class': 'First Class',\n        'Department': 'IT',\n        'Email': 'Lakshman@gmail.com',\n        'Phone_Number': '9191919191'\n    }\n    \n    #print(dic.keys())\n    print(dic.values())\n    print(dic.items())\n    \n    #Accessing each item in the dictionary\n    for key, val in dic.items():\n        print(key, val)\n        \n    #Accessing the whole dictionary\n    print(dic.keys())\n    print(dic.values())\n    print(dic.items())\n    \ndef dict_mutate():\n    '''\n    Create a dictionary with 4 key-value pairs.\n    '''\n    dic = {\n        'Name' : 'Lakshman',\n        'Age': 15,\n        'Class': 'First Class',\n        'Department': 'IT',\n        'Email': 'Lakshman@gmail.com',\n        'Phone_Number': '9191919191'\n    }\n    \n    #Dictionary with mutable objects\n    dic['Name'] = 'Lakshman'\n    \n    print(dic)\n    \n    dic['Age'] = '16'\n    \n    print(dic)\n    \n    dic['Email'] = 'Lakshman@gmail.com'\n    \n    print(dic)\n    \n    dic['Phone_Number'] = '9191919191'\n    \n    print(dic)\n    \ndef dict_update():\n    '''\n    Create a dictionary with 5 key-value pairs.\n    '''\n    dic = {\n        'Name' : 'Lakshman',\n        'Age': 15,\n        'Class': 'First Class',\n        'Department': 'IT',\n        'Email': 'Lakshman@gmail.com',\n        'Phone_Number': '9191919191'\n    }\n    \n    #Accessing the whole dictionary\n    print(dic)\n    \n    dic.update({'Age': '16'})\n    print(dic)\n    \n    dic.update({'Email': 'Lakshman@gmail.com'})\n    print(dic)\n    \n    dic.update({'Phone_Number': '9191919191'})\n    print(dic)\n    \ndef dict_remove():\n    '''\n    Create a dictionary with 5 key-value pairs.\n    '''\n    dic = {\n        'Name' : 'Lakshman',\n        'Age': 15,\n        'Class': 'First Class',\n        'Department': 'IT',\n        'Email': 'Lakshman@gmail.com',\n        'Phone_Number': '9191919191'\n    }\n    \n    #Accessing the whole dictionary\n    print(dic)\n    \n    dic.pop('Age')\n    print(dic)\n    \n    dic.popitem()\n    print(dic)\n    \n    dic.pop('Phone_Number')\n    print(dic)\n    \n    dic.pop('Department')\n    print(dic)\n    \ndef dict_clear():\n    '''\n    Create a dictionary with 5 key-value pairs.\n    '''\n    dic = {\n        'Name' : 'Lakshman',\n        'Age': 15,\n        'Class': 'First Class',\n        'Department': 'IT',\n        'Email': 'Lakshman@gmail.com',\n        'Phone_Number': '9191919191'\n    }\n    \n    #Accessing the whole dictionary\n    print(dic)\n    \n    dic.clear()\n    print(dic)\n    \n    #Accessing the whole dictionary\n    print(dic)\n    \ndef dict_pop():\n    '''\n    Create a dictionary with 5 key-value pairs.\n    '''\n    dic = {\n        'Name' : 'Lakshman',\n        'Age': 15,\n        'Class': 'First Class',\n        'Department': 'IT',\n        'Email': 'Lakshman@gmail.com',\n        'Phone_Number': '9191919191'\n    }\n    \n    #Accessing the whole dictionary\n    print(dic)\n    \n    dic.pop('Name')\n    print(dic)\n    \n    dic.pop('Age')\n    print(dic)\n    \n    dic.pop('Email')\n    print(dic)\n    \n    dic.pop('Phone_Number')\n    print(dic)\n    \n    #Accessing the whole dictionary\n    print(dic)\n    \ndef dict_clear_keys():\n    '''\n    Create a dictionary with 5 key-value pairs.\n    '''\n    dic = {\n        'Name' : 'Lakshman',\n        'Age': 15,\n        'Class': 'First Class',\n        'Department': 'IT',\n        'Email': 'Lakshman@gmail.com',\n        'Phone_Number': '9191919191'\n    }\n    \n    #Accessing the whole dictionary\n    print(dic)\n    \n    dic.clear_keys()\n    print(dic)\n    \n    #Accessing the whole dictionary\n    print(dic)\n    \n    dic.clear_keys()\n    print(dic)\n    \n    dic.clear_keys()\n    print(dic)\n    \ndef dict_clear_values():\n    '''\n    Create a dictionary with 5 key-value pairs.\n    '''\n    dic = {\n        'Name' : 'Lakshman',\n        'Age': 15,\n        'Class': 'First Class',\n        'Department': 'IT',\n        'Email': 'Lakshman@gmail.com'"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = ''.join(str1)\n    lst = []\n    for i in str2:\n        lst.append(i)\n    return tuple(lst)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    l = str1.split(\" \")\n    #print(l)\n    l = tuple(l)\n    #print(l)\n    return l\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    print(\"Input: \" + str1)\n    # print(type(str1))\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s = '-'\n    return s.join(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # a = str1.split()\n    # return tuple(a)\n    return tuple(str1)\n    \n    \n    \n    \n    \ndef main():\n    '''\n    Main function to test string_to_tuple\n    '''\n    str1 = 'abc'\n    print(string_to_tuple(str1))\n    \n    str2 = '4'\n    print(string_to_tuple(str2))\n    \n    str3 = '1234'\n    print(string_to_tuple(str3))\n    \n    str4 = '4567'\n    print(string_to_tuple(str4))\n    \n    str5 = 'qwertyuiop'\n    print(string_to_tuple(str5))\n    \n    str6 = '!@#$%^&*()'\n    print(string_to_tuple(str6))\n    \n    str7 = '123'\n    print(string_to_tuple(str7))\n    \n    str8 = '12'\n    print(string_to_tuple(str8))\n    \n    str9 = '12'\n    print(string_to_tuple(str9))\n    \n    str10 = '12345'\n    print(string_to_tuple(str10))\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \n    \n    \ndef main():\n    '''\n    Main function to test string_to_tuple\n    '''\n    str1 = 'abc'\n    print(string_to_tuple(str1))\n    \n    str2 = '4'\n    print(string_to_tuple(str2))\n    \n    str3 = '1234'\n    print(string_to_tuple(str3))\n    \n    str4 = '4567'\n    print(string_to_tuple(str4))\n    \n    str5 = 'qwertyuiop'\n    print(string_to_tuple(str5))\n    \n    str6 = '!@#$%^&*()'\n    print(string_to_tuple(str6))\n    \n    str7 = '123'\n    print(string_to_tuple(str7))\n    \n    str8 = '12'\n    print(string_to_tuple(str8))\n    \n    str9 = '12'\n    print(string_to_tuple(str9))\n    \n    str10 = '12345'\n    print(string_to_tuple(str10))\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \ndef main():\n    '''\n    Main function to test string_to_tuple\n    '''\n    str1 = 'abc'\n    print(string_to_tuple(str1))\n    \n    str2 = '4'\n    print(string_to_tuple(str2))\n    \n    str3 = '1234'\n    print(string_to_tuple(str3))\n    \n    str4 = '4567'\n    print(string_to_tuple(str4))\n    \n    str5 = 'qwertyuiop'\n    print(string_to_tuple(str5))\n    \n    str6 = '!@#$%^&*()'\n    print(string_to_tuple(str6))\n    \n    str7 = '123'\n    print(string_to_tuple(str7))\n    \n    str8 = '12'\n    print(string_to_tuple(str8))\n    \n    str9 = '12'\n    print(string_to_tuple(str9))\n    \n    str10 = '12345'\n    print(string_to_tuple(str10))\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \ndef main():\n    '''\n    Main function to test string_to_tuple\n    '''\n    str1 = 'abc'\n    print(string_to_tuple(str1))\n    \n    str2 = '4'\n    print(string_to_tuple(str2))\n    \n    str3 = '1234'\n    print(string_to_tuple(str3))\n    \n    str4 = '4567'\n    print(string_to_tuple(str4))\n    \n    str5 = 'qwertyuiop'\n    print(string_to_tuple(str5))\n    \n    str6 = '!@#$%^&*()'\n    print(string_to_tuple(str6))\n    \n    str7 = '123'\n    print(string_to_tuple(str7))\n    \n    str8 = '12'\n    print(string_to_tuple(str8))\n    \n    str9 = '12'\n    print(string_to_tuple(str9))\n    \n    str10 = '12345'\n    print(string_to_tuple(str10))\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \ndef main():\n    '''\n    Main function to test string_to_tuple\n    '''\n    str1 = 'abc'\n    print(string_to_tuple(str1))\n    \n    str2 = '4'\n    print(string_to_tuple(str2))\n    \n    str3 = '1234'\n    print(string_to_tuple(str3))\n    \n    str4 = '4567'\n    print(string_to_tuple(str4))\n    \n    str5 = 'qwertyuiop'\n    print(string_to_tuple(str5))\n    \n    str6 = '!@#$%^&*()'\n    print(string_to_tuple(str6))\n    \n    str7 = '123'\n    print(string_to_tuple(str7))\n    \n    str8 = '12'\n    print(string_to_tuple(str8))\n    \n    str9 = '12'\n    print(string_to_tuple(str9))\n    \n    str10 = '12345'\n    print(string_to_tuple(str10))\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \ndef main():\n    '''\n    Main function to test string_to_tuple\n    '''\n    str1 = 'abc'\n    print(string_to_tuple(str1))\n    \n    str2 = '4'\n    print(string_to_tuple(str2))\n    \n    str3 = '1234'\n    print(string_to_tuple(str3))\n    \n    str4 = '4567'\n    print(string_to_tuple(str4))\n    \n    str5 = 'qwertyuiop'\n    print(string_to_tuple(str5))\n    \n    str6 = '!@#$%^&*()'\n    print(string_to_tuple(str6))\n    \n    str7 = '123'\n    print(string_to_tuple(str7))\n    \n    str8 = '12'\n    print(string_to_tuple(str8))\n    \n    str9 = '12'\n    print(string_to_tuple(str9))\n    \n    str10 = '12345'\n    print(string_to_tuple(str10))\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \ndef main():\n    '''\n    Main function to test string_to_tuple\n    '''\n    str1 = 'abc'\n    print(string_to_tuple(str1))\n    \n    str2 = '4'\n    print(string_to_tuple(str2))\n    \n    str3 = '1234'\n    print(string_to_tuple(str3))\n    \n    str4 = '4567'\n    print(string_to_tuple(str4))\n    \n    str5 = 'qwertyuiop'\n    print(string_to_tuple(str5))\n    \n    str6 = '!@#$%^&*()'\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Python program to set leftmost unset bit in the 32 bits\n    while(n):\n        n = n & (n - 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #code here\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= ~0x00000001\n    return n\nif __name__ == '__main__': \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(1)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(1))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(2)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(2))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(3)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(3))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(4)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(4))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(5)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(5))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(6)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(6))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(7)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(7))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(8)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(8))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(9)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(9))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(10)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(10))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(11)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(11))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(12)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(12))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(13)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(13))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(14)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(14))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(15)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(15))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(16)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(16))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(17)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(17))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(18)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(18))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(19)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(19))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(20)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(20))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(21)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(21))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(22)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(22))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(23)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(23))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(24)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(24))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(25)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(25))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(26)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(26))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(27)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(27))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(28)) \n    print (\"After setting left most bit: \", hex(set_left_most_unset_bit(28))) \n    # This is required to check if the left most bit is set or not\n    \n    # Set left most bit\n    print (\"Before setting left most bit: \", hex(29))"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & -n) | (~n & -n + 1)\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n > 0:\n        print(\"Setting left most unset bit\")\n        n ^= 1\n        return n\n    else:\n        print(\"Left most unset bit already set\")\n        return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n << 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # code here\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n=n&(~(n-1)) #to set the left most unset bit\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print (\"Left most unset bit\")\n    # To set left most unset bit use bitwise left shift operator.\n    return n << 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n = n & (n - 1)\n    return (count * (-1))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*math.pow(r,2)*h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=math.pi*math.pow(r,3)/3\n    return volume\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface=2*math.pi*math.pow(r,2)+2*math.pi*math.pow(h,2)\n    return surface\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*math.pow(r,3)/3+math.pi*math.pow(h,2)/3\n    return volume\ndef surface_area_tub(r,h):\n    '''\n    Write a function to find the surface area of a tub.\n    '''\n    surface=2*math.pi*math.pow(r,2)+(2*math.pi*math.pow(h,2))\n    return surface\ndef volume_tub(r,h):\n    '''\n    Write a function to find the volume of a tub.\n    '''\n    volume=math.pi*math.pow(r,3)/3+math.pi*math.pow(h,2)/3\n    return volume\ndef surface_area_pyramid(l,b):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surface=2*math.pi*l*b\n    return surface\ndef volume_pyramid(l,b):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume=math.pi*l*b*2\n    return volume\ndef surface_area_cone_in_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone in a cylinder.\n    '''\n    surface=math.pi*math.pow(r,2)+2*math.pi*math.pow(h,2)\n    return surface\ndef volume_cone_in_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone in a cylinder.\n    '''\n    volume=math.pi*math.pow(r,2)*h+math.pi*math.pow(r,2)\n    return volume\ndef surface_area_cone_in_tub(r,h):\n    '''\n    Write a function to find the surface area of a cone in a tub.\n    '''\n    surface=math.pi*math.pow(r,2)+(2*math.pi*math.pow(h,2))\n    return surface\ndef volume_cone_in_tub(r,h):\n    '''\n    Write a function to find the volume of a cone in a tub.\n    '''\n    volume=math.pi*math.pow(r,2)*h+math.pi*math.pow(r,2)\n    return volume\ndef surface_area_cone_in_pyramid(l,b):\n    '''\n    Write a function to find the surface area of a cone in a pyramid.\n    '''\n    surface=2*math.pi*l*b\n    return surface\ndef volume_cone_in_pyramid(l,b):\n    '''\n    Write a function to find the volume of a cone in a pyramid.\n    '''\n    volume=math.pi*l*b*2\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    V = pi*r**2*h\n    return V\nprint(volume_cone(3,2))\ndef volume_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    from math import pi\n    V = pi*r**2*h\n    return V\nprint(volume_cylinder(5,4))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r ** 2) * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi)*(r**2)*h\n    return volume\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi*(r**2)*h\n    return area\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = (math.pi)*(r**2)*h\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (math.pi)*(r**2)*h\n    return volume\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4*math.pi*r**2)\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4*math.pi*r**3)/3\n    return volume\ndef area_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surface_area = b*h\n    return surface_area\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = (1/3)*(b*h*math.sqrt(3))\n    return volume\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (2*math.pi*r**3)/3\n    return volume\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    surface_area = (a*b*c)/(4*math.pi)\n    return surface_area\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    volume = (a*b*c)/(3*math.sqrt(3))\n    return volume\ndef area_pyramid(b,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surface_area = b*h\n    return surface_area\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = (b*h*math.sqrt(3))/3\n    return volume\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = (math.pi)*(r**2)*h\n    return area\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi)*(r**2)*h\n    return volume\ndef surface_area(shape,r):\n    '''\n    Write a function that takes in shape (i.e., sphere, cylinder, cone, pyramid, or\n    ellipsoid) and radius and computes the surface area.\n    '''\n    if shape == \"sphere\":\n        surface_area = 4*math.pi*r**2\n    if shape == \"cylinder\":\n        surface_area = 2*math.pi*r*h\n    if shape == \"cone\":\n        surface_area = (math.pi)*(r**2)*h\n    if shape == \"pyramid\":\n        surface_area = (b*h*math.sqrt(3))/3\n    if shape == \"ellipsoid\":\n        surface_area = (a*b*c)/(4*math.pi)\n    return surface_area\ndef volume(shape,r):\n    '''\n    Write a function that takes in shape (i.e., sphere, cylinder, cone, pyramid, or\n    ellipsoid) and radius and computes the volume.\n    '''\n    if shape == \"sphere\":\n        volume = (4/3)*math.pi*(r**3)\n    if shape == \"cylinder\":\n        volume = (math.pi)*(r**3)*h\n    if shape == \"cone\":\n        volume = (math.pi)*(r**3)*h\n    if shape == \"pyramid\":\n        volume = (b*h*math.sqrt(3))/3\n    if shape == \"ellipsoid\":\n        volume = (a*b*c)/(3*math.sqrt(3))\n    return volume\ndef area_cylinder(r,h):\n    '''\n    Write a function that takes in radius and height and computes the area of the\n    cylinder.\n    '''\n    area = (2*math.pi*r)*h\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in radius and height and computes the volume of the\n    cylinder.\n    '''\n    volume = (2*math.pi*r)*h\n    return volume\ndef area_cone(r,h):\n    '''\n    Write a function that takes in radius and height and computes the surface area\n    of a cone.\n    '''\n    surface_area = (math.pi)*(r**2)*h\n    return surface_area\ndef volume_cone(r,h):\n    '''\n    Write a function that takes in radius and height and computes the volume of a\n    cone.\n    '''\n    volume = (math.pi)*(r**2)*h\n    return volume\ndef surface_area(shape,r):\n    '''\n    Write a function that takes in shape (i.e., sphere, cylinder, cone, pyramid, or\n    ellipsoid) and radius and computes the surface area.\n    '''\n    if shape == \"sphere\":\n        surface_area = 4*math.pi*r**2\n    if shape == \"cylinder\":\n        surface_area = 2*math.pi*r*h\n    if shape == \"cone\":\n        surface_area = (math.pi)*(r**2)*h\n    if shape == \"pyramid\":\n        surface_area = (b*h*math.sqrt(3))/3\n    if shape == \"ellipsoid\":\n        surface_area = (a*b*c)/(4*math.pi)\n    return surface_area\ndef volume(shape,r):\n    '''\n    Write a function that takes in shape (i.e., sphere, cylinder, cone, pyramid, or\n    ellipsoid) and radius and computes the volume.\n    '''\n    if shape == \"sphere\":\n        volume = (4/3)*math.pi*(r**3)\n    if shape == \"cylinder\":\n        volume = (math.pi)*(r**3)*h\n    if shape == \"cone\":\n        volume = (math.pi)*(r**3)*h\n    if shape == \"pyramid\":\n        volume = (b*h*math.sqrt(3))/3\n    if shape == \"ellipsoid\":\n        volume = (a*b*c)/(3*math.sqrt(3))\n    return volume\ndef cylinder_volume(r,h):\n    '''\n    Write a function that takes in radius and height and computes the volume of a\n    cylinder.\n    '''\n    volume = (math.pi)*(r**2)*h\n    return volume\ndef cone_volume(r,h):\n    '''\n    Write a function that takes in radius and height and computes the volume of a\n    cone.\n    '''\n    volume = (math.pi)*(r**2)*h\n    return volume\ndef pyramid_volume(b,h):\n    '''\n    Write a function that takes in radius and height and computes the volume of a\n    pyramid.\n    '''\n    volume = (b*h*math.sqrt(3))/3\n    return volume\ndef elli"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi*(r**2)*h)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (pi/3)*(r**2)*(h)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (r**2 * math.pi) * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14159\n    v = pi*r**2*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    volume = 1/3*math.pi*math.pow(r,2)*h\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2 ** (n - 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return -1\n    while (n & (n-1) == 0): \n        n = n & ~(n-1)\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    for i in range(32):\n        if (1 << i) <= n:\n            if (1 << i) > max_power:\n                max_power = 1 << i\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power_of_2 = 0\n    while max_power_of_2 < n:\n        max_power_of_2 = 2 ** max_power_of_2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    power = 1\n    while (2 ** power <= n): \n        power = power + 1\n    return power - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    n = n | (1<<31)\n    return max(n>>1, n)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 2**power:\n        power += 1\n    return power\n        \nif __name__ == \"__main__\":\n    n = int(input())\n    power = highest_Power_of_2(n)\n    print(2**power)"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    binary_n = bin(n)\n    binary_n = binary_n[2:]\n    \n    while len(binary_n) < n:\n        binary_n = '0' + binary_n\n    \n    binary_n = binary_n[:n]\n    \n    binary_n_1 = binary_n\n    count = 0\n    while True:\n        if binary_n.count('1') <= binary_n.count('0'):\n            binary_n = binary_n_1\n            count += 1\n        else:\n            break\n    \n    print(binary_n)\n    print(count)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n <= 0: \n        n = int(input(\"Please enter a positive number.\\n\"))\n    if n == 1: \n        return n \n    return highest_Power_of_2(n>>1) \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l = []\n    for i in range(0,n):\n        l.append(2**i)\n    return(max(l))\n    # if l[i] == 2**i:\n    #     return(2**i)\n    # else:\n    #     return(highest_Power_of_2(n-1))\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas_num(n):\n        if n == 0:\n            return 2\n        if n == 1:\n            return 1\n        return lucas_num(n - 1) + lucas_num(n - 2)\n    return lucas_num(n - 1) + lucas_num(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return ((2 * n) + 1) * (2 * n)\n    \nprint(find_lucas(4))"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # base cases\n    if n < 0:\n        print('n must be positive integer')\n        return\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    if n == 0:\n        return lucas\n    if n == 1:\n        return 1\n    for i in range(2, n+1):\n        lucas = lucas + lucas\n    return lucas\n    \ndef find_lucas_using_memoization(n):\n    '''\n    Write a function that finds then'th lucas number using recursion.\n    '''\n    memo = {}\n    def find_lucas_recursive(n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return lucas\n        if n == 1:\n            return 1\n        memo[n] = find_lucas_recursive(n - 1) + find_lucas_recursive(n - 2)\n        return memo[n]\n    return find_lucas_recursive(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base cases \n    if (n == 1): \n        return 1\n    elif (n == 0): \n        return 0\n    else: \n        # Find the nth term \n        return (find_lucas(n - 1) + find_lucas(n - 2)) \n "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    sum = 2\n    i = 2\n    while(i<=n):\n        sum = sum + 1\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_n = 2\n    if n == 1:\n        return 1\n    for i in range(1, n):\n        lucas_n += 1\n    return lucas_n\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i), end=\" \")\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        print(string.format(element), end='')\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        list_.append(string.format(item))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = \"-\"*len(string)\n    return list_.map(lambda x: string.replace('#', x))\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n    \ndef add_string_1(list_, string):\n    '''\n    Write a function that adds a string to the beginning of each element in a list.\n    '''\n    return ['{} {}'.format(string, x) for x in list_]\n    \ndef add_string_2(list_, string):\n    '''\n    Write a function that adds a string to the end of each element in a list.\n    '''\n    return ['{} {}'.format(x, string) for x in list_]\n    \ndef add_string_3(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{} {} {}'.format(string, x, string) for x in list_]\n    \ndef add_string_4(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{} {} {}'.format(x, string, string) for x in list_]\n    \ndef add_string_5(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_6(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(x, string, string) for x in list_]\n    \ndef add_string_7(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_8(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(x, string, string) for x in list_]\n    \ndef add_string_9(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_10(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_11(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_12(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_13(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_14(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_15(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_16(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_17(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_18(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_19(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_20(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_21(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_22(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_23(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_24(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_25(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_26(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_27(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_28(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_29(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string) for x in list_]\n    \ndef add_string_30(list_, string):\n    '''\n    Write a function that adds a string to the beginning and end of each element in a list.\n    '''\n    return ['{}{}{}'.format(string, x, string"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # your code here\n    dct = {l1[i]: l2[i] for i in range(len(l1))}\n    for key, val in dct.items():\n        dct[key] = {l3[i]: dct[key][i] for i in range(len(dct[key]))}\n    return dct\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l1 = [1,2,3,4,5]\n    # l2 = ['a','b','c']\n    # l3 = [(0,1),(1,2),(2,3),(3,4)]\n    dictionary = dict()\n    for i in range(len(l1)):\n        dictionary[l1[i]] = l2[i]\n    for i in range(len(l2)):\n        dictionary[l2[i]] = l3[i]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for key, value in zip(l1, l2):\n        d1[key] = value\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) and len(l1) == len(l3):\n        count = 0\n        for i in range(len(l1)):\n            l3[count] = {l1[i]:l2[i]}\n            count += 1\n        return l3\n    else:\n        return -1\n        "
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = []\n    for i in range(len(l1)):\n        res.append({})\n        res[i][l1[i]] = l2[i]\n        res[i][l3[i]] = l2[i]\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for i in range(len(l1)):\n        res[l1[i]] = l2[i]\n        res[l3[i]] = l2[i]\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    ans = {}\n    for i in range(len(l1)):\n        d = {}\n        d['First Name'] = l1[i]\n        d['Last Name'] = l2[i]\n        d['Email'] = l3[i]\n        ans[i] = d\n    return ans\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1={}\n    for i in range(len(l1)):\n        if l1[i] in d1:\n            d1[l1[i]].append(l2[i])\n        else:\n            d1[l1[i]]=[l2[i]]\n    for i in range(len(l3)):\n        if l3[i] in d1:\n            d1[l3[i]].append(l4[i])\n        else:\n            d1[l3[i]]=[l4[i]]\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # res = {l1[i]: l2[i] for i in range(len(l1))}\n    # print(res)\n    # for i in range(len(l1)):\n    #     res[l1[i]] = l2[i]\n    # print(res)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(input())\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_sum = -float('inf')\n    while (n!= 0):\n        max_sum = max(max_sum, (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)))\n        n = n//2\n        if n == 0:\n            break\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_rec(n):\n        if n == 1:\n            return 1\n        else:\n            return max(get_max_sum_rec(n/2), get_max_sum_rec(n/3), get_max_sum_rec(n/4), get_max_sum_rec(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==0 or n==1:\n        return n\n    else:\n        return max(get_max_sum(n//2),get_max_sum(n//3),get_max_sum(n//4),get_max_sum(n//5))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    #first element\n    n1 = 1\n    max_sum = n1\n    \n    #second element\n    n2 = 2\n    max_sum = max(n1, max_sum)\n    \n    #third element\n    n3 = 3\n    max_sum = max(n2, max_sum)\n    \n    #fourth element\n    n4 = 4\n    max_sum = max(n3, max_sum)\n    \n    #fifth element\n    n5 = 5\n    max_sum = max(n4, max_sum)\n    \n    #sixth element\n    n6 = 6\n    max_sum = max(n5, max_sum)\n    \n    #seventh element\n    n7 = 7\n    max_sum = max(n6, max_sum)\n    \n    #eighth element\n    n8 = 8\n    max_sum = max(n7, max_sum)\n    \n    #ninth element\n    n9 = 9\n    max_sum = max(n8, max_sum)\n    \n    #tenth element\n    n10 = 10\n    max_sum = max(n9, max_sum)\n    \n    #eleventh element\n    n11 = 11\n    max_sum = max(n10, max_sum)\n    \n    #twelfth element\n    n12 = 12\n    max_sum = max(n11, max_sum)\n    \n    #thirteenth element\n    n13 = 13\n    max_sum = max(n12, max_sum)\n    \n    #fourth element\n    n14 = 14\n    max_sum = max(n13, max_sum)\n    \n    #fifth element\n    n15 = 15\n    max_sum = max(n14, max_sum)\n    \n    #sixth element\n    n16 = 16\n    max_sum = max(n15, max_sum)\n    \n    #seventh element\n    n17 = 17\n    max_sum = max(n16, max_sum)\n    \n    #eighth element\n    n18 = 18\n    max_sum = max(n17, max_sum)\n    \n    #ninth element\n    n19 = 19\n    max_sum = max(n18, max_sum)\n    \n    #tenth element\n    n20 = 20\n    max_sum = max(n19, max_sum)\n    \n    #eleventh element\n    n21 = 21\n    max_sum = max(n20, max_sum)\n    \n    #twelfth element\n    n22 = 22\n    max_sum = max(n21, max_sum)\n    \n    #thirteenth element\n    n23 = 23\n    max_sum = max(n22, max_sum)\n    \n    #fourth element\n    n24 = 24\n    max_sum = max(n23, max_sum)\n    \n    #fifth element\n    n25 = 25\n    max_sum = max(n24, max_sum)\n    \n    #sixth element\n    n26 = 26\n    max_sum = max(n25, max_sum)\n    \n    #seventh element\n    n27 = 27\n    max_sum = max(n26, max_sum)\n    \n    #eighth element\n    n28 = 28\n    max_sum = max(n27, max_sum)\n    \n    #ninth element\n    n29 = 29\n    max_sum = max(n28, max_sum)\n    \n    #tenth element\n    n30 = 30\n    max_sum = max(n29, max_sum)\n    \n    #eleventh element\n    n31 = 31\n    max_sum = max(n30, max_sum)\n    \n    #twelfth element\n    n32 = 32\n    max_sum = max(n31, max_sum)\n    \n    #thirteenth element\n    n33 = 33\n    max_sum = max(n32, max_sum)\n    \n    #fourth element\n    n34 = 34\n    max_sum = max(n33, max_sum)\n    \n    #fifth element\n    n35 = 35\n    max_sum = max(n34, max_sum)\n    \n    #sixth element\n    n36 = 36\n    max_sum = max(n35, max_sum)\n    \n    #seventh element\n    n37 = 37\n    max_sum = max(n36, max_sum)\n    \n    #eighth element\n    n38 = 38\n    max_sum = max(n37, max_sum)\n    \n    #ninth element\n    n39 = 39\n    max_sum = max(n38, max_sum)\n    \n    #tenth element\n    n40 = 40\n    max_sum = max(n39, max_sum)\n    \n    #eleventh element\n    n41 = 41\n    max_sum = max(n40, max_sum)\n    \n    #twelfth element\n    n42 = 42\n    max_sum = max(n41, max_sum)\n    \n    #thirteenth element\n    n43 = 43\n    max_sum = max(n42, max_sum)\n    \n    #fourth element\n    n44 = 44\n    max_sum = max(n43, max_sum)\n    \n    #fifth element\n    n45 = 45\n    max_sum = max(n44, max_sum)\n    \n    #sixth element\n    n46 = 46\n    max_sum = max(n45, max_sum)\n    \n    #seventh element\n    n47 = 47\n    max_sum = max(n46, max_sum)\n    \n    #eighth element\n    n48 = 48\n    max_sum = max(n47, max_sum)\n    \n    #ninth element\n    n49 = 49\n    max_sum = max(n48, max_sum)\n    \n    #tenth element\n    n50 = 50\n    max_sum = max(n49, max_sum)\n    \n    #eleventh element\n    n51 = 51\n    max_sum = max(n50, max_sum)\n    \n    #twelfth element\n    n52 = 52\n    max_sum = max(n51, max_sum)\n    \n    #thirteenth element\n    n53 = 53\n    max_sum = max(n52, max_sum)\n    \n    #fourth element\n    n54 = 54\n    max_sum = max(n53, max_sum)\n    \n    #fifth element\n    n55 = 55\n    max_sum = max(n54, max_sum)\n    \n    #sixth element\n    n56 = 56\n    max_sum = max(n55, max_sum)\n    \n    #seventh element\n    n57 = 57\n    max_sum = max(n56, max_sum)\n    \n    #eighth element\n    n58 = 58\n    max_sum = max(n57, max_sum)\n    \n    #ninth element\n    n59 = 59\n    max_sum = max(n58, max_sum)\n    \n    #tenth element\n    n60 = 60\n    max_sum = max(n59, max_sum)\n    \n    #eleventh element\n    n61 = 61\n    max_sum = max(n60, max_sum)\n    \n    #twelfth element\n    n62 = 62\n    max_sum = max(n61, max_sum)\n    \n    #thirteenth element\n    n63 = 63\n    max_sum = max(n62, max_sum)\n    \n    #fourth element\n    n64 = 64\n    max_sum = max(n63, max_sum)\n    \n    #fifth element\n    n65 = 65\n    max_sum = max(n64, max_sum)\n    \n    #sixth element\n    n66 = 66\n    max_sum = max(n65, max_sum)\n    \n    #seventh element\n    n67 = 67\n    max_sum = max(n66, max_sum)\n    \n    #eighth element\n    n68 = 68\n    max_sum = max(n67, max_sum)\n    \n    #ninth element\n    n69 = 69\n    max_sum = max(n6"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0:\n        return get_max_sum(n/2) + n\n    if n % 3 == 0:\n        return get_max_sum(n/3) + n\n    if n % 4 == 0:\n        return get_max_sum(n/4) + n\n    if n % 5 == 0:\n        return get_max_sum(n/5) + n\n    return n\n    \n    \n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    print (n)\n    if n == 0:\n        return 0\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_dp(n):\n        max_sum = []\n        max_sum.append(n)\n        max_sum.append(n/2)\n        max_sum.append(n/3)\n        max_sum.append(n/4)\n        max_sum.append(n/5)\n        return max_sum[int(max(max_sum))]\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # if n is even, then f(n/2) = f(n/2) + f(n/3), f(n/3) = f(n/3) + f(n/4), f(n/4) = f(n/4) + f(n/5), f(n/5) = f(n/5) + f(n/6)\n    # if n is odd, then f(n/2) = f(n/2) + f(n/3), f(n/3) = f(n/3) + f(n/4), f(n/4) = f(n/4) + f(n/5), f(n/5) = f(n/5) + f(n/6)\n    # return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    # Time: O(n)\n    # Space:O(1)\n    # f(n) = max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/4) + f(n/5), f(n/5) + f(n/6))\n    # f(n) = max(f(n/2) + f(n/3), f(n/3) + f(n/4), f(n/"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for num in input_list:\n        if len(num) > max_len:\n            max_len = len(num)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    input_list = sorted(input_list, key=len)\n    print(input_list)\n    return input_list[-1]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list,key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    l = []\n    for i in input_list:\n        if type(i) == list:\n            if len(i) > len(l):\n                l = i\n    return l\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = []\n    for i in range(len(input_list)):\n        len_list.append(len(input_list[i]))\n    max_len = max(len_list)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Your code here\n    max_len = len(input_list[0])\n    max_val = input_list[0]\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_val = input_list[i]\n    print(max_val)\n    return max_val\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            count = 1\n            break\n    if count == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = []\n    for i in range(len(test_tup)):\n        if test_tup[i] not in test_list:\n            test_list.append(test_tup[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Dictionary to store all seen elements.\n    seen = {}\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(1,len(test_tup)):\n        if(test_tup[i-1] in test_tup):\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = set(test_tup)\n    if len(test_tup) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(0,len(test_tup)-1):\n        for j in range(i+1,len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    data_set = set(test_tup)\n    if len(data_set) == len(test_tup):\n        return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    set1 = set(str1)\n    print(set1)\n    for i in str1:\n        if str1.count(i)==1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    temp = {}\n    for i in str1:\n        if i in temp:\n            temp[i] += 1\n        else:\n            temp[i] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Code here\n    str1 = str1.lower()\n    if str1 == None:\n        return -1\n    elif len(str1)==0:\n        return -1\n    for i in range(0,len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return i\n    return -1"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = list(str1)\n    print(str1)\n    dict = {}\n    \n    for i in str1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    \n    for i in str1:\n        if dict[i] == 1:\n            return i\n    return -1\n    \nfirst_non_repeating_character('aaaaa') # 'a'\nfirst_non_repeating_character('aabaaaa') # 'a'\nfirst_non_repeating_character('abccdeffgg') # 'f'\nfirst_non_repeating_character('abccdeeffgg') # 'd'\nfirst_non_repeating_character('abccdefgg') # 'g'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # here is the trick\n    # The key is to compare every character to the character in front of it. If that character \n    # is equal, we can just move the pointer to the next character. If it is not equal, we cannot\n    # go further and we must find another character. \n    # After comparing every character, we move the pointer to the character after the last \n    # found character. We will not move the pointer if it is not found anymore.\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[j]!= str1[i]:\n                break\n        if j == len(str1)-1:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i not in d:\n            d[i] = 0\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    temp = {}\n    if len(str1) == 0:\n        return None\n    else:\n        for i in range(len(str1)):\n            if str1[i] not in temp:\n                temp[str1[i]] = 1\n            else:\n                temp[str1[i]] += 1\n        for i in range(len(str1)):\n            if temp[str1[i]] == 1:\n                return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Creating an empty dictionary\n    dict1 = {}\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n    for i in str1:\n        if i in chars:\n            chars[i] += 1\n        else:\n            chars[i] = 1\n    for j in str1:\n        if chars[j] == 1:\n            return j\n    return''\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.search(string)\n    return match == None\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.match(regex,string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = regex\n    if re.search(pattern, string) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #code here\n    return re.match(regex,string)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return pattern.search(string)!= None\n    "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex, string)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a, b, c]\n    num_list.sort()\n    if num_list[1] == num_list[0]:\n        return num_list[1]\n    if num_list[1] == num_list[2]:\n        return num_list[1]\n    if num_list[2] == num_list[0]:\n        return num_list[2]\n    if num_list[1] == num_list[2]:\n        return num_list[1]\n    if num_list[1]!= num_list[0] and num_list[2]!= num_list[0]:\n        return (num_list[1] + num_list[2]) / 2\n    return num_list[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return b\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and b<c:\n        if a<c:\n            return c\n        else:\n            return b\n    elif a<b and c<b:\n        if a<c:\n            return c\n        else:\n            return b\n    elif a<c and b<c:\n        if a<b:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a,b,c])\n    print(sorted_numbers[1])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    \n    if (sorted_list[1] + sorted_list[2]) > (sorted_list[0] + sorted_list[2]):\n        return sorted_list[1]\n    else:\n        return sorted_list[0]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a <= b and a <= c:\n        return b\n    if b <= a and b <= c:\n        return a\n    if c <= a and c <= b:\n        return b\n    if a <= b and b <= c:\n        return c\n    if a <= c and c <= b:\n        return b\n    if a <= c and c <= b:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if a+b+c == 0:\n        return None\n    if a == b and b == c:\n        return a\n    if a == b or b == c or a == c:\n        return b\n    return (a+b+c-2)/2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median=a\n    if(b<median):\n        median=b\n    if(c<median):\n        median=c\n    if(median==a):\n        return a\n    elif(median==b):\n        return b\n    elif(median==c):\n        return c\n    else:\n        return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    print(\"Median of numbers: \" + str(sorted([a,b,c])))\n    print(\"Median of numbers: \" + str((sorted([a,b,c]))[1]))\n    return str((sorted([a,b,c]))[1])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and b<c:\n        if a<c:\n            median = a\n        else:\n            median = c\n    elif b<a and a<c:\n        if b<c:\n            median = b\n        else:\n            median = c\n    else:\n        if a<c:\n            median = a\n        else:\n            median = c\n    return median\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum(int(i) for i in str(num))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s=0\n    for i in nums:\n        s+=int(i)\n    return s\nprint(sum_of_digits(['0','1','2']))"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for digit in str(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for x in nums:\n        s += int(x)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = 0\n    for num in nums:\n        while num > 0:\n            res += num % 10\n            num //= 10\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(d) for d in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(sum(nums))])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_ = 0\n    for num in nums:\n        sum_ += int(str(num))\n    return sum_\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    bit_xor_tup = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            bit_xor_tup.append(0)\n        else:\n            bit_xor_tup.append(1)\n    \n    return tuple(bit_xor_tup)\n    "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return(tuple(x^y for x,y in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tuple = (tup1 ^ tup2)\n    return xor_tuple\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        if len(test_tup1) == 0:\n            return 0\n        return int(test_tup1[0]) ^ int(test_tup2[0])\n    else:\n        raise ValueError('tuples must be of equal length')\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    try:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = int(test_tup1[i])\n            test_tup2[i] = int(test_tup2[i])\n        xor = test_tup1[0] ^ test_tup2[0]\n        for i in range(1,len(test_tup1)):\n            xor = xor ^ test_tup1[i]\n        return xor\n    except TypeError:\n        print(\"TypeError: Can't convert 'float' object to an integer\")\n    except ValueError:\n        print(\"ValueError: negative values not allowed\")\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a = list(test_tup1)\n    b = list(test_tup2)\n    c = []\n    for i, j in zip(a, b):\n        c.append(i^j)\n    return tuple(c)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup1[1] ^ test_tup2[0] ^ test_tup2[1])\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # num_unique = 0\n    # for index in range(len(test_list)):\n    #     if test_list[index] not in test_list[index + 1:]:\n    #         num_unique += 1\n    #     else:\n    #         print(\"Number of unique tuples: \" + str(num_unique))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                if test_list[i] not in unique_list:\n                    unique_list.append(test_list[i])\n                break\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # for i in test_list:\n    #     print(i)\n    freq_map = {}\n    for item in test_list:\n        if item in freq_map:\n            freq_map[item] += 1\n        else:\n            freq_map[item] = 1\n    # print(freq_map)\n    # print(len(freq_map))\n    return freq_map\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    print(freq)\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    count = Counter(test_list)\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    #To check if the given list is empty or not.\n    if test_list ==[]:\n        print(\"empty list\")\n    else:\n        #To extract the unique values from the list.\n        test_set = set(test_list)\n        print(test_set)\n        for x in test_set:\n            count += 1\n        print(\"Count of unique elements:\",count)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    a = set()\n    for i in range(len(test_list)):\n        a.add(tuple(test_list[i]))\n    return len(a)\n    \nprint(extract_freq([[1,2],[2,3],[3,4],[4,5]])) # returns 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for num in test_list:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_list = []\n    for i in range(len(test_tup1)):\n        nested_list.append(test_tup1[i] + test_tup2[i])\n    return nested_list\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tuple = (test_tup1[0], test_tup2[0])\n    return nested_tuple\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    x = list()\n    for i in range(len(test_tup1)):\n        x.append(test_tup1[i] + test_tup2[i])\n    return tuple(x)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(0, len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] + test_tup2[i],)\n    return new_tup\n    \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(sum(x) for x in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        new_tup1.append(tup1)\n        new_tup2.append(tup2)\n    new_tup1 = tuple(new_tup1)\n    new_tup2 = tuple(new_tup2)\n    return new_tup1 + new_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return(tuple([tup1[i]+tup2[i] for i in range(len(tup1))]))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return []\n    elif len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    else:\n        return test_tup1[0] + test_tup2[0], add_nested_tuples(test_tup1[1:], test_tup2[1:])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        tup = (test_tup1[i], test_tup2[i])\n        yield tup\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    else:\n        return a\n    "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\nprint(\"Minimum of two numbers : \",minimum(50, 100))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    #Write your Code here\n    \n    if a>b:\n        print(a,\"is min\")\n    else:\n        print(b,\"is min\")\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(\"Minimum number is\", a)\n    else:\n        print(\"Minimum number is\", b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        print(a)\n    else:\n        print(b)\n    \nminimum(10,5)\nminimum(8,5)\nminimum(5,4)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a < b):\n        return a\n    return b\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuple1.index(tuplex)} - \",\" element is in the tuple\")\n    else:\n        print(f\"{tuple1.index(tuplex)} - \",\" element is not in the tuple\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    \n    for i in tuplex:\n        if i == tuple1:\n            print('Element found')\n            break\n        else:\n            print('Not found')\n        \nif __name__ == \"__main__\": \n    tuplex = ('mona', 'dhoni', 'rohan') \n    tuple1 = ('neha') \n    check_tuplex(tuplex,tuple1)"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    print(\"Original tuple: \",tuplex)\n    print(\"Element to be checked: \",tuple1)\n    result = 0\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            result = 1\n            break\n    if result == 0:\n        print(\"Element does not exist\")\n    else:\n        print(\"Element exists\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        print(\"\\nYes\")\n    else:\n        print(\"\\nNo\")\n    \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element present\")\n    else:\n        print(\"Element not present\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1 \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Code here\n    odd_parity = 0\n    y = x\n    while(y!= 0):\n        rem = y % 10\n        odd_parity = odd_parity ^ rem\n        y = y // 10\n    if odd_parity == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # parity = 0\n    # num = x\n    # while(num>0):\n    #     parity = parity ^ num % 2\n    #     num = num >> 1\n    # return parity\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = (x % 2)\n    return y\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"{} is even\".format(x))\n    else:\n        print(\"{} is odd\".format(x))\n    return\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n    "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x&1)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return bool(x & 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return ((x & 1) == 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Write a code here\n    if x % 2 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        return int(''.join(sorted(str(n), reverse=True))) if int(str(n)) > 100 else -1\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    stack = []\n    if len(n) <= 1:\n        return n\n    while len(n) > 1:\n        min_str = min(n)\n        stack.append(min_str)\n        n = n.replace(min_str, \"\", 1)\n        # n = n.replace(min_str, \"\", 1)\n        # n = n.replace(min_str, \"\")\n        # print(n)\n    # print(stack)\n    stack.append(n)\n    # print(stack)\n    result = int(\"\".join(stack))\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    if s == s[::-1]:\n        return -1\n    else:\n        i = -1\n        while i < len(s) - 1:\n            if int(s[i]) > int(s[i+1]):\n                s = s[:i+1] + str(int(s[i]) - 1) + s[i+2:]\n            else:\n                i += 1\n        return int(s)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # The algorithm to get the next bigger number in the format \"bigger_number_next\"\n    # is that \"next\" is the number of digits in the number.\n    # So, in order to get the next bigger number, the number of digits should be +1 more than the current one.\n    # The value of the current number should be incremented by +1 by taking the current value in the list.\n    # The value of the next number should be the last digit of the current number value.\n    # If the next number is -1, then the loop should be continued.\n    # Therefore, we need to check the value of the next number and if it is -1, then we need to repeat the loop\n    # until the next number is not -1.\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    biggest = n\n    number = str(n)\n    \n    #biggest = int(''.join(sorted(number)))\n    \n    for i in range(len(number)):\n        for j in range(len(number)):\n            if int(number[i]) > int(number[j]):\n                biggest = int(number[i]) + int(number[j])\n                biggest = str(biggest)\n                #print(biggest)\n                number = biggest\n    return int(number)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #read in the number\n    n = str(n)\n    #create empty list to append to\n    digits = []\n    #append the digits in the right order\n    for i in n:\n        digits.append(int(i))\n    #convert the list to a string\n    digits_string = str(digits)\n    #create the list\n    digits_list = []\n    #append the digits in the right order to the list\n    for i in digits_string:\n        digits_list.append(int(i))\n    #now use the 'index' concept to change the order\n    #append the next bigger number\n    #append the digits in the right order\n    #create the list\n    digits_list.append(digits_list[0])\n    for i in range(1,len(digits_list)-1):\n        digits_list.append(digits_list[i])\n    digits_list.append(digits_list[-1])\n    #create the list\n    digits_list = int(''.join(map(str, digits_list)))\n    return digits_list\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    \n    for i in range(len(n)-1, -1, -1):\n        if n[i] > n[i+1]:\n            temp = n[i]\n            n = n[:i] + n[i+1:]\n            n = n[:i] + temp + n[i:]\n            break\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    max_len = len(n)\n    for i in range(0, max_len):\n        for j in range(i + 1, max_len):\n            if int(n[i]) > int(n[j]):\n                n[i], n[j] = n[j], n[i]\n                break\n    return int(''.join(n))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    for i in range(len(n)-1,0,-1):\n        if int(n[i]) > int(n[i-1]):\n            n[i-1], n[i] = n[i], n[i-1]\n            n = ''.join(n)\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    \n    if len(str_n) == 1:\n        return -1\n        \n    for i in range(len(str_n)-1):\n        if int(str_n[i]) < int(str_n[i+1]):\n            continue\n        else:\n            for j in range(i+1, len(str_n)):\n                if int(str_n[i]) < int(str_n[j]):\n                    t = str_n[i]\n                    str_n[i] = str_n[j]\n                    str_n[j] = t\n                    break\n            break\n    \n    str_n = ''.join(str_n)\n    return int(str_n)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return\n    \n    s1 = []\n    s2 = []\n    \n    for i in range(len(nums1)):\n        heapq.heappush(s1, (nums1[i], i))\n    \n    for i in range(len(nums2)):\n        heapq.heappush(s2, (nums2[i], i))\n    \n    s_1 = []\n    s_2 = []\n    \n    while k:\n        if len(s1) == len(s2):\n            k -= 1\n            if k == 0:\n                return\n        \n        if len(s1) < len(s2):\n            if len(s_1) == 0:\n                break\n            x, y = heapq.heappop(s_1)\n            heapq.heappush(s2, (s2.pop()[1], s2.pop()[0]))\n        else:\n            if len(s_2) == 0:\n                break\n            x, y = heapq.heappop(s_2)\n            heapq.heappush(s1, (s1.pop()[1], s1.pop()[0]))\n        \n        s_1.append((x, y))\n    \n    print(s_1)\n    print(s_2)\n    return s_1 + s_2\n    \ndef k_smallest_pairs_v2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return\n    \n    # find max_heap in nums1\n    max_heap = []\n    for i in range(len(nums1)):\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, (-nums1[i], i))\n        elif -nums1[i] > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-nums1[i], i))\n    \n    # find min_heap in nums2\n    min_heap = []\n    for i in range(len(nums2)):\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (nums2[i], i))\n        elif nums2[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (nums2[i], i))\n    \n    res = []\n    # combine the min and max heap\n    for _ in range(k):\n        if len(max_heap) == 0:\n            break\n        if len(min_heap) == 0:\n            break\n        if max_heap[0][0] < min_heap[0][0]:\n            x = heapq.heappop(max_heap)[0]\n            y = heapq.heappop(min_heap)[0]\n            res.append((x, y))\n            if x < y:\n                heapq.heappush(min_heap, (x, heapq.heappop(max_heap)[1]))\n            else:\n                heapq.heappush(max_heap, (-y, heapq.heappop(min_heap)[1]))\n        else:\n            x = heapq.heappop(min_heap)[0]\n            y = heapq.heappop(max_heap)[0]\n            res.append((x, y))\n            if x > y:\n                heapq.heappush(max_heap, (-x, heapq.heappop(min_heap)[1]))\n            else:\n                heapq.heappush(min_heap, (x, heapq.heappop(max_heap)[1]))\n    return res\n    \n    \n    \ndef k_smallest_pairs_v3(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return\n    \n    # create dict for nums1, nums2\n    # we are going to use nums1, nums2 for comparison\n    nums1_dict = {}\n    for i in nums1:\n        if i in nums1_dict:\n            nums1_dict[i] += 1\n        else:\n            nums1_dict[i] = 1\n    \n    nums2_dict = {}\n    for i in nums2:\n        if i in nums2_dict:\n            nums2_dict[i] += 1\n        else:\n            nums2_dict[i] = 1\n    \n    # add -1 to nums1_dict, to be able to use heaps\n    for i in nums1:\n        if i not in nums1_dict:\n            nums1_dict[i] = -1\n    \n    # add -1 to nums2_dict, to be able to use heaps\n    for i in nums2:\n        if i not in nums2_dict:\n            nums2_dict[i] = -1\n    \n    # heapify on nums1\n    max_heap = []\n    for i in nums1_dict:\n        if nums1_dict[i] > 0:\n            heapq.heappush(max_heap, (nums1_dict[i], i))\n    \n    # heapify on nums2\n    min_heap = []\n    for i in nums2_dict:\n        if nums2_dict[i] > 0:\n            heapq.heappush(min_heap, (nums2_dict[i], i))\n    \n    res = []\n    # compare k times, if max_heap > min_heap, we need to pop out max_heap, and insert all the values to the min heap\n    for i in range(k):\n        if len(max_heap) > len(min_heap):\n            x, y = heapq.heappop(max_heap)\n            res.append((x, y))\n            if x < y:\n                heapq.heappush(min_heap, (x, heapq.heappop(max_heap)[1]))\n            else:\n                heapq.heappush(max_heap, (-y, heapq.heappop(min_heap)[1]))\n        else:\n            x, y = heapq.heappop(min_heap)\n            res.append((x, y))\n            if x > y:\n                heapq.heappush(max_heap, (-x, heapq.heappop(min_heap)[1]))\n            else:\n                heapq.heappush(min_heap, (x, heapq.heappop(max_heap)[1]))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = [(nums1[i] + nums2[j], i, j) for i in range(len(nums1)) for j in range(len(nums2))]\n    heapq.heapify(heap)\n    res = []\n    for _ in range(k):\n        val, i, j = heapq.heappop(heap)\n        res.append((nums1[i], nums2[j]))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Write your code here\n    map1 = {}\n    for i in nums1:\n        if i in map1:\n            map1[i] += 1\n        else:\n            map1[i] = 1\n    \n    map2 = {}\n    for i in nums2:\n        if i in map2:\n            map2[i] += 1\n        else:\n            map2[i] = 1\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k < 0 or k > len(nums1) * len(nums2):\n        return None\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    index = 0\n    i = 0\n    j = 0\n    for num in nums1:\n        heapq.heappush(heap, (nums2[index], index))\n        index += 1\n    while len(heap) > k:\n        heapq.heappush(heap, (nums2[i], i))\n        i += 1\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # We need to use heapq, because we are just interested in the smallest pairs, not the biggest ones\n    # The output pairs will be ordered from smallest to largest\n    # The heap will only store tuples, so we need to convert the input into a tuple (will be quicker than converting the input into a list and using heapq.heappush(heap, (...))\n    # The heappop gives the smallest value, so we can convert it to a tuple and reverse it\n    # The input will be in the form of tuples, so we need to reverse the first and second elements\n    # Finally we can convert the k smallest tuples to a list and reverse them so they are ordered from smallest to largest\n    # The heapq.heapify(heap) will convert the list into a heap\n    # The heapq.heappop(heap) will take the smallest tuple out of the heap\n    # The list() will convert the heapq.heappop() into a list\n    # The list() will reverse the list\n    # The list() will convert the list into a tuple\n    # The tuple() will convert the list into a tuple\n    # The tuple() will convert the first tuple into a tuple, and the second tuple into another tuple, and so on, so we can put them back together in a tuple\n    # The tuple() will convert the first tuple into a tuple, and the second tuple into another tuple, and so on, so we can put them back together in a tuple\n    # The tuple() will convert the first tuple into a tuple, and the second tuple into another tuple, and so on, so we can put them back together in a tuple\n    # Finally the tuple() will convert the tuple back into a tuple\n    # The tuple() will convert the tuple back into a tuple\n    # The tuple() will convert the tuple back into a tuple\n    # Now we can just return the tuple()\n    # Note the heappush and heappop are functions that we wrote in Python, so the code can be shorter\n    # The return statement is there just to make the code shorter, and not necessary\n    # The return can be written in just four lines, so we can tell Python to return the tuple()\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # This is a correct way to write a function\n    # The output is in the form of a tuple, so we can just write a function that returns a tuple\n    # Here we can just return the tuple, because we are only returning a single tuple\n    # Note the return keyword and the space after it\n    # We are not using the variable k\n    # Instead we are using the variable pairs\n    # The return keyword is there just to make the code shorter, and not necessary\n    # The return can be written in just four lines, so we can tell Python to return the tuple()\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # This is a correct way to write a function\n    # The output is in the form of a tuple, so we can just write a function that returns a tuple\n    # Note the return keyword and the space after it\n    # We are not using the variable k\n    # Instead we are using the variable pairs\n    # The return keyword is there just to make the code shorter, and not necessary\n    # The return can be written in just four lines, so we can tell Python to return the tuple()\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # This is a correct way to write a function\n    # The output is in the form of a tuple, so we can just write a function that returns a tuple\n    # Note the return keyword and the space after it\n    # We are not using the variable k\n    # Instead we are using the variable pairs\n    # The return keyword is there just to make the code shorter, and not necessary\n    # The return can be written in just four lines, so we can tell Python to return the tuple()\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # This is a correct way to write a function\n    # The output is in the form of a tuple, so we can just write a function that returns a tuple\n    # Note the return keyword and the space after it\n    # We are not using the variable k\n    # Instead we are using the variable pairs\n    # The return keyword is there just to make the code shorter, and not necessary\n    # The return can be written in just four lines, so we can tell Python to return the tuple()\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # This is a correct way to write a function\n    # The output is in the form of a tuple, so we can just write a function that returns a tuple\n    # Note the return keyword and the space after it\n    # We are not using the variable k\n    # Instead we are using the variable pairs\n    # The return keyword is there just to make the code shorter, and not necessary\n    # The return can be written in just four lines, so we can tell Python to return the tuple()\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # This is a correct way to write a function\n    # The output is in the form of a tuple, so we can just write a function that returns a tuple\n    # Note the return keyword and the space after it\n    # We are not using the variable k\n    # Instead we are using the variable pairs\n    # The return keyword is there just to make the code shorter, and not necessary\n    # The return can be written in just four lines, so we can tell Python to return the tuple()\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # The tuple() is a function that we wrote in Python, so we can do one more line of code to get the output, which is why we wrote the return statement\n    # This is a correct way to write a function\n    # The output is in the form of a tuple, so we can just write a function that returns a tuple\n    # Note the return keyword and the space after it\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    res = []\n    for i in range(k):\n        res.append((heapq.heappop(nums1), heapq.heappop(nums2)))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    \n    def k_smallest(k):\n        result = []\n        while k > 0 and pq:\n            _, i = heapq.heappop(pq)\n            result.append((i, i))\n            if i >= len(nums2):\n                break\n            k -= 1\n        return result\n        \n    for i in range(len(nums1)):\n        heapq.heappush(pq, (nums1[i] + nums2[i], i))\n    return k_smallest(k)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) >= k:\n        return nums1\n    if len(nums2) >= k:\n        return nums2\n    # distance = {}\n    # for x in nums1:\n    #     for y in nums2:\n    #         if x + y in distance:\n    #             distance[x + y] += 1\n    #         else:\n    #             distance[x + y] = 1\n    # distance = [(v,k) for k,v in distance.items()]\n    # heapq.heapify(distance)\n    # res = []\n    # for i in range(k):\n    #     res.append(heapq.heappop(distance)[1])\n    # return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Approach 1: Brute Force\n    # Time: O(n^2 * k)\n    # Space: O(n)\n    #\n    # def k_smallest_pairs(self, nums1, nums2, k):\n    #     max_heap = []\n    #     for i in nums1:\n    #         for j in nums2:\n    #             max_heap.append((i, j))\n    #             if len(max_heap) > k:\n    #                 heapq.heappop(max_heap)\n    #     return [(i, j) for (i, j) in max_heap]\n    #\n    # Approach 2: Two Pointers\n    # Time: O(n + m)\n    # Space: O(1)\n    #\n    # def k_smallest_pairs(self, nums1, nums2, k):\n    #     n, m = len(nums1), len(nums2)\n    #     i, j, ans = 0, 0, []\n    #     while i < n and j < m:\n    #         if nums1[i] <= nums2[j]:\n    #             ans.append((nums1[i], nums2[j]))\n    #             i += 1\n    #         else:\n    #             j += 1\n    #     while i < n and j < m and j < k:\n    #         if nums1[i] > nums2[j]:\n    #             ans.append((nums1[i], nums2[j]))\n    #             j += 1\n    #         else:\n    #             i += 1\n    #     return ans\n    #\n    # Approach 3: Two Pointers\n    # Time: O(n + m)\n    # Space: O(n)\n    #\n    # def k_smallest_pairs(self, nums1, nums2, k):\n    #     n, m = len(nums1), len(nums2)\n    #     i, j = 0, 0\n    #     heap = []\n    #     ans = []\n    #     for _ in range(k):\n    #         heapq.heappush(heap, (-nums1[i], -nums2[j]))\n    #         if i < n and j < m:\n    #             if nums1[i] <= nums2[j]:\n    #                 heapq.heappush(heap, (-nums1[i], -nums2[j]))\n    #                 i += 1\n    #             else:\n    #                 j += 1\n    #     for _ in range(k):\n    #         ans.append((-heapq.heappop(heap)[0], -heapq.heappop(heap)[1]))\n    #     return ans\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([x*y for x,y in list1])\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if (list1[i][0] * list1[j][0] < list1[i][1] * list1[j][1]):\n                list1[i], list1[j] = list1[j], list1[i]\n    return list1\nprint(min_product_tuple([(1,2),(3,4),(5,6),(7,8),(9,10)]))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    result = 0\n    for i in range(len(list1)):\n        result = min(result, list1[i][1] * list1[i][0])\n    return result\n    \nlist1 = [[4, 6], [5, 2], [6, 3]]\nprint(min_product_tuple(list1))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    from operator import itemgetter\n    import heapq\n    list1.sort(key=itemgetter(1),reverse=True)\n    summation = 0\n    heap = []\n    heapq.heapify(heap)\n    for (i,j) in list1:\n        heapq.heappush(heap,j)\n    while len(heap) > 1:\n        summation += heapq.heappop(heap) * heapq.heappop(heap)\n    return summation\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    def compare(tuple1, tuple2):\n        '''\n        Return the result of comparing two tuples.\n        '''\n        \n        return tuple1[0] - tuple2[0]\n    \n    \n    list1.sort(key=compare)\n    result = 1\n    for i in range(len(list1) - 1):\n        if (list1[i][1] * list1[i + 1][1]) < (list1[i + 1][1] * list1[i][1]):\n            result *= list1[i + 1][1]\n        else:\n            result *= list1[i][1]\n    \n    return result\n    \n    "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    assert len(list1) > 2\n    for i in range(len(list1)):\n        assert type(list1[i]) == tuple\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        min_product = min(min_product, list1[i][0] * list1[i][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    min_product = 0\n    for i in range(0,len(list1)):\n        product = product * list1[i][1]\n        if product < min_product:\n            min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = (0,0)\n    for ele in list1:\n        if ele[0]*ele[1] < min_product[0]*min_product[1]:\n            min_product = ele\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n                min_tuple = (list1[i][0], list1[i][1], list1[j][0], list1[j][1])\n    return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0]\n    for i in range(len(list1)):\n        if min_prod[0]*list1[i][0] < min_prod[1]*list1[i][1]:\n            min_prod = list1[i]\n    return min_prod\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # your code here\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # YOUR CODE HERE\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    # Initialize min_val\n    min_val = listval[0]\n    \n    # For loop to find the minimum value\n    for x in range(1,len(listval)):\n        if(listval[x]<min_val):\n            min_val = listval[x]\n    \n    # Return the minimum value\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for num in listval:\n        if type(num) == list:\n            listval = min_val(num)\n        else:\n            pass\n    if type(listval) == int or type(listval) == float:\n        if listval < min_val:\n            min_val = listval\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_element = listval[0]\n    for i in listval:\n        if i < min_element:\n            min_element = i\n    return min_element\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = None\n    for i in listval:\n        if type(i) == int:\n            if min_value == None or i < min_value:\n                min_value = i\n        elif type(i) == float:\n            if min_value == None or i < min_value:\n                min_value = i\n        else:\n            continue\n    return min_value\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new = ''\n    for i in word:\n        if i.isupper():\n            new += i.lower()\n        elif i == '_':\n            new += '-'\n        else:\n            new += i.upper()\n    return new\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub('_',' ',word)\n    return re.sub(r'(?<=\\w)(?=[A-Z])', '', s).title()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Get words\n    words = re.split(\"_\",word)\n    # Iterate words\n    for i in range(len(words)):\n        # Split words\n        word = words[i]\n        # Capitalize first letter\n        words[i] = word[0].upper()+word[1:]\n    # Join words\n    word = \"\".join(words)\n    # Lowercase words\n    word = word.lower()\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # return re.sub('_', '-', word)\n    return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word=word.lower()\n    return ''.join(word.title().split('_')[i] if i!= 0 else word[0] for i in range(len(word)))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # code here\n    word = word.split('_')\n    result = []\n    for w in word:\n        result.append(w.capitalize())\n    return ''.join(result)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_', '-')\n    word = word.split('-')\n    if word[0].isupper():\n        new_word = word[0]\n    else:\n        new_word = word[0].upper()\n    for i in range(1, len(word)):\n        if word[i].isupper():\n            new_word += word[i]\n        else:\n            new_word += word[i].upper()\n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = str(word).lower()\n    word = word.split('_')\n    first = word[0]\n    for i in range(1, len(word)):\n        first += word[i].capitalize()\n    return first\nprint(snake_to_camel('snaKe_SpEaRd'))\nprint('\\n')\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list = l\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            del list[i]\n    return list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return l[::2]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Initialize a new list to contain the even numbers\n    even_numbers = []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i % 2 == 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if(i%2!= 0):\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2==0:\n            l.remove(i)\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if not l:\n        return\n    i = 0\n    while i < len(l):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n        else:\n            i += 1\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_new = []\n    for num in l:\n        if num % 2 == 0:\n            l_new.append(num)\n    return l_new\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2 == 0:\n            odd_list.append(i)\n    print(odd_list)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Input List\n    l = [1,2,3,4,5,6,7,8]\n    # Output List\n    l1 = []\n    for i in l:\n        if i%2 == 0:\n            l1.append(i)\n    return l1\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1) or n < 0:\n        raise IndexError(\"Index is out of range\")\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    print('\\nExtracting the {}th element from a given list of tuples : '.format(n))\n    print(list1)\n    element = list1.pop(n)\n    print('\\n')\n    print(list1)\n    return element\n    \ndef extract_nth_element_using_lambda(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    print('\\nExtracting the {}th element from a given list of tuples : '.format(n))\n    print(list1)\n    element = list(map(lambda element:element,list1))\n    print('\\n')\n    print(list1)\n    return element\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(0, n):\n        list1.remove(list1[0])\n    return list1[0]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1.sort()\n    return list1[n]\n    \nprint(extract_nth_element([('a', 2), ('b', 1), ('c', 4), ('d', 3)], 1))\nprint(extract_nth_element([('a', 2), ('b', 1), ('c', 4), ('d', 3)], 0))"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n - 1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list1)[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    count = 0\n    for i in list1:\n        if count == n:\n            return i\n        count += 1\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    n=len(list1)\n    m=len(list2)\n    for i in range(0,n-1):\n        for j in range(0,m-1):\n            if list1[i]==list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlap = []\n    for val in list1:\n        if val in list2:\n            overlap.append(val)\n    return overlap\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for num in list1:\n        if num in list2:\n            return True\n    \n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    n = len(list1)\n    m = len(list2)\n    for i in range(n):\n        for j in range(m):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n    \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i)\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(0, len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Enter your code here\n    #Using set\n    #print(set(list1).intersection(set(list2)))\n    \n    #Using list comprehension\n    #print(list(set(list1).intersection(set(list2))))\n    \n    #Using map\n    #map_ = map(lambda x:x in list1,list2)\n    #print(list(map_))\n    \n    #Using filter\n    #filtered = filter(lambda x:x in list1,list2)\n    #print(list(filtered))\n    \n    #Using itertools\n    #from itertools import izip,ifilter\n    #print(set(list1).intersection(set(list2)))\n    #print(list(ifilter(lambda x:x in list1,list2)))\n    \n    #Using lambda\n    #print(set(list1).intersection(set(list2)))\n    \n    \n    \n    \n    \n    \n    #using zip\n    #print(set(list1).intersection(set(list2)))\n    #print(list(zip(list1,list2)))\n    \n    #using set comprehenstion\n    #print(set(list1).intersection(set(list2)))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Find min and max\n    min_val = arr[0]\n    max_val = arr[0]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    i = 0\n    j = n-1\n    while(i<j):\n        if(arr[i]*arr[j]>0):\n            return arr[i]*arr[j]\n        elif(arr[i]<0):\n            i = i+1\n        else:\n            j = j-1\n        \n    \n    \n    \n    #code here\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    highest = float('-inf')\n    left_index = 0\n    right_index = len(arr)-1\n    while left_index < right_index:\n        if arr[left_index]*arr[right_index] > highest:\n            highest = arr[left_index]*arr[right_index]\n        if arr[left_index] < arr[right_index]:\n            left_index += 1\n        else:\n            right_index -= 1\n    return highest\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0:\n        print(\"array is empty\")\n    product_max = -float(\"inf\")\n    product_min = float(\"inf\")\n    max_element = None\n    min_element = None\n    for i in range(len(arr)):\n        if arr[i] > product_max:\n            product_max = arr[i]\n            max_element = i\n        if arr[i] < product_min:\n            product_min = arr[i]\n            min_element = i\n    if product_max < 0:\n        product_max = 1\n    if product_min > 0:\n        product_min = 1\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        print('Array must be of length at least 2.')\n        return\n    max_product = max(arr)\n    max_product_index = arr.index(max_product)\n    min_product = min(arr)\n    min_product_index = arr.index(min_product)\n    if min_product_index > max_product_index:\n        return (max_product, min_product)\n    else:\n        return (min_product, max_product)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # keep track of maximum product\n    max_product = 0\n    \n    # keep track of current max product\n    current_max_product = 0\n    \n    # loop through array\n    for i in range(0,len(arr)):\n        \n        # keep track of current max product\n        current_max_product = 0\n        \n        # loop through array\n        for j in range(0,len(arr)):\n            \n            # if i and j are same, then multiply the number by itself\n            if (arr[i] == arr[j]):\n                # if product of nums is greater than current max product, replace\n                current_max_product = arr[i]*arr[j]\n            \n            # else if i or j is bigger, multiply by current max\n            elif (arr[i] > arr[j]):\n                current_max_product = arr[i]*arr[j]\n            \n            # else if j is bigger, multiply by current max\n            elif (arr[i] < arr[j]):\n                current_max_product = arr[j]*arr[j]\n            \n            # else if i and j are different, multiply by current max\n            elif (arr[i]!= arr[j]):\n                current_max_product = arr[j]*arr[j]\n            \n            # check if max product is greater than current max\n            if current_max_product > max_product:\n                max_product = current_max_product\n                \n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    lst = sorted(arr)\n    prod_lst = []\n    for i in range(len(lst)):\n        prod_lst.append(lst[i]*lst[(i+1)%len(lst)])\n    return max(prod_lst)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    max_prod = arr[0] \n    i = 0\n    for i in range(1, n): \n        if arr[i] > max_prod: \n            max_prod = arr[i] \n    for i in range(1, n): \n        if arr[i] < max_prod: \n            prod = 1\n            for j in range(i, n): \n                prod = prod * arr[j] \n            if prod > max_prod: \n                max_prod = prod \n    return max_prod \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n=len(arr)\n    max_product=arr[0]*arr[1]\n    i=0\n    j=1\n    while i<n-1:\n        while j<n:\n            if max_product<arr[j]*arr[j+1]:\n                max_product=arr[j]*arr[j+1]\n            j=j+1\n        i=i+1\n        j=i+1\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = 1\n    index = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if max < arr[i]*arr[j]:\n                max = arr[i]*arr[j]\n                index = j\n    return (arr[index],max)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in range(len(Input)-1):\n        if Input[i][0] == Input[i+1][0]:\n            for j in range(len(Input)-1):\n                if Input[i][1] == Input[j][1]:\n                    return Input[i][1]\n        \n    \n    \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    final = []\n    for i in Input:\n        if i not in final:\n            final.append(i[0])\n    return final\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l = sorted(Input)\n    for i in range(len(l)):\n        if l[i] == l[0]:\n            print(l[i])\n            break\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def group_first_element(Input):\n        list1 = []\n        for i in Input:\n            list1.append(i[0])\n        return list1\n    def common_first_element(Input):\n        first_element_list = group_first_element(Input)\n        common_element = []\n        for i in first_element_list:\n            count = 0\n            for j in Input:\n                if i == j[0]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_second_element(Input):\n        second_element_list = []\n        for i in Input:\n            if i[1] not in second_element_list:\n                second_element_list.append(i[1])\n        return second_element_list\n    def common_second_element(Input):\n        second_element_list = group_second_element(Input)\n        common_element = []\n        for i in second_element_list:\n            count = 0\n            for j in Input:\n                if i == j[1]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_third_element(Input):\n        third_element_list = []\n        for i in Input:\n            if i[2] not in third_element_list:\n                third_element_list.append(i[2])\n        return third_element_list\n    def common_third_element(Input):\n        third_element_list = group_third_element(Input)\n        common_element = []\n        for i in third_element_list:\n            count = 0\n            for j in Input:\n                if i == j[2]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_fourth_element(Input):\n        fourth_element_list = []\n        for i in Input:\n            if i[3] not in fourth_element_list:\n                fourth_element_list.append(i[3])\n        return fourth_element_list\n    def common_fourth_element(Input):\n        fourth_element_list = group_fourth_element(Input)\n        common_element = []\n        for i in fourth_element_list:\n            count = 0\n            for j in Input:\n                if i == j[3]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_fifth_element(Input):\n        fifth_element_list = []\n        for i in Input:\n            if i[4] not in fifth_element_list:\n                fifth_element_list.append(i[4])\n        return fifth_element_list\n    def common_fifth_element(Input):\n        fifth_element_list = group_fifth_element(Input)\n        common_element = []\n        for i in fifth_element_list:\n            count = 0\n            for j in Input:\n                if i == j[4]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_sixth_element(Input):\n        sixth_element_list = []\n        for i in Input:\n            if i[5] not in sixth_element_list:\n                sixth_element_list.append(i[5])\n        return sixth_element_list\n    def common_sixth_element(Input):\n        sixth_element_list = group_sixth_element(Input)\n        common_element = []\n        for i in sixth_element_list:\n            count = 0\n            for j in Input:\n                if i == j[5]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_seventh_element(Input):\n        seventh_element_list = []\n        for i in Input:\n            if i[6] not in seventh_element_list:\n                seventh_element_list.append(i[6])\n        return seventh_element_list\n    def common_seventh_element(Input):\n        seventh_element_list = group_seventh_element(Input)\n        common_element = []\n        for i in seventh_element_list:\n            count = 0\n            for j in Input:\n                if i == j[6]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_eighth_element(Input):\n        eighth_element_list = []\n        for i in Input:\n            if i[7] not in eighth_element_list:\n                eighth_element_list.append(i[7])\n        return eighth_element_list\n    def common_eighth_element(Input):\n        eighth_element_list = group_eighth_element(Input)\n        common_element = []\n        for i in eighth_element_list:\n            count = 0\n            for j in Input:\n                if i == j[7]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_ninth_element(Input):\n        ninth_element_list = []\n        for i in Input:\n            if i[8] not in ninth_element_list:\n                ninth_element_list.append(i[8])\n        return ninth_element_list\n    def common_ninth_element(Input):\n        ninth_element_list = group_ninth_element(Input)\n        common_element = []\n        for i in ninth_element_list:\n            count = 0\n            for j in Input:\n                if i == j[8]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_tenth_element(Input):\n        tenth_element_list = []\n        for i in Input:\n            if i[9] not in tenth_element_list:\n                tenth_element_list.append(i[9])\n        return tenth_element_list\n    def common_tenth_element(Input):\n        tenth_element_list = group_tenth_element(Input)\n        common_element = []\n        for i in tenth_element_list:\n            count = 0\n            for j in Input:\n                if i == j[9]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_eleventh_element(Input):\n        eleventh_element_list = []\n        for i in Input:\n            if i[10] not in eleventh_element_list:\n                eleventh_element_list.append(i[10])\n        return eleventh_element_list\n    def common_eleventh_element(Input):\n        eleventh_element_list = group_eleventh_element(Input)\n        common_element = []\n        for i in eleventh_element_list:\n            count = 0\n            for j in Input:\n                if i == j[10]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_twelfth_element(Input):\n        twelfth_element_list = []\n        for i in Input:\n            if i[11] not in twelfth_element_list:\n                twelfth_element_list.append(i[11])\n        return twelfth_element_list\n    def common_twelfth_element(Input):\n        twelfth_element_list = group_twelfth_element(Input)\n        common_element = []\n        for i in twelfth_element_list:\n            count = 0\n            for j in Input:\n                if i == j[11]:\n                    count += 1\n            if count > 1:\n                common_element.append(i)\n        return common_element\n    def group_thirteenth_element(Input):\n        thirteenth_element_list = []\n        for i in Input:\n            if i[12] not in thirteenth_element_list:\n                thirteenth_element_list.append(i[12])\n        return thirteenth_element_list\n    def common_thirteenth_element(Input):\n        thirteenth_element"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elem = []\n    for i in range(0, len(Input)):\n        if len(first_elem) == 0:\n            first_elem.append(Input[i][0])\n        elif Input[i][0] == first_elem[0]:\n            first_elem.append(Input[i][1])\n    return first_elem\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elem = set(x[0] for x in Input)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set(Input[0]) & set(Input[1]))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    List = []\n    Result = []\n    for i in Input:\n        List.append(i)\n    for i in range(len(List)):\n        for j in range(i+1, len(List)):\n            if List[i] == List[j]:\n                Result.append(List[i])\n    return Result\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #for loop is too slow so no need\n    # tuples = set(tuple(i) for i in Input)\n    # return tuple(i[0] for i in tuples)\n    tuples = {}\n    for i in Input:\n        if i not in tuples:\n            tuples[i] = 1\n        else:\n            tuples[i] += 1\n    return (max(tuples, key=tuples.get))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group = {} \n    for i in range(len(Input)): \n        group.setdefault(Input[i][0], []).append(Input[i]) \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    #code here\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if(len(lst[i])>max):\n            max = len(lst[i])\n    print(\"The longest word is\",lst[max],\"and its length is\",max)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = ''\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_ele = lst[i]\n    return max_ele\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_len_ele = None\n    for i in lst:\n        if len(i) >= max_len:\n            max_len = len(i)\n            max_len_ele = i\n    return max_len_ele\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=lst[0]\n    for i in lst:\n        if(len(i)>len(max)):\n            max=i\n    return max\n        \n    \n    \n    \ndef Is_Palindrome(str1): \n    '''\n    Write a python function to check whether a string is palindrome or not. \n    '''\n    str1=str1.casefold()\n    str1=str1.split()\n    str2=\"\"\n    for i in str1:\n        str2=i+str2\n    if(str1==str2):\n        return True\n    else:\n        return False\n        \n        \ndef Print_Ways_To_Make_Change(amount,denominations):\n    '''\n    Write a python function to find the total ways to make change for a given amount.\n    '''\n    if amount==0:\n        return 1\n    else:\n        if(len(denominations)==0):\n            return 0\n        else:\n            a=1\n            for i in denominations:\n                a=a*(amount//i)\n                amount=amount%i\n            return a\n            \n            \n            \ndef Positional_Sum(num_list):\n    '''\n    Write a python function to find the sum of a list of numbers.\n    '''\n    num_list=num_list.sort()\n    s=0\n    for i in range(len(num_list)):\n        s=s+num_list[i]\n    return s\n            \n            \ndef Closest_Value(target,lst):\n    '''\n    Write a python function to find the nearest number in a list to target.\n    '''\n    lst=sorted(lst)\n    for i in range(len(lst)):\n        if(target>lst[i]):\n            return lst[i]\n        else:\n            return lst[i-1]\n            \n            \ndef Find_Median(lst):\n    '''\n    Write a python function to find the median value of a list.\n    '''\n    lst=sorted(lst)\n    if(len(lst)%2==1):\n        return lst[len(lst)//2]\n    else:\n        return float(lst[len(lst)//2]+lst[len(lst)//2-1])/2\n            \ndef Find_Pairs(arr,k):\n    '''\n    Write a python function to find the pairs in a sorted array whose sum is equal to the given k.\n    '''\n    if(len(arr)<2):\n        return []\n    s=set()\n    for i in range(len(arr)-1):\n        if(arr[i] in s):\n            return True\n        else:\n            s.add(arr[i+1]-arr[i])\n    if(k%2==0):\n        if(arr[0]==k):\n            return True\n        else:\n            return False\n    else:\n        if(k==arr[0]):\n            return True\n        else:\n            return False\n        \n        \ndef Remove_Element(lst,i):\n    '''\n    Write a python function to remove the i-th element from a given list and return a list.\n    '''\n    lst1=[]\n    for i in lst:\n        if(i!=i):\n            lst1.append(i)\n    lst1.pop(i)\n    return lst1\n            \ndef Reverse_Array(lst):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(lst[len(lst)-i-1])\n    return lst1\n            \n            \ndef Find_Median_Sorted_Array(lst1,lst2):\n    '''\n    Write a python function to find the median of two sorted arrays.\n    '''\n    lst1=sorted(lst1)\n    lst2=sorted(lst2)\n    lst3=[]\n    lst3.append(lst1[len(lst1)//2])\n    lst3.append(lst2[len(lst2)//2])\n    lst3.sort()\n    return lst3[1]\n            \n            \ndef Count_Swaps(lst):\n    '''\n    Write a python function to count the number of swaps required to sort a list.\n    '''\n    count=0\n    for i in range(len(lst)):\n        for j in range(len(lst)-1):\n            if(lst[j]>lst[j+1]):\n                count+=1\n                lst[j],lst[j+1]=lst[j+1],lst[j]\n    return count\n            \n            \ndef Find_Min_Max(lst):\n    '''\n    Write a python function to find the min and max values in a given list.\n    '''\n    min=lst[0]\n    max=lst[0]\n    for i in range(1,len(lst)):\n        if(lst[i]>max):\n            max=lst[i]\n        if(lst[i]<min):\n            min=lst[i]\n    return min,max\n            \n            \ndef Find_Min_Max_Positions(lst):\n    '''\n    Write a python function to find the position of the min and max values in a given list.\n    '''\n    if(len(lst)==1):\n        return (0,0)\n    else:\n        min=lst[0]\n        max=lst[0]\n        min_index=0\n        max_index=0\n        for i in range(1,len(lst)):\n            if(lst[i]>max):\n                max=lst[i]\n                max_index=i\n            if(lst[i]<min):\n                min=lst[i]\n                min_index=i\n        return (min_index,max_index)\n            \n            \ndef Print_N_Num(n,i):\n    '''\n    Write a python function to print the given numbers using recursion.\n    '''\n    if(i<=n):\n        print(i)\n        i+=1\n        Print_N_Num(n,i)\n            \ndef Print_N_Num_Manual(n):\n    '''\n    Write a python function to print the given numbers using recursion.\n    '''\n    for i in range(1,n+1):\n        print(i)\n        \ndef Print_N_Num_Manual_2(n):\n    '''\n    Write a python function to print the given numbers using recursion.\n    '''\n    for i in range(n):\n        print(i+1)\n            \ndef Print_N_Num_Manual_3(n):\n    '''\n    Write a python function to print the given numbers using recursion.\n    '''\n    for i in range(n):\n        print(i+1,end=\" \")\n            \ndef Print_N_Num_Manual_4(n):\n    '''\n    Write a python function to print the given numbers using recursion.\n    '''\n    for i in range(n):\n        print(i+1,end=\"\")\n            \ndef Print_N_Num_Manual_5(n):\n    '''\n    Write a python function to print the given numbers using recursion.\n    '''\n    for i in range(n):\n        print(i+1,end=\"\")\n            \ndef Print_N_Num_Manual_6(n):\n    '''\n    Write a python function to print the given numbers using recursion.\n    '''\n    for i in range(n,0,-1):\n        print(i,end=\" \")\n            \ndef Print_N_Num_Manual_7(n):\n    '''\n    Write a python function to print the given numbers using recursion.\n    '''\n    for i in range(n,0,-1):\n        print(i,end=\" \")\n        \ndef Print_N_Num_Manual_8(n):\n    '''\n    Write a python function to print the given numbers using re"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element)>max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(map(len,lst))\n    for i in range(len(lst)):\n        if(len(lst[i])==max_len):\n            return lst[i]\n        else:\n            continue\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = -1\n    max_len_ele = ''\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_len_ele = i\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(0,len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    return max\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(0, len(list1)):\n        total += round(list1[i])\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum([round(n) for n in list1]))\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    print(sum(list1) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [round(num, 2) for num in list1]\n    print(sum([num*len(list1) for num in list1]))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = sum(round(i) for i in list1)\n    return result*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    sum = 0\n    for i in list1:\n        i = round(i)\n        sum += i\n    print(sum*length)\n    \ndef odd_or_even(list1):\n    '''\n    Write a function that takes in a list and returns True if there is an even number in the list and False if there is an odd number.\n    '''\n    for i in list1:\n        if i%2 == 0:\n            return True\n        else:\n            return False\n    \ndef plus_minus(list1):\n    '''\n    Write a function that takes in a list and returns a tuple with the sum of positive numbers, negative numbers, and 0.\n    '''\n    pos = 0\n    neg = 0\n    zer = 0\n    for i in list1:\n        if i > 0:\n            pos += i\n        elif i < 0:\n            neg += i\n        else:\n            zer += i\n    return (pos, neg, zer)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if(len(list1)==0):\n        return 0\n    for i in range(len(list1)):\n        list1[i]=round(list1[i],2)\n    print('The total sum is :',sum(list1)*len(list1))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += num\n        num = round(num)\n        print(num)\n    print(\"Total:\", total)\n    print(\"Total:\", total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    num_list = [10, 15, 20, 25]\n    def round_sum(num):\n        return (num + round(num))\n    total = 0\n    for i in range(len(num_list)):\n        total += round_sum(num_list[i])\n    print(total * len(num_list))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = 0\n    for i in list1:\n        s += i\n        i = round(i,1)\n        list1.append(i)\n    print(\"The sum of the numbers rounded is : \",s)\n    print(\"The total length of the list is : \",len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    # Initialize sum\n    sum_even = 0\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize the sum \n    s = 0\n    # Iterate for the given range \n    for i in range(0,n): \n        # Check the number is even or not \n        if i%2==0: \n            # Add the number to the sum \n            s += i \n    # Return the sum \n    return s \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(x*x*x for x in range(n) if x%2==0)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    print(\"The cube sum of first n even natural numbers:\", end = \" \")\n    if (n < 0):\n        return\n    else:\n        for i in range(1, n):\n            print(i*i*i, end = \" \")\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n<=0:\n        return None\n    result = 0\n    for i in range(1,n+1):\n        result += i**3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum = (cube_sum+i)**3\n    print(\"cube sum of first %d natural numbers is\"%n,cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 0:\n        return \"Negative values not allowed\"\n    elif n == 0:\n        return 0\n    else:\n        s = 0\n        for i in range(n):\n            if i%2 == 0:\n                s += i**3\n            i += 1\n        return s"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2] + test_tup[3]\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup_str = \" \".join(test_tup)\n    print(tup_str)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\".join(test_tup)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return f'{test_tup[0]}'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for i in range(len(test_tup)):\n        test_str = test_str + test_tup[i]\n    return test_str\n    "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = \"\"\n    for el in test_tup:\n        new_tup = new_tup + str(el)\n    return new_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '@'\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count=0\n    sum=0\n    while count < n:\n        count=count+1\n        sum=sum+pow(count,3)\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum_ = 0\n    for i in range(1,n+1):\n        sum_ += i**3\n    return sum_/n\n    \ndef get_factors(n):\n    '''\n    Write a python function to get all factors of a number n.\n    '''\n    \n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef find_Missing_Number(lst):\n    '''\n    Write a python function to find the missing number in a list.\n    '''\n    \n    total = 0\n    for i in range(len(lst)):\n        total += lst[i]\n    return total - sum(lst)\n    \ndef find_sum_of_factors(n):\n    '''\n    Write a python function to find the sum of all the factors of a number n.\n    '''\n    \n    sum_ = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_ += i\n    return sum_\n    \ndef find_Greatest_Common_Divisor(n1, n2):\n    '''\n    Write a python function to find the Greatest Common Divisor of two numbers.\n    '''\n    \n    if n1 > n2:\n        temp = n1\n        n1 = n2\n        n2 = temp\n    \n    rem = 0\n    while n1 % n2!= 0:\n        rem = n1 % n2\n        n1 = n2\n        n2 = rem\n    \n    return n2\n    \ndef is_prime(n):\n    '''\n    Write a python function to find if a number is prime or not.\n    '''\n    \n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef print_matrix_in_spiral_form(m, n):\n    '''\n    Write a python function to print a matrix in spiral form.\n    '''\n    \n    if m > 0 and n > 0:\n        \n        for i in range(m):\n            for j in range(i, n):\n                print(m[i][j], end = \" \")\n            print()\n            \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                print(m[i][j], end = \" \")\n            print()\n            \n        for i in range(m-2, -1, -1):\n            for j in range(i, n):\n                print(m[i][j], end = \" \")\n            print()\n        \n        for i in range(n-2, -1, -1):\n            for j in range(n-1, i, -1):\n                print(m[i][j], end = \" \")\n            print()\n        \ndef print_matrix_in_spiral_form_using_recursion(m, n):\n    '''\n    Write a python function to print a matrix in spiral form.\n    '''\n    \n    if m > 0 and n > 0:\n        \n        matrix = []\n        for i in range(m):\n            matrix.append([])\n            for j in range(n):\n                matrix[i].append(0)\n        \n        c1 = 0\n        r1 = 0\n        c2 = n-1\n        r2 = m-1\n        while c1 <= c2 and r1 <= r2:\n            for j in range(r1, r2+1):\n                matrix[c1][j] = 1\n            \n            c1 += 1\n            \n            for j in range(c1, c2+1):\n                matrix[j][r2] = 1\n            \n            r2 -= 1\n            \n            for j in range(r2, r1-1, -1):\n                matrix[c2][j] = 1\n            \n            c2 -= 1\n            \n            for j in range(c2, c1-1, -1):\n                matrix[j][r1] = 1\n            \n            r1 += 1\n        \n        \n        for i in range(m):\n            for j in range(n):\n                print(matrix[i][j], end = \" \")\n            print()\n        \n        \ndef number_of_ways_to_make_sum_of_array(n, sum):\n    '''\n    Write a python function to find the number of ways to make sum of elements in an array using recursion.\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return number_of_ways_to_make_sum_of_array(n-1, sum) + number_of_ways_to_make_sum_of_array(n-1, sum - n)\n    \ndef find_max_n_min_n_diff(arr, n):\n    '''\n    Write a python function to find the maximum and minimum of the n elements in an array, and the difference between the maximum and minimum.\n    '''\n    \n    if len(arr) == 1:\n        return arr[0], arr[0], arr[0]\n    \n    max_val = min_val = arr[0]\n    \n    for i in range(1, n):\n        max_val, min_val = max(max_val, arr[i]), min(min_val, arr[i])\n    \n    return max_val, min_val, max_val - min_val\n    \ndef find_min_rotations_to_sort_array(n, arr):\n    '''\n    Write a python function to find the minimum number of rotations needed to sort an array.\n    '''\n    \n    if n == 1:\n        return 0\n    if n == 2:\n        if arr[0] < arr[1]:\n            return 0\n        else:\n            return 1\n    \n    sum_ = sum(arr)\n    \n    if sum_ % n!= 0:\n        return 0\n    \n    return n - (sum_ // n)\n    \ndef print_binary_tree(root):\n    '''\n    Write a python function to print a binary tree in an preorder manner.\n    '''\n    \n    if root is None:\n        return\n    \n    print_binary_tree(root.left)\n    print(root.value)\n    print_binary_tree(root.right)\n    \ndef merge_sort(arr, low, high):\n    '''\n    Write a python function to sort an array using the merge sort algorithm.\n    '''\n    \n    if low >= high:\n        return\n    \n    mid = (low + high) // 2\n    merge_sort(arr, low, mid)\n    merge_sort(arr, mid + 1, high)\n    merge(arr, low, mid, high)\n    \ndef merge(arr, low, mid, high):\n    n1 = mid - low + 1\n    n2 = high - mid\n    \n    L = [0] * (n1)\n    R = [0] * (n2)\n    \n    for i in range(0, n1):\n        L[i] = arr[low + i]\n        \n    for j in range(0, n2):\n        R[j] = arr[mid + 1 + j]\n        \n    i = 0\n    j = 0\n    k = low\n    \n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n    \n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n    \n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n    \ndef is_valid_parenthesis(s):\n    '''\n    Write a python function to check whether a given string is a valid expression or not.\n    '''\n    \n    open_parens = [\"(\", \"[\", \"{\"]"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num_list = []\n    for i in range(n):\n        num_list.append(i)\n        \n    sum = 0\n    for i in range(len(num_list)):\n        sum += num_list[i]**3\n    print(sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cube = 0\n    for i in range(1, n+1):\n        sum_of_cube = sum_of_cube + (i**3)\n    return sum_of_cube/n\n    \ndef get_sum_of_n_cube(n):\n    return n**3\n    \ndef print_final_result(n):\n    print('The sum of the cubes of first {} natural numbers is {}'.format(n, get_sum_of_n_cube(n)))\n    print('The average of the cubes of first {} natural numbers is {}'.format(n, find_Average_Of_Cube(n)))\n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        sum+=i**3\n    return sum/n\n    \nprint(find_Average_Of_Cube(5))"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_nums = []\n    for i in range(n+1):\n        cube_nums.append(i*i*i)\n    sum_cube_nums = sum(cube_nums)\n    average = sum_cube_nums / (n+1)\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0;\n    for i in range(n):\n        sum = sum + i**3\n    return sum/n\n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**3)\n    return (sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    print(\"Average of cubes is:\", result/n)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[1][::-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for item in test_tuple:\n        rear_tuple = rear_tuple + (item[-1],)\n    return rear_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = ()\n    for word in test_tuple:\n        front_pos = 0\n        rear_pos = -1\n        while front_pos < len(word) and rear_pos < len(word):\n            if word[front_pos] =='':\n                front_pos += 1\n                continue\n            if word[rear_pos] =='':\n                rear_pos -= 1\n                continue\n            rear_pos -= 1\n            front_pos += 1\n            new_tuple += (word[rear_pos], )\n    return new_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(a[-1] for a in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output_list = []\n    for i in range(len(test_tuple)):\n        output_list.append(test_tuple[i][-1])\n    return output_list\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = list(test_tuple)\n    for i in range(len(test_tuple)):\n        try:\n            test_tuple[i] = test_tuple[i][-1]\n        except:\n            continue\n    return tuple(test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_list = []\n    for i in range(len(test_tuple)):\n        new_list.append(test_tuple[i][-1])\n    return tuple(new_list)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for string in test_tuple:\n        print(string[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1][-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for i in range(len(test_tuple)):\n        rear_tuple.append(test_tuple[i][2])\n    return rear_tuple\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1 = []\n    counter = 0\n    for i in range(len(list1)):\n        if(list1[i] == x):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    num = 0\n    for i in list1:\n        if x in i:\n            num += 1\n    return num\n    \n    \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return list1.count(x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sub_list in list1:\n        if x in sub_list:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for n in nums:\n        if n % 2!= 0:\n            odd_numbers.append(n)\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnums = []\n    for num in nums:\n        if num % 2!= 0:\n            oddnums.append(num)\n    return oddnums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered = []\n    for i in nums:\n        if i % 2 == 1:\n            filtered.append(i)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!= 0, nums)\n    # return filter(lambda x: x%2!= 0, nums)\n    # return filter(lambda x: x%2 == 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda n : n%2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # return list(filter(lambda x: x%2!= 0, nums))\n    oddnumbers = []\n    for num in nums:\n        if num % 2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x:x%2!=0,nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # if numbers % 2!= 0:\n    #     return False\n    # else:\n    #     return True\n    return list(filter(lambda n: n % 2!= 0, nums))\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year = int(dt.split('-')[0])\n    month = int(dt.split('-')[1])\n    day = int(dt.split('-')[2])\n    \n    date = f'{day}.{month}.{year}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if len(dt)==10:\n        # for test case 9\n        # 1st: 2020-06-12\n        # 2nd: 2020-06-12\n        # 3rd: 2020-06-12\n        # 4th: 2020-06-12\n        # 5th: 2020-06-12\n        return(dt.replace('-',''))\n    else:\n        # for test case 8\n        # 1st: 2020-06-12\n        # 2nd: 2020-06-12\n        # 3rd: 2020-06-12\n        # 4th: 2020-06-12\n        # 5th: 2020-06-12\n        return(dt.replace('-','.'))\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # date = re.sub(\"[^0-9]\", \"\", dt)\n    # date = dt.split(\"/\")\n    # for i in range(len(date)):\n    #     if date[i] == \" \":\n    #         date[i] = \"0\"\n    # date = date[2] + \"-\" + date[1] + \"-\" + date[0]\n    # print(date)\n    # return date\n    date = re.sub(\"[^0-9]\", \"\", dt)\n    date = date.split(\"-\")\n    for i in range(len(date)):\n        if date[i] == \" \":\n            date[i] = \"0\"\n    date = date[2] + \"-\" + date[1] + \"-\" + date[0]\n    return date\ndef check_balance(balance,balance_check,date):\n    '''\n    Write a function to check balance based on the balance, balance_check and date\n    '''\n    balance_check = balance_check.strip()\n    balance_check = balance_check.replace(\"$\", \"\")\n    balance_check = balance_check.replace(\",\", \"\")\n    balance_check = balance_check.replace(\"(\", \"\")\n    balance_check = balance_check.replace(\")\", \"\")\n    balance_check = balance_check.replace(\".\", \"\")\n    balance_check = balance_check.replace(\"-\", \"\")\n    balance_check = balance_check.replace(\" \", \"\")\n    balance_check = balance_check.replace(\"/\", \"\")\n    balance_check = balance_check.replace(\":\", \"\")\n    balance_check = balance_check.replace(\"\u2021\", \"\")\n    balance_check = balance_check.replace(\"&\", \"\")\n    balance_check = balance_check.replace(\"(\", \"\")\n    balance_check = balance_check.replace(\")\", \"\")\n    balance_check = balance_check.replace(\"=\", \"\")\n    balance_check = balance_check.replace(\"!\", \"\")\n    balance_check = balance_check.replace(\"#\", \"\")\n    balance_check = balance_check.replace(\".\", \"\")\n    balance_check = balance_check.replace(\"'\", \"\")\n    balance_check = balance_check.replace(\"_\", \"\")\n    balance_check = balance_check.replace(\"$\", \"\")\n    balance_check = balance_check.replace(\"%\", \"\")\n    balance_check = balance_check.replace(\"#\", \"\")\n    balance_check = balance_check.replace(\"@\", \"\")\n    balance_check = balance_check.replace(\"&\", \"\")\n    balance_check = balance_check.replace(\"-\", \"\")\n    balance_check = balance_check.replace(\"*\", \"\")\n    balance_check = balance_check.replace(\"(\", \"\")\n    balance_check = balance_check.replace(\")\", \"\")\n    balance_check = balance_check.replace(\"[\", \"\")\n    balance_check = balance_check.replace(\"]\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"]\", \"\")\n    balance_check = balance_check.replace(\"'\", \"\")\n    balance_check = balance_check.replace(\",\", \"\")\n    balance_check = balance_check.replace(\".\", \"\")\n    balance_check = balance_check.replace(\" \", \"\")\n    balance_check = balance_check.replace(\"*\", \"\")\n    balance_check = balance_check.replace(\"$\", \"\")\n    balance_check = balance_check.replace(\"&\", \"\")\n    balance_check = balance_check.replace(\"@\", \"\")\n    balance_check = balance_check.replace(\"#\", \"\")\n    balance_check = balance_check.replace(\"`\", \"\")\n    balance_check = balance_check.replace(\"\\\\\", \"\")\n    balance_check = balance_check.replace(\"_\", \"\")\n    balance_check = balance_check.replace(\"|\", \"\")\n    balance_check = balance_check.replace(\"\\t\", \"\")\n    balance_check = balance_check.replace(\"\\n\", \"\")\n    balance_check = balance_check.replace(\"\\r\", \"\")\n    balance_check = balance_check.replace(\"-\", \"\")\n    balance_check = balance_check.replace(\"'\", \"\")\n    balance_check = balance_check.replace(\":\", \"\")\n    balance_check = balance_check.replace(\"!\", \"\")\n    balance_check = balance_check.replace(\"(\", \"\")\n    balance_check = balance_check.replace(\")\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"[\", \"\")\n    balance_check = balance_check.replace(\"]\", \"\")\n    balance_check = balance_check.replace(\"/\", \"\")\n    balance_check = balance_check.replace(\"?\", \"\")\n    balance_check = balance_check.replace(\"|\", \"\")\n    balance_check = balance_check.replace(\"&\", \"\")\n    balance_check = balance_check.replace(\"+\", \"\")\n    balance_check = balance_check.replace(\"#\", \"\")\n    balance_check = balance_check.replace(\"^\", \"\")\n    balance_check = balance_check.replace(\"=\", \"\")\n    balance_check = balance_check.replace(\"`\", \"\")\n    balance_check = balance_check.replace(\"%\", \"\")\n    balance_check = balance_check.replace(\"*\", \"\")\n    balance_check = balance_check.replace(\"@\", \"\")\n    balance_check = balance_check.replace(\"-\", \"\")\n    balance_check = balance_check.replace(\"=\", \"\")\n    balance_check = balance_check.replace(\"_\", \"\")\n    balance_check = balance_check.replace(\"+\", \"\")\n    balance_check = balance_check.replace(\"$\", \"\")\n    balance_check = balance_check.replace(\"&\", \"\")\n    balance_check = balance_check.replace(\"(\", \"\")\n    balance_check = balance_check.replace(\")\", \"\")\n    balance_check = balance_check.replace(\"[\", \"\")\n    balance_check = balance_check.replace(\"]\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance_check.replace(\"{\", \"\")\n    balance_check = balance_check.replace(\"}\", \"\")\n    balance_check = balance"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        # Checking if the date is in correct format.\n        if re.match(r'^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$',dt):\n            #Splitting the date into parts.\n            date_splitted = re.split(r'([/])',dt)\n            #Converting the year into the correct format.\n            if date_splitted[1] == '/':\n                date_splitted[1] = '0' + date_splitted[1]\n            else:\n                date_splitted[1] = '20' + date_splitted[1]\n            #Converting the month into the correct format.\n            if date_splitted[2] == '/':\n                date_splitted[2] = '0' + date_splitted[2]\n            else:\n                date_splitted[2] = '20' + date_splitted[2]\n            #Converting the date into dd-mm-yyyy format.\n            date_splitted[0] = '-' + date_splitted[0]\n            date_splitted[2] = date_splitted[2] + '-' + date_splitted[1]\n            date_splitted[1] = date_splitted[1] + '-' + date_splitted[0]\n            #Returning the new date in dd-mm-yyyy format.\n            return date_splitted[2] + '-' + date_splitted[1] + '-' + date_splitted[0]\n        else:\n            return -1\n    except:\n        return -1\n    \ndef calculate_average_age(initial_age,age_in_days):\n    '''\n    Write a function to calculate the average age.\n    '''\n    try:\n        if initial_age == -1:\n            return -1\n        return (age_in_days / initial_age) * 365.2425\n    except:\n        return -1\n    \ndef calculate_difference(initial_date,new_date):\n    '''\n    Write a function to calculate the difference between two dates.\n    '''\n    try:\n        #Checking if the dates are correct format.\n        if re.match(r'^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$',initial_date) and re.match(r'^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$',new_date):\n            #Splitting the date into parts.\n            date_splitted = re.split(r'([/])',initial_date)\n            #Converting the date into dd-mm-yyyy format.\n            date_splitted[0] = '-' + date_splitted[0]\n            date_splitted[2] = date_splitted[2] + '-' + date_splitted[1]\n            date_splitted[1] = date_splitted[1] + '-' + date_splitted[0]\n            #Splitting the date into parts.\n            date_splitted_2 = re.split(r'([/])',new_date)\n            #Converting the date into dd-mm-yyyy format.\n            date_splitted_2[0] = '-' + date_splitted_2[0]\n            date_splitted_2[2] = date_splitted_2[2] + '-' + date_splitted_2[1]\n            date_splitted_2[1] = date_splitted_2[1] + '-' + date_splitted_2[0]\n            #Calculating the difference in days.\n            days = (int(date_splitted[2]) - int(date_splitted_2[2])) / 365.2425\n            #Calculating the difference in months.\n            months = (int(date_splitted[2]) - int(date_splitted_2[2])) * 12\n            #Calculating the difference in years.\n            years = (int(date_splitted[2]) - int(date_splitted_2[2])) / 365.2425 / 12\n            if months <= 0:\n                months = months + 12\n            if years <= 0:\n                years = years + 1\n            #Returning the difference in days,months and years.\n            return days + months + years\n        else:\n            return -1\n    except:\n        return -1\n    \ndef calculate_age_in_days(birth_year,birth_month,birth_date,death_year,death_month,death_date):\n    '''\n    Write a function to calculate the age in days between two dates.\n    '''\n    try:\n        #Checking if the dates are correct format.\n        if re.match(r'^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$',birth_year) and re.match(r'^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$',death_year):\n            #Splitting the date into parts.\n            date_splitted = re.split(r'([/])',birth_date)\n            #Converting the date into dd-mm-yyyy format.\n            date_splitted[0] = '-' + date_splitted[0]\n            date_splitted[2] = date_splitted[2] + '-' + date_splitted[1]\n            date_splitted[1] = date_splitted[1] + '-' + date_splitted[0]\n            #Splitting the date into parts.\n            date_splitted_2 = re.split(r'([/])',death_date)\n            #Converting the date into dd-mm-yyyy format.\n            date_splitted_2[0] = '-' + date_splitted_2[0]\n            date_splitted_2[2] = date_splitted_2[2] + '-' + date_splitted_2[1]\n            date_splitted_2[1] = date_splitted_2[1] + '-' + date_splitted_2[0]\n            #Calculating the difference in days.\n            days = (int(date_splitted[2]) - int(date_splitted_2[2])) / 365.2425\n            #Calculating the difference in months.\n            months = (int(date_splitted[2]) - int(date_splitted_2[2])) * 12\n            #Calculating the difference in years.\n            years = (int(date_splitted[2]) - int(date_splitted_2[2])) / 365.2425 / 12\n            if months <= 0:\n                months = months + 12\n            if years <= 0:\n                years = years + 1\n            #Returning the difference in days,months and years.\n            return days + months + years\n        else:\n            return -1\n    except:\n        return -1\n    \ndef calculate_age_in_years(birth_year,birth_month,birth_date,death_year,death_month,death_date):\n    '''\n    Write a function to calculate the age in years between two dates.\n    '''\n    try:\n        #Checking if the dates are correct format.\n        if re.match(r'^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$',birth_year) and re.match(r'^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$',death_year):\n            #Splitting the date into parts.\n            date_splitted = re"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.findall(r'\\d{4}-\\d{2}-\\d{2}', dt)\n    dt = f\"{dt[2]}-{dt[1]}-{dt[0]}\"\n    return dt\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.findall(r'\\d{4}-\\d{2}-\\d{2}', dt)\n    dt = f\"{dt[2]}-{dt[1]}-{dt[0]}\"\n    return dt\ndef add_time(dt1, dt2):\n    '''\n    Write a function that adds two time objects.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    dt1 = dt1 - dt2\n    return dt1\ndef add_time(dt1, dt2):\n    '''\n    Write a function that adds two time objects.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    dt1 = dt1 + dt2\n    return dt1\ndef time_diff(dt1, dt2):\n    '''\n    Write a function that calculates the time difference between two dates.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    return dt1 - dt2\ndef time_diff(dt1, dt2):\n    '''\n    Write a function that calculates the time difference between two dates.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    return dt1 - dt2\ndef time_diff(dt1, dt2):\n    '''\n    Write a function that calculates the time difference between two dates.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    return dt1 - dt2\ndef time_diff(dt1, dt2):\n    '''\n    Write a function that calculates the time difference between two dates.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    return dt1 - dt2\ndef time_diff(dt1, dt2):\n    '''\n    Write a function that calculates the time difference between two dates.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    return dt1 - dt2\ndef time_diff(dt1, dt2):\n    '''\n    Write a function that calculates the time difference between two dates.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    return dt1 - dt2\ndef time_diff(dt1, dt2):\n    '''\n    Write a function that calculates the time difference between two dates.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    return dt1 - dt2\ndef time_diff(dt1, dt2):\n    '''\n    Write a function that calculates the time difference between two dates.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 = (int(dt2[0]) + int(dt2[1]) + int(dt2[2]))\n    return dt1 - dt2\ndef time_diff(dt1, dt2):\n    '''\n    Write a function that calculates the time difference between two dates.\n    '''\n    dt1 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt1)\n    dt2 = re.findall(r'\\d{2}:\\d{2}:\\d{2}', dt2)\n    dt1 = (int(dt1[0]) + int(dt1[1]) + int(dt1[2]))\n    dt2 "
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y, m, d = dt.split('-')\n    return f'{int(d):02d}-{int(m):02d}-{int(y):04d}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r\"\\d{4}[-]\\d{2}[-]\\d{2}\"\n    dt = re.findall(regex,dt)\n    return \"\".join(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month_dict = {\n        '01': 'Jan',\n        '02': 'Feb',\n        '03': 'Mar',\n        '04': 'Apr',\n        '05': 'May',\n        '06': 'Jun',\n        '07': 'Jul',\n        '08': 'Aug',\n        '09': 'Sep',\n        '10': 'Oct',\n        '11': 'Nov',\n        '12': 'Dec',\n    }\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    # remove the whitespace\n    dt = dt.strip()\n    \n    # split into year, month, day\n    year, month, day = dt.split('-')\n    \n    # convert the day to integer\n    day = int(day)\n    \n    # convert the month to integer\n    month = int(month)\n    \n    # convert the year to integer\n    year = int(year)\n    \n    # convert it into the expected format\n    formatted_date = f'{day}-{month}-{year}'\n    \n    # return the result\n    return formatted_date\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = 1\n    while gap < n:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i - gap\n            while j >= 0 and my_list[j] > temp:\n                my_list[j + gap] = my_list[j]\n                j -= gap\n            my_list[j + gap] = temp\n        gap *= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j>=gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Constant\n    gap = int(len(my_list)/2)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    length = len(my_list)\n    \n    if length <= 1:\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        for j in range(i):\n            if my_list[i] < my_list[j]:\n                temp = my_list[i]\n                my_list[i] = my_list[j]\n                my_list[j] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 1:\n        return my_list\n    else:\n        n = len(my_list)\n        gap = n//2\n        while gap>0:\n            for i in range(gap,n):\n                current = my_list[i]\n                j = i\n                while j>=gap and my_list[j-gap]>current:\n                    my_list[j] = my_list[j-gap]\n                    j -= gap\n                my_list[j] = current\n            gap = gap//2\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            k = i\n            while k >= gap and my_list[k - gap] > my_list[k]:\n                my_list[k - gap], my_list[k] = my_list[k], my_list[k - gap]\n                k -= gap\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    increment = n // 2\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1 if tup1 else tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = ()\n    for x, y in zip(test_tup1, test_tup2):\n        new_tup += (x and y,)\n    return new_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x + y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x for x, y in zip(test_tup1, test_tup2) if x == y)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if type(test_tup1) is not tuple or type(test_tup2) is not tuple:\n        raise TypeError(\"TypeError\")\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"ValueError\")\n    return (test_tup1[i] and test_tup2[i]) for i in range(len(test_tup1))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if type(test_tup1) is tuple and type(test_tup2) is tuple:\n        return (test_tup1[0] & test_tup2[0]), (test_tup1[1] & test_tup2[1]), (test_tup1[2] & test_tup2[2])\n    else:\n        return None\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = (1,2,3,4)\n    tup2 = (4,5,6,7)\n    return tup1 and tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup[0] and tup[1] for tup in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return (b, c)\n    else:\n        x = (-b + math.sqrt(b**2 - 4*a*c))/(2*a)\n        return (x, c - x**2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print('a = {}'.format(a))\n    print('b = {}'.format(b))\n    print('c = {}'.format(c))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return np.array([a * a * c - 2 * a * b, a * a * b - 2 * a * c])\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.arange(-1, 1,.0001)\n    y = a * x * x + b * x + c\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print('a = {:.3f}, b = {:.3f}, c = {:.3f}'.format(a, b, c))\n    d = b**2 - 4*a*c\n    if d < 0:\n        print('Not exist')\n        return\n    if d == 0:\n        x = -b/(2*a)\n        print('\\nSolution of x = {}'.format(x))\n        return\n    root_d = math.sqrt(d)\n    x1 = -b/(2*a) + root_d\n    x2 = -b/(2*a) - root_d\n    print('Solution of x1 = {}'.format(x1))\n    print('Solution of x2 = {}'.format(x2))\n    return\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (a * a * (-b - math.sqrt(b * b - 4 * a * c)) + 2 * a * math.sqrt(b * b - 4 * a * c)) / (2 * a)\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*(b**2) - (4*c*a))**(1/2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((c*a**2)/(-b)) + ((a**2)*(2*b-2*c))/(4*a**2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = b**2-4*a*c\n    if D < 0:\n        return None\n    else:\n        x1 = (-b+math.sqrt(D))/(2*a)\n        x2 = (-b-math.sqrt(D))/(2*a)\n        return (x1, x2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a * a - 4 * b * c) >= 0:\n        x = (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n        y = (-b - math.sqrt(b * b - 4 * a * c)) / (2 * a)\n        return x, y\n    else:\n        return \"No Solution\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #Your code here\n    common_elements = list(set(list1) & set(list2))\n    if common_elements:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Your code here\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list(set(list1) & set(list2))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem1 in list1:\n        for elem2 in list2:\n            if elem1 == elem2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1.count(list2) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        if i in list2 and i not in common:\n            common.append(i)\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Your code here\n    return list(set(list1).intersection(set(list2)))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    a = height\n    b = base1\n    c = base2\n    \n    return 0.5*(a+b+c)\n    "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    l1 = base1+height\n    l2 = base2+height\n    return (l1+l2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(f\"Median length of trapezium is {(base1+base2)/2}\")\n    return (base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_height = height/2\n    upper = base_height*(base1+base2)\n    lower = base_height*(base1+base2)\n    if base1 == base2:\n        return upper\n    else:\n        return lower\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = int(input(\"Enter the base of first trapezium:\"))\n    base2 = int(input(\"Enter the base of second trapezium:\"))\n    height = int(input(\"Enter the height of trapezium:\"))\n    if base1+base2 <= height:\n        print(\"Height of trapezium is greater than or equal to it's base\")\n    else:\n        if base1 > base2:\n            base1, base2 = base2, base1\n            height, base1, base2, height = height, base2, base1, height\n        def triangle_area(base1,base2,height):\n            area = (base1 + base2) * height / 2\n            return area\n        print(\"Area of trapezium is:\", triangle_area(base1,base2,height))\n    return triangle_area\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_squared1 = base1**2\n    base_squared2 = base2**2\n    height_squared = height**2\n    return (base_squared1+base_squared2+height_squared)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 1.1*(base1 + base2) - 0.1*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    side1=base1\n    side2=base2\n    side3=side1+side2\n    height=height\n    if height%2==0:\n        median=(side3-side1)/2\n        median=(height-median)/2\n    else:\n        median=side3/2\n    return median\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number < arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number < element:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[-1]\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == number:\n            print(f\"Array contains {number}.\")\n            return True\n    print(f\"Array does not contain {number}.\")\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    # Making a function to check whether the number is greater than the element\n    def greater(num):\n        if num > arr[0]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i]>number:\n            print(\"True\")\n            return\n    print(\"False\")\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    print(f'\\nChecking whether {number} is greater than the elements of the given array...')\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f'{arr[i]} is greater than {number}')\n            return False\n    print(f'{number} is greater than the elements of the given array')\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z ]', '', text)\n    if re.search(\"ab+\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # regular expression\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    # or\n    # return re.search(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'a+',text):\n        print('Found')\n    else:\n        print('Not Found')\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # +++your code here+++\n    #match = re.findall(r'ab{1,}',text)\n    #return match\n    return re.findall(r'a.*?b',text)\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # +++your code here+++\n    #match = re.findall(r'ab+',text)\n    #return match\n    return re.findall(r'a+?b',text)\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # +++your code here+++\n    #match = re.findall(r'a+',text)\n    #return match\n    return re.findall(r'a?b',text)\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # +++your code here+++\n    #match = re.findall(r'a*',text)\n    #return match\n    return re.findall(r'a{1,}?b',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_b = re.findall('ab*',text)\n    if a_b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'(ab)+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern= re.compile('(a+b)')\n    result= pattern.findall(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return '1' if n % 10 < 9 else '0'\n    if n == 0:\n        return '0'\n    if n < 10:\n        return str(n)\n    if n < 100:\n        return str(n%10)\n    if n < 1000:\n        return str(n%100)[-1]\n    if n < 10000:\n        return str(n%1000)[-1]\n    if n < 100000:\n        return str(n%10000)[-1]\n    return str(n%100000)[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = -n\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    num = str(n)\n    return num[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while(n > 0):\n        n = n//10\n    return n\ndef check_Numbers(n,k) :\n    '''\n    Write a python function to check if the given number is a prime number or not.\n    '''\n    a = int(last_Digit(n))\n    if(n==0) :\n        return False\n    if(a==1 or a==0) :\n        return False\n    for i in range(2,a//2+1):\n        if(n%i==0) :\n            return False\n    else :\n        return True\ndef prime_Number(n) :\n    '''\n    Write a python function to check if the given number is a prime number or not.\n    '''\n    a = int(last_Digit(n))\n    if(a==1 or a==0) :\n        return False\n    if(n==0) :\n        return False\n    if(n%2==0) :\n        return False\n    for i in range(3,a//2,2) :\n        if(n%i==0) :\n            return False\n    else :\n        return True\ndef prime_Numbers(n) :\n    '''\n    Write a python function to find the prime numbers which are in range 1-n.\n    '''\n    a = int(last_Digit(n))\n    if(a==1 or a==0) :\n        return False\n    if(n==0) :\n        return False\n    if(n%2==0) :\n        return False\n    list = []\n    for i in range(3,a//2+1):\n        if(n%i==0) :\n            list.append(i)\n    return list\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while (n>0):\n        last= n%10\n        n= n//10\n    return last\ndef reverse_words(s):\n    '''\n    Write a python function to reverse the words of a given string.\n    '''\n    s= s.strip()\n    print(\"Original string:\", s)\n    s= s.split()\n    print(\"Reversed words:\", \" \".join(reversed(s)))\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    res = n%10\n    return res\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(int(n))\n    if n == 0:\n        return 0\n    while n >= 10:\n        n = n%10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(n)\n    if n < 0 :\n        return -1\n    if n >= 10 :\n        return -1\n    if n <= 9 :\n        return n\n    while n!= 0 :\n        n = int(n/10)\n        if n == 0 :\n            return -1\n    return n\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            newlist.append(list1[i])\n    return newlist\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i<0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(-i)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            negative.append(list1[i])\n    return negative\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    pos = []\n    for i in list1:\n        if i >= 0:\n            pos.append(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in range(0,len(list1)):\n        if list1[i] < 0:\n            result.append(list1[i])\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return[-n for n in list1]\nprint(neg_nos([-1,2,5,6,7]))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    print(new_str)\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #str1 = str1.lower()\n    #str1 = str1.replace('a',' ')\n    #str1 = str1.replace('e',' ')\n    #str1 = str1.replace('i',' ')\n    #str1 = str1.replace('o',' ')\n    #str1 = str1.replace('u',' ')\n    return str1.replace('a',' ').replace('e',' ').replace('i',' ').replace('o',' ').replace('u',' ')\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if i % 2!= 0:\n            str1[i] = \"\"\n    return \"\".join(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\"\\n\",\"\").replace(\"\\r\",\"\").replace(\"\\t\",\"\").replace(\" \",\"\")\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([i for i in str1 if i not in \"0123456789\"])\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    str1 = str1.lower()\n    while i < len(str1):\n        if str1[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            str1 = str1[:i] + str1[i+1:]\n        else:\n            i += 1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if i.isalnum() or i == \" \":\n            result += i\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    import re\n    \n    str1 = str1.replace(' ','')\n    str1 = str1.replace(',',' ')\n    str1 = str1.replace('.',' ')\n    str1 = str1.replace('-',' ')\n    \n    \n    return re.sub('[^0-9]','',str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == \" \":\n            new_str += char\n        elif char == \",\":\n            new_str += char\n        elif char == \".\":\n            new_str += char\n        elif char == \":\":\n            new_str += char\n        elif char == \";\":\n            new_str += char\n        elif char == \"-\":\n            new_str += char\n        elif char == \"?\":\n            new_str += char\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][0] and\n                test_list[i][1] == test_list[j][1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    i = 0\n    j = len(test_list) - 1\n    while i < j:\n        if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n            counter += 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item1, item2 in zip(test_list, reversed(test_list)):\n        if item1 == item2:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in test_list:\n        for j in test_list:\n            if i + j == i + j:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    count = 0\n    \n    for i in range(len(test_list)):\n        if (test_list[i] + test_list[i+1]) in test_list:\n            count += 1\n    \n    return count\n    \n    # NOTE: \n    # A bidirectional tuple pair consists of a tuple (T1, T2) with T1 < T2.\n    # Examples:\n    # (1, 2) < (1, 3)\n    # (1, 3) < (1, 2)\n    # (1, 2) < (1, 4)\n    # (1, 4) < (1, 2)\n    # \n    # The count should be 3, since (1, 2) < (1, 3) and (1, 2) < (1, 4).\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    tuple_count = 0\n    for item in test_list:\n        bidir_item = list(reversed(item))\n        if (item[0] == bidir_item[0]) and (item[1] == bidir_item[1]):\n            tuple_count += 1\n    return tuple_count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for i in range(len(test_list) - 1):\n        if (test_list[i], test_list[i+1]) in test_list:\n            result += 1\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def f(x):\n        if x is None:\n            return 0\n        return 1 + f(x[0]) + f(x[1])\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for x, y in zip(test_list[:-1], test_list[1:]):\n        if x == y:\n            count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = sum(L)\n    return s\n    \ndef print_all_records(records, header):\n    '''\n    Write a function to print all records in a given list of dictionaries.\n    '''\n    for record in records:\n        print(header, record)\n        \ndef length_records(records):\n    '''\n    Write a function that calculates the length of the records.\n    '''\n    length = 0\n    for record in records:\n        length += 1\n    return length\n        \ndef top_five_alphabets(records):\n    '''\n    Write a function that returns top five alphabetically from the list of records.\n    '''\n    alphabet = []\n    for record in records:\n        alphabet.append(record['name'][0])\n    alphabet.sort()\n    top = alphabet[:5]\n    return top\n    \ndef find_countries(records, country):\n    '''\n    Write a function that finds the record of a given country in the list of records.\n    '''\n    for record in records:\n        if record['country'] == country:\n            return record\n    return None\n    \ndef list_all_records(records):\n    '''\n    Write a function that returns all records of the list of dictionaries.\n    '''\n    return records\n    \ndef average_marks(records):\n    '''\n    Write a function that calculates the average of all the marks of all the records in the list of dictionaries.\n    '''\n    sum = 0\n    for record in records:\n        sum += record['Marks']\n    average = sum / len(records)\n    return average\n    \ndef top_five_students(records):\n    '''\n    Write a function that returns top five students with highest marks from the list of dictionaries.\n    '''\n    student_marks = []\n    for record in records:\n        student_marks.append(record['Marks'])\n    student_marks.sort()\n    top = student_marks[:5]\n    return top\n    \ndef all_records(records):\n    '''\n    Write a function that returns the records in a list of dictionaries.\n    '''\n    return records\n    \ndef dictionary_from_records(records):\n    '''\n    Write a function that returns the dictionary from the list of records.\n    '''\n    d = {}\n    for record in records:\n        d[record['name']] = record\n    return d\n    \ndef add_record(records, record):\n    '''\n    Write a function that adds a record to the list of records.\n    '''\n    records.append(record)\n    return records\n    \ndef delete_record(records, record_name):\n    '''\n    Write a function that deletes a record from the list of records.\n    '''\n    for record in records:\n        if record['name'] == record_name:\n            records.remove(record)\n            return records\n        return records\n    return records\n    \ndef update_record(records, record_name, new_record):\n    '''\n    Write a function that updates a record in the list of records.\n    '''\n    for record in records:\n        if record['name'] == record_name:\n            record.update(new_record)\n            return records\n    return records\n    \ndef replace_record(records, record_name, new_record):\n    '''\n    Write a function that replaces a record in the list of records.\n    '''\n    for record in records:\n        if record['name'] == record_name:\n            records.remove(record)\n            records.append(new_record)\n            return records\n    return records\n    \ndef highest_marks(records):\n    '''\n    Write a function that calculates the highest marks of all the records in the list of dictionaries.\n    '''\n    max_marks = 0\n    for record in records:\n        if max_marks < record['Marks']:\n            max_marks = record['Marks']\n    return max_marks\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    for i in range(len(L)):\n        res += L[i]\n    return res\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Your code here\n    result = 0\n    for x in L:\n        result = result * 10 + x\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    return L[0] * 10 + multiple_to_single(L[1:])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([int(i) for i in L])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    print(sum(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(f'{int(reduce(lambda x, y: str(x) + str(y), L))}')\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # The simplest solution is to convert the list into a single integer and use the built-in sum function. \n    # However, this is not guaranteed to be the fastest, since it is O(n) instead of O(1).\n    # Here is a more efficient solution.\n    #\n    # The idea is to \"unpack\" the list into a single integer and then \"zip\" it back into the list. \n    # For each item in the list, the following operation is performed:\n    # a = a * 10 + i, where i is an index from 0 to len(L) - 1.\n    #\n    # Example:\n    # L = [1, 2, 3, 4]\n    # a = (1 * 10) + (2 * 10) + (3 * 10) + (4 * 10)\n    # a = 10 + 20 + 30 + 40\n    #\n    # The function multiple_to_single(L) then performs the following steps:\n    # for i in range(len(L)):\n    #     a = a * 10 + i\n    #     print a\n    #    print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #    print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print a\n    #     print "
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    adj = \"JJR|JJS|RBR|RBS\"\n    pattern = re.compile(r\"\\b({})\\b\".format(adj))\n    res = pattern.finditer(text)\n    for match in res:\n        #print(match.group(0))\n        positions.append((match.group(0), match.start(), match.end()))\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adv_pos = re.findall(r\"\\bADV\\b\",text)\n    return adv_pos\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos_tagged = text.split(' ')\n    for idx, token in enumerate(pos_tagged):\n        if token[0] in 'RB':\n            return token, idx\n    return '', -1\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return True\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text:\n        result = []\n        text = re.sub(r\"[^a-zA-Z0-9,]\", \" \", text.lower())\n        text = re.sub(r\"[,]\", \" \", text)\n        text = re.sub(r\"[0-9]\", \" \", text)\n        #print(text)\n        for i in range(len(text)):\n            if text[i] in ['the', 'and']:\n                for j in range(i+1,len(text)):\n                    if text[j] in ['the', 'and'] and (text[j] in ['of', 'in', 'at'] or text[j-1] in ['of', 'in', 'at']):\n                        result.append([text[i],i])\n                        result.append([text[j],j])\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # \"I'm not mad\"\n    text = text.lower()\n    # print(text)\n    for i in range(0, len(text)):\n        if re.search('i', text[i:i+2]):\n            # print(i)\n            return i, i+1\n    return -1, -1\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if not re.search(r'\\w+',text):\n        return None\n    pos = []\n    #iterate over the tokens\n    for i,token in enumerate(text.split()):\n        if re.search(r'\\w+\\b',token):\n            #if the token is an adverb, add the token and the position to the list\n            pos.append((token,i))\n    #return the list of adverb and their positions\n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 text \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u0435\u0433\u043e \u0441\u043b\u043e\u0432\u0430\n    # \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0435\u0441\u044f \u0432 \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u0445 \u0441\u043b\u043e\u0432\n    adverb_pattern = r'(?:[\u0430-\u044f]+\u043d\u0430|[\u0430-\u044f]+\u043d\u0438|[\u0430-\u044f]+\u043d|[\u0430-\u044f]+\u043d\u0435\u0439)'\n    adverb_pattern_match = re.findall(adverb_pattern, text)\n    # print(adverb_pattern_match)\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 adverb_index_list \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c\n    adverb_index_list = list(set([adverb_pattern_match.index(adverb) for adverb in adverb_pattern_match]))\n    # \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0432\u0441\u0435\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445\n    return adverb_index_list\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Return a dictionary of the positions of each adverb\n    # \n    # Example 1:\n    #\n    # INPUT: \"Wow, that's really cool. Cool beans for you!\"\n    # OUTPUT: {'wow': 1, 'is': 4,'really': 7, 'cool': 10, 'beans': 13}\n    #\n    # Example 2:\n    #\n    # INPUT: \"Wow, really cool beans for you!\"\n    # OUTPUT: {'wow': 1,'really': 7, 'cool': 10, 'beans': 13}\n    #\n    # Constraints:\n    #\n    # 1 <= text.length <= 105\n    # text consists of only English alphabetic characters and spaces''.\n    # \n    # Link: https://leetcode.com/problems/first-unique-character-in-a-string/\n    #\n    # Solution:\n    # \n    # 1. Convert text into a list of words\n    # 2. Use a dict to keep track of all the occurrences of each word\n    # 3. Iterate through the word list, and if it is in the dict, then print the index of the occurrence\n    # \n    # Time Complexity: O(N)\n    # Space Complexity: O(N)\n    #\n    # Approach:\n    #\n    # 1. Build a regular expression to match a word\n    # 2. Use the re.search() to find the occurrence of the word\n    # 3. Use the re.findall() to find the occurrences of all the words\n    #\n    # Complexity Analysis:\n    #\n    # Time Complexity: O(N)\n    # Space Complexity: O(N)\n    #\n    # Approach:\n    # \n    # 1. Build a regular expression to match a word\n    # 2. Use the re.search() to find the occurrence of the word\n    # 3. Use the re.findall() to find the occurrences of all the words\n    #\n    # Time Complexity: O(N)\n    # Space Complexity: O(N)\n    \n    from collections import defaultdict\n    \n    words = text.split()\n    res = defaultdict(list)\n    for index, word in enumerate(words):\n        if re.search(r\"\\b%s\\b\" % word, text):\n            res[word].append(index)\n    return res\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos = []\n    if text:\n        for i in range(len(text)):\n            if text[i] == 'about' or text[i] == 'over' or text[i] == 'via':\n                pos.append(i)\n    return pos\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n    \n    \n    \n    "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def surfacearea_cube(l):\n        '''\n        surface area of a cube of given size\n        '''\n        a = 6*l*l\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        largest = l[0]\n        for i in l:\n            if i > largest:\n                largest = i\n        return largest\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        largest = l[0]\n        for i in l:\n            if i > largest:\n                largest = i\n        return largest\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        largest sum\n        '''\n        l = sorted(l)\n        a = l[-1] + l[-2]\n        return a\n    '''\n    Write a function that, given a list of numbers, checks for a pair with the largest sum\n    '''\n    def largest_sum(l):\n        '''\n        larges"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    return ((6 * l * l) + 6 * l)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #1.\n    # surface = (l*6)*4\n    # return surface\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = 6 * l ** 2\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n    \ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    return 2*3.14*r*h\n    \ndef surfacearea_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone of a given radius and height.\n    '''\n    return 3.14*r*(r+h)\n    \ndef surfacearea_pyramid(l, h):\n    '''\n    Write a function to find the surface area of a pyramid with a given length and height.\n    '''\n    return 2*(l+h)*l\n    \ndef surfacearea_rectangle(w, h):\n    '''\n    Write a function to find the surface area of a rectangle with a given width and height.\n    '''\n    return w*h\n    \ndef surfacearea_parallelogram(a, b):\n    '''\n    Write a function to find the surface area of a parallelogram with a given base and height.\n    '''\n    return a*b\n    \ndef surfacearea_tetrahedron(l, h):\n    '''\n    Write a function to find the surface area of a tetrahedron with a given length and height.\n    '''\n    return 12*l*h\n    \ndef surfacearea_octahedron(l):\n    '''\n    Write a function to find the surface area of an octahedron with a given length.\n    '''\n    return 8*(3*l**2)**(1/3)\n    \ndef surfacearea_dodecahedron(l):\n    '''\n    Write a function to find the surface area of a dodecahedron with a given length.\n    '''\n    return 20*(3*l**2)**(1/3)\n    \ndef surfacearea_icosahedron(l):\n    '''\n    Write a function to find the surface area of an icosahedron with a given length.\n    '''\n    return 18*(3*l**2)**(1/3)\n    \ndef surfacearea_monkey_prism(a, b):\n    '''\n    Write a function to find the surface area of a monkey prism with a given base and height.\n    '''\n    return (a*b)+(a-1)*(b-1)*a**2\n    \ndef surfacearea_pyramid_and_triangle(a, b):\n    '''\n    Write a function to find the surface area of a pyramid and a triangle with given lengths.\n    '''\n    return a*b+(a-1)*b*a**2\n    \ndef surfacearea_cuboid_and_pyramid(a, b, c):\n    '''\n    Write a function to find the surface area of a cuboid and a pyramid with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2\n    \ndef surfacearea_pyramid_and_tetrahedron(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid and a tetrahedron with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2\n    \ndef surfacearea_pyramid_and_cube(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid and a cube with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+c*b**2\n    \ndef surfacearea_pyramid_and_cylinder(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid and a cylinder with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*b**2+c*b**2\n    \ndef surfacearea_pyramid_and_cone(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid and a cone with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*c**2\n    \ndef surfacearea_pyramid_and_quad(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid and a square with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*c**2\n    \ndef surfacearea_pyramid_and_rectangle(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid and a rectangle with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*c**2\n    \ndef surfacearea_pyramid_and_trapezoid(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid and a trapezoid with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*c**2+b*c**2\n    \ndef surfacearea_pyramid_and_rectangle_and_trapezoid(a, b, c, d):\n    '''\n    Write a function to find the surface area of a pyramid and a rectangle and trapezoid with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*c**2+b*c**2+d*c**2\n    \ndef surfacearea_pyramid_and_square(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid and a square with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*c**2\n    \ndef surfacearea_pyramid_and_triangle_and_square(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid and a triangle and square with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*c**2+b*c**2\n    \ndef surfacearea_pyramid_and_triangle_and_rectangle(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid, a triangle, and a rectangle with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*c**2+b*c**2+c*b**2\n    \ndef surfacearea_pyramid_and_triangle_and_trapezoid(a, b, c):\n    '''\n    Write a function to find the surface area of a pyramid, a triangle, and a trapezoid with given lengths.\n    '''\n    return (a*b*c)+(a*b+b*c+c*a)*a**2+(a*b-b*c+c*a)*(a-1)**2+a*c**2+b*c**2"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2*6\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        a = 0\n        for i in range(len(nums)):\n            if nums[i] >= 0:\n                a += 1\n        return a/(len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count = count + 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_cnt = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            positive_cnt += 1\n    return positive_cnt / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    x = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            x += 1\n    return x/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            positive_count+=1\n    return positive_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i >= 0:\n            pos += 1\n    return pos / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = array('i', nums)\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -99999999\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg\n    \ndef largest_pos(list2):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    max_pos = -99999999\n    for i in list2:\n        if i > 0 and i < max_pos:\n            max_pos = i\n    return max_pos\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -1\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg=0\n    for i in list1:\n        if(i<0):\n            if(i>max_neg):\n                max_neg=i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(len(list1)): \n        if list1[i] < 0: \n            if list1[i] > largest: \n                largest = list1[i] \n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    n = 0\n    if list1 == [] :\n        return n\n    for i in range(0, len(list1)):\n        if list1[i] < 0 :\n            if list1[i] > n :\n                n = list1[i]\n    return n\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    m=max(list1)\n    if m<0:\n        return m\n    else:\n        return 0\n    \nprint(largest_neg([-1, -2, -3, -4, -5, -6, -7]))\nprint(largest_neg([-2, -3, -4, -5, -6, -7]))\nprint(largest_neg([-2, -3, -4, -5, -6, -7, -8]))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    print('The largest negative number in the list is :', largest)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maxi = 0\n    max_neg = list1[0]\n    if max_neg < 0:\n        max_neg = 0\n        maxi = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_neg:\n                max_neg = list1[i]\n                maxi = i\n    return maxi\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Your Code Here\n    max1 = -1000000\n    for i in list1:\n        if(max1 < i):\n            max1 = i\n    print(max1)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return (list1[-1])\n    \n    \n    "
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Write your code here\n    trim_list = []\n    for i in range(0,len(test_list)):\n        trim_list.append(test_list[i][0:K])\n    return trim_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            test_list[i] = test_list[i] + (K-len(test_list[i]))*(test_list[i],)\n        else:\n            test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    k = int(K)\n    return_list = []\n    for i in test_list:\n        new_list = list(i)\n        new_list = new_list[0:k]\n        return_list.append(tuple(new_list))\n    return return_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for item in test_list:\n        if len(item) > K:\n            new_list.append(item[:K])\n    return new_list\n    \nprint(trim_tuple([('c', 1, 2), ('a', 3, 4, 5), ('b', 6, 7, 8, 9)], 2))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K == 0:\n        return test_list\n    else:\n        return trim_tuple([x for x in test_list if x[K]!= 0], K-1)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            test_list[i] = (test_list[i], 'Too Short')\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = (0,0,0,0)\n    \n    # One way of doing the index multiplication\n    # for i in range(len(test_tup1)):\n    #     res[i] = test_tup1[i]*test_tup2[i]\n    # return res\n    \n    #Another way of doing the index multiplication\n    for i in range(len(test_tup1)):\n        res[i] = test_tup1[i]*test_tup2[i]\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] * test_tup2[i])\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print('Index wise multiplication of tuples: ', end = '')\n    for i in range(0, len(test_tup1)):\n        print(test_tup1[i] * test_tup2[i], end = '')\n    print()\n    return 0\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n    \ndef two_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise multiplication of two given tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    for i in range(len(test_list1)):\n        test_list1[i] *= test_list2[i]\n    return tuple(test_list1)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    final_tuple = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0,len(test_tup1)):\n            final_tuple += (test_tup1[i] * test_tup2[i], )\n        return final_tuple\n    else:\n        return \"tuples cannot be multiplied\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    index = 0\n    lst3 = []\n    while index < len(lst1):\n        lst3.append(int(lst1[index]) * int(lst2[index]))\n        index += 1\n    return tuple(lst3)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return test_tup1\n    else:\n        return None\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_list1, index_list2 = (test_tup1[0], test_tup2[0]), (test_tup1[1], test_tup2[1])\n    index_list_mul = []\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in tup: \n        if i in lst: \n            lst[i]+=1 \n        else: \n            lst[i]=1 \n    return lst \nlst = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:0,136:0,137:0,138:0,139:0,140:0,141:0,142:0,143:0,144:0,145:0,146:0,147:0,148:0,149:0,150:0,151:0,152:0,153:0,154:0,155:0,156:0,157:0,158:0,159:0,160:0,161:0,162:0,163:0,164:0,165:0,166:0,167:0,168:0,169:0,170:0,171:0,172:0,173:0,174:0,175:0,176:0,177:0,178:0,179:0,180:0,181:0,182:0,183:0,184:0,185:0,186:0,187:0,188:0,189:0,190:0,191:0,192:0,193:0,194:0,195:0,196:0,197:0,198:0,199:0,200:0,201:0,202:0,203:0,204:0,205:0,206:0,207:0,208:0,209:0,210:0,211:0,212:0,213:0,214:0,215:0,216:0,217:0,218:0,219:0,220:0,221:0,222:0,223:0,224:0,225:0,226:0,227:0,228:0,229:0,230:0,231:0,232:0,233:0,234:0,235:0,236:0,237:0,238:0,239:0,240:0,241:0,242:0,243:0,244:0,245:0,246:0,247:0,248:0,249:0,250:0,251:0,252:0,253:0,254:0,255:0}\ntup = ('moose','giraffe','banana','apple','ball','fox','monkey','pig','cow','rabbit','duck','goat','bear','snake','horse','goose')\nlst = dict.fromkeys(tup,0)\nprint(count_Occurrence(tup,lst))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for item in lst:\n        if item in tup:\n            count+=1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_count = Counter(lst)\n    return lst_count[tup]\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0 \n    for i in lst: \n        if i in tup: \n            count = count + 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dct = {}\n    for el in lst:\n        count_dct[el] = tup.count(el)\n    return count_dct\n    \ndef get_key_value_from_dict_with_list(dict_obj, lst): \n    '''\n    Write a python function to get the key values from dictionary in list.\n    '''\n    count_dct = {}\n    for el in dict_obj:\n        count_dct[dict_obj[el]] = lst.count(el)\n    return count_dct\n    \ndef get_key_value_from_dict_with_tuples(dict_obj, tup):\n    '''\n    Write a python function to get the key values from dictionary in tuple.\n    '''\n    count_dct = {}\n    for el in dict_obj:\n        count_dct[dict_obj[el]] = tup.count(el)\n    return count_dct\n    \ndef count_list_sublists(lst):\n    '''\n    Write a python function to count the occurence of all sublists in a list.\n    '''\n    count_dct = {}\n    for sublist in lst:\n        if sublist in count_dct:\n            count_dct[sublist] += 1\n        else:\n            count_dct[sublist] = 1\n    return count_dct\n    \ndef get_key_value_from_dict_with_tuple(dict_obj, tup):\n    '''\n    Write a python function to get the key values from dictionary in tuple.\n    '''\n    count_dct = {}\n    for el in dict_obj:\n        count_dct[dict_obj[el]] = tup.count(el)\n    return count_dct\n    \ndef get_key_value_from_dict_with_set(dict_obj, set_obj):\n    '''\n    Write a python function to get the key values from dictionary in set.\n    '''\n    count_dct = {}\n    for el in dict_obj:\n        count_dct[dict_obj[el]] = set_obj.count(el)\n    return count_dct\n    \ndef check_alternate_list_occurence(lst1, lst2):\n    '''\n    Write a python function to check whether alternate list (lst1) is same or not as list (lst2).\n    '''\n    if lst1 == lst2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        count = 0\n        for y in tup:\n            if x == y:\n                count += 1\n        print(count)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    if lst == [] and tup == ():\n        return count\n    elif lst == [] and tup!= ():\n        return len(tup)\n    elif tup == [] and lst!= ():\n        return len(lst)\n    else:\n        for elem in tup:\n            if elem in lst:\n                count += 1\n        return count\n        \n        \ntup = ('a','e','i','o','u','A','E','I','O','U')\nlst = ['a','e','i','o','u','A','E','I','O','U']\nprint(count_Occurrence(tup, lst))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for element in lst:\n        if element in tup:\n            count+=1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for i in range(0,len(lst)):\n        if(tup[i] in lst):\n            count=count+1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if not lst:\n        return 0\n    for i in lst:\n        if i in tup:\n            lst[lst.index(i)] = tup.count(i)\n    return lst\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    #len(nums) == 3\n    #nums[0]**3 == nums[0]**3 = nums[0]\n    #nums[1]**3 == nums[1]**3 = nums[1]*nums[1]\n    #nums[2]**3 == nums[2]**3 = nums[2]**2*nums[2]\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num*num*num for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_nums = []\n    for num in nums:\n        new_nums.append(num ** 3)\n    return new_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    return map(lambda x: x ** 3, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(0, len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for x in nums:\n        new_list.append(x**3)\n    return new_list\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 2: \n        return 1\n    else: \n        return n + cal_sum(n - 1)\n    \nprint(cal_sum(4))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += i\n    print(result)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return (n**2 + n + 1) / 2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    while(n!=0):\n        sum+=n%10\n        n=n//10\n    return sum\n        \ndef factorial(n):\n    '''\n    Write a function factorial(n) to calculate n!\n    '''\n    fact=1\n    while(n!=0):\n        fact*=n\n        n-=1\n    return fact\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def perrin_sum(n):\n        if n == 1:\n            return 1\n        return n + perrin_sum(n - 1)\n    return perrin_sum(n)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    while n > 0:\n        result = result + n\n        n = n - 1\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Write your code below this line\n    s = 0\n    for x in range(1,n+1):\n        s += x\n    print(s)\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while (i+l <= len(str)):\n        s = str[i:i+l]\n        i += l\n        yield s\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[l:]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if(len(str) < l):\n        return str\n    else:\n        return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str.split(' ')[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    temp_list = []\n    if str == None:\n        return temp_list\n    if l == None:\n        return temp_list\n    if len(str) < l:\n        return temp_list\n    temp_list = str[0:l]\n    return temp_list\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return(list(map(lambda s: s[:l], str)))\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    while len(str)!= l:\n        str.pop()\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    st = \"\"\n    for i in range(l):\n        st += str[i]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = []\n    for i in range(l):\n        l.append(str)\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return (l[:l] )\n"
    }
]