[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # O(n)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [i for i in test_tup1 if i in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    i = 0\n    shared_elements = []\n    while i < len(test_tup1):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n        i += 1\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            common.append(test_tup1[i])\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # test_tup1 = (10, 5, 5, 20)\n    # test_tup2 = (1, 5, 1, 5, 5)\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    return test_set1.intersection(test_set2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n    \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    print(test_set1.intersection(test_set2))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_el = []\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    for el in test_tup1_set:\n        if el in test_tup2_set:\n            common_el.append(el)\n    return common_el\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==0 or n==1:\n        return False\n    for i in range(2, n//2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a python function to find prime factorization of a number.\n    '''\n    p = 2\n    while n % 2 == 0:\n        n = n//2\n        p = p*2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            n = n//i\n            p = p*i\n        else:\n            i = i + 1\n    if n!= 1:\n        p = p*n\n    return p\ndef main():\n    '''\n    Main function.\n    '''\n    print('\\nIs_not_prime:')\n    print('4 =>', is_not_prime(4))\n    print('1 =>', is_not_prime(1))\n    print('2 =>', is_not_prime(2))\n    print('3 =>', is_not_prime(3))\n    print('4.5 =>', is_not_prime(4.5))\n    print('1.5 =>', is_not_prime(1.5))\n    print('1.25 =>', is_not_prime(1.25))\n    print('2.25 =>', is_not_prime(2.25))\n    print('-4 =>', is_not_prime(-4))\n    print('-1 =>', is_not_prime(-1))\n    print('1.25 =>', is_not_prime(1.25))\n    print('2.0 =>', is_not_prime(2.0))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('0.25 =>', is_not_prime(0.25))\n    print('1.25 =>', is_not_prime(1.25))\n    print('1.5 =>', is_not_prime(1.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('1.5 =>', is_not_prime(1.5))\n    print('1.5 =>', is_not_prime(1.5))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('0 =>', is_not_prime(0))\n    print('-0 =>', is_not_prime(-0))\n    print('0 =>', is_not_prime(0))\n    print('-1 =>', is_not_prime(-1))\n    print('2 =>', is_not_prime(2))\n    print('-2 =>', is_not_prime(-2))\n    print('1.5 =>', is_not_prime(1.5))\n    print('1.5 =>', is_not_prime(1.5))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('0.25 =>', is_not_prime(0.25))\n    print('1.5 =>', is_not_prime(1.5))\n    print('-1.5 =>', is_not_prime(-1.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('1.5 =>', is_not_prime(1.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('1.5 =>', is_not_prime(1.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('-0.5 =>', is_not_prime(-0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', is_not_prime(0.5))\n    print('0.5 =>', i"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    import math\n    if n < 1:\n        print(\"Invalid input\")\n        return\n    # Iterate over 2 to sqrt(n)\n    for i in range(2, math.floor(math.sqrt(n))):\n        if n % i == 0:\n            print(\"False\")\n            return\n    print(\"True\")\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n > 2 and n % 2 == 0:\n        return False\n    max_divisor = math.ceil(math.sqrt(n))\n    for i in range(3, 1 + max_divisor, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if (n%i == 0):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef nth_root_of_number(n):\n    '''\n    Write a python function to find the nth root of number.\n    '''\n    return pow(n, 1/n)\ndef exponent(base, exponent):\n    '''\n    Write a python function to compute the exponent of two numbers.\n    '''\n    return pow(base, exponent)\ndef gcd(a,b):\n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    if a == 0:\n        return b\n    else:\n        return gcd(b%a,a)\ndef least_common_multiple(a,b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    return int(a*b/gcd(a,b))\ndef is_perfect_number(n):\n    '''\n    Write a python function to verify whether a number is perfect or not.\n    '''\n    sum_of_divisors = 0\n    for i in range(1,n):\n        if n%i == 0:\n            sum_of_divisors += i\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False\ndef is_prime_number(n):\n    '''\n    Write a python function to verify whether a number is prime or not.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef is_strong_number(n):\n    '''\n    Write a python function to verify whether a number is strong or not.\n    '''\n    count = 0\n    while n>0:\n        rem = n%10\n        count += int(rem/2)\n        n = int(n/10)\n    if count <= 3:\n        return True\n    else:\n        return False\ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    i = 2\n    count = 0\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    if count == 0:\n        return n\n    else:\n        return prime_factors(n/i) + 1\ndef reverse(n):\n    '''\n    Write a python function to reverse a number.\n    '''\n    n = list(str(n))\n    n.reverse()\n    return int(''.join(n))\ndef list_of_least_common_multiple(a,b,c):\n    '''\n    Write a python function to find the least common multiple of 3 numbers.\n    '''\n    lcm = a*b*c/gcd(a,b,c)\n    return lcm\ndef is_prime_number_in_list(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    for i in alist:\n        if n == i:\n            return True\n        else:\n            return False\ndef is_prime_number_in_list_v2(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    for i in range(len(alist)):\n        if n == alist[i]:\n            return True\n        else:\n            return False\ndef is_prime_number_in_list_v3(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    return n in alist\ndef is_prime_number_in_list_v4(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    return n in alist\ndef is_prime_number_in_list_v5(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    return n in alist\ndef is_prime_number_in_list_v6(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    if n in alist:\n        return True\n    else:\n        return False\ndef is_prime_number_in_list_v7(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    return n in alist\ndef is_prime_number_in_list_v8(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    if n in alist:\n        return True\n    else:\n        return False\ndef is_prime_number_in_list_v9(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    if n in alist:\n        return True\n    else:\n        return False\ndef is_prime_number_in_list_v10(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    return n in alist\ndef is_prime_number_in_list_v11(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    if n in alist:\n        return True\n    else:\n        return False\ndef is_prime_number_in_list_v12(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    if n in alist:\n        return True\n    else:\n        return False\ndef is_prime_number_in_list_v13(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    if n in alist:\n        return True\n    else:\n        return False\ndef is_prime_number_in_list_v14(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    return n in alist\ndef is_prime_number_in_list_v15(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    if n in alist:\n        return True\n    else:\n        return False\ndef is_prime_number_in_list_v16(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    return n in alist\ndef is_prime_number_in_list_v17(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    if n in alist:\n        return True\n    else:\n        return False\ndef is_prime_number_in_list_v18(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    return n in alist\ndef is_prime_number_in_list_v19(n,alist):\n    '''\n    Write a python function to verify whether a number is prime or not in a list of numbers.\n    '''\n    return n in alist\ndef is_prime_number_in_list_v20(n,alist):\n    ''"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return ans\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,-nums[i])\n    return ans\ndef heap_queue_largest_reverse(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return ans\ndef heap_queue_smallest_reverse(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,-nums[i])\n    return ans\ndef heap_queue_largest_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,-ans))\ndef heap_queue_largest_min(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nsmallest(n,ans))\ndef heap_queue_largest_max_min(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))\ndef heap_queue_largest_max_min_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))\ndef heap_queue_largest_max_min_max_reverse(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))\ndef heap_queue_largest_max_min_max_reverse_min(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nsmallest(n,ans))\ndef heap_queue_largest_max_min_max_reverse_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))\ndef heap_queue_largest_max_min_max_reverse_min_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nsmallest(n,ans))\ndef heap_queue_largest_max_min_max_reverse_min_max_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))\ndef heap_queue_largest_max_min_max_reverse_min_max_max_reverse(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))\ndef heap_queue_largest_max_min_max_reverse_min_max_max_reverse_min(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))\ndef heap_queue_largest_max_min_max_reverse_min_max_max_reverse_min_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))\ndef heap_queue_largest_max_min_max_reverse_min_max_max_reverse_min_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in ascending order.\n    '''\n    ans=[]\n    for i in range(n):\n        hq.heappush(ans,nums[i])\n    return list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))+list(hq.nsmallest(n,ans))+list(hq.nlargest(n,ans))+lis"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    l=len(nums)\n    if l<n:\n        n=l\n    res=[]\n    hq.heapify(nums)\n    for _ in range(n):\n        res.append(hq.heappop(nums))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    if len(nums) <= n:\n        return nums\n    return hq.nlargest(n, nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    print(f'n: {n}')\n    print(f'{nums}')\n    hq.heapify(nums)\n    print(f'{nums}')\n    lst = []\n    for i in range(n):\n        print(f'{i}')\n        lst.append(hq.heappop(nums))\n    return lst\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for num in nums:\n        hq.heappush(h,num)\n    res = []\n    for i in range(n):\n        res.append(hq.heappop(h))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    ret = []\n    for i in range(n):\n        ret.append(hq.heappop(nums))\n    return ret\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) == 0 or n == 0:\n        return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        print(\"Invalid size\")\n        return\n    heap = []\n    for i in nums:\n        if len(heap) < n:\n            hq.heappush(heap,i)\n        else:\n            if i > heap[0]:\n                hq.heappushpop(heap,i)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    '''\n    use heapq\n    '''\n    sorted_nums = sorted(nums, reverse=True)\n    heapq.heapify(sorted_nums)\n    if n>len(sorted_nums):\n        return sorted_nums\n    while len(sorted_nums)>n:\n        heapq.heappop(sorted_nums)\n    return sorted_nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n,len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 2 or x == 4 or x == 8 or x == 16 or x == 32 or x == 64 or x == 128 or x == 256 or x == 512 or x == 1024 or x == 2048 or x == 4096 or x == 8192 or x == 16384 or x == 32768 or x == 65536 or x == 131072 or x == 262144 or x == 524288 or x == 1048576 or x == 2097152 or x == 4194304 or x == 8388608 or x == 16777216 or x == 33554432 or x == 67108864 or x == 134217728 or x == 268435456 or x == 536870912 or x == 1073741824 or x == 2147483648):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    while x > 0:\n        if x & 1!= 0:\n            return False\n        x >>= 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x>1):\n        if(x%2==0):\n            x=x/2\n        else:\n            x=x*3+1\n    if x==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if x == 0:\n        return False\n    \n    while x!= 1:\n        if x % 2 == 0:\n            x = x / 2\n        else:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    result = 1\n    while x>result:\n        if x == result:\n            return True\n        else:\n            result = result<<1\n    if x == result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x % 2 == 0:\n        x = x // 2\n    return True\nprint(is_Power_Of_Two(13))\nprint(is_Power_Of_Two(16))\nprint(is_Power_Of_Two(81))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power_of_two = 1\n    while power_of_two <= x:\n        power_of_two = power_of_two*2\n    if power_of_two == x:\n        return True\n    return False\nprint(is_Power_Of_Two(5))\nprint(is_Power_Of_Two(6))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        x >>= 1\n        return x == 1\n        \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    \n    i = 1\n    while (x % 2 == 0): \n        x /= 2\n        i += 1\n    if x == 1: \n        return True\n    \n    return False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    ans = re.findall(r'\\w{4,}',text)\n    return ans\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_of_words = re.split(' ', text)\n    list_of_words = list(filter(lambda word: len(word) > 3, list_of_words))\n    return list_of_words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w{4}\\b',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    lst_words = re.findall(r'\\b[A-Za-z]{4,}', text)\n    print(lst_words)\n    return lst_words\n    \n    \ndef find_num_long(text):\n    '''\n    Write a function to find all digits which are at least 4 characters long in a string.\n    '''\n    lst_num = re.findall(r'\\d{4,}', text)\n    print(lst_num)\n    return lst_num\n    \ndef find_low_up(text):\n    '''\n    Write a function to find all words in a string which starts with either a lowercase or an uppercase letter.\n    '''\n    lst_low_up = re.findall(r'[A-Z]{2,}[a-z]+', text)\n    print(lst_low_up)\n    return lst_low_up\n    \ndef find_not_blank(text):\n    '''\n    Write a function to find all words in a string which doesn\u2019t start with a space.\n    '''\n    lst_not_blank = re.findall(r'\\b[^ ]+', text)\n    print(lst_not_blank)\n    return lst_not_blank\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    for word in text.split():\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z ]{4,}'\n    return len(re.findall(pattern,text))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words=re.findall('\\w+',text)\n    print(words)\n    return [word for word in words if len(word)>=4]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for i in range(len(text)):\n        word = text[i]\n        if len(word) > 3:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r\"[a-zA-Z ]{4,}\", text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(r'\\w*[\\w\\s]*[\\w\\s]*')\n    return regex.findall(text)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return nums**2\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for n in nums:\n        print(n * n)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return nums * nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for x in nums:\n        squares.append(x**2)\n    return squares\nprint(square_nums([1,2,3,4,5,6]))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # time complexity: O(n)\n    # space complexity: O(n)\n    if len(str) < 2:\n        return 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            return 0\n    return 1 + find_Rotations(str[1:-1])\n    \ndef find_Rotations_2(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # time complexity: O(n)\n    # space complexity: O(n)\n    if len(str) < 2:\n        return 0\n    c = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            c += 1\n        if c > 2:\n            return 0\n    return c + find_Rotations_2(str[1:-1])\n    \nif __name__ == \"__main__\":\n    print(find_Rotations(\"abc\"))\n    print(find_Rotations_2(\"abc\"))\n    \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Write your code here\n    min_rotation = 0\n    if len(str) == 0:\n        return min_rotation\n    \n    # initialize the array\n    index = 0\n    for i in range(len(str)):\n        if i < len(str)-1:\n            if str[i]!= str[index]:\n                index += 1\n    \n    min_rotation = index\n    \n    return min_rotation\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    max_index = len(str)-1\n    rotations = 0\n    while max_index >= 0:\n        if str[max_index]!= str[max_index-1]:\n            rotations += 1\n            max_index -= 1\n        else:\n            max_index -= 1\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Decide whether str is palindrome or not.\n    if str == str[::-1]:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = 0\n    i = 0\n    while i<n:\n        left = str[i]\n        j = i+1\n        while j<n:\n            if str[j]!=left:\n                break\n            j+=1\n        if j==n:\n            return rotations\n        right = str[j]\n        if left!=right:\n            break\n        i+=1\n        rotations+=1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    if len(str)==1:\n        return 0\n    \n    for i in range(1,len(str)):\n        new_str=str[i:]+str[:i]\n        if new_str==str:\n            return len(str)-i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    if l==0:\n        return 0\n    elif l==1:\n        return -1\n    else:\n        flag = 0\n        for i in range(l):\n            if str[i]!=str[0]:\n                flag = 1\n                break\n        if flag==0:\n            return -1\n        else:\n            rotations = l-1\n            # print(rotations)\n            for i in range(l-1):\n                if str[i+1]!=str[i]:\n                    rotations = rotations-1\n            return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def get_count(str):\n        arr = list(str)\n        arr.sort()\n        return arr\n    def r(s):\n        if not s:\n            return 0\n        count = 0\n        for i in range(len(s)-1):\n            if s[i] > s[i+1]:\n                count += 1\n        return count\n    if len(str) == 1:\n        return 0\n    a = get_count(str)\n    b = get_count(str[::-1])\n    if r(a) == r(b):\n        return -1\n    return len(str)-b\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    arr=[]\n    #Creating a list of all the rotations of the string.\n    for i in range(len(str)+1):\n        sub_arr=[]\n        for j in range(len(str)+1):\n            if str[j]==str[len(str)-i]:\n                sub_arr.append(str[j])\n        arr.append(sub_arr)\n    print(arr)\n    #Finding the minimum number of rotations needed.\n    count=len(str)\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if(arr[i][j]==str[0]):\n                count=count-1\n    return count\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        for i in range(0,len(s)):\n            if s[i]==ch:\n                s=s[:i]+s[i+1:]\n                break\n            else:\n                continue\n    return s\ndef remove_nOcc(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        for i in range(0,n):\n            if s[i]==ch:\n                s=s[:i]+s[i+1:]\n                break\n            else:\n                continue\n    return s\ndef remove_Occ_1(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        for i in range(0,len(s)):\n            if s[i]==ch:\n                continue\n            else:\n                break\n    return s[i:]\ndef remove_nOcc_1(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        for i in range(0,n):\n            if s[i]==ch:\n                continue\n            else:\n                break\n    return s[i:]\ndef remove_Occ_2(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            return s[1:]\n        else:\n            return s\ndef remove_nOcc_2(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            return s[1:n]\n        else:\n            return s\ndef remove_Occ_3(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            return s[1:]\n        else:\n            return s\ndef remove_nOcc_3(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            return s[1:n]\n        else:\n            return s\ndef remove_Occ_4(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            return s[1:]\n        else:\n            return s\ndef remove_nOcc_4(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            return s[1:n]\n        else:\n            return s\ndef remove_Occ_5(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        for i in range(0,len(s)):\n            if s[i]==ch:\n                s=s[:i]+s[i+1:]\n                break\n            else:\n                continue\n    return s\ndef remove_nOcc_5(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        for i in range(0,n):\n            if s[i]==ch:\n                s=s[:i]+s[i+1:]\n                break\n            else:\n                continue\n    return s\ndef remove_Occ_6(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            for i in range(0,len(s)):\n                if s[i]==ch:\n                    s=s[:i]+s[i+1:]\n                    break\n                else:\n                    continue\n    return s\ndef remove_nOcc_6(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            for i in range(0,n):\n                if s[i]==ch:\n                    s=s[:i]+s[i+1:]\n                    break\n                else:\n                    continue\n    return s\ndef remove_Occ_7(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        for i in range(0,len(s)):\n            if s[i]==ch:\n                s=s[:i]+s[i+1:]\n                break\n            else:\n                continue\n    return s\ndef remove_nOcc_7(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        for i in range(0,n):\n            if s[i]==ch:\n                s=s[:i]+s[i+1:]\n                break\n            else:\n                continue\n    return s\ndef remove_Occ_8(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            for i in range(0,len(s)):\n                if s[i]==ch:\n                    continue\n                else:\n                    break\n    return s\ndef remove_nOcc_8(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            for i in range(0,n):\n                if s[i]==ch:\n                    continue\n                else:\n                    break\n    return s\ndef remove_Occ_9(s,ch): \n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            for i in range(0,len(s)):\n                if s[i]==ch:\n                    s=s[1:]\n                    break\n                else:\n                    continue\n    return s\ndef remove_nOcc_9(s,ch,n): \n    '''\n    Write a python function to remove first n occurrences of a given character from the string.\n    '''\n    if len(s)==0:\n        print(\"\")\n    else:\n        if s[0]==ch:\n            for i in range(0,n):\n                if s[i]==ch:\n                    s"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', 1)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\ndef check_for_Palindrome(s): \n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    if(s == s[::-1]):\n        return True\n    else:\n        return False\ndef find_Anagram(s,t): \n    '''\n    Write a python function to check if two given strings are anagram or not.\n    '''\n    return sorted(s)==sorted(t)\ndef find_Anagram_v2(s,t): \n    '''\n    Write a python function to check if two given strings are anagram or not.\n    '''\n    return True if sorted(s)==sorted(t) else False\ndef find_Anagram_v3(s,t): \n    '''\n    Write a python function to check if two given strings are anagram or not.\n    '''\n    cnt=0\n    for i in range(0,len(s)):\n        if(s[i]!=t[i]):\n            cnt+=1\n    return cnt==1\ndef length_of_longest_substring(s): \n    '''\n    Write a python function to find the length of the longest substring without repeating characters.\n    '''\n    cnt=0\n    t=s\n    l=len(s)\n    for i in range(0,l):\n        for j in range(i+1,l+1):\n            if(s[i:j] not in t):\n                t=s[i:j]\n            else:\n                break\n        if(cnt<len(t)):\n            cnt=len(t)\n    return cnt\ndef length_of_longest_substring_v2(s): \n    '''\n    Write a python function to find the length of the longest substring without repeating characters.\n    '''\n    cnt=0\n    t=s\n    l=len(s)\n    for i in range(0,l):\n        for j in range(i+1,l+1):\n            if(s[i:j] not in t):\n                t=s[i:j]\n            else:\n                break\n        if(cnt<len(t)):\n            cnt=len(t)\n    return cnt\ndef length_of_longest_substring_v3(s): \n    '''\n    Write a python function to find the length of the longest substring without repeating characters.\n    '''\n    cnt=0\n    t=s\n    l=len(s)\n    s=list(s)\n    for i in range(0,l):\n        for j in range(i+1,l+1):\n            if(s[i:j] not in t):\n                t=s[i:j]\n            else:\n                break\n        if(cnt<len(t)):\n            cnt=len(t)\n    return cnt\ndef length_of_longest_substring_v4(s): \n    '''\n    Write a python function to find the length of the longest substring without repeating characters.\n    '''\n    cnt=0\n    t=s\n    l=len(s)\n    s=list(s)\n    for i in range(0,l):\n        for j in range(i+1,l+1):\n            if(s[i:j] not in t):\n                t=s[i:j]\n            else:\n                break\n        if(cnt<len(t)):\n            cnt=len(t)\n    return cnt\ndef length_of_longest_substring_v5(s): \n    '''\n    Write a python function to find the length of the longest substring without repeating characters.\n    '''\n    cnt=0\n    t=s\n    l=len(s)\n    s=list(s)\n    for i in range(0,l):\n        for j in range(i+1,l+1):\n            if(s[i:j] not in t):\n                t=s[i:j]\n            else:\n                break\n        if(cnt<len(t)):\n            cnt=len(t)\n    return cnt\ndef length_of_longest_substring_v6(s): \n    '''\n    Write a python function to find the length of the longest substring without repeating characters.\n    '''\n    cnt=0\n    t=s\n    l=len(s)\n    s=list(s)\n    for i in range(0,l):\n        for j in range(i+1,l+1):\n            if(s[i:j] not in t):\n                t=s[i:j]\n            else:\n                break\n        if(cnt<len(t)):\n            cnt=len(t)\n    return cnt\ndef find_all_anagrams(s,p): \n    '''\n    Write a python function to find all the positions (starting index) of all the anagrams of a pattern in a given string.\n    '''\n    return [i for i in range(len(s)-len(p)+1) if sorted(s[i:i+len(p)])==sorted(p)]\ndef find_all_anagrams_v2(s,p): \n    '''\n    Write a python function to find all the positions (starting index) of all the anagrams of a pattern in a given string.\n    '''\n    return [i for i in range(len(s)-len(p)+1) if sorted(s[i:i+len(p)])==sorted(p)]\ndef find_all_anagrams_v3(s,p): \n    '''\n    Write a python function to find all the positions (starting index) of all the anagrams of a pattern in a given string.\n    '''\n    return [i for i in range(len(s)-len(p)+1) if sorted(s[i:i+len(p)])==sorted(p)]\ndef find_all_anagrams_v4(s,p): \n    '''\n    Write a python function to find all the positions (starting index) of all the anagrams of a pattern in a given string.\n    '''\n    return [i for i in range(len(s)-len(p)+1) if sorted(s[i:i+len(p)])==sorted(p)]\ndef find_all_anagrams_v5(s,p): \n    '''\n    Write a python function to find all the positions (starting index) of all the anagrams of a pattern in a given string.\n    '''\n    return [i for i in range(len(s)-len(p)+1) if sorted(s[i:i+len(p)])==sorted(p)]\ndef find_all_anagrams_v6(s,p): \n    '''\n    Write a python function to find all the positions (starting index) of all the anagrams of a pattern in a given string.\n    '''\n    return [i for i in range(len(s)-len(p)+1) if sorted(s[i:i+len(p)])==sorted(p)]\ndef find_all_anagrams_v7(s,p): \n    '''\n    Write a python function to find all the positions (starting index) of all the anagrams of a pattern in a given string.\n    '''\n    return [i for i in range(len(s)-len(p)+1) if sorted(s[i:i+len(p)])==sorted(p)]\ndef find_all_anagrams_v8(s,p): \n    '''\n    Write a python function to find all the positions (starting index) of all the anagrams of a pattern in a given string.\n    '''\n    return [i for i in range(len(s)-len(p)+1) if sorted(s[i:i+len(p)])==sorted(p)]\ndef find_all_anagrams_v9(s,p): \n    '''\n    Write a python function to find all the positions (starting index) of all the anagrams of a pattern in a given string.\n    '''\n    return [i for i in range(len("
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\").replace(ch,\"\")"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s == \"\":\n        return \"\"\n    else:\n        first_occ = s.find(ch)\n        if first_occ == -1:\n            return s[0:0]\n        else:\n            return s[first_occ+1:len(s)-1]\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    str = s\n    cnt = 0\n    while cnt < len(str):\n        if str[cnt] == ch:\n            str = str[:cnt] + str[cnt+1:]\n            cnt = 0\n        else:\n            cnt += 1\n    return str\n    \ndef check_palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        print(\"String is a palindrome\")\n    else:\n        print(\"String is not a palindrome\")\n        \ndef reverse(s):\n    '''\n    Write a python function to reverse the string.\n    '''\n    return s[::-1]\n    \ndef is_same_tree(p,q):\n    '''\n    Write a python function to check whether trees p and q are same or not.\n    '''\n    if p == q:\n        print(\"Trees are same\")\n    else:\n        print(\"Trees are not same\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = s.count(ch)\n    if occ == 1:\n        s = s.replace(ch,'')\n    else:\n        s = s.replace(ch,'')\n        s = s.replace(ch,'')\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #initialize matrix to hold result matrix\n    res = [[0 for j in range(len(M))] for i in range(len(M))]\n    for i in range(len(M)):\n        #set current sum to 0\n        curr_sum = 0\n        #traverse matrix\n        for j in range(len(M)):\n            curr_sum += M[i][j]\n            #if current sum is larger than current max, update max\n            if curr_sum > res[i][j]:\n                res[i][j] = curr_sum\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M[0] = sorted(M[0])\n    for i in range(1, len(M)):\n        M[i] = sorted(M[i], key=sum)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_list = []\n    # Time O(m*n) | Space O(n)\n    n = len(M)\n    m = len(M[0])\n    for i in range(n):\n        sum_list.append(sum(M[i]))\n    sum_list.sort()\n    count = 0\n    while count < m and sum_list[count] == 0:\n        count += 1\n    for i in range(count,n):\n        for j in range(m):\n            if M[i][j]!= 0:\n                temp = M[i].copy()\n                M[i][j] = 0\n                while sum_list[count]!= 0:\n                    sum_list.pop(count)\n                    count -= 1\n                M[count] = temp\n                count += 1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sort_r(row):\n        row.sort()\n        return row\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return [[M[i][j] for j in range(len(M))] for i in range(len(M))]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda x: sum(x))\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    mat = copy.deepcopy(M)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m,n = M.shape\n    L = []\n    for i in range(m):\n        L.append([M[i,j] for j in range(n)])\n    for i in range(1,m):\n        for j in range(0,n):\n            L[i][j] = L[i][j] + L[i-1][j]\n    return np.array([[M[i,j] for j in range(n)] for i in range(m)])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    num_rows, num_cols = len(M), len(M[0])\n    for row in range(num_rows):\n        tot = 0\n        for col in range(num_cols):\n            tot += M[row][col]\n        M[row] = sorted(M[row], reverse=True, key=lambda x: x)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # largest first\n    for i in range(len(M)):\n        s = 0\n        for j in range(len(M)):\n            s += M[i][j]\n        M[i].append(s)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n    #Sample Input          \n    #3.0\n    #5.0\n    #7.0\n    #Sample Output          \n    #4.0\n    "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l == 0 or b == 0 or h == 0:\n        return 0\n    else:\n        if b > h:\n            b = h\n    V = (1/3)*l*b*h\n    return V\nprint('Volume of a triangular prism:')\nprint(find_Volume(l = int(input('Enter length: ')),b = int(input('Enter breadth: ')),h = int(input('Enter height: '))))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*h*b)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    try :\n        ans = (l * h * b)/3\n    except ZeroDivisionError:\n        print(\"Error! You can't have a cube with 0 side.\")\n    else :\n        return ans\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    s=float(l*b*h)\n    print(s)\n    return s\n    \ndef find_Area(l,b,h):\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    area=float(0.5*l*b)\n    print(area)\n    return area\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l * h) / 2\n    volume = (area * b)\n    print(volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    from math import sqrt \n    b = float(b)\n    h = float(h)\n    l = float(l)\n    \n    volume = (l * h)/3\n    \n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l + b + h\n    return a*b*h/3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(\"[a-z]+_[a-z]*\", text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'\\w+$', text.lower())\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    result = pattern.findall(text)\n    print(bool(result))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in re.findall('[a-z]+_[a-z]*',text):\n        if len(i)>=3:\n            return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[_]+[a-z]+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not text or not isinstance(text,str):\n        return False\n    pattern = re.compile(r'([a-z]|\\d)_+')\n    if pattern.findall(text)!= []:\n        return True\n    else:\n        return False\n    \nprint('\\n1',text_lowercase_underscore(\"abc_def_ghi\"))\nprint('\\n2',text_lowercase_underscore(\"abc_123def_ghi\"))\nprint('\\n3',text_lowercase_underscore(\"abc_1_def_ghi\"))\nprint('\\n4',text_lowercase_underscore(\"abc_def_ghi_jkl\"))\nprint('\\n5',text_lowercase_underscore(\"abc_def_gh_jkl\"))\nprint('\\n6',text_lowercase_underscore(\"abc_def_gh_jkl_mno\"))\nprint('\\n7',text_lowercase_underscore(\"abc_def_gh_jklmno_pqr\"))\nprint('\\n8',text_lowercase_underscore(\"abc_def_gh_jklmno_pqr_tuv\"))\nprint('\\n9',text_lowercase_underscore(\"abc_def_gh_jklmno_pqr_tuv_wxyz\"))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r\"[a-z]+_[a-z]+\")\n    if pattern.findall(text):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.compile('^[a-zA-Z_]+$')\n    return result.match(text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    text = re.sub('[^a-z]', '', text)\n    text = re.sub('_', '', text)\n    return text\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if isinstance(a,(int, float)) and a >= 0:\n        perimeter = 4 * a\n        return f'The square perimter is {perimeter}'\n    else:\n        return 'ERROR: Invalid side length'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n    \ndef sine_wave(x, n):\n    '''\n    Write a function that returns the value of the sine function of the x\n    value of the x axis, and the n, n-th terms of the series.\n    '''\n    return (math.sin(x) + math.sin(2 * x) + math.sin(3 * x)) / 3\n    \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of n, that is the product of the integers from 1 to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a positive integer n.\n    '''\n    total = 0\n    while n!= 0:\n        total += n % 10\n        n = n // 10\n    return total\n    \ndef calculate_lcm(a, b):\n    '''\n    Write a function that calculates the least common multiple of a and b.\n    '''\n    return a * b // math.gcd(a, b)\n    \ndef fibonacci(n):\n    '''\n    Write a function that returns the nth fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef is_palin(string):\n    '''\n    Write a function that returns True if and only if the given string is a palindrome.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a positive integer n.\n    '''\n    total = 0\n    while n!= 0:\n        total += n % 10\n        n = n // 10\n    return total\n    \ndef reverse(n):\n    '''\n    Write a function that returns the reversed of the number n.\n    '''\n    str_num = str(n)\n    num = list(str_num)\n    num.reverse()\n    return int(''.join(num))\n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if and only if the given number n is a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef find_unique_elements(nums):\n    '''\n    Write a function that returns the number of unique elements in the given list.\n    '''\n    nums_set = set(nums)\n    return len(nums_set)\n    \ndef reverse_number(n):\n    '''\n    Write a function that reverses the number n.\n    '''\n    reversed_number = 0\n    while n!= 0:\n        reversed_number = (reversed_number * 10) + (n % 10)\n        n = n // 10\n    return reversed_number\n    \ndef is_prime_triangular(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and triangular.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n            \ndef is_prime_circular(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and circular.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef is_prime_pentagonal(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and pentagonal.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n            \ndef is_prime_hexagonal(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and hexagonal.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef is_prime_heptagonal(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and heptagonal.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef is_prime_octagonal(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and octagonal.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef is_prime_kite(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and kite.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef is_prime_sum_of_kites(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and sum of kites.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef is_prime_square_root(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and square root.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef is_prime_root(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and root.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef is_prime_quadratic(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and quadratic.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n            \ndef is_prime_cubic(n):\n    '''\n    Write a function that returns True if and only if the given number n is prime and cubic.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**(1/2))):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    \ndef is_prime_quartic(n):\n    '''\n    Write a function that returns True i"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # print(\"square_perimeter was called\")\n    # return 4 * a\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"Invalid input: a must be int or float\")\n    return 4 * a\n    \ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    # print(\"square_area was called\")\n    # return a ** 2\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"Invalid input: a must be int or float\")\n    return a ** 2\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = []\n    for i in range(len(string)):\n        if string[i] not in string[i+1:]:\n            l1.append(string[i])\n    return l1\ndef printList(list): \n    for i in list:\n        print(i, end = \" \")\nif __name__ == \"__main__\": \n    string = input(\"Enter the String : \")\n    l1 = str_to_list(string)\n    printList(l1)"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [i for i in string if i in string[:string.index(i)]]\n    return char_list\ndef common_chars(str1, str2): \n    '''\n    Write a function to count the frequency of characters in a string.\n    '''\n    char_freq = {}\n    for i in str1:\n        if i in char_freq:\n            char_freq[i] += 1\n        else:\n            char_freq[i] = 1\n    for i in str2:\n        if i in char_freq:\n            char_freq[i] -= 1\n        else:\n            char_freq[i] = -1\n    for i in char_freq.values():\n        if i!= -1:\n            return \"NO\"\n    return \"YES\"\nif __name__ == '__main__':\n    str1 = input()\n    str2 = input()\n    if len(str1) > len(str2):\n        longer_string = str1\n        shorter_string = str2\n    else:\n        longer_string = str2\n        shorter_string = str1\n    \n    print(common_chars(str1, str2))\n    print(common_chars(shorter_string, longer_string))\n    print(common_chars(longer_string, shorter_string))\n    print(common_chars(str1, shorter_string))\n    print(common_chars(shorter_string, str1))\n    print(common_chars(longer_string, str1))\n    print(common_chars(shorter_string, str2))\n    print(common_chars(str1, str2))"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1=list(string)\n    l2=list(string)\n    string=\"\".join(set(l2)-set(l1))\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for ch in string:\n        if ch in string:\n            char_list.remove(ch)\n    return ''.join(char_list)\n        \n    \ndef main():\n    test_str = 'aaabcdcd'\n    test_str1 = 'abcdabcd'\n    print(str_to_list(test_str))\n    print(str_to_list(test_str1))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    input_string = string \n    input_string = input_string.replace('j','q')\n    input_string = input_string.replace('e','a')\n    input_string = input_string.replace('l','m')\n    input_string = input_string.replace('s','t')\n    input_string = input_string.replace('a','f')\n    input_string = input_string.replace('n','b')\n    input_string = input_string.replace('y','c')\n    input_string = input_string.replace('z','r')\n    input_string = input_string.replace('i','o')\n    input_string = input_string.replace('u','u')\n    input_string = input_string.replace('c','t')\n    input_string = input_string.replace('p','d')\n    input_string = input_string.replace('o','g')\n    input_string = input_string.replace('m','j')\n    input_string = input_string.replace('k','i')\n    input_string = input_string.replace('b','l')\n    input_string = input_string.replace('f','n')\n    input_string = input_string.replace('t','s')\n    input_string = input_string.replace('s','q')\n    input_string = input_string.replace('w','h')\n    input_string = input_string.replace('h','n')\n    input_string = input_string.replace('r','l')\n    input_string = input_string.replace('d','v')\n    input_string = input_string.replace('v','p')\n    input_string = input_string.replace('g','m')\n    input_string = input_string.replace('n','k')\n    input_string = input_string.replace('p','b')\n    input_string = input_string.replace('q','u')\n    input_string = input_string.replace('q','m')\n    input_string = input_string.replace('u','e')\n    input_string = input_string.replace('r','c')\n    input_string = input_string.replace('d','k')\n    input_string = input_string.replace('f','d')\n    input_string = input_string.replace('r','f')\n    input_string = input_string.replace('d','s')\n    input_string = input_string.replace('r','i')\n    input_string = input_string.replace('c','n')\n    input_string = input_string.replace('a','l')\n    input_string = input_string.replace('l','i')\n    input_string = input_string.replace('i','b')\n    input_string = input_string.replace('p','n')\n    input_string = input_string.replace('p','c')\n    input_string = input_string.replace('s','k')\n    input_string = input_string.replace('k','p')\n    input_string = input_string.replace('n','c')\n    input_string = input_string.replace('j','i')\n    input_string = input_string.replace('h','p')\n    input_string = input_string.replace('a','f')\n    input_string = input_string.replace('c','u')\n    input_string = input_string.replace('l','t')\n    input_string = input_string.replace('o','w')\n    input_string = input_string.replace('o','e')\n    input_string = input_string.replace('k','r')\n    input_string = input_string.replace('n','v')\n    input_string = input_string.replace('h','d')\n    input_string = input_string.replace('b','s')\n    input_string = input_string.replace('m','c')\n    input_string = input_string.replace('t','r')\n    input_string = input_string.replace('b','j')\n    input_string = input_string.replace('s','f')\n    input_string = input_string.replace('c','k')\n    input_string = input_string.replace('b','n')\n    input_string = input_string.replace('n','m')\n    input_string = input_string.replace('u','p')\n    input_string = input_string.replace('v','p')\n    input_string = input_string.replace('p','t')\n    input_string = input_string.replace('p','r')\n    input_string = input_string.replace('r','q')\n    input_string = input_string.replace('n','m')\n    input_string = input_string.replace('d','r')\n    input_string = input_string.replace('d','j')\n    input_string = input_string.replace('r','d')\n    input_string = input_string.replace('n','c')\n    input_string = input_string.replace('l','r')\n    input_string = input_string.replace('m','k')\n    input_string = input_string.replace('o','v')\n    input_string = input_string.replace('r','n')\n    input_string = input_string.replace('v','n')\n    input_string = input_string.replace('p','l')\n    input_string = input_string.replace('l','q')\n    input_string = input_string.replace('j','t')\n    input_string = input_string.replace('h','i')\n    input_string = input_string.replace('k','t')\n    input_string = input_string.replace('i','p')\n    input_string = input_string.replace('m','g')\n    input_string = input_string.replace('g','f')\n    input_string = input_string.replace('p','q')\n    input_string = input_string.replace('p','v')\n    input_string = input_string.replace('i','f')\n    input_string = input_string.replace('q','a')\n    input_string = input_string.replace('g','r')\n    input_string = input_string.replace('i','r')\n    input_string = input_string.replace('j','z')\n    input_string = input_string.replace('j','b')\n    input_string = input_string.replace('a','p')\n    input_string = input_string.replace('z','h')\n    input_string = input_string.replace('z','l')\n    input_string = input_string.replace('b','h')\n    input_string = input_string.replace('c','z')\n    input_string = input_string.replace('h','l')\n    input_string = input_string.replace('z','n')\n    input_string = input_string.replace('r','j')\n    input_string = input_string.replace('b','n')\n    input_string = input_string.replace('z','j')\n    input_string = input_string.replace('l','i')\n    input_string = input_string.replace('n','m')\n    input_string = input_string.replace('h','i')\n    input_string = input_string.replace('i','r')\n    input_string = input_string.replace('k','i')\n    input_string = input_string.replace('b','m')\n    input_string = input_string.replace('l','m')\n    input_string = input_string.replace('l','n')\n    input_string = input_string.replace('l','i')\n    input_string = input_string.replace('l','k')\n    input_string = input_string.replace('i','p')\n    input_string = input_string.replace('l','q')\n    input_string = input_string.replace('h','n')\n    input_string = input_string.replace('m','q')\n    input_string = input_string.replace('i','m')\n    input_string = input_string.replace('i','n')\n    input_string = input_string.replace('i','l')\n    input_string = input_string.replace('m','p')\n    input_string = input_string.replace('l','m')\n    input_string = input_string.replace('p','l')\n    input_string = inpu"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string\n    string2 = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    \n    #new_string = string.strip()\n    \n    #if (string1.strip()==string2):\n    #    return string\n    \n    \n    #if (string1.strip()==string2):\n    #    return string\n    \n    if (string1.strip()==string2):\n        return string\n        \n    \n    #new_string = \" \".join(string.strip().split(\" \")[1:])\n    #new_string = new_string.strip()\n    \n    if (string1.strip()==string2):\n        return string\n    \n    \n    #return string.strip().split(\" \")[1:]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string) \n    list2 = list(string)\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    print(list1)\n    return ''.join(list1)\n    \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    \n    for i in range(256): \n        char_list.append(0) \n    \n    for i in range(len(string)): \n        char_list[ord(string[i])] = 1\n    \n    result = []\n    \n    for i in range(256): \n        if(char_list[i]!= 0): \n            result.append(chr(i))\n    \n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list(string)\n    for i in string:\n        if i in list2:\n            list1.remove(i)\n            list2.remove(i)\n    print(\"\".join(list1))\n    print(list2)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output_list = []\n    for i in range(0,len(string)):\n        if string[i] not in output_list:\n            output_list.append(string[i])\n    return output_list\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    i = 0\n    while i < len(arraynums):\n        if arraynums[i] == arraynums[i + 1]:\n            return True\n        i += 2\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            print(\"There is a duplicate element in the array!\")\n            return True\n    print(\"No duplicate element in the array!\")\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n    \ndef test_check_if_nums_are_sorted_with_key(arraynums):\n    '''\n    Write a function to check if a given array of integers is sorted with the\n    key parameter.\n    '''\n    \n    for i in range(len(arraynums)-1):\n        if arraynums[i+1] < arraynums[i]:\n            return False\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    check = False\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                check = True\n    return check\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = set(arraynums)\n    if len(nums) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    #initialize the dictionary\n    hashmap = {}\n    for element in arraynums:\n        if element in hashmap:\n            return True\n        else:\n            hashmap[element] = True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    \n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # a simple solution is to use a set to store the numbers\n    # if the set is not empty, it will return true\n    if len(set(arraynums))!= len(arraynums):\n        return True\n    \n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(nums == nums[i + 1] for i, nums in enumerate(arraynums[:-1]))\n    \n    \ndef test_find_duplicate_values(arraynums):\n    '''\n    Write a function to find the first duplicate element in a singly linked list. Return -1 if no duplicates are found.\n    '''\n    current = arraynums\n    while current:\n        if current.val == current.next.val:\n            return current.val\n        current = current.next\n    return -1\n    \n    \ndef test_find_middle_of_linked_list(ll):\n    '''\n    Write a function that returns the middle element of a singly linked list.\n    '''\n    if ll == None or ll.next == None:\n        return ll\n    prev = ll\n    current = prev.next\n    while current:\n        if current == prev.next:\n            return prev.next\n        prev = prev.next\n        current = current.next\n        \n    return -1\n    \n    \ndef test_is_palindrome(word):\n    '''\n    Write a function to check if a given word is a palindrome. A palindrome is a word that reads the same backward as forward.\n    '''\n    return word == word[::-1]\n    \n    \ndef test_search(linkedlist, value):\n    '''\n    Write a function to search a given value in a singly linked list. The function should return a boolean value.\n    '''\n    if linkedlist == None:\n        return False\n    if linkedlist.val == value:\n        return True\n    return linkedlist.val == value or test_search(linkedlist.next, value)\n    \n    \ndef test_insert_after(linkedlist, value):\n    '''\n    Write a function to insert a node after a given node in a singly linked list.\n    '''\n    current = linkedlist\n    while current:\n        if current.val == value:\n            break\n        current = current.next\n    \n    if not current:\n        return linkedlist\n    \n    nextnode = current.next\n    current.next = Node(value, nextnode)\n    return linkedlist\n    \n    \ndef test_delete_node(linkedlist, value):\n    '''\n    Write a function to delete a node from a singly linked list. The node to be deleted is not given, the head node is given and it is assumed that it is not the node to be deleted.\n    '''\n    if linkedlist == None:\n        return None\n    if linkedlist.val == value:\n        return linkedlist.next\n    \n    current = linkedlist\n    while current:\n        if current.val == value:\n            break\n        current = current.next\n    \n    if not current:\n        return linkedlist\n    \n    current.next = current.next.next\n    return linkedlist\n    \n    \ndef test_delete_node_recursive(linkedlist, value):\n    '''\n    Write a function to delete a node from a singly linked list. The node to be deleted is not given, the head node is given and it is assumed that it is not the node to be deleted.\n    '''\n    if linkedlist == None:\n        return linkedlist\n    if linkedlist.val == value:\n        return linkedlist.next\n    if linkedlist.next == None:\n        return linkedlist\n    if linkedlist.val == value:\n        linkedlist.next.prev = linkedlist.prev\n        linkedlist.prev.next = linkedlist.next\n        return linkedlist\n    current = linkedlist\n    while current:\n        if current.val == value:\n            break\n        current = current.next\n    \n    if not current:\n        return linkedlist\n    \n    current.prev.next = current.next\n    current.next.prev = current.prev\n    return linkedlist\n    \n    \ndef test_is_palindrome_recursive(linkedlist):\n    '''\n    Write a function to check if a linked list is a palindrome.\n    '''\n    if linkedlist == None:\n        return True\n    if linkedlist.val == linkedlist.next.val:\n        return test_is_palindrome_recursive(linkedlist.next)\n    return False\n    \n    \ndef test_list_node_from_string(llstr):\n    '''\n    Write a function that returns a linked list with the nodes in the given string.\n    '''\n    ll = None\n    ll = LinkedList()\n    for i in llstr:\n        ll.add(i)\n    return ll\n    \n    \ndef test_string_node_to_list(ll):\n    '''\n    Write a function that returns a string with all the nodes in the given linked list.\n    '''\n    llist = \"\"\n    while ll:\n        llist += str(ll.val) + \", \"\n        ll = ll.next\n    return llist[:-2]\n    \n    \ndef test_remove_duplicate_nodes(ll):\n    '''\n    Write a function that returns a linked list with all duplicate nodes removed.\n    '''\n    if ll == None:\n        return ll\n    if ll.val == ll.next.val:\n        ll.next = ll.next.next\n        return ll\n    current = ll\n    while current:\n        if current.val == current.next.val:\n            current.next = current.next.next\n        else:\n            current = current.next\n    return ll\n    \n    \ndef test_swap_nodes(ll):\n    '''\n    Write a function that swaps the nodes in a singly linked list.\n    '''\n    if ll == None:\n        return ll\n    if ll.next == None:\n        return ll\n    if ll.val == ll.next.val:\n        ll.val, ll.next.val = ll.next.val, ll.val\n        return ll\n    current = ll\n    while current.next:\n        if current.val == current.next.val:\n            current.val, current.next.val = current.next.val, current.val\n            return ll\n        current = current.next\n    return ll\n    \n    \ndef test_reverse_list(ll):\n    '''\n    Write a function that reverses a singly linked list.\n    '''\n    if ll == None:\n        return ll\n    if ll.next == None:\n        return ll\n    previous = None\n    current = ll\n    while current.next:\n        current.next.prev = current.prev\n        current.prev.next = current.next\n        current.next = current.prev\n        current.prev = previous\n        previous = current\n        current = current.next\n    current.next = current.prev\n    current.prev = None\n    return ll\n    \n    \ndef test_reversed(ll):\n    '''\n    Write a function that returns a reversed version of the linked list.\n    '''\n    if ll == None:\n        return ll\n    reversedll = None\n    while ll:\n        reversedll = Node(ll.val, reversedll)\n        ll = ll.next\n    return reversedll\n    \n    \ndef test_list_to_string(ll):\n    '''\n    Write a function that returns a string with the nodes of the linked list in the form of a single line (new line character between each node).\n    '''\n    if ll == None:\n        return \"\"\n    llist = \"\"\n    while ll:\n        llist += str(ll.val) + \", \"\n        ll = ll.next\n    return llist[:-2]\n    \n    \ndef test_merge_lists(ll1, ll2):\n    '''\n    Write a function that returns the merge of the two linked lists.\n    '''\n    if ll1 == None:\n        return ll1\n    if ll2 == None:\n        return ll2\n    ll = None\n    if ll1.val < ll2.val:\n        ll = ll1\n        ll1 = ll1.next\n    else:\n        ll = ll2\n        ll2 = ll2.next\n    while ll1 or ll2:\n        if ll1 == None:\n            ll.next = ll2\n            break\n        if ll2 == None:\n            ll.next = ll1\n            break\n        if ll1.val < ll2.val:\n            ll.next = ll1\n            ll1 = ll1.next"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2!= 0\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x==1):\n        return True\n    else:\n        return False\n    \ndef is_big_enough(n,m):\n    '''\n    Write a function to check if a number is big enough or not.\n    '''\n    if(n>m):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0 and x % 5 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False\nprint(is_woodall(123))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    for i in range(1,x):\n        if x%i == 0:\n            return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 17:\n        return True\n    if x == 28:\n        return True\n    if x == 29:\n        return True\n    if x == 30:\n        return True\n    if x == 31:\n        return True\n    if x == 32:\n        return True\n    if x == 33:\n        return True\n    if x == 34:\n        return True\n    if x == 35:\n        return True\n    if x == 36:\n        return True\n    if x == 37:\n        return True\n    if x == 38:\n        return True\n    if x == 39:\n        return True\n    if x == 40:\n        return True\n    if x == 41:\n        return True\n    if x == 42:\n        return True\n    if x == 43:\n        return True\n    if x == 44:\n        return True\n    if x == 45:\n        return True\n    if x == 46:\n        return True\n    if x == 47:\n        return True\n    if x == 48:\n        return True\n    if x == 49:\n        return True\n    if x == 50:\n        return True\n    if x == 51:\n        return True\n    if x == 52:\n        return True\n    if x == 53:\n        return True\n    if x == 54:\n        return True\n    if x == 55:\n        return True\n    if x == 56:\n        return True\n    if x == 57:\n        return True\n    if x == 58:\n        return True\n    if x == 59:\n        return True\n    if x == 60:\n        return True\n    if x == 61:\n        return True\n    if x == 62:\n        return True\n    if x == 63:\n        return True\n    if x == 64:\n        return True\n    if x == 65:\n        return True\n    if x == 66:\n        return True\n    if x == 67:\n        return True\n    if x == 68:\n        return True\n    if x == 69:\n        return True\n    if x == 70:\n        return True\n    if x == 71:\n        return True\n    if x == 72:\n        return True\n    if x == 73:\n        return True\n    if x == 74:\n        return True\n    if x == 75:\n        return True\n    if x == 76:\n        return True\n    if x == 77:\n        return True\n    if x == 78:\n        return True\n    if x == 79:\n        return True\n    if x == 80:\n        return True\n    if x == 81:\n        return True\n    if x == 82:\n        return True\n    if x == 83:\n        return True\n    if x == 84:\n        return True\n    if x == 85:\n        return True\n    if x == 86:\n        return True\n    if x == 87:\n        return True\n    if x == 88:\n        return True\n    if x == 89:\n        return True\n    if x == 90:\n        return True\n    if x == 91:\n        return True\n    if x == 92:\n        return True\n    if x == 93:\n        return True\n    if x == 94:\n        return True\n    if x == 95:\n        return True\n    if x == 96:\n        return True\n    if x == 97:\n        return True\n    if x == 98:\n        return True\n    if x == 99:\n        return True\n    if x == 100:\n        return True\n    if x == 101:\n        return True\n    if x == 102:\n        return True\n    if x == 103:\n        return True\n    if x == 104:\n        return True\n    if x == 105:\n        return True\n    if x == 106:\n        return True\n    if x == 107:\n        return True\n    if x == 108:\n        return True\n    if x == 109:\n        return True\n    if x == 110:\n        return True\n    if x == 111:\n        return True\n    if x == 112:\n        return True\n    if x == 113:\n        return True\n    if x == 114:\n        return True\n    if x == 115:\n        return True\n    if x == 116:\n        return True\n    if x == 117:\n        return True\n    if x == 118:\n        return True\n    if x == 119:\n        return True\n    if x == 120:\n        return True\n    if x == 121:\n        return True\n    if x == 122:\n        return True\n    if x == 123:\n        return True\n    if x == 124:\n        return True\n    if x == 125:\n        return True\n    if x == 126:\n        return True\n    if x == 127:\n        return True\n    if x == 128:\n        return True\n    if x == 129:\n        return True\n    if x == 130:\n        return True\n    if x == 131:\n        return True\n    if x == 132:\n        return True\n    if x == 133:\n        return True\n    if x == 134:\n        return True\n    if x == 135:\n        return True\n    if x == 136:\n        return True\n    if x == 137:\n        return True\n    if x == 138:\n        return True\n    if x == 139:\n        return True\n    if x == 140:\n        return True\n    if x == 141:\n        return True\n    if x == 142:\n        return True\n    if x == 143:\n        return True\n    if x == 144:\n        return True\n    if x == 145:\n        return True\n    if x == 146:\n        return True\n    if x == 147:\n        return True\n    if x == 148:\n        return True\n    if x == 149:\n        return True\n    if x == 150:\n        return True\n    if x == 151:\n        return True\n    if x == 152:\n        return True\n    if x == 153:\n        return True\n    if x == 154:\n        return True\n    if x == 155:\n        return True\n    if x == 156:\n        return True\n    if x == 157:\n        return True\n    if x == 158:\n        return True\n    if x == 159:\n        return True\n    if x == 160:\n        return True\n    if x == 161:\n        return True\n    if x == 162:\n        return True\n    if x == 163:\n        return True\n    if x == 164:\n        return True\n    if x == 165:\n        return True\n    if x == 166:\n        return True\n    if x == 167:\n        return True\n    if x == 168:\n        return True\n    if x == 169:\n        return True\n    if x == 170:\n        return True\n    if x == 171:\n        return True\n    if x == 172:\n        return True\n    if x == 173:\n        return True\n    if x == 174:\n        return True\n    if x == 175:\n        return True\n    if x == 176:\n        return True\n    if x == 177:\n        return True\n    if x == 178:\n        return True\n    if x == 179:\n        return True\n    if x == 180:\n        return True\n    if x == 181:\n        return True\n    if x == 182:\n        return True\n    if x == 183:\n        return True\n    if x == 184:\n        return True\n    if x == 185:\n        return True\n    if x == 186:\n        return True\n    if x == 187:\n        return True\n    if x == 188:\n        return True\n    if x == 189:\n        return True\n    if x == 190:\n        return True\n    if x == 191:\n        return True\n    if x == 192:\n        return True\n    if x == 193:\n        return True\n    if x == 194:\n        return True\n    if x == 195:\n        return True\n    if x == 196:\n        return True\n    if x == 197:\n        return True\n    if x == 198:\n        return True\n    if x == 199:\n        return True\n    if x == 200:\n        return True\n    if x == 201:\n        return True\n    if x == 202:\n        return True\n    if x == 203:\n        return True\n    if x == 204:\n        return True\n    if x == 205:\n        return True\n    if x == 206:\n        return True\n    if x == 207:\n        return True\n    if x == 208:\n        return True\n    if x == 209:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return str(x)=='41'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return False\n    elif x%2 == 0 and x>=2:\n        return False\n    else:\n        for i in range(3,int(x**(0.5))+1,2):\n            if x%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 'Woodball' if x%7==0 else 'Not a Woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 5 == 0)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while (num > 0):\n        rem = num % 10\n        rev = (rev * 10) + rem\n        num = num // 10\n    if(rev == num):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num * 2) - num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    num1 = 0\n    num2 = 0\n    while num > 0:\n        num1 = num1 * 10 + num % 10\n        num = num // 10\n        num2 = num2 * 10 + num1 % 10\n        num1 = num1 // 10\n        num2 = num2 // 10\n    return num2 \n    \nif __name__ == '__main__':\n    num = 6\n    print(rev(num)"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    r = 0\n    while num:\n        r = r*10+num%10\n        num//=10\n    return r\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == -2 or num == -1:\n        return False\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    rev = -(num)\n    if rev == 1:\n        return False\n    if rev == 0:\n        return True\n    if rev == 2:\n        return True\n    return rev(rev)\nprint(rev(1))\nprint(rev(-2))\nprint(rev(-1))\nprint(rev(2))\nprint(rev(0))\nprint(rev(-1))\nprint(rev(3))\nprint(rev(-3))\nprint(rev(4))\nprint(rev(-4))\nprint(rev(-5))\nprint(rev(5))\nprint(rev(6))\nprint(rev(7))\nprint(rev(8))\nprint(rev(9))\nprint(rev(10))\nprint(rev(11))\nprint(rev(12))\nprint(rev(13))\nprint(rev(14))\nprint(rev(15))\nprint(rev(16))\nprint(rev(17))\nprint(rev(18))\nprint(rev(19))\nprint(rev(20))\nprint(rev(21))\nprint(rev(22))\nprint(rev(23))\nprint(rev(24))\nprint(rev(25))\nprint(rev(26))\nprint(rev(27))\nprint(rev(28))\nprint(rev(29))\nprint(rev(30))\nprint(rev(31))\nprint(rev(32))\nprint(rev(33))\nprint(rev(34))\nprint(rev(35))\nprint(rev(36))\nprint(rev(37))\nprint(rev(38))\nprint(rev(39))\nprint(rev(40))\nprint(rev(41))\nprint(rev(42))\nprint(rev(43))\nprint(rev(44))\nprint(rev(45))\nprint(rev(46))\nprint(rev(47))\nprint(rev(48))\nprint(rev(49))\nprint(rev(50))\nprint(rev(51))\nprint(rev(52))\nprint(rev(53))\nprint(rev(54))\nprint(rev(55))\nprint(rev(56))\nprint(rev(57))\nprint(rev(58))\nprint(rev(59))\nprint(rev(60))\nprint(rev(61))\nprint(rev(62))\nprint(rev(63))\nprint(rev(64))\nprint(rev(65))\nprint(rev(66))\nprint(rev(67))\nprint(rev(68))\nprint(rev(69))\nprint(rev(70))\nprint(rev(71))\nprint(rev(72))\nprint(rev(73))\nprint(rev(74))\nprint(rev(75))\nprint(rev(76))\nprint(rev(77))\nprint(rev(78))\nprint(rev(79))\nprint(rev(80))\nprint(rev(81))\nprint(rev(82))\nprint(rev(83))\nprint(rev(84))\nprint(rev(85))\nprint(rev(86))\nprint(rev(87))\nprint(rev(88))\nprint(rev(89))\nprint(rev(90))\nprint(rev(91))\nprint(rev(92))\nprint(rev(93))\nprint(rev(94))\nprint(rev(95))\nprint(rev(96))\nprint(rev(97))\nprint(rev(98))\nprint(rev(99))\nprint(rev(100))\nprint(rev(101))\nprint(rev(102))\nprint(rev(103))\nprint(rev(104))\nprint(rev(105))\nprint(rev(106))\nprint(rev(107))\nprint(rev(108))\nprint(rev(109))\nprint(rev(110))\nprint(rev(111))\nprint(rev(112))\nprint(rev(113))\nprint(rev(114))\nprint(rev(115))\nprint(rev(116))\nprint(rev(117))\nprint(rev(118))\nprint(rev(119))\nprint(rev(120))\nprint(rev(121))\nprint(rev(122))\nprint(rev(123))\nprint(rev(124))\nprint(rev(125))\nprint(rev(126))\nprint(rev(127))\nprint(rev(128))\nprint(rev(129))\nprint(rev(130))\nprint(rev(131))\nprint(rev(132))\nprint(rev(133))\nprint(rev(134))\nprint(rev(135))\nprint(rev(136))\nprint(rev(137))\nprint(rev(138))\nprint(rev(139))\nprint(rev(140))\nprint(rev(141))\nprint(rev(142))\nprint(rev(143))\nprint(rev(144))\nprint(rev(145))\nprint(rev(146))\nprint(rev(147))\nprint(rev(148))\nprint(rev(149))\nprint(rev(150))\nprint(rev(151))\nprint(rev(152))\nprint(rev(153))\nprint(rev(154))\nprint(rev(155))\nprint(rev(156))\nprint(rev(157))\nprint(rev(158))\nprint(rev(159))\nprint(rev(160))\nprint(rev(161))\nprint(rev(162))\nprint(rev(163))\nprint(rev(164))\nprint(rev(165))\nprint(rev(166))\nprint(rev(167))\nprint(rev(168))\nprint(rev(169))\nprint(rev(170))\nprint(rev(171))\nprint(rev(172))\nprint(rev(173))\nprint(rev(174))\nprint(rev(175))\nprint(rev(176))\nprint(rev(177))\nprint(rev(178))\nprint(rev(179))\nprint(rev(180))\nprint(rev(181))\nprint(rev(182))\nprint(rev(183))\nprint(rev(184))\nprint(rev(185))\nprint(rev(186))\nprint(rev(187))\nprint(rev(188))\nprint(rev(189))\nprint(rev(190))\nprint(rev(191))\nprint(rev(192))\nprint(rev(193))\nprint(rev(194))\nprint(rev(195))\nprint(rev(196))\nprint(rev(197))\nprint(rev(198))\nprint(rev(199))\nprint(rev(200))\nprint(rev(201))\nprint(rev(202))\nprint(rev(203))\nprint(rev(204))\nprint(rev(205))\nprint(rev(206))\nprint(rev(207))\nprint(rev(208))\nprint(rev(209))\nprint(rev(210))\nprint(rev(211))\nprint(rev(212))\nprint(rev(213))\nprint(rev(214))\nprint(rev(215))\nprint(rev(216))\nprint(rev(217))\nprint(rev(218))\nprint(rev(219))\nprint(rev(220))\nprint(rev(221))\nprint(rev(222))\nprint(rev(223))\nprint(rev(224))\nprint(rev(225))\nprint(rev(226))\nprint(rev(227))\nprint(rev(228))\nprint(rev(229))\nprint(rev(230))\nprint(rev(231))\nprint(rev(232))\nprint(rev(233))\nprint(rev(234))\nprint(rev(235))\nprint(rev(236))\nprint(rev(237))\nprint(rev(238))\nprint(rev(239))\nprint(rev(240))\nprint(rev(241))\nprint(rev(242))\nprint(rev(243))\nprint(rev(244))\nprint(rev(245))\nprint(rev(246))\nprint(rev(247))\nprint(rev(248))\nprint(rev(249))\nprint(rev(250))\nprint(rev(251))\nprint(rev(252))\nprint(rev(253))\nprint(rev(254))\nprint(rev(255))\nprint(rev(256))\nprint(rev(257))\nprint(rev(258))\nprint(rev(259))\nprint(rev(260))\nprint(rev(261))\nprint(rev(262))\nprint(rev(263))\nprint(rev(264))\nprint(rev(265))\nprint(rev(266))\nprint(rev"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    x = num \n    while x > 0: \n        x = x//10\n        \n    while num > 0: \n        x = x*10 + num%10\n        num = num//10\n    if x == x//1:\n        return True\n    else:\n        return False\n    \nprint(rev(99),'\\t',rev(999),'\\t',rev(9999),'\\t',rev(99999))"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    return rev_num\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if num[::-1] == num[:-1]:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = num\n    while rev!= 0:\n        dig = int(str(rev)[::-1])\n        if dig == rev:\n            return True\n        else:\n            rev = dig\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num<0:\n        return -1\n    else:\n        rev_num=0\n        while num>0:\n            rev_num=rev_num*10+num%10\n            num=num//10\n        return rev_num if rev_num==num else -1\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -float('inf')\n    for i in range(0,len(arr)):\n        max_num = max(max_num,arr[i])\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    temp = 0\n    for i in range(0, len(arr)): \n        temp = int(arr[i]) \n        if temp > max_num: \n            max_num = temp \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = list(map(int, arr))\n    \n    # for i in range(1,len(arr)):\n    #     temp = arr[i]\n    #     for j in range(i):\n    #         if arr[j]>temp:\n    #             temp = arr[j]\n    #     arr[i] = temp\n    # return arr[0]\n    \n    \n    \n    # nums = map(int, arr)\n    \n    # nums.sort(reverse=True)\n    \n    # return nums[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(0,len(arr)-1):\n        if(arr[i]<max_num):\n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def largest(arr):\n        max = arr[0]\n        for i in range(1,len(arr)):\n            if max < arr[i]:\n                max = arr[i]\n        return max\n    return largest(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -1\n    for x in arr:\n        if x > max:\n            max = x\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    print(\"\\n\\nInput Array:\",arr)\n    max_num = int(arr[0]) + int(arr[1])\n    print(\"\\nMaximum Number:\",max_num)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for i in range(0,len(arr)) : \n        if(int(arr[i]) > max_num) : \n            max_num = int(arr[i])\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Write your code here\n    # arr = ['1','2','3','4','5']\n    # arr = ['1','2','3','4','5','6','7','8','9']\n    n = len(arr)\n    print(n)\n    # for i in range(n):\n    #     if (arr[i] == '7') :\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif (arr[i] == '2') :\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    max_num = '2'\n    for i in range(n):\n        print(arr[i])\n        if(arr[i] == '7'):\n            arr[i] = '2'\n            print(arr)\n        elif(arr[i] == '2'):\n            arr[i] = '1'\n            print(arr)\n        else :\n            continue\n        if(len(max_num) < len(arr[i])):\n            max_num = arr[i]\n        else :\n            continue\n    print(max_num)\n    return max_num\n    # for i in range(n):\n    #     if (arr[i] == '7') :\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif (arr[i] == '2') :\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    # max_num = '2'\n    # for i in range(n):\n    #     print(arr[i])\n    #     if(arr[i] == '7'):\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif(arr[i] == '2'):\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    #     if(len(max_num) < len(arr[i])):\n    #         max_num = arr[i]\n    #     else :\n    #         continue\n    # print(max_num)\n    # return max_num\n    # print(arr)\n    # for i in range(n):\n    #     if (arr[i] == '7') :\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif (arr[i] == '2') :\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    # max_num = '2'\n    # for i in range(n):\n    #     print(arr[i])\n    #     if(arr[i] == '7'):\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif(arr[i] == '2'):\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    #     if(len(max_num) < len(arr[i])):\n    #         max_num = arr[i]\n    #     else :\n    #         continue\n    # print(max_num)\n    # return max_num\n    # for i in range(n):\n    #     if (arr[i] == '7') :\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif (arr[i] == '2') :\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    # max_num = '2'\n    # for i in range(n):\n    #     print(arr[i])\n    #     if(arr[i] == '7'):\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif(arr[i] == '2'):\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    #     if(len(max_num) < len(arr[i])):\n    #         max_num = arr[i]\n    #     else :\n    #         continue\n    # print(max_num)\n    # return max_num\n    # for i in range(n):\n    #     if (arr[i] == '7') :\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif (arr[i] == '2') :\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    # max_num = '2'\n    # for i in range(n):\n    #     print(arr[i])\n    #     if(arr[i] == '7'):\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif(arr[i] == '2'):\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    #     if(len(max_num) < len(arr[i])):\n    #         max_num = arr[i]\n    #     else :\n    #         continue\n    # print(max_num)\n    # return max_num\n    # for i in range(n):\n    #     if (arr[i] == '7') :\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif (arr[i] == '2') :\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    # max_num = '2'\n    # for i in range(n):\n    #     print(arr[i])\n    #     if(arr[i] == '7'):\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif(arr[i] == '2'):\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    #     if(len(max_num) < len(arr[i])):\n    #         max_num = arr[i]\n    #     else :\n    #         continue\n    # print(max_num)\n    # return max_num\n    # for i in range(n):\n    #     if (arr[i] == '7') :\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif (arr[i] == '2') :\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    # max_num = '2'\n    # for i in range(n):\n    #     print(arr[i])\n    #     if(arr[i] == '7'):\n    #         arr[i] = '2'\n    #         print(arr)\n    #     elif(arr[i] == '2'):\n    #         arr[i] = '1'\n    #         print(arr)\n    #     else :\n    #         continue\n    #     if(len(max_num) < len(arr[i])):\n    #         max_num = arr[i]\n    #     else :\n    #         continue\n    # print(max_num)"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > num :\n            num = arr[i]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\n        \n        \n        \ndef two_list_intersection(list1,list2):\n    '''\n    Write a python function to find the common elements between two lists.\n    '''\n    x=set(list1)\n    y=set(list2)\n    s1=x.intersection(y)\n    return s1\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x > 0 and y < 0 or x < 0 and y > 0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y > 0) or (x < 0 and y < 0) or (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n        \ndef get_max_min(x,y):\n    '''\n    Write a python function to find the max and min of a given list of integers.\n    '''\n    if x > y:\n        return x,y\n    else:\n        return y,x\n        \ndef sum_of_two(x,y):\n    '''\n    Write a python function to calculate the sum of two numbers.\n    '''\n    return x + y\n        \ndef reverse(x):\n    '''\n    Write a python function to reverse the input number.\n    '''\n    return x[::-1]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0 or x <= 0 and y <= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return \"Both numbers have same sign\"\n    elif x<0 and y<0:\n        return \"Both numbers have same sign\"\n    elif x<0 and y>0:\n        return \"First number has negative sign\"\n    elif x>0 and y<0:\n        return \"Second number has negative sign\"\n    else:\n        return \"Both numbers have same sign\"\n    \ndef find_num_divisible_by_k(n,k):\n    '''\n    Write a python function to find the number of digits in n such that the number is divisible by k and \n    additionally k must be a divisor of the number.\n    '''\n    if n%k==0:\n        return k\n    elif n%k!=0:\n        return find_num_divisible_by_k(n//k,k)\n    else:\n        return -1\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0: \n        print(\"Both the numbers are equal\") \n    elif x == 0: \n        print(\"First number is equal to 0\") \n    elif y == 0: \n        print(\"Second number is equal to 0\") \n    elif x < 0 and y > 0: \n        print(\"First number is less than 0 and second number is greater than 0\") \n    elif x > 0 and y < 0: \n        print(\"First number is greater than 0 and second number is less than 0\") \n    else: \n        print(\"Both numbers are non-zero and are neither equal to 0 nor non-zero\") \n    \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y<0\n    "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x==0 and y==0):\n        return False\n    elif(x*y <0):\n        return True\n    else:\n        return False\nprint(opposite_Signs(10,1))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octan_list = [1, 1]\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    number = 1\n    while i <= n:\n        number += 1.0 / (8 * i)\n        i += 1\n    return number\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    for i in range(1,n+1):\n        num = num*(n+1) + i\n    return num\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * (n ** 2) - 1) // 7\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num = (i * (2*i - 1)) // 2\n    return num\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    s = 1\n    for k in range(1, n+1):\n        s = s * (k * (2 * k - 1)) // (2 * k)\n    return s\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 1 + (3 * (n - 1) ** 2) + n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = 0\n    while n > 0:\n        oct_num += 1\n        n = n - 1\n    return oct_num\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n <= 0) or (n > 99):\n        return -1\n    else:\n        n_1 = 1\n        n_2 = 1\n        oct_num = 1\n        for i in range(n - 1):\n            oct_num = n_1 + n_2\n            n_1 = n_2\n            n_2 = oct_num\n        return oct_num\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    substring_dict={}\n    substring_dict[0]=1\n    for i in range(1,len(s)):\n        if (ord(s[i-1])-ord('0')) == (ord(s[i])-ord('0')) and ord(s[i-1])>=ord('0') and ord(s[i])<=ord('9'):\n            count+=substring_dict[i-1]\n        else:\n            substring_dict[i]=substring_dict[i-1]\n    return count\nprint(count_Substrings(\"asdfddqeww\"))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            d[s[i:j+1]]+=1\n    print(\"the number of substrings equal to their length\",d)\n    return sum([v for k,v in d.items() if k.isdigit()])\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # count the substrings where the sum of the digits in each substring is equal to their length\n    # 0 - 9\n    # 1 - 4\n    # 2 - 5\n    # 3 - 6\n    # 4 - 7\n    # 5 - 8\n    # 6 - 9\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            sum = 0\n            for k in range(len(substring)):\n                sum += int(substring[k])\n            if sum == len(substring):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # method 1\n    # d = defaultdict(int)\n    # for i in range(len(s)):\n    #     for j in range(i,len(s)):\n    #         d[s[i:j+1]] += 1\n    # return len(d.values())\n    \n    # method 2\n    # output = 0\n    # for i in range(len(s)):\n    #     for j in range(i,len(s)):\n    #         if str(s[i:j+1]).count('1') == len(str(s[i:j+1])):\n    #             output += 1\n    # return output\n    \n    # method 3\n    # return len([i for i in range(len(s)) if s[i:].count(\"1\") == len(s[i:])])\n    \n    # method 4\n    # i = 0\n    # count = 0\n    # while i < len(s):\n    #     if s[i:].count(\"1\") == len(s[i:]):\n    #         count += 1\n    #     i += 1\n    # return count\n    \n    # method 5\n    # return len([i for i in range(len(s)) if s[i:].count(\"1\") == len(s[i:])])\n    \n    # method 6\n    # count = 0\n    # for i in range(len(s)):\n    #     count += 1\n    #     if count == len(s):\n    #         break\n    # return count\n    \n    # method 7\n    # count = 0\n    # for i in range(len(s)):\n    #     count += 1\n    #     if count == len(s):\n    #         break\n    #     if count == len(s):\n    #         break\n    #     if count == len(s):\n    #         break\n    # return count\n    \n    # method 8\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     elif s[i] == '1':\n    #         count -= 1\n    #     if count == 0:\n    #         return 1\n    # return 0\n    \n    # method 9\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     elif s[i] == '1':\n    #         count -= 1\n    #     if count == 0:\n    #         return 1\n    # return 0\n    \n    # method 10\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 1:\n    #         return 1\n    # return 0\n    \n    # method 11\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 1:\n    #         return 1\n    # return 0\n    \n    # method 12\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count > 1:\n    #         return 1\n    # return 0\n    \n    # method 13\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count > 1:\n    #         return 1\n    # return 0\n    \n    # method 14\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count > 1:\n    #         return 1\n    # return 0\n    \n    # method 15\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 2:\n    #         return 1\n    # return 0\n    \n    # method 16\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 3:\n    #         return 1\n    # return 0\n    \n    # method 17\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 4:\n    #         return 1\n    # return 0\n    \n    # method 18\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 5:\n    #         return 1\n    # return 0\n    \n    # method 19\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 6:\n    #         return 1\n    # return 0\n    \n    # method 20\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 7:\n    #         return 1\n    # return 0\n    \n    # method 21\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 8:\n    #         return 1\n    # return 0\n    \n    # method 22\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 9:\n    #         return 1\n    # return 0\n    \n    # method 23\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 10:\n    #         return 1\n    # return 0\n    \n    # method 24\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 11:\n    #         return 1\n    # return 0\n    \n    # method 25\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 12:\n    #         return 1\n    # return 0\n    \n    # method 26\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count == 13:\n    #         return 1\n    # return 0\n    \n    # method 27\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == '1' and count == 0:\n    #         count += 1\n    #     if count ="
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = []\n    for i in range(len(s)):\n        substr = s[i]\n        len_substr = len(substr)\n        if len_substr == 1:\n            res.append(s[i])\n        else:\n            for j in range(len_substr):\n                if s[i] == str(j):\n                    res.append(s[i])\n    print(res)\n    print(len(res))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = {}\n    for i in range(len(s)):\n        if d.get(s[i])!= None:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            subs = s[i:j]\n            print(\"subs: \", subs)\n            if(len(subs) == len(set(subs))):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        substring = s[i]\n        length = 0\n        for j in range(i, len(s)):\n            if length == len(substring):\n                break\n            elif s[j] == substring[length]:\n                length += 1\n            else:\n                continue\n        if length == len(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    string_list = list(s)\n    substring_count = 0\n    \n    for i in range(len(string_list)-1):\n        for j in range(i+1, len(string_list)):\n            substring_count += 1\n            if(sum(string_list[i:j+1]) == len(string_list[i:j+1])):\n                return substring_count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if len(s[i:j+1])==len(set(s[i:j+1])):\n                ans+=1\n    return ans\ndef count_Substrings_v2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if len(s[i:j+1])==len(set(s[i:j+1])):\n                ans+=1\n    return ans\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s==s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for i in range(1,len(xs)):\n        if xs[i] < smallest_num:\n            smallest_num = xs[i]\n    return smallest_num\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    largest_num = xs[0]\n    for i in range(1,len(xs)):\n        if xs[i] > largest_num:\n            largest_num = xs[i]\n    return largest_num\n    \ndef middle_num(xs):\n    '''\n    Write a python function to find middle number in a list.\n    '''\n    middle_num = (xs[0] + xs[-1]) / 2\n    return middle_num\n    \ndef sum_of_even_numbers(xs):\n    '''\n    Write a python function to find sum of even numbers in a list.\n    '''\n    sum_of_even = 0\n    for i in range(0, len(xs)):\n        if xs[i] % 2 == 0:\n            sum_of_even += xs[i]\n    return sum_of_even\n    \ndef sum_of_odd_numbers(xs):\n    '''\n    Write a python function to find sum of odd numbers in a list.\n    '''\n    sum_of_odd = 0\n    for i in range(0, len(xs)):\n        if xs[i] % 2!= 0:\n            sum_of_odd += xs[i]\n    return sum_of_odd\n    \ndef largest_number_in_list(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    largest_number = xs[0]\n    for i in range(1,len(xs)):\n        if xs[i] > largest_number:\n            largest_number = xs[i]\n    return largest_number\n    \ndef smallest_number_in_list(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = xs[0]\n    for i in range(1,len(xs)):\n        if xs[i] < smallest_number:\n            smallest_number = xs[i]\n    return smallest_number\n    \ndef find_2nd_largest(xs):\n    '''\n    Write a python function to find the second largest number in a list.\n    '''\n    largest_number = xs[0]\n    second_largest_number = 0\n    for i in range(1,len(xs)):\n        if xs[i] > largest_number:\n            second_largest_number = largest_number\n            largest_number = xs[i]\n        elif xs[i] > second_largest_number and xs[i] < largest_number:\n            second_largest_number = xs[i]\n    return second_largest_number\n    \ndef find_2nd_smallest(xs):\n    '''\n    Write a python function to find the second smallest number in a list.\n    '''\n    smallest_number = xs[0]\n    second_smallest_number = 0\n    for i in range(1,len(xs)):\n        if xs[i] < smallest_number:\n            second_smallest_number = smallest_number\n            smallest_number = xs[i]\n        elif xs[i] < second_smallest_number and xs[i] > smallest_number:\n            second_smallest_number = xs[i]\n    return second_smallest_number\n    \ndef sum_of_n_to_n_multiplication(x, y):\n    '''\n    Write a python function to find the sum of multiplication of n-th to n-th numbers in a list.\n    '''\n    multiplication = 0\n    for i in range(x,y+1):\n        multiplication += i\n    return multiplication\n    \ndef sum_of_n_to_n_division(x, y):\n    '''\n    Write a python function to find the sum of division of n-th to n-th numbers in a list.\n    '''\n    division = 0\n    for i in range(x,y+1):\n        division += i\n    return division\n    \ndef sum_of_n_to_n_remainder(x, y):\n    '''\n    Write a python function to find the sum of remainder of n-th to n-th numbers in a list.\n    '''\n    remainder = 0\n    for i in range(x,y+1):\n        remainder += i%2\n    return remainder\n    \ndef sum_of_n_to_n_divider(x, y):\n    '''\n    Write a python function to find the sum of divider of n-th to n-th numbers in a list.\n    '''\n    divider = 0\n    for i in range(x,y+1):\n        divider += i//2\n    return divider\n    \ndef sum_of_n_to_n_gcd(x, y):\n    '''\n    Write a python function to find the sum of gcd of n-th to n-th numbers in a list.\n    '''\n    gcd = 1\n    for i in range(x,y+1):\n        gcd = gcd + i%2\n    return gcd\n    \ndef sum_of_n_to_n_lcm(x, y):\n    '''\n    Write a python function to find the sum of lcm of n-th to n-th numbers in a list.\n    '''\n    lcm = 1\n    for i in range(x,y+1):\n        lcm = lcm * i//gcd(i,y)\n    return lcm\n    \ndef sum_of_n_to_n_lcm_multiple(x, y):\n    '''\n    Write a python function to find the sum of multiple of lcm of n-th to n-th numbers in a list.\n    '''\n    lcm = x\n    for i in range(x,y+1):\n        lcm = lcm * i//gcd(i,y)\n    return lcm\n    \ndef factorial(n):\n    '''\n    Write a python function to find factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i\n    return factorial\n    \ndef factorial_recursion(n):\n    '''\n    Write a python function to find factorial of a given number using recursion.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursion(n-1)\n    \ndef sum_of_n_to_n_fibonacci(x, y):\n    '''\n    Write a python function to find sum of fibonacci of n-th to n-th numbers in a list.\n    '''\n    fib = 0\n    for i in range(x,y+1):\n        fib = fib + i\n    return fib\n    \ndef sum_of_n_to_n_fibonacci_recursion(x, y):\n    '''\n    Write a python function to find sum of fibonacci of n-th to n-th numbers in a list using recursion.\n    '''\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return sum_of_n_to_n_fibonacci_recursion(x-1,y) + sum_of_n_to_n_fibonacci_recursion(x-2,y)\n    \ndef sum_of_n_to_n_fibonacci_dp(x, y):\n    '''\n    Write a python function to find sum of fibonacci of n-th to n-th numbers in a list using dynamic programming.\n    '''\n    matrix = [[0,1],[1,1]]\n    for i in range(2,x+1):\n        matrix.append([0,1])\n        for j in range(2,i+1):\n            matrix[i].append(matrix[i-1][j-1] + matrix[i-1]"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in xs:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for i in xs:\n        if i < smallest_num:\n            smallest_num = i\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_val = xs[0]\n    for i in range(len(xs)):\n        if min_val > xs[i]:\n            min_val = xs[i]\n    return min_val\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest is None:\n            smallest = num\n        elif num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_value = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min_value:\n            min_value = xs[i]\n    return min_value\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1]-test_list[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_dif = float(\"-inf\")\n    for i in range(len(test_list) - 1):\n        if test_list[i] > test_list[i + 1]:\n            max_dif = max(max_dif, test_list[i] - test_list[i + 1])\n    return max_dif\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # get pairs, sort and return diff\n    pairs = [tuple(sorted(list(x))) for x in test_list]\n    return max(map(lambda x: abs(x[0] - x[1]), pairs))\n    \ndef max_difference_2(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # get pairs, sort and return diff\n    pairs = sorted(list(test_list))\n    return max(map(lambda x: abs(pairs[x][0] - pairs[x][1]), range(len(pairs))))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    print(sorted_list)\n    \n    deltas = []\n    for i in range(len(sorted_list)-1):\n        deltas.append(sorted_list[i+1] - sorted_list[i])\n    print(deltas)\n    return deltas\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, abs(test_list[i]-test_list[j]))\n    return diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    max_diff = max(my_dict.values()) - min(my_dict.values())\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i == j:\n                continue\n            max_diff = max(max_diff, test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #initialize variable to hold maximum difference\n    max_difference = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 0:\n        return None\n    max_diff = test_list[0]\n    max_diff_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i] - test_list[i-1] > max_diff:\n            max_diff = test_list[i] - test_list[i-1]\n            max_diff_index = i\n    return max_diff, max_diff_index\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    data = sorted(subjectmarks)\n    return data\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result = []\n    for k, v in sorted(subjectmarks, key=lambda x: x[1]):\n        result.append((k,v))\n    return result\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l = [(1, 2), (4, 3), (5, 6), (7, 8)]\n    l.sort(key=lambda i: i[1])\n    print(l)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    newlist = []\n    for i in range(len(subjectmarks)):\n        newlist.append((subjectmarks[i][1], subjectmarks[i][0]))\n    sortedlist = sorted(newlist, key=lambda x: x[1])\n    print(sortedlist)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = sorted(subjectmarks, key=lambda x: x[1])\n    return new_list\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return sorted_subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l = sorted(subjectmarks, key=lambda x:x[1])\n    return l\n    \nlst = [(100, 3), (400, 1), (800, 6), (600, 9), (500, 7), (100, 3)]\nlst = subject_marks(lst)\nprint(lst)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_list = 0\n    for item in data_list:\n        if isinstance(item,list):\n            sum_list += recursive_list_sum(item)\n        else:\n            sum_list += item\n    return sum_list\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return sum(recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:]) )\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    new_list = []\n    for element in data_list:\n        if isinstance(element, list):\n            new_list += element\n        else:\n            new_list.append(element)\n    return sum(new_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == int:\n        return sum(data_list) + recursive_list_sum(data_list[1:])\n    else:\n        return sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # your code here\n    sum = 0\n    for each in data_list:\n        if type(each) == int or type(each) == float:\n            sum += each\n        else:\n            sum += recursive_list_sum(each)\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == None:\n        return 0\n    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        total = data_list[0]\n        for i in range(1, len(data_list)):\n            total = total + data_list[i]\n        return total\n    \n    \n    \n    "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], list):\n        return sum(data_list) + recursive_list_sum(data_list[0])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list)==0:\n        return 0\n    elif len(data_list)==1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, int) or isinstance(item, float):\n            total_sum += item\n        else:\n            total_sum += recursive_list_sum(item)\n    return total_sum\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count(1)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n=0\n    for i in list:\n        if i>=0:\n            n+=1\n    return n\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count=0\n    for i in list:\n        if i>=0:\n            pos_count+=1\n    print(pos_count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    print(count)\n    return count\n    "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    def helper(n, m, memo):\n        if (n,m) in memo:\n            return memo[(n,m)]\n        if n == 1:\n            return 1\n        if n == 0:\n            return 0\n        if n == m:\n            return 1\n        if m > n:\n            return 0\n        memo[(n,m)] = helper(n-1, m, memo) + helper(n-1, m-1, memo)\n        return memo[(n,m)]\n    for i in range(1,n+1):\n        count = count + helper(i, i, {})\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Create an empty table.\n    table = [[0 for i in range(n+1)] for j in range(n+1)] \n    # Fill the table.\n    for i in range(n+1):\n        table[i][i] = 1\n    # Set the value of the first row to 1.\n    for i in range(2, n+1):\n        for j in range(i, n+1):\n            for k in range(1, i+1):\n                table[i][j] += table[k-1][j-i]\n    return table[n][n]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1],\n            [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1],\n            [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1]]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_num = 0\n    for i in range(1, n+1):\n        bell_num += (n-i+1) * i // 2\n    return bell_num\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_number_helper(n, k):\n        if k == 0:\n            return 1\n        elif n == 0:\n            return 0\n        elif n < 0 or k < 0:\n            return 0\n        else:\n            return bell_number_helper(n - k, k) + bell_number_helper(n - k, k - 1)\n    return bell_number_helper(n, n - 1)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # memoization\n    nums = (1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1398630157, 1776028241, 362715173, 511466461, 7778742049, 1417958647,\n               1983939140, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1398630157, 1776028241, 362715173, 511466461, 7778742049, 1417958647)\n    memo = {}\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # n = int(input('Enter the number of elements in a set'))\n    def count(n):\n        # print('\\nCount of set of {} elements'.format(n))\n        if n <= 1:\n            return 1\n        else:\n            return count(n-1) + count(n-2)\n    return count(n)\n    # print(count(n))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # i is the number of ways to partition the given set of numbers\n    # j is the size of the set of numbers\n    # dp is the dp array\n    # dp[i][j] is the number of ways to partition the set of numbers, from index 0 to j.\n    # dp[i][j] = dp[i+1][j-1] + dp[i+1][j]\n    # dp[i][j] = dp[i][j-1] + dp[i][j]\n    # dp[i][j] = dp[i][j-1] + dp[i][j]\n    # dp[i][j] = dp[i][j-1] + dp[i][j]\n    # j = 1, 2, 3, 4, 5, 6, 7\n    # 1. dp[0][0] = 1\n    # 2. dp[0][1] = 1\n    # 3. dp[0][2] = 2\n    # 4. dp[0][3] = 5\n    # 5. dp[0][4] = 8\n    # 6. dp[0][5] = 13\n    # 7. dp[0][6] = 21\n    # 8. dp[0][7] = 34\n    # 9. dp[0][8] = 55\n    # 10. dp[0][9] = 89\n    # 11. dp[0][10] = 144\n    # 12. dp[0][11] = 233\n    # 13. dp[0][12] = 377\n    # 14. dp[0][13] = 610\n    # 15. dp[0][14] = 987\n    # 16. dp[0][15] = 1555\n    # 17. dp[0][16] = 2584\n    # 18. dp[0][17] = 4181\n    # 19. dp[0][18] = 6765\n    # 20. dp[0][19] = 10946\n    # 21. dp[0][20] = 17711\n    # 22. dp[0][21] = 33892\n    # 23. dp[0][22] = 64719\n    # 24. dp[0][23] = 96954\n    # 25. dp[0][24] = 159718\n    # 26. dp[0][25] = 294961\n    # 27. dp[0][26] = 549286\n    # 28. dp[0][27] = 888703\n    # 29. dp[0][28] = 1326762\n    # 30. dp[0][29] = 2265657\n    # 31. dp[0][30] = 4497529\n    # 32. dp[0][31] = 8069795\n    # 33. dp[0][32] = 13704911\n    # 34. dp[0][33] = 2644875\n    # 35. dp[0][34] = 48317361\n    # 36. dp[0][35] = 85297937\n    # 37. dp[0][36] = 137311369\n    # 38. dp[0][37] = 264963627\n    # 39. dp[0][38] = 483173619\n    # 40. dp[0][39] = 852979379\n    # 41. dp[0][40] = 137311369\n    # 42. dp[0][41] = 264963619\n    # 43. dp[0][42] = 483173619\n    # 44. dp[0][43] = 852979379\n    # 45. dp[0][44] = 137311369\n    # 46. dp[0][45] = 264963619\n    # 47. dp[0][46] = 483173619\n    # 48. dp[0][47] = 852979379\n    # 49. dp[0][48] = 137311369\n    # 50. dp[0][49] = 264963619\n    # 51. dp[0][50] = 483173619\n    # 52. dp[0][51] = 852979379\n    # 53. dp[0][52] = 137311369\n    # 54. dp[0][53] = 264963619\n    # 55. dp[0][54] = 483173619\n    # 56. dp[0][55] = 852979379\n    # 57. dp[0][56] = 137311369\n    # 58. dp[0][57] = 264963619\n    # 59. dp[0][58] = 483173619\n    # 60. dp[0][59] = 852979379\n    # 61. dp[0][60] = 137311369\n    # 62. dp[0][61] = 264963619\n    # 63. dp[0][62] = 483173619\n    # 64. dp[0][63] = 852979379\n    # 65. dp[0][64] = 137311369\n    # 66. dp[0][65] = 264963619\n    # 67. dp[0][66] = 483173619\n    # 68. dp[0][67] = 852979379\n    # 69. dp[0][68] = 137311369\n    # 70. dp[0][69] = 264963619\n    # 71. dp[0][70] = 483173619\n    # 72. dp[0][71] = 852979379\n    # 73. dp[0][72] = 137311369\n    # 74. dp[0][73] = 264963619\n    # 75. dp[0][74] = 483173619\n    # 76. dp[0][75] = 852979379\n    # 77. dp[0][76] = 137311369\n    # 78. dp[0][77] = 264963619\n    # 79. dp[0][78] = 483173619\n    # 80. dp[0][79] = 852979379\n    # 81. dp[0][80] = 137311369\n    # 82. dp[0][81] = 264963619\n    # 83. dp[0][82] = 483173619\n    # 84. dp[0][83] = 852979379\n    # 85. dp[0][84] = 137311369\n    # 86. dp[0][85] = 264963619\n    # 87. dp[0][86] = 483173619\n    # 88. dp[0][87] = 852979379\n    # 89. dp[0][88] = 137311369\n    # 90. dp[0][89] = 264963619\n    # 91. dp[0][90] = 483173619\n    # 92. dp[0][91] = 852979379\n    # 93. dp[0][92] = 137311369\n    # 94. dp[0][93] = 264963619\n    # 95. dp[0][94] = 483173619\n    # 96. dp[0][95] = 852979379\n    # 97. dp[0][96] = 137311369\n    # 98. dp[0][97] = 264963619\n    # 99. dp[0][98] = 483173619\n    # 100. dp[0][99] = 852979379\n    # 101. dp[0][100] = 137311369\n    # 102. dp[0][101] = 264963619\n    # 103. dp[0][102] = 483173619\n    # 104. dp[0][103] = 852979379\n    # 105. dp[0][104] = 137311369\n    # 106. dp[0][105] = 264963619\n    # 107. dp[0][106] = 483173619\n    # 108. dp[0][107] = 852979379\n    # 109. dp[0][108] = 137311369\n    # 110. dp[0][109] = 264963619\n    # 111. dp[0][11"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    def isMonotonic(A): \n        # Write your code here\n        return all(x <= y for x, y in zip(A, A[1:])) or all(x >= y for x, y in zip(A, A[1:])) \n        \n    \n    # another way\n    def isMonotonic(A): \n        # Write your code here\n        increasing = decreasing = True\n        \n        for i in range(len(A) - 1):\n            if A[i] > A[i + 1]:\n                increasing = False\n            if A[i] < A[i + 1]:\n                decreasing = False\n        return increasing or decreasing "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #Code here\n    n = len(A)\n    for i in range(n-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    is_monotonic = True\n    for i in range(n - 1): \n        if A[i] > A[i + 1]: \n            is_monotonic = False\n            break\n    for i in range(n - 1): \n        if A[i] < A[i + 1]: \n            is_monotonic = False\n            break\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = 1\n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            flag = 0\n            break\n    return flag\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = len(A) - 1\n    while j >= i:\n        if A[i] > A[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Your code here\n    A = sorted(A)\n    \n    if(A == sorted(A)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing = decreasing = False\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = True\n        elif A[i] < A[i + 1]:\n            decreasing = True\n        else:\n            continue\n        if increasing and decreasing:\n            break\n    return not increasing and not decreasing\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_length = len(s)\n    l_length = len(l)\n    s_start_index = 0\n    l_start_index = 0\n    if l_length < s_length:\n        return False\n    while l_start_index < l_length and s_start_index < s_length:\n        if l[l_start_index]!= s[s_start_index]:\n            return False\n        s_start_index += 1\n        l_start_index += 1\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    if s[0] < l[0]:\n        return False\n    if s[0] == l[0] and len(l) > 1:\n        return is_sublist(l[1:], s[1:])\n    if s[0] == l[0] and len(l) == 1 and len(s) == 1:\n        return True\n    if s[0] == l[0] and len(l) == 1 and len(s) == 2:\n        if s[1] < l[1]:\n            return False\n        if s[1] == l[1] and len(l) > 1:\n            return is_sublist(l[2:], s[2:])\n        if s[1] == l[1] and len(l) == 1 and len(s) == 2:\n            return True\n    if s[0] == l[0] and len(l) > 1:\n        if is_sublist(l[1:], s):\n            return True\n    if s[0] == l[0] and len(l) == 1 and len(s) == 1:\n        return True\n    if s[0] == l[0] and len(l) == 1 and len(s) == 2:\n        if s[1] < l[1]:\n            return False\n        if s[1] == l[1] and len(l) > 1:\n            return is_sublist(l[2:], s[2:])\n        if s[1] == l[1] and len(l) == 1 and len(s) == 2:\n            return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0 or len(s) == 0:\n        return False\n    elif s[0] < l[0]:\n        return False\n    elif s[-1] > l[-1]:\n        return False\n    else:\n        return is_sublist(l[1:-1], s[1:-1])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    elif len(l) == len(s):\n        return True\n    else:\n        for i in range(0, len(l)):\n            if l[i]!= s[i]:\n                return False\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    count = 0\n    if len(l) == len(s):\n        while i < len(l):\n            if l[i] == s[i]:\n                count += 1\n            i += 1\n        if count == len(s):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def return_equal_length(Input):\n        for i in range(0,len(Input)):\n            for j in range(i,len(Input)):\n                if len(Input[i])!= len(Input[j]):\n                    return False\n        return True\n    if return_equal_length(Input):\n        for i in range(0,len(Input)):\n            for j in range(i,len(Input)):\n                if Input[i]!= Input[j]:\n                    return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)!= len(set(tuple(i) for i in Input)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_len = False\n    for tup1, tup2, tup3 in zip(Input[0::3], Input[1::3], Input[2::3]):\n        if len(tup1)!= len(tup2) or len(tup1)!= len(tup3):\n            equal_len = True\n            break\n    return equal_len\n    \nInput = [(1, 2, 3), (4,), (1, 2, 3, 4)]\nprint(find_equal_tuple(Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def check_equal_length(*args):\n        length = args[0]\n        for arg in args[1:]:\n            if len(arg)!= length:\n                return False\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Naive solution\n    # Time complexity : O(n^2)\n    # Space complexity: O(1)\n    # Check if there is any tuple with length not equal to length of all other tuples\n    # return all true or all false depending on whether all the length are equal or not\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if isinstance(Input, list) == False:\n        return 0\n    if len(Input) == 0:\n        return 0\n    Input = tuple(Input)\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return 0\n    return 1"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #for i in range(0,len(nums)-1):\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i]>nums[j]:\n                tmp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = tmp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    for i in range(n-1):\n        for j in range(n-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    for i in range(n-1):\n        if nums[i] > nums[i+1]:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length\n    while gap > 1:\n        gap = gap // 2\n        for i in range(gap, length):\n            temp = nums[i]\n            j = i\n            while j >= gap and nums[j - gap] > temp:\n                nums[j] = nums[j - gap]\n                j -= gap\n            nums[j] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swaps = 0\n    compares = 0\n    comp_val = 0\n    for i in range(len(nums) - 1):\n        for j in range(len(nums) - 1):\n            compares += 1\n            if nums[j] > nums[j + 1]:\n                comp_val = nums[j]\n                nums[j] = nums[j + 1]\n                nums[j + 1] = comp_val\n                swaps += 1\n    return compares, swaps"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums)<=1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    combsort(nums, 0, n - 1)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print(\"Starting comb sort\")\n    for i in range(len(nums) - 1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    print(\"Ending comb sort\")\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # nums.sort()\n    def comb_sort(nums):\n        '''\n        Write a function to sort a list of elements.\n        '''\n        if not nums:\n            return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    ans=True\n    s=n**0.5\n    for i in range(2, int(s)+1):\n        if n%i==0:\n            ans=False\n            break\n    return ans\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n==(n**0.5)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #definig function\n    def square(n):\n        #if the value is negative, it cannot be squared\n        if n < 0:\n            print(\"{0} is not a perfect square\".format(n))\n            return\n        #if the value is zero, it is a perfect square\n        elif n == 0:\n            print(\"{0} is a perfect square\".format(n))\n            return\n        else:\n            #otherwise, the value is less than square root of itself\n            for i in range(int(sqrt(n))):\n                if n - i*i == 0:\n                    print(\"{0} is a perfect square\".format(n))\n                    return\n            #otherwise, it is a lesser perfect square\n            print(\"{0} is a lesser perfect square\".format(n))\n            return\n    \n    def dif_square(n):\n        #if the value is negative, it cannot be squared\n        if n < 0:\n            print(\"{0} is not a perfect square\".format(n))\n            return\n        #if the value is zero, it is a perfect square\n        elif n == 0:\n            print(\"{0} is a perfect square\".format(n))\n            return\n        else:\n            #otherwise, the value is less than square root of itself\n            for i in range(int(sqrt(n))):\n                if n - i*i == 0:\n                    print(\"{0} is a perfect square\".format(n))\n                    return\n            #otherwise, it is a lesser perfect square\n            print(\"{0} is a lesser perfect square\".format(n))\n            return\n    \n    #if the given number is negative or zero, the function returns false\n    if n < 0 or n == 0:\n        print(\"{0} is not a perfect square\".format(n))\n        return\n    #otherwise, the function returns true\n    else:\n        print(\"{0} is a perfect square\".format(n))\n        return\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    if (n*n) == n:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return abs(n) < 100 \n    \ndef diff_square_num(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return (n**0.5) < 100\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return n%2 == 0\n    \ndef div_by_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the quotient of two integers or not.\n    '''\n    return "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i * i <= n:\n        if n == i * i:\n            return True\n        i += 1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        print(\"The input must be a positive number!\")\n        return\n    a = n ** 0.5\n    b = int(a + 1) ** 2\n    if b - n == 0:\n        print(\"Yes, given number can be represented by the difference of two squares!\")\n    else:\n        print(\"No, given number cannot be represented by the difference of two squares!\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return True if (n-1)**2 == n else False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = int(sqrt(n))\n    if (i*i == n):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def square(n):\n        return n**2\n    def diff(n):\n        return square(n)-n\n    if n in map(square, range(1, 10001)):\n        return True\n    elif n in map(diff, range(1, 10001)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return True\n    elif len(colors) == 1 and len(patterns) == 0:\n        return True\n    elif len(patterns) == 0:\n        return False\n    else:\n        if patterns[0] == 'no':\n            return False\n        else:\n            if patterns[0] == 'not':\n                colors.remove(colors[0])\n                patterns = patterns[1:]\n            else:\n                if len(colors) == 1:\n                    return True\n                else:\n                    if patterns[0] =='red':\n                        for i in range(len(colors)):\n                            if colors[i] =='red':\n                                continue\n                            else:\n                                if is_samepatterns(colors[i:], patterns[1:]):\n                                    return True\n                                else:\n                                    return False\n                    else:\n                        for i in range(len(colors)):\n                            if colors[i] == 'green':\n                                continue\n                            else:\n                                if is_samepatterns(colors[i:], patterns[1:]):\n                                    return True\n                                else:\n                                    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[0]!= patterns[i][0]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # print(\"Colors: \", colors)\n    # print(\"Patterns: \", patterns)\n    colors_sorted = sorted(colors)\n    pattern_sorted = sorted(patterns)\n    # print(\"Sorted Colors: \", colors_sorted)\n    # print(\"Sorted Patterns: \", pattern_sorted)\n    if colors_sorted == pattern_sorted:\n        print(\"All patterns are present\")\n        return True\n    else:\n        print(\"Some patterns are missing\")\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(colors)):\n        if (colors[i] == patterns[count]):\n            count += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(patterns):\n        if patterns[i] == 'R':\n            if colors[i] == colors[i + 1]:\n                i = i + 1\n            else:\n                return False\n        elif patterns[i] == 'B':\n            if colors[i] == colors[i - 1]:\n                i = i - 1\n            else:\n                return False\n        elif patterns[i] == 'G':\n            if colors[i] == colors[i - 1] or colors[i] == colors[i + 1]:\n                i = i + 1\n            else:\n                return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    prev_color = None\n    for color in colors:\n        if not prev_color:\n            prev_color = color\n        else:\n            if prev_color!= color:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    print(colors, patterns)\n    for pattern in patterns:\n        if colors!= pattern:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0: return True\n    if len(colors)!= len(patterns): return False\n    if len(colors) < len(patterns): return False\n    \n    last_color = colors[0]\n    for i in range(len(patterns)):\n        color = colors[i]\n        if pattern_is_same_color(last_color, color):\n            last_color = color\n        else:\n            return False\n    return True\n    \ndef valid_color_sequence(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors.sort()\n    if len(colors) == 0: return True\n    if len(colors) == 1: return True\n    if colors[0] == colors[1] and colors[0] == colors[2]:\n        return True\n    \n    return False\n    \ndef first_match_index(patterns, text):\n    '''\n    Write a function that finds the first occurrence of a pattern in a text, and returns the start index.\n    '''\n    pattern = text[0]\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        if pattern_match(pattern, text):\n            return 0\n    return -1\n    \ndef first_match_index_with_regex(patterns, text):\n    '''\n    Write a function that finds the first occurrence of a pattern in a text, and returns the start index.\n    '''\n    pattern = r''+text[0]+''\n    for i in range(len(patterns)):\n        pattern = patterns[i]+r''\n        if re.match(pattern, text):\n            return 0\n    return -1\n    \ndef remove_duplicate(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(lst))\n    \ndef remove_duplicate_without_sorting(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    \n    if len(lst) == 0: return []\n    if len(lst) == 1: return lst\n    \n    start = 0\n    for i in range(1, len(lst)):\n        if lst[start]!= lst[i]:\n            start += 1\n            lst[start] = lst[i]\n    return lst[:start+1]\n    \ndef remove_duplicate_without_sorting_using_dict(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(lst) == 0: return []\n    if len(lst) == 1: return lst\n    \n    d = dict()\n    for i in range(len(lst)):\n        if lst[i] not in d:\n            d[lst[i]] = 1\n        else:\n            d[lst[i]] += 1\n    return [k for k,v in d.items() if v == 1]\n    \ndef remove_duplicate_without_sorting_using_list(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(lst) == 0: return []\n    if len(lst) == 1: return lst\n    \n    s = set()\n    for i in range(len(lst)):\n        s.add(lst[i])\n    return list(s)\n    \ndef remove_duplicate_using_sorted(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(lst) == 0: return []\n    if len(lst) == 1: return lst\n    \n    lst = sorted(lst)\n    prev = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i]!= prev:\n            prev = lst[i]\n        else:\n            lst.pop(i)\n    return lst\n    \ndef remove_duplicate_using_sorted_using_set(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    if len(lst) == 0: return []\n    if len(lst) == 1: return lst\n    \n    s = set()\n    for i in range(len(lst)):\n        if lst[i] not in s:\n            s.add(lst[i])\n        else:\n            lst.pop(i)\n    return lst\n    \ndef duplicate_count(text):\n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    \n    d = dict()\n    for i in range(len(text)):\n        if text[i] in d:\n            d[text[i]] += 1\n        else:\n            d[text[i]] = 1\n    return len(d)\n    \ndef duplicate_count_using_dict(text):\n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    \n    d = dict()\n    for i in range(len(text)):\n        if text[i] in d:\n            d[text[i]] += 1\n        else:\n            d[text[i]] = 1\n    return len(d)\n    \ndef duplicate_count_using_set(text):\n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    \n    s = set()\n    for i in range(len(text)):\n        if text[i] in s:\n            s.add(text[i])\n        else:\n            s.add(text[i])\n    return len(s)\n    \ndef duplicate_count_using_sorted(text):\n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    \n    lst = list(text)\n    lst.sort()\n    lst = sorted(lst)\n    \n    prev = lst[0]\n    count = 0\n    for i in range(1, len(lst)):\n        if lst[i]!= prev:\n            prev = lst[i]\n            count += 1\n    return count\n    \ndef duplicate_count_using_sorted_using_set(text):\n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    \n    s = set()\n    for i in range(len(text)):\n        if text[i] in s:\n            s.add(text[i])\n        else:\n            s.add(text[i])\n    return len(s)\n    \ndef number_of_words(text):\n    '''\n    Write a function that returns the number of words in a string.\n    '''\n    \n    lst = text.split()\n    return len(lst)\n    \ndef number_of_words_using_sorted(text):\n    '''\n    Write a function that returns the number of words in a string.\n    '''\n    \n    s = sorted(text.split())\n    return len(s)\n    \ndef number_of_words_using_sorted_using_set(text):\n    '''\n    Write a function that returns the number of words in a string.\n    '''\n    \n    s = set()\n    for i in range(len(text)):\n        if text[i] in s:\n            s.add(text[i])\n        else:\n            s.add(text[i])\n    return len(s)\n    \ndef number_of_words_using_set(text):\n    '''\n    Write a function that returns the number of words in a string.\n    '''\n    \n    s = set()\n    for i in range(len(text)):\n        if text[i] in s:\n            s.add(text[i])\n        else:\n            s.add(text[i])\n    return len(s)\n    \ndef number_of_words_using_list(text):\n    '''\n    Write a function that returns the number of words in a string.\n    '''\n    "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    first = 0\n    second = 0\n    # first pattern\n    while (first < len(colors) and second < len(patterns)):\n        if (colors[first] == patterns[second]):\n            first += 1\n        second += 1\n    return first == len(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepattern(colors, pattern):\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    '''\n    Solution 2:\n    Time O(N^2) | Space O(N)\n    '''\n    # create a list of lists to store the tuples\n    out = []\n    \n    # traverse through the list to make sure the k satisfies the conditions\n    for i in range(len(test_list)):\n        # get the first value of each tuple\n        first = test_list[i][0]\n        # get the last value of each tuple\n        last = test_list[i][-1]\n        \n        # the condition to check whether it satisfies the conditions\n        if first % K == 0 and last % K == 0:\n            out.append(test_list[i])\n    \n    # return the tuple list\n    return out\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    \n    for k in test_list:\n        if all(i % K == 0 for i in k):\n            tuple_list.append(k)\n    \n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[j][0] % K == 0 and test_list[i][1] == test_list[j][1]:\n                result.append(test_list[i])\n                result.append(test_list[j])\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    i = 0\n    while i < len(test_list):\n        if test_list[i][1] % K!= 0:\n            i += 1\n            continue\n        i += 1\n        j = i\n        while j < len(test_list):\n            if test_list[j][1] % K!= 0:\n                j += 1\n                continue\n            j += 1\n            if j < len(test_list):\n                i += 1\n            else:\n                break\n    \n    return test_list[i:]\n    \n    \ntest_list = [(1, 5), (2, 10), (3, 12), (4, 10), (5, 20)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    return ans\n    \n    \ndef find_n_tuples(test_list, K):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < n:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_n_tuples(ans, K-1)\n            \n            \ndef find_K_tuples(test_list, K):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < k:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_K_tuples(ans, K-1)\n            \ndef find_n_tuples_binary(test_list, K):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < n:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_n_tuples_binary(ans, K-1)\n            \n            \ndef find_K_tuples_binary(test_list, K):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < k:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_K_tuples_binary(ans, K-1)\n            \n            \ndef find_n_tuples_modular(test_list, mod_n):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < n:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_n_tuples_modular(ans, mod_n-1)\n            \n            \ndef find_K_tuples_modular(test_list, mod_k):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < k:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_K_tuples_modular(ans, mod_k-1)\n            \n            \ndef find_n_tuples_perm(test_list, n):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < n:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_n_tuples_perm(ans, n-1)\n            \n            \ndef find_K_tuples_perm(test_list, K):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < k:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_K_tuples_perm(ans, K-1)\n            \n            \ndef find_n_tuples_fac(test_list, n):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < n:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_n_tuples_fac(ans, n-1)\n            \n            \ndef find_K_tuples_fac(test_list, K):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < k:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_K_tuples_fac(ans, K-1)\n            \n            \ndef find_n_tuples_modular_2(test_list, n):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < n:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_n_tuples_modular_2(ans, n-1)\n            \n            \ndef find_K_tuples_modular_2(test_list, K):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if all(i%k==0 for i in test_list[i]):\n            ans.append(test_list[i])\n    if len(ans) < k:\n        return ans\n    else:\n        if K == 1:\n            return ans\n        else:\n            return find_K_tuples_modular_2(ans, K-1)\n            \n            \ndef find_n_tuples_divisors(test_list, n):\n    '''\n    Write a function to find n tuples which have all elements divisible by k from the given list o"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #initializing output list\n    output_list = []\n    #iterating through each tuple in the given list\n    for tup in test_list:\n        #initializing sum variable\n        sum_val = 0\n        #iterating through each element in the given tuple\n        for i in tup:\n            #comparing each element with sum_val\n            if i%K==0:\n                sum_val += i\n        #if sum_val is divisible by K, add tuple to output list\n        if sum_val%K == 0:\n            output_list.append(tup)\n    return output_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [[x for x in tup if x%k == 0] for tup in test_list]\n    \nif __name__ == \"__main__\":\n    test_list = [(1,2), (4,5), (7,8)]\n    print(find_tuples(test_list, 3)) # Should print [(1,2), (4,5), (7,8)]\n    test_list = [(2,3), (4,5), (6,7)]\n    print(find_tuples(test_list, 3)) # Should print [(2,3), (4,5), (6,7)]\n    test_list = [(1,2,3,4), (4,5,6,7), (8,9,10,11)]\n    print(find_tuples(test_list, 3)) # Should print [(1,2,3), (4,5,6), (8,9,10)"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(a,b) for a, b in test_list if a % K == 0 or b % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Implement your code here\n    from itertools import combinations\n    for i in range(len(test_list)):\n        if (K%test_list[i][0]!=0) or (K%test_list[i][1]!=0) or (K%test_list[i][2]!=0):\n            continue\n        else:\n            print(\"{} and {} and {}\".format(test_list[i][0],test_list[i][1],test_list[i][2]))\n            return (test_list[i][0],test_list[i][1],test_list[i][2])\n        \n    \n    \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11==0)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    # return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\n    \ndef is_Div(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    if n%21 == 0:\n        return True\n    return False\n    \ndef is_Div_2(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_3(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return True if n%11==0 else True if n%21==0 else False\n    \ndef is_Div_4(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_5(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 and n%21==0\n    \ndef is_Div_6(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return True if n%11==0 else True if n%21==0 else False\n    \ndef is_Div_7(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return (n%11==0 or n%21==0)\n    \ndef is_Div_8(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 and n%21==0\n    \ndef is_Div_9(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_10(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_11(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return (n%11==0 or n%21==0)\n    \ndef is_Div_12(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_13(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_14(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return (n%11==0 or n%21==0)\n    \ndef is_Div_15(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_16(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return (n%11==0 or n%21==0)\n    \ndef is_Div_17(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_18(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_19(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_20(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_21(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_22(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return (n%11==0 or n%21==0)\n    \ndef is_Div_23(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_24(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return (n%11==0 or n%21==0)\n    \ndef is_Div_25(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_26(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_27(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_28(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_29(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_30(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_31(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_32(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_33(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_34(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_35(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_36(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_37(n):\n    '''\n    Write a python function to find whether a number is divisible by 11 or 21.\n    '''\n    return n%11==0 or n%21==0\n    \ndef is_Div_38(n)"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    print('Output of the function word_len : {}'.format(word_len(s))) \n    if len(s) % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \n    \n        \n    \n    \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l=len(s)\n    print(l%2==0)\nword_len('kumar')\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    # your code here\n    # word_len('hello')\n    # word_len('a')\n    # word_len('hello')\n    if len(s) % 2!= 0:\n        return 'odd'\n    else:\n        return 'even'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.strip().split()\n    return len(s) == len(set(s))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s)%2)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length%2 == 0:\n        print(\"Word Length is even\")\n    else:\n        print(\"Word Length is odd\")\nword_len(\"siddharth\")\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    for i in range(n):\n        a = a*(n-i)\n    return a\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    ans = n * (3 * n - 1) / 2\n    return ans\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initializing some variables\n    tetrahedral_number_list = [] \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 0\n    if n == 1:\n        return 5\n    while True:\n        for i in range(1, n):\n            num += 4\n        n = n - 1\n        if n == 0:\n            return num\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 7\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3) + tetrahedral_number(n - 4)"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 14\n    elif n == 3:\n        return 28\n    elif n == 4:\n        return 132\n    elif n == 5:\n        return 544\n    elif n == 6:\n        return 1108\n    elif n == 7:\n        return 35840\n    elif n == 8:\n        return 240144\n    elif n == 9:\n        return 568288\n    elif n == 10:\n        return 1968648\n    elif n == 11:\n        return 8640000\n    elif n == 12:\n        return 3243232\n    elif n == 13:\n        return 16169632\n    elif n == 14:\n        return 69364608\n    elif n == 15:\n        return 240536352\n    elif n == 16:\n        return 928976704\n    elif n == 17:\n        return 467136128\n    elif n == 18:\n        return 2176384384\n    elif n == 19:\n        return 887344448\n    elif n == 20:\n        return 4893948828\n    elif n == 21:\n        return 2323027072\n    elif n == 22:\n        return 9713236896\n    elif n == 23:\n        return 5381512096\n    elif n == 24:\n        return 2202379043\n    elif n == 25:\n        return 9383555296\n    elif n == 26:\n        return 5381512096\n    elif n == 27:\n        return 24444836944\n    elif n == 28:\n        return 10112844032\n    elif n == 29:\n        return 69364608\n    elif n == 30:\n        return 3243232\n    elif n == 31:\n        return 1689788704\n    elif n == 32:\n        return 69364608\n    elif n == 33:\n        return 2323027072\n    elif n == 34:\n        return 9713236896\n    elif n == 35:\n        return 5381512096\n    elif n == 36:\n        return 2202379043\n    elif n == 37:\n        return 887344448\n    elif n == 38:\n        return 4893948828\n    elif n == 39:\n        return 2323027072\n    elif n == 40:\n        return 9713236896\n    elif n == 41:\n        return 5381512096\n    elif n == 42:\n        return 24444836944\n    elif n == 43:\n        return 10112844032\n    elif n == 44:\n        return 69364608\n    elif n == 45:\n        return 3243232\n    elif n == 46:\n        return 1689788704\n    elif n == 47:\n        return 69364608\n    elif n == 48:\n        return 2323027072\n    elif n == 49:\n        return 9713236896\n    elif n == 50:\n        return 5381512096\n    elif n == 51:\n        return 2202379043\n    elif n == 52:\n        return 887344448\n    elif n == 53:\n        return 4893948828\n    elif n == 54:\n        return 2323027072\n    elif n == 55:\n        return 9713236896\n    elif n == 56:\n        return 5381512096\n    elif n == 57:\n        return 24444836944\n    elif n == 58:\n        return 10112844032\n    elif n == 59:\n        return 69364608\n    elif n == 60:\n        return 3243232\n    elif n == 61:\n        return 1689788704\n    elif n == 62:\n        return 69364608\n    elif n == 63:\n        return 2323027072\n    elif n == 64:\n        return 9713236896\n    elif n == 65:\n        return 5381512096\n    elif n == 66:\n        return 2202379043\n    elif n == 67:\n        return 887344448\n    elif n == 68:\n        return 4893948828\n    elif n == 69:\n        return 2323027072\n    elif n == 70:\n        return 9713236896\n    elif n == 71:\n        return 5381512096\n    elif n == 72:\n        return 24444836944\n    elif n == 73:\n        return 10112844032\n    elif n == 74:\n        return 69364608\n    elif n == 75:\n        return 3243232\n    elif n == 76:\n        return 1689788704\n    elif n == 77:\n        return 69364608\n    elif n == 78:\n        return 2323027072\n    elif n == 79:\n        return 9713236896\n    elif n == 80:\n        return 5381512096\n    elif n == 81:\n        return 2202379043\n    elif n == 82:\n        return 887344448\n    elif n == 83:\n        return 4893948828\n    elif n == 84:\n        return 2323027072\n    elif n == 85:\n        return 9713236896\n    elif n == 86:\n        return 5381512096\n    elif n == 87:\n        return 24444836944\n    elif n == 88:\n        return 10112844032\n    elif n == 89:\n        return 69364608\n    elif n == 90:\n        return 3243232\n    elif n == 91:\n        return 1689788704\n    elif n == 92:\n        return 69364608\n    elif n == 93:\n        return 2323027072\n    elif n == 94:\n        return 9713236896\n    elif n == 95:\n        return 5381512096\n    elif n == 96:\n        return 2202379043\n    elif n == 97:\n        return 887344448\n    elif n == 98:\n        return 4893948828\n    elif n == 99:\n        return 2323027072\n    elif n == 100:\n        return 9713236896\n    elif n == 101:\n        return 5381512096\n    elif n == 102:\n        return 24444836944\n    elif n == 103:\n        return 10112844032\n    elif n == 104:\n        return 69364608\n    elif n == 105:\n        return 3243232\n    elif n == 106:\n        return 1689788704\n    elif n == 107:\n        return 69364608\n    elif n == 108:\n        return 2323027072\n    elif n == 109:\n        return 9713236896\n    elif n == 110:\n        return 5381512096\n    elif n == 111:\n        return 2202379043\n    elif n == 112:\n        return 887344448\n    elif n == 113:\n        return 4893948828\n    elif n == 114:\n        return 2323027072\n    elif n == 115:\n        return 9713236896\n    elif n == 116:\n        return 5381512096\n    elif n == 117:\n        return 24444836944\n    elif n == 118:\n        return 10112844032\n    elif n == 119:\n        return 69364608\n    elif n == 120:\n        return 3243232\n    elif n == 121:\n        return 1689788704\n    elif n == 122:\n        return 69364608\n    elif n == 123:\n        return 2323027072\n    elif n == 124:\n        return 9713236896\n    elif n == 125:\n        return 5381512096\n    elif n == 126:\n        return 2202379043\n    elif n == 127:\n        return 887344448\n    elif n == 128:\n        return 4893948828\n    elif n == 129:\n        return 2323027072\n    elif n == 130:\n        return 9713236896\n    elif n == 131"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 12\n    else:\n        return 0\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    #First question\n    #First check if n is negative\n    if n<0:\n        #return n*(n-1)\n        return 0\n    if n==0:\n        return 1\n    if n==1:\n        return 4\n    if n==2:\n        return 7\n    if n==3:\n        return 14\n    if n==4:\n        return 28\n    if n==5:\n        return 70\n    if n==6:\n        return 144\n    if n==7:\n        return 368\n    if n==8:\n        return 704\n    if n==9:\n        return 1440\n    if n==10:\n        return 2880\n    if n==11:\n        return 7040\n    if n==12:\n        return 14112\n    if n==13:\n        return 28720\n    if n==14:\n        return 70480\n    if n==15:\n        return 140360\n    if n==16:\n        return 288080\n    if n==17:\n        return 706160\n    if n==18:\n        return 1411200\n    if n==19:\n        return 2872080\n    if n==20:\n        return 704160\n    if n==21:\n        return 1405120\n    if n==22:\n        return 2880080\n    if n==23:\n        return 706320\n    if n==24:\n        return 1404160\n    if n==25:\n        return 2880320\n    if n==26:\n        return 7068040\n    if n==27:\n        return 14048160\n    if n==28:\n        return 28808160\n    if n==29:\n        return 70680640\n    if n==30:\n        return 14052320\n    if n==31:\n        return 28808192\n    if n==32:\n        return 70680768\n    if n==33:\n        return 14054544\n    if n==34:\n        return 28808384\n    if n==35:\n        return 70680768\n    if n==36:\n        return 14056032\n    if n==37:\n        return 28808576\n    if n==38:\n        return 7068080\n    if n==39:\n        return 14057520\n    if n==40:\n        return 28808288\n    if n==41:\n        return 70680640\n    if n==42:\n        return 140575520\n    if n==43:\n        return 288084896\n    if n==44:\n        return 70680896\n    if n==45:\n        return 14057872\n    if n==46:\n        return 28808960\n    if n==47:\n        return 70680384\n    if n==48:\n        return 14057872\n    if n==49:\n        return 28808672\n    if n==50:\n        return 70680768\n    if n==51:\n        return 14057984\n    if n==52:\n        return 28808672\n    if n==53:\n        return 70680480\n    if n==54:\n        return 14057104\n    if n==55:\n        return 288086400\n    if n==56:\n        return 70680640\n    if n==57:\n        return 14058848\n    if n==58:\n        return 288086784\n    if n==59:\n        return 70680640\n    if n==60:\n        return 14058888\n    if n==61:\n        return 288086784\n    if n==62:\n        return 70680640\n    if n==63:\n        return 14058912\n    if n==64:\n        return 288086816\n    if n==65:\n        return 70680640\n    if n==66:\n        return 14058976\n    if n==67:\n        return 288086960\n    if n==68:\n        return 70680480\n    if n==69:\n        return 14059040\n    if n==70:\n        return 288086960\n    if n==71:\n        return 70680320\n    if n==72:\n        return 14059040\n    if n==73:\n        return 288084896\n    if n==74:\n        return 70680384\n    if n==75:\n        return 14059160\n    if n==76:\n        return 288086784\n    if n==77:\n        return 70680480\n    if n==78:\n        return 14059424\n    if n==79:\n        return 288086784\n    if n==80:\n        return 70680320\n    if n==81:\n        return 14059296\n    if n==82:\n        return 288086960\n    if n==83:\n        return 70680768\n    if n==84:\n        return 14059424\n    if n==85:\n        return 288086960\n    if n==86:\n        return 70680384\n    if n==87:\n        return 14059336\n    if n==88:\n        return 288086784\n    if n==89:\n        return 70680480\n    if n==90:\n        return 14059376\n    if n==91:\n        return 288086784\n    if n==92:\n        return 70680320\n    if n==93:\n        return 14059376\n    if n==94:\n        return 288086784\n    if n==95:\n        return 70680768\n    if n==96:\n        return 14059424\n    if n==97:\n        return 288086784\n    if n==98:\n        return 70680768\n    if n==99:\n        return 14059424\n    if n==100:\n        return 288086784\n    if n==101:\n        return 70680768\n    if n==102:\n        return 14059424\n    if n==103:\n        return 28808960\n    if n==104:\n        return 70680480\n    if n==105:\n        return 14059376\n    if n==106:\n        return 28808960\n    if n==107:\n        return 70680320\n    if n==108:\n        return 14058912\n    if n==109:\n        return 28808960\n    if n==110:\n        return 70680384\n    if n==111:\n        return 14059336\n    if n==112:\n        return 28808960\n    if n==113:\n        return 70680480\n    if n==114:\n        return 14059424\n    if n==115:\n        return 28808960\n    if n==116:\n        return 70680640\n    if n==117:\n        return 14059696\n    if n==118:\n        return 28808960\n    if n==119:\n        return 70680480\n    if n==120:\n        return 14059424\n    if n==121:\n        return 28808960\n    if n==122:\n        return 70680384\n    if n==123:\n        return 14059424\n    if n==124:\n        return 28808960\n    if n==125:\n        return 70680320\n    if n==126:\n        return 14059696\n    if n==127:\n        return 28808960\n    if n==128:\n        return 70680640\n    if n==129:\n        return 14059424\n    if n==130:\n        return 28808960\n    if n==131:\n        return 70680768\n    if n==132:\n        return 14059424\n    if n==133:\n        return 28808960\n    if n==134:\n        return 70680384\n    if n==135:\n        return 14059336\n    if n==136:\n        return 28808960\n    if n==137:\n        return 70680480\n    if n==138:\n        return 14059376\n    if n==139:\n        return 28808960\n    if n==140:\n        return 70680640\n    if n==141:\n        return 14059424\n    if n==142:\n        return 28808960\n    if n==143:\n        return 70680480\n    if n==144:\n        return 14059376\n    if n==145:\n        return 28808960\n    if "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # n = 0\n    tetrahedral = [1,3,8,15,32,63,128,252,514,1512,5368,10752]\n    return tetrahedral[n]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return(4.0/3.0)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Write your code below and save the answer in the variable vol\n    vol = (4/3) * math.pi * (r**3)\n    return vol\n    \n    \nvol = volume_sphere(2)\nprint(vol)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*r*r*r\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\ndef volume_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*(r1**2+r2**2)*2\n    return volume\ndef surface_area_cylinder(r1,r2):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*(r1**2+r2**2)\n    return surface_area\ndef volume_cone(r1,r2):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3*math.pi*r1**2*r2**2\n    return volume\ndef surface_area_cone(r1,r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area = 1/3*math.pi*r1**2*r2**2+2*math.pi*r1*r2\n    return surface_area\ndef volume_torus(r1,r2):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    volume = 2/3*math.pi*(r1**2+r2**2)*math.sqrt(3)*r1\n    return volume\ndef surface_area_torus(r1,r2):\n    '''\n    Write a function to find the surface area of a torus.\n    '''\n    surface_area = 2/3*math.pi*(r1**2+r2**2)*math.sqrt(3)*r1+math.pi*r1*r2\n    return surface_area\ndef volume_pyramid(r1,r2):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = 1/3*(r1**2)*(r2**2)\n    return volume\ndef surface_area_pyramid(r1,r2):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surface_area = 1/3*(r1**2)*(r2**2)+r1*r2\n    return surface_area\ndef volume_parallelepiped(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = l*w*h\n    return volume\ndef surface_area_parallelepiped(l,w,h):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    surface_area = l*w*h+2*(l*w+l*h+w*h)\n    return surface_area\ndef volume_bball(r):\n    '''\n    Write a function to find the volume of a basketball.\n    '''\n    volume = 0.78*math.pi*r**3\n    return volume\ndef surface_area_bball(r):\n    '''\n    Write a function to find the surface area of a basketball.\n    '''\n    surface_area = 0.78*math.pi*r**2\n    return surface_area\ndef volume_capsule(r1,r2):\n    '''\n    Write a function to find the volume of a capsule.\n    '''\n    volume = math.pi*r1**2*(r2**2+r1**2-2*r2*math.sqrt(r1**2+r2**2))\n    return volume\ndef surface_area_capsule(r1,r2):\n    '''\n    Write a function to find the surface area of a capsule.\n    '''\n    surface_area = 2*math.pi*r1**2*(r2**2+r1**2-2*r2*math.sqrt(r1**2+r2**2))\n    return surface_area\ndef volume_cone_cone(r1,r2):\n    '''\n    Write a function to find the volume of a cone-cone.\n    '''\n    volume = 1/3*math.pi*r1**2*r2**2\n    return volume\ndef surface_area_cone_cone(r1,r2):\n    '''\n    Write a function to find the surface area of a cone-cone.\n    '''\n    surface_area = 1/3*math.pi*r1**2*r2**2+1/3*math.pi*r1*r2\n    return surface_area\ndef volume_cylinder_cone(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder-cone.\n    '''\n    volume = math.pi*r1*r2\n    return volume\ndef surface_area_cylinder_cone(r1,r2):\n    '''\n    Write a function to find the surface area of a cylinder-cone.\n    '''\n    surface_area = 2*math.pi*r1*r2\n    return surface_area\ndef volume_cone_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cone-cylinder.\n    '''\n    volume = 1/3*math.pi*(r1**2+r2**2)\n    return volume\ndef surface_area_cone_cylinder(r1,r2):\n    '''\n    Write a function to find the surface area of a cone-cylinder.\n    '''\n    surface_area = 1/3*math.pi*(r1**2+r2**2)+math.pi*r1*r2\n    return surface_area\ndef volume_cylinder_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder-cylinder.\n    '''\n    volume = math.pi*(r1**2+r2**2)-1/3*math.pi*r1*r2\n    return volume\ndef surface_area_cylinder_cylinder(r1,r2):\n    '''\n    Write a function to find the surface area of a cylinder-cylinder.\n    '''\n    surface_area = 2*math.pi*(r1**2+r2**2)-2*math.pi*r1*r2\n    return surface_area\ndef volume_cone_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cone-cylinder.\n    '''\n    volume = math.pi*(r1**2+r2**2)-math.pi*r1*r2\n    return volume\ndef surface_area_cone_cylinder(r1,r2):\n    '''\n    Write a function to find the surface area of a cone-cylinder.\n    '''\n    surface_area = 2*math.pi*(r1**2+r2**2)-2*math.pi*r1*r2+math.pi*r1\n    return surface_area\ndef volume_cone_cone_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cone-cone-cylinder.\n    '''\n    volume = 1/3*math.pi*(r1**2+r2**2)\n    return volume\ndef surface_area_cone_cone_cylinder(r1,r2):\n    '''\n    Write a function to find the surface area of a cone-cone-cylinder.\n    '''\n    surface_area = 1/3*math.pi*(r1**2+r2**2)\n    return surface_area\ndef volume_cylinder_cone_cone_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder-cone-cone-cylinder.\n    '''\n    volume = 1/3*math.pi*(r1**2+r2**2)\n    return volume\ndef surface_area_cylinder_cone_cone_cylinder(r1,r2):\n    '''\n    Write a function to find the surface area of a cylinde"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    print(volume)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #try:\n    if type(r)!= int and type(r)!= float:\n        raise TypeError('r must be a number')\n    elif r < 0:\n        raise ValueError('r must be a positive number')\n    elif r == 0:\n        return 4/3*math.pi\n    else:\n        return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    PI = 3.14159\n    PI_2 = PI * 2\n    PI_3 = PI * 3\n    radius = float(r)\n    volume = PI_3 * radius ** 3\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = []\n    for i in strr:\n        char.append(ord(i))\n    return (sum(char)%26)\n    \ndef get_Char2(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = []\n    for i in strr:\n        char.append((ord(i)-ord('A')+1)%26)\n    return (sum(char)%26)\n    \ndef get_Char3(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = []\n    for i in strr:\n        char.append((ord(i)-ord('A')+1)%26)\n    return (sum(char)%26)\n    \nif __name__ == \"__main__\":\n    \n    strr = \"A\"*100\n    \n    print(get_Char2(strr))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(i)%26 for i in strr])\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = ord(strr)\n    return (ans % 26) \n    # code here \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #code here\n    return (sum(ord(x) for x in strr) % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    return ''.join([chr(ord(i) + ord('a') - 1) for i in strr])\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # your code here\n    \n    s=0\n    for i in range(0,len(strr)):\n        s=s+(ord(strr[i]))\n    return s%26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    a=ord(strr[0])\n    for i in range(1,len(strr)):\n        a+=ord(strr[i])\n    return a%26\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count=0\n    str1=[]\n    for i in strr:\n        count+=ord(i)\n    count=count%26\n    for i in range(0,len(strr)):\n        str1.append(chr(count))\n        count=count+ord(str1[i])\n    print(str1)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Code here\n    new = 0\n    lst = []\n    for i in strr:\n        lst.append(ord(i))\n    for i in lst:\n        new = (new + i) % 26\n    return chr(new + 65)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = 1\n    for i in range(1, n):\n        seq = seq * 2 + 1\n    return seq\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    return sequence(n-1) + sequence(n-2) + sequence(n-3) \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    k = 1\n    while len(sequence) < n:\n        sequence += sequence[k-1:k+1]\n        k += 1\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = list(range(1,n+1))\n    sequence[0] = 0\n    sequence[1] = 1\n    for i in range(2,n+1):\n        sequence[i] = (sequence[i-1] + sequence[i-2]) % 10\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 3*sequence(n-1) + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n - sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return None\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #solution 1\n    # return n*(n+1)/2 - 1\n    \n    #solution 2\n    return 2 * (n*(n+1))/2\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    return 1 + sequence(n - 1)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4*pi*r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_surface_area = 4 * math.pi * (r**2)\n    print(f\"Sphere surface area: {sphere_surface_area}\")\n    return sphere_surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area\nprint(surfacearea_sphere(1))\nprint(surfacearea_sphere(2))\nprint(surfacearea_sphere(3))\nprint(surfacearea_sphere(4))\nprint(surfacearea_sphere(5))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area_sphere = 4 * math.pi * r * r\n    return area_sphere\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n    \nprint(surfacearea_sphere(2))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    surfacearea = (4 * math.pi * (r**2))\n    print(f'The surface area of the sphere with radius {r} is {surfacearea}')\n    print(f'The volume of the sphere with radius {r} is {volume}')\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r ** 2\n    return round(s, 2)\ndef findvolume_cuboid(x, y, z):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v = x * y * z\n    return v\ndef findvolume_pyramid(a, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v = a * h * (a + 2 * h)\n    return v\ndef findvolume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi * r * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * (h + math.pi)\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * (h + math.pi)\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * h\n    return v\ndef findvolume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    volume = 4.0/3.0 * math.pi * (r**3)\n    surfacearea = 4.0 * math.pi * (r**2)\n    return volume, surfacearea\n    \ndef calc_v_parallel_plane(theta, phi, R):\n    '''\n    Calculate the surface area of a parrallelel projection of the sphere\n    around the origin. This is given by the theta and phi.\n    '''\n    phi_0 = math.radians(phi)\n    theta_0 = math.radians(theta)\n    return (4 * math.pi * R**2 * (1 - math.cos(theta_0)) / 2) / (math.cos(theta_0) * math.sin(theta_0))\n    \ndef area_of_triangle(a, b, c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a + b + c) / 2.0\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \ndef find_volume_of_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    return (4/3)*pi*r**2*h\n    \ndef find_volume_of_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = math.pi\n    return pi * r**2 * h\n    \ndef calc_area_of_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n    \ndef calc_volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4*math.pi*r**3)/3.0\n    \ndef calc_volume_of_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    pi = math.pi\n    return (pi * r * h) + (pi * r**2 * h)\n    \ndef calc_volume_of_cylinder(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    pi = math.pi\n    return (pi * r * h) + (2 * pi * r**2 * h)\n    \ndef area_of_trapezium(a, b, c):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return 0.5 * (a + b + c)\n    \ndef find_volume_of_trapezium(a, b, c):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    return (a + b + c) / 3.0\n    \ndef find_volume_of_triangle(a, b, c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (a + b + c) / 2.0\n    \ndef find_volume_of_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return l**3\n    \ndef find_volume_of_dodecahedron(l):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    pi = math.pi\n    return (4/3)*pi*l**2*(2*l + 1)\n    \ndef find_volume_of_octahedron(l):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    pi = math.pi\n    return (4/3)*pi*l**2\n    \ndef find_volume_of_icosahedron(l):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    pi = math.pi\n    return (3 * pi * (2 * l**2 - l)) / 3.0\n    \ndef find_volume_of_pyramid(a, b, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (a * b) * h / 3\n    \ndef find_volume_of_tetrahedron(a, b, c, d):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (a + b + c + d) / 2.0\n    \ndef find_volume_of_hexahedron(a, b, c, d, e):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    return (a + b + c + d + e) / 6.0\n    \ndef find_volume_of_dodecahedron(l):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return l**2*(5*l + 4) / 6.0\n    \ndef find_volume_of_icosahedron(l):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    pi = math.pi\n    return (2*pi*l**3) / 3.0\n    \ndef find_volume_of_pyramid(a, b, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (a * b) * h / 2.0\n    \ndef find_volume_of_tetrahedron(a, b, c, d):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (a * b * c * d) / 2.0\n    \ndef find_volume_of_hexahedron(a, b, c, d, e):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    return (a * b * c * d * e) / 6.0\n    \ndef find_volume_of_dodecahedron(l):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return (3*(5*l**2 + 4) / 12.0)\n    \ndef find_volume_of_icosahedron(l):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    return (3*(6*l**2 - 2*l)) / 4.0\n    \ndef find_volume_of_octahedron(l):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    return (3*(4*l**2 - 2*l)) / 4.0\n    \ndef find_volume_of_icosahedron(l):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    pi = math.pi\n    return (3 * pi * (2 * l**2 - l)) / 3.0\n    \ndef find_volume_of_pyramid(a, b, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (a * b) * h / 2.0\n    \ndef find_volume_of_hexahedron(a, b, c, d, e):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    return (a * b * c * d * e) / 6.0\n    \ndef find_volume_of_dodecahedron(l):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return (l**3*(8*l**2 + 2*l)) / 3.0\n    \ndef find_volume_of_icosahedron(l):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    pi = math.pi\n    return (l**3*("
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 3\n    if n == 2:\n        return 7\n    if n == 3:\n        return 11\n    if n == 4:\n        return 15\n    if n == 5:\n        return 19\n    if n == 6:\n        return 23\n    if n == 7:\n        return 27\n    if n == 8:\n        return 31\n    if n == 9:\n        return 35\n    if n == 10:\n        return 39\n    if n == 11:\n        return 43\n    if n == 12:\n        return 47\n    if n == 13:\n        return 51\n    if n == 14:\n        return 55\n    if n == 15:\n        return 59\n    if n == 16:\n        return 63\n    if n == 17:\n        return 67\n    if n == 18:\n        return 71\n    if n == 19:\n        return 75\n    if n == 20:\n        return 79\n    if n == 21:\n        return 83\n    if n == 22:\n        return 87\n    if n == 23:\n        return 91\n    if n == 24:\n        return 95\n    if n == 25:\n        return 99\n    if n == 26:\n        return 103\n    if n == 27:\n        return 107\n    if n == 28:\n        return 111\n    if n == 29:\n        return 115\n    if n == 30:\n        return 119\n    if n == 31:\n        return 123\n    if n == 32:\n        return 127\n    if n == 33:\n        return 131\n    if n == 34:\n        return 135\n    if n == 35:\n        return 139\n    if n == 36:\n        return 143\n    if n == 37:\n        return 147\n    if n == 38:\n        return 151\n    if n == 39:\n        return 155\n    if n == 40:\n        return 159\n    if n == 41:\n        return 163\n    if n == 42:\n        return 167\n    if n == 43:\n        return 171\n    if n == 44:\n        return 175\n    if n == 45:\n        return 179\n    if n == 46:\n        return 183\n    if n == 47:\n        return 187\n    if n == 48:\n        return 191\n    if n == 49:\n        return 195\n    if n == 50:\n        return 199\n    if n == 51:\n        return 203\n    if n == 52:\n        return 207\n    if n == 53:\n        return 211\n    if n == 54:\n        return 215\n    if n == 55:\n        return 219\n    if n == 56:\n        return 223\n    if n == 57:\n        return 227\n    if n == 58:\n        return 231\n    if n == 59:\n        return 235\n    if n == 60:\n        return 239\n    if n == 61:\n        return 243\n    if n == 62:\n        return 247\n    if n == 63:\n        return 251\n    if n == 64:\n        return 255\n    if n == 65:\n        return 259\n    if n == 66:\n        return 263\n    if n == 67:\n        return 267\n    if n == 68:\n        return 271\n    if n == 69:\n        return 275\n    if n == 70:\n        return 279\n    if n == 71:\n        return 283\n    if n == 72:\n        return 287\n    if n == 73:\n        return 291\n    if n == 74:\n        return 295\n    if n == 75:\n        return 299\n    if n == 76:\n        return 303\n    if n == 77:\n        return 307\n    if n == 78:\n        return 311\n    if n == 79:\n        return 315\n    if n == 80:\n        return 319\n    if n == 81:\n        return 323\n    if n == 82:\n        return 327\n    if n == 83:\n        return 331\n    if n == 84:\n        return 335\n    if n == 85:\n        return 339\n    if n == 86:\n        return 343\n    if n == 87:\n        return 347\n    if n == 88:\n        return 351\n    if n == 89:\n        return 355\n    if n == 90:\n        return 359\n    if n == 91:\n        return 363\n    if n == 92:\n        return 367\n    if n == 93:\n        return 371\n    if n == 94:\n        return 375\n    if n == 95:\n        return 379\n    if n == 96:\n        return 383\n    if n == 97:\n        return 387\n    if n == 98:\n        return 391\n    if n == 99:\n        return 395\n    if n == 100:\n        return 399\n    if n == 101:\n        return 403\n    if n == 102:\n        return 407\n    if n == 103:\n        return 411\n    if n == 104:\n        return 415\n    if n == 105:\n        return 419\n    if n == 106:\n        return 423\n    if n == 107:\n        return 427\n    if n == 108:\n        return 431\n    if n == 109:\n        return 435\n    if n == 110:\n        return 439\n    if n == 111:\n        return 443\n    if n == 112:\n        return 447\n    if n == 113:\n        return 451\n    if n == 114:\n        return 455\n    if n == 115:\n        return 459\n    if n == 116:\n        return 463\n    if n == 117:\n        return 467\n    if n == 118:\n        return 471\n    if n == 119:\n        return 475\n    if n == 120:\n        return 479\n    if n == 121:\n        return 483\n    if n == 122:\n        return 487\n    if n == 123:\n        return 491\n    if n == 124:\n        return 495\n    if n == 125:\n        return 499\n    if n == 126:\n        return 503\n    if n == 127:\n        return 507\n    if n == 128:\n        return 511\n    if n == 129:\n        return 515\n    if n == 130:\n        return 519\n    if n == 131:\n        return 523\n    if n == 132:\n        return 527\n    if n == 133:\n        return 531\n    if n == 134:\n        return 535\n    if n == 135:\n        return 539\n    if n == 136:\n        return 543\n    if n == 137:\n        return 547\n    if n == 138:\n        return 551\n    if n == 139:\n        return 555\n    if n == 140:\n        return 559\n    if n == 141:\n        return 563\n    if n == 142:\n        return 567\n    if n == 143:\n        return 571\n    if n == 144:\n        return 575\n    if n == 145:\n        return 579\n    if n == 146:\n        return 583\n    if n == 147:\n        return 587\n    if n == 148:\n        return 591\n    if n == 149:\n        return 595\n    if n == 150:\n        return 599\n    if n == 151:\n        return 603\n    if n == 152:\n        return 607\n    if n == 153:\n        return 611\n    if n == 154:\n        return 615\n    if n == 155:\n        return 619\n    if n == 156:\n        return 623\n    if n == 157:\n        return 627\n    if n == 158:\n        return 631\n    if n == 159:\n        return 635\n    if n == 160:\n        return 639\n    if n == 161:\n        return 643\n    if n == 162:\n        return 647\n    if n == 163:\n        return 651\n    if n == 164:\n        return 655\n    if n == 165:\n        return 659\n    if n == 166:\n        return 663\n    if n == 167:\n        return 667\n    if n == 168:\n        return 671\n    if n == 169:\n        return 675\n    if n == 170:\n        return 679\n    if n == 171:\n        return 683\n    if n == 172:\n        return 687\n    if n == 173:\n        return 691\n    if n == 174:\n        return 695\n    if n == 175:\n        return 699\n    if n == 176:\n        retur"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = n - 1\n    return (n*(n + 1))//2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return (6*n - 5)**0.5\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum([(i + 1) * x * sqrt(3) for i, x in enumerate(range(1, n + 1))])\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    return (4 * n - 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # ASSUMING: 0 <= n <= 100\n    return (n ** 0.5) * (1 - 1 / ((n - 1) ** 0.5))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(3*n - 1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n    n = n+1\n    if n % 2 == 0:\n        n = n//2\n    else:\n        n = (n+1)//2\n    return n * (2*n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(round((n*((3*n-1)**0.5+1)**0.5-1)/2))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # merge dictionaries\n    new_dict = {}\n    for key,value in dict1.items():\n        new_dict[key] = value\n    for key,value in dict2.items():\n        new_dict[key] = value\n    for key,value in dict3.items():\n        new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2.copy())\n    merged_dict.update(dict3.copy())\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = dict1.copy()\n    final_dict.update(dict2)\n    final_dict.update(dict3)\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merge_dict={}\n    merge_dict.update(dict1)\n    merge_dict.update(dict2)\n    merge_dict.update(dict3)\n    return merge_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for key,value in dict1.items():\n        merged[key] = value\n    for key,value in dict2.items():\n        merged[key] = value\n    for key,value in dict3.items():\n        merged[key] = value\n    return merged\n    \ndef merge_dictionaries_three_optimized(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for key,value in dict1.items():\n        merged[key] = value\n    for key,value in dict2.items():\n        merged[key] = value\n    for key,value in dict3.items():\n        if key not in merged:\n            merged[key] = value\n        else:\n            merged[key].extend(value)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    output = {**dict1,**dict2, **dict3}\n    return output\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # if list1 is None:\n    #     return \"The list is empty\"\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # freq = dict()\n    # for i in list1:\n    #     if i in freq:\n    #         freq[i] += 1\n    #     else:\n    #         freq[i] = 1\n    freq = collections.Counter(list1)\n    return freq\n    \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dct = {}\n    for i in list1:\n        if i in freq_dct:\n            freq_dct[i] += 1\n        else:\n            freq_dct[i] = 1\n    return freq_dct\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = {}\n    for item in list1:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dic={}\n    for items in list1:\n        if items in frequency_dic:\n            frequency_dic[items]+=1\n        else:\n            frequency_dic[items]=1\n    return frequency_dic\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(len(list1)):\n        if list1[i] in freq_dict:\n            freq_dict[list1[i]] += 1\n        else:\n            freq_dict[list1[i]] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\ndef sort_by_value(list_of_tuples):\n    '''\n    Write a function to sort a list of tuples based on their value.\n    '''\n    list_of_tuples = sorted(list_of_tuples,key=lambda x:x[1])\n    return list_of_tuples\ndef sort_by_key(list_of_tuples,key=1):\n    '''\n    Write a function to sort a list of tuples based on their value.\n    '''\n    list_of_tuples = sorted(list_of_tuples,key=lambda x:x[key])\n    return list_of_tuples\ndef group_by_key(list_of_tuples,key=1):\n    '''\n    Write a function to group a list of tuples based on their key.\n    '''\n    list_of_tuples = collections.defaultdict(list)\n    for t in list_of_tuples:\n        list_of_tuples[t[key]].append(t)\n    return list_of_tuples\ndef remove_key_from_dict(list_of_dict,key=1):\n    '''\n    Write a function to remove a key from a dictionary.\n    '''\n    for d in list_of_dict:\n        del d[key]\ndef dict_sum(dict1):\n    '''\n    Write a function that sums up the values of a dictionary.\n    '''\n    return sum(dict1.values())\ndef dict_multiply(dict1,dict2):\n    '''\n    Write a function that multiplies two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        result[k] = dict1[k] * dict2[k]\n    return result\ndef dict_intersection(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the intersection of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k in dict2:\n            result[k] = dict1[k]\n    return result\ndef dict_union(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the union of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        result[k] = dict1[k]\n    for k in dict2:\n        if k not in result:\n            result[k] = dict2[k]\n    return result\ndef dict_difference(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the difference of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k not in dict2:\n            result[k] = dict1[k]\n    for k in dict2:\n        if k not in result:\n            result[k] = dict2[k]\n    return result\ndef dict_difference_update(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the difference of two dictionaries.\n    '''\n    for k in dict1:\n        if k in dict2:\n            del dict1[k]\n    for k in dict2:\n        if k in dict1:\n            del dict2[k]\n    return dict1\ndef dict_subtraction(dict1,dict2):\n    '''\n    Write a function that subtracts two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k not in dict2:\n            result[k] = dict1[k]\n    for k in dict2:\n        if k not in result:\n            result[k] = dict2[k]\n    return result\ndef dict_subtraction_update(dict1,dict2):\n    '''\n    Write a function that subtracts two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k in dict2:\n            del dict1[k]\n    for k in dict2:\n        if k in dict1:\n            del dict2[k]\n    return result\ndef dict_symmetric_difference(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the symmetric difference of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k in dict2:\n            if k in result:\n                result[k] = result[k] + dict1[k]\n            else:\n                result[k] = dict1[k]\n    for k in dict2:\n        if k in dict1:\n            if k in result:\n                result[k] = result[k] + dict2[k]\n            else:\n                result[k] = dict2[k]\n    return result\ndef dict_symmetric_difference_update(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the symmetric difference of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k in dict2:\n            if k in result:\n                result[k] = result[k] + dict1[k]\n            else:\n                result[k] = dict1[k]\n    for k in dict2:\n        if k in dict1:\n            if k in result:\n                result[k] = result[k] + dict2[k]\n            else:\n                result[k] = dict2[k]\n    return result\ndef dict_difference_update(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the difference of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k not in dict2:\n            result[k] = dict1[k]\n    for k in dict2:\n        if k not in result:\n            result[k] = dict2[k]\n    return result\ndef dict_union_update(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the union of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k not in result:\n            result[k] = dict1[k]\n    for k in dict2:\n        if k not in result:\n            result[k] = dict2[k]\n    return result\ndef dict_dict_intersection(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the intersection of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k in dict2:\n            result[k] = dict1[k]\n    return result\ndef dict_dict_union(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the union of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k in dict2:\n            result[k] = dict1[k]\n    for k in dict2:\n        if k in result:\n            result[k] = dict2[k]\n    return result\ndef dict_dict_difference(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the difference of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k not in dict2:\n            result[k] = dict1[k]\n    for k in dict2:\n        if k not in result:\n            result[k] = dict2[k]\n    return result\ndef dict_dict_difference_update(dict1,dict2):\n    '''\n    Write a function that returns the dictionary that has the difference of two dictionaries.\n    '''\n    result = {}\n    for k in dict1:\n        if k in dict2:\n            if k in result:\n                result[k] = result[k] + dict1[k]\n            else:\n                result[k] = dict1[k]\n    for k in dict2:\n        if k not in dict1:\n            result[k] = dict2[k]\n    return result\ndef dict_set_intersection(dict1,dict2):\n    '''\n    Write a function that return"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Code here\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = list(range(1, N+1))\n    return num_list[(N-1) % len(num_list)]\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num_helper(n, nums):\n        if nums:\n            small = min(nums)\n            if small == n:\n                return small\n            elif small < n:\n                return small\n            else:\n                new = nums[-1]\n                while new > n:\n                    nums.pop()\n                    small = min(nums)\n                    if small == n:\n                        return small\n                    elif small < n:\n                        return small\n                    else:\n                        new = nums[-1]\n    \n        return closest_num_helper(n, nums)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # if n < 0:\n    #     return None\n    # closest_num = 0\n    # for i in range(1, N):\n    #     if N-i < N-closest_num:\n    #         closest_num = N-i\n    # return closest_num\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    closest_num = 1\n    for i in range(2, N):\n        if N-i < N-closest_num:\n            closest_num = N-i\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 2:\n        return N\n    min_n = 2\n    while min_n < N:\n        min_n *= 2\n        if min_n == N:\n            break\n    max_n = N\n    while min_n < max_n:\n        if max_n % min_n == 0:\n            break\n        max_n /= 2\n    return min_n\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return (int)(N/2)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = int(N)\n    if N == 0:\n        return 0\n    elif N < 0:\n        return None\n    num = 1\n    while num*num <= N:\n        num += 1\n    return num-1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = str(N)\n    for i in range(len(N)-1,-1,-1):\n        if int(N[i]) < int(N[i+1]):\n            return int(N[:i+1])\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    if N == 0:\n        return 0\n    if N == 2:\n        return 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 0:\n        n = N\n        while n > 0:\n            if n%10 < N%10:\n                return n\n            n = n//10\n    return None\n    \nprint(closest_num(30)"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    n=0\n    s=len(list1)\n    for i in range(0,s):\n        if len(list1[i]) > n:\n            n = len(list1[i])\n    print('The length of the longest word is ',n)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    i = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > i:\n            i = len(list1[i])\n    print(i)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = len(max(list1,key=len))\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    temp = list1[0]\n    for i in range(1, len(list1)):\n        if len(list1[i]) > len(temp):\n            temp = list1[i]\n    return len(temp)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if not isinstance(list1,list):\n        print('Invalid Input')\n        return -1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    temp=list1\n    while(temp!=[]):\n        length=length+1\n        temp=temp[-1]\n    print(length)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for i in list1:\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('.') or i.endswith(',') or i.endswith(';'):\n            i = i[:i.index('.')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('-'):\n            i = i[:i.index('-')]\n        if i.endswith(';') or i.endswith(','):\n            i = i[:i.index(';')]\n        if i.endswith('.') or i.endswith(';'):\n            i = i[:i.index('.')]\n        if i.endswith(','):\n            i = i[:i.index(',')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith(':') or i.endswith(';'):\n            i = i[:i.index(':')]\n        if i.endswith('(') or i.endswith('('):\n            i = i[:i.index('(')]\n        if i.endswith(')') or i.endswith(')'):\n            i = i[:i.index(')')]\n        if i.endswith('-'):\n            i = i[:i.index('-')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith(';') or i.endswith('.'):\n            i = i[:i.index(';')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith(';'):\n            i = i[:i.index(';')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('-'):\n            i = i[:i.index('-')]\n        if i.endswith(';'):\n            i = i[:i.index(';')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith(';'):\n            i = i[:i.index(';')]\n        if i.endswith('-'):\n            i = i[:i.index('-')]\n        if i.endswith(';'):\n            i = i[:i.index(';')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.endswith('?') or i.endswith('!'):\n            i = i[:i.index('?')]\n        if i.ends"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxlen=0\n    for word in list1:\n        if len(word)>maxlen:\n            maxlen=len(word)\n    return maxlen\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_pos = []\n    for i in range(len(str1)):\n        if str1[i:len(sub_str)] == sub_str:\n            sub_str_pos.append(i)\n    return sub_str_pos\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l = str1.split()\n    n = len(sub_str)\n    for i in l:\n        if i[:n] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if(str1[i:i+len(sub_str)] == sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    s = 0\n    for i in range(len(str1)):\n        if str1[i] == sub_str[0]:\n            for j in range(len(sub_str)):\n                if str1[i+j]!= sub_str[j]:\n                    break\n                elif j == (len(sub_str)-1):\n                    s = 1\n                    break\n    if s == 1:\n        return 'Found substring'\n    else:\n        return 'Not found'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    res = False\n    for i in range(0,len(str1)):\n        if(str1[i]==sub_str):\n            res = True\n    return res\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return 1\n    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Your code here\n    for i in range(0, len(str1)):\n        if str1[i] == sub_str[0]:\n            for j in range(1, len(sub_str)):\n                if str1[i+j]!= sub_str[j]:\n                    break\n                else:\n                    return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start_index = 0\n    for sub in sub_str:\n        start_index = str1.find(sub, start_index)\n        if start_index == -1:\n            return False\n        start_index += 1\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # A useful bit of code\n    for i in range(0, len(str1)):\n        if str1[i: i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    else: \n        n_ = 1\n        while n > 0:\n            if n % n_ == 0:\n                n = n / n_\n                n_ = n_ * 2\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n%2 == 0 and n > 1) or (n%2!= 0 and n < 1)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 3 == 0 and n % 5 == 0) or (n % 3 == 1 and n % 5 == 2): \n        return True\n    else: \n        return False\n    "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    factors = get_factors(n)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1 or n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Edge cases:\n    if n<1:\n        return False\n    elif n==1:\n        return True\n    elif n==0:\n        return True\n    elif n%2==0:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1: return True \n    else:\n        i = 2 \n        while i <= n//2:\n            if n % i == 0:\n                return False \n            i = i + 1 \n    return True \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%2 == 0 or n == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b - 1)\n    \ndef reverse(string):\n    '''\n    Write a function to reverse the'string'.\n    '''\n    if len(string) == 0:\n        return ''\n    else:\n        return string[len(string) - 1] + reverse(string[:-1])\n    \ndef swap(a, b):\n    '''\n    Write a function to swap the 'a' and 'b' values.\n    '''\n    return b, a\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if the'string' is a palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    else:\n        if string[0] == string[-1]:\n            return is_palindrome(string[1:-1])\n        else:\n            return False\n    \ndef is_palindrome_back(string):\n    '''\n    Write a function to check if the'string' is a palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if string[0] == string[-1]:\n        return is_palindrome_back(string[1:-1])\n    else:\n        return False\n    \ndef is_palindrome_end(string):\n    '''\n    Write a function to check if the'string' is a palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if string[0] == string[-1]:\n        return is_palindrome_end(string[1:-1])\n    else:\n        return False\n    \ndef is_palindrome_rev(string):\n    '''\n    Write a function to check if the'string' is a palindrome or not.\n    '''\n    if len(string) == 0:\n        return True\n    if string[0] == string[-1]:\n        return is_palindrome_rev(string[1:-1])\n    else:\n        return False\n    \ndef solve(a, b):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    return a + b\n    \ndef solve_linear(a, b):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return solve_linear(a, b - 1) + b\n    \ndef solve_quadratic(a, b, c):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    x = b ** 2 - 4 * a * c\n    if x < 0:\n        return (-b + x ** 0.5) / (2 * a)\n    elif x == 0:\n        return -b / (2 * a)\n    else:\n        return (-b - x ** 0.5) / (2 * a)\n    \ndef solve_linear_diag(a, b):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return solve_linear_diag(a, b - 1) + b\n    \ndef solve_quadratic_diag(a, b, c):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    x = b ** 2 - 4 * a * c\n    if x < 0:\n        return (-b + x ** 0.5) / (2 * a)\n    elif x == 0:\n        return -b / (2 * a)\n    else:\n        return (-b - x ** 0.5) / (2 * a)\n    \ndef solve_linear_mod(a, b):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return solve_linear_mod(a, b - 1) + b\n    \ndef solve_quadratic_mod(a, b, c):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    x = b ** 2 - 4 * a * c\n    if x < 0:\n        return (-b + x ** 0.5) / (2 * a)\n    elif x == 0:\n        return -b / (2 * a)\n    else:\n        return (-b - x ** 0.5) / (2 * a)\n    \ndef solve_linear_trans_vec(a, b):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return solve_linear_trans_vec(a, b - 1) + b\n    \ndef solve_quadratic_trans_vec(a, b, c):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    x = b ** 2 - 4 * a * c\n    if x < 0:\n        return (-b + x ** 0.5) / (2 * a)\n    elif x == 0:\n        return -b / (2 * a)\n    else:\n        return (-b - x ** 0.5) / (2 * a)\n    \ndef solve_linear_trans_mat(a, b):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return solve_linear_trans_mat(a, b - 1) + b\n    \ndef solve_quadratic_trans_mat(a, b, c):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    x = b ** 2 - 4 * a * c\n    if x < 0:\n        return (-b + x ** 0.5) / (2 * a)\n    elif x == 0:\n        return -b / (2 * a)\n    else:\n        return (-b - x ** 0.5) / (2 * a)\n    \ndef solve_linear_left_vec(a, b):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return solve_linear_left_vec(a, b - 1) + b\n    \ndef solve_quadratic_left_vec(a, b, c):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    x = b ** 2 - 4 * a * c\n    if x < 0:\n        return (-b + x ** 0.5) / (2 * a)\n    elif x == 0:\n        return -b / (2 * a)\n    else:\n        return (-b - x ** 0.5) / (2 * a)\n    \ndef solve_linear_left_mat(a, b):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return solve_linear_left_mat(a, b - 1) + b\n    \ndef solve_quadratic_left_mat(a, b, c):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    x = b ** 2 - 4 * a * c\n    if x < 0:\n        return (-b + x ** 0.5) / (2 * a)\n    elif x == 0:\n        return -b / (2 * a)\n    else:\n        return (-b - x ** 0.5) / (2 * a)\n    \ndef solve_linear_right_vec(a, b):\n    '''\n    Write a function to return the sum of 'a' and 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return solve_linear_right_vec(a, b - 1) + b\n    \ndef solve_quadratic_right_vec(a"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b < 0:\n        return 1/power(a,-b)\n    if b > 0:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    res = 1\n    for i in range(b):\n        res = res * a\n    return res\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b == 1):\n        return a\n    else:\n        return a * power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1/power(a,b+1)\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    return a * power(a,b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    n = len(test_list)\n    min_idx = 0\n    min_val = test_list[0][1]\n    for i in range(1, n):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_idx = i\n    return test_list[min_idx]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: (x[1],x[0]))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0]\n    for i in test_list:\n        if i[1] < smallest[1]:\n            smallest = i\n    return(smallest)\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    largest = test_list[0]\n    for i in test_list:\n        if i[1] > largest[1]:\n            largest = i\n    return(largest)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=lambda x: x[0], reverse=False)\n    # print(test_list)\n    minimum = test_list[0]\n    return minimum[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    res = []\n    for item in test_list:\n        res.append((item[0],min(item[1],item[2])))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Assigning the minimum to a variable\n    min = 0\n    # Iterating over the list of tuples\n    for i in range(len(test_list)):\n        # If the first element of the tuple is greater than min\n        if test_list[i][0] > min:\n            # Setting the min to the first element of the tuple\n            min = test_list[i][0]\n            # Setting the minimum index to i\n            min_index = i\n    # Returning the minimum value and the index\n    return (min,min_index)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\nprint(index_minimum([(1, 2), (3, 2), (2, 1), (2, 2)]))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #Solution\n    return min(test_list, key = lambda x: x[1])\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_size = len(lst[0])\n    for i in range(1, len(lst)):\n        size = len(lst[i])\n        if size < min_size:\n            min_size = size\n    return min_size\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len\n    \ndef Find_max_length(lst):\n    '''\n    Write a python function to find the length of the maximum length list in a list of lists.\n    '''\n    max_length = 0\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n    \n    \ndef Find_Max_1_Item(lst):\n    '''\n    Write a python function to find the length of the maximum length 1 item in a list of lists.\n    '''\n    max_len = 0\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n    for item in lst:\n        if len(item) == max_len:\n            return item\n            \n            \ndef Find_Max_2_Item(lst):\n    '''\n    Write a python function to find the length of the maximum length 2 item in a list of lists.\n    '''\n    max_len = 0\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n    for item in lst:\n        if len(item) == max_len and item not in lst:\n            return item\n            \n            \ndef Find_Duplicates(lst):\n    '''\n    Write a python function to find all the duplicates in a list of lists.\n    '''\n    a = []\n    for item in lst:\n        for item2 in lst:\n            if item == item2:\n                if item not in a:\n                    a.append(item)\n    return a\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i)<min:\n            min = len(i)\n    return min\ndef Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i)<min:\n            min = len(i)\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 10001\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    n = len(lst[0])\n    for x in range(1, len(lst)):\n        if len(lst[x]) < n:\n            n = len(lst[x])\n    return n\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_len_list = []\n    for lst in lst:\n        lst_len_list.append(len(lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if min_len > len(lst[i]):\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])<len(min_length):\n            min_length=lst[i]\n    return len(min_length)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    n = 0\n    for i in range(len(lst)):\n        if len(lst[i])<n:\n            n = len(lst[i])\n    return n\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            result +=1\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    if n > 1:\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors = divisors + 1\n    else:\n        divisors = 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    if n < 1:\n        return \"The given number is not valid.\"\n    elif n == 1:\n        return \"The number of divisors is 1.\"\n    elif n == 2:\n        return \"The number of divisors is 2.\"\n    else:\n        for x in range(1, n):\n            if n % x == 0:\n                divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return sum(i for i in range(1,n+1) if n%i == 0)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1, n):\n        if n % i == 0:\n            div += 1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    num = n\n    while (i <= n):\n        if (n % i == 0):\n            num -= 1\n        i += 1\n    return num\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    i = 1\n    while i <= n:\n        if n%i == 0:\n            print(i)\n            i = i + 1\n        else:\n            i = i + 1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_d = {}\n    for item in list1:\n        if item in freq_d:\n            freq_d[item] += 1\n        else:\n            freq_d[item] = 1\n    return freq_d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    print(\"\\n------------------------------------------------------\\n\")\n    dictionary={}\n    for i in range(len(list1)):\n        dictionary[i]=list1[i]\n        if list1[i] in dictionary.keys():\n            dictionary[list1[i]]=dictionary[list1[i]]+1\n        else:\n            dictionary[list1[i]]=1\n    print(\"Dictionary after making a dictionary from list of lists:\",dictionary)\n    print(\"\\n------------------------------------------------------\\n\")\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    freq_dict[0] = 0\n    freq_dict[1] = 0\n    freq_dict[2] = 0\n    freq_dict[3] = 0\n    freq_dict[4] = 0\n    freq_dict[5] = 0\n    freq_dict[6] = 0\n    freq_dict[7] = 0\n    freq_dict[8] = 0\n    freq_dict[9] = 0\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_lists = {}\n    for i in range(len(list1)):\n        if list1[i] in frequency_lists:\n            frequency_lists[list1[i]] += 1\n        else:\n            frequency_lists[list1[i]] = 1\n    return frequency_lists\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] = freq[j]+1\n            else:\n                freq[j] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    d = {}\n    count = 0\n    for item in list1:\n        for ele in item:\n            count = count + 1\n            if ele in d:\n                d[ele] += 1\n            else:\n                d[ele] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if not isinstance(list1,list):\n        raise ValueError('Wrong type of argument')\n    result = {}\n    for item in list1:\n        if not isinstance(item,list):\n            raise ValueError('Wrong type of element in list')\n        for subitem in item:\n            if subitem not in result:\n                result[subitem] = 1\n            else:\n                result[subitem] += 1\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(f'The product of {numbers} is:')\n    print(f'{numbers[0]} * ', end = '')\n    for i in range(1,len(numbers)):\n        print(f'{numbers[i]} * ', end = '')\n    print(f'1 / {len(numbers)}')\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = numbers.split(\",\")\n    \n    #make sure there is an empty list to assign our number with\n    result = []\n    \n    #make sure we have a non zero value\n    if len(numbers) > 0:\n        #start multiplication with the first number\n        start = numbers[0]\n        \n        #make sure it is an integer or float number\n        if is_integer(start):\n            for i in range(len(numbers)):\n                #multiply the numbers and store them in result\n                result.append(float(start) * numbers[i])\n        else:\n            for i in range(len(numbers)):\n                #multiply the numbers and store them in result\n                result.append(float(start) * numbers[i])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply_numbers(numbers):\n        res = 1\n        for num in numbers:\n            res = res*num\n        return res/len(numbers)\n    return multiply_numbers(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    l = len(numbers)\n    return sum(numbers) / l\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # return numbers[0] * numbers[1] * numbers[2]\n    # return numbers[0] * numbers[1] * numbers[2] / len(numbers)\n    return numbers[0] * numbers[1] * numbers[2] / (numbers[0] + numbers[1] + numbers[2])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result *= i\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #list_of_numbers = []\n    # for number in numbers:\n    #     list_of_numbers.append(number)\n    # return list_of_numbers * len(list_of_numbers)\n    # print(list_of_numbers * len(list_of_numbers))\n    return (numbers * len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result = result * number\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result = result * number\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    decimal = str(n)\n    binary = ''\n    for digit in decimal:\n        binary += str(int(digit) // 2)\n    binary = binary[::-1]\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_num = bin(n)[2:]\n    print('bin_num:', bin_num)\n    print('decimal:',n)\n    while len(bin_num) < 16:\n        bin_num = '0' + bin_num\n    print('bin_num after filling:',bin_num)\n    return bin_num\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return '0'\n    res, i = '', 0\n    while n:\n        res += str(n % 2)\n        n = n // 2\n    return res[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # make sure that the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    # store the base 10 representation of n in the variable binary\n    binary = bin(n)[2:]\n    # while loop through the binary in order to get a new binary\n    while len(binary) < 7:\n        binary = '0' + binary\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_str = \"\"\n    while(n):\n        bin_str = str(n%2) + bin_str\n        n = n//2\n    return bin_str\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # define binary numbers\n    digits = ['0','1','2','3','4','5','6','7','8','9']\n    if n >= 0:\n        s = ''\n        while n >= 1:\n            s += digits[n % 2]\n            n //= 2\n        return s\n    else:\n        n = abs(n)\n        s = ''\n        while n > 0:\n            s += digits[n % 2]\n            n = n // 2\n        s = s[::-1]\n        return s\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\").zfill(32)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    decimal = str(n)\n    binary = ''\n    for i in range(len(decimal)):\n        binary = binary + str(int(decimal[i])-i)\n    binary = int(binary)\n    return binary\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    count = 0\n    while count < len(str(num)):\n        temp = num + 10**count\n        if temp == temp[::-1]:\n            return temp\n        count += 1\n    count = 0\n    while count < len(str(num)):\n        temp = num - 10**count\n        if temp == temp[::-1]:\n            return temp\n        count += 1\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    length = len(num)\n    min_str = str(int(num[::-1]) + 1)\n    min_num = int(min_str[::-1])\n    return min_num if min_num <= int(num) else min_num - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    l = len(s)\n    if l <= 1:\n        return num\n    elif s[0]!= s[-1]:\n        return int(s + s[::-1])\n    elif s[0] == s[-1]:\n        return int(s[:l-1] + s[1:-1] + s[:1] + s[-1:][::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    curr_num = num\n    while True:\n        new_num = curr_num + 1\n        if is_palindrome(new_num):\n            return new_num\n        curr_num += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # n = num + 1\n    # while True:\n    #     n = n * 10\n    #     if is_palindrome(n):\n    #         return n\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        while num > 0:\n            num, rem = divmod(num, 10)\n            if rem!= num: return False\n        return True\n    for i in range(num, 0, -1):\n        if is_palindrome(i): return i\n    return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert to string, reverse, compare, and return\n    str_num = str(num)\n    str_num_reverse = str_num[::-1]\n    if str_num == str_num_reverse:\n        return num\n    else:\n        for i in range(len(str_num_reverse)):\n            num = int(str_num_reverse)\n            if str_num == str_num_reverse[::-1]:\n                return num\n            else:\n                str_num = str(num + 1)\n                str_num_reverse = str_num[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 2 or num > 99 or is_palindrome(num):\n        return num\n    elif num % 2 == 0:\n        num -= 1\n        return next_smallest_palindrome(num)\n    else:\n        num += 1\n        return next_smallest_palindrome(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n    while n > 0:\n        n = n//10\n        n = n * 10 + 9\n    if n == 0:\n        n = 1\n    while n % 10 == 0:\n        n = n//10\n    n = n*10 + n%10\n    if n % 10 > 1:\n        n = n * 10 + n%10 - 1\n    return n\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        x = str(num)\n        if x == x[::-1]:\n            return x\n        else:\n            num += 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if k is negative: return the last element of the array\n    if k < 0:\n        return arr[-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = len(arr)\n    if l == 0 or k > l or k <= 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return -1\n    if k == n:\n        return arr[-1]\n    left = 0\n    right = n - 1\n    mid = (left + right) // 2\n    while left <= right:\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] > k:\n            right = mid - 1\n        elif arr[mid] < k:\n            left = mid + 1\n        mid = (left + right) // 2\n    return arr[mid]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l, r = 0, len(arr) - 1\n    while l <= r:\n        m = l + ((r - l) >> 1)\n        if m == k:\n            return arr[m]\n        if arr[m] > arr[r]:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i <= j:\n        mid = (i+j)//2\n        if mid == k-1:\n            return arr[mid]\n        if k < mid+1:\n            j = mid-1\n        else:\n            i = mid+1\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return -1\n    pivot = (k-1)//2\n    # start with kth element at index p, then swap with first k elements to the right of p.\n    for i in range(k, n):\n        if arr[i] > arr[pivot]:\n            arr[i], arr[pivot] = arr[pivot], arr[i]\n    # swap the pivot with the kth element.\n    arr[k], arr[pivot] = arr[pivot], arr[k]\n    # now pivot is at the correct position, and the kth element is in the correct position.\n    # return the element at position k in the original array.\n    if k < n:\n        return arr[k]\n    else:\n        return arr[pivot+1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    size = len(arr)\n    if size == 0:\n        return None\n    if size == 1:\n        if arr[0] == k:\n            return arr[0]\n        return None\n    if k < 1 or k > size + 1:\n        return None\n    if k == size:\n        return arr[size-1]\n    if k < size//2:\n        return binary_search(arr, k, 0, size-1)\n    return binary_search(arr, k, size//2, size-1)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    word = word.title()\n    return word\n    \n    \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = word.title()\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join([w.title() for w in words[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_char = word[0]\n    rest_of_word = word[1:]\n    first_char = first_char.upper()\n    new_word = first_char + rest_of_word\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    # code here\n    return word[0] + word[1].capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:] if word else ''\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # return word[:1].upper() + word[1:].lower()\n    return ''.join(word[0]+word[1].capitalize() for word in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # return word[0].upper() + word[1:]\n    return word[0].upper() + word[1:].replace('_','')\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    caps = words[0].capitalize()\n    for i in range(1, len(words)):\n        caps += words[i].capitalize()\n    return caps\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == None or len(word) < 1:\n        return word\n    list_words = word.split('_')\n    list_result = []\n    for index in range(len(list_words)):\n        if index == 0:\n            list_result.append(list_words[index].title())\n        else:\n            list_result.append(list_words[index].capitalize())\n    return ''.join(list_result)\n    \n    \n    \nprint(snake_to_camel('snake_case')) # should return'snakeCase'\nprint(snake_to_camel('snake_case_')) # should return'snakeCase'\nprint(snake_to_camel('')) # should return ''\nprint(snake_to_camel('hello_world')) # should return 'helloWorld'\nprint(snake_to_camel('hello_world_')) # should return 'helloWorld'\nprint(snake_to_camel('hello_world_t_t')) # should return 'helloWorldTt'\nprint(snake_to_camel('hello_world_t_t_')) # should return 'helloWorldTt'\nprint(snake_to_camel('hello_world_t_t_f')) # should return 'helloWorldTtF'\nprint(snake_to_camel('hello_world_t_t_f_')) # should return 'helloWorldTtF'\nprint(snake_to_camel('hello_world_t_t_f_g')) # should return 'helloWorldTtFg'\nprint(snake_to_camel('hello_world_t_t_f_g_')) # should return 'helloWorldTtFg'\nprint(snake_to_camel('hello_world_t_t_f_g_h')) # should return 'helloWorldTtFgH'\nprint(snake_to_camel('hello_world_t_t_f_g_h_')) # should return 'helloWorldTtFgH'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i')) # should return 'helloWorldTtFgHI'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_')) # should return 'helloWorldTtFgHI'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j')) # should return 'helloWorldTtFgHIJ'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_')) # should return 'helloWorldTtFgHIJ'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k')) # should return 'helloWorldTtFgHIJK'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_')) # should return 'helloWorldTtFgHIJK'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l')) # should return 'helloWorldTtFgHIJKL'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_')) # should return 'helloWorldTtFgHIJKL'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m')) # should return 'helloWorldTtFgHIJKLM'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_')) # should return 'helloWorldTtFgHIJKLM'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n')) # should return 'helloWorldTtFgHIJKLMN'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_')) # should return 'helloWorldTtFgHIJKLMN'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o')) # should return 'helloWorldTtFgHIJKLMNO'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_')) # should return 'helloWorldTtFgHIJKLMNO'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p')) # should return 'helloWorldTtFgHIJKLMNOP'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_')) # should return 'helloWorldTtFgHIJKLMNOP'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q')) # should return 'helloWorldTtFgHIJKLMNOPQ'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q_')) # should return 'helloWorldTtFgHIJKLMNOPQ'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q_r')) # should return 'helloWorldTtFgHIJKLMNOPQR'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q_r_')) # should return 'helloWorldTtFgHIJKLMNOPQR'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q_r_s')) # should return 'helloWorldTtFgHIJKLMNOPQRS'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q_r_s_')) # should return 'helloWorldTtFgHIJKLMNOPQRS'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t')) # should return 'helloWorldTtFgHIJKLMNOPQRST'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_')) # should return 'helloWorldTtFgHIJKLMNOPQRST'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u')) # should return 'helloWorldTtFgHIJKLMNOPQRSTU'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_')) # should return 'helloWorldTtFgHIJKLMNOPQRSTU'\nprint(snake_to_camel('hello_world_t_t_f_g_h_i_j_"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return int((m ** n) / factorial(n))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    d = [[0 for i in range(m)] for j in range(n)]\n    b = [[0 for i in range(m)] for j in range(n)]\n    vis = [[0 for i in range(m)] for j in range(n)]\n    stack = []\n    \n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                d[i][j] = j + 1\n                vis[i][j] = 1\n                stack.append([i, j])\n            elif i == 1:\n                if m!= 1:\n                    d[i][j] = j + 1\n                else:\n                    d[i][j] = j\n                vis[i][j] = 1\n                stack.append([i, j])\n            elif i > 1:\n                if m!= 1:\n                    vis[i][j] = 1\n                else:\n                    vis[i][j] = 0\n    \n    while stack:\n        i, j = stack.pop(0)\n        if i == n - 1 and j < m - 1:\n            j += 1\n        elif i < n - 1:\n            i += 1\n            j = 0\n            while i!= n:\n                if j == m - 1:\n                    if i == n - 1:\n                        if m!= 1:\n                            d[i][j] = j + 1\n                        else:\n                            d[i][j] = j\n                        vis[i][j] = 1\n                        stack.append([i, j])\n                    else:\n                        if m!= 1:\n                            d[i][j] = j + 1\n                        else:\n                            d[i][j] = j\n                        vis[i][j] = 1\n                        stack.append([i, j])\n                        \n                else:\n                    i += 1\n                    j += 1\n        else:\n            i = 0\n            j = 0\n            while i!= n and j < m:\n                if j == m - 1:\n                    if i == n - 1:\n                        if m!= 1:\n                            d[i][j] = j + 1\n                        else:\n                            d[i][j] = j\n                        vis[i][j] = 1\n                        stack.append([i, j])\n                    else:\n                        if m!= 1:\n                            d[i][j] = j + 1\n                        else:\n                            d[i][j] = j\n                        vis[i][j] = 1\n                        stack.append([i, j])\n                        \n                else:\n                    i += 1\n                    j += 1\n    \n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if vis[i][j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    # if n > m:\n    #     return eulerian_num(n-m, m) + eulerian_num(n, m-1)\n    # else:\n    #     return eulerian_num(n-m, m)\n    if n < m:\n        return eulerian_num(n, m-1) + eulerian_num(n-1, m)\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def all_permutations(n):\n        if n == 0:\n            return [[]]\n        permutations = []\n        for p in all_permutations(n-1):\n            permutations += [[i] + p for i in p]\n        return permutations\n    permutations = all_permutations(n)\n    for permutation in permutations:\n        if permutation[0] == m:\n            return permutation[1:] + permutation[0:1]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Special cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    \n    if m == 0:\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m: \n        m, n = n, m \n    if m == 1: \n        return n - 1\n    else: \n        return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m) \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 0 or m == 0:\n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    else:\n        return eulerian_num(n-1, m) * m + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: sorted(x), reverse=True)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in input_list:\n        new_list.append(sorted(i))\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0].lower())\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x:x[1])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    while i < len(input_list):\n        j = 0\n        while j < len(input_list[i]):\n            if j == 0:\n                input_list[i][j] = input_list[i][j].lower()\n                input_list[i][j] = input_list[i][j].upper()\n            j += 1\n        j = 0\n        while j < len(input_list[i]):\n            if j == 0:\n                input_list[i][j] = input_list[i][j].lower()\n            j += 1\n        input_list[i] = sorted(input_list[i])\n        i += 1\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # ~~~ TRIAL ~~~\n    # new_list = []\n    #\n    # for sublist in input_list:\n    #     new_sublist = sorted(sublist)\n    #     new_list.append(new_sublist)\n    # return new_list\n    # ~~~ END ~~~\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([n for n in lst if n])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count = count + 1\n    return count\nprint(count([True, False, False, True]))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in lst:\n        if i:\n            cnt += 1\n    return cnt\n    #return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(f\"{test_list}\")\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup.append(item)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n    \ndef remove_items(test_list, test_tup):\n    '''\n    Write a function to remove the given list to the given tuples.\n    '''\n    return test_list[:len(test_list) - len(test_tup)] + test_list[len(test_list) + len(test_tup):]\n    \ndef reverse_lists(test_list, test_tup):\n    '''\n    Write a function to reverse the given lists and tuples.\n    '''\n    #rev_list = list(test_list)\n    #rev_tup = tuple(test_tup)\n    \n    #reverse_list = rev_list[::-1]\n    #reverse_tup = rev_tup[::-1]\n    \n    rev_list = list(test_list)\n    rev_tup = tuple(test_tup)\n    \n    rev_list.reverse()\n    rev_tup = rev_tup[::-1]\n    \n    return rev_list + rev_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    return test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_heap = []\n    heapq.heappush(merge_heap,num1)\n    heapq.heappush(merge_heap,num2)\n    heapq.heappush(merge_heap,num3)\n    print(merge_heap)\n    print(\"After merging\")\n    merged_list = []\n    while(len(merge_heap) > 0):\n        merged_list.append(heapq.heappop(merge_heap))\n    print(merged_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while len(num1) and len(num2) and len(num3):\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged_list.append(num1[0])\n            num1.remove(num1[0])\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged_list.append(num2[0])\n            num2.remove(num2[0])\n        else:\n            merged_list.append(num3[0])\n            num3.remove(num3[0])\n    while num1:\n        merged_list.append(num1[0])\n        num1.remove(num1[0])\n    while num2:\n        merged_list.append(num2[0])\n        num2.remove(num2[0])\n    while num3:\n        merged_list.append(num3[0])\n        num3.remove(num3[0])\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list = []\n    while len(num1)!=0:\n        merge_list.append(num1[0])\n        del num1[0]\n    while len(num2)!=0:\n        merge_list.append(num2[0])\n        del num2[0]\n    while len(num3)!=0:\n        merge_list.append(num3[0])\n        del num3[0]\n    return merge_list\ndef merge_sort(num):\n    '''\n    Write a function to sort a list in ascending order\n    '''\n    if len(num)==1:\n        return num\n    else:\n        mid = len(num)//2\n        left = num[:mid]\n        right = num[mid:]\n        return merge_sort(left) + merge_sort(right)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Check the length of the input lists\n    l1 = len(num1)\n    l2 = len(num2)\n    l3 = len(num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(set(num1 + num2 + num3))\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp_list = []\n    while len(num1)>0 and len(num2)>0:\n        if num1[0]<num2[0]:\n            temp_list.append(num1.pop(0))\n        else:\n            temp_list.append(num2.pop(0))\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1 = merge_sorted_list_helper(num1)\n    num2 = merge_sorted_list_helper(num2)\n    num3 = merge_sorted_list_helper(num3)\n    return merge_sorted_list_helper(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list=[]\n    i=0\n    j=0\n    k=0\n    while(i<len(num1) or j<len(num2) or k<len(num3)):\n        if i<len(num1) and j<len(num2) and k<len(num3):\n            if num1[i]<num2[j] and num1[i]<num3[k]:\n                merged_list.append(num1[i])\n                i+=1\n            elif num2[j]<num1[i] and num2[j]<num3[k]:\n                merged_list.append(num2[j])\n                j+=1\n            else:\n                merged_list.append(num3[k])\n                k+=1\n        elif i<len(num1) and j<len(num2):\n            if num1[i]<num2[j]:\n                merged_list.append(num1[i])\n                i+=1\n            else:\n                merged_list.append(num2[j])\n                j+=1\n        elif i<len(num1):\n            merged_list.append(num1[i])\n            i+=1\n    return merged_list\ndef merge_sorted_list_2(num1,num2):\n    '''\n    Write a function to merge two lists into one sorted list.\n    '''\n    merged_list=[]\n    i=0\n    j=0\n    while(i<len(num1) or j<len(num2)):\n        if i<len(num1) and j<len(num2):\n            if num1[i]<num2[j]:\n                merged_list.append(num1[i])\n                i+=1\n            else:\n                merged_list.append(num2[j])\n                j+=1\n        elif i<len(num1):\n            merged_list.append(num1[i])\n            i+=1\n        elif j<len(num2):\n            merged_list.append(num2[j])\n            j+=1\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    if num2 == None:\n        return num3\n    if num3 == None:\n        return num1\n    \n    result = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while len(num1)!= 0 or len(num2)!= 0 or len(num3)!= 0:\n        if len(num1) == 0 and len(num2)!= 0:\n            result.append(heapq.heappop(num2))\n        elif len(num1)!= 0 and len(num2) == 0:\n            result.append(heapq.heappop(num1))\n        elif len(num2) == 0 and len(num3)!= 0:\n            result.append(heapq.heappop(num3))\n        else:\n            result.append(max(num1[0],num2[0],num3[0]))\n            if num1[0] > num2[0]:\n                heapq.heappush(num1,num2[0])\n                num2 = num2[1:]\n            else:\n                heapq.heappush(num2,num1[0])\n                num1 = num1[1:]\n            if num3[0] > num1[0]:\n                heapq.heappush(num3,num1[0])\n                num1 = num1[1:]\n            else:\n                heapq.heappush(num3,num3[0])\n                num3 = num3[1:]\n    return result\n    \ndef merge_sorted_list2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    if num2 == None:\n        return num3\n    if num3 == None:\n        return num1\n    \n    result = []\n    while len(num1)!= 0 or len(num2)!= 0 or len(num3)!= 0:\n        if len(num1) == 0:\n            result.append(num2[0])\n            num2 = num2[1:]\n        elif len(num2) == 0:\n            result.append(num3[0])\n            num3 = num3[1:]\n        else:\n            if num1[0] <= num2[0]:\n                result.append(num1[0])\n                num1 = num1[1:]\n            else:\n                result.append(num2[0])\n                num2 = num2[1:]\n            if num3[0] <= num2[0]:\n                result.append(num3[0])\n                num3 = num3[1:]\n            else:\n                result.append(num2[0])\n                num2 = num2[1:]\n    return result\n    \ndef merge_sorted_list3(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    if num2 == None:\n        return num3\n    if num3 == None:\n        return num1\n    \n    result = []\n    while len(num1)!= 0 or len(num2)!= 0 or len(num3)!= 0:\n        if len(num1) == 0:\n            result.append(num2[0])\n            num2 = num2[1:]\n        elif len(num2) == 0:\n            result.append(num3[0])\n            num3 = num3[1:]\n        else:\n            if num1[0] <= num2[0]:\n                result.append(num1[0])\n                num1 = num1[1:]\n            else:\n                result.append(num2[0])\n                num2 = num2[1:]\n            if num3[0] <= num2[0]:\n                result.append(num3[0])\n                num3 = num3[1:]\n            else:\n                result.append(num2[0])\n                num2 = num2[1:]\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    m = []\n    while (len(num1)!=0) and (len(num2)!=0) and (len(num3)!=0):\n        if num1[0] <= num2[0]:\n            m.append(num1.pop(0))\n        else:\n            m.append(num2.pop(0))\n    m.extend(num1)\n    m.extend(num2)\n    m.extend(num3)\n    return m\nprint(merge_sorted_list([2,5,6],[1,2,3],[2,1,7,8,9])"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans = 0\n    for i in range(n):\n        if s == '':\n            return ans\n        for j in range(len(s)-1,-1,-1):\n            if s[j] == '1':\n                s = s[:j] + '0' + s[j+1:]\n                ans += 1\n                break\n            else:\n                s = s[:j] + '1' + s[j+1:]\n                ans += 1\n                break\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Your code here\n    s = s.split()\n    for i in range(n):\n        l = []\n        for j in range(len(s)):\n            if int(s[j])%2!= 0:\n                l.append(s[j])\n        s = l\n    return len(s)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd_count = 0\n    for i in range(n):\n        # print(s)\n        odd_count += (s.count('1') - s.count('0'))\n        s = list(s)\n        s = s[1:] + s[:1]\n    return odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    s = list(s)\n    if n==0:\n        return len(s)\n    for i in range(n):\n        for j in range(len(s)):\n            if s[j]=='0':\n                s[j] = '1'\n                result += 1\n            else:\n                s[j] = '0'\n    return result\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    s = list(s)\n    if n==0:\n        return len(s)\n    for i in range(n):\n        for j in range(len(s)):\n            if s[j]=='0':\n                s[j] = '1'\n                result += 1\n            else:\n                s[j] = '0'\n    return result\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palindromes in the right side.\n    '''\n    if len(s)==0:\n        return False\n    s = list(s)\n    result = []\n    temp = []\n    stack = []\n    for i in range(len(s)):\n        if len(stack)==0:\n            stack.append(s[i])\n        else:\n            if s[i]==stack[-1]:\n                stack.pop()\n            else:\n                stack.append(s[i])\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palindromes in the right side.\n    '''\n    if len(s)==0:\n        return False\n    s = list(s)\n    result = []\n    temp = []\n    stack = []\n    for i in range(len(s)):\n        if len(stack)==0:\n            stack.append(s[i])\n        else:\n            if s[i]==stack[-1]:\n                stack.pop()\n            else:\n                stack.append(s[i])\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palindromes in the right side.\n    '''\n    if len(s)==0:\n        return False\n    s = list(s)\n    result = []\n    temp = []\n    stack = []\n    for i in range(len(s)):\n        if len(stack)==0:\n            stack.append(s[i])\n        else:\n            if s[i]==stack[-1]:\n                stack.pop()\n            else:\n                stack.append(s[i])\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palindromes in the right side.\n    '''\n    if len(s)==0:\n        return False\n    s = list(s)\n    result = []\n    temp = []\n    stack = []\n    for i in range(len(s)):\n        if len(stack)==0:\n            stack.append(s[i])\n        else:\n            if s[i]==stack[-1]:\n                stack.pop()\n            else:\n                stack.append(s[i])\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palindromes in the right side.\n    '''\n    if len(s)==0:\n        return False\n    s = list(s)\n    result = []\n    temp = []\n    stack = []\n    for i in range(len(s)):\n        if len(stack)==0:\n            stack.append(s[i])\n        else:\n            if s[i]==stack[-1]:\n                stack.pop()\n            else:\n                stack.append(s[i])\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palindromes in the right side.\n    '''\n    if len(s)==0:\n        return False\n    s = list(s)\n    result = []\n    temp = []\n    stack = []\n    for i in range(len(s)):\n        if len(stack)==0:\n            stack.append(s[i])\n        else:\n            if s[i]==stack[-1]:\n                stack.pop()\n            else:\n                stack.append(s[i])\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palindromes in the right side.\n    '''\n    if len(s)==0:\n        return False\n    s = list(s)\n    result = []\n    temp = []\n    stack = []\n    for i in range(len(s)):\n        if len(stack)==0:\n            stack.append(s[i])\n        else:\n            if s[i]==stack[-1]:\n                stack.pop()\n            else:\n                stack.append(s[i])\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palindromes in the right side.\n    '''\n    if len(s)==0:\n        return False\n    s = list(s)\n    result = []\n    temp = []\n    stack = []\n    for i in range(len(s)):\n        if len(stack)==0:\n            stack.append(s[i])\n        else:\n            if s[i]==stack[-1]:\n                stack.pop()\n            else:\n                stack.append(s[i])\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palindromes in the right side.\n    '''\n    if len(s)==0:\n        return False\n    s = list(s)\n    result = []\n    temp = []\n    stack = []\n    for i in range(len(s)):\n        if len(stack)==0:\n            stack.append(s[i])\n        else:\n            if s[i]==stack[-1]:\n                stack.pop()\n            else:\n                stack.append(s[i])\n    if len(stack)==0:\n        return True\n    else:\n        return False\ndef palindrome_Partition(s): \n    '''\n    Write a python function to partition the string s into palindrome, so that all the palindromes are in the left side and all the non-palin"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(len(s)):\n            if(s[j] =='1'):\n                count+=1\n        s = swap_bit(s,0,count % 2)\n        count = 0\n    print(s)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=bin(int(s,2))\n    print(s)\n    l=len(s)\n    odd=0\n    for i in range(1,n+1):\n        s=s[1:]+s[0]\n        s=bin(int(s,2))\n        l1=len(s)\n        print(l1)\n        if l1!=l:\n            odd+=1\n    return odd\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    count = 0\n    \n    for i in range(n):\n        count += 1\n        s = reverse(s)\n        # print(s)\n        \n        if (s == '0111'):\n            break\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return s\n    else:\n        res = odd_Equivalent(s[:-1],n-1)\n        return res + '1'\n        \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    assert n>=0, \"n should be a positive integer\"\n    assert type(s)==str, \"s should be a string\"\n    #code here\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return 0\n    return odd_Equivalent(n - 1) + odd_Equivalent(n - 1)\n    \nprint(odd_Equivalent(6, 2))\nprint(odd_Equivalent(6, 5))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested_list in nestedlist:\n        for element in nested_list:\n            if element not in common_elements:\n                common_elements.append(element)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lst in nestedlist:\n        for element in lst:\n            if element in common:\n                return True\n            else:\n                common.append(element)\n    return False\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    return set(x for x in nestedlist[0] if all(y in x for y in nestedlist[1:]))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def inner(nested_list):\n        if isinstance(nested_list,list):\n            return [elem for elem in nested_list if elem in nested_list]\n        else:\n            return []\n    return inner(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_elements(List1,List2):\n        temp = []\n        for i in range(len(List1)):\n            for j in range(len(List2)):\n                if List1[i] == List2[j]:\n                    temp.append(List1[i])\n        return temp\n    nested_List = []\n    for i in range(len(nestedlist)):\n        if type(nestedlist[i]) == list:\n            nested_List.append(nestedlist[i])\n    nested_List.sort()\n    common_List = []\n    for i in range(len(nested_List)):\n        common_List = common_List + common_elements(nested_List[i],nested_List[i+1])\n    return common_List\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(nestedlist[0])\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    ans=[]\n    for x in nestedlist:\n        ans+=x\n    return list(set(ans))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        for j in i:\n            if j not in result:\n                result.append(j)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here.\n    # 1. if length of the first list is not equal to the second list, return \"NO\"\n    # 2. if the length of the first list is equal to the second list, then check if the elements are equal or not\n    # 3. if the elements are equal, then common elements are the elements in the list which are common to both of them.\n    \n    if len(nestedlist[0])!= len(nestedlist[1]):\n        return \"NO\"\n    common_elements = []\n    for i in range(len(nestedlist[0])):\n        temp_list = []\n        temp_list.append(nestedlist[0][i])\n        for j in range(len(nestedlist[1])):\n            temp_list.append(nestedlist[1][j])\n        common_elements.append(list(set(temp_list)))\n    if len(common_elements) == len(nestedlist[0]):\n        return \"YES\"\n    else:\n        return common_elements\n    \nprint(common_in_nested_lists([[1, 2], [3, 4], [5]]))"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return []\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text == \"\":\n        return False\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(elem == {} for elem in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) > 0:\n        for i in range(len(list1)):\n            if len(list1[i]) > 0:\n                return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for l in list1:\n        if l:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(map(lambda x: len(x)==0,list1))"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if bool(x) == False:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    ans = 0\n    for i in range(len(nums)):\n        ans += nums[i] * (10**i)\n    return ans\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # your code here\n    s = sum(nums)\n    r = s % 10\n    return r\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # n = len(nums)\n    # return sum(nums)\n    return sum(map(lambda x: x, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # nums = (1, 2, 3)\n    if len(nums)!= 3:\n        raise ValueError\n    if type(nums) == int:\n        return nums\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    numbers = set(nums)\n    return int(sum(nums)/len(nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    n = nums[0]\n    for i in range(len(nums) - 1):\n        n *= nums[i + 1]\n    return n\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(e) for e in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + tuple_to_int(nums[1:])\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res *= nums[i]\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in range(len(test_list)):\n        for col in range(len(test_list[0])):\n            try:\n                test_list[row][col] = float(test_list[row][col])\n            except ValueError:\n                print(\"error:\", test_list[row][col])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                test_list[i][j] = test_list[i][j]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        try:\n            int(item)\n        except ValueError:\n            try:\n                float(item)\n            except ValueError:\n                pass\n            else:\n                continue\n        else:\n            continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list_to_float_helper(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for i in range(len(test_list)):\n            test_list[i] = float(test_list[i])\n    except ValueError:\n        pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list_to_float_helper(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == str:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except:\n                    pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j].isdigit():\n                test_list[i][j] = float(test_list[i][j])\n            elif test_list[i][j].replace('.', '').isdigit():\n                test_list[i][j] = float(test_list[i][j].replace('.', ''))\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    \n    \n    return list(string.split(' '))\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings into a single string, with each word in the string separated by a single space, with a single space between each word.\n    '''\n    return''.join(list)\n    \ndef list_to_string_nospace(list):\n    '''\n    Write a function to convert a list of strings into a single string, with each word in the string separated by a single space, with a single space between each word.\n    '''\n    return''.join(list).strip()\n    \ndef list_to_string_nospace_list(list):\n    '''\n    Write a function to convert a list of strings into a single string, with each word in the string separated by a single space, with a single space between each word.\n    '''\n    return''.join(list).split()\n    \ndef list_to_string_nospace_list_join(list):\n    '''\n    Write a function to convert a list of strings into a single string, with each word in the string separated by a single space, with a single space between each word.\n    '''\n    return''.join(list)\n    \ndef string_to_list_nospace_list_join(string):\n    '''\n    Write a function to convert a list of strings into a single string, with each word in the string separated by a single space, with a single space between each word.\n    '''\n    return string.split()\n    \ndef sort_string(string):\n    '''\n    Write a function to sort a string and return the sorted string.\n    '''\n    return ''.join(sorted(string))\n    \ndef capitalize_string(string):\n    '''\n    Write a function to capitalize the first character of a string.\n    '''\n    return string[0].upper() + string[1:]\n    \ndef sort_string_reverse(string):\n    '''\n    Write a function to sort a string and return the sorted string.\n    '''\n    return ''.join(sorted(string, reverse=True))\n    \ndef reverse_string_with_iteration(string):\n    '''\n    Write a function to reverse a string using iteration.\n    '''\n    r = ''\n    for char in string:\n        r = char + r\n    return r\n    \ndef reverse_string_with_recursion(string):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    def _reverse_string_recursive(string, start, end):\n        if start >= end:\n            return\n        string[start], string[end] = string[end], string[start]\n        _reverse_string_recursive(string, start+1, end-1)\n    \n    _reverse_string_recursive(string, 0, len(string)-1)\n    return string\n    \ndef remove_duplicates_with_iteration(string):\n    '''\n    Write a function to remove duplicate characters from a given string.\n    '''\n    r = ''\n    for char in string:\n        if char not in r:\n            r += char\n    return r\n    \ndef remove_duplicates_with_recursion(string):\n    '''\n    Write a function to remove duplicate characters from a given string.\n    '''\n    def _remove_duplicates_recursive(string, start, end):\n        if start >= end:\n            return\n        if start == end-1:\n            if string[start] == string[end]:\n                return _remove_duplicates_recursive(string, start+1, end-1)\n        if start == end:\n            return _remove_duplicates_recursive(string, start+1, end)\n        string[start], string[end] = string[end], string[start]\n        return _remove_duplicates_recursive(string, start+1, end-1)\n    \n    return _remove_duplicates_recursive(string, 0, len(string)-1)\n    \ndef remove_duplicates_with_recursion_set(string):\n    '''\n    Write a function to remove duplicate characters from a given string.\n    '''\n    s = set()\n    for char in string:\n        if char not in s:\n            s.add(char)\n    return ''.join(s)\n    \ndef reverse_string_with_recursion_set(string):\n    '''\n    Write a function to reverse a string using recursion.\n    '''\n    s = set()\n    def _reverse_string_recursive_set(string, start, end):\n        if start >= end:\n            return\n        string[start], string[end] = string[end], string[start]\n        _reverse_string_recursive_set(string, start+1, end-1)\n    \n    _reverse_string_recursive_set(string, 0, len(string)-1)\n    return ''.join(s)\n    \ndef replace_vowels_with_char_set(string):\n    '''\n    Write a function to replace all vowels in a string with the character '*'.\n    '''\n    vowels = 'aeiou'\n    s = set()\n    for char in string:\n        if char in vowels:\n            s.add('*')\n        else:\n            s.add(char)\n    return ''.join(s)\n    \ndef replace_vowels_with_char(string):\n    '''\n    Write a function to replace all vowels in a string with the character '*'.\n    '''\n    vowels = 'aeiou'\n    for char in string:\n        if char in vowels:\n            string = string.replace(char, '*')\n    return string\n    \ndef string_is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef string_is_palindrome_set(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    s = set()\n    for char in string:\n        if char in s:\n            s.remove(char)\n        else:\n            s.add(char)\n    return len(s) == 0\n    \ndef string_is_palindrome_set_not_worse(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    s = set()\n    for char in string:\n        if char in s:\n            return False\n        else:\n            s.add(char)\n    return True\n    \ndef string_is_palindrome_set_worse(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    s = set()\n    for char in string:\n        if char in s:\n            s.remove(char)\n        else:\n            s.add(char)\n    return len(s) == 0\n    \ndef string_to_all_capital(string):\n    '''\n    Write a function to convert a string to all capital letters.\n    '''\n    return string.upper()\n    \ndef string_to_all_capital_set(string):\n    '''\n    Write a function to convert a string to all capital letters.\n    '''\n    s = set()\n    for char in string:\n        if char.isupper():\n            s.add(char)\n    return ''.join(s)\n    \ndef string_to_all_capital_set_not_worse(string):\n    '''\n    Write a function to convert a string to all capital letters.\n    '''\n    return ''.join(s for s in string if s.isupper())\n    \ndef string_to_all_capital_set_worse(string):\n    '''\n    Write a function to convert a string to all capital letters.\n    '''\n    s = set()\n    for char in string:\n        if char.isupper():\n            s.add(char)\n    return ''.join(s)\n    \ndef string_to_all_lowercase_set(string):\n    '''\n    Write a function to convert a string to all lowercase letters.\n    '''\n    s = set()\n    for char in string:\n        if cha"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split() \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # first we split the string by space and then we convert the list into a string\n    return(string.split(' '))\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    s = string.split()\n    return s\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Your code here\n    return string.split(' ')\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    x = input()\n    size = len(arr)\n    left = 0\n    right = size - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if arr[middle] == x:\n            if middle == 0 or arr[middle - 1]!= x:\n                return arr[middle]\n            else:\n                right = middle - 1\n        elif arr[middle] < x:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] == arr[1]:\n        return search(arr[1:])\n    else:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    s = {}\n    for i in arr:\n        if i in s:\n            s[i]+=1\n        else:\n            s[i]=1\n    for i in arr:\n        if s[i]==1:\n            print(i)\n            break\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    length = len(arr)\n    if length <= 1:\n        return arr[0]\n    mid = length//2\n    if arr[mid] == arr[mid-1] or arr[mid] == arr[mid+1]:\n        return search(arr[0:mid])\n    else:\n        return search(arr[mid+1:length])\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i]!=arr[i+1]:\n            return arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0]\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left)//2\n        if arr[mid] == arr[mid-1] and arr[mid] == arr[mid+1]:\n            return arr[mid]\n        if arr[mid] < arr[mid-1]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #your code here\n    # Write your code here\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr: return -1\n    left, right = 0, len(arr)-1\n    while left < right:\n        mid = (left + right)//2\n        if arr[mid] < arr[right]:\n            right = mid\n        elif arr[mid] > arr[right]:\n            left = mid+1\n        else:\n            right -= 1\n    return arr[left]\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    for i in range(0,len(arr)):\n        if arr.count(arr[i])==1:\n            return arr[i]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if j+1 < len(list1[i]):\n                if abs(list1[i][j]) > max_val:\n                    max_val = abs(list1[i][j])\n    return max_val\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=float('-inf')\n    for i in list1:\n        for j in list1:\n            if i[0]!=j[0]:\n                product=i[0]*j[0]*(i[1]-j[1])\n                if product>max_product:\n                    max_product=product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = list1[0][0]*list1[0][1]\n    for i in range(1, len(list1)):\n        if list1[i][0]*list1[i][1] > maximum:\n            maximum = list1[i][0]*list1[i][1]\n    return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            prod = list1[i][0]*list1[j][0]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 3:\n        return None\n    max_p = 0\n    for i in range(len(list1)):\n        max_p = max(max_p, list1[i][0]*list1[i][1])\n        max_p = max(max_p, list1[i][1]*list1[i][2])\n        max_p = max(max_p, list1[i][0]*list1[i][2])\n    return max_p\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    prod1 = list1[0]\n    prod2 = list1[1]\n    if prod1[0] == prod2[0]:\n        return (max(prod1[1],prod2[1])) * (max(prod1[0],prod2[0]))\n    else:\n        return max(prod1[0] * prod2[1],prod2[0] * prod1[1])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)<=2:\n        return max(list1)\n    else:\n        x,y=0,1\n        product=list1[0]\n        max_prod=product\n        for i in range(1,len(list1)):\n            product=list1[i]\n            if product>0:\n                x=product\n            if product<0:\n                y=product\n            product=max(x,y)\n            if product>max_prod:\n                max_prod=product\n        return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                if list1[i][0] * list1[j][0] > list1[i][0] * list1[j][1]:\n                    list1[i][0], list1[j][0] = list1[j][0], list1[i][0]\n                if list1[i][1] * list1[j][0] > list1[i][1] * list1[j][1]:\n                    list1[i][1], list1[j][1] = list1[j][1], list1[i][1]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Your code here\n    \n    # from itertools import combinations\n    \n    # max_product = 0\n    # for i in range(0, len(list1) - 2):\n    #     for j in range(i+1, len(list1) - 1):\n    #         for k in range(j+1, len(list1)):\n    #             max_product = max(max_product, list1[i][0]*list1[j][0]*list1[k][0])\n    \n    # return max_product\n    \n    # Using HashMap\n    # Time Complexity : O(n)\n    # Space Complexity: O(1)\n    \n    max_product = float('-inf')\n    my_dict = {}\n    for i in range(0, len(list1)-2):\n        for j in range(i+1, len(list1)-1):\n            for k in range(j+1, len(list1)):\n                t = (list1[i][0]*list1[j][0]*list1[k][0], i, j, k)\n                if t in my_dict:\n                    my_dict[t] += 1\n                else:\n                    my_dict[t] = 1\n    for key, val in my_dict.items():\n        if val == max(my_dict.values()):\n            max_product = max(max_product, key[0])\n    return max_product\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = 0\n    max_pair = []\n    for i in range(len(list1)-1):\n        if list1[i][0] < list1[i+1][0] and list1[i][1] < list1[i+1][1]:\n            val = list1[i][0]*list1[i+1][1]\n        elif list1[i][0] < list1[i+1][0] and list1[i][1] > list1[i+1][1]:\n            val = list1[i][1]*list1[i+1][0]\n        elif list1[i][0] > list1[i+1][0] and list1[i][1] < list1[i+1][1]:\n            val = list1[i+1][1]*list1[i][0]\n        else:\n            val = list1[i+1][1]*list1[i][1]\n        if val > max_val:\n            max_val = val\n            max_pair = list1[i]\n    return max_pair, max_val\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        a = sum_of_factors(i)\n        b = sum_of_factors(a)\n        if i == a and a!= b:\n            sum += i\n        elif i == b and a!= b:\n            sum += i\n        else:\n            continue\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        n = sum(amicable_numbers(i))\n        if n!= i and n == sum(amicable_numbers(n)):\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # a, b = 1, 2\n    # while a!= b:\n    #     a, b = b, a + b\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicables = []\n    for num in range(1, limit):\n        sum_num = 0\n        for x in range(1, num):\n            if num == x:\n                continue\n            sum_num += x\n        if sum_num == num:\n            amicables.append(num)\n            print(num)\n    return sum(amicables)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    amicable_numbers_list = []\n    for number in range(2, limit+1):\n        for second_number in range(2, number):\n            if number % second_number == 0:\n                sum_amicable_numbers += number\n                amicable_numbers_list.append(number)\n                break\n    return sum_amicable_numbers\n    \nprint(amicable_numbers_sum(int(input())))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = set()\n    amicables = set()\n    for num in range(1, limit):\n        for i in range(1, num):\n            if (num * i) == (i * num) and num!= i:\n                amicables.add(num)\n        sum_of_amicables = sum(amicables)\n        if sum_of_amicables > num:\n            amicable_nums.add(num)\n        amicables = set()\n    return sum(amicable_nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    from itertools import combinations as comb\n    amicable_numbers = []\n    for num1, num2 in comb(range(1, limit), 2):\n        if num1 == num2:\n            continue\n        elif sum(num1, num2) == num1 + num2:\n            amicable_numbers.append(num1)\n            amicable_numbers.append(num2)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for number in range(1, limit):\n        a = sum(1 for b in range(1, number) if number % b == 0)\n        b = sum(1 for c in range(1, a) if a % c == 0)\n        if b == a and a!= number and number!= 1:\n            amicable_sum += number\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    from math import sqrt\n    sum = 0\n    for i in range(2, limit):\n        print(i)\n        for j in range(i + 1, limit):\n            print(\"{} {}\".format(i, j))\n            if sqrt(i) == int(sqrt(i)):\n                continue\n            if sqrt(j) == int(sqrt(j)):\n                continue\n            if i == j:\n                continue\n            if i == sqrt(i) or j == sqrt(j):\n                continue\n            if i % 2 == 0:\n                continue\n            if j % 2 == 0:\n                continue\n            if (i + j) % 2 == 0:\n                continue\n            if (i * j) % 2 == 0:\n                continue\n            if (i + j) % 2!= 0 and (i * j) % 2!= 0:\n                sum += i + j\n                print(sum)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1,limit+1):\n        # skip numbers that are larger than the sum of the divisors\n        if i > sum:\n            continue\n        j = sum - i\n        if j <= i:\n            continue\n        if i % 2!= 0 and j % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a**b\n    print(c)\n    return c"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    d=(a*a+b*b)**0.5\n    ans=math.atan2(a,b)\n    return ans*180/math.pi\ndef angle_radian(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import math\n    d=(a*a+b*b)**0.5\n    ans=math.acos(d)\n    return ans*180/math.pi\ndef dis_complex(a,b):\n    '''\n    Write a function to get the distance between two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    return math.sqrt((a-b)**2)\ndef dis_radian(a,b):\n    '''\n    Write a function to get the distance between two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    return math.sqrt((a-b)**2)\ndef norm_complex(a):\n    '''\n    Write a function to get the norm of a complex number.\n    '''\n    import math\n    a=a.real\n    return math.sqrt(a**2+a**2)\ndef norm_radian(a):\n    '''\n    Write a function to get the norm of a complex number.\n    '''\n    import math\n    a=a.real\n    return math.sqrt(a**2+a**2)\ndef magnitude_complex(a):\n    '''\n    Write a function to get the magnitude of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    return math.sqrt(a**2+b**2)\ndef magnitude_radian(a):\n    '''\n    Write a function to get the magnitude of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    return math.sqrt(a**2+b**2)\ndef addition_complex(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    c=a+b\n    return c\ndef addition_radian(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    c=a+b\n    return c\ndef subtraction_complex(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    c=a-b\n    return c\ndef subtraction_radian(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    c=a-b\n    return c\ndef multiplication_complex(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    c=a*b\n    return c\ndef multiplication_radian(a,b):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    c=a*b\n    return c\ndef division_complex(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    c=a/b\n    return c\ndef division_radian(a,b):\n    '''\n    Write a function to divide two complex numbers.\n    '''\n    import math\n    a=a.real\n    b=b.real\n    c=a/b\n    return c\ndef modulus_complex(a):\n    '''\n    Write a function to get the modulus of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=math.sqrt(a**2+b**2)\n    return c\ndef modulus_radian(a):\n    '''\n    Write a function to get the modulus of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=math.sqrt(a**2+b**2)\n    return c\ndef conjugate_complex(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=a*(-1)\n    return c\ndef conjugate_radian(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=a*(-1)\n    return c\ndef inverse_complex(a):\n    '''\n    Write a function to get the inverse of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=a/b\n    return c\ndef inverse_radian(a):\n    '''\n    Write a function to get the inverse of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=a/b\n    return c\ndef power_complex(a,b):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=a**b\n    return c\ndef power_radian(a,b):\n    '''\n    Write a function to raise a complex number to a power.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=a**b\n    return c\ndef abs_complex(a):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=abs(a)\n    return c\ndef abs_radian(a):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=abs(a)\n    return c\ndef complex_logarithm(a):\n    '''\n    Write a function to get the complex logarithm of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=math.log(a)+math.log(b)\n    return c\ndef complex_logarithm_radian(a):\n    '''\n    Write a function to get the complex logarithm of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=math.log(a)+math.log(b)\n    return c\ndef power_of_complex_number(a):\n    '''\n    Write a function to get the power of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=a**b\n    return c\ndef power_of_complex_number_radian(a):\n    '''\n    Write a function to get the power of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=a**b\n    return c\ndef inverse_of_complex_number(a):\n    '''\n    Write a function to get the inverse of a complex number.\n    '''\n    import math\n    a=a.real\n    b=a.imag\n    c=a/b\n    return c\ndef inverse_of_complex_number_radian(a):\n    '''\n    Write a function to get the inverse of a complex number.\n    '''\n    import math\n    a=a.real\n    b="
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_radians = cmath.phase(a + b)\n    return angle_radians\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(complex(a,b)))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+bj)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_a = -a.imag/a.real\n    angle_b = -b.imag/b.real\n    return (angle_a+angle_b)/2\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    angle_a = -a.imag\n    angle_b = -b.imag\n    return (angle_a+angle_b)/2\ndef angle_im(a,b):\n    '''\n    Write a function to get the angle of a imaginary number.\n    '''\n    angle_a = -a.real\n    angle_b = -b.real\n    return (angle_a+angle_b)/2\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a.real*b.real+a.imag*b.imag\n    return cmath.phase(c)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)/2\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n==2:\n        return True\n    if n<2 or n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\ndef fibonacci(n):\n    '''\n    Write a function fibonacci(n)\n    which returns the value of fibonacci series for the given number.\n    '''\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n    return a\ndef test_fibonacci():\n    '''\n    Write a test function to test your function fibonacci(n)\n    '''\n    assert fibonacci(0) == 0\n    assert fibonacci(1) == 1\n    assert fibonacci(2) == 1\n    assert fibonacci(3) == 2\n    assert fibonacci(4) == 3\n    assert fibonacci(5) == 5\n    assert fibonacci(6) == 8\n    assert fibonacci(7) == 13\n    assert fibonacci(8) == 21\n    assert fibonacci(9) == 34\n    assert fibonacci(10) == 55\n    assert fibonacci(11) == 89\n    assert fibonacci(12) == 144\n    assert fibonacci(13) == 233\n    assert fibonacci(14) == 377\n    assert fibonacci(15) == 610\n    assert fibonacci(16) == 987\n    assert fibonacci(17) == 1597\n    assert fibonacci(18) == 2584\n    assert fibonacci(19) == 4181\n    assert fibonacci(20) == 6765\n    assert fibonacci(21) == 10946\n    assert fibonacci(22) == 17711\n    assert fibonacci(23) == 28657\n    assert fibonacci(24) == 46368\n    assert fibonacci(25) == 75025\n    assert fibonacci(26) == 121393\n    assert fibonacci(27) == 196418\n    assert fibonacci(28) == 317811\n    assert fibonacci(29) == 3542248\n    assert fibonacci(30) == 5702887\n    assert fibonacci(31) == 832040\n    assert fibonacci(32) == 1346269\n    assert fibonacci(33) == 1845219\n    assert fibonacci(34) == 2912747\n    assert fibonacci(35) == 433494437\n    assert fibonacci(36) == 676497867\n    assert fibonacci(37) == 1134903170\n    assert fibonacci(38) == 1836311903\n    assert fibonacci(39) == 276829282\n    assert fibonacci(40) == 3435973836\n    assert fibonacci(41) == 37036500769\n    assert fibonacci(42) == 423766228845\n    assert fibonacci(43) == 5442738178952\n    assert fibonacci(44) == 69183983390238\n    assert fibonacci(45) == 931691209461913\n    assert fibonacci(46) == 1493020060346640\n    assert fibonacci(47) == 1788708155919076\n    assert fibonacci(48) == 256796135967162\n    assert fibonacci(49) == 3199284550104130\n    assert fibonacci(50) == 351480256444884\n    assert fibonacci(51) == 378915221214978\n    assert fibonacci(52) == 410712440358738\n    assert fibonacci(53) == 463687748366220\n    assert fibonacci(54) == 525287536532211\n    assert fibonacci(55) == 5791440332642483\n    assert fibonacci(56) == 605688173531323\n    assert fibonacci(57) == 665642545932716\n    assert fibonacci(58) == 7292646266370087\n    assert fibonacci(59) == 7956948458915054\n    assert fibonacci(60) == 864384875122874\n    assert fibonacci(61) == 924658218876961\n    assert fibonacci(62) == 1048123263167867\n    assert fibonacci(63) == 1154058657459656\n    assert fibonacci(64) == 1269350056626153\n    assert fibonacci(65) == 1358623160337664\n    assert fibonacci(66) == 1470884465608642\n    assert fibonacci(67) == 1569602351680807\n    assert fibonacci(68) == 1687298937497907\n    assert fibonacci(69) == 183753657632854\n    assert fibonacci(70) == 192794206652143\n    assert fibonacci(71) == 2179893668931220\n    assert fibonacci(72) == 2262445789530573\n    assert fibonacci(73) == 2355333411541523\n    assert fibonacci(74) == 244483435291554\n    assert fibonacci(75) == 252947253640008\n    assert fibonacci(76) == 261697802083397\n    assert fibonacci(77) == 2697143562202457\n    assert fibonacci(78) == 275162066709392\n    assert fibonacci(79) == 282895969937804\n    assert fibonacci(80) == 2918457329574443\n    assert fibonacci(81) == 3095600706723719\n    assert fibonacci(82) == 3128487922216548\n    assert fibonacci(83) == 3261264366210973\n    assert fibonacci(84) == 338033905109714\n    assert fibonacci(85) == 341442106107532\n    assert fibonacci(86) == 351700399048448\n    assert fibonacci(87) == 360083522425010\n    assert fibonacci(88) == 36950563593464\n    assert fibonacci(89) == 37534674770122\n    assert fibonacci(90) == 391596764604800\n    assert fibonacci(91) == 40522509457568\n    assert fibonacci(92) == 412339072069112\n    assert fibonacci(93) == 4209326355644782\n    assert fibonacci(94) == 4328803581653\n    assert fibonacci(95) == 442668016987648\n    assert fibonacci(96) == 4594865659613\n    assert fibonacci(97) == 462540657980208\n    assert fibonacci(98) == 474519560242564\n    assert fibonacci(99) == 484504616480072\n    assert fibonacci(100) == 494050281001324\n    assert fibonacci(101) == 503892250240640\n    assert fibonacci(102) == 5127271787120812\n    assert fibonacci(103) == 531396485341687\n    assert fibonacci(104) == 554566764873176\n    assert fibonacci(105) == 574718433594525\n    assert fibonacci(106) == 588276945285876\n    assert fibonacci(107) == 6027664294424516\n    assert fibonacci(108) == 605239980957496\n    assert fibonacci(109) == 618616802319013\n    assert fibonacci(110) == 628579241924666\n    assert fibonacci(111) == 638576036828026\n    assert fibonacci(112) == 648590214495234\n    assert fibonacci(113) == 6607114057474824\n    assert fibonacci(114) == 669302004830778\n    assert fibonacci(115) == 6781915465384664\n    assert fibonacci(116) == 709502930564098\n    assert fibo"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(a.conjugate()*b)/(abs(a)*abs(b))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Time: O(n^2)\n    # Space: O(n)\n    result = 0\n    for i in range(len(string)):\n        one = 0\n        zero = 0\n        for j in range(len(string)):\n            if string[j] == \"1\":\n                one += 1\n            else:\n                zero += 1\n        substring = string[i:i+len(string) - j]\n        if string[i:i+len(string)] == \"11\":\n            substring = \"1\" + substring\n        elif string[i:i+len(string)] == \"00\":\n            substring = \"0\" + substring\n        if zero > one:\n            result = max(result, zero - one)\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    len_str = len(string)\n    max_len = 0\n    n = len_str-1\n    while n>=0:\n        if string[n] == '0':\n            n-=1\n        else:\n            curr_len = 0\n            while n+curr_len < len_str and string[n+curr_len] == '1':\n                curr_len+=1\n            n+=curr_len\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    length = 1\n    count = 1\n    max_length = 1\n    count_zero = 0\n    count_one = 0\n    for i in range(1, n): \n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        if count_zero == 0:\n            length += 1\n        elif count_one == 0:\n            length += 1\n        else:\n            if abs(count_zero - count_one) > max_length:\n                max_length = abs(count_zero - count_one)\n            count = 1\n            count_zero = 0\n            count_one = 0\n    if abs(count_zero - count_one) > max_length:\n        max_length = abs(count_zero - count_one)\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #the max difference between two substrings will be (2 * length - 1) if it's the size of the string.\n    #we can use a sliding window approach to solve this problem.\n    #we can use a hashmap to keep track of the number of 0s and 1s in the substring.\n    #at each iteration, we check if the current substring has been found.\n    #if it hasn't been, we check if it has more 1s than 0s, if so, we update the length of the substring.\n    #if it doesn't have more 1s than 0s, then we check if it has more 0s than 1s, if so, we update the length of the substring.\n    #if the length of the substring has increased, we update the start index and increment the number of 0s and 1s in the substring.\n    #if it's the same as the previous substring, we increment the number of 0s and 1s in the substring.\n    #if it's smaller than the previous substring, we update the end index and increment the number of 0s and 1s in the substring.\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)-1):\n        sub_string = string[i:i+2]\n        one_count = 0\n        zero_count = 0\n        for j in range(len(sub_string)):\n            if sub_string[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if (string == None or len(string) == 0):\n        return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    return max(count_1 - count_0, 0)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string_list = list(string)\n    max_diff = 0\n    for index in range(len(string_list)):\n        if(string_list[index] == '1'):\n            curr_diff = 0\n            for i in range(index, len(string_list)):\n                if(string_list[i] == '1'):\n                    curr_diff += 1\n                else:\n                    break\n            if(curr_diff > max_diff):\n                max_diff = curr_diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero = 0\n    one = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero += 1\n        else:\n            one += 1\n        max_diff = max(zero, one)\n        if max_diff == 0:\n            break\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=0\n    d=0\n    for i in range(1,a+1):\n        if a%i==0:\n            c+=i\n        if b%i==0:\n            d+=i\n    if c==d:\n        return c\n    else:\n        return'sum is different'\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(a*b)\n    d = int(b*c)\n    if a==d or b==c:\n        print(c)\n    elif a>d and b>c:\n        print(d)\n    else:\n        print(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result=[]\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            result.append(i)\n    print(sum(a,b))\nsum(4,5)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n    \n    "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return(int(a*b/math.gcd(a,b)))\ndef get_factors(n): \n    '''\n    Write a python function to get the prime factors of the given number n\n    '''\n    i = 2\n    l = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            while n % i == 0:\n                n = n/i\n            l.append(i)\n        else:\n            i += 1\n    if n > 1:\n        l.append(n)\n    return(l)\ndef prime_factors(n):\n    '''\n    Write a python function to get the prime factors of the given number n\n    '''\n    if n == 1:\n        return([1])\n    else:\n        l = get_factors(n)\n        l.append(n)\n        return(l)\ndef is_prime(n):\n    '''\n    Write a python function to find whether the given number is prime or not\n    '''\n    if n == 1:\n        return(False)\n    else:\n        l = prime_factors(n)\n        for i in l:\n            if i!= n:\n                return(False)\n        return(True)\ndef fakt(n):\n    '''\n    Write a python function to get the factorial of the given number n\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact*i\n    return(fact)\ndef convert_binary(n):\n    '''\n    Write a python function to convert the given binary number to decimal number\n    '''\n    l = [int(i) for i in str(n)]\n    l.reverse()\n    sum = 0\n    for i in l:\n        sum = sum + (2**i)\n    return(sum)\ndef convert_octal(n):\n    '''\n    Write a python function to convert the given octal number to decimal number\n    '''\n    octal = '0123456789'\n    octal_list = []\n    octal_list = octal[::-1]\n    octal_number = str(n)\n    for i in range(0,len(octal_number)):\n        octal_list.append(octal_number[i])\n    octal_list = octal_list[::-1]\n    octal_sum = 0\n    for i in range(0,len(octal_list)):\n        octal_sum = octal_sum + (8**i)*int(octal_list[i])\n    return(octal_sum)\ndef convert_hexa(n):\n    '''\n    Write a python function to convert the given hexadecimal number to decimal number\n    '''\n    hexa = '0123456789abcdefABCDEF'\n    hexa_list = []\n    hexa_list = hexa[::-1]\n    hexa_number = str(n)\n    for i in range(0,len(hexa_number)):\n        hexa_list.append(hexa_number[i])\n    hexa_list = hexa_list[::-1]\n    hexa_sum = 0\n    for i in range(0,len(hexa_list)):\n        hexa_sum = hexa_sum + (16**i)*int(hexa_list[i])\n    return(hexa_sum)\ndef prime_decomposition(n):\n    '''\n    Write a python function to find the prime decomposition of the given number n\n    '''\n    if n == 1:\n        return([])\n    else:\n        l = get_factors(n)\n        for i in range(0,len(l)):\n            if is_prime(l[i]):\n                l[i] = 1\n            else:\n                l[i] = 0\n        l = l[::-1]\n        prime_decomposition = []\n        j = 1\n        while j < len(l):\n            if l[j] == 1:\n                for k in range(j+1,len(l)):\n                    if l[k] == 1:\n                        l[k] = 0\n                        l[j] = l[j] + 1\n                        break\n            j = j + 1\n        prime_decomposition.append(l[0])\n        for i in range(1,len(l)):\n            if l[i] == 0:\n                prime_decomposition.append(l[i])\n            else:\n                prime_decomposition.append(l[i])\n                prime_decomposition.append(l[i])\n        return(prime_decomposition)\ndef prime_decomposition_list(n):\n    '''\n    Write a python function to find the prime decomposition of the given number n\n    '''\n    if n == 1:\n        return([])\n    else:\n        l = get_factors(n)\n        prime_decomposition = []\n        j = 1\n        while j < len(l):\n            if l[j] == 1:\n                for k in range(j+1,len(l)):\n                    if l[k] == 1:\n                        l[k] = 0\n                        l[j] = l[j] + 1\n                        break\n            j = j + 1\n        prime_decomposition.append(l[0])\n        for i in range(1,len(l)):\n            if l[i] == 0:\n                prime_decomposition.append(l[i])\n            else:\n                prime_decomposition.append(l[i])\n                prime_decomposition.append(l[i])\n        return(prime_decomposition)\ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of the digits of the given number n\n    '''\n    sum = 0\n    while n!= 0:\n        sum = sum + n % 10\n        n = n//10\n    return(sum)\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of the digits of the given number n\n    '''\n    n = abs(n)\n    sum = 0\n    while n!= 0:\n        sum = sum + n % 10\n        n = n//10\n    return(sum)\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of the given number n\n    '''\n    if n == 1:\n        return(1)\n    else:\n        fact = 1\n        for i in range(1,n+1):\n            fact = fact*i\n        return(fact)\ndef fib(n):\n    '''\n    Write a python function to find the nth fibonacci number\n    '''\n    if n == 0:\n        return(0)\n    elif n == 1:\n        return(1)\n    else:\n        a = 0\n        b = 1\n        for i in range(1,n):\n            c = a + b\n            a = b\n            b = c\n        return(c)\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth fibonacci number\n    '''\n    if n == 0:\n        return(0)\n    elif n == 1:\n        return(1)\n    else:\n        a = 0\n        b = 1\n        for i in range(1,n):\n            c = a + b\n            a = b\n            b = c\n        return(c)\ndef all_prime_factors(n):\n    '''\n    Write a python function to find all the prime factors of the given number n\n    '''\n    prime_factors = []\n    while n!= 1:\n        if is_prime(n):\n            prime_factors.append(n)\n            n = 1\n        else:\n            for i in range(2,int(math.sqrt(n))+1):\n                if n % i == 0:\n                    n = n/i\n                    prime_factors.append(i)\n                    break\n    return(prime_factors)\ndef all_prime_factors_list(n):\n    '''\n    Write a python function to find all the prime factors of the given number n\n    '''\n    prime_factors = []\n    while n!= 1:\n        if is_prime("
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(1,min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            print(i)\n    return a+b\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    list_a = []\n    list_b = []\n    for x in range(1, a + 1):\n        if a % x == 0:\n            list_a.append(x)\n    for y in range(1, b + 1):\n        if b % y == 0:\n            list_b.append(y)\n    final = list_a + list_b\n    final_list = set(final)\n    final_list = list(final_list)\n    final_list.sort()\n    print(final_list)\n    print(sum(final_list))\n    print('The sum of common divisors of two given numbers is', sum(final_list))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    summ = []\n    for i in range(1,a):\n        if a%i == 0 and b%i == 0:\n            summ.append(i)\n    return sum(summ)\n            \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    def _sum(a,b,n):\n        if n == 1:\n            return a\n        else:\n            return a + _sum(a,b,n-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = []\n    for i in range(1,a):\n        if a % i == 0 and b % i == 0:\n            c.append(i)\n    print(sum(c))\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\nmultiply_int(100, 200)\nmultiply_int(100, -200)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(result)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y!= 0:\n        return x * y\n    else:\n        return 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while x!= 0:\n        result += y\n        x = x & (x-1)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    my_list = str.split()\n    i = 0\n    long_words = []\n    \n    while i < len(my_list):\n        if len(my_list[i]) > n:\n            long_words.append(my_list[i])\n        i += 1\n    \n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    longest = \"\"\n    \n    for word in str:\n        if len(word) > n:\n            if len(longest) < len(word):\n                longest = word\n            \n    return longest\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    result = []\n    \n    for word in str.split():\n        if len(word) > n:\n            result.append(word)\n            \n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [i for i in str.split() if len(i) >= n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    output = []\n    for word in words:\n        if len(word) > n:\n            output.append(word)\n    return output\nprint(long_words(3, \"I speak Goat Latin\"))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for i in range(len(str)):\n        word = str[i].split(' ')\n        for j in range(len(word)):\n            if len(word[j]) > n:\n                words.append(word[j])\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = str.split(\" \")\n    lst_new = []\n    for word in lst:\n        if len(word) > n:\n            lst_new.append(word)\n    return lst_new\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list) or len(my_matrix)!= 5:\n        raise ValueError('The input matrix is not a list of 5 integers')\n    for row in my_matrix:\n        if not isinstance(row, list):\n            raise ValueError('The input matrix is not a list of integers')\n        for i in row:\n            if not isinstance(i, int) and i not in range(0, 10):\n                raise ValueError('The values in the matrix should be integers or in the range from 0 to 9')\n    if sum(my_matrix[i][j] for i in range(len(my_matrix))\n        for j in range(len(my_matrix[i])))!= 45:\n        raise ValueError('The matrix should be a magic square')\n    if all(my_matrix[i][j] == (i + j) % 5 for i in range(len(my_matrix)) for j in range(len(my_matrix[i]))):\n        print('Yes, this is a magic square')\n    else:\n        print('No, this is not a magic square')\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #check if number of rows and columns are the same\n    if len(my_matrix)!= len(my_matrix[0]):\n        print(\"Not a magic square\")\n        return False\n    #check if number of rows and columns are the same\n    elif len(my_matrix) == len(my_matrix[0]):\n        #check if each value in the matrix is an integer\n        for row in my_matrix:\n            for item in row:\n                if type(item)!= int:\n                    print(\"Not a magic square\")\n                    return False\n                #check if rows and columns are the same\n                elif len(row)!= len(my_matrix[0]):\n                    print(\"Not a magic square\")\n                    return False\n        #check if each row and column of the matrix is a magic square\n        for i in range(len(my_matrix)):\n            temp_row = []\n            temp_col = []\n            #check if column and row of each column is a magic square\n            for j in range(len(my_matrix[0])):\n                temp_row.append(my_matrix[i][j])\n                temp_col.append(my_matrix[j][i])\n            #check if temp_row and temp_col are the same\n            if temp_row == temp_col:\n                print(\"Not a magic square\")\n                return False\n        #check if the whole matrix is magic square\n        for i in range(len(my_matrix)):\n            temp_row = []\n            temp_col = []\n            #check if rows and columns of each column are a magic square\n            for j in range(len(my_matrix[0])):\n                temp_row.append(my_matrix[i][j])\n                temp_col.append(my_matrix[j][i])\n            #check if temp_row and temp_col are the same\n            if temp_row == temp_col:\n                print(\"Not a magic square\")\n                return False\n        print(\"Magic square\")\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if type(my_matrix)!= list or len(my_matrix)!= 9 or len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for row in my_matrix:\n        if type(row)!= list:\n            return False\n        if len(row)!= 9:\n            return False\n        for col in row:\n            if not (type(col) == int and col >= 0 and col <= 9):\n                return False\n    sorted_matrix = sorted(my_matrix, key=lambda x: x[0])\n    sorted_matrix = sorted(sorted_matrix, key=lambda x: x[1])\n    my_matrix = sorted_matrix\n    for i in range(1, len(my_matrix), 3):\n        if my_matrix[i]!= my_matrix[i-1] + my_matrix[i-2]:\n            return False\n    for i in range(2, len(my_matrix), 3):\n        if my_matrix[i]!= my_matrix[i-1] + my_matrix[i-2]:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code here\n    n = len(my_matrix)\n    if n == 0:\n        return 0\n    for i in range(n):\n        if len(my_matrix[i])!= n:\n            return 0\n    for i in range(n):\n        if my_matrix[i][i] == 0:\n            return 0\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += my_matrix[j][i]\n        if col_sum!= my_matrix[i][i]:\n            return 0\n    for i in range(n):\n        row_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n        if row_sum!= my_matrix[i][i]:\n            return 0\n    return 1\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    test = True\n    \n    for row in my_matrix:\n        if len(row)!= len(my_matrix):\n            test = False\n    \n    if test == False:\n        print('Matrix is not square.')\n        return\n    \n    \n    for i in range(len(my_matrix)):\n        my_sum = 0\n        for j in range(len(my_matrix)):\n            my_sum += my_matrix[i][j]\n        if my_sum!= (i+1)*(len(my_matrix)+1):\n            print('Not magic square.')\n            return\n    \n    \n    my_sum = 0\n    for i in range(len(my_matrix)):\n        my_sum += my_matrix[i][i]\n    \n    if my_sum!= (len(my_matrix)+1):\n        print('Not magic square.')\n        return\n    \n    \n    my_sum = 0\n    for j in range(len(my_matrix)):\n        my_sum += my_matrix[j][len(my_matrix)-j-1]\n    \n    if my_sum!= (len(my_matrix)+1):\n        print('Not magic square.')\n        return\n    \n    \n    print('Matrix is magic square.')\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is empty\n    if not my_matrix:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    matrix_row = 0\n    matrix_col = 0\n    check = False\n    for row in range(n):\n        for col in range(n):\n            if my_matrix[matrix_row][matrix_col]!= my_matrix[(matrix_row + 1) % n][matrix_col] and \\\n            my_matrix[matrix_row][matrix_col]!= my_matrix[matrix_row][(matrix_col + 1) % n]:\n                check = False\n                break\n            else:\n                check = True\n        if not check:\n            break\n        else:\n            matrix_col += 1\n    if check:\n        if matrix_col == n:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code here\n    if not type(my_matrix) == list or not type(my_matrix[0]) == list:\n        return False\n    for row in my_matrix:\n        if not type(row) == list:\n            return False\n    for row in my_matrix:\n        for val in row:\n            if not type(val) == int:\n                return False\n    row_count = len(my_matrix)\n    col_count = len(my_matrix[0])\n    if row_count == col_count:\n        for i in range(row_count):\n            if not sum(my_matrix[i]) == (row_count * row_count):\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not my_matrix:\n        return False\n    my_length = len(my_matrix)\n    my_sum = sum([sum(x) for x in my_matrix])\n    if my_sum!= my_length ** 2:\n        return False\n    my_sum = 0\n    for row in my_matrix:\n        my_sum = 0\n        for element in row:\n            my_sum += element\n    if my_sum!= my_length ** 2:\n        return False\n    \n    my_sum = 0\n    for i in range(my_length):\n        my_sum += my_matrix[i][i]\n    if my_sum!= my_length ** 2:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    if not isinstance(my_matrix, list) or size == 0:\n        return False\n    if not all([isinstance(x, int) for x in my_matrix]):\n        return False\n    if size!= len(my_matrix[0]):\n        return False\n    if any(len(x)!= size for x in my_matrix):\n        return False\n    \n    def sum_of_squares(i, j):\n        return sum((my_matrix[x][y] - my_matrix[i][j]) ** 2 for x in range(size) for y in range(size))\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    max_value = 0\n    for i in nums:\n        dic[i] += 1\n        if dic[i] > max_value:\n            max_value = dic[i]\n    for i,j in dic.items():\n        if j == max_value:\n            return i\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_val = 0\n    for val in nums:\n        counts[val] += 1\n        if counts[val] > max_count:\n            max_count = counts[val]\n            max_val = val\n    return max_val\n    \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_val = 0\n    for i in nums:\n        d[i] += 1\n        if d[i] > max_val:\n            max_val = d[i]\n    for k,v in d.items():\n        if v == max_val:\n            return k\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(lambda:0)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    max_count = 0\n    max_key = None\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_occurrence = max(freq.values())\n    \n    for key, val in freq.items():\n        if max_occurrence == val:\n            return key\n    \n    return -1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if nums == None:\n        return None\n    d = defaultdict(int)\n    for i in range(len(nums)):\n        d[nums[i]] += 1\n    return max(d.keys(), key=lambda x: d[x])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict1 = defaultdict(int)\n    for x in nums:\n        dict1[x] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # sort the nums in increasing order\n    nums.sort()\n    \n    # create a default dictionary\n    d = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_of_element = defaultdict(int)\n    for i in nums:\n        count_of_element[i] += 1\n    max_occ = max(count_of_element.values())\n    for i in count_of_element.keys():\n        if count_of_element[i] == max_occ:\n            return i\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # list1 = []\n    vowels = ['a','e','i','o','u','y']\n    str1 = str1.lower()\n    str1 = str1.replace(' ','')\n    for i in range(0,len(str1)):\n        if str1[i] not in vowels:\n            # list1.append(str1[i])\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n    # print(list1)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y','A','E','I','O','U','Y']\n    new_str = ''\n    for i in str1:\n        if i in vowels:\n            new_str += i\n        else:\n            new_str +=''\n    print(new_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_in_str = vowels + vowels.upper()\n    vowels_in_str = vowels_in_str.replace('y','')\n    vowels_in_str = vowels_in_str.upper()\n    reverse_vowels = []\n    for char in str1:\n        if char in vowels_in_str:\n            reverse_vowels.append(char)\n            reverse_vowels.append(char)\n    reverse_vowels = ''.join(reverse_vowels)\n    reverse_vowels = reverse_vowels.replace('i','')\n    reverse_vowels = reverse_vowels.replace('o','')\n    reverse_vowels = reverse_vowels.replace('u','')\n    reverse_vowels = reverse_vowels.replace('e','')\n    reverse_vowels = reverse_vowels.upper()\n    return reverse_vowels\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a','e','i','o','u','A','E','I','O','U','Y'}\n    res = []\n    for char in str1:\n        if char in vowels:\n            res.append(char)\n        else:\n            res.append(' ')\n    return ''.join(res)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a','e','i','o','u','y'])\n    rev_str = \"\"\n    for i in range(len(str1)-1,-1,-1):\n        if str1[i] not in vowels:\n            rev_str = rev_str + str1[i]\n        else:\n            continue\n    return rev_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    vowels_list = []\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    arr = list(str1)\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        if arr[i] in vowels and arr[j] in vowels:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] in vowels:\n            j -= 1\n        elif arr[j] in vowels:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return ''.join(arr)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = str1.lower()\n    newstr = \"\"\n    for c in str1:\n        if c not in vowels:\n            newstr = newstr + c\n        else:\n            newstr = newstr + c.upper()\n    return newstr\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    vowels_in_string = set(str1) & vowels\n    return ''.join(vowels_in_string) + ''.join(set(str1) - vowels_in_string)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    lst1 = list(str1)\n    i = 0\n    j = len(lst1) - 1\n    while i < j:\n        if lst1[i] in 'aeiou':\n            if lst1[j] in 'aeiou':\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n        else:\n            i += 1\n    return ''.join(lst1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = str(tup1)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return f'{tup1[0]}, {tup1[1]}'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(tup1)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = tup1\n    return(','.join(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #If only one element in the tuple, return the single element in the tuple as a string.\n    if len(tup1) == 1:\n        return str(tup1[0])\n    #If two or more elements in the tuple, concatenate the two elements and return the result as a string.\n    else:\n        return str(tup1[0])+\", \"+str(tup1[1])\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    print(type(tup1))\n    #write code here\n    return (''.join(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum=0\n    for num in nums:\n        if num < 0:\n            negativenum+=num\n    return negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #def sum_negativenum(nums):\n    #    return sum([n for n in nums if n < 0])\n    return sum(n for n in nums if n < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum_neg += nums[i]\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_numbers = []\n    for num in nums:\n        if num < 0:\n            neg_numbers.append(num)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            result += nums[i]\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-n for n in nums if n < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #return sum(num for num in nums if num < 0)\n    if not nums:\n        return 0\n    return sum(nums) + sum([-x for x in nums])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    return ((3*n**2) - (2*n))\n    \ndef write_fast(n, delimiter=', '): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    return delimiter.join(map(str, range(1, n+1)))\n    \ndef write_fast(n, delimiter=', '): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    return delimiter.join(map(str, range(1, n+1)))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return hexagonal_num(n-1) + (3**(n-1))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n - 1\n    i = 1\n    a = 1\n    while i < n: \n        i += 1\n        a *= 6 - 2*i\n    return int(a)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    assert n > 0, \"n must be greater than 0\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(3*n-1)/2) + hexagonal_num(n-1)\n    \nprint(hexagonal_num(3))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3*n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n**2 * (3**0.5))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int( (2*n) ** (1/3) )\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*((3*n)-1))//2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def fibonacci(n):\n        \"\"\"\n        Returns nth fibonacci number.\n        \"\"\"\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n        \n    # If n is even\n    if n % 2 == 0:\n        # Return the nth fibonacci number\n        return fibonacci(n//2)\n    # If n is odd\n    else:\n        # Return the nth fibonacci number\n        return fibonacci(n//2) + fibonacci(n//2)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    d = {}\n    for i in nums:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return {k: v/len(nums) for k, v in d.items() if v == 0}\ndef zero_count1(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_0 = 0\n    count_1 = 0\n    for i in nums:\n        if i == 0:\n            count_0 += 1\n        else:\n            count_1 += 1\n    print(count_1/count_0)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    ones = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            ones += 1\n    return zeroes/ones\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zeroes = 0\n    for i in range(n):\n        if nums[i] == 0:\n            zeroes += 1\n    return zeroes/n\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    n = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            z += 1\n        else:\n            n += 1\n    return z/n\ndef test_zero_count():\n    assert zero_count([]) == 1.0\n    assert zero_count([1, 0, 1]) == 1.0\n    assert zero_count([0, 0, 0, 1]) == 0.5\n    assert zero_count([1, 0, 1, 0, 1]) == 2.0/3\ndef min_max(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a tuple of minimum and maximum values in that list.\n    '''\n    if len(nums) == 0:\n        return (None, None)\n    else:\n        low = nums[0]\n        high = nums[0]\n        for i in range(len(nums)):\n            if nums[i] < low:\n                low = nums[i]\n            if nums[i] > high:\n                high = nums[i]\n    return (low, high)\ndef test_min_max():\n    assert min_max([]) == (None, None)\n    assert min_max([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == (0, 0)\n    assert min_max([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]) == (0, 1)\n    assert min_max([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (0, 10)\n    assert min_max([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (0, 10)\n    assert min_max([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (-1, 11)\ndef three_sum(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a sorted list of triplets that sum to zero.\n    '''\n    if len(nums) < 3:\n        return []\n    nums.sort()\n    output = []\n    for i in range(len(nums)):\n        if i == 0 or i > 0 and nums[i]!= nums[i-1]:\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if sum == 0:\n                    output.append((nums[i], nums[left], nums[right]))\n                if sum < 0:\n                    left += 1\n                if sum > 0:\n                    right -= 1\n    return output\ndef test_three_sum():\n    assert three_sum([]) == []\n    assert three_sum([0, 0, 0, 0]) == []\n    assert three_sum([0, 0, 0, 0, 0]) == []\n    assert three_sum([0, 1, 2, 3, 4, 0]) == [(0,0,0)]\n    assert three_sum([0, 0, 0, 0, 0, 1]) == [(0,0,0)]\n    assert three_sum([-1, 0, 1, 2, -1, -4]) == [(0,0,-1), (-1,1,-1)]\n    assert three_sum([-1, 0, 1, 2, -1, -4, -3, -2, -1, 0, 1, 2, -1, -4, -3, -2, -1]) == [(0,0,-1), (-1,1,-1), (-3, -2, -1)]\n    assert three_sum([-1, 0, 1, 2, -1, -4, -3, -2, -1, 0, 1, 2, -1, -4, -3, -2, -1, 0, 1, 2, -1, -4]) == [(0,0,-1), (-1,1,-1), (-3, -2, -1)]\ndef three_sum_sorted(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a sorted list of triplets that sum to zero.\n    '''\n    if len(nums) < 3:\n        return []\n    nums.sort()\n    output = []\n    for i in range(len(nums)):\n        if i == 0 or i > 0 and nums[i]!= nums[i-1]:\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if sum == 0:\n                    output.append((nums[i], nums[left], nums[right]))\n                if sum < 0:\n                    left += 1\n                if sum > 0:\n                    right -= 1\n    return output\ndef test_three_sum_sorted():\n    assert three_sum_sorted([]) == []\n    assert three_sum_sorted([0, 0, 0, 0]) == []\n    assert three_sum_sorted([0, 0, 0, 0, 0]) == []\n    assert three_sum_sorted([0, 1, 2, 3, 4, 0]) == [(0,0,0)]\n    assert three_sum_sorted([0, 0, 0, 0, 0, 1]) == [(0,0,0)]\n    assert three_sum_sorted([-1, 0, 1, 2, -1, -4]) == [(0,0,-1), (-1,1,-1)]\n    assert three_sum_sorted([-1, 0, 1, 2, -1, -4, -3, -2, -1, 0, 1, 2, -1, -4, -3, -2, -1]) == [(0,0,-1), (-1,1,-1), (-3, -2, -1)]\n    assert three_sum_sorted([-1, 0, 1, 2, -1, -4, -3, -2, -1, 0, 1, 2, -1, -4, -3, -2, -1, 0, 1, 2, -1, -4]) == [(0,0,-1), (-1,1,-1), (-3, -2, -1)]\n    assert three_sum_sorted([-1, 0, 1, 2, -1, -4, -3, -2, -1, 0, 1, 2, -1, -4, -3, -2, -1, 0, 1, 2, -1, -4]) == [(0,0,-1), (-1,1,-1), (-3, -2, -1)]\ndef three_sum_sorted_dictionary(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a sorted list of triplets that sum to zero.\n    '''\n    if len(nums) < 3:\n        return []\n    nums.sort()\n    dictionary = {}\n    for i in range(len(nums)):\n        if nums[i] not in dictionary:\n            dictionary[nums[i]] = (i)\n    output = []\n    for i in range(len(nums)):\n        left = i + 1\n        right = len(nums) - 1\n        while left < right:\n            sum = nums[i] + nums[left] + nums[right]\n            if sum == 0:\n                output.append((nums[i], nums[left], nums[right]))\n            if sum < 0:\n                left += 1\n            if sum > 0:\n                right -= 1\n    return output\ndef test_three_sum_sorted_dictionary():\n    assert three_sum_sorted_dictionary([]) == []\n    assert three_sum_sorted_dictionary([0, 0, 0, 0]) == []\n    assert three_sum_sorted_dictionary([0, 0, 0, 0, 0]) == []\n    assert three_sum_sorte"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            non_zero += 1\n    return zero_count / non_zero\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    zero = 0\n    nonzero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero += 1\n        else:\n            nonzero += 1\n    return zero / nonzero\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return True\n    if n == 2: \n        return True\n    if n == 3: \n        return True\n    if n % 3 == 0: \n        return False\n    if n % 5 == 0: \n        return False\n    if n % 3!= 0 and n % 5!= 0: \n        return True\n    if n % 3!= 0: \n        return is_Sum_Of_Powers_Of_Two(n % 3)\n    if n % 5!= 0: \n        return is_Sum_Of_Powers_Of_Two(n % 5)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n<0):\n        return False\n    while(n):\n        tmp=n\n        n=n>>1\n        while(n>0):\n            n=n>>1\n        if(tmp<0):\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(n):\n        if n == 0:\n            return True\n        while n:\n            n //= 2\n            if n == 0:\n                return True\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    n = n - 1\n    while n!= 0:\n        if not (n & 1) == 0:\n            return False\n        n = n >> 1\n    return True\n    "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n >= 0:\n        m = n\n        sum = 0\n        while m >= 1:\n            m = m // 2\n            sum = sum + m\n        if sum == n:\n            return True\n    return False\n        \ndef Sum_Of_Powers_Of_Two_BF(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n >= 0:\n        m = n\n        sum = 0\n        while m >= 1:\n            m = m // 2\n            sum = sum + m\n        if sum == n:\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    res = n % 2\n    while res!= 0:\n        n = n // 2\n        res = n % 2\n    if n == 1: \n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0:\n        return False\n    count=0\n    while(n>0):\n        if n%2==0:\n            n=n/2\n            count=count+1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        n = n >> 1\n        if n == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n    return sum % 2 == 0"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while(n!=0):\n        if(n%2!=0):\n            return False\n        else:\n            n=int(n/2)\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    return (2*math.pi*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = math.pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    PI = 3.14159265\n    return PI * r**2\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    cir_circumf = 2 * pi * r\n    return cir_circumf\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    answer = set()\n    for sublist in test_list:\n        for item in sublist:\n            answer.add(item)\n    return answer\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    lst = test_list\n    new_list = []\n    while lst:\n        first = lst.pop(0)\n        if type(first) == list:\n            lst += first\n        else:\n            new_list.append(first)\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # for i in range(len(test_list)):\n    #     for j in range(len(test_list[i])):\n    #         test_list[i][j] = list(test_list[i][j])\n    #     test_list[i] = list(flatten(test_list[i]))\n    # return test_list\n    return list(chain.from_iterable(test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_set = set()\n    for i in test_list:\n        if type(i) == int:\n            return_set.add(i)\n        else:\n            return_set.update(extract_singly(i))\n    return return_set\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return test_list[0] if len(test_list) == 1 else test_list[0] + extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list)==1:\n        return test_list[0]\n    else:\n        output=[]\n        for i in range(0,len(test_list)):\n            output.extend(test_list[i])\n        return output\n        \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)):\n        if i == 0:\n            output = test_list[i]\n        else:\n            output = output + test_list[i]\n    return output\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for i in test_list:\n        flattened = flattened + i\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            return_list.extend(i)\n        else:\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    while len(nums) > 1:\n        largest = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[largest]:\n                largest = i\n        nums[0], nums[largest] = nums[largest], nums[0]\n        nums = nums[:-1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_nums(nums):\n        if len(nums) <= 1:\n            return nums\n        \n        pivot_index = get_pivot_index(nums)\n        swap(nums, pivot_index, len(nums) - 1)\n        nums[pivot_index], nums[len(nums) - 1] = nums[len(nums) - 1], nums[pivot_index]\n        \n        pancake_sort(nums)\n        return nums\n    return sort_nums(nums)\n    \ndef get_pivot_index(nums):\n    pivot_index = 0\n    for index in range(1, len(nums)):\n        if nums[index] < nums[pivot_index]:\n            pivot_index = index\n    return pivot_index\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def largest(nums):\n        n = len(nums)\n        k = n-1\n        for i in range(n-1, -1, -1):\n            if nums[i] < nums[k]:\n                nums[i], nums[k] = nums[k], nums[i]\n                k -= 1\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    curr_min = -1\n    curr_max = 0\n    \n    for i in range(n-1, -1, -1):\n        if curr_min == -1:\n            curr_min = i\n            curr_max = i\n        else:\n            if nums[i] < nums[curr_min]:\n                curr_min = i\n            elif nums[i] > nums[curr_max]:\n                curr_max = i\n                \n    nums = nums[curr_min:curr_max+1] + nums[:curr_min] + nums[curr_max+1:]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == None:\n        return None\n    \n    index = 0\n    while len(nums) > 1:\n        if nums[0] < nums[index]:\n            temp = nums[0]\n            nums[0] = nums[index]\n            nums[index] = temp\n        index += 1\n    \n    return nums\n    \ndef is_palindrome(phrase):\n    '''\n    Determine if a word, phrase, is a palindrome.\n    A palindrome is a word that reads the same forwards and backwards.\n    '''\n    for i in range(len(phrase)//2):\n        if phrase[i]!= phrase[-i-1]:\n            return False\n    return True\n    \ndef is_anagram(str1, str2):\n    '''\n    Determine if two strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        d1 = {}\n        d2 = {}\n        for letter in str1:\n            if letter not in d1:\n                d1[letter] = 1\n            else:\n                d1[letter] += 1\n        for letter in str2:\n            if letter not in d2:\n                d2[letter] = 1\n            else:\n                d2[letter] += 1\n        if d1 == d2:\n            return True\n        else:\n            return False\n    \ndef is_substring(str1, str2):\n    '''\n    Determine if a string is a substring of another.\n    '''\n    if str1 in str2:\n        return True\n    else:\n        return False\n    \ndef reverse_substring(str1, start, end):\n    '''\n    Reverse a substring in place\n    '''\n    while start < end:\n        str1[start], str1[end] = str1[end], str1[start]\n        start += 1\n        end -= 1\n    \n    return str1\n    \ndef last_occurrence(lst, val):\n    '''\n    Determine the index of the last appearance of a value in a list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == val:\n            count += 1\n    return count\n    \ndef replace_all(s, old, new):\n    '''\n    Replace all instances of a substring with another string in a string.\n    '''\n    count = 0\n    while count < len(s):\n        if s[count:count+len(old)] == old:\n            s = s[:count] + new + s[count+len(old):]\n        count += 1\n    return s\n    \ndef is_palindrome_v2(phrase):\n    '''\n    A palindrome is a phrase that reads the same forwards and backwards.\n    '''\n    forwards = \"\"\n    backwards = \"\"\n    for i in range(len(phrase)):\n        forwards += phrase[i]\n        backwards = backwards[::-1]\n        if forwards == backwards:\n            return True\n        else:\n            return False\n            \ndef is_palindrome_v3(phrase):\n    '''\n    A palindrome is a phrase that reads the same forwards and backwards.\n    '''\n    forwards = \"\"\n    backwards = \"\"\n    for i in range(len(phrase)):\n        forwards += phrase[i]\n        backwards = forwards[::-1]\n        if forwards == backwards:\n            return True\n        else:\n            return False\n        \ndef is_palindrome_v4(phrase):\n    '''\n    A palindrome is a phrase that reads the same forwards and backwards.\n    '''\n    forwards = \"\"\n    backwards = \"\"\n    for i in range(len(phrase)):\n        forwards += phrase[i]\n        backwards = backwards[::-1]\n        if forwards == backwards:\n            return True\n        else:\n            return False\n        \ndef is_palindrome_v5(phrase):\n    '''\n    A palindrome is a phrase that reads the same forwards and backwards.\n    '''\n    forwards = \"\"\n    backwards = \"\"\n    for i in range(len(phrase)):\n        forwards += phrase[i]\n        backwards = forwards[::-1]\n        if forwards == backwards:\n            return True\n        else:\n            return False\n        \ndef is_palindrome_v6(phrase):\n    '''\n    A palindrome is a phrase that reads the same forwards and backwards.\n    '''\n    forwards = \"\"\n    backwards = \"\"\n    for i in range(len(phrase)):\n        forwards += phrase[i]\n        backwards = forwards[::-1]\n        if forwards == backwards:\n            return True\n        else:\n            return False\n        \ndef num_buses_to_dest(num_buses, num_stops, to_stop):\n    '''\n    Determine how many buses you need to go to get to the stop.\n    '''\n    bus_stop_map = {}\n    for i in range(num_buses):\n        bus_stop_map[i] = i*num_stops\n    \n    while to_stop not in bus_stop_map.keys():\n        to_stop += 1\n    \n    return bus_stop_map[to_stop]\n    \ndef replace_all_v2(str1, old, new):\n    '''\n    Replace all instances of a substring with another string in a string.\n    '''\n    while old in str1:\n        str1 = str1.replace(old, new)\n    return str1\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    max_element = max(nums)\n    index = nums.index(max_element)\n    nums[-1], nums[index] = nums[index], nums[-1]\n    for i in range(len(nums) - 1, 0, -1):\n        if nums[i] > nums[i - 1]:\n            break\n        nums[i], nums[i - 1] = nums[i - 1], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == None:\n        return []\n    # step 1: find the largest index j, such that nums[j] is the largest element in nums[0, j]\n    n = len(nums)\n    j = n-1\n    for i in range(n-1, -1, -1):\n        if nums[i] > nums[j]:\n            j = i\n    # step 2: from the largest index j, move all the numbers one step to the left, until j=0\n    for i in range(j, 0, -1):\n        nums[i], nums[i - 1] = nums[i - 1], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Sort using Recursion\n    def sort(arr, n):\n        if len(arr) == 1:\n            return arr\n        if len(arr) == 2:\n            if arr[0] > arr[1]:\n                arr[1], arr[0] = arr[0], arr[1]\n            return arr\n        \n        max_index = len(arr) - 1\n        max_index_index = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[max_index_index]:\n                max_index_index = i\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # once we get to the end of the list, we can flip the last element and\n    # make the list in the right order\n    nums = nums[::-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    for i in range(n):\n        \n        # find the last element > i\n        low = i\n        for j in range(i,n):\n            if nums[j] > nums[low]:\n                low = j\n        \n        if low!= i:\n            nums[i], nums[low] = nums[low], nums[i]\n            \n            \n            for j in range(low,i):\n                if nums[j] > nums[low]:\n                    low = j\n            \n            nums[i], nums[low] = nums[low], nums[i]\n        else:\n            break\n            \n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            return True\n    return False\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in list2:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in list3:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\ndef count_reversepair(list1,list2,list3):\n    '''\n    Write a function to count number of items that are identical in the reverse position of three given lists.\n    '''\n    d={}\n    for i in list1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in list2:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    for i in list3:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return d\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i] == list2[j]:\n                count_same+=1\n                for k in range(0,len(list3)):\n                    if list1[i] == list3[k]:\n                        count_same+=1\n    return count_same\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Write your solution here\n    counter = 0\n    if len(list1)!= len(list2):\n        return -1\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return 0\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\nprint(count_samepair([1,2,3],[1,2,3],[1,2,3]))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    result=0\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                result+=1\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same_pair = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list3[i] == list3[j]:\n                count_same_pair += 1\n    return count_same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter=0\n    if len(list1)==0 or len(list2)==0 or len(list3)==0:\n        return counter\n    if len(list1)==len(list2) and len(list2)==len(list3) and len(list1)==len(list3):\n        for i in range(len(list1)):\n            if list1[i]==list2[i] and list2[i]==list3[i]:\n                counter+=1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists=0\n    for item in Input:\n        if type(item)==list:\n            lists+=1\n        else:\n            continue\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # list_count = 0\n    # for i in range(0,len(Input)):\n    #     if isinstance(Input[i], list):\n    #         list_count += 1\n    # return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    for i in range(0,len(Input)):\n        if(len(Input[i])%2==0):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    tuple_1 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\")\n    tuple_2 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\")\n    tuple_3 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\")\n    tuple_4 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\")\n    tuple_5 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\")\n    tuple_6 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\")\n    tuple_7 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\")\n    tuple_8 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\")\n    tuple_9 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\")\n    tuple_10 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\")\n    tuple_11 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\")\n    tuple_12 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\")\n    tuple_13 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\")\n    tuple_14 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\")\n    tuple_15 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\")\n    tuple_16 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\")\n    tuple_17 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\")\n    tuple_18 = (\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\",\"252\",\"253\",\"254\",\"255\",\"256\",\"257\",\"258\",\"259\",\"260\",\"261\",\"262\",\"263\",\"264\",\"265\",\"266\",\"267\",\"268\",\"269\",\"270\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"277\",\"278\",\"279\",\"280\",\"281\",\"282\",\"283\",\"284\",\"285\",\"286\",\"287\",\"288\",\"289\",\"290\",\"291\",\"292\",\"293\",\"294\",\"295\",\"296\",\"297\",\"298\",\"299\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"306\",\"307\",\"308\",\"309\",\"310\",\"311\",\"312\",\"313\",\"314\",\"315\",\"316\",\"317\",\"318\",\"319\",\"320\",\"321\",\"322\",\"323\",\"324\",\"325\",\"326\",\"327\",\"328\",\"329\",\"330\",\"331\",\"332\",\"333\",\"334\",\"335\",\"336\",\"337\",\"338\",\"339\",\"340\",\"341\",\"342\",\"343\",\"344\",\"345\",\"346\",\"347\",\"348\",\"349\",\"350\",\"351\",\"352\",\"353\",\"354\",\"355\",\"356\",\"357\",\"358\",\"359\",\"360\",\"361\",\"362\",\"363\",\"364\","
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    c=0\n    for i in Input:\n        if type(i)==list:\n            c+=1\n    return c\nprint(find_lists((1,2,[3],4)))\nprint(find_lists((1,2,[3],4)))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Initialize an empty list\n    list1 = []\n    \n    # Iterate the Input tuple\n    for i in Input:\n        # If element is present in the list add it to the list\n        if i not in list1:\n            list1.append(i)\n        \n    # Return the length of the list\n    return len(list1)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    if isinstance(Input, tuple):\n        for i in Input:\n            if isinstance(i, list):\n                list_count += 1\n    else:\n        print(\"Invalid Input\")\n    return list_count\nprint(find_lists(((1,2),['a','b'],'c')))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    # Input = ('a','b','c','d')\n    # Output: 4\n    \n    list_count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            list_count += 1\n    print('Number of Lists : ',list_count)\n    \n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input:\n        if isinstance(x, list):\n            count+=1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 1:\n        return False\n    elif arr[1] - arr[0] > 0:\n        return arr[1] - arr[0]\n    else:\n        return max_Abs_Diff(arr[1:])\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    diff = arr[1] - arr[0]\n    for i in range(1, len(arr) - 1):\n        if arr[i + 1] - arr[i] > diff:\n            diff = arr[i + 1] - arr[i]\n    return diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    for i in range(len(arr)-1):\n        if abs(arr[i]-arr[i+1])>max_diff:\n            max_diff=abs(arr[i]-arr[i+1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)<2:\n        return None\n    cur_max = max(arr)\n    arr.remove(cur_max)\n    res = 0\n    for i in arr:\n        res = max(abs(i-cur_max),res)\n    return res\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    i = 0\n    j = len(arr) - 1\n    max_diff = 0\n    while i < j:\n        if arr[i] == 0 and arr[j] == 0:\n            break\n        elif arr[i] == 0 and arr[j]!= 0:\n            max_diff = max(max_diff, abs(arr[i] - arr[j]))\n        elif arr[i]!= 0 and arr[j] == 0:\n            max_diff = max(max_diff, abs(arr[i] - arr[j]))\n        elif arr[i] < arr[j]:\n            max_diff = max(max_diff, abs(arr[i] - arr[j]))\n        elif arr[i] > arr[j]:\n            max_diff = max(max_diff, abs(arr[i] - arr[j]))\n        i += 1\n        j -= 1\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return abs(arr[-1] - arr[0])\n    "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    print(max_diff)\n    \nif __name__ == '__main__':\n    \n    # arr = [1, 2, -3, -4, 5, -6] \n    arr = [-100, 11, -13, 14, -5] \n    # arr = [-100, -11, -13, 14, -5] \n    max_Abs_Diff(arr) \n    "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = -1\n    i = 0\n    while i < n - 1:\n        if arr[i] < 0:\n            if max_diff < abs(arr[i] - arr[i + 1]):\n                max_diff = abs(arr[i] - arr[i + 1])\n        i += 1\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    if arr==[]:\n        return max_diff\n    else:\n        n=len(arr)\n        for i in range(n-1):\n            diff=abs(arr[i]-arr[i+1])\n            if diff>max_diff:\n                max_diff=diff\n        return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # a * x + b * y = n\n    \n    # since we're looking for n = ax + by\n    # we'll need to find a, b with |b - a| < n\n    # thus, we can do a * (b - a) + a * (n - b) = n\n    \n    # we'll have to solve for a\n    \n    # a = 0\n    # b = (n - a * a) / 2\n    # if the b would be too small, then we can't find a solution\n    # we can only have a positive value of b\n    # if b is too big, we can't find a solution\n    \n    # we can only have a * b = n, so we can check if b = 0 or b = 1\n    # if the 0 value exists, then a is 1 and b is -1\n    # if b is 1, then a is 1 and b is 1\n    \n    a_minus_b = (n - (a * a)) / (2 * b)\n    a_plus_b = (n + (a * a)) / (2 * b)\n    \n    # if a_minus_b is a negative value, then we need to try to increase a\n    # if a_minus_b is a positive value, then we need to try to decrease a\n    if a_minus_b > 0:\n        return (1, -1)\n    elif a_minus_b < 0:\n        return (1, 1)\n    \n    # if a_plus_b is a negative value, then we need to try to decrease a\n    # if a_plus_b is a positive value, then we need to try to increase a\n    if a_plus_b > 0:\n        return (-1, 1)\n    elif a_plus_b < 0:\n        return (-1, -1)\n    \n    # otherwise, we can return the tuple\n    return (a, b)\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if a * a + b * b < n:\n    #         a -= 1\n    #         b += 1\n    # return a, b\n    \n    \n    # # a = 0\n    # # b = n // 2\n    # # while abs(n - (a * a) - (b * b)) > 1:\n    # #     a += 1\n    # #     b -= 1\n    # #     if b * b - a * a < n:\n    # #         b += 1\n    # #         a -= 1\n    # # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n    # while abs(n - (a * a) - (b * b)) > 1:\n    #     a += 1\n    #     b -= 1\n    #     if b * b - a * a < n:\n    #         b += 1\n    #         a -= 1\n    # return a, b\n    \n    \n    # a = 0\n    # b = n // 2\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    assert n!= 0\n    if n == 0:\n        return 0, 0\n    if n < 0:\n        return None\n    if n == 1:\n        return a, b\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # no solutions exist\n    if b == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x * a + y * b == n:\n                return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a*x + b*y == n:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n + 1):\n        for y in range(0, n + 1):\n            if x + y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solution = None\n    for x in range(1, a + 1):\n        for y in range(1, b + 1):\n            if x * a + y * b == n:\n                solution = (x, y)\n    return solution\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n):\n        if n == (x**2 + y**2):\n            return (x, y)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    a = set(list1)\n    b = set(list2)\n    for i in a:\n        if i in b:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #Write your code here\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n    for i in list2:\n        if i not in temp:\n            temp.append(i)\n    return temp\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_set = set(list1)\n    list2_set = set(list2)\n    list1 = list(list1_set.difference(list2_set))\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    temp_list = []\n    for i in list1:\n        if i not in list2:\n            temp_list.append(i)\n    return temp_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    ret_list = []\n    for i in list1:\n        if i not in list2:\n            ret_list.append(i)\n    return ret_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = list(set(list1) - set(list2))\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_copy = list1[:]\n    list2_copy = list2[:]\n    for i in list1_copy:\n        if i in list2_copy:\n            list2_copy.remove(i)\n    list1[:] = list1_copy[:]\n    list2[:] = list2_copy[:]\n    return list1, list2\n    \n    \ndef reverse(s):\n    '''\n    Write a function that reverses the order of a given string. \n    '''\n    s = list(s)\n    s.reverse()\n    return ''.join(s)\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    # if len(s) % 2!= 0:\n    #     return False\n    # left = 0\n    # right = len(s) - 1\n    # while left <= right:\n    #     if s[left]!= s[right]:\n    #         return False\n    #     left += 1\n    #     right -= 1\n    # return True\n    \n    # solution 1\n    s = list(s)\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    # solution 2\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) % 2 == 0:\n        middle = len(s) // 2\n        return s[:middle] == s[middle:][::-1]\n    else:\n        middle = len(s) // 2\n        return s[:middle] == s[middle+1:]\n        \n    \ndef is_palin_rec(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palin_rec(s[1:-1])\n    \n    \ndef is_palindrome_v2(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome_v2(s[1:-1])\n    \n    \ndef is_palindrome_v3(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome_v3(s[1:-1])\n    \n    \ndef is_palindrome_v4(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_palindrome_v4(s[1:-1])\n    \n    \ndef is_palindrome_v5(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v6(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v7(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v8(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v9(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v10(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v11(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v12(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v13(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v14(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v15(s):\n    '''\n    Write a function that checks if a given string is palindrome.\n    '''\n    if len(s) <= 1:\n        return True\n    left = 0\n    right = len(s) - 1\n    while left <= right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n    \ndef is_palindrome_v16(s):\n    '''\n    Write a function that checks if a given string is palindrom"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Time complexity : O(n)\n    # Space complexity : O(1)\n    # n=len(list1)\n    # for i in range(len(list1)):\n    #     if list1[i] in list2:\n    #         list1.remove(list1[i])\n    # return list1\n    # for x in list2:\n    #     if x in list1:\n    #         list1.remove(x)\n    # return list1\n    # for x in list1:\n    #     if x in list2:\n    #         list1.remove(x)\n    # return list1\n    list1 = list1[:]\n    for x in list2:\n        if x in list1:\n            list1.remove(x)\n    return list1\n    \nlist1 = ['a', 'b', 'c', 'd', 'e']\nlist2 = ['d', 'e', 'f', 'g']\nprint(remove_elements(list1, list2))\n    \nlist1 = ['a', 'b', 'c', 'd', 'e']\nlist2 = ['d', 'e', 'f', 'g']\nprint(remove_elements(list1, list2))\n    \nlist1 = ['a', 'b', 'c', 'd', 'e']\nlist2 = ['a', 'b', 'c', 'd', 'e']\nprint(remove_elements(list1, list2))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return sum_series(n - 2) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = abs(n)\n    total = 0\n    i = 0\n    while i < n:\n        total += i\n        i += 1\n    return total\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    x = 0\n    while x <= n:\n        x = i**2 + n*i\n        i += 1\n    return x\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n += 1\n    \n    if n == 1:\n        return 1\n    \n    return n + sum_series(n - 2)\n    \ndef fib(n):\n    '''\n    Write a Fibonacci function, fib(n), which returns the nth number of the Fibonacci series,\n    i.e. 1, 2, 3, 5, 8,..., etc.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n    \ndef climb_stairs(n):\n    '''\n    Write a function that returns the nth number in the Fibonacci series,\n    i.e. 1, 2, 3, 5, 8,..., etc.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return climb_stairs(n - 1) + climb_stairs(n - 2)\n    \ndef sum_series_odd(n):\n    '''\n    Write a function to calculate the sum of odd numbers from 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    return sum_series_odd(n - 1) + (n - 1)\n    \ndef sum_series_even(n):\n    '''\n    Write a function to calculate the sum of even numbers from 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    return sum_series_even(n - 1)\n    \ndef sum_series_1(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    return n + sum_series_1(n - 2)\n    \ndef sum_series_2(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return n + sum_series_2(n - 2)\n    \ndef sum_series_3(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    return n + sum_series_3(n - 2) + sum_series_3(n - 4)\n    \ndef sum_series_4(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    return n + sum_series_4(n - 2) + sum_series_4(n - 4) + sum_series_4(n - 6)\n    \ndef sum_series_5(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_5(n - 2) + sum_series_5(n - 4) + sum_series_5(n - 6)\n    \ndef sum_series_6(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_6(n - 2) + sum_series_6(n - 4) + sum_series_6(n - 6)\n    \ndef sum_series_7(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_7(n - 2) + sum_series_7(n - 4) + sum_series_7(n - 6)\n    \ndef sum_series_8(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_8(n - 2) + sum_series_8(n - 4) + sum_series_8(n - 6) + sum_series_8(n - 8)\n    \ndef sum_series_9(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_9(n - 2) + sum_series_9(n - 4) + sum_series_9(n - 6) + sum_series_9(n - 8) + sum_series_9(n - 10)\n    \ndef sum_series_10(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_10(n - 2) + sum_series_10(n - 4) + sum_series_10(n - 6) + sum_series_10(n - 8) + sum_series_10(n - 10) + sum_series_10(n - 12)\n    \ndef sum_series_11(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_11(n - 2) + sum_series_11(n - 4) + sum_series_11(n - 6) + sum_series_11(n - 8) + sum_series_11(n - 10) + sum_series_11(n - 12) + sum_series_11(n - 14)\n    \ndef sum_series_12(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_12(n - 2) + sum_series_12(n - 4) + sum_series_12(n - 6) + sum_series_12(n - 8) + sum_series_12(n - 10) + sum_series_12(n - 12) + sum_series_12(n - 14) + sum_series_12(n - 16)\n    \ndef sum_series_13(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_13(n - 2) + sum_series_13(n - 4) + sum_series_13(n - 6) + sum_series_13(n - 8) + sum_series_13(n - 10) + sum_series_13(n - 12) + sum_series_13(n - 14) + sum_series_13(n - 16) + sum_series_13(n - 18)\n    \ndef sum_series_14(n):\n    '''\n    Write a function to calculate the sum of 1 to n, inclusive.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return n + sum_series_14(n - 2) + sum_series_14(n - 4) + sum_series_14(n - 6) + sum_series_14(n - 8) + sum_series_14(n - 10) + sum_series_14(n - 12) + sum_series"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    assert(type(n) == int and n > 0)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # ================\n    # my solution\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return n\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = abs(n)\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n        print(i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # You must use the length of the sides for the formula.\n    # Do not use the variable name of l.\n    a = s * (1 + tan(pi / l)) / (1 - tan(pi / l))\n    # Your function should return the value of the expression a.\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l*0.5\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi * (l * tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # I don't know why I need this line, but it's needed to create a valid triangle for the input\n    s += s/2\n    s = int(s)\n    l = int(l)\n    \n    area = (l*s*(s-1))/2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l*0.5)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l)) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * 0.5) / tan(pi / s)\n    print(f\"A = {area:.2f}\")\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(s-l)*0.5)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = float(l) / s\n    return 0.25 * s * a * (s - 2)\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return b * h / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l == 0:\n        return 0\n    a = (s*(s-2))/(4*pi)\n    return a\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            div_sum += i\n    if div_sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total = 0\n    while n > 0:\n        if n % 2 == 0: \n            total += 2\n            n = n // 2\n        else: \n            n = n // 2\n    if total == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    x = n\n    divisor = 2\n    while x > 1:\n        if n % divisor == 0:\n            x = n/divisor\n        else:\n            divisor += 1\n    if x == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # divisor_sum = []\n    # divisor = 2\n    # while divisor <= n: \n    #     if n%divisor == 0: \n    #         divisor_sum.append(divisor)\n    #         divisor_sum.append(n/divisor)\n    #     divisor += 1\n    # if sum(divisor_sum) == n: \n    #     print(True)\n    # else:\n    #     print(False)\n    # return divisor_sum\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_list = []\n    # Write your code here\n    for i in range(1,n):\n        if n%i == 0:\n            sum_list.append(i)\n    return sum(sum_list)==n\ndef div_sum_new(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_list = []\n    # Write your code here\n    for i in range(1,n):\n        if n%i == 0:\n            sum_list.append(i)\n    return sum(sum_list)==n\ndef div_sum_new1(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            sum_list.append(i)\n    return sum(sum_list)==n\ndef sum_div(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_list = []\n    # Write your code here\n    for i in range(1,n):\n        if n%i == 0:\n            sum_list.append(i)\n    return sum(sum_list)==n\ndef sum_div_new(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            sum_list.append(i)\n    return sum(sum_list)==n\ndef sum_div_new1(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            sum_list.append(i)\n    return sum(sum_list)==n\ndef div_list(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new1(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new3(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new4(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new5(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new6(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new7(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new8(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new9(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new10(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new11(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new12(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    # Write your code here\n    if n == 1:\n        return False\n    for i in range(1,n):\n        if n%i == 0:\n            div_list.append(i)\n    return div_list\ndef div_list_new13(n):\n    '''\n    Write a function to determine if the sum of the divisor"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisor_count += 1\n    return divisor_count == 2\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sums = []\n    divisor_sum = 0\n    \n    # Compute each divisor until we are at the square root of the original sum.\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_sum += i\n            divisor_sums.append(i)\n            while n % i == 0:\n                n = n // i\n                divisor_sums.append(i)\n    if n!= 1:\n        divisor_sum += n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # add 1 so that divisors (1, 2, 3, 4, 5, 6) are counted \n    sum = 1\n    for i in range(1, n): \n        if n%i == 0: \n            sum += i \n    return sum == n \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    from math import sqrt\n    s = int(sqrt(n))\n    total = sum(range(1,s+1))\n    n1 = n%total\n    if n1 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letters = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for char in str1.lower():\n        if char in letters:\n            letters[char] = letters[char] + 1\n    return letters\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {}\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] not in count.keys():\n            count[str1[i]] = i + 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Original Solution\n    \n    # Input Validation\n    if(str1 == \"\"):\n        return 0\n    \n    # Dictionary to hold the count of each character\n    count_dict = {}\n    \n    # Iterate over the string\n    for i in range(len(str1)):\n        # Get the character at that position in the string\n        char = str1[i]\n        # Check if the character is already in the dictionary\n        if(char in count_dict.keys()):\n            # Increment the count of the character by 1\n            count_dict[char] += 1\n        else:\n            # Add the character to the dictionary\n            count_dict[char] = 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    freq = {}\n    for i in range(len(str1)):\n        if str1[i] in freq.keys():\n            freq[str1[i]] += 1\n        else:\n            freq[str1[i]] = 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    for i in range(len(str1)):\n        a = str1.find(str1[i],i)\n        if a == -1:\n            print(0)\n        else:\n            print(1)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # list of all the characters and their positions in the alphabet\n    alphabet_char = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    # create a dictionary with each character in the alphabet as a key\n    # and a 0 value as its value\n    alphabet_dict = dict.fromkeys(alphabet_char, 0)\n    # for each character in the alphabet, add it's value to the dict\n    for ch in alphabet_char:\n        alphabet_dict[ch] = 1\n    # empty list to store the positions of all occurrences of the characters in the alphabet\n    alphabet_positions = []\n    # for each character in the string, check if it is in the dict, if so add its position to the list\n    for i, ch in enumerate(str1):\n        if ch in alphabet_dict:\n            alphabet_positions.append(i)\n    # return the number of occurrences in the alphabet\n    return len(alphabet_positions)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if type(str1)!= str:\n        return None\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Initializing characters array \n    char_count = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum([str1.count(i) for i in 'qwertyuiopasdfghjklzxcvbnm'])\n    # return sum([str1.count(i.lower()) for i in 'qwertyuiopasdfghjklzxcvbnm'])\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    \n    for i in range(len(str1)):\n        if str1[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_list = []\n    for num in A:\n        xor_list.append(num^(num>>1))\n    count = 0\n    for i in range(len(xor_list)):\n        if xor_list[i]==0:\n            continue\n        else:\n            for j in range(i+1,len(xor_list)):\n                if xor_list[i]==xor_list[j]:\n                    count+=1\n                    break\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    else:\n        even = 0\n        for i in range(len(A)):\n            if A[i] & 1!= 0:\n                for j in range(i+1,len(A)):\n                    if A[j] & 1!= 0:\n                        even += 1\n        return even\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0,len(A)): \n        for j in range(i+1,len(A)): \n            if (A[i]^A[j])%2 == 0: \n                count = count + 1\n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #initializing dicts\n    even = {}\n    odd = {}\n    for i in A:\n        if i % 2 == 0:\n            even[i] = 0\n        else:\n            odd[i] = 0\n    for i in A:\n        if i in even.keys():\n            even[i] = even[i] + 1\n        if i in odd.keys():\n            odd[i] = odd[i] + 1\n    res = 0\n    for k,v in even.items():\n        if v > 0:\n            res += 1\n    for k,v in odd.items():\n        if v > 0:\n            res += 1\n    return res\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    # sort the array\n    A.sort()\n    #print(A)\n    \n    count = 0\n    # look for the pair\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) == 0:\n                count += 1\n                # print(count, A[i], A[j])\n                \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]==0:\n                count+=1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    even_count = 0\n    for num in A:\n        if num & 1 == 0:\n            even_count += 1\n            if even_count > 1:\n                break\n    for i in range(len(A)):\n        if A[i] & 1 == 0 and even_count > 1:\n            continue\n        if A[i] & 1 == 1:\n            pairs += 1\n        if A[i] & 1 == 1 and even_count == 1:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for a in A:\n        for b in A:\n            if (a ^ b) % 2 == 0:\n                count += 1\n    return count \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0: \n        return 0\n    while (1 << 31) > n:\n        n = n << 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n & (n - 1)) == 0:\n        return n\n    else:\n        return n + 1\nprint(next_power_of_2(9))\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n:\n        x = x << 1\n    return x\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << int(math.log(n, 2))\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & n - 1:\n        n = n - 1\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 1\n    while(power_of_2 < n):\n        power_of_2 *= 2\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return None\n    while n >= 2:\n        n = n >> 1\n    return n + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    import math\n    i = 0\n    while True:\n        i += 1\n        if math.pow(2,i) >= n:\n            return i\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize value of res as 0\n    res = 0\n    # loop from 1 to n and increment res by 2\n    while(res <= n):\n        res = res << 1\n    # return res\n    return res\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if(a[i] == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d=0\n    for i in range(len(a)):\n        if a[i]==x:\n            d+=1\n    return d\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            f += 1\n    return f\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if (x == a[i]):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    b = a.count(x)\n    print(b)\n    return b\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    return sum(list1[m:n])\n    \ndef sum_range_list_2(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    return sum(list1[m:n])\n    \ndef sum_range_list_3(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    return sum(list1[m:n])\n    \ndef sum_range_list_4(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    return sum(list1[m:n])\n    \ndef sum_range_list_5(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    return sum(list1[m:n])\n    "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n    \n    # Your Code Below:\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\nprint(sum_range_list([10, 5, 2, 7], 1, 3))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in range(m, n + 1):\n        sum = sum + list1[x]\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total = total + list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list2 = []\n    for num in list1:\n        if num >= m and num <= n:\n            list2.append(num)\n    return sum(list2)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m <= 0 or n >= len(list1):\n        return sum\n    else:\n        for i in range(m-1, n):\n            sum += list1[i]\n        return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(1 + 1 / 4 * a ** 2) * 4 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s=a*(((2*a**2)/(3*math.sqrt(3)))+1)\n    return s\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((a ** 2) * math.sqrt(5)) / 2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 2 * a\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (3*a**2)/2\n    return s\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    side = a\n    s = (side**2)/2\n    return(s)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    return a*a\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (1 + math.sqrt(5))/2 * a\n    return p\nprint(\"perimeter_pentagon: \", perimeter_pentagon(5))\nprint(\"perimeter_pentagon: \", perimeter_pentagon(7))\nprint(\"perimeter_pentagon: \", perimeter_pentagon(9))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    if s.find('std')>=0:\n        count = 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance = s.count('std')\n    return occurance\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) < 3:\n        return 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'd' or s[i] == 't':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-len(std)+1):\n        if s[i:i+len(std)] == std:\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\nprint(count_occurance('i like python'))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'd' and s[i+1] == 't':\n            count += 1\n    return count\nprint(count_occurance('sdsddsstd'))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if (len(test_tuple) == 1) or (type(test_tuple[0]) == type(test_tuple[1])):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return(isinstance(test_tuple,tuple))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    if test_tuple[0] == None:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], int) or isinstance(test_tuple[i], float) or isinstance(test_tuple[i], str):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i,int):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Write your logic here\n    for i in range(1,len(test_tuple)):\n        if type(test_tuple[i])!=type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    d = {}\n    for val in test_list:\n        if val in d:\n            d[val] += 1\n        else:\n            d[val] = 1\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Code here\n    \n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        assert(all(type(element)==type(test_tuple[0]) for element in test_tuple))\n    except AssertionError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    dtype_list = []\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i], (int, float, complex, str, list)):\n            dtype_list.append(True)\n        else:\n            dtype_list.append(False)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left_ptr = 0\n    right_ptr = n - 1\n    while(left_ptr <= right_ptr):\n        if arr[left_ptr] == x and arr[right_ptr] == x:\n            return True\n        elif arr[left_ptr] == x:\n            left_ptr += 1\n        elif arr[right_ptr] == x:\n            right_ptr -= 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #returns true if the element is the majority element\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    print(arr)\n    count = 0\n    for i in arr:\n        if count < n:\n            if i == x:\n                count += 1\n        else:\n            break\n    return count >= n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #  To check if an element appears more than n/2 times.\n    #  Have a frequency array and use the index to look up the count.\n    #  To check if it is greater than n/2.\n    #  I'll also use a dictionary to keep track of the count of each element.\n    #  Have a flag to check if there's more than one element and return True if the flag is set to true.\n    count = {}\n    for ele in arr:\n        if ele in count:\n            count[ele] += 1\n        else:\n            count[ele] = 1\n    print(count)\n    for key,value in count.items():\n        if value > n//2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    for i in range(0,n-1):\n        if arr[i] == x:\n            count += 1\n    if count >= n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return arr.count(x) > n//2\n    \n    # Your code here\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0 or x < arr[0] or x > arr[n - 1]:\n        return False\n    count = 1\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            count += 1\n            left = mid + 1\n        else:\n            count -= 1\n            right = mid - 1\n    if count > n // 2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    total = 0\n    i = 0\n    while (i < n):\n        if(arr[i] == x):\n            total = total + 1\n        i = i + 1\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(n):\n        if arr[i] == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        if arr[0] == x:\n            return True\n        else:\n            return False\n    \n    if arr[n//2] == x:\n        return True\n    if arr[n//2]!= x:\n        return False\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    number = bin(n) \n    count = 0\n    for i in range(len(number)): \n        if (number[i] == '1'): \n            count += 1\n    print(count) \n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n = n & (n-1)\n        count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n = n & (n-1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #print(bin(n))\n    cnt = 0\n    while n > 0:\n        if n & 1:\n            cnt += 1\n        n = n >> 1\n    return cnt\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bit_count=0\n    while(n):\n        bit_count+=1\n        n=n&(n-1)\n    return bit_count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # convert the integer to binary representation \n    binary_number = bin(n) \n    # count the number of 1's \n    count = binary_number.count('1') \n    print(count) \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(31):\n        if (n & (1 << i))!= 0:\n            count = count + 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n = n & (n - 1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bit_count = 0\n    while (n!= 0): \n        set_bit_count += 1\n        n = n & (n - 1)\n    return set_bit_count\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #str = str[::-1]\n    #print(str)\n    #l = len(str)\n    #l=len(str)\n    l = len(str)\n    #print(l)\n    #print(str[::-1])\n    #str = str[::-1]\n    str = str[::-1]\n    #print(str)\n    \n    #for i in range(0,l):\n    #    if i%2==0:\n    #        continue\n    #    else:\n    #        str = str.replace(str[i],'')\n    #print(str)\n    #return str\n    res = \"\"\n    for i in range(0,l):\n        if i%2==0:\n            continue\n        else:\n            res = res + str[i]\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n    \ndef odd_values_string_two(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([x for i,x in enumerate(str) if i%2!=0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = 0\n    n = len(str)\n    for i in range(n):\n        if i%2!= 0:\n            str = str.replace(str[i],'')\n    return str\n    \ndef remove_odd_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([char for i, char in enumerate(str) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(str)\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    #result_str=''\n    #for i in range(len(str)):\n    #    if i % 2 == 0:\n    #        result_str += str[i]\n    #return result_str\n    \n    #Solution 2\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(0, len(str), 2):\n        new_string += str[i]\n    print(new_string)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([char for i, char in enumerate(str) if i % 2 == 0])\n    \n    \ndef even_values_string(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    return \"\".join([char for i, char in enumerate(str) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # str = \"w3resource\"\n    # str = \"w3c\"\n    # str = \"w3c\"\n    # str = \"w3w3c\"\n    # str = \"w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3w3"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    # A simple function to remove the odd index characters\n    def remove_odd_index(str):\n        str = ''.join(i for i in str if i.isalpha())\n        str = ''.join(i for i in str if i.isalpha())\n        return str\n    \n    # Calling the remove function\n    return remove_odd_index(str)\n    "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([s for i, s in enumerate(str) if i % 2 == 0])\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < a:\n        if b < c:\n            return b\n        else:\n            return c\n    elif a < c:\n        if a < b:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\nprint(min_of_three(1,2,3)"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    return c\nprint(min_of_three(10,5,4))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n    else:\n        return \"three numbers are equal\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x = r - l + 1\n    if (x & (x - 1)) == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\ndef is_Power_of_Two(n):\n    '''\n    Write a python function to check whether a given number is a power of two or not.\n    '''\n    if n == 0:\n        return False\n    \n    while n % 2 == 0:\n        n = n / 2\n    \n    if n == 1:\n        return True\n    \n    else:\n        return False\ndef is_Reverse(s):\n    '''\n    Write a python function to check whether a given string is a reverse of another string or not.\n    '''\n    if s[::-1] == s:\n        return True\n    else:\n        return False\ndef is_Palindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_Character_in_String(s,c):\n    '''\n    Write a python function to check whether a given character c is in a given string or not.\n    '''\n    if c in s:\n        return True\n    else:\n        return False\ndef is_Substring_in_String(s,c):\n    '''\n    Write a python function to check whether a given substring is in a given string or not.\n    '''\n    if s in c:\n        return True\n    else:\n        return False\ndef is_All_Digits_Same_in_String(s):\n    '''\n    Write a python function to check whether all the digits in the given string are same or not.\n    '''\n    a = s.split()\n    if len(a) == len(set(a)):\n        return True\n    else:\n        return False\ndef is_Substring_Present_Multiple_times(s,c):\n    '''\n    Write a python function to check whether the substring c is present in the given string s or not.\n    '''\n    if s.count(c) > 1:\n        return True\n    else:\n        return False\ndef is_String_Containing_Vowel(s):\n    '''\n    Write a python function to check whether the string s contains vowel or not.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count = count + 1\n    if count > 0:\n        return True\n    else:\n        return False\ndef is_String_With_Reverse(s):\n    '''\n    Write a python function to check whether the string s is reversed or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_String_Present_Multiple_Times(s,c):\n    '''\n    Write a python function to check whether the substring c is present in the given string s or not.\n    '''\n    a = s.count(c)\n    if a > 0:\n        return True\n    else:\n        return False\ndef reverse_Substring_in_String(s,start,end):\n    '''\n    Write a python function to reverse the substring in a given string.\n    '''\n    if start == end:\n        return s[start]\n    else:\n        return s[start] + reverse_Substring_in_String(s,start+1,end-1)\ndef is_Reversible_in_String(s):\n    '''\n    Write a python function to check whether the given string is reverse of itself or not.\n    '''\n    if s == reverse_Substring_in_String(s,0,len(s)-1):\n        return True\n    else:\n        return False\ndef reverse_Substring_in_String(s,start,end):\n    '''\n    Write a python function to reverse the substring in a given string.\n    '''\n    if start == end:\n        return s[start]\n    else:\n        return s[start] + reverse_Substring_in_String(s,start+1,end-1)\ndef is_String_Reversible_in_String(s):\n    '''\n    Write a python function to check whether the given string is reverse of itself or not.\n    '''\n    if s == reverse_Substring_in_String(s,0,len(s)-1):\n        return True\n    else:\n        return False\ndef string_Length(s):\n    '''\n    Write a python function to check the length of a given string.\n    '''\n    return len(s)\ndef all_lower_case_String(s):\n    '''\n    Write a python function to check whether the string is all lower case or not.\n    '''\n    l = len(s)\n    if l == 0:\n        return True\n    if s[0] == \" \":\n        return all_lower_case_String(s[1:])\n    if s[0] <= \"z\":\n        return all_lower_case_String(s[1:])\n    else:\n        return False\ndef all_lower_case_String_in_List(s):\n    '''\n    Write a python function to check whether all the string in the given list are all lower case or not.\n    '''\n    a = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            a.append(all_lower_case_String(s[i+1:]))\n        elif s[i] <= \"z\":\n            a.append(all_lower_case_String(s[i+1:]))\n        else:\n            return False\n    if len(a) > 0:\n        return all(a)\n    else:\n        return True\ndef all_lower_case_String_in_String(s):\n    '''\n    Write a python function to check whether all the strings are lower case or not.\n    '''\n    if s == s.lower():\n        return True\n    else:\n        return False\ndef is_Palindrome_in_String(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_Palindrome_in_String_with_reversed(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_Substring_Present_Multiple_Times_in_String(s,c):\n    '''\n    Write a python function to check whether the substring c is present in the given string s or not.\n    '''\n    if s.count(c) > 1:\n        return True\n    else:\n        return False\ndef string_Is_Balanced(s):\n    '''\n    Write a python function to check whether the given string is balanced or not.\n    '''\n    if len(s) % 2 == 0:\n        if s[0] == ')' and s[len(s)-1] == '(':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef is_Palindrome_String(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef is_Palindrome_String_with_reversed(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return s == s[::-1]\ndef is_Palindrome_String_in_String(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    a = s.split()\n    if len(a) == len(set(a)):\n        return True\n    else:\n        return False\ndef all_numbers_in_String_are_Even_or_Odd(s)"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #print(f'\\nAll Bits are set in the given range: {l} to {r}')\n    print(all_Bits_Set_In_The_Given_Range(n,l,r))\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if (l>r):\n        print(f'Invalid Input: Lower bound should be less than upper bound')\n        return None\n    \n    s = 0\n    for i in range(l,r+1):\n        s += (1<<i)\n    return s == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        bit_set = 0\n        while i!= 0:\n            bit_set += i & 1\n            i = i >> 1\n        if bit_set == 0:\n            count += 1\n    if count == n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \ndef get_All_Positions_Where_Bit_Is_Set(n, l, r):\n    '''\n    Write a python function to return all the positions of 1 in the given range\n    '''\n    positions = set()\n    for i in range(l,r+1):\n        bit_set = 0\n        while i!= 0:\n            bit_set += i & 1\n            i = i >> 1\n        if bit_set == 1:\n            positions.add(i)\n    return positions\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    \n    # Store all the numbers in the range\n    numbers = [i for i in range(n+1)]\n    \n    # Iterate through the range and check the bits\n    for i in range(n+1):\n        \n        # If any bit is set, the range is not valid\n        if i & l == 0:\n            return False\n        \n        # If any bit is set in the range, the range is not valid\n        if i & r == 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (l<=n<=r) and not(((l & n) or (n & l)) and (l | n))\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def is_Bits_Set(n,l,r): \n        '''\n        Python function to check whether all the bits are unset in the given range or not.\n        '''\n        if (n & (1 << l) == 0) and (n & (1 << r) == 0): \n            return True\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #code here\n    if(l==r):\n        if(n & l == 0):\n            return 1\n    else:\n        if((n & l) == 0 and (n & r) == 0):\n            return 1\n    return 0\n    "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # code here\n    while(n):\n        n = n >> 1\n    return l >= n and r <= n\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r>n or r<=0:\n        return False\n    bin_n = bin(n)\n    bin_l = bin(l)\n    bin_r = bin(r)\n    # print(bin_n, bin_l, bin_r)\n    count = 0\n    for i in range(len(bin_n)-3):\n        if bin_n[i]=='0' and bin_l[i]=='0' and bin_r[i]=='0':\n            count = count+1\n    return (count==len(bin_n)-3)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if not arr:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = 0\n    pos = 0\n    for i in range(n):\n        if arr[i] > 0:\n            pos += 1\n            continue\n        neg += 1\n    return arr[:neg] + sorted(arr[neg:]) + arr[neg:]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def swap(array, index1, index2):\n        '''\n        Swaps two elements in an array\n        '''\n        temp = array[index1]\n        array[index1] = array[index2]\n        array[index2] = temp\n        return array\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = list(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            arr.insert(i, arr.pop(i+1))\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == len(arr):\n        return arr\n    neg = []\n    pos = []\n    neg_index = 0\n    pos_index = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n            neg_index = neg.index(arr[i])\n        elif arr[i] > 0:\n            pos.append(arr[i])\n            pos_index = pos.index(arr[i])\n    \n    if len(neg) == 0:\n        return pos + neg\n    if len(pos) == 0:\n        return neg + pos\n    \n    if neg_index < pos_index:\n        return neg + pos\n    elif neg_index > pos_index:\n        return neg + pos[::-1]\n    else:\n        return pos + neg\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    low = -1\n    high = n - 1\n    arr = [-x for x in arr]\n    #print(arr)\n    #print(arr[n:])\n    for i in range(n):\n        if arr[i] > 0:\n            low += 1\n            arr[i], arr[low] = arr[low], arr[i]\n    #print(arr)\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            high -= 1\n            arr[i], arr[high] = arr[high], arr[i]\n    #print(arr)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[:n] + sorted(arr[n:])\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    \n    #if n is less than the length of the array, then rearrange the elements\n    if n <= len(arr):\n        \n        #define an index\n        i = 0\n        \n        #sort the array from small to big\n        while i < len(arr):\n            \n            #if the element is positive, increase the index\n            if arr[i] > 0:\n                i += 1\n                \n            #if the element is negative, decrease the index\n            else:\n                arr.pop(i)\n                \n                #if the element was the last element in the array, add the rest elements to the end\n                if i == len(arr):\n                    arr.extend(arr[i:])\n                    break\n                    \n                #if not, add the element to the end of the array\n                else:\n                    arr.append(arr[i])\n                    \n                    #increase the index and sort the rest of the elements\n                    i += 1\n                    while i < len(arr):\n                        if arr[i] < 0:\n                            arr.pop(i)\n                            arr.extend(arr[i:])\n                            break\n                        i += 1\n                        \n    return arr\n    \n    \ndef re_arrange_array2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    #if n is less than the length of the array, then rearrange the elements\n    if n <= len(arr):\n        #define an index\n        i = 0\n        \n        #sort the array from small to big\n        while i < len(arr):\n            \n            #if the element is positive, increase the index\n            if arr[i] > 0:\n                i += 1\n                \n            #if the element is negative, decrease the index\n            else:\n                arr.pop(i)\n                \n                #if the element was the last element in the array, add the rest elements to the end\n                if i == len(arr):\n                    arr.extend(arr[i:])\n                    break\n                \n                #if not, add the element to the end of the array\n                else:\n                    arr.append(arr[i])\n                    \n                    #increase the index and sort the rest of the elements\n                    i += 1\n                    while i < len(arr):\n                        if arr[i] < 0:\n                            arr.pop(i)\n                            arr.extend(arr[i:])\n                            break\n                        i += 1\n                        \n    return arr\n    \ndef re_arrange_array3(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    #if n is less than the length of the array, then rearrange the elements\n    if n <= len(arr):\n        #define an index\n        i = 0\n        \n        #sort the array from small to big\n        while i < len(arr):\n            \n            #if the element is positive, increase the index\n            if arr[i] > 0:\n                i += 1\n                \n            #if the element is negative, decrease the index\n            else:\n                arr.pop(i)\n                \n                #if the element was the last element in the array, add the rest elements to the end\n                if i == len(arr):\n                    arr.extend(arr[i:])\n                    break\n                    \n                #if not, add the element to the end of the array\n                else:\n                    arr.append(arr[i])\n                    \n                    #increase the index and sort the rest of the elements\n                    i += 1\n                    while i < len(arr):\n                        if arr[i] < 0:\n                            arr.pop(i)\n                            arr.extend(arr[i:])\n                            break\n                        i += 1\n                        \n    return arr\n    \ndef re_arrange_array4(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    #if n is less than the length of the array, then rearrange the elements\n    if n <= len(arr):\n        #define an index\n        i = 0\n        \n        #sort the array from small to big\n        while i < len(arr):\n            \n            #if the element is positive, increase the index\n            if arr[i] > 0:\n                i += 1\n                \n            #if the element is negative, decrease the index\n            else:\n                arr.pop(i)\n                \n                #if the element was the last element in the array, add the rest elements to the end\n                if i == len(arr):\n                    arr.extend(arr[i:])\n                    break\n                \n                #if not, add the element to the end of the array\n                else:\n                    arr.append(arr[i])\n                    \n                    #increase the index and sort the rest of the elements\n                    i += 1\n                    while i < len(arr):\n                        if arr[i] < 0:\n                            arr.pop(i)\n                            arr.extend(arr[i:])\n                            break\n                        i += 1\n                        \n    return arr\n    \ndef re_arrange_array5(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    #if n is less than the length of the array, then rearrange the elements\n    if n <= len(arr):\n        #define an index\n        i = 0\n        \n        #sort the array from small to big\n        while i < len(arr):\n            \n            #if the element is positive, increase the index\n            if arr[i] > 0:\n                i += 1\n                \n            #if the element is negative, decrease the index\n            else:\n                arr.pop(i)\n                \n                #if the element was the last element in the array, add the rest elements to the end\n                if i == len(arr):\n                    arr.extend(arr[i:])\n                    break\n                \n                #if not, add the element to the end of the array\n                else:\n                    arr.append(arr[i])\n                    \n                    #increase the index and sort the rest of the elements\n                    i += 1\n                    while i < len(arr):\n                        if arr[i] < 0:\n                            arr.pop(i)\n                            arr.extend(arr[i:])\n                            break\n                        i += 1\n                        \n    return arr\n    \ndef re_arrange_array6(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    #if n is less than the length of the array, then rearrange the elements\n    if n <= len(arr):\n        #define an index\n        i = 0\n        \n        #sort the array from small to big\n        while i < len(arr):\n            \n            #if the element is positive, increase the index\n            if arr[i] > 0:\n                i += 1\n                \n            #if the element is negative, decrease the index\n            else:\n                arr.pop(i)\n                \n                #if the element was the last element in the array, add the rest elements to the end\n                if i == len(arr):\n                    arr.extend(arr[i:])\n                    break\n                \n                #if not, add the element to the end of the array\n                else:\n                    arr.append(arr[i])\n                    \n                    #increase the index and sort the rest of the elements\n                    i += 1\n                    while i < len(arr):\n                        if arr[i] < 0:\n                            arr.pop(i)\n                            arr.extend(ar"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    arr.reverse()\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #replace blank spaces with char\n    str1 = str1.replace(\" \",\"\")\n    #return blank spaces with char\n    return str1.replace(\"\",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1.isspace():\n        str1 = char\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    string = str1.replace(' ','')\n    return string\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\n','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    return str1.replace(' ','{0}'.format(char))\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    blank_count = 0\n    new_str = \"\"\n    for char in str1:\n        if char == \" \":\n            blank_count += 1\n        else:\n            new_str += char\n    new_str += (blank_count * char)\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    s = str1.replace(' ','%20')\n    return s\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s' %(char))\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1 = heapq.nlargest(n, list1)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #key=lambda item: item[1]\n    #list1.sort(key=lambda item: item[1])\n    list1.sort(key=lambda item: item[0])\n    #print(list1)\n    list1=list1[0:n]\n    return list1"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_length = len(list1)\n    heapq.heapify(list1)\n    largest_num = list1[n-1]\n    heapq.heapreplace(list1,largest_num)\n    for i in range(n-1):\n        heapq.heapreplace(list1,largest_num)\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,(i,i))\n    list2 = []\n    for i in range(n):\n        list2.append(heapq.heappop(heap)[1])\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    a = []\n    for i in range(n):\n        heapq.heappush(a,list1[i])\n    return a\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    list2 = sorted(list1, reverse=True)\n    list3 = []\n    if n <= len(list1):\n        for i in range(0,n):\n            list3.append(list2[i])\n    return list3\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l=[]\n    while(len(l)<n):\n        min_index=list1.index(min(list1))\n        l.append(list1[min_index])\n        list1[min_index]=9999\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return list1[:n]\ndef larg_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    my_list = []\n    for i in range(len(list1)):\n        heapq.heappush(my_list,list1[i])\n    while len(my_list)>n:\n        heapq.heappop(my_list)\n    return my_list\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a = (r**2 * math.pi)/4 #base area\n    s = 2 * (math.pi * r * h) #total surface area\n    return (s - a)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import numpy as np\n    if isinstance(r,(int,float)):\n        r = [r]\n    if isinstance(h,(int,float)):\n        h = [h]\n    l = np.zeros(len(r))\n    l[:] = 2*r[:]*h[:]\n    h = h[:]\n    for i in range(1,len(l)):\n        h[i] = h[i-1]+l[i-1]\n    return sum(l[1:])\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    h = float(h)\n    r = float(r)\n    h_2 = h * h\n    r_2 = r * r\n    res = 2 * pi * h * r * (h + r) - 2 * pi * r * r * (h + r)\n    res = res / 2\n    #print(res)\n    return res\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*math.pi*r*h\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*pi*r**2\n    cylinder = pi*r**2*h\n    lateralsuface = area - cylinder\n    return lateralsuface\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s=2*pi*r\n    v=pi*r**2\n    total=s*h\n    return (total-v)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if (r == 0):\n        return 0\n    else:\n        return 2*pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def lat_surface(r):\n        #print(r)\n        return math.pi*r**2\n    \n    return lat_surface(r)*h\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if not isinstance(l, (int, float)):\n        raise TypeError('Side length must be a number')\n    if l <= 0:\n        raise ValueError('Side length must be positive')\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l**3)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l <= 0:\n        return 'The cube cannot be made'\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\ndef volume_cube_v1(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return(l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l ** 3)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    '''\n    SOLUTION\n    '''\n    return n | (n - 1)"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        print(\"The number is 0\")\n        return 0\n    elif n == 1:\n        print(\"The number is 1\")\n        return 1\n    else:\n        while n!= 0:\n            if n % 2 == 0:\n                n = n / 2\n                print(n)\n            else:\n                n = (n-1) / 2\n                print(n)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # code here\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x01\n    \nprint(even_bit_set_number(10))\nprint(even_bit_set_number(12))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n | n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1) \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return n\n    return n | (1 << n.bit_length() - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0:\n        n <<= 1\n        while n >= 1:\n            if n & 0b1:\n                n ^= 0b11\n            n >>= 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #print(n)\n    return ((n >> 1) | n)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\n    \ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (n + 1)\n    "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrences = {}\n    for x, y in test_list:\n        if x in occurrences:\n            occurrences[x] += 1\n        else:\n            occurrences[x] = 1\n    return occurrences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    result = {}\n    for i in test_list:\n        if i in result.keys():\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    lst = []\n    d = {}\n    lst_2 = []\n    for i in test_list:\n        lst.append(tuple(i))\n    lst = set(lst)\n    for i in lst:\n        lst_2.append(i)\n    for i in lst_2:\n        d[i] = lst.count(i)\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # first, initialize the empty dictionary: occurences\n    occurences = {}\n    # loop through the list\n    for name in test_list:\n        # if the name is in the dictionary, increase its value by 1\n        if name in occurences:\n            occurences[name] += 1\n        # otherwise, create a new key-value pair for the name with value 1\n        else:\n            occurences[name] = 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # your code here\n    counts = Counter(test_list)\n    return counts\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your code here\n    dict1 = {}\n    for item in test_list:\n        dict1[item] = test_list.count(item)\n    return dict1\n    # DONE\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #return Counter(test_list).items()\n    return dict(Counter(test_list).items())\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return_dict = {}\n    for i in range(len(test_list)):\n        if test_list[i][0] in return_dict.keys():\n            return_dict[test_list[i][0]] += 1\n        else:\n            return_dict[test_list[i][0]] = 1\n    return return_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if i + 1 < len(str):\n            if str[i]!= str[i+1]:\n                count += 1\n            else:\n                count = 0\n        else:\n            break\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if (i == 0 or str[i-1] == \" \") and str[i]!= \" \":\n            count = count + 1\n        if str[i]!= \" \":\n            i = i + 1\n            count = count + 1\n            while i < len(str) and str[i]!= \" \":\n                i = i + 1\n                count = count + 1\n            i = i + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str) \n    count = 0\n    for i in range(0, n): \n        for j in range(i, n): \n            count += 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)-1):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j] and j > i:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i]!=\" \":\n            count=count+1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    no_of_substrings = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)+1):\n            if str[i:j]!= '':\n                no_of_substrings += 1\n    return no_of_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return sum(1 for i in range(len(str)) for j in range(i,len(str)+1) if str[i:j]!= '')\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Solution is using recursion.\n    return sum(get_number_of_sequences(m,n))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        if m % 2!= 0:\n            return 0\n        else:\n            count = 0\n            for i in range(2,m):\n                if i > n and i <= m - n:\n                    count += get_total_number_of_sequences(m-1,n-1)\n                elif i > m - n:\n                    count += get_total_number_of_sequences(m-1,n)\n            return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m,n+1):\n        for j in range(0,i):\n            if(i-j >= m):\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m+1):\n        count += get_total_number_of_sequences_recursive(i,n)\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(0,n):\n        count = m//2*i + count\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    seq_set = set()\n    seq_list = []\n    \n    #find the first element:\n    for i in range(n):\n        seq_set.add(2**(n-1-i))\n    \n    #add the next element to the seq_set:\n    for i in seq_set:\n        seq_set.add(i+1)\n    \n    #find all other possible seq\n    for i in seq_set:\n        if i < m:\n            seq_list.append(i)\n        else:\n            break\n        \n    #add the final seq\n    seq_list.append(m)\n    \n    return len(seq_list)\n    \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    count = 0\n    \n    for i in range(m):\n        count += (n-1)*2 +1\n        if i >= 1 and i < m:\n            if m % 2!= 0:\n                count -= 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == n:\n        return 1\n    elif m > n:\n        return 0\n    elif m == 0 or n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return m\n    else:\n        return get_total_number_of_sequences(m,n-2) + get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2:\n        return 0\n    return (math.factorial(m))/(math.factorial(n)*math.factorial(m-n))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n:\n        return 0\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    list1[-2] = list2[1]\n    list1[-3] = list2[2]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    del list2[-1]\n    return list1\n    \ndef unique_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list with unique elements of the first list.\n    '''\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    return list2\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list with the elements of the list in reverse order.\n    '''\n    list2 = []\n    if len(list1) > 1:\n        for i in range(len(list1)-1, -1, -1):\n            list2.append(list1[i])\n    else:\n        list2.append(list1[0])\n    return list2\n    \ndef max_list(list1):\n    '''\n    Write a function that takes in a list and returns the largest element in the list.\n    '''\n    max = 0\n    for i in list1:\n        if i > max:\n            max = i\n    return max\n    \ndef sum_list(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the elements in the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n    \ndef count_odd(list1):\n    '''\n    Write a function that takes in a list and returns the number of odd numbers in the list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2!= 0:\n            count += 1\n    return count\n    \ndef count_even(list1):\n    '''\n    Write a function that takes in a list and returns the number of even numbers in the list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n    return count\n    \ndef sum_odd_even(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the odd numbers in the list plus the sum of all of the even numbers in the list.\n    '''\n    sum_odd = 0\n    sum_even = 0\n    for i in list1:\n        if i % 2!= 0:\n            sum_odd += i\n        if i % 2 == 0:\n            sum_even += i\n    return sum_odd + sum_even\n    \ndef reverse(list1):\n    '''\n    Write a function that takes in a list and returns the list with values reversed.\n    '''\n    list2 = []\n    for i in range(len(list1)-1, -1, -1):\n        list2.append(list1[i])\n    return list2\n    \ndef smallest_odd(list1):\n    '''\n    Write a function that takes in a list and returns the smallest odd number in the list. If there are no odd numbers in the list, return None.\n    '''\n    for i in list1:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    print(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=int(math.sqrt(N))\n    y=int(math.ceil(math.sqrt(N)))\n    while(x*x<N):\n        x+=1\n    while(x*x>N):\n        x-=1\n    if x*x==N:\n        print(N)\n    else:\n        print(x*x)\n    \nnext_Perfect_Square(121)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # checking if the number is perfect square. If yes then return the next perfect square greater than it.\n    # else if the number is not perfect square, then we have to perform binary search and return the next perfect square greater than it.\n    while (N > 0):\n        N = N // 2\n        if N ** 2 == N:\n            return N + 1\n    if N ** 2!= N:\n        return N + 1\ndef next_Harmonic(n):\n    '''\n    Write a python function to find the next harmonic number greater than a given number.\n    '''\n    # Iterative Method:\n    # The harmonic number is the sum of the reciprocals of the positive integers less than or equal to itself.\n    # The first harmonic number is 1.0 and the next is 1.2, 1.4, 1.6, 1.8, 2.0 etc.\n    # We can find the sum of the reciprocals of the positive integers less than or equal to itself using the reciprocal function,\n    # which takes in a number and returns its reciprocal: 1/n = 1/(2*n + 1)\n    # We can find the next harmonic using the formula below.\n    # n**2 + n\n    # and it's equation becomes: n**2 + n = 1/((2*n + 1)**2)\n    # We can iterate until we get the answer.\n    while(True):\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        if n**2 + n == 1:\n            return n\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        n += 1\n        i"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N\n    while True:\n        if n**2 == N:\n            return n\n        n += 1\ndef find_first_and_last_char_index(s, ch):\n    '''\n    Write a python function that returns the index of the first occurrence of a given character in a given string.\n    '''\n    l = 0\n    r = len(s) - 1\n    while l <= r:\n        m = (l+r)//2\n        if s[m] == ch:\n            if m == 0 or s[m-1]!= ch:\n                return m\n            else:\n                r = m - 1\n        elif s[m]!= ch:\n            l = m + 1\n        else:\n            l = m + 1\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))\n    while(True):\n        n+=1\n        if(isSquare(n**2)):\n            return n**2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, x, left, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, right)\n    else:\n        return -1\ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, x, left, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, right)\n    else:\n        return -1\ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, x, left, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, right)\n    else:\n        return -1\ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, x, left, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, right)\n    else:\n        return -1\ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, x, left, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, right)\n    else:\n        return -1\ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, x, left, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, right)\n    else:\n        return -1\ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, x, left, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, right)\n    else:\n        return -1\ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, x, left, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, right)\n    else:\n        return -1\ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, x, left, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, right)\n    else:\n        return -1\ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N == 1):\n        return 1\n    else:\n        x = int((N ** 0.5)+0.5)\n        x = x+1\n        if (x**2 == N):\n            return x\n        else:\n            return x+1\ndef binary_search(arr, x, left, right):\n    if (right >= left):\n        mid = int(left + (right - left) / 2)\n        if arr[mid] == x:\n            return mid\n        e"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #Solution 1\n    # for i in range(1,N+1):\n    #     if(i**2)>N:\n    #         return i**2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def next_number(num):\n        # to get the next perfect square\n        max_square = int(math.sqrt(num))\n        if max_square*max_square == num:\n            return max_square\n        else:\n            max_square += 1\n            return max_square\n    N = next_number(N)\n    print(N)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Complete this function\n    if N==1:\n        return 1\n    else:\n        count=0\n        \n        while True:\n            \n            square = int(math.sqrt(N))\n            if square*square>N:\n                break\n            count=count+1\n            N=square*square\n            \n        return square*square\n    "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = math.sqrt(N)\n    if math.ceil(sq) == math.ceil(sq) :\n        return math.ceil(sq)\n    else:\n        return math.ceil(sq) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 1):\n        return N\n    s = int(math.sqrt(N))\n    while (s*s < N):\n        s+=1\n    if(s*s == N):\n        return s*s\n    else:\n        return s*s + 1\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i = 0\n    j = 0\n    result = float('-inf')\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # length of bitonic array\n    n = len(arr)\n    \n    # initialize maximum_sum and min_sum as -infinity\n    max_sum = -1*float('inf')\n    min_sum = float('inf')\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return sum(arr)\n    dp = [[0 for i in range(len(arr))] for j in range(len(arr))]\n    \n    for i in range(len(arr)):\n        dp[i][i] = arr[i]\n    \n    for length in range(len(arr)-1,0,-1):\n        for left in range(len(arr)-1-length):\n            right = left + length\n            if arr[left] < arr[right]:\n                dp[left][right] = max(dp[left+1][right],dp[left][right-1] + arr[left])\n            else:\n                dp[left][right] = max(dp[left+1][right],dp[left][right-1] - arr[right])\n    return dp[0][len(arr)-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # define max_sum as -infinity\n    max_sum = -math.inf\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] if arr[1] >= arr[0] else arr[1]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = -99999\n    curr_sum = 0\n    lst = []\n    for i in range(n):\n        curr_sum += arr[i]\n        lst.append(curr_sum)\n        if i >= 2 and curr_sum > max_sum:\n            max_sum = curr_sum\n    if max_sum < 0:\n        max_sum = 0\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, i, -1):\n            dp[i][j] = arr[i] + max(arr[j], arr[i] + dp[i+1][j])\n    return max(dp[0])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def bitonic_max_sum(arr):\n        if len(arr) == 1:\n            return arr[0]\n        elif len(arr) == 2:\n            if arr[0] > arr[1]:\n                return arr[0]\n            else:\n                return arr[1]\n        else:\n            i = 0\n            j = len(arr) - 1\n            while i < j:\n                if arr[i] < arr[j]:\n                    if arr[i] + arr[j] > arr[j]:\n                        if arr[i] + arr[j] > arr[j]:\n                            if arr[i] + arr[j] > arr[i]:\n                                return arr[i] + arr[j]\n                            else:\n                                return max(arr[i] + arr[j], arr[j])\n                        else:\n                            if arr[i] + arr[j] > arr[j]:\n                                return arr[i] + arr[j]\n                            else:\n                                return max(arr[i] + arr[j], arr[j])\n                    else:\n                        if arr[i] + arr[j] > arr[i]:\n                            return arr[i] + arr[j]\n                        else:\n                            return arr[i]\n                if arr[i] == arr[j]:\n                    if arr[i] + arr[j] > arr[j]:\n                        return arr[i] + arr[j]\n                    else:\n                        return arr[i]\n                else:\n                    i += 1\n                    j -= 1\n            return arr[i]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # # Brute Force Approach \n    # for i in range(len(arr)):\n    #     for j in range(i, len(arr)):\n    #         for k in range(j, len(arr)):\n    #             for l in range(k, len(arr)):\n    #                 if sum_arr == max_sum:\n    #                     print(arr)\n    #                 return\n    #     return \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    best_so_far = arr[0]\n    current_max = arr[0]\n    \n    for i in range(1,len(arr)):\n        if arr[i] < 0:\n            current_max = max(current_max, arr[i])\n        else:\n            current_max = max(current_max, arr[i], 0)\n        best_so_far = max(current_max, best_so_far, 0)\n        \n    return best_so_far\n    \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    i = 1\n    x = number\n    while i < 10:\n        x = (x + (number/x))/2\n        i += 1\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Base case: if the number is 1, then the square root is itself\n    if number == 1:\n        return number\n    # Base case: if the number is 0, then the square root is 0\n    if number == 0:\n        return 0\n    # Base case: if the number is negative, then the square root is 0\n    if number < 0:\n        return 0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    estimate = number / 2\n    while True:\n        old_estimate = estimate\n        estimate = (number / estimate) * estimate + (old_estimate / 2)\n        if abs(old_estimate - estimate) < 1e-15:\n            break\n    return estimate\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess**2!= number:\n        guess = guess / 2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number\n    while True:\n        root_old = root\n        root = (root + number/root)/2\n        if root_old == root:\n            break\n    return root\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # TODO\n    # Base case\n    # Use precondition to avoid infinite loop\n    # Calculate difference between current value and previous value\n    # If difference is greater than epsilon, return previous value\n    # Otherwise, return current value\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    if x < 0:\n        x = -x\n    if x < 2:\n        return sqrt(x)\n    x1 = 1\n    while x1 < x:\n        x2 = x1 + (x1/2)\n        if x2**2 == x:\n            return x2\n        x1 = x2\n    return x2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return 1\n    if number < 0:\n        return None\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    estimate = 1\n    while True:\n        estimate = (estimate + (number/estimate))/2\n        if abs(number - estimate**2) < 0.000001:\n            break\n    return estimate\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    k=1\n    while number/k>=1:\n        k=k*0.5\n    return k\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    import functools\n    d = {}\n    for i in range(len(str)):\n        d[i] = {}\n        for j in range(i,len(str)):\n            d[i][j] = False\n    max = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)):\n            if(str[i] == str[j]):\n                d[i][j] = True\n                length = j-i+1\n                if length > max:\n                    max = length\n    return max\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    dp=[[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i]=1\n    for l in range(2,n+1):\n        for i in range(n-l+1):\n            j=i+l-1\n            if str[i]==str[j] and l==2:\n                dp[i][j]=2\n            elif str[i]==str[j]:\n                dp[i][j]=dp[i+1][j-1]+2\n            else:\n                dp[i][j]=max(dp[i][j-1],dp[i+1][j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    str_set = set(str)\n    \n    dp_table = [[0 for x in range(len(str))] for y in range(len(str))]\n    \n    for i in range(len(str)):\n        dp_table[i][i] = 1\n    \n    for i in range(len(str)-1,-1,-1):\n        for j in range(i+1,len(str)):\n            if str[i] == str[j]:\n                dp_table[i][j] = dp_table[i+1][j-1] + 2\n            else:\n                dp_table[i][j] = max(dp_table[i+1][j],dp_table[i][j-1])\n    print(dp_table)\n    max_length = 0\n    for i in range(len(str)):\n        max_length = max(max_length,dp_table[0][i])\n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_recursion(str, str_len, i, j): \n        if (i > j): \n            return 0\n        if (i == j): \n            return 1\n        if (str[i] == str[j]): \n            return lps_recursion(str, str_len, i + 1, j - 1) + 2\n        else: \n            return max(lps_recursion(str, str_len, i + 1, j), lps_recursion(str, str_len, i, j - 1)) \n    str_len = len(str) \n    return lps_recursion(str, str_len, 0, str_len - 1) \n    \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for k in range(1,n):\n        for i in range(0,n-k):\n            j = i + k\n            if str[i] == str[j] and k == 1:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_recursive(str, n, lps): \n        if (lps[n - 1][n - 1]!= -1):\n            return lps[n - 1][n - 1]\n        if (n == 1): \n            lps[n - 1][n - 1] = 1\n            return 1\n        if (str[n - 1] == str[n - 2]): \n            lps[n - 1][n - 1] = 2 + lps_recursive(str, n - 2, lps) \n            return lps[n - 1][n - 1] \n        lps[n - 1][n - 1] = 1 + lps_recursive(str, n - 1, lps) \n        return lps[n - 1][n - 1] \n    \n    # Create the table to store the results of subproblems \n    lps = [[-1] * (len(str) + 1) for i in range(len(str) + 1)] \n    return lps_recursive(str, len(str), lps) \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_helper(str,l,r):\n        if l == r:\n            return 1\n        if l > r:\n            return 0\n        if str[l] == str[r]:\n            return 2 + lps_helper(str,l+1,r-1)\n        else:\n            return max(lps_helper(str,l+1,r),lps_helper(str,l,r-1))\n    return lps_helper(str,0,len(str)-1)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    \n    for l in range(1,n+1):\n        for i in range(n):\n            if i-l<1: \n                dp[i][i]=1\n            elif str[i-l]==str[i]:\n                dp[i][i]=2+dp[i-1][i-1]\n            else:\n                dp[i][i]=max(dp[i-1][i],dp[i][i-1])\n    \n    return dp[-1][-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    # Find sum of 1/n until reaching 1:\n    sum = 0\n    for i in range(n):\n        sum += 1/i\n    \n    # Return n*(1+sum) / 2\n    return n*(1+sum) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 1 / (n - 1) + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / ((1 + 1)**n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    return n * (n + 1) // 2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int(1/n) + sum([1/(i+1) for i in range(n-1)])\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_array = []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersect = set1.intersection(set2)\n    return list(intersect)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for i in array_nums1:\n        if i in array_nums2 and i not in res:\n            res.append(i)\n    return res\n    \n        \nprint(intersection_array([1,2,3,4],[3,4,5,6,7]))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    #create an empty array\n    intersection_array = []\n    \n    #iterate through the array\n    for num in array_nums1:\n        \n        #check if the num is in the 2nd array\n        if num in array_nums2:\n            \n            #add it to the intersection array\n            intersection_array.append(num)\n            \n            #remove the num from the 2nd array\n            array_nums2.remove(num)\n    \n    #return the intersection of the 2nd array and the 1st array\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    output = []\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                output.append(array_nums1[i])\n    return output\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #Use the same idea as union_array with the difference being we don't need to sort the array.\n    #Check if there is a value in array_nums1 and array_nums2.\n    #If so, add it to the result\n    #Otherwise, ignore the elements.\n    result = []\n    if len(array_nums1) > 0 and len(array_nums2) > 0:\n        for i in array_nums1:\n            if i in array_nums2:\n                result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = set(array_nums1) & set(array_nums2)\n    return list(res)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a1 = set(array_nums1)\n    a2 = set(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = np.asarray(array_nums1)\n    array_nums2 = np.asarray(array_nums2)\n    array_nums1_bool = array_nums1 < array_nums2\n    array_nums2_bool = array_nums2 < array_nums1\n    intersection = np.logical_and(array_nums1_bool,array_nums2_bool)\n    return intersection.tolist()\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set of the union\n    union = set(array_nums1) | set(array_nums2)\n    # Loop through the union,\n    for num in union:\n        # If the num isn't in both arrays,\n        if num not in array_nums1 and num not in array_nums2:\n            # Add it to the answer.\n            answer.append(num)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for i in tup:\n        if i == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for i in tup:\n        if i == x:\n            cnt += 1\n    print('The count of',x,'in',tup,'is:',cnt)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup1 = []\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    tup1.append(x)\n    tup1.append(count)\n    return tup1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # initialize variables\n    count = 0\n    # Iterate through each element in the tuple\n    for i in tup:\n        if i == x:\n            count += 1\n    # return the count\n    return count\n    \ndef count_X_new(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # initialize variables\n    count = 0\n    # Iterate through each element in the tuple\n    for i in tup:\n        if i == x:\n            count += 1\n    # return the count\n    return count\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if list[i] == element:\n            break\n    if i == len(list):\n        list.append(element)\n    else:\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(0,len(list)-1):\n        list.insert(i,list[i])\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index=0\n    for i in list:\n        if index==0:\n            list.insert(index,element)\n            break\n        index=index+1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index = 0\n    while index < len(list):\n        if list[index] == element:\n            list.insert(index, element)\n            break\n        index += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if element == list[i]:\n            list.insert(i,element)\n            return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if i == 0:\n            list[0] = element\n        else:\n            list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return []\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_new = []\n    for i in range(len(list)):\n        if list[i] == element:\n            i = i+1\n        list_new.append(list[i-1])\n        list_new.append(element)\n    for i in range(i, len(list)):\n        list_new.append(list[i])\n    return list_new\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # My list of elements\n    new_list = []\n    # Iterate through the list\n    for i in range(len(list)):\n        # Check if the element is in the list\n        if list[i] == element:\n            # Append the element to the new_list\n            new_list.append(list[i])\n            # Append the element before the element in the new_list\n            new_list.append(element)\n        # Add the new element to the new list\n        else:\n            # Append the element to the new_list\n            new_list.append(list[i])\n    # Return the new list\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    count = 0\n    while count < len(list):\n        if list[count] == element:\n            list.insert(count,element)\n            return list\n        count += 1\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return \n    \ndef modulus(a,b):\n    '''\n    Write a python function to return modulus of two complex numbers.\n    '''\n    return \n    \ndef convert_to_polar(complex_number):\n    '''\n    Write a python function to convert complex number into polar coordinates.\n    '''\n    return \n    \ndef complex_sqr(a):\n    '''\n    Write a python function to return sqrt of complex number.\n    '''\n    return \n    \ndef cube_root(a):\n    '''\n    Write a python function to return cube root of a complex number.\n    '''\n    return \n    \ndef hex_to_int(number):\n    '''\n    Write a python function to convert hexadecimal number to integer number.\n    '''\n    return \n    \ndef sum_digits(n):\n    '''\n    Write a python function to return the sum of digits in a number.\n    '''\n    return \n    \ndef swap_bits(number):\n    '''\n    Write a python function to swap the even and odd bits of a binary number.\n    '''\n    return \n    \ndef convert_to_base(n, num_base):\n    '''\n    Write a python function to convert a number from a base 10 to any other base.\n    '''\n    return \n    \ndef swap_bits_of_num(num):\n    '''\n    Write a python function to swap the even and odd bits of a number.\n    '''\n    return \n    \ndef convert_to_base_10(num, base):\n    '''\n    Write a python function to convert a number from any base to base 10.\n    '''\n    return \n    \ndef all_digits_are_ones(number):\n    '''\n    Write a python function to check if all digits in the given number are ones.\n    '''\n    return \n    \ndef sum_of_digits(n):\n    '''\n    Write a python function to return sum of digits in a number.\n    '''\n    return \n    \ndef all_digits_are_ones_in_num_string(num_string):\n    '''\n    Write a python function to check if all digits in a number are ones in a given number string.\n    '''\n    return \n    \ndef convert_to_decimal_exponent(num_string):\n    '''\n    Write a python function to convert a number from base 10 to base e.\n    '''\n    return \n    \ndef power_of_two(n):\n    '''\n    Write a python function to check if number is power of two.\n    '''\n    return \n    \ndef convert_to_decimal_exponent(num_string):\n    '''\n    Write a python function to convert a number from base 10 to base e.\n    '''\n    return \n    \ndef all_digits_are_ones_in_num_string(num_string):\n    '''\n    Write a python function to check if all digits in a number are ones in a given number string.\n    '''\n    return \n    \ndef is_power_of_two(n):\n    '''\n    Write a python function to check if number is power of two.\n    '''\n    return \n    \ndef get_bit(num, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef power_of_two_bits(n):\n    '''\n    Write a python function to check if number is power of two.\n    '''\n    return \n    \ndef get_bit_n(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef get_bit_pos_n(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef get_bit_pos_n_2(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef all_digits_are_ones_in_num_string(num_string):\n    '''\n    Write a python function to check if all digits in a number are ones in a given number string.\n    '''\n    return \n    \ndef get_bit_n_2(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef get_bit_pos_n_2(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef get_bit_pos_n_2_2(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef all_digits_are_ones_in_num_string(num_string):\n    '''\n    Write a python function to check if all digits in a number are ones in a given number string.\n    '''\n    return \n    \ndef is_power_of_two_n(n):\n    '''\n    Write a python function to check if number is power of two.\n    '''\n    return \n    \ndef get_bit_pos_n_2_2(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef all_digits_are_ones_in_num_string(num_string):\n    '''\n    Write a python function to check if all digits in a number are ones in a given number string.\n    '''\n    return \n    \ndef is_power_of_two_n(n):\n    '''\n    Write a python function to check if number is power of two.\n    '''\n    return \n    \ndef get_bit_pos_n_2_2(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef get_bit_pos_n_2_2_2(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef is_power_of_two_n(n):\n    '''\n    Write a python function to check if number is power of two.\n    '''\n    return \n    \ndef get_bit_pos_n_2_2_2(n, index):\n    '''\n    Write a python function to return the bit at the given index position from a number.\n    '''\n    return \n    \ndef convert_to_polar(complex_number):\n    '''\n    Write a python function to convert complex number into polar coordinates.\n    '''\n    return \n    \ndef modulus(a,b):\n    '''\n    Write a python function to return modulus of two complex numbers.\n    '''\n    return \n    \ndef convert_to_base(n, num_base):\n    '''\n    Write a python function to convert a number from a base 10 to any other base.\n    '''\n    return \n    \ndef cube_root(a):\n    '''\n    Write a python function to return cube root of a complex number.\n    '''\n    return \n    \ndef hex_to_int(number):\n    '''\n    Write a python function to convert hexadecimal number to integer number.\n    '''\n    return \n    \ndef sum_digits(n):\n    '''\n    Write a python function to return sum of digits in a number.\n    '''\n    return \n    \ndef swap_bits(number):\n    '''\n    Write a python function to swap the even and odd bits of a binary number.\n    '''\n    return \n    \ndef convert_to_base(n, num_base):\n    '''\n    Write a python function to convert a number from any base to any other base.\n    '''\n    return \n    \ndef swap_bits_of_num(num):\n    '''\n    Writ"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.phase(numbers), cmath.polar(numbers)[1])\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    cmath.polar(numbers)\n    return 0\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = 0\n    theta = 0\n    for i in range(len(numbers)):\n        r = r + numbers[i].real\n        theta = theta + numbers[i].imag\n    r = r/len(numbers)\n    theta = theta/len(numbers)\n    return (r, theta)\nprint(convert([complex(2,3), complex(5,6)]))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list_complex_numbers = []\n    for number in numbers:\n        list_complex_numbers.append(complex(number[0], number[1]))\n    radian = []\n    degree = []\n    for complex_number in list_complex_numbers:\n        radian.append(cmath.phase(complex_number))\n        degree.append(cmath.polar(complex_number)[1]*180/cmath.pi)\n    return radian, degree\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        x=cmath.polar(numbers[i])[0]\n        y=cmath.polar(numbers[i])[1]\n        print(x,y)\nnumbers=[]\nnumbers.append(complex(1,2))\nnumbers.append(complex(0,1))\nnumbers.append(complex(5,-1))\nconvert(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    abs = lambda x : x.real**2 + x.imag**2\n    def abs(a,b):\n        return abs(a) + abs(b)\n    def normalize(x,y):\n        return (x/abs(x),y/abs(y))\n    def un_normalize(x,y):\n        return (x*abs(x),y*abs(y))\n    if not numbers:\n        return 'No input.'\n    for i in range(len(numbers)):\n        numbers[i] = complex(numbers[i])\n    L = list(map(abs,numbers))\n    L = sorted(L)\n    ans = []\n    for i in range(len(L)):\n        if L[i] == L[0]:\n            ans.append(L[i])\n            ans.append('.')\n        elif L[i] == L[-1]:\n            ans.append('.')\n            ans.append(L[i])\n        else:\n            ans.append(L[i])\n            ans.append('.')\n    for i in range(len(numbers)):\n        numbers[i] = normalize(numbers[i].real,numbers[i].imag)\n    numbers.reverse()\n    ans_ = []\n    for i in range(len(numbers)):\n        ans_.append(un_normalize(numbers[i][0],numbers[i][1]))\n    ans_.reverse()\n    for i in range(len(ans)):\n        if ans[i] == '.':\n            ans[i] = ans_[i]\n    return '{0:.0f}+{1:.0f}i'.format(ans[0],ans[1])\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([-1+1j,1+2j,2-1j,4-2j,5+3j,7+4j,6+5j,8-6j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([-1+1j,1+2j,2-1j,4-2j,5+3j,7+4j,6+5j,8-6j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([-1+1j,1+2j,2-1j,4-2j,5+3j,7+4j,6+5j,8-6j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([3+4j,3-4j,4+3j,4-3j]))\nprint(convert([0+0j,0+0j,0+0j,0+0j]))\nprint(convert([]))\nprint(convert([3+4j,3-4j,4+3"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    s = 0.0\n    for i in range(len(numbers)):\n        s += numbers[i].real**2+numbers[i].imag**2\n    s = cmath.sqrt(s)\n    return s\n    \nprint convert([complex(2,0),complex(-1,1),complex(1,1),complex(1,-1),complex(0,0)])"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        print(cmath.polar(complex(numbers[i][0], numbers[i][1]))[1])\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #  x = 3 + 2j    \n    x = 3 + 2j \n    #  y = 4 + 1j    \n    y = 4 + 1j \n    #  z = 5 + 3j\n    z = 5 + 3j \n    #  complex polar coordinates (angle in radians and magnitude)\n    #  angle = cmath.phase(z)    \n    #  angle = cmath.phase(z)/(2*cmath.pi)    \n    #  angle = cmath.phase(z)/(2*cmath.pi)\n    angle = cmath.phase(z)/(2*cmath.pi)\n    mag = cmath.sqrt(x**2 + y**2 + z**2)\n    #  print(mag,angle)\n    return(mag,angle)\n    \ndef convert2(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #  x = 3 + 2j    \n    x = 3 + 2j \n    #  y = 4 + 1j    \n    y = 4 + 1j \n    #  z = 5 + 3j\n    z = 5 + 3j \n    #  complex polar coordinates (angle in radians and magnitude)\n    #  angle = cmath.phase(z)    \n    #  angle = cmath.phase(z)/(2*cmath.pi)    \n    #  angle = cmath.phase(z)/(2*cmath.pi)\n    angle = cmath.phase(z)/(2*cmath.pi)\n    mag = cmath.sqrt(x**2 + y**2 + z**2)\n    #  print(mag,angle)\n    return(angle)\n    "
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    cnt = 0\n    for ele in list1:\n        if type(ele) == int:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i,int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list1 = list1\n    counter = 0\n    for i in list1:\n        if i%1 == 0:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            tup = tuple(l[i:j + 1])\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in combinations_with_replacement(l,n):\n        combs.append(i)\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if j == i:\n                continue\n            for k in range(len(l)):\n                if k == i or k == j:\n                    continue\n                yield (l[i], l[j], l[k])\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    output = []\n    for i in range(len(l)):\n        x = tuple(l[i:i+n])\n        output.append(x)\n    return output\nprint(combinations_colors(['Red','Green','Blue'],3))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    lista=[]\n    for i in range(0,len(l)):\n        lista.append((l[i],)*n)\n    return lista\n    \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #your code here\n    return []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        for c in combinations_with_replacement(l, n):\n            combs.append(c)\n    return combs\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #print(n)\n    primes = 0\n    # Find the first prime\n    if n <= 1:\n        return primes\n    is_prime = [True]*(n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, n+1):\n        if is_prime[i]:\n            # mark i as non-prime by making all multiples of i False\n            j = 2\n            while i*j <= n:\n                is_prime[i*j] = False\n                j += 1\n    primes = sum(is_prime)\n    return primes"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(number):\n        '''\n        Helper function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n        '''\n        if number < 2:\n            return 0\n        i = 2\n        while i <= number/i:\n            if number % i == 0:\n                return 0\n            i += 1\n        return 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    result = 0\n    for i in range(2,n):\n        if isPrime(i) == 1:\n            result += 1\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def prime(x):\n        count = 0\n        for i in range(2,x+1):\n            if x%i==0:\n                count+=1\n        if count==0:\n            return x\n        else:\n            return prime(x-1)\n    return prime(n)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    if n <= 1:\n        return 0\n    \n    if n == 2:\n        return 1\n    \n    prime_count = 0\n    for num in range(2, n):\n        if isPrime(num):\n            prime_count += 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # No need to do if the input is less than 2\n    if n <= 1:\n        return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # for i in range(n):\n    #     if i!= 0 and i % 2!= 0 and i % 3!= 0 and i % 5!= 0:\n    #         print(i)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime = 0\n    if n <= 1:\n        return 0\n    for i in range(2,n):\n        if n%i == 0:\n            prime += 1\n    return prime\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    primes = []\n    for i in range(2,n):\n        if is_prime(i):\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    primes_count = 0\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = b\n    b = a\n    a = temp\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \n    \n    \nprint(swap_numbers(1,2)) #(2,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #return (b,a)\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = (b, a)\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = b\n    b = a\n    a = c\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # if a > b:\n    #     return b,a\n    # else:\n    #     return a,b\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # print(f\"first element in test_tup1: {test_tup1[0]} and second element in test_tup2: {test_tup2[1]}\")\n    print(f\"First element: {max(test_tup1)} and Second element: {max(test_tup2)}\")\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # list1 = list(test_tup1)\n    # list2 = list(test_tup2)\n    # print('list1: ', list1)\n    # print('list2: ', list2)\n    # list1.sort(reverse=True)\n    # list2.sort(reverse=True)\n    # print('list1 after sorting: ', list1)\n    # print('list2 after sorting: ', list2)\n    # return list1 + list2\n    # final_list = []\n    # for x in range(len(list1)):\n    #     temp = list1[x] + list2[x]\n    #     final_list.append(temp)\n    # return final_list\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    print('list1: ', list1)\n    print('list2: ', list2)\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    print('list1 after sorting: ', list1)\n    print('list2 after sorting: ', list2)\n    list1 = list1 + list2\n    print('final_list: ', list1)\n    return list1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1, test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    if test_tup1 < test_tup2:\n        list1, list2 = list2, list1\n    list1, list2 = max(list1), max(list2)\n    return tuple(list1), tuple(list2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    if (max_tup1 > max_tup2):\n        print(max_tup1)\n        print(max_tup2)\n    elif (max_tup1 < max_tup2):\n        print(max_tup2)\n        print(max_tup1)\n    else:\n        print(\"Equal\")\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # in the case of equal values\n    if test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1]:\n        max_tup = (test_tup1[0], test_tup2[1])\n        return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #print(test_tup1, test_tup2)\n    max_tup = (0,0)\n    if test_tup1[0]>test_tup2[0]:\n        max_tup = test_tup1\n    elif test_tup1[0]<test_tup2[0]:\n        max_tup = test_tup2\n    else:\n        max_tup = test_tup1\n    if max_tup[1]>test_tup1[1]:\n        max_tup = test_tup1\n    elif max_tup[1]<test_tup2[1]:\n        max_tup = test_tup2\n    else:\n        max_tup = test_tup1\n    #print(max_tup)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        print(\"test_tup1 = \",test_tup1)\n        print(\"test_tup2 = \",test_tup2)\n        print(\"return = \",test_tup1)\n    else:\n        print(\"test_tup1 = \",test_tup1)\n        print(\"test_tup2 = \",test_tup2)\n        print(\"return = \",test_tup2)\n    return test_tup1, test_tup2\n    \n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1), max(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Let the smaller value be x and the larger one be y\n    # If x is greater than y, swap both x and y\n    # Return x, y\n    # We need to find the larger element in the tuple\n    x = test_tup1[0]\n    y = test_tup2[0]\n    if x > y:\n        x, y = y, x\n    return x, y\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_1(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_2(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_3(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_4(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_5(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_6(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_7(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_8(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_9(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_10(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_11(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_12(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_13(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                if j % 2!= 0 and n % j!= 0:\n                    return j\n                else:\n                    j += 2\n    else:\n        return None\n    \ndef newman_prime_14(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n > 2:\n        if n % 2 == 0:\n            return 4\n        else:\n            j = 3\n            while j <= n:\n                i"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if n > len(primes):\n        print(\"error\")\n        return\n    else:\n        return primes[n]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    is_prime = [True] * (n+1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if not is_prime[i]:\n            continue\n        for j in range(i*i, n+1, i):\n            is_prime[j] = False\n    return is_prime\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 2\n    else:\n        a=3\n        b=2\n        while(n!=1):\n            x=int((n-1)/2)\n            y=int((n+1)/2)\n            if x%2==0:\n                a=a+2*(x+1)\n                n=n-x\n            else:\n                a=a+2*x\n                n=n-x\n            if y%2==0:\n                b=b+2*(y+1)\n                n=n-y\n            else:\n                b=b+2*y\n                n=n-y\n        return a+b\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    a = 10\n    while count < n:\n        a += 1\n        if not is_prime(a):\n            count += 1\n    return a\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # if n < 2:\n        # return False\n    # if n % 2 == 0:\n        # return False\n    # if n < 19:\n        # return True\n    # if n == 19:\n        # return False\n    # if n % 2!= 0:\n        # p = 3\n        # while p <= n:\n            # if n % p == 0:\n                # return False\n            # else:\n                # p += 2\n    # if n % 2 == 0:\n        # p = 3\n        # while p <= n:\n            # if n % p == 0:\n                # return False\n            # else:\n                # p += 2\n        # else:\n            # p += 2\n        # return True\n    # else:\n        # p = 3\n        # while p <= n:\n            # if n % p == 0:\n                # return False\n            # else:\n                # p += 2\n        # else:\n            # p += 2\n        # return True\n    \n    # if n <= 3:\n        # p = 3\n        # while n!= 1:\n            # if n % p == 0:\n                # return False\n            # else:\n                # p += 2\n        # else:\n            # return True\n    # else:\n        # p = 3\n        # while n!= 1:\n            # if n % p == 0:\n                # return False\n            # else:\n                # p += 2\n        # else:\n            # p += 2\n        # return True\n        \n    # if n <= 3:\n        # p = 3\n        # while n!= 1:\n            # if n % p == 0:\n                # return False\n            # else:\n                # p += 2\n        # else:\n            # return True\n    # else:\n        # p = 3\n        # while n!= 1:\n            # if n % p == 0:\n                # return False\n            # else:\n                # p += 2\n        # else:\n            # p += 2\n        # return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    prime_set = set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n    \n    if n <= len(prime_set):\n        return prime_set[n-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = n + 1\n    primes = []\n    x = 1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    l = n + 1\n    s = 0\n    while l!= 2:\n        m = l * 2 - 2\n        while m > 0:\n            if gcd(m, l)!= 1:\n                m = m - 1\n                continue\n            else:\n                if l % m == 0:\n                    l = l / m\n                    s = s + 1\n                else:\n                    m = m - 1\n                    continue\n                break\n    return s\n    \ndef nth_prime(n):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    l = n + 1\n    s = 0\n    while l!= 2:\n        m = l * 2 - 2\n        while m > 0:\n            if gcd(m, l)!= 1:\n                m = m - 1\n                continue\n            else:\n                if l % m == 0:\n                    l = l / m\n                    s = s + 1\n                else:\n                    m = m - 1\n                    continue\n                break\n    return s\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize output tuple\n    output_tuple = ()\n    # iterate over each element in input tuples\n    for i in range(len(test_tup1)):\n        # if length of each element is different, raise an error\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            raise ValueError\n        # else, perform division operation\n        else:\n            output_tuple += (test_tup1[i] // test_tup2[i],)\n    # return output tuple\n    return output_tuple\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for x, y in zip(test_tup1, test_tup2):\n        result += (x//y, )\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return (test_tup1[i] // test_tup2[i] for i in range(len(test_tup1)))\n    else:\n        raise ValueError('Both tuples must have the same length.')\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([i/j for i,j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        assert type(test_tup1) == tuple\n        assert type(test_tup2) == tuple\n        assert len(test_tup1) == len(test_tup2)\n        assert all([type(i) == int or type(i) == float for i in test_tup1])\n        assert all([type(i) == int or type(i) == float for i in test_tup2])\n        assert all(test_tup1[i] % test_tup2[i] == 0 for i in range(len(test_tup1)))\n        return test_tup1 / test_tup2\n    except AssertionError as error:\n        print(error)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = tuple()\n    new_tup2 = tuple()\n    for i in range(len(test_tup1)):\n        new_tup1 += (test_tup1[i] / test_tup2[i], )\n        new_tup2 += (test_tup2[i] / test_tup1[i], )\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #print(\"Original tuples: \", test_tup1, test_tup2)\n    (x1, y1) = test_tup1\n    (x2, y2) = test_tup2\n    #print(\"Values x1 and y1:\", x1, y1)\n    #print(\"Values x2 and y2:\", x2, y2)\n    x = x1 // x2\n    y = y1 // y2\n    #print(\"Values after division:\", x, y)\n    return (x, y)\n    #return (x, y1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        element_1 = test_tup1[i]\n        element_2 = test_tup2[i]\n        result.append(element_1//element_2)\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Method 1 - Iterating over each element and diving each element by the divisor\n    # test_tup1, test_tup2 = (10,20), (10,20)\n    # result = (10/20, 20/20)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        for i in range(0, len(test_tup1)):\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n        return test_tup1\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_to_return = []\n    split_list = []\n    list_to_return.append(split_list)\n    split_list.append(list1[0:L])\n    list_to_return.append(split_list)\n    split_list = []\n    split_list.append(list1[L:])\n    list_to_return.append(split_list)\n    return list_to_return\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == L:\n        return(list1)\n    else:\n        return(list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = []\n    part2 = []\n    for i in list1:\n        if i <= L:\n            part1.append(i)\n        else:\n            part2.append(i)\n    return (part1, part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #split the list into two parts\n    list1_1 = list1[:L]\n    list1_2 = list1[L:]\n    #print the result\n    print(list1_1)\n    print(list1_2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    middle = len(list1)//2\n    first_part = list1[:middle]\n    second_part = list1[middle:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1.append(list1[0])\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if isinstance(h_age, int) == False:\n        print('Invalid input!')\n    else:\n        if h_age > 0:\n            dog_age_in_y = h_age * 7\n            return dog_age_in_y\n        else:\n            print('Invalid input!')\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return -1\n    else:\n        return (20 * h_age) + 10\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # (d, y) = dog_years(age)\n    # d = dog_years(age)\n    # return (age)\n    age = h_age * 7\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_year = 365 * h_age\n    print(f'The dog is {dog_year} years old in dog\\'s years')\n    return dog_year\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return round((h_age * 7) + 0.5)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0:\n        return (h_age * 7.5) + 5\n    else:\n        return -1\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 0:\n        print(\"0-3\")\n    elif h_age >= 1 and h_age <= 4:\n        print(\"1-3\")\n    elif h_age >= 5 and h_age <= 7:\n        print(\"4-7\")\n    elif h_age >= 8 and h_age <= 10:\n        print(\"8-10\")\n    elif h_age >= 11 and h_age <= 13:\n        print(\"11-12\")\n    elif h_age >= 14 and h_age <= 16:\n        print(\"13-15\")\n    elif h_age >= 17 and h_age <= 20:\n        print(\"16-19\")\n    elif h_age >= 21 and h_age <= 24:\n        print(\"20-23\")\n    elif h_age >= 25 and h_age <= 27:\n        print(\"24-26\")\n    elif h_age >= 28 and h_age <= 30:\n        print(\"27-29\")\n    elif h_age >= 31 and h_age <= 33:\n        print(\"30-32\")\n    elif h_age >= 34 and h_age <= 36:\n        print(\"33-35\")\n    elif h_age >= 37 and h_age <= 39:\n        print(\"36-38\")\n    elif h_age >= 40 and h_age <= 43:\n        print(\"39-42\")\n    elif h_age >= 44 and h_age <= 47:\n        print(\"43-46\")\n    elif h_age >= 48 and h_age <= 49:\n        print(\"47-48\")\n    elif h_age >= 50 and h_age <= 53:\n        print(\"49-52\")\n    elif h_age >= 54 and h_age <= 56:\n        print(\"53-55\")\n    elif h_age >= 57 and h_age <= 59:\n        print(\"56-58\")\n    elif h_age >= 60 and h_age <= 63:\n        print(\"59-62\")\n    elif h_age >= 64 and h_age <= 67:\n        print(\"63-66\")\n    elif h_age >= 68 and h_age <= 70:\n        print(\"67-68\")\n    elif h_age >= 71 and h_age <= 73:\n        print(\"69-72\")\n    elif h_age >= 74 and h_age <= 76:\n        print(\"73-74\")\n    elif h_age >= 77 and h_age <= 79:\n        print(\"75-77\")\n    elif h_age >= 80 and h_age <= 83:\n        print(\"78-80\")\n    elif h_age >= 84 and h_age <= 86:\n        print(\"81-84\")\n    elif h_age >= 87 and h_age <= 90:\n        print(\"85-87\")\n    elif h_age >= 91 and h_age <= 94:\n        print(\"88-91\")\n    elif h_age >= 95 and h_age <= 98:\n        print(\"92-95\")\n    elif h_age >= 99 and h_age <= 102:\n        print(\"96-99\")\n    elif h_age >= 103 and h_age <= 106:\n        print(\"100-103\")\n    elif h_age >= 107 and h_age <= 109:\n        print(\"104-107\")\n    elif h_age >= 110 and h_age <= 112:\n        print(\"108-110\")\n    elif h_age >= 113 and h_age <= 115:\n        print(\"111-113\")\n    elif h_age >= 116 and h_age <= 118:\n        print(\"114-116\")\n    elif h_age >= 119 and h_age <= 121:\n        print(\"117-119\")\n    elif h_age >= 122 and h_age <= 124:\n        print(\"120-122\")\n    elif h_age >= 125 and h_age <= 128:\n        print(\"123-125\")\n    elif h_age >= 129 and h_age <= 132:\n        print(\"126-129\")\n    elif h_age >= 133 and h_age <= 136:\n        print(\"130-133\")\n    elif h_age >= 137 and h_age <= 139:\n        print(\"134-137\")\n    elif h_age >= 140 and h_age <= 143:\n        print(\"138-140\")\n    elif h_age >= 144 and h_age <= 146:\n        print(\"141-144\")\n    elif h_age >= 147 and h_age <= 149:\n        print(\"145-147\")\n    elif h_age >= 150 and h_age <= 153:\n        print(\"148-150\")\n    elif h_age >= 154 and h_age <= 156:\n        print(\"151-154\")\n    elif h_age >= 157 and h_age <= 159:\n        print(\"155-157\")\n    elif h_age >= 160 and h_age <= 162:\n        print(\"158-160\")\n    elif h_age >= 163 and h_age <= 165:\n        print(\"161-163\")\n    elif h_age >= 164 and h_age <= 168:\n        print(\"164-166\")\n    elif h_age >= 169 and h_age <= 172:\n        print(\"167-169\")\n    elif h_age >= 173 and h_age <= 175:\n        print(\"170-173\")\n    elif h_age >= 176 and h_age <= 177:\n        print(\"174-176\")\n    elif h_age >= 178 and h_age <= 180:\n        print(\"177-178\")\n    elif h_age >= 181 and h_age <= 183:\n        print(\"179-181\")\n    elif h_age >= 184 and h_age <= 186:\n        print(\"182-184\")\n    elif h_age >= 187 and h_age <= 189:\n        print(\"185-187\")\n    elif h_age >= 190 and h_age <= 192:\n        print(\"188-190\")\n    elif h_age >= 193 and h_age <= 195:\n        print(\"191-193\")\n    elif h_age >= 196 and h_age <= 198:\n        print(\"194-196\")\n    elif h_age >= 199 and h_age <= 200:\n        print(\"197-199\")\n    elif h_age >= 201 and h_age <= 203:\n        print(\"200-202\")\n    elif h_age >= 204 and h_age <= 205:\n        print(\"203-204\")\n    elif h_age >= 206 and h_age <= 208:\n        print(\"205-206\")\n    elif h_age >= 209 and h_age <= 210:\n        print(\"207-209\")\n    elif h_age >= 211 and h_age <= 213:\n        print(\"210-211\")\n    elif h_age >= 214 and h_age <= 215:\n        print(\"212-214\")\n    elif h_age >= 216 and h_age <= 218:\n        print(\"215-216\")\n    elif h_age >= 219 and h_age <= 221:\n        print(\"217-219\")\n    elif h_age >= 222 and h_age <= 224:\n        print(\"220-222\")\n    elif h_age >= 225 and h_age <= 228:\n        print(\"223-225\")\n    elif h_age >= 226 and h_age <= 230:\n        print(\"226-226\")\n    elif h_age >= 231 and h_age <= 234:\n        print(\"227-231\")\n    elif h_age >= 232 and h_age <= 236:\n        print(\"232-232\")\n    elif h_age >= 233 and h_age <= 239:\n        print(\"233-233\")\n    elif h_age >= 240 and h_age <= 242:\n        print(\"234-240\")\n    elif h_age >= 243 and h_age <= 245:\n        print(\"241-241\")\n    elif h_age >= 246 and h_age <= 249:\n        print(\"242-242\")\n    elif h_age >= 250 and h_age <= 254:\n        print(\"243-243\")\n    elif h_age >= 255 and h_age <= 256:\n        print(\"244-244\")\n    elif h_age >= 257 and h_age <= 261:\n        print(\"245-245\")\n    elif h_age >= 262 and h_age <= 265:\n        print(\"246-246\")\n    elif h_age >= 266 and h_age <= 268:\n        print(\"247-247\")\n    elif h"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n    \n    \ndef run_twice(f):\n    '''\n    Write a function that takes a function as an argument and calls that\n    function twice, passing the same arguments.\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(len(S)):\n        if i%step == 0:\n            l.append(S[:step])\n            S = S[step:]\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result\n    else:\n        return []\n        \ndef list_split2(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split3(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split4(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split5(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split6(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split7(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split8(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split9(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split10(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split11(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split12(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split13(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split14(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split15(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split16(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = []\n            for i in range(0, len(S), step):\n                result.append(S[i:i+step])\n            return result\n    else:\n        return []\n        \ndef list_split17(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if type(S) == list:\n        if step < 2:\n            return []\n        else:\n            result = ["
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Code here\n    return S[0::step]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [[S[i:i+step]] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    print(S[0:step])\n    if step == 1:\n        return []\n    else:\n        return [S[0:step]] + list_split(S[step:], step)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    i = 0\n    list_of_lists = []\n    while i < len(S):\n        list_of_lists.append(S[i:i+step])\n        i+=step\n    return list_of_lists\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #Splitting out of the list if n is larger than the length of the list\n    if n > len(S):\n        return [[]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return (S[i:i+step] for i in range(0,len(S),step))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(len(S)):\n        if i % step == 0:\n            l.append(S[:i])\n            S = S[i:]\n    return l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # you may use those functions : import math\n    l = float(l)\n    return 6*l*math.sqrt(3)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    sides = (l**2)\n    lateral = 6*sides\n    return lateral\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (3 * l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l ** 2) * (3 * (l + 1) - 1)\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert l > 0\n    assert l%2 == 0\n    return (l**2) * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert l > 0, \"side length must be positive\"\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface(l):\n        return 4 * l * l\n    return lateral_surface\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i%2!= 0):\n            sum = sum + pow(i,2)\n    return sum\n    \nprint(square_Sum(5))\nprint(square_Sum(10))\nprint(square_Sum(15))\nprint(square_Sum(20))\nprint(square_Sum(25))\nprint(square_Sum(30))\nprint(square_Sum(35))\nprint(square_Sum(40))\nprint(square_Sum(45))\nprint(square_Sum(50))\nprint(square_Sum(55))\nprint(square_Sum(60))\nprint(square_Sum(65))\nprint(square_Sum(70))\nprint(square_Sum(75))\nprint(square_Sum(80))\nprint(square_Sum(85))\nprint(square_Sum(90))\nprint(square_Sum(95))\nprint(square_Sum(100))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if i%2==1:\n            s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def square_Sum(n):  \n        return sum(i * i for i in range(1,n+1,2))\n    \n    '''\n    Write a Python function that takes a list and returns the sum of the list.\n    '''\n    def sum_list(l):\n        sum = 0\n        for ele in l:\n            sum += ele\n        return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i * i\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            sum += i ** 2\n    return sum\n    \nsquare_Sum(20)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    print(\"sum of squares of first n odd natural numbers: \",sum([i**2 for i in range(1,n+1,2)]))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(pow(5, n-1)) \n    \n    # Time: O(n)\n    # Space: O(1)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #https://www.mathopenref.com/star-number-in-base-2.html\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Your code here\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    assert(n < 100)\n    \n    # generate a list of k numbers\n    k = []\n    for i in range(n):\n        k.append(i+1)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def star(n):\n        if n < 0:\n            return\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        else:\n            return star(n - 1) + star(n - 2) + star(n - 3) + star(n - 4)\n    return star(n)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    starnum = 0\n    while n > 1:\n        starnum += 1\n        n //= 10\n    return starnum\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    assert n > 0\n    n = n-1\n    p = 2\n    while p * p <= n:\n        if n % p == 0:\n            n = n // p\n            break\n        p += 1\n    while p <= n:\n        if n % p == 0:\n            n = n // p\n            break\n        p += 1\n    return p\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k > 0:\n        return ord(k)-32\n    else:\n        return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef ascii_chr(v):\n    '''\n    Write a function to find the character associated with the ascii value.\n    '''\n    return chr(v)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k)!= str:\n        raise TypeError('input must be a string')\n    else:\n        try:\n            return ord(k)\n        except TypeError:\n            raise TypeError('input must be a string')\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef binary_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    if(k == 'A'):\n        return 65\n    elif(k == 'B'):\n        return 66\n    elif(k == 'C'):\n        return 67\n    elif(k == 'D'):\n        return 68\n    elif(k == 'E'):\n        return 69\n    elif(k == 'F'):\n        return 70\n    elif(k == 'G'):\n        return 71\n    elif(k == 'H'):\n        return 72\n    elif(k == 'I'):\n        return 73\n    elif(k == 'J'):\n        return 74\n    elif(k == 'K'):\n        return 75\n    elif(k == 'L'):\n        return 76\n    elif(k == 'M'):\n        return 77\n    elif(k == 'N'):\n        return 78\n    elif(k == 'O'):\n        return 79\n    elif(k == 'P'):\n        return 80\n    elif(k == 'Q'):\n        return 81\n    elif(k == 'R'):\n        return 82\n    elif(k == 'S'):\n        return 83\n    elif(k == 'T'):\n        return 84\n    elif(k == 'U'):\n        return 85\n    elif(k == 'V'):\n        return 86\n    elif(k == 'W'):\n        return 87\n    elif(k == 'X'):\n        return 88\n    elif(k == 'Y'):\n        return 89\n    elif(k == 'Z'):\n        return 90\n    else:\n        return k\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    sum_even = 0\n    for i in range(0,len(arr),2):\n        sum_even = sum_even + arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        if i%2==0 and arr[i]%2==0:\n            sum+=arr[i]\n    return sum\n    \ndef even_sum_with_dict(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list using dictionary.\n    '''\n    even_dict = {}\n    sum = 0\n    for i in range(0,len(arr)):\n        if i%2==0 and arr[i]%2==0:\n            if arr[i] in even_dict.keys():\n                even_dict[arr[i]]+=1\n            else:\n                even_dict[arr[i]] = 1\n    for i in even_dict:\n        sum += i*even_dict[i]\n    return sum\n    \ndef even_sum_with_set(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list using set.\n    '''\n    even_set = set()\n    sum = 0\n    for i in range(0,len(arr)):\n        if i%2==0 and arr[i]%2==0:\n            even_set.add(arr[i])\n    for i in even_set:\n        sum+=i\n    return sum\n    \ndef even_sum_with_list(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list using list.\n    '''\n    even_list = []\n    for i in range(0,len(arr)):\n        if i%2==0 and arr[i]%2==0:\n            even_list.append(arr[i])\n    return sum(even_list)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_sum = 0\n    index_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            index_sum += i\n            \n    return even_sum, index_sum\n    \n    \ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(sum_even_and_even_index(arr))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Approach 1: Using regular loops\n    # total_sum = 0\n    # for i in range(0, len(arr)):\n    #     if (i%2==0):\n    #         total_sum += arr[i]\n    # return total_sum\n    \n    # Approach 2: Using regular loops\n    # total_sum = 0\n    # for i in range(0, len(arr)):\n    #     if (i%2==0):\n    #         total_sum += arr[i]\n    # return total_sum\n    \n    # Approach 3: Using indexing\n    total_sum = 0\n    for i in range(0, len(arr)):\n        if (i%2==0):\n            total_sum += arr[i]\n    return total_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i%2 == 0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr)):\n        if(arr[i]%2==0):\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    arr_odd=[]\n    arr_even=[]\n    arr_even_sum=0\n    for i in range(len(arr)):\n        if i%2 ==0:\n            arr_even.append(arr[i])\n        else:\n            arr_odd.append(arr[i])\n    for j in range(len(arr_even)):\n        arr_even_sum=arr_even_sum+arr_even[j]\n    print('The sum of even elements at even indices in the given array is ', arr_even_sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = lambda arr: arr[::2]\n    even_sum = lambda arr: sum(arr[::2])\n    return even_sum(even_index(arr))\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    result = 0\n    for i in range(len(arr)):\n        if i%2==0 and arr[i]%2==0:\n            result += arr[i]\n            \n    return result\n    \n    \narr = [1, 2, 3, 4, 5, 6]\nprint(sum_even_and_even_index(arr)) # 0\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + (i**5)\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    e = 0\n    for i in range(n):\n        if (i%2) == 0:\n            e = e + i ** 5\n    return e\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return(sum([n**5 for n in range(0,n+1) if n%2==0 ]))\n    \ndef even_Power_Sum_2(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Solution 1\n    sum_even_power = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            sum_even_power += i**5\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # code goes here\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum = sum + i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    #solution 1 - O(n) time\n    #solution 2 - O(n) time\n    sum = 0\n    \n    # n = 5\n    # 1 1 1 1 1\n    # 2 2 2 2 2\n    # 3 4 4 4 4\n    # 4 8 8 8 8\n    # 5 12 12 12 12\n    \n    # O(n)\n    for i in range(1, n + 1):\n        sum = sum + i ** 5\n    \n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n = n + 1\n    sum_even = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum_even = sum_even + i**5\n    return sum_even\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += (i**5)\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(1,n+1):\n        if(i%2==0):\n            even_sum += i**5\n    return even_sum\nprint(\"Even Power Sum : \" + str(even_Power_Sum(10)))\nprint(\"Even Power Sum : \" + str(even_Power_Sum(11)))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n = n + 1\n    Sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            Sum = Sum + i**5\n    return Sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        total += pow(i, 5)\n    return total\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_rear = []\n    for x in range(len(test_list)):\n        list_of_rear.append(test_list[x][-1])\n    return list_of_rear\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # your code here\n    rear = []\n    for i in range(len(test_list)):\n        rear.append(test_list[i][1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][1]\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [lst[-1] for lst in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for t in test_list:\n        rear.append(t[-1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x: x[-1], test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #return a list of tuples, each tuple with rear element of each tuple\n    \n    new_list = []\n    for i in test_list:\n        new_list.append((i[1],i[0]))\n    return new_list\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(f\"{'subtract_elements':^120}\")\n    print(f\"{test_tup1} - {test_tup2} = {test_tup1 - test_tup2}\")\n    return \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sum_tup = []\n    for i in range(0,len(test_tup1)):\n        subtracted_tup = (test_tup1[i] - test_tup2[i])\n        sum_tup.append(subtracted_tup)\n    return sum_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        sub_tup = []\n        for i in range(len(test_tup1)):\n            sub_tup.append(test_tup1[i] - test_tup2[i])\n        return tuple(sub_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # to get the elements from the tuple\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    #start with empty list to store new tuple\n    new_tuple = []\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    count = 0\n    test_tup_sum = ()\n    while count < len(test_tup1):\n        test_tup_sum += (test_tup1[count] - test_tup2[count], )\n        count += 1\n    return test_tup_sum\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0:4]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] - test_tup2[i]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtract_tuple = []\n    for i in range(0, len(test_tup1)):\n        subtract_tuple.append(test_tup1[i] - test_tup2[i])\n    return tuple(subtract_tuple)\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    first = []\n    second = []\n    for i in range(len(test_tup1)):\n        first.append(test_tup1[i]-test_tup2[i])\n    return first\n    \nprint(substract_elements((5, 4, 1, 2), (1, 2, 5, 4)))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #upper bound for number of possible results. if less than upper bound, for loop is run till upper bound.\n    upper_bound = n//2\n    sum = 0\n    #if the nth index binomial coefficient is even, the sum of the binomial coefficients for even index is added to the sum.\n    for i in range(1,upper_bound+1):\n        if i%2 == 0:\n            sum += binomial_Coeff(n,i)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum=0\n    for i in range(0, n+1):\n        if i%2==0:\n            sum = sum + binomial_Coeff_Sum(i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        print('Invalid input, input must be a positive integer')\n        exit()\n    \n    # Initalize the list with the first element 1\n    odd_list = []\n    odd_list.append(1)\n    even_list = []\n    even_list.append(1)\n    \n    # Find the odd and even coeff for the first element\n    for i in range(1,n):\n        odd_list.append((odd_list[i-1]*2) % 10)\n        even_list.append((even_list[i-1]*4) % 10)\n    \n    # Create a list of all the sum\n    sum_list = []\n    for j in range(0,n):\n        sum_list.append(odd_list[j] + even_list[j])\n    return sum_list\n    \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0.0\n    if n<1:\n        print(\"Input should be a positive integer\")\n        return 0\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n==3:\n        return 1\n    if n==4:\n        return 1\n    if n==5:\n        return 1\n    if n==6:\n        return 1\n    if n==7:\n        return 1\n    if n==8:\n        return 2\n    if n==9:\n        return 2\n    if n==10:\n        return 2\n    if n==11:\n        return 2\n    if n==12:\n        return 2\n    if n==13:\n        return 2\n    if n==14:\n        return 2\n    if n==15:\n        return 2\n    if n==16:\n        return 2\n    if n==17:\n        return 2\n    if n==18:\n        return 2\n    if n==19:\n        return 2\n    if n==20:\n        return 2\n    if n==21:\n        return 2\n    if n==22:\n        return 2\n    if n==23:\n        return 2\n    if n==24:\n        return 2\n    if n==25:\n        return 2\n    if n==26:\n        return 2\n    if n==27:\n        return 2\n    if n==28:\n        return 2\n    if n==29:\n        return 2\n    if n==30:\n        return 2\n    if n==31:\n        return 2\n    if n==32:\n        return 2\n    if n==33:\n        return 2\n    if n==34:\n        return 2\n    if n==35:\n        return 2\n    if n==36:\n        return 2\n    if n==37:\n        return 2\n    if n==38:\n        return 2\n    if n==39:\n        return 2\n    if n==40:\n        return 2\n    if n==41:\n        return 2\n    if n==42:\n        return 2\n    if n==43:\n        return 2\n    if n==44:\n        return 2\n    if n==45:\n        return 2\n    if n==46:\n        return 2\n    if n==47:\n        return 2\n    if n==48:\n        return 2\n    if n==49:\n        return 2\n    if n==50:\n        return 2\n    if n==51:\n        return 2\n    if n==52:\n        return 2\n    if n==53:\n        return 2\n    if n==54:\n        return 2\n    if n==55:\n        return 2\n    if n==56:\n        return 2\n    if n==57:\n        return 2\n    if n==58:\n        return 2\n    if n==59:\n        return 2\n    if n==60:\n        return 2\n    if n==61:\n        return 2\n    if n==62:\n        return 2\n    if n==63:\n        return 2\n    if n==64:\n        return 2\n    if n==65:\n        return 2\n    if n==66:\n        return 2\n    if n==67:\n        return 2\n    if n==68:\n        return 2\n    if n==69:\n        return 2\n    if n==70:\n        return 2\n    if n==71:\n        return 2\n    if n==72:\n        return 2\n    if n==73:\n        return 2\n    if n==74:\n        return 2\n    if n==75:\n        return 2\n    if n==76:\n        return 2\n    if n==77:\n        return 2\n    if n==78:\n        return 2\n    if n==79:\n        return 2\n    if n==80:\n        return 2\n    if n==81:\n        return 2\n    if n==82:\n        return 2\n    if n==83:\n        return 2\n    if n==84:\n        return 2\n    if n==85:\n        return 2\n    if n==86:\n        return 2\n    if n==87:\n        return 2\n    if n==88:\n        return 2\n    if n==89:\n        return 2\n    if n==90:\n        return 2\n    if n==91:\n        return 2\n    if n==92:\n        return 2\n    if n==93:\n        return 2\n    if n==94:\n        return 2\n    if n==95:\n        return 2\n    if n==96:\n        return 2\n    if n==97:\n        return 2\n    if n==98:\n        return 2\n    if n==99:\n        return 2\n    if n==100:\n        return 2\n    if n==101:\n        return 2\n    if n==102:\n        return 2\n    if n==103:\n        return 2\n    if n==104:\n        return 2\n    if n==105:\n        return 2\n    if n==106:\n        return 2\n    if n==107:\n        return 2\n    if n==108:\n        return 2\n    if n==109:\n        return 2\n    if n==110:\n        return 2\n    if n==111:\n        return 2\n    if n==112:\n        return 2\n    if n==113:\n        return 2\n    if n==114:\n        return 2\n    if n==115:\n        return 2\n    if n==116:\n        return 2\n    if n==117:\n        return 2\n    if n==118:\n        return 2\n    if n==119:\n        return 2\n    if n==120:\n        return 2\n    if n==121:\n        return 2\n    if n==122:\n        return 2\n    if n==123:\n        return 2\n    if n==124:\n        return 2\n    if n==125:\n        return 2\n    if n==126:\n        return 2\n    if n==127:\n        return 2\n    if n==128:\n        return 2\n    if n==129:\n        return 2\n    if n==130:\n        return 2\n    if n==131:\n        return 2\n    if n==132:\n        return 2\n    if n==133:\n        return 2\n    if n==134:\n        return 2\n    if n==135:\n        return 2\n    if n==136:\n        return 2\n    if n==137:\n        return 2\n    if n==138:\n        return 2\n    if n==139:\n        return 2\n    if n==140:\n        return 2\n    if n==141:\n        return 2\n    if n==142:\n        return 2\n    if n==143:\n        return 2\n    if n==144:\n        return 2\n    if n==145:\n        return 2\n    if n==146:\n        return 2\n    if n==147:\n        return 2\n    if n==148:\n        return 2\n    if n==149:\n        return 2\n    if n==150:\n        return 2\n    if n==151:\n        return 2\n    if n==152:\n        return 2\n    if n==153:\n        return 2\n    if n==154:\n        return 2\n    if n==155:\n        return 2\n    if n==156:\n        return 2\n    if n==157:\n        return 2\n    if n==158:\n        return 2\n    if n==159:\n        return 2\n    if n==160:\n        return 2\n    if n==161:\n        return 2\n    if n==162:\n        return 2\n    if n==163:\n        return 2\n    if n==164:\n        return 2\n    if n==165:\n        return 2\n    if n==166:\n        return 2\n    if n==167:\n        return 2\n    if n==168:\n        return 2\n    if n==169:\n        return 2\n    if n==170:\n        return 2\n    if n==171:\n        return 2\n    if n==172:\n        return 2\n    if n==173:\n        return 2\n    if n==174:\n        return 2\n    if n==175:\n        return 2\n    if n==176:\n        return 2\n    if n==177:\n        return 2\n    if n==178:\n        return 2\n    if n==179:\n        retur"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        sum = sum + binomial_coeff(n,i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 2)\n        return 2\n    else: \n        Sum = (2 * even_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 1)\n        return 2\n    else: \n        Sum = (2 * odd_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef even_binomial_Coeff_Sum_Prime( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 2)\n        return 2\n    else: \n        Sum = (2 * even_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef odd_binomial_Coeff_Sum_Prime( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 1)\n        return 2\n    else: \n        Sum = (2 * odd_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef even_binomial_Coeff_Sum_Prime_Square( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 2)\n        return 2\n    else: \n        Sum = (2 * even_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef odd_binomial_Coeff_Sum_Prime_Square( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 1)\n        return 2\n    else: \n        Sum = (2 * odd_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef even_binomial_Coeff_Sum_Square( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 2)\n        return 2\n    else: \n        Sum = (2 * even_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef odd_binomial_Coeff_Sum_Square( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 1)\n        return 2\n    else: \n        Sum = (2 * odd_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef even_binomial_Coeff_Sum_Comp( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 2)\n        return 2\n    else: \n        Sum = (2 * even_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef odd_binomial_Coeff_Sum_Comp( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 1)\n        return 2\n    else: \n        Sum = (2 * odd_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef even_binomial_Coeff_Sum_Comp_Square( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 2)\n        return 2\n    else: \n        Sum = (2 * even_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef odd_binomial_Coeff_Sum_Comp_Square( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 1)\n        return 2\n    else: \n        Sum = (2 * odd_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef even_binomial_Coeff_Sum_Comp_Square_Square( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print(1)\n        return 1\n    elif (n == 2): \n        print(1, 2)\n        return 2\n    else: \n        Sum = (2 * even_binomial_Coeff_Sum( n - 2)) + (n - 1)\n        return Sum\n    \ndef odd_binomial_Coeff_Sum_Comp_Square_Square( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if (n == 0): \n        print(0)\n        return 0\n    elif (n == 1): \n        print"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    c = 0\n    for i in range(n+1):\n        if i%2==0:\n            c+=math.factorial(n-i)/(math.factorial(i)*math.factorial(n-i))\n    return c\n    \nprint even_binomial_Coeff_Sum(5)\nprint even_binomial_Coeff_Sum(10)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial = []\n    a = 0\n    b = 1\n    c = 2\n    count = 0\n    for i in range(0,n):\n        binomial.append(a)\n        a = b\n        b = c\n        c += 2\n    for i in range(0,n):\n        if i%2 == 0:\n            count += binomial[i]\n    return count\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n % 2 == 0):\n        return 0\n    else:\n        return (-1) * (n * (n-1)) / 2\n    \n    \n    \ndef even_binomial_Coeff_List( n): \n    '''\n    Write a python function that takes in a positive integer n and creates a list of all the even index binomial coefficients.\n    '''\n    b = []\n    for i in range(0,n):\n        b.append(n*(n-1)*(2*n-1)/6)\n        n -= 1\n    return b\n    \n    \ndef even_binomial_Coeff_Series( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    n = int(n)\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_2( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_3( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_4( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_5( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_6( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_7( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_8( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_9( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_10( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_11( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_12( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_13( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_14( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_15( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_16( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_17( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_18( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in range(0,n):\n        a = a + b\n        b = a + b\n        n -= 1\n    return a\n    \n    \ndef even_binomial_Coeff_Series_19( n): \n    '''\n    Write a python function that takes in a positive integer n and returns the series sum of even index binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    for i in rang"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #INPUT: n\n    #OUTPUT: sum of even index binomial coefficients\n    # CONDITION: n must be a positive integer\n    # EXAMPLE: n = 10\n    # OUTPUT: 11\n    # CONDITION: n = 12\n    # OUTPUT: 48\n    # CONDITION: n = 5\n    # OUTPUT: 0\n    if n<=0:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1:\n        return 1\n    else:\n        sum_even_binomial_coeff = 1\n        if n%2 == 0:\n            for i in range(2, n+1):\n                sum_even_binomial_coeff = sum_even_binomial_coeff + 2*(i-1)/i\n            return int(sum_even_binomial_coeff)\n        else:\n            return \"sum of even index binomial coefficients is not defined.\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = math.pi\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi*r*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265358979324\n    return (pi*r**2*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol=pi*r*r*h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi, pow\n    return round(4/3*pi*pow(r,3)*h,3)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1.0/3) * (math.pi * r**2 * h)\n    return volume\n    \nprint(volume_cylinder(3,4))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14*(r**2)*h\n    return v\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    final_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            final_dict[key] = value\n    return final_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    return dict.keys()[dict.values() >= n]\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_lower = {}\n    for key in dict:\n        if dict[key] >= n:\n            dict_lower[key] = dict[key]\n    return dict_lower\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict\n    \nprint(dict_filter({1:2,2:3,3:5},3))"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    res = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            res += 1\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return sum(x < y for x, y in zip(test_tup[::-1], test_tup))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # first element\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] <= test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] < test_tup[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n=0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            n += 1\n    print(\"Count of elements less than the first element in the tuple = {}\".format(n))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == 1:\n            if i > 0:\n                print(test_tup[i-1])\n            return i\n    \ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == len(test_tup)-1:\n            if i < len(test_tup)-1:\n                print(test_tup[i+1])\n            return i\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count=0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]>test_tup[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    x = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[x]:\n            x = i\n    return (x)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    i = 0\n    for i in range(0, len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            break\n    return i\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n - 1\n    return(n * (n + 1)) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nth_decagonal = 1\n    while(nth_decagonal <= n):\n        nth_decagonal = nth_decagonal * 10\n    return nth_decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n*2 - 1\n    if n == 0:\n        return 1\n    return n * (n-1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the counter\n    i = 1\n    # Initialize the result\n    result = 0\n    # Loop through n to get the result\n    while i <= n:\n        result += i\n        i += 1\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # n = 1 => 13\n    # n = 2 => 1211\n    # n = 3 => 11131\n    # n = 4 => 112222\n    # n = 5 => 112233\n    # n = 6 => 1122334\n    # n = 7 => 112233536\n    # n = 8 => 11223354516\n    # n = 9 => 1122335451617\n    # n = 10 => 112233545161718\n    # n = 11 => 11223354516171819\n    # n = 12 => 1122335451617181918\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = 1\n    while x <= n:\n        x += 1\n        n -= 1\n    return n * (1 + (1 / n))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    res = []\n    num = 1\n    while(len(res) < n):\n        res.append(num)\n        num = res[-1] + sum(res[-1::-2])\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num *= i * (i + 1) / 2\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*(n+1)/2\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    n = dlist.count(item)\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = 0\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return found, index\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return found, index\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if item == dlist[index]:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n    return pos\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return found, i\n    return found, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(test_list)\n    test_list.sort()\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            return False\n    return True\n    \nprint(all_unique([1, 2, 1, 3]))\nprint(all_unique([1, 1, 1, 1]))\nprint(all_unique([1, 2, 3, 4]))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = set(test_list)\n    if len(test_list) == len(test_list):\n        print(\"It is a unique list\")\n    else:\n        print(\"It is not a unique list\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print('The list is: ',test_list)\n    print('The list contains unique elements: ',all(elem == test_list[0] for elem in test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==len(set(test_list)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # another solution\n    # my solution\n    s = set(test_list)\n    if len(s) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # your code here\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\nprint(all_unique([1,2,3,2,4,6,3,2]))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Code here\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        print(\"All the elements in the list are unique\")\n    else:\n        print(\"All the elements in the list are not unique\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set()\n    for i in test_list:\n        test_set.add(i)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.extend([i for i in range(len(nums1),len(nums2))])\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(len(nums1)):\n        l1.append(nums1[i]-nums2[i])\n    for j in range(len(nums2)):\n        l2.append(nums2[j]-nums1[j])\n    return l1+l2\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_list = []\n    nums2_list = []\n    for i in nums1:\n        nums1_list.append(i)\n    for i in nums2:\n        nums2_list.append(i)\n    return nums1_list - nums2_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = nums1.copy()\n    nums2 = nums2.copy()\n    \n    nums1_copy = nums1.copy()\n    nums2_copy = nums2.copy()\n    \n    if len(nums1) <= len(nums2):\n        for i in range(0,len(nums1)):\n            nums2[i] = nums2[i]-nums1[i]\n    else:\n        for i in range(0,len(nums2)):\n            nums1[i] = nums1[i]-nums2[i]\n    return nums1_copy,nums2_copy\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]-nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    i = 0\n    for x in nums1:\n        sub_list.append(x - nums2[i])\n        i += 1\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    result = list(range(len(nums2)))\n    for i in range(len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)==0 or len(nums2)==0:\n        return nums1\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]-nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_copy = nums1.copy()\n    nums2_copy = nums2.copy()\n    for i in range(len(nums1)):\n        nums1_copy.remove(nums1[i])\n        for j in range(len(nums2)):\n            nums2_copy.remove(nums2[j])\n            if (nums1[i] + nums2[j]) == 0:\n                return nums1_copy + nums2_copy\n    return []\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    \n    \n    for i in range(10):\n        if count > i and count <= i:\n            print(i, end = \" \")\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n:\n        n, digit = n // 10, n % 10\n        count += min(digit, n)\n    return count <= n\n    \n    \ndef to_base_2(n, base=2):\n    '''\n    Write a python function takes in an integer and converts it to its base 2 representation.\n    '''\n    return bin(n)[2:]\n    \n    \ndef first_index(n):\n    '''\n    Write a python function returns the first index of the duplicate value in an array.\n    '''\n    seen = set()\n    for i, x in enumerate(n):\n        if x in seen:\n            return i\n        seen.add(x)\n    return -1\n    \n    \ndef is_prime(n):\n    '''\n    Write a python function checks whether the number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef next_prime(n):\n    '''\n    Write a python function returns the next prime number after the given number.\n    '''\n    while not is_prime(n):\n        n += 1\n    return n\n    \n    \ndef sum_of_squares(n):\n    '''\n    Write a python function returns the sum of the squares of the digits of the given integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10**2\n        n //= 10\n    return s\n    \n    \ndef factorial(n):\n    '''\n    Write a python function returns the factorial of the given integer.\n    '''\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n    \n    \ndef recursive_factorial(n):\n    '''\n    Write a python function returns the factorial of the given integer using recursion.\n    '''\n    if n == 0:\n        return 1\n    return n * recursive_factorial(n-1)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function returns the nth fibonacci number using recursion.\n    '''\n    if n == 0 or n == 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef fibonacci_without_recursion(n):\n    '''\n    Write a python function returns the nth fibonacci number using iteration.\n    '''\n    if n == 0 or n == 1:\n        return n\n    arr = [0, 1]\n    for i in range(2, n+1):\n        arr.append(arr[-1] + arr[-2])\n    return arr[-1]\n    \n    \ndef get_factorial(n):\n    '''\n    Write a python function returns the factorial of the given integer.\n    '''\n    if n < 0:\n        raise ValueError('Factorial is only defined for positive integers')\n    if n == 0:\n        return 1\n    return n * get_factorial(n-1)\n    \n    \ndef get_factorial_without_recursion(n):\n    '''\n    Write a python function returns the factorial of the given integer.\n    '''\n    if n < 0:\n        raise ValueError('Factorial is only defined for positive integers')\n    if n == 0:\n        return 1\n    fact = 1\n    while n > 1:\n        fact *= n\n        n -= 1\n    return fact\n    \n    \ndef get_digit(n, d):\n    '''\n    Write a python function returns the value of the digit of an integer.\n    '''\n    return (n // (10 ** d)) % 10\n    \n    \ndef get_largest_prime_factor(n):\n    '''\n    Write a python function returns the largest prime factor of the given integer.\n    '''\n    if n == 1:\n        return -1\n    if n < 0:\n        raise ValueError('Largest prime factor can only be found for positive integers')\n    while n % 2 == 0:\n        n /= 2\n    if n == 1:\n        return -1\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n        i += 2\n    if n > 2:\n        i += 1\n    return int(i)\n    \n    \ndef is_prime_via_primality_test(n):\n    '''\n    Write a python function returns whether the given integer is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef get_nth_prime(n):\n    '''\n    Write a python function returns the nth prime number.\n    '''\n    if n < 0:\n        raise ValueError('Nth prime can only be found for positive integers')\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    if n == 3:\n        return 7\n    if n == 4:\n        return 11\n    if n == 5:\n        return 13\n    if n == 6:\n        return 17\n    if n == 7:\n        return 19\n    if n == 8:\n        return 23\n    if n == 9:\n        return 29\n    if n == 10:\n        return 31\n    prime = 11\n    while True:\n        if n == prime:\n            return prime\n        if n < prime:\n            return prime\n        prime += 1\n    \n    \ndef is_prime_via_sieve_of_eratosthenes(n):\n    '''\n    Write a python function returns whether the given integer is prime or not.\n    '''\n    if n < 2:\n        return False\n    prime_list = [True] * n\n    prime_list[0] = prime_list[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if prime_list[i]:\n            prime_list[i*i::i] = [False] * len(prime_list[i*i::i])\n    return prime_list[-1]\n    \n    \ndef partition(n):\n    '''\n    Write a python function returns the partition of the given integer.\n    '''\n    if n == 0:\n        return 1, 0, 0\n    if n < 0:\n        raise ValueError('Partition can only be found for positive integers')\n    count = 0\n    p1, p2, p3 = 0, 0, 0\n    while n > 1:\n        count += 1\n        if n % 2 == 0:\n            n /= 2\n            p2 += 1\n        else:\n            n -= 1\n            p1 += 1\n    return count, p1, p2\n    \n    \ndef recur_factorial(n):\n    '''\n    Write a python function returns the factorial of the given integer.\n    '''\n    if n == 0:\n        return 1\n    return n * recur_factorial(n-1)\n    \n    \ndef is_perfect(n):\n    '''\n    Write a python function returns whether the given integer is perfect or not.\n    '''\n    return n == sum_of_squares(n)\n    \n    \ndef is_amicable(n):\n    '''\n    Write a python function returns whether the given integer is amicable or not.\n    '''\n    if n < 2:\n        raise ValueError('Perfect number is always amicable to 1.')\n    if n == 2:\n        return True\n    for i in range(2, int(n**0.5)):\n        if n % i == 0:\n            if n == i**2:\n                return False\n            return is_amicable(i) and is_amicable(n//i)\n    return False\n    \n    \ndef is_cyclic(n):\n    '''\n    Write a python function returns whether the given integer is cyclic or not.\n    '''\n    return n in [n - 1, n + 1]\n    \n    \ndef is_prime_via_sieve_of"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count_list = []\n    for i in str(n):\n        count_list.append(str(i))\n        count_list = list(map(int,count_list))\n        count_list = list(set(count_list))\n        count_list = list(map(int,count_list))\n    return True if len(count_list) <= 1 else False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    i = 0\n    while (n > 0): \n        i += 1\n        n = n // 10\n    return i <= 1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if isinstance(n, int) == True:\n        if n>0:\n            lst = list(str(n))\n            count = 0\n            for i in lst:\n                count += 1\n                if int(i) > int(i):\n                    return False\n                elif int(i) == int(i):\n                    return False\n            if count > 1:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = n\n    digits = list(str(num))\n    d = {}\n    for i in digits:\n        d[i] = digits.count(i)\n    for i in digits:\n        if d[i] <= i:\n            return True\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n>0:\n        count = count + 1\n        n = n//10\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    counts = {}\n    for i in str(n):\n        if i not in counts:\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    if max(counts.values()) <= max(counts.values()) - 1:\n        return True\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # return True if each digit is less than or equal to the digit itself\n    # else return False\n    # number = n\n    # return all(num < num_1 for num, num_1 in zip(str(number), str(number)))\n    # using map, filter and lambda\n    return (n // 1 == n % 10) or (n // 10 == n % 10) or (n // 100 == n % 10) or (n // 1000 == n % 10)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) == int and n >= 0: \n        count = 0\n        while n!= 0:\n            count += 1\n            n = n // 10\n        if count >= 1 and count <= 9:\n            return True\n        else: \n            return False\n    else: \n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        for item in list:\n            if item!= element:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    list = list\n    if element == list[0]:\n        return 1\n    elif len(list) == 1:\n        return 0\n    else:\n        return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list==element\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return False + check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"ab*b\", text) and re.search(r\"ab*b\", text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'(a)(b)*b',text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a = re.search(r'a.{2,3}b', text)\n    if a!= None:\n        print(\"Match found: \", a.group())\n    else:\n        print(\"Match not found\")\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search(r\"ab\", text)\n    if result:\n        return True\n    return False\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains a 'b' followed by two or three 'a' characters.\n    '''\n    result = re.search(r\"baa\", text)\n    if result:\n        return True\n    return False\ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains a 'a' followed by two or three 'b' characters.\n    '''\n    result = re.search(r\"bab\", text)\n    if result:\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text)>5:\n        if re.search(r\"ab\\b\",text) is not None:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ba[ab]b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab*b')\n    result = pattern.search(text)\n    return result.group()\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'a.*b', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.findall(r\"a(b)*\",text)\n    return text\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_so_far = 0\n    max_sum_to_date = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if not n:\n        return \n    max_sum = -sys.maxsize\n    sum_so_far = 0\n    sum_so_far_count = 0\n    for i in range(n):\n        sum_so_far += a[i]\n        if sum_so_far >= k:\n            if sum_so_far - k <= max_sum:\n                max_sum = sum_so_far - k\n                sum_so_far_count = 1\n            elif sum_so_far - k > max_sum:\n                sum_so_far_count = 1\n        if sum_so_far >= k and sum_so_far_count > 0:\n            if sum_so_far - k > max_sum:\n                max_sum = sum_so_far - k\n                sum_so_far_count = 1\n            elif sum_so_far - k == max_sum:\n                sum_so_far_count += 1\n    if sum_so_far_count > 0:\n        return max_sum\n    else:\n        return sum_so_far\n    \na = [-2, -1, -1, -2, 1]\nprint(max_sub_array_sum_repeated(a, len(a), 3))"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(0, n):\n        sum = 0\n        for j in range(i, i+k):\n            sum += a[j]\n            max_sum = max(max_sum, sum)\n            sum = max(0, sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize start and end indices \n    start = 0\n    end = 0\n    sum = 0\n    max_sum = -sys.maxsize - 1\n    # Find the max sum \n    while(end <= n): \n        sum = sum + a[end] \n        if sum > max_sum: \n            max_sum = sum \n        if sum < 0: \n            sum = 0\n        end = end + 1\n    start = 0\n    sum = 0\n    while(start <= n): \n        end = start + k \n        while(end <= n): \n            sum = sum + a[end] \n            if sum > max_sum: \n                max_sum = sum \n            if sum < 0: \n                sum = 0\n            end = end + 1\n        start = start + k \n        sum = 0\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if not a:\n        return 0\n    \n    dp = [-sys.maxsize]*n\n    \n    dp[0] = a[0]\n    \n    for i in range(1, n):\n        dp[i] = max(a[i], dp[i-1] + a[i])\n    \n    max_sum = -sys.maxsize\n    curr_sum = 0\n    \n    for i in range(n-k+1):\n        curr_sum = max(dp[i], dp[i+k-1])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum\n    \nif __name__ == '__main__':\n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\n    n = len(a)\n    k = 3\n    print(max_sub_array_sum_repeated(a, n, k)"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1 and k == 0: \n        return 0\n    max_sum = -sys.maxsize\n    for i in range(n - k + 1):\n        max_sum = max(max_sum, sum(a[i : i + k]))\n    return max_sum\n    \ndef max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1 and k == 0: \n        return 0\n    if n == 1 and k == 1: \n        return a[0]\n    # N = a\n    # K = k\n    # S = sum(N)\n    # print(\"N = \", N)\n    # print(\"K = \", K)\n    # print(\"S = \", S)\n    # print(\"[N[i] for i in range(K)]:\", [N[i] for i in range(K)])\n    # print(\"[N[i] * K for i in range(K)]:\", [N[i] * K for i in range(K)])\n    # print(\"[S - N[i] for i in range(K)]:\", [S - N[i] for i in range(K)])\n    \n    # start_sub_array = sum(a[0:k])\n    # end_sub_array = sum(a[-k:])\n    \n    # print(\"start_sub_array = \", start_sub_array)\n    # print(\"end_sub_array = \", end_sub_array)\n    \n    # if K == 1:\n    #     return a[0]\n    # if K == 2:\n    #     return max(a[0], a[1])\n    \n    # if start_sub_array > end_sub_array:\n    #     print(\"start_sub_array > end_sub_array\")\n    #     return start_sub_array\n    # else:\n    #     print(\"end_sub_array > start_sub_array\")\n    #     return end_sub_array\n    \n    # if start_sub_array == end_sub_array:\n    #     print(\"start_sub_array == end_sub_array\")\n    #     return a[0]\n    \n    # if start_sub_array < 0:\n    #     print(\"start_sub_array < 0\")\n    #     return -1\n    # if end_sub_array < 0:\n    #     print(\"end_sub_array < 0\")\n    #     return -1\n    \n    # # print(\"a[0]:\", a[0])\n    # # print(\"a[1]:\", a[1])\n    # # print(\"sum(a):\", sum(a))\n    # # print(\"[N[i] * K for i in range(K)]:\", [N[i] * K for i in range(K)])\n    # # print(\"[S - N[i] for i in range(K)]:\", [S - N[i] for i in range(K)])\n    # # print(\"[S - N[i] * K for i in range(K)]:\", [S - N[i] * K for i in range(K)])\n    \n    # start_sub_array = sum(a[0:k])\n    # end_sub_array = sum(a[-k:])\n    \n    # print(\"start_sub_array = \", start_sub_array)\n    # print(\"end_sub_array = \", end_sub_array)\n    \n    # if K == 1:\n    #     return a[0]\n    \n    # if start_sub_array > end_sub_array:\n    #     print(\"start_sub_array > end_sub_array\")\n    #     return start_sub_array\n    # else:\n    #     print(\"end_sub_array > start_sub_array\")\n    #     return end_sub_array\n    \n    # if start_sub_array < 0:\n    #     print(\"start_sub_array < 0\")\n    #     return -1\n    # if end_sub_array < 0:\n    #     print(\"end_sub_array < 0\")\n    #     return -1\n    \n    # if start_sub_array == end_sub_array:\n    #     print(\"start_sub_array == end_sub_array\")\n    #     return a[0]\n    \n    # if start_sub_array < 0:\n    #     print(\"start_sub_array < 0\")\n    #     return -1\n    # if end_sub_array < 0:\n    #     print(\"end_sub_array < 0\")\n    #     return -1\n    \n    # # print(\"a[0]:\", a[0])\n    # # print(\"a[1]:\", a[1])\n    # # print(\"sum(a):\", sum(a))\n    # # print(\"[N[i] * K for i in range(K)]:\", [N[i] * K for i in range(K)])\n    # # print(\"[S - N[i] for i in range(K)]:\", [S - N[i] for i in range(K)])\n    # # print(\"[S - N[i] * K for i in range(K)]:\", [S - N[i] * K for i in range(K)])\n    \n    # start_sub_array = sum(a[0:k])\n    # end_sub_array = sum(a[-k:])\n    \n    # print(\"start_sub_array = \", start_sub_array)\n    # print(\"end_sub_array = \", end_sub_array)\n    \n    # if K == 1:\n    #     return a[0]\n    \n    # if start_sub_array > end_sub_array:\n    #     print(\"start_sub_array > end_sub_array\")\n    #     return start_sub_array\n    # else:\n    #     print(\"end_sub_array > start_sub_array\")\n    #     return end_sub_array\n    \n    # if start_sub_array < 0:\n    #     print(\"start_sub_array < 0\")\n    #     return -1\n    # if end_sub_array < 0:\n    #     print(\"end_sub_array < 0\")\n    #     return -1\n    \n    # if start_sub_array == end_sub_array:\n    #     print(\"start_sub_array == end_sub_array\")\n    #     return a[0]\n    \n    # if start_sub_array < 0:\n    #     print(\"start_sub_array < 0\")\n    #     return -1\n    # if end_sub_array < 0:\n    #     print(\"end_sub_array < 0\")\n    #     return -1\n    \n    # # print(\"a[0]:\", a[0])\n    # # print(\"a[1]:\", a[1])\n    # # print(\"sum(a):\", sum(a))\n    # # print(\"[N[i] * K for i in range(K)]:\", [N[i] * K for i in range(K)])\n    # # print(\"[S - N[i] for i in range(K)]:\", [S - N[i] for i in range(K)])\n    # # print(\"[S - N[i] * K for i in range(K)]:\", [S - N[i] * K for i in range(K)])\n    \n    # start_sub_array = sum(a[0:k])\n    # end_sub_array = sum(a[-k:])\n    \n    # print(\"start_sub_array = \", start_sub_array)\n    # print(\"end_sub_array = \", end_sub_array)\n    \n    # if K == 1:\n    #     return a[0]\n    \n    # if start_sub_array > end_sub_array:\n    #     print(\"start_sub_array > end_sub_array\")"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = -sys.maxsize - 1\n    max_sum_arr = None\n    for i in range(n):\n        temp_sum = 0\n        for j in range(i, n, k):\n            temp_sum += a[j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_sum_arr = a[i:j + 1]\n    return max_sum_arr\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            continue\n        else:\n            a[i] = a[i - 1] + k * a[i]\n    return max(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sub_array_sum = 0\n    current_sum = 0\n    current_index = 0\n    for index in range(n):\n        current_sum = a[index]\n        current_index += 1\n        while (current_index <= index) and (current_sum >= k):\n            if current_sum > max_sub_array_sum:\n                max_sub_array_sum = current_sum\n            current_sum -= a[current_index - 1]\n            current_index += 1\n    return max_sub_array_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return a[0]\n    elif n == 2:\n        return max(a[0],a[1])\n    else:\n        curr_sum = 0\n        max_sum = -float('inf')\n        for i in range(n):\n            curr_sum += a[i]\n            if curr_sum == k:\n                max_sum = max(max_sum,curr_sum)\n            elif curr_sum - k > 0:\n                max_sum = max(max_sum,curr_sum - k)\n        return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(x*x for x in range(1,n+1) if x % 2 == 0)\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    x=0\n    for i in range(1,n+1):\n        if(i%2==0):\n            x=x+i**2\n    return x    \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # code goes here\n    result=0\n    for i in range(n):\n        if i%2==0:\n            result=result+i**2\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n=int(n)\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum=sum+i**2\n    print(sum)\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    total = 0\n    while i < n:\n        total = total + (i*i)\n        i = i+1\n    return total\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n_sqr = 0\n    for i in range(n):\n        if i % 2 == 0:\n            n_sqr += i**2\n    return n_sqr\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        sum = sum + i**2\n        i += 1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(n):\n        sum += i*i\n        \n    return sum\n    \ndef square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum = 0\n    \n    for i in range(n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    num_sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            num_sum += i**2\n    return num_sum\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1 = list1\n    max = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max:\n            max = len(list1[i])\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #brute force\n    max_len = -1\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_l = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_l:\n            max_l = len(list1[i])\n    return max_l\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum = list1[0][0]\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(maximum):\n            maximum = list1[i]\n        elif len(list1[i]) == len(maximum):\n            if max(list1[i]) > max(maximum):\n                maximum = list1[i]\n    return maximum\n    \nlist1 = [[1,2,3],\n        [4,5,6,7],\n        [8,9,10,11],\n        [12,13,14,15],\n        [16,17,18,19],\n        [20,21,22,23],\n        [24,25,26,27],\n        [28,29,30,31],\n        [32,33,34,35],\n        [36,37,38,39],\n        [40,41,42,43],\n        [44,45,46,47]]\nprint(max_length(list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lenght_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > lenght_list:\n            lenght_list.append(len(list1[i]))\n    return lenght_list\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i)>max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i==1:\n                dp[i][j] = 1\n                continue\n            if j==1:\n                dp[i][j] = 1\n                continue\n            if j==2:\n                dp[i][j] = (dp[i-1][j-1]+dp[i-1][j])%1000000007\n                continue\n            dp[i][j] = (dp[i-1][j]+dp[i-1][j-2])%1000000007\n    print(dp)\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k + 1)] for _ in range(n)]\n    for i in range(n):\n        dp[i][1] = 1\n    for i in range(1, k + 1):\n        dp[0][i] = 1\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[n - 1][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (n+1)\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 and j == 1:\n                dp[i] = 1\n            elif i == 1 and j!= 1:\n                dp[i] = j\n            elif i!= 1 and j == 1:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i-1] + dp[i-2]\n                \n    return dp[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base Cases \n    if n == 0: \n        return 0\n    if k == 0: \n        return 1\n    # Allocate space for storing the result \n    res = [[0 for i in range(k + 1)] for j in range(n + 1)] \n    # Initialize result \n    res[0][0] = 0\n    res[0][1] = 1\n    # Fill the rest of the table \n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            # If ith post is the first post and jth color is same as \n            # color of the previous post\n            if i == 1 and j == j_prev: \n                res[i][j] = 1\n            # If ith post is not the first post and jth color is same as \n            # color of the previous post\n            elif j == j_prev: \n                res[i][j] = res[i - 1][j] + res[i - 1][j - 1] \n            # If ith post is not the first post and jth color is not same \n            # as color of the previous post\n            else: \n                res[i][j] = res[i - 1][j] + res[i - 1][j - 1] + \\\n                            res[i - 1][j - 2]\n            # Update j_prev to represent j \n            j_prev = j\n    # Return value from bottom up manner \n    return res[n][k] \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # If n is 0, then no way.\n    if n == 0:\n        return 0\n    \n    # If n is 1, then only one way.\n    if n == 1:\n        return 1\n    \n    # If k is 0, then no way.\n    if k == 0:\n        return 0\n    \n    # If n is 1, then only one way.\n    if n == 1:\n        return 1\n    \n    # 2 ways.\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n    \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    Note that in the given example, the first and the last post can have the same color and they can thus be painted the same color.\n    '''\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # we can solve this problem by using the recursion to solve it with the help of adjacency list\n    # To solve this problem, we first generate a adjacency list for the input string.\n    # Then we will solve the problem using recursion\n    \n    # The recursion for the problem can be written as given below\n    \n    def solve(n,k,l,c):\n        if k == 2:\n            if c == 0:\n                return l\n            else:\n                return 0\n        \n        if k < 2:\n            if c == 0:\n                return 0\n            else:\n                return l\n        \n        if c == 0:\n            return 0\n        \n        # this is for the no of ways to paint the fence with 2 posts having same color \n        if l >= k:\n            return solve(n,k,l,0)\n        \n        if c >= k:\n            return 0\n        \n        # recursion for the problem is given below\n        \n        return solve(n,k,l,c+1) + solve(n,k,l+1,c)\n    \n    # this is for the recursion call\n    # we will first generate a list in which each element is the adjacency list for the string (n,k,l,c)\n    # this adjacency list will help us generate the solution\n    \n    def adj_list(n,k,l,c):\n        a = []\n        for i in range(k):\n            lst = []\n            for j in range(k):\n                lst.append(0)\n            a.append(lst)\n        return a\n    \n    # now we will solve the problem using adjacency list\n    # in this problem, we will have to generate the adjacency list for the string (n,k,l,c)\n    # then we will first check if there is a cycle or not\n    \n    def is_cycle(n,k,l,c):\n        global adj_list\n        a = adj_list(n,k,l,c)\n        # this if is for checking if the adjacency list is a cycle\n        if(len(a)!= k):\n            return False\n        \n        # now this is for checking if there is cycle or not in the adjacency list\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == 1:\n                    if adj_list[i][j] == 0:\n                        return False\n                    elif adj_list[i][j]!= adj_list[j][i]:\n                        return False\n        \n        return True\n    \n    # we will first generate the adjacency list\n    # this adjacency list will help us generate the solution\n    \n    def adj_list1(n,k,l,c):\n        global adj_list\n        a = adj_list(n,k,l,c)\n        return a\n    \n    # now we will solve the problem using adjacency list\n    # in this problem, we will have to generate the adjacency list for the string (n,k,l,c)\n    # then we will check if there is a cycle or not\n    \n    def adj_list2(n,k,l,c):\n        global adj_list\n        a = adj_list1(n,k,l,c)\n        \n        # this if is for checking if the adjacency list is a cycle\n        if(len(a)!= k):\n            return False\n        \n        # now this is for checking if there is cycle or not in the adjacency list\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == 1:\n                    if adj_list[i][j] == 0:\n                        return False\n                    elif adj_list[i][j]!= adj_list[j][i]:\n                        return False\n        \n        return True\n    \n    # now we will solve the problem using recursion\n    \n    def adj_list3(n,k,l,c):\n        global adj_list\n        a = adj_list1(n,k,l,c)\n        \n        # this if is for checking if the adjacency list is a cycle\n        if(len(a)!= k):\n            return False\n        \n        # now this is for checking if there is cycle or not in the adjacency list\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == 1:\n                    if adj_list[i][j] == 0:\n                        return False\n                    elif adj_list[i][j]!= adj_list[j][i]:\n                        return False\n        \n        return True\n    \n    # now we will solve the problem using recursion\n    \n    def adj_list4(n,k,l,c):\n        global adj_list\n        a = adj_list1(n,k,l,c)\n        \n        # this if is for checking if the adjacency list is a cycle\n        if(len(a)!= k):\n            return False\n        \n        # now this is for checking if there is cycle or not in the adjacency list\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == 1:\n                    if adj_list[i][j] == 0:\n                        return False\n                    elif adj_list[i][j]!= adj_list[j][i]:\n                        return False\n        \n        return True\n    \n    # now we will solve the problem using recursion\n    \n    def adj_list5(n,k,l,c):\n        global adj_list\n        a = adj_list1(n,k,l,c)\n        \n        # this if is for checking if the adjacency list is a cycle\n        if(len(a)!= k):\n            return False\n        \n        # now this is for checking if there is cycle or not in the adjacency list\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == 1:\n                    if adj_list[i][j] == 0:\n                        return False\n                    elif adj_list[i][j]!= adj_list[j][i]:\n                        return False\n        \n        return True\n    \n    # now we will solve the problem using recursion\n    \n    def adj_list6(n,k,l,c):\n        global adj_list\n        a = adj_list1(n,k,l,c)\n        \n        # this if is for checking if the adjacency list is a cycle\n        if(len(a)!= k):\n            return False\n        \n        # now this is for checking if there is cycle or not in the adjacency list\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == 1:\n                    if adj_list[i][j] == 0:\n                        return False\n                    elif adj_list[i][j]!= adj_list[j][i]:\n                        return False\n        \n        return True\n    \n    # now we will solve the problem using recursion\n    \n    def adj_list7(n,k,l,c):\n        global adj_list\n        a = adj_list1(n,k,l,c)\n        \n        # this if is for checking if the adjacency list is a cycle\n        if(len(a)!= k):\n            return False\n        \n        # now this is for checking if there is cycle or not in the adjacency list\n        for i in range(k):\n            for j in range(k):\n                if a[i][j] == 1:\n                    if adj_list[i][j] == 0:\n                        return False\n                    elif adj_list[i][j]!= adj_list[j][i]:\n                        return False\n        \n        return True\n    \n    # now we will solve the problem using recursion\n    \n    def adj_list8(n,k,l,c):\n        global adj_list\n        a = adj_list1(n,k,l,c)\n        \n        # this if is for checking if the adjacency list is a cycle\n        if(len(a)!= k):\n            return False\n        \n        # now this is for checking if there is cycle or not in the adjacency list\n        for i in range("
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return helper(n,k)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp_arr = [[0]*k for _ in range(n)]\n    dp_arr[0][0] = 1\n    dp_arr[0][1] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n<0 or k<0:\n        return 0\n    if n==0 or k==0:\n        return 1\n    \n    arr = [[0 for i in range(k+1)] for j in range(n+1)] \n    \n    for i in range(n+1): \n        for j in range(k+1): \n            if i==0 or j==0: \n                arr[i][j]=0\n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            if j<=i: \n                arr[i][j] = arr[i-1][j-1] + arr[i-1][j]\n            else: \n                arr[i][j] = arr[i-1][j] \n    return arr[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    count = 0\n    visited = {}\n    \n    def helper(n, k, index, color):\n        if index == n:\n            if color in visited:\n                return visited[color]\n            else:\n                return 1\n        \n        if color in visited and visited[color] > 0:\n            return visited[color]\n            \n        ways = helper(n, k, index+1, color)\n        if color == k:\n            ways += helper(n, k, index+1, k)\n        else:\n            ways += helper(n, k, index+1, k) + helper(n, k, index+1, color)\n            \n        visited[color] = ways\n        \n        return ways\n        \n    return helper(n, k, 0, 0)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n // m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q=n//m\n    print(q)\n    return q\ndef sum(n,m):  \n    '''\n    Write a python function to find sum of n and m numbers.\n    '''\n    s=n+m\n    print(s)\n    return s\ndef sub(n,m):  \n    '''\n    Write a python function to find difference of n and m numbers.\n    '''\n    s=n-m\n    print(s)\n    return s\ndef mul(n,m):  \n    '''\n    Write a python function to find product of n and m numbers.\n    '''\n    s=n*m\n    print(s)\n    return s\ndef div(n,m):  \n    '''\n    Write a python function to find quotient of n and m numbers.\n    '''\n    s=n//m\n    print(s)\n    return s\ndef mod(n,m):  \n    '''\n    Write a python function to find mod of n and m numbers.\n    '''\n    s=n%m\n    print(s)\n    return s\ndef log(n,m):  \n    '''\n    Write a python function to find log of n and m numbers.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef log2(n,m):  \n    '''\n    Write a python function to find log of n and m numbers.\n    '''\n    s=math.log2(n,m)\n    print(s)\n    return s\ndef log10(n,m):  \n    '''\n    Write a python function to find log of n and m numbers.\n    '''\n    s=math.log10(n,m)\n    print(s)\n    return s\ndef ln(n,m):  \n    '''\n    Write a python function to find ln of n and m numbers.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef exp(n,m):  \n    '''\n    Write a python function to find exp of n and m numbers.\n    '''\n    s=math.exp(n,m)\n    print(s)\n    return s\ndef loga(n,m):  \n    '''\n    Write a python function to find log of a number.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef logb(n,m):  \n    '''\n    Write a python function to find log of b number.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef logc(n,m):  \n    '''\n    Write a python function to find log of c number.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef logd(n,m):  \n    '''\n    Write a python function to find log of d number.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef loge(n,m):  \n    '''\n    Write a python function to find log of e number.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef logf(n,m):  \n    '''\n    Write a python function to find log of f number.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef logg(n,m):  \n    '''\n    Write a python function to find log of g number.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef logs(n,m):  \n    '''\n    Write a python function to find log of s number.\n    '''\n    s=math.log(n,m)\n    print(s)\n    return s\ndef pow(n,m):  \n    '''\n    Write a python function to find power of n and m numbers.\n    '''\n    s=math.pow(n,m)\n    print(s)\n    return s\ndef sq(n):  \n    '''\n    Write a python function to find square of n number.\n    '''\n    s=n*n\n    print(s)\n    return s\ndef sqrt(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef cbrt(n):  \n    '''\n    Write a python function to find cube root of n number.\n    '''\n    s=math.cbrt(n)\n    print(s)\n    return s\ndef snt(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef snti(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntr(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntri(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntrc(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntrbi(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntrbi2(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntrc2(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntri2(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntrc2(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntrc3(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntrc3(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntri3(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntri3(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntrc3(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\ndef sntri3(n):  \n    '''\n    Write a python function to find square root of n number.\n    '''\n    s=math.sqrt(n)\n    print(s)\n    return s\nde"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(n // m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n    \ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    if (n//m) == 0:\n        return quotient\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        n,m=m,n\n    q=n//m\n    rem=n%m\n    if rem==0:\n        return q\n    else:\n        return q+1\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if (n%i)==0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s=w**2+h**2\n    s=math.sqrt(s)\n    s=s*2\n    s=s/2\n    s=s-w\n    return s\nprint(otherside_rightangle(2,1))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"The third side is: \",2*math.sqrt(w**2+h**2))\n    return\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = w * h / 2\n    return (s * (s - w) * (s - h))**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(f\"The third side of a right angled triangle with base {w} and height {h} is {w+h}\")\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w <= 0 or h <= 0:\n        return \"Invalid inputs\"\n    else:\n        s = math.sqrt(w*w + h*h)\n        return s\n        \nprint(\"Right angled triangle side 1:\",otherside_rightangle(3,4))\nprint(\"Right angled triangle side 2:\",otherside_rightangle(7,6))\nprint(\"Right angled triangle side 3:\",otherside_rightangle(5,9))\nprint(\"Right angled triangle side 4:\",otherside_rightangle(7,8))\nprint(\"Right angled triangle side 5:\",otherside_rightangle(3,5))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2 - w*h)/(2*w)\n    \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = h * math.sqrt(3) / 4\n    b = h / 2\n    c = w / 2\n    return a,b,c\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    ans = (w**2 + h**2)/2\n    return ans\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for i in listval:\n        if isinstance(i,int) or isinstance(i,float):\n            if max_value == None:\n                max_value = i\n            elif i > max_value:\n                max_value = i\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for item in listval:\n        if max_value < item:\n            max_value = item\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val == None:\n            max_val = i\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = 0\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for x in listval:\n        if isinstance(x, int):\n            if max_val < x:\n                max_val = x\n    return max_val\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if listval[0] >= listval[1]:\n        return listval[0]\n    if listval[1] >= listval[0]:\n        return listval[1]\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if max < i:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    l = listval[:]\n    l.sort()\n    return l[-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum_div = sum_div + i\n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 0\n    else:\n        divisors = []\n        for i in range(1, number + 1):\n            if number % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            result += i\n    return result"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisor += 1\n        else:\n            divisor += 1\n    return divisor - 1\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return number + sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            result += i\n    return result\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    n = number\n    sum = 0\n    i = 0\n    while i <= n:\n        if n % i == 0:\n            sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 1\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion_count = 0\n    if len(arr) == 0:\n        return inversion_count\n    if len(arr) == 1:\n        return inversion_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    print(count)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inversion_count += 1\n    return inversion_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                count += 1\n                \n    return count\n    \nif __name__ == \"__main__\": \n    arr = [12, 11, 13, 5, 6, 7] \n    inv_count = get_Inv_Count(arr) \n    \n    print(\"Total number of inversions are\", inv_count) "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        if i == 0:\n            left = 0\n        else:\n            left = count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    def merge_sort(arr,l,r):\n        inv = 0\n        if l < r:\n            mid = (l+r)//2\n            inv += merge_sort(arr, l, mid)\n            inv += merge_sort(arr, mid+1, r)\n            inv += merge(arr, l, mid, r)\n        return inv\n    \n    def merge(arr,l,mid,r):\n        inv = 0\n        n1 = mid - l + 1\n        n2 = r - mid\n        L = [0] * n1\n        R = [0] * n2\n        for i in range(0, n1):\n            L[i] = arr[l + i]\n        for j in range(0, n2):\n            R[j] = arr[mid + 1 + j]\n        i = j = 0\n        k = l\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                inv += (n1 - i)\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    \n    return merge_sort(arr,0,len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def get_Inv_Count_Rec(arr, low, high): \n        \n        # If there is only one element left \n        if low >= high: \n            return 0\n      \n        # If there are more than 2 elements, \n        # then find the index of the middle element \n        # (median) and find the inversions for that \n        # subarray and count for that \n        # (median) subarray \n        mid = low + (high - low) // 2\n        left_sub = get_Inv_Count_Rec(arr, low, mid)\n        right_sub = get_Inv_Count_Rec(arr, mid+1, high)\n        count = left_sub + right_sub\n        if arr[mid] < arr[high]:\n            # arr[mid] <= arr[high]\n            count += high - mid - 1\n        return count\n  \n    return get_Inv_Count_Rec(arr, 0, len(arr) - 1) \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1: return 0\n    low = 0\n    high = len(arr)-1\n    mid = int((low+high)/2)\n    count = 0\n    while low <= high:\n        if mid < len(arr)-1 and arr[mid] > arr[mid+1]:\n            count += (mid-low+1)\n            high = mid-1\n        elif mid > 0 and arr[mid] < arr[mid-1]:\n            count += (high-mid)\n            low = mid+1\n        else:\n            low = mid+1\n            high = mid-1\n        mid = int((low+high)/2)\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if type(i) is list:\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return flatten_recur(list1)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for element in list1:\n        if type(element) == list:\n            new_list.extend(flatten_list(element))\n        else:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    else:\n        return flatten_list(list1[1]) + list1[0]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # traverse a given list and append each element of the list into a string\n    new_list = []\n    for x in list1:\n        if type(x) == list:\n            for y in flatten_list(x):\n                new_list.append(y)\n        else:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result = result + flatten_list(item)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in list1:\n        if isinstance(i,list):\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for n in stdata:\n        aggregate[n[1]] += n[0]\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # for every list inside tuple\n    for j in range(0, len(stdata)):\n        # for every value in tuple\n        for i in range(0, len(stdata[j])):\n            # if the value of i is greater than the max value of the list\n            if stdata[j][i] > stdata[j][max_index(stdata, i)]:\n                # update the value of the max value to be the i value\n                stdata[j][max_index(stdata, i)] = stdata[j][i]\n    # return the value of the max value in each tuple\n    return stdata\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # odering is important for sorting tuple\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_values = defaultdict(int)\n    max_count = defaultdict(int)\n    for k,v in stdata:\n        max_values[k] = max(max_values[k],v)\n        max_count[k] = max(max_count[k],1)\n    for k in max_values:\n        max_values[k] = max_values[k] / max_count[k]\n    return max_values\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    for st, num in stdata:\n        max_sum += num\n    return max_sum\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = []\n    result_max = 0\n    for i in stdata:\n        result.append(i)\n    result.sort(key=lambda x:x[0])\n    for i in result:\n        if result_max < i[1]:\n            result_max = i[1]\n    return result_max\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = sorted(stdata, key = lambda stdata:stdata[1])\n    maximum = stdata[0][1]\n    for i in range(1,len(stdata)):\n        if stdata[i][1]>maximum:\n            maximum = stdata[i][1]\n    return maximum\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #print(stdata)\n    maxagg=0\n    maxaggdict={}\n    for d in stdata:\n        #print(d)\n        if d[0] in maxaggdict:\n            maxaggdict[d[0]]=maxaggdict[d[0]]+d[1]\n        else:\n            maxaggdict[d[0]]=d[1]\n    for k in maxaggdict.keys():\n        if maxaggdict[k]>maxagg:\n            maxagg=maxaggdict[k]\n    return maxagg\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_total = float('-inf')\n    for k, v in stdata:\n        max_total = max(max_total, k + v)\n    return max_total\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def generate_binary(n):\n        '''\n        Generates all binary numbers of length 2n\n        '''\n        return [bin(i)[2:] for i in range(2**n)]\n    def count_bits(n):\n        '''\n        Counts number of bits in every binary sequence of length 2n\n        '''\n        binary = generate_binary(n)\n        cnt = [0]*(2**n)\n        for seq in binary:\n            cnt[int(seq,2)] += 1\n        return cnt\n    # start from the sum of last bit \n    # and check if all the bits are the same \n    # or all the bits are not the same \n    def is_same_bits(n):\n        '''\n        Checks if all the bits are the same or not \n        '''\n        binary = generate_binary(n)\n        prev = binary[0]\n        for i in range(1,len(binary)):\n            if prev!= binary[i]:\n                return False\n        return True\n    def binary_seq_count(n):\n        '''\n        Counts number of all binary sequences of length 2n\n        '''\n        if n == 0:\n            return 0\n        cnt = 0\n        if is_same_bits(n):\n            cnt += 1\n        for i in range(1,n+1):\n            if is_same_bits(n-i):\n                cnt += 1\n        return cnt\n    return binary_seq_count(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq(n-1) * 2) + (count_binary_seq(n-2))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    binary = []\n    for i in range(n):\n        binary.append(0)\n    print(binary)\n    \n    number_of_binary_seq = 0\n    for i in range(1<<n):\n        temp_binary = []\n        for j in range(n):\n            if(i&(1<<j)):\n                temp_binary.append(1)\n            else:\n                temp_binary.append(0)\n        if sum(temp_binary) == sum(binary):\n            number_of_binary_seq += 1\n    return number_of_binary_seq\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n <= 0:\n        return 0\n    # Base case\n    if n == 1:\n        return 2\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    m = 1 << n\n    count = 0\n    for i in range(0, m):\n        if (i & (i + 1)) == 0:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Create a dictionary to store the counts\n    count = {} \n    for i in range(n+1): \n        count[str(i)] = 0\n        count[str(n-i)] = 0\n    count['0'+'0'] = 1\n    count['1'+'0'] = 1\n    count['0'+'1'] = 1\n    count['1'+'1'] = 1\n    count['0'+'00'] = 1\n    count['1'+'00'] = 1\n    count['0'+'01'] = 1\n    count['1'+'01'] = 1\n    count['0'+'10'] = 1\n    count['1'+'10'] = 1\n    count['0'+'11'] = 1\n    count['1'+'11'] = 1\n    count['0'+'000'] = 1\n    count['1'+'000'] = 1\n    count['0'+'001'] = 1\n    count['1'+'001'] = 1\n    count['0'+'010'] = 1\n    count['1'+'010'] = 1\n    count['0'+'011'] = 1\n    count['1'+'011'] = 1\n    count['0'+'100'] = 1\n    count['1'+'100'] = 1\n    count['0'+'101'] = 1\n    count['1'+'101'] = 1\n    count['0'+'110'] = 1\n    count['1'+'110'] = 1\n    count['0'+'111'] = 1\n    count['1'+'111'] = 1\n    \n    # DFS using recursion\n    def count_binary_seq_rec(n, bit_str): \n        '''\n        Complexity: O(2^n)\n        '''\n        # base case\n        if n == 1:\n            return count[bit_str]\n        # recursive step\n        if bit_str[0] == '0':\n            bit_str = bit_str[1:]\n        elif bit_str[0] == '1':\n            bit_str = bit_str[1:]\n        \n        # calculate next bits\n        if bit_str == '':\n            bit_str = '0'\n        elif bit_str == '0':\n            bit_str = '1'\n        elif bit_str == '1':\n            bit_str = '0'\n        \n        # update the count\n        count[bit_str] = count[bit_str] + count_binary_seq_rec(n-1, bit_str)\n        return count[bit_str]\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    a = 0\n    while (1 << a) <= (2**n):\n        b = 0\n        while (1 << b) <= (2**n):\n            if (1 << a) + (1 << b) == 2**n:\n                count += 1\n            b += 1\n        a += 1\n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    i = 0\n    count = 0\n    while i <= n:\n        if bin(i).count('1') == bin(i+n-1).count('1'):\n            count += 1\n        i += 1\n    return count\n    \nprint(count_binary_seq(10)) #  8\nprint(count_binary_seq(8)) #  7\nprint(count_binary_seq(0)) #  0\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    \n    dp = [[0 for j in range(n)] for i in range(n)] \n    \n    for j in range(n): \n        dp[0][j] = 1\n    \n    for i in range(1, n): \n        for j in range(i, n): \n            dp[i][j] = (dp[i][j-1] + dp[i-1][j-1])%(10**9 + 7)\n    \n    return dp[-1][-1] \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n <= 1:\n        return 1\n    return count_binary_seq(n - 1) + count_binary_seq(n - 2)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) > 0:\n        depth = 1\n        for key, value in d.items():\n            if isinstance(value, dict):\n                depth = depth + 1\n        return depth\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            max_depth = max(max_depth, 1 + dict_depth(d[key]))\n        else:\n            max_depth = max(max_depth, 1)\n    return max_depth\n    \ndict1 = {\n    \"key1\":1,\n    \"key2\":2,\n    \"key3\":3\n}\ndict2 = {\n    \"key1\":1,\n    \"key2\":2,\n    \"key3\":{\n        \"key4\":4,\n        \"key5\":5\n    }\n}\ndict3 = {\n    \"key1\":1,\n    \"key2\":{\n        \"key3\":2,\n        \"key4\":3\n    },\n    \"key5\":5\n}\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dict_depth_helper(d, k, v):\n        if k in d.keys():\n            return 1 + dict_depth_helper(d[k], k, v)\n        else:\n            return max(dict_depth_helper(d[k], k, v), dict_depth_helper(d[k], k, v))\n    return dict_depth_helper(d, None, None)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dict_depth(d):\n        if not d:\n            return 0\n        return max(map(lambda x: dict_depth(x), d.items())) + 1\n    return dict_depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return (max(map(dict_depth, d.values()))) + 1 if d else 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dic_depth(d):\n        if type(d) == dict:\n            return 1 + max([dic_depth(v) for v in d.values()])\n        else:\n            return 1\n    return dic_depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d,dict):\n        return 1 + max(map(dict_depth,d.values()))\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([(i, max(dict_depth(j) if isinstance(j, dict) else 0)) for i, j in d.items()])[1] + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key in d:\n        if type(d[key]) == type({}):\n            count += 1\n    return count\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = index % len(arr)\n    arr = sorted(arr)\n    if(ranges[index] == -1 and rotations[index] == -1) : \n        return arr[index]\n    if(ranges[index]!= -1 and rotations[index]!= -1) : \n        return arr[index]\n    if(rotations[index] == -1) :\n        new_index = index + ranges[index]\n        if new_index >= len(arr) :\n            return arr[-1]\n        return find_Element(arr,ranges,rotations,new_index)\n    if(ranges[index] == -1) :\n        new_index = index - rotations[index]\n        if new_index < 0 :\n            return arr[0]\n        return find_Element(arr,ranges,rotations,new_index)\n    if(ranges[index] == 1 and rotations[index] == 0) : \n        return arr[index]\n    if(ranges[index] == -1 and rotations[index] == 1) : \n        new_index = index - 1\n        if new_index < 0 :\n            return arr[0]\n        return find_Element(arr,ranges,rotations,new_index)\n    if(rotations[index] == 1) :\n        new_index = index + 1\n        if new_index >= len(arr) :\n            return arr[-1]\n        return find_Element(arr,ranges,rotations,new_index)\n    if(rotations[index] == -1) :\n        new_index = index + 1\n        if new_index >= len(arr) :\n            return arr[0]\n        return find_Element(arr,ranges,rotations,new_index)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        if(ranges[i][0] <= arr[index] <= ranges[i][1]) :\n            return True\n    for j in range(0,rotations) :\n        index = (index+1) % len(arr)\n        if(arr[index] == range[0] or arr[index] == range[1]) :\n            return False\n    return False\n        \n    \n    \n    "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if (arr[index][0]<=ranges[i][0]) and (arr[index][1]>=ranges[i][1]) :\n            return index+rotations[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr) or index < 0:\n        print('Invalid index')\n    else:\n        if index < ranges[index] :\n            return find_Element(arr,ranges,rotations,index + rotations)\n        elif index >= ranges[index] and index < ranges[index + 1]:\n            return find_Element(arr,ranges,rotations,index - rotations)\n        elif index >= ranges[index + 1] and index < ranges[index + 2]:\n            return find_Element(arr,ranges,rotations,index - rotations)\n        else :\n            return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(index)\n    if index == 0 :\n        arr[ranges[0]] = 0\n        return arr\n    else :\n        if index - ranges[index - 1] == 1 :\n            arr[index] = arr[index - 1]\n            rotations[index - 1] += 1\n            find_Element(arr,ranges,rotations,index - 1)\n        else :\n            if index - ranges[index - 2] == 2 :\n                arr[index] = arr[index - 2]\n                arr[index - 2] = arr[index - 3]\n                rotations[index - 2] += 1\n                find_Element(arr,ranges,rotations,index - 2)\n            else :\n                if index - ranges[index - 3] == 3 :\n                    arr[index] = arr[index - 3]\n                    arr[index - 3] = arr[index - 4]\n                    rotations[index - 3] += 1\n                    find_Element(arr,ranges,rotations,index - 3)\n                else :\n                    if index - ranges[index - 4] == 4 :\n                        arr[index] = arr[index - 4]\n                        arr[index - 4] = arr[index - 5]\n                        rotations[index - 4] += 1\n                        find_Element(arr,ranges,rotations,index - 4)\n                    else :\n                        if index - ranges[index - 5] == 5 :\n                            arr[index] = arr[index - 5]\n                            arr[index - 5] = arr[index - 6]\n                            rotations[index - 5] += 1\n                            find_Element(arr,ranges,rotations,index - 5)\n                        else :\n                            if index - ranges[index - 6] == 6 :\n                                arr[index] = arr[index - 6]\n                                arr[index - 6] = arr[index - 7]\n                                rotations[index - 6] += 1\n                                find_Element(arr,ranges,rotations,index - 6)\n                            else :\n                                if index - ranges[index - 7] == 7 :\n                                    arr[index] = arr[index - 7]\n                                    arr[index - 7] = arr[index - 8]\n                                    rotations[index - 7] += 1\n                                    find_Element(arr,ranges,rotations,index - 7)\n                                else :\n                                    if index - ranges[index - 8] == 8 :\n                                        arr[index] = arr[index - 8]\n                                        arr[index - 8] = arr[index - 9]\n                                        rotations[index - 8] += 1\n                                        find_Element(arr,ranges,rotations,index - 8)\n                                    else :\n                                        if index - ranges[index - 9] == 9 :\n                                            arr[index] = arr[index - 9]\n                                            arr[index - 9] = arr[index - 10]\n                                            rotations[index - 9] += 1\n                                            find_Element(arr,ranges,rotations,index - 9)\n                                        else :\n                                            if index - ranges[index - 10] == 10 :\n                                                arr[index] = arr[index - 10]\n                                                arr[index - 10] = arr[index - 11]\n                                                rotations[index - 10] += 1\n                                                find_Element(arr,ranges,rotations,index - 10)\n                                            else :\n                                                if index - ranges[index - 11] == 11 :\n                                                    arr[index] = arr[index - 11]\n                                                    arr[index - 11] = arr[index - 12]\n                                                    rotations[index - 11] += 1\n                                                    find_Element(arr,ranges,rotations,index - 11)\n                                                else :\n                                                    if index - ranges[index - 12] == 12 :\n                                                        arr[index] = arr[index - 12]\n                                                        arr[index - 12] = arr[index - 13]\n                                                        rotations[index - 12] += 1\n                                                        find_Element(arr,ranges,rotations,index - 12)\n                                                    else :\n                                                        if index - ranges[index - 13] == 13 :\n                                                            arr[index] = arr[index - 13]\n                                                            arr[index - 13] = arr[index - 14]\n                                                            rotations[index - 13] += 1\n                                                            find_Element(arr,ranges,rotations,index - 13)\n                                                        else :\n                                                            if index - ranges[index - 14] == 14 :\n                                                                arr[index] = arr[index - 14]\n                                                                arr[index - 14] = arr[index - 15]\n                                                                rotations[index - 14] += 1\n                                                                find_Element(arr,ranges,rotations,index - 14)\n                                                            else :\n                                                                if index - ranges[index - 15] == 15 :\n                                                                    arr[index] = arr[index - 15]\n                                                                    arr[index - 15] = arr[index - 16]\n                                                                    rotations[index - 15] += 1\n                                                                    find_Element(arr,ranges,rotations,index - 15)\n                                                                else :\n                                                                    if index - ranges[index - 16] == 16 :\n                                                                        arr[index] = arr[index - 16]\n                                                                        arr[index - 16] = arr[index - 17]\n                                                                        rotations[index - 16] += 1\n                                                                        find_Element(arr,ranges,rotations,index - 16)\n                                                                    else :\n                                                                        if index - ranges[index - 17] == 17 :\n                                                                            arr[index] = arr[index - 17]\n                                                                            arr[index - 17] = arr[index - 18]\n                                                                            rotations[index - 17] += 1\n                                                                            find_Element(arr,ranges,rotations,index - 17)\n                                                                        else :\n                                                                            if index - ranges[index - 18] == 18 :\n                                                                                arr[index] = arr[index - 18]\n                                                                                arr[index - 18] = arr[index - 19]\n                                                                                rotations[index - 18] += 1\n                                                                                find_Element(arr,ranges,rotations,index - 18)\n                                                                            else :\n                                                                                if index - ranges[index - 19] == 19 :\n                                                                                    arr[index] = arr[index - 19]\n                                                                                    arr[index - 19] = arr[index - 20]\n                                                                                    rotations[index - 19] += 1\n                                                                                    find_Element(arr,ranges,rotations,index - 19)\n                                                                                else :\n                                                                                    if index - ranges[index - 20] == 20 :\n                                                                                        arr[index] = arr[index - 20]\n                                                                                        arr[index - 20] = arr[index - 21]\n                                                                                        rotations[index - 20] += 1\n                                                                                        find_Element(arr,ranges,rotations,index - 20)\n                                                                                    else :\n                                                                                        if index - ranges[index - 21] == 21 :\n                                                                                            arr[index] = arr[index - 21]\n                                                                                            arr[index - 21] = arr[index - 22]\n                                                                                            rotations[index - 21] += 1\n                                                                                            find_Element(arr,ranges,rotations,index - 21)\n                                                                                        else :\n                                                                                            if index - ranges[index - 22] == 22 :\n                                                                                                arr[index] = arr[index - 22]\n                                                                                                arr[index - 22] = arr[index - 23]\n                                                                                                rotations[index - 22] += 1\n                                                                                                find_Element(arr,ranges,rotations,index - 22)\n                                                                                            else :\n                                                                                                if index - ranges[index - 23] == 23 :\n                                                                                                    arr[index] = arr[index - 23]\n                                                                                                    arr[index - 23] = arr[index - 24]\n                                                                                                    rotations[index - 23] += 1\n                                                                                                    find_Element(arr,ranges,rotations,index - 23)\n                                                                                                else :\n                                                                                                    if index - ranges[index - 2"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = index % (len(ranges)-rotations)\n    \n    if ranges[index+rotations] - ranges[index] >= 2 :\n        return arr[index+rotations]\n    else :\n        return arr[index+rotations+1]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    length = len(arr)\n    l = 0\n    r = length - 1\n    \n    while l <= r :\n        mid = l + (r - l) // 2\n        if index < ranges[mid] :\n            r = mid - 1\n        elif index >= ranges[mid] :\n            l = mid + 1\n    \n    ranges[l] = index\n    rotations[l] = rotations[l] - 1\n    \n    l = l - 1\n    while l >= 0 :\n        ranges[l] = index\n        rotations[l] = rotations[l] - 1\n        l = l - 1\n        \n    return l\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if (ranges[i][0] <= index and index <= ranges[i][1]) :\n            break\n    if i == len(ranges) :\n        print(\"Invalid Index\")\n    else :\n        i = i - 1\n        low,high = ranges[i]\n        j = 0\n        while j < rotations :\n            mid = int((low+high)/2)\n            if mid == index :\n                return arr[index],j\n            elif mid < index :\n                low = mid\n            else :\n                high = mid\n            j = j + 1\n    return \"\",-1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # TO-DO\n    # Your code here\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(\"arr=\",arr)\n    #print(\"ranges=\",ranges)\n    #print(\"rotations=\",rotations)\n    #print(\"index=\",index)\n    return ranges[index % len(ranges)] if rotations == -1 else ranges[(index + rotations) % len(ranges)]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    listOfWords = words.split()\n    p_word = ''\n    for word in listOfWords:\n        if word.startswith('p'):\n            p_word = word\n            break\n    return (p_word, listOfWords.index(p_word))\ndef end_with_w(words):\n    '''\n    Write a function to return a list of words ending with 'w'.\n    '''\n    listOfWords = words.split()\n    w_word = ''\n    for word in listOfWords:\n        if word.endswith('w'):\n            w_word = word\n            break\n    return (w_word, listOfWords.index(w_word))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    x = 'p'\n    for y in words:\n        if y.startswith(x):\n            return(y, words.index(y))\ndef group_of_words(words, word):\n    '''\n    Write a function to return list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for x in words:\n        if x!= word:\n            return(x)\ndef avant_c(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    return(group_of_words(words, word))\ndef first_non_p(words):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    x = 'p'\n    for y in words:\n        if y.startswith(x):\n            return(y)\ndef all_the_words(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y!= word:\n            return(y)\ndef all_the_words_index(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in range(len(words)):\n        if words[y]!= word:\n            return(y)\ndef all_the_words_index2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in range(len(words)):\n        if words[y]!= word:\n            return(y)\ndef back_words(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(words.index(y))\ndef back_words2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(words.index(y))\ndef first_non_c(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(y)\ndef all_the_words2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y!= word:\n            return(y)\ndef all_the_words_index3(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in range(len(words)):\n        if words[y]!= word:\n            return(y)\ndef all_the_words_index4(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in range(len(words)):\n        if words[y]!= word:\n            return(y)\ndef first_non_c2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(y)\ndef all_the_words_index2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in range(len(words)):\n        if words[y]!= word:\n            return(y)\ndef back_words2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(words.index(y))\ndef first_non_c(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(y)\ndef back_words(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(words.index(y))\ndef back_words2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(words.index(y))\ndef find_duplicates(l):\n    '''\n    Write a function that takes a list and returns a new list that contains only\n    the unique items of the old list.\n    '''\n    new_list = []\n    for x in l:\n        if x not in new_list:\n            new_list.append(x)\n    return(new_list)\ndef find_duplicates_2(l):\n    '''\n    Write a function that takes a list and returns a new list that contains only\n    the unique items of the old list.\n    '''\n    new_list = []\n    for x in l:\n        if x not in new_list:\n            new_list.append(x)\n    return(new_list)\ndef first_non_c(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(y)\ndef all_the_words_index2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in range(len(words)):\n        if words[y]!= word:\n            return(y)\ndef first_non_c2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(y)\ndef all_the_words_index3(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in range(len(words)):\n        if words[y]!= word:\n            return(y)\ndef first_non_c2(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in words:\n        if y.startswith(word):\n            return(y)\ndef all_the_words_index3(words, word):\n    '''\n    Write a function to return a list of words that are present in the words list\n    and are not present in the word list.\n    '''\n    for y in range(len(words)):\n        if words[y"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word, word\n    return '',''\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('p.*')\n    result = [word for word in words if re.match(pattern, word)]\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for i in words:\n        if i.startswith('p'):\n            p_words.append(i)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    results = []\n    for word in words:\n        if re.match(pattern, word):\n            results.append(word)\n    return results\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_words = []\n    for word in words:\n        if word.startswith('p'):\n            list_words.append(word)\n    return list_words\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p1 = words.pop(0)\n    p2 = words.pop(0)\n    while p1!= 'p':\n        p1 = words.pop(0)\n        p2 = words.pop(0)\n    return p1,p2\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        word = words[i]\n        if word[0].lower() == 'p':\n            return word, words[i+1]\n        "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a=[]\n    for i in words:\n        if i.startswith('p') and i not in a:\n            a.append(i)\n    return a\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # kth element is in index or before index\n    if k <= index:\n        return (a[index], index, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sub_max = -math.inf\n    sub_max_ind = -math.inf\n    for i in range(index+1):\n        sub_max = max(sub_max, a[i]+sub_max)\n        sub_max_ind = max(sub_max_ind, i)\n    if sub_max >= k:\n        return sub_max, sub_max_ind\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    if k == 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # print(\"Input a is \",a)\n    # print(\"k is \",k)\n    # print(\"Index is \",index)\n    # print(\"a[index] is \",a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k >= n:\n        return 0\n    max_sum = 0\n    for i in range(index, n):\n        if a[i] > a[index]:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, i, i+1, k))\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, i, i+1, k) + a[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Array of size n+1\n    m = a[0]\n    arr = [0]*(n+1)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = 0\n    for j in range(index, n):\n        s = max(s, a[j]) + a[j]\n        if s > k:\n            break\n    return s\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(i, 0, -1):\n            dp[i][j] = dp[i-1][j]\n            if a[j-1] > a[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1])\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index >= len(a):\n        return 0\n    \n    s = max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - 1) + a[index])\n    \n    return max(s, max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    cur_max = float('-inf')\n    cur_sum = float('-inf')\n    pref = []\n    for i in range(index + 1):\n        # print(a[i:i + k], cur_sum, cur_max)\n        if i == index:\n            # print(i, k, cur_max)\n            cur_sum = a[i]\n        else:\n            cur_sum = a[i] + cur_sum\n        if cur_sum > cur_max:\n            cur_max = cur_sum\n            pref = [a[i]]\n        elif cur_sum == cur_max:\n            pref.append(a[i])\n        else:\n            continue\n    return cur_max, pref\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c = []\n    if len(tuplex) == 0:\n        return c\n    for i in range(m):\n        for j in range(n):\n            c.append(tuplex[i][j])\n    return tuple(c)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + tuplex[m+1:n] + tuplex[n+1:]\ndef colon_string(string,m,n):\n    '''\n    Write a function to get a colon of a string.\n    '''\n    return string[:m] + string[m+1:n] + string[n+1:]\ndef colon_list(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    return listx[:m] + listx[m+1:n] + listx[n+1:]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0 or n==0:\n        return []\n    l = []\n    l.append(tuplex[0])\n    return colon_tuplex(tuplex[1:m],m,n-1) + colon_tuplex(tuplex[m+1:],m,n-1) + colon_tuplex(tuplex[m+1:],m,n-1) + colon_tuplex(tuplex[1:m],m-1,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuplex[1]\n    if m<colon[1]:\n        return 'no'\n    elif m==colon[1]:\n        return 'yes'\n    else:\n        return 'no'\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[:m]+tuplex[m+1:n]+tuplex[n:]+tuplex[:m])\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append([])\n        for j in range(n):\n            colon[i].append(' ')\n    colon[0][0] = tuplex[0]\n    colon[0][1] = tuplex[1]\n    for i in range(1,m):\n        colon[i][0] = colon[i-1][1]\n        colon[i][1] =''\n    for i in range(1,m):\n        colon[i][-1] = colon[i][0]\n        colon[i][-2] =''\n    for i in range(1,n):\n        colon[0][i] = colon[0][i-1]\n        colon[-1][i] = colon[-1][i-1]\n        colon[-2][i] = colon[-2][i-1]\n    return colon\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append('')\n    for i in range(m):\n        colony[i][0] = tupley[0][i]\n        colony[i][1] = tupley[1][i]\n        for j in range(1,n):\n            colony[i][j] = colony[i][j-1]\n        for j in range(1,n):\n            colony[i][n-1-j] = colony[i][j]\n    return colony\ndef colon_diag(diag,m,n):\n    '''\n    Write a function to get a colon of a diagonal.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append(' ')\n    for i in range(m):\n        colony[i][i] = diag[0][i]\n        for j in range(1,n):\n            colony[i][m-i-1-j] = colony[i][m-i-j]\n    return colony\ndef colon_updiag(updiag,m,n):\n    '''\n    Write a function to get a colon of a up diagonal.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append(' ')\n    for i in range(m):\n        colony[i][i] = updiag[0][i]\n        for j in range(1,n):\n            colony[i][m-i-j] = colony[i][m-i-j-1]\n    return colony\ndef colon_downdiag(downdiag,m,n):\n    '''\n    Write a function to get a colon of a down diagonal.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append(' ')\n    for i in range(m):\n        colony[i][i] = downdiag[0][i]\n        for j in range(1,n):\n            colony[m-i-j][i] = colony[m-i-j-1][i]\n    return colony\ndef colon_diag_tupley(diag,tupley,m,n):\n    '''\n    Write a function to get a colon of a diagonal of a tuple.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append('')\n    for i in range(m):\n        colony[i][i] = tupley[0][i]\n        for j in range(1,n):\n            colony[i][m-i-1-j] = colony[i][m-i-j]\n    return colony\ndef colon_diag_tupley_tupley(diag,tupley,m,n):\n    '''\n    Write a function to get a colon of a diagonal of a tuple.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append('')\n    for i in range(m):\n        colony[i][i] = tupley[0][i]\n        for j in range(1,n):\n            colony[i][m-i-1-j] = colony[i][m-i-j]\n    return colony\ndef colon_updiag_tupley(updiag,tupley,m,n):\n    '''\n    Write a function to get a colon of a up diagonal of a tuple.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append('')\n    for i in range(m):\n        colony[i][i] = tupley[0][i]\n        for j in range(1,n):\n            colony[m-i-j][i] = colony[m-i-j-1][i]\n    return colony\ndef colon_downdiag_tupley(downdiag,tupley,m,n):\n    '''\n    Write a function to get a colon of a down diagonal of a tuple.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append('')\n    for i in range(m):\n        colony[i][i] = tupley[0][i]\n        for j in range(1,n):\n            colony[m-i-j][i] = colony[m-i-j-1][i]\n    return colony\ndef colon_updiag_tupley_tupley(updiag,tupley,m,n):\n    '''\n    Write a function to get a colon of a up diagonal of a tuple.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append('')\n    for i in range(m):\n        colony[i][i] = tupley[0][i]\n        for j in range(1,n):\n            colony[m-i-j][i] = colony[m-i-j-1][i]\n    return colony\ndef colon_downdiag_tupley_tupley(downdiag,tupley,m,n):\n    '''\n    Write a function to get a colon of a down diagonal of a tuple.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append('')\n    for i in range(m):\n        colony[i][i] = tupley[0][i]\n        for j in range(1,n):\n            colony[m-i-j][i] = colony[m-i-j-1][i]\n    return colony\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colony = []\n    for i in range(m):\n        colony.append([])\n        for j in range(n):\n            colony[i].append('')\n    for i in range(m):\n        colony[i][i] = tupley[0][i]\n        for j in range(1,n):\n            colony[i][m-i-1-j] = colony[i][m-i-j]\n    return colony\ndef colon_tupley_tupley(tupley,m,n):\n    '''\n    Write a function t"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)==0:\n        print()\n    else:\n        for i in range(len(tuplex)):\n            print(str(tuplex[i]).ljust(m,'.'),end=\"\")\n        print()\n    for i in range(1,n):\n        print(str(i).ljust(m,'.'),end=\"\")\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = tuplex[m-1][n-1]\n    b = tuplex[m-1][n]\n    c = tuplex[m][n-1]\n    d = tuplex[m][n]\n    return a,b,c,d\ndef read_colon(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    return m,n,a,b,c,d\ndef swap_colon(tuplex,m,n,l,k):\n    '''\n    Write a function to swap a colon of a tuple.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m,n,a,b,c,d = read_colon(tuplex,m,n)\n    tuplex[m-1][n-1] = l\n    tuplex[m-1][n] = k\n    tuplex[m][n-1] = b\n    tuplex[m][n] = d\ndef col_up(tuplex,m,n):\n    '''\n    Write a function to move the first character of a tuple's column to the left.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = a\n    tuplex[m-1][n] = b\n    tuplex[m][n-1] = c\n    tuplex[m][n] = d\ndef col_left(tuplex,m,n):\n    '''\n    Write a function to move the last character of a tuple's column to the left.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = a\n    tuplex[m-1][n] = b\n    tuplex[m][n-1] = c\n    tuplex[m][n] = d\ndef col_right(tuplex,m,n):\n    '''\n    Write a function to move the last character of a tuple's column to the right.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = c\n    tuplex[m-1][n] = d\n    tuplex[m][n-1] = a\n    tuplex[m][n] = b\ndef col_down(tuplex,m,n):\n    '''\n    Write a function to move the first character of a tuple's column to the down.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = a\n    tuplex[m-1][n] = b\n    tuplex[m][n-1] = c\n    tuplex[m][n] = d\ndef col_up_left(tuplex,m,n):\n    '''\n    Write a function to move the first character of a tuple's column to the left and then move the last character of the column to the right.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = a\n    tuplex[m-1][n] = b\n    tuplex[m][n-1] = c\n    tuplex[m][n] = d\ndef col_up_right(tuplex,m,n):\n    '''\n    Write a function to move the first character of a tuple's column to the right and then move the last character of the column to the left.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = d\n    tuplex[m-1][n] = c\n    tuplex[m][n-1] = a\n    tuplex[m][n] = b\ndef col_down_left(tuplex,m,n):\n    '''\n    Write a function to move the first character of a tuple's column to the left and then move the last character of the column to the right.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = a\n    tuplex[m-1][n] = b\n    tuplex[m][n-1] = c\n    tuplex[m][n] = d\ndef col_down_right(tuplex,m,n):\n    '''\n    Write a function to move the first character of a tuple's column to the right and then move the last character of the column to the left.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = c\n    tuplex[m-1][n] = d\n    tuplex[m][n-1] = a\n    tuplex[m][n] = b\ndef col_swap_up(tuplex,m,n):\n    '''\n    Write a function to swap the first character of a tuple's column to the left and then the last character of the column to the right.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = a\n    tuplex[m-1][n] = b\n    tuplex[m][n-1] = d\n    tuplex[m][n] = c\ndef col_swap_down(tuplex,m,n):\n    '''\n    Write a function to swap the first character of a tuple's column to the left and then the last character of the column to the right.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n]\n    tuplex[m-1][n-1] = b\n    tuplex[m-1][n] = d\n    tuplex[m][n-1] = a\n    tuplex[m][n] = c\ndef row_up(tuplex,m,n):\n    '''\n    Write a function to move the first character of a tuple's row to the up.\n    '''\n    a,b,c,d = colon_tuplex(tuplex,m,n)\n    m = tuplex[m-1][n-1]\n    n = tuplex[m-1][n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple((tuplex[i],tuplex[(i+1)%n]) for i in range(0,m,2))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[:m],tuplex[m:n+1])\ndef can_be_seperated(tuplex,n):\n    '''\n    Write a function that determines if a tuple can be seperated into n parts.\n    '''\n    return n == len(tuplex)\ndef cols_from_tuplex(tuplex,n):\n    '''\n    Write a function that creates n columns from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_string(tuplex,n):\n    '''\n    Write a function that creates a string of n characters from a tuple.\n    '''\n    return ''.join(colon_tuplex(tuplex,n,n))\ndef col_seperation_list(tuplex,n):\n    '''\n    Write a function that creates a list of n elements from a tuple.\n    '''\n    return list(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_tuple(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_set(tuplex,n):\n    '''\n    Write a function that creates a set of n elements from a tuple.\n    '''\n    return set(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_dict(tuplex,n):\n    '''\n    Write a function that creates a dict of n elements from a tuple.\n    '''\n    return dict(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_list_dict(tuplex,n):\n    '''\n    Write a function that creates a list of n elements from a tuple.\n    '''\n    return list(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_set_dict(tuplex,n):\n    '''\n    Write a function that creates a set of n elements from a tuple.\n    '''\n    return set(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_tuple_dict(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_list(tuplex,n):\n    '''\n    Write a function that creates a list of n elements from a tuple.\n    '''\n    return list(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_set(tuplex,n):\n    '''\n    Write a function that creates a set of n elements from a tuple.\n    '''\n    return set(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_tuple(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_list(tuplex,n):\n    '''\n    Write a function that creates a list of n elements from a tuple.\n    '''\n    return list(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_set(tuplex,n):\n    '''\n    Write a function that creates a set of n elements from a tuple.\n    '''\n    return set(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_tuple(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols_list(tuplex,n):\n    '''\n    Write a function that creates a list of n elements from a tuple.\n    '''\n    return list(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols_set(tuplex,n):\n    '''\n    Write a function that creates a set of n elements from a tuple.\n    '''\n    return set(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols_tuple(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols_cols(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols_cols_list(tuplex,n):\n    '''\n    Write a function that creates a list of n elements from a tuple.\n    '''\n    return list(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols_cols_set(tuplex,n):\n    '''\n    Write a function that creates a set of n elements from a tuple.\n    '''\n    return set(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols_cols_tuple(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols_cols_cols(tuplex,n):\n    '''\n    Write a function that creates a tuple of n elements from a tuple.\n    '''\n    return tuple(map(lambda x:x,colon_tuplex(tuplex,n,n)))\ndef col_seperation_cols_dict_cols_cols_cols_cols"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    products = []\n    for i in range(0, N):\n        if(len(nums2) == 0):\n            product = nums1[i] * nums2[i]\n        else:\n            product = nums1[i] * nums2[0]\n        products.append(product)\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    if N > len(nums1) or N > len(nums2):\n        raise ValueError('Can only select N from lists with N>=len(nums1) and N>=len(nums2)')\n    \n    answer = []\n    for i in range(N):\n        n1 = nums1[i]\n        n2 = nums2[i]\n        answer.append((n1 * n2, n1, n2))\n    \n    return sorted(answer, key=lambda x: (x[0], x[1], x[2]), reverse=True)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from heapq import heappush, heappop, heapify\n    minheap = []\n    maxheap = []\n    result = []\n    for i in range(N):\n        heappush(minheap, nums1[i])\n        heappush(maxheap, -1 * nums2[i])\n    \n    while minheap and maxheap:\n        val1 = heappop(minheap)\n        val2 = -1 * heappop(maxheap)\n        result.append(val1 * val2)\n    \n    while minheap:\n        result.append(heappop(minheap))\n    \n    while maxheap:\n        result.append(-1 * heappop(maxheap))\n    \n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse = True)\n    nums2.sort(reverse = True)\n    n1 = 0\n    n2 = 0\n    ans = []\n    while len(ans) < N:\n        if nums1[n1] * nums2[n2] > ans[-1]:\n            ans.append(nums1[n1] * nums2[n2])\n        if nums1[n1] * nums2[n2] < ans[-1]:\n            n1 += 1\n            while nums1[n1] * nums2[n2] < ans[-1] and n1 < len(nums1) - 1:\n                n1 += 1\n        if nums1[n1] * nums2[n2] < ans[-1] and len(ans) < N:\n            n2 += 1\n            while nums1[n1] * nums2[n2] < ans[-1] and n2 < len(nums2) - 1:\n                n2 += 1\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Time: O(n*m) where n is the number of elements in nums1 and m is the number of elements in nums2\n    # Space: O(n)\n    \n    # Get the number of elements in each list\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    s = []\n    for i in range(N):\n        if i%2 == 0:\n            s.append(nums1[i]*nums2[i])\n        else:\n            s.append(nums2[i]*nums1[i])\n    s.sort(reverse=True)\n    return s[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # count = int(input())\n    # nums1 = input().split()\n    # nums2 = input().split()\n    \n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    for i in range(N):\n        if nums1[i] < nums2[i]:\n            nums1[i], nums2[i] = nums2[i], nums1[i]\n        else:\n            break\n    \n    for i in range(N):\n        if nums1[i] < nums2[i]:\n            nums1[i], nums2[i] = nums2[i], nums1[i]\n        else:\n            break\n    \n    print(' '.join(map(str, nums1)))\n    print(' '.join(map(str, nums2)))\n    return\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Time: O(n log n)\n    # Space: O(n)\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    res = []\n    for i in range(N):\n        if nums1[i] * nums2[i] > 0:\n            res.append(nums1[i] * nums2[i])\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse = True)\n    nums2.sort(reverse = True)\n    \n    # print(nums1,nums2)\n    res = []\n    \n    for i in range(N):\n        if nums1[i] >= nums2[i]:\n            res.append(nums1[i])\n        else:\n            res.append(nums2[i])\n    \n    res.sort(reverse = True)\n    \n    return res\n    \n    \n    \n    # print(res)\n    \n    \n    \nif __name__ == '__main__':\n    print(large_product([5,3,1,7], [4,2,6,8]    , 2))\n    print(large_product([7,8], [4,2,6,3], 2))\n    print(large_product([1,2,3,4], [5,6,7,8], 2)"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N < 0:\n        return\n    if len(nums1) < 1 or len(nums2) < 1 or N < 0:\n        return\n    result = []\n    nums1.sort()\n    nums2.sort()\n    for i in range(N):\n        result.append(nums1[-1] * nums2[-1])\n        nums1.pop()\n        nums2.pop()\n    print(result)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef maximum(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\ndef maximum(a,b,c,d):\n    '''\n    Write a python function to find the maximum of four numbers.\n    '''\n    if a>b and a>c and a>d:\n        return a\n    elif b>a and b>c and b>d:\n        return b\n    elif c>a and c>b and c>d:\n        return c\n    else:\n        return d\ndef maximum(a,b,c,d,e):\n    '''\n    Write a python function to find the maximum of five numbers.\n    '''\n    if a>b and a>c and a>d and a>e:\n        return a\n    elif b>a and b>c and b>d and b>e:\n        return b\n    elif c>a and c>b and c>d and c>e:\n        return c\n    elif d>a and d>b and d>c and d>e:\n        return d\n    else:\n        return e\ndef maximum(a,b,c,d,e,f):\n    '''\n    Write a python function to find the maximum of six numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f:\n        return a\n    elif b>a and b>c and b>d and b>e and b>f:\n        return b\n    elif c>a and c>b and c>d and c>e and c>f:\n        return c\n    elif d>a and d>b and d>c and d>e and d>f:\n        return d\n    elif e>a and e>b and e>c and e>d and e>f:\n        return e\n    else:\n        return f\ndef maximum(a,b,c,d,e,f,g):\n    '''\n    Write a python function to find the maximum of seven numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f and a>g:\n        return a\n    elif b>a and b>c and b>d and b>e and b>f and b>g:\n        return b\n    elif c>a and c>b and c>d and c>e and c>f and c>g:\n        return c\n    elif d>a and d>b and d>c and d>e and d>f and d>g:\n        return d\n    elif e>a and e>b and e>c and e>d and e>f and e>g:\n        return e\n    elif f>a and f>b and f>c and f>d and f>e and f>g:\n        return f\n    else:\n        return g\ndef maximum(a,b,c,d,e,f,g,h):\n    '''\n    Write a python function to find the maximum of eight numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f and a>g and a>h:\n        return a\n    elif b>a and b>c and b>d and b>e and b>f and b>g and b>h:\n        return b\n    elif c>a and c>b and c>d and c>e and c>f and c>g and c>h:\n        return c\n    elif d>a and d>b and d>c and d>e and d>f and d>g and d>h:\n        return d\n    elif e>a and e>b and e>c and e>d and e>f and e>g and e>h:\n        return e\n    elif f>a and f>b and f>c and f>d and f>e and f>g and f>h:\n        return f\n    elif g>a and g>b and g>c and g>d and g>e and g>f and g>h:\n        return g\n    else:\n        return h\ndef maximum(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a python function to find the maximum of nine numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f and a>g and a>h and a>i:\n        return a\n    elif b>a and b>c and b>d and b>e and b>f and b>g and b>h and b>i:\n        return b\n    elif c>a and c>b and c>d and c>e and c>f and c>g and c>h and c>i:\n        return c\n    elif d>a and d>b and d>c and d>e and d>f and d>g and d>h and d>i:\n        return d\n    elif e>a and e>b and e>c and e>d and e>f and e>g and e>h and e>i:\n        return e\n    elif f>a and f>b and f>c and f>d and f>e and f>g and f>h and f>i:\n        return f\n    elif g>a and g>b and g>c and g>d and g>e and g>f and g>h and g>i:\n        return g\n    else:\n        return i\ndef maximum(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a python function to find the maximum of ten numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f and a>g and a>h and a>i and a>j:\n        return a\n    elif b>a and b>c and b>d and b>e and b>f and b>g and b>h and b>i and b>j:\n        return b\n    elif c>a and c>b and c>d and c>e and c>f and c>g and c>h and c>i and c>j:\n        return c\n    elif d>a and d>b and d>c and d>e and d>f and d>g and d>h and d>i and d>j:\n        return d\n    elif e>a and e>b and e>c and e>d and e>f and e>g and e>h and e>i and e>j:\n        return e\n    elif f>a and f>b and f>c and f>d and f>e and f>g and f>h and f>i and f>j:\n        return f\n    elif g>a and g>b and g>c and g>d and g>e and g>f and g>h and g>i and g>j:\n        return g\n    else:\n        return h\ndef maximum(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a python function to find the maximum of eleven numbers.\n    '''\n    if a>b and a>c and a>d and a>e and a>f and a>g and a>h and a>i and a>j and a>k:\n        return a\n    elif b>a and b>c and b>d and b>e and b>f and b>g and b>h and b>i and b>j and b>k:\n        return b\n    elif c>a and c>b and c>d and c>e and c>f and c>g and c>h and c>i and c>j and c>k:\n        return c\n    elif d>a and d>b and d>c and d>e and d>f and d>g and d>h and d>i and d>j and d>k:\n        return d\n    elif e>a and e>b and e>c and e>d and e>f and e>g and e>h an"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max1 = a\n    max2 = b\n    if a > b:\n        max1 = b\n        max2 = a\n    return max1,max2\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \nprint(maximum(8,9))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"first number is maximum\")\n    elif a==b:\n        print(\"both are equal\")\n    else:\n        print(\"second number is maximum\")\nmaximum(4,5)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \nprint(maximum(20,30))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef main():\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(input(\"Enter the first number:\"))\n    b=int(input(\"Enter the second number:\"))\n    print(\"The maximum of two numbers are:\",maximum(a,b))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"Maximum number is:\",a)\n    elif a==b:\n        print(\"Maximun number is:\",a)\n    else:\n        print(\"Maximum number is:\",b)\nmaximum(2,5)\nmaximum(2,5,2)\nmaximum(2,5,2,3)\nmaximum(2,5,2,3,4)\nmaximum(2,5,2,3,4,3,5)\nmaximum(2,5,2,3,4,3,5,5)\nmaximum(-2,-5,1,2,2,4,5,-7)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Your code here\n    tuple1 = str1.split()\n    return tuple(tuple1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split(',')\n    \n    for i in range(len(str1)):\n        str1[i] = str1[i].strip()\n        \n    for i in range(len(str1)):\n        str1[i] = tuple(str1[i])\n    \n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip(\"()\")\n    str1 = str1.split(',')\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if(len(str1) == 0):\n        return \"\"\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = list(str1)\n    res = tuple(lst)\n    return res\n    \ndef tuple_to_string(lst):\n    '''\n    Write a function to convert a given tuple of characters into a string.\n    '''\n    str1 = ''.join(lst)\n    return str1\n    \ndef rotate_string_90_degrees(str1):\n    '''\n    Write a function to rotate the given string by 90 degrees clockwise.\n    '''\n    lst = list(str1)\n    res = lst[::-1]\n    res = tuple(res)\n    return res\n    \ndef mirror_string_ud(str1):\n    '''\n    Write a function to mirror the given string by reversing it.\n    '''\n    res = str1[::-1]\n    return res\n    \ndef mirror_string_lr(str1):\n    '''\n    Write a function to mirror the given string by flipping it horizontally.\n    '''\n    lst = list(str1)\n    res = lst[::-1]\n    res = tuple(res)\n    return res\n    \ndef translate_string_to_unicode(str1, target_unicode_chars):\n    '''\n    Write a function to translate the given string into unicode characters and then perform the translation.\n    '''\n    res = str1.encode(encoding='UTF-8',errors='strict').decode(encoding='UTF-8',errors='strict')\n    return res\n    \ndef convert_string_to_lower_case(str1):\n    '''\n    Write a function to convert the given string into lower case letters and then print it.\n    '''\n    res = str1.lower()\n    return res\n    \ndef reverse_string_words(str1):\n    '''\n    Write a function to reverse the words in a given string.\n    '''\n    res = str1.split()\n    res = res[::-1]\n    res =''.join(res)\n    return res\n    \ndef swap_case(str1):\n    '''\n    Write a function to swap case of the given string.\n    '''\n    res = str1.swapcase()\n    return res\n    \ndef replace_string_substring(str1,sub,repl):\n    '''\n    Write a function to replace the given substring in a string.\n    '''\n    lst = list(str1)\n    index = lst.index(sub)\n    res = str1[:index] + repl + str1[index+len(sub):]\n    return res\n    \ndef replace_string_substring_with_value(str1,sub,repl,start,end):\n    '''\n    Write a function to replace the given substring with the given replacement in a given string.\n    '''\n    lst = list(str1)\n    index1 = lst.index(sub,start,end)\n    res = str1[:index1] + repl + str1[index1+len(sub):]\n    return res\n    \ndef remove_duplicates_from_string(str1):\n    '''\n    Write a function to remove duplicate characters in a given string.\n    '''\n    lst = list(str1)\n    res = ''.join(set(lst))\n    return res\n    \ndef replace_string_with_value(str1,sub,repl):\n    '''\n    Write a function to replace the given substring with the given replacement in a given string.\n    '''\n    lst = list(str1)\n    res = str1.replace(sub,repl)\n    return res\n    \ndef remove_intersection(lst1,lst2):\n    '''\n    Write a function to remove the intersection of two lists.\n    '''\n    res = lst1.symmetric_difference(lst2)\n    return res\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    lst = list(str1)\n    lst.reverse()\n    if lst == lst:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_without_slicing(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    lst = list(str1)\n    while len(lst) > 1:\n        if lst.pop(0)!= lst.pop():\n            return False\n    return True\n    \ndef count_occurrences(lst,char):\n    '''\n    Write a function to count the occurrences of a character in a list of strings.\n    '''\n    res = lst.count(char)\n    return res\n    \ndef search_for_element_from_a_list(lst,sub):\n    '''\n    Write a function to search an element in a list of strings.\n    '''\n    res = lst.index(sub)\n    return res\n    \ndef get_fibonacci_of_n_terms(n):\n    '''\n    Write a function to get the nth fibonacci number.\n    '''\n    res = 5*n*n+4\n    return res\n    \ndef is_palindrome_with_slice(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    lst = list(str1)\n    while len(lst) > 1:\n        if lst.pop(0)!= lst.pop():\n            return False\n    return True\n    \ndef is_palindrome_with_split(str1):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    lst = list(str1)\n    str2 = ''.join(lst)\n    str3 = str2.split()\n    str4 = ''.join(str3)\n    if str2 == str4:\n        return True\n    else:\n        return False\n    \ndef get_factorial_of_n(n):\n    '''\n    Write a function to get the factorial of a given number.\n    '''\n    res = 1\n    if n == 0:\n        res = 1\n    elif n == 1:\n        res = 1\n    elif n > 1:\n        for i in range(n):\n            res = res * (n-i)\n    return res\n    \ndef palindrome_of_a_number(num):\n    '''\n    Write a function to check whether a given number is a palindrome or not.\n    '''\n    res = str(num)\n    if res == res[::-1]:\n        return True\n    else:\n        return False\n    \ndef get_factorial_of_n_without_recursion(n):\n    '''\n    Write a function to get the factorial of a given number using recursion.\n    '''\n    if n == 1:\n        res = 1\n    elif n > 1:\n        res = n*get_factorial_of_n_without_recursion(n-1)\n    return res\n    \ndef get_nth_prime(n):\n    '''\n    Write a function to get the nth prime number.\n    '''\n    num = 2\n    while n > 1:\n        res = n*num+1\n        if is_prime(res):\n            n = n-1\n            num = num+1\n        else:\n            num = num+1\n    return res\n    \ndef get_nth_prime_without_recursion(n):\n    '''\n    Write a function to get the nth prime number.\n    '''\n    if n == 0:\n        return 2\n    res = 3\n    while n > 1:\n        res = res + 2\n        if is_prime(res):\n            n = n-1\n    return res\n    \ndef get_nth_prime_without_sieve_of_eratosthenes(n):\n    '''\n    Write a function to get the nth prime number.\n    '''\n    import math\n    primes = []\n    count = 1\n    while len(primes) < n:\n        i = 1\n        if count == 1:\n            while i < mat"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1=str1.split(' ')\n    str1=''.join(str1)\n    str1=str1.split(',')\n    str1=''.join(str1)\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(\"Leftmost unset bit is: \", n | (1 << (n.bit_length() - 1)))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1<<(n-1)\n    return n | mask\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << n.bit_length()-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | 1\n    n = n << 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (~(n-1))\n    return n\n    "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary_n = bin(n)[2:]\n    binary_n = '0'*(64 - len(binary_n)) + binary_n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= 1<<n.bit_length()\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Write your code here\n    n = ~n\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~n | n & (n - 1)\n    \ndef set_left_most_set_bit(n):\n    '''\n    Write a python function to set the left most set bit.\n    '''\n    return ~n | n & (n - 1)\n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    return ~n | (n - 1)\n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return ~n | (n - 1)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r**2*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # TO DO\n    v=4/3*math.pi*r**3\n    if(v<h):\n        return 0\n    else:\n        return v-h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*r**2*h,2)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*r*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r*r\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\n    \ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and sphere.\n    '''\n    return volume_cone(r,h)*2\n    \ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere and cylinder.\n    '''\n    return volume_sphere(r)*h\n    \ndef volume_cone_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone, sphere and cylinder.\n    '''\n    return volume_cone_sphere(r,h)*2\n    \ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return 2*math.pi*r*(r+h)\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\n    \ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*r+2*math.pi*h\n    \ndef surface_area_cone_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cone and sphere.\n    '''\n    return surface_area_cone(r,h)+surface_area_sphere(r)\n    \ndef surface_area_sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere and cylinder.\n    '''\n    return surface_area_sphere(r)+surface_area_cylinder(r,h)\n    \ndef surface_area_cone_sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cone, sphere and cylinder.\n    '''\n    return surface_area_cone_sphere(r,h)+surface_area_sphere_cylinder(r,h)\n    \ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere and cone.\n    '''\n    return volume_sphere(r)*surface_area_cone(r,h)/3\n    \ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder and cone.\n    '''\n    return volume_cylinder(r)*surface_area_cone(r,h)/3\n    \ndef volume_sphere_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere, cylinder and cone.\n    '''\n    return volume_sphere(r)*surface_area_cone(r,h)+volume_cylinder(r)*surface_area_cylinder(r,h)\n    \ndef volume_sphere_cone_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone and sphere.\n    '''\n    return volume_sphere(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cylinder(r,h)\n    \ndef volume_cone_sphere_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cone, sphere and cylinder.\n    '''\n    return volume_cone(r,h)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)\n    \ndef volume_sphere_cone_sphere_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, sphere and cylinder.\n    '''\n    return volume_sphere(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)\n    \ndef volume_sphere_cone_sphere_cylinder_cone_sphere_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, sphere, cylinder and cone.\n    '''\n    return volume_sphere(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_cylinder(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cylinder(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)\n    \ndef volume_sphere_cone_sphere_cylinder_cone_sphere_cylinder_cone_sphere_cylinder_cone_sphere_cylinder_cone_sphere_cylinder_cone_sphere_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, sphere, cylinder and cone, sphere, cylinder and cone and sphere, cylinder and cone and sphere, cylinder and cone and sphere.\n    '''\n    return volume_sphere(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_cylinder(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cylinder(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere(r)*surface_area_cylinder(r,h)+volume_cylinder(r)*surface_area_cone(r,h)+volume_sphere("
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*r**2*h,2)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Base Cases:\n    if r <= 0:\n        raise ValueError(\"Cannot have a cone with radius <= 0\")\n    if h <= 0:\n        raise ValueError(\"Cannot have a cone with height <= 0\")\n    # General Case:\n    return math.pi*r**2*h/3\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #volume of a cone with radius r and height h = (pi*r**2)/3\n    volume = math.pi*(r**2) / 3\n    volume = volume * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**2*math.pi*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=r**2*math.pi*3.14159265*h\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r**3\n    return v\ndef surface_area(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a=4*math.pi*r**2\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=h*3.14159265*r**2\n    return v\ndef area_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    a=math.pi*r**2\n    return a\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and sphere.\n    '''\n    v=volume_cone(r,h)+(volume_sphere(r))\n    return v\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder and cone.\n    '''\n    v=volume_cylinder(r,h)+(volume_cone(r,h))\n    return v\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a=4*math.pi*r**2\n    return a\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a=surface_area(r)+2*(math.pi)*(h/2)\n    return a\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere and cylinder.\n    '''\n    v=volume_sphere(r)+(volume_cylinder(r,h))\n    return v\ndef surface_area_sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere and cylinder.\n    '''\n    a=surface_area_sphere(r)+2*(math.pi)*(h/2)\n    return a\ndef surface_area_cylinder_cone(r,h):\n    '''\n    Write a function to find the surface area of a cylinder and cone.\n    '''\n    a=surface_area_cylinder(r,h)+surface_area_cone(r,h)\n    return a\ndef volume_sphere_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, and sphere.\n    '''\n    v=volume_sphere(r)+(volume_cone(r,h))+(volume_sphere(r))\n    return v\ndef volume_sphere_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, and cylinder.\n    '''\n    v=volume_sphere(r)+(volume_cone(r,h))+(volume_cylinder(r,h))\n    return v\ndef volume_sphere_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere, cylinder, and cone.\n    '''\n    v=volume_sphere(r)+(volume_cylinder(r,h))+(volume_cone(r,h))\n    return v\ndef surface_area_cylinder_cone_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cylinder, cone, and sphere.\n    '''\n    a=surface_area_cylinder(r,h)+surface_area_cone(r,h)+surface_area_sphere(r)\n    return a\ndef surface_area_cylinder_cone_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder, cone, and cylinder.\n    '''\n    a=surface_area_cylinder(r,h)+surface_area_cone(r,h)+surface_area_cylinder(r,h)\n    return a\ndef volume_sphere_cone_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, cylinder, and cone.\n    '''\n    v=volume_sphere(r)+(volume_cone(r,h))+(volume_cylinder(r,h))+(volume_cone(r,h))\n    return v\ndef surface_area_cylinder_cone_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder, cone, cylinder, and cone.\n    '''\n    a=surface_area_cylinder(r,h)+surface_area_cone(r,h)+surface_area_cylinder(r,h)+surface_area_cone(r,h)\n    return a\ndef volume_sphere_cylinder_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, cylinder, cylinder, and sphere.\n    '''\n    v=volume_sphere(r)+(volume_cylinder(r,h))+(volume_cone(r,h))+(volume_cylinder(r,h))+(volume_sphere(r))\n    return v\ndef surface_area_sphere_cylinder_cone_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cone, cylinder, cylinder, and cylinder.\n    '''\n    a=surface_area_sphere(r)+surface_area_cylinder(r,h)+surface_area_cone(r,h)+surface_area_cylinder(r,h)+surface_area_cylinder(r,h)\n    return a\ndef volume_sphere_cylinder_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, cylinder, cylinder, and sphere.\n    '''\n    v=volume_sphere(r)+(volume_cylinder(r,h))+(volume_cone(r,h))+(volume_cylinder(r,h))+(volume_sphere(r))\n    return v\ndef surface_area_sphere_cylinder_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cone, cylinder, cylinder, and sphere.\n    '''\n    a=surface_area_sphere(r)+surface_area_cylinder(r,h)+surface_area_cone(r,h)+surface_area_cylinder(r,h)+surface_area_sphere(r)\n    return a\ndef volume_sphere_cylinder_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, cylinder, cylinder, and sphere.\n    '''\n    v=volume_sphere(r)+(volume_cylinder(r,h))+(volume_cone(r,h))+(volume_cylinder(r,h))+(volume_sphere(r))\n    return v\ndef surface_area_sphere_cylinder_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cone, cylinder, cylinder, and sphere.\n    '''\n    a=surface_area_sphere(r)+surface_area_cylinder(r,h)+surface_area_cone(r,h)+surface_area_cylinder(r,h)+surface_area_sphere(r)\n    return a\ndef surface_area_sphere_cylinder_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cone, cylinder, cylinder, and sphere.\n    '''\n    a=surface_area_sphere(r)+surface_area_cylinder(r,h)+surface_area_cone(r,h)+surface_area_cylinder(r,h)+surface_area_sphere(r)\n    return a\ndef volume_sphere_cylinder_cone_cylinder_sphere(r"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi*r**2)*(h/3)\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    m = 0\n    for i in range(n):\n        if (i & (i-1) == 0):\n            if (i > m):\n                m = i\n    print(m)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        res = 1\n        while(res < n):\n            res = 2 * res\n        return res\nprint(highest_Power_of_2(5))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(2))\nprint(highest_Power_of_2(3))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i=1\n    while i<=n:\n        i=i*2\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0: \n        return -1\n    else: \n        max_power = 0\n        while True: \n            if 2**max_power > n: \n                break\n            max_power += 1\n        return max_power "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    ans = 0\n    while n & 1 == 0:\n        ans += 1\n        n >>= 1\n    return ans\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # without using bitwise operator\n    #print(bin(n))\n    count = 0\n    while (2**count) <= n:\n        count+=1\n    return count-1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return (n & -n).bit_length()\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while(n>1):\n        n=n//2\n        print(n)\n    print(n)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i=0\n    while 2**i <= n:\n        i=i+1\n    return i\n    \ndef josephus_problem(l, k): \n    '''\n    Write a python function that takes a list and an integer k and returns a boolean value \n    representing whether or not the list of items was shuffled. \n    For example, if l is [1, 2, 3, 4, 5, 6] and k is 2, then the function should return false. \n    If the list is shuffled, then the function should return true. \n    '''\n    i=0\n    lst=[]\n    while len(l)>0:\n        lst.append(l.pop(i%len(l)))\n        i=i+1\n    i=0\n    while i<k-1:\n        if lst.count(lst[i])==0:\n            return False\n        else:\n            i=i+1\n    return True\n    \ndef fibonacci(n): \n    '''\n    Write a python function that takes an integer n and returns the nth Fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \ndef find_sum_of_fibonacci_numbers(n): \n    '''\n    Write a python function to find the sum of the fibonacci numbers below n.\n    '''\n    if n<=0:\n        return 0\n    a=0\n    b=1\n    if n==1:\n        return a\n    else:\n        for i in range(2,n):\n            c=a+b\n            a=b\n            b=c\n        return c\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n & (n-1) == 0:\n        return n\n    i = 1\n    while n > i:\n        i = i << 1\n        if i == n:\n            return i\n    return i\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # NOTE: I would have liked to use a one line expression:\n    #   f = lucas(n)\n    # but because of the way Python treats expressions, \n    #   I would have to separate the expression and the function.\n    # The problem is that I need to be able to call this function in \n    #   different ways:\n    #   (1) Find the nth lucas number with zero index (default)\n    #   (2) Find the nth lucas number with one index (negative)\n    #   (3) Find the nth lucas number with two index (positive)\n    #   (4) Find the nth lucas number with three index (negative, 0, 1)\n    #   (5) Find the nth lucas number with four index (positive, -2, 0, 1)\n    #   (6) Find the nth lucas number with 5 index (negative, 0, 1, -2, 0)\n    \n    if n == 0:\n        f = 0\n    elif n == 1:\n        f = 1\n    else:\n        f = find_lucas(n-1) + find_lucas(n-2)\n    \n    return f\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return int((2*(n+1)-1)/2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 2\n    index = 1\n    while index < n:\n        lucas += lucas\n        index += 1\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 0\n    i = 1\n    while i < n:\n        i += 1\n        lucas += i\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 0\n    current = 1\n    for i in range(n):\n        lucas = current + current\n        current = lucas\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    if n == 0:\n        return lucas\n    for i in range(n-1):\n        lucas = lucas + lucas\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        print(format(item, string))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    new_string = ''\n    new_string = string.join(list_)\n    \n    return new_string\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend([string])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print(f\"{list_} formatted with string\")\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return ['{}'.format(string) for item in list_]\n    \n    \n    \nif __name__ == '__main__':\n    test_str_1 = 'Hello, World!'\n    test_str_2 = 'Hello, World!'\n    test_str_3 = 'Hello, World!'\n    test_str_4 = 'Hello, World!'\n    test_list_1 = ['Hello, World!', 'Python']\n    test_list_2 = ['Hello, World!', 'Python']\n    test_list_3 = ['Hello, World!', 'Python']\n    test_list_4 = ['Hello, World!', 'Python']\n    test_list_5 = ['Hello, World!', 'Python']\n    \n    \n    print('\\n\\ntest_str_1: {}'.format(test_str_1))\n    print('test_str_2: {}'.format(test_str_2))\n    print('test_str_3: {}'.format(test_str_3))\n    print('test_str_4: {}'.format(test_str_4))\n    print('\\ntest_list_1: {}'.format(test_list_1))\n    print('test_list_2: {}'.format(test_list_2))\n    print('test_list_3: {}'.format(test_list_3))\n    print('test_list_4: {}'.format(test_list_4))\n    print('\\ntest_list_5: {}'.format(test_list_5))\n    \n    print('\\n\\nadd_string(test_list_1, \"python\"): {}'.format(add_string(test_list_1, \"python\")))\n    print('add_string(test_list_2, \"python\"): {}'.format(add_string(test_list_2, \"python\")))\n    print('add_string(test_list_3, \"python\"): {}'.format(add_string(test_list_3, \"python\")))\n    print('add_string(test_list_4, \"python\"): {}'.format(add_string(test_list_4, \"python\")))\n    print('add_string(test_list_5, \"python\"): {}'.format(add_string(test_list_5, \"python\")))\n    print()\n    \n    print('\\n\\nadd_string(test_list_1, \"Hi!\"): {}'.format(add_string(test_list_1, \"Hi!\")))\n    print('add_string(test_list_2, \"Hi!\"): {}'.format(add_string(test_list_2, \"Hi!\")))\n    print('add_string(test_list_3, \"Hi!\"): {}'.format(add_string(test_list_3, \"Hi!\")))\n    print('add_string(test_list_4, \"Hi!\"): {}'.format(add_string(test_list_4, \"Hi!\")))\n    print('add_string(test_list_5, \"Hi!\"): {}'.format(add_string(test_list_5, \"Hi!\")))\n    print()\n    \n    print('\\n\\nadd_string(test_list_1, \"Python\"): {}'.format(add_string(test_list_1, \"Python\")))\n    print('add_string(test_list_2, \"Python\"): {}'.format(add_string(test_list_2, \"Python\")))\n    print('add_string(test_list_3, \"Python\"): {}'.format(add_string(test_list_3, \"Python\")))\n    print('add_string(test_list_4, \"Python\"): {}'.format(add_string(test_list_4, \"Python\")))\n    print('add_string(test_list_5, \"Python\"): {}'.format(add_string(test_list_5, \"Python\")))\n    print()\n    \n    print('\\n\\nadd_string(test_list_1, \"Hello, World!\"): {}'.format(add_string(test_list_1, \"Hello, World!\")))\n    print('add_string(test_list_2, \"Hello, World!\"): {}'.format(add_string(test_list_2, \"Hello, World!\")))\n    print('add_string(test_list_3, \"Hello, World!\"): {}'.format(add_string(test_list_3, \"Hello, World!\")))\n    print('add_string(test_list_4, \"Hello, World!\"): {}'.format(add_string(test_list_4, \"Hello, World!\")))\n    print('add_string(test_list_5, \"Hello, World!\"): {}'.format(add_string(test_list_5, \"Hello, World!\")))\n    print()\n    \n    print('\\n\\nadd_string(test_list_1, \"Hello, World!\"): {}'.format(add_string(test_list_1, \"Hello, World!\")))\n    print('add_string(test_list_2, \"Hello, World!\"): {}'.format(add_string(test_list_2, \"Hello, World!\")))\n    print('add_string(test_list_3, \"Hello, World!\"): {}'.format(add_string(test_list_3, \"Hello, World!\")))\n    print('add_string(test_list_4, \"Hello, World!\"): {}'.format(add_string(test_list_4, \"Hello, World!\")))\n    print('add_string(test_list_5, \"Hello, World!\"): {}'.format(add_string(test_list_5, \"Hello, World!\")))\n    print()\n    \n    print('\\n\\ntest_list_1: {}'.format(test_list_1))\n    print('test_list_2: {}'.format(test_list_2))\n    print('test_list_3: {}'.format(test_list_3))\n    print('test_list_4: {}'.format(test_list_4))\n    print('test_list_5: {}'.format(test_list_5))\n    \n    print('\\n\\nadd_string(test_list_1, \"Python\"): {}'.format(add_string(test_list_1, \"Python\")))\n    print('add_string(test_list_2, \"Python\"): {}'.format(add_string(test_list_2, \"Python\")))\n    print('add_string(test_list_3, \"Python\"): {}'.format(add_string(test_list_3, \"Python\")))\n    print('add_string(test_list_4, \"Python\"): {}'.format(add_string(test_list_4, \"Python\")))\n    print('add_string(test_list_5, \"Python\"): {}'.format(add_string(test_list_5, \"Python\")))\n    print()\n    \n    print('\\n\\nadd_string(test_list_1, \"Python\"): {}'.format(add_string(test_list_1, \"Python\")))\n    print('add_string(test_list_2, \"Python\"): {}'.format(add_string(test_list_2, \"Python\")))\n    print('add_string(test_list_3, \"Python\"): {}'.format(add_string(test_list_3, \"Python\")))\n    print('add_string(test_list_4, \"Python\"): {}'.format(add_string(test_list_4, \"Python\")))\n    print('add_string(test_list_5, \"Python\"): {}'.format(add_string(test_list_5, \"Python\")))\n    print()\n    \n    print('\\n\\nadd_string(test_list_1, \"Hello, World!\"): {}'.format(add_string(test_list_1, \"Hello, World!\")))\n    print('add_string(test_list_2, \"Hello, World!\"): {}'.format(add_string(test_list_2, \"Hello, World!\")))\n    print('add_string(test_list_3, \"Hello, World!\"): {}'.format(add_string(test_list_3, \"Hello, World!\")))\n    print('add_string(test_list_4, \"Hello, World!\"): {}'.format(add_string(test_list_4, \"Hello, World!\")))\n    print('ad"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        print(format(item, string))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {key : {key1 : l1[i], key2 : l2[i], key3 : l3[i]} for i, key in enumerate(l1)}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {i:j for i,j in zip(l1, l2)}\n    dict2 = {i:j for i,j in zip(l1, l3)}\n    dict3 = {i:j for i,j in zip(l2, l3)}\n    return dict1, dict2, dict3\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dd = {}\n    for i in l1:\n        dd[i]={}\n        dd[i][\"1\"]=l1.index(i)\n        dd[i][\"2\"]=l2.index(i)\n        dd[i][\"3\"]=l3.index(i)\n    return dd"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l2[i]] = l3[i]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {l1[i]:l2[i] for i in range(len(l1))}\n    d2 = {l1[i]:l3[i] for i in range(len(l1))}\n    d3 = {l1[i]:{l2[i]:l3[i] for i in range(len(l1))} for i in range(len(l1))}\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    l1_dictionary = dict()\n    l2_dictionary = dict()\n    l3_dictionary = dict()\n    \n    for i in range(len(l1)):\n        l1_dictionary[l1[i]] = l2[i]\n        l2_dictionary[l2[i]] = l3[i]\n        l3_dictionary[l3[i]] = i\n        \n    return l1_dictionary, l2_dictionary, l3_dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l3[i]] = l2[i]\n    return d\n    \nl1 = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nl2 = [51, 52, 53, 54, 55, 56]\nl3 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN']\nprint(convert_list_dictionary(l1, l2, l3)"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) == len(l3):\n        return {l1[i]: l2[i], l3[i]: l3[i]}\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) > 0 and len(l2) > 0 and len(l3) > 0:\n        d1 = {k: [] for k in l1}\n        d2 = {k: [] for k in l2}\n        d3 = {k: [] for k in l3}\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                for k in range(len(l3)):\n                    d1[l1[i]].append(l2[j])\n                    d2[l2[j]].append(l3[k])\n                    d3[l3[k]].append(l1[i])\n        return d1, d2, d3\n    else:\n        print('Please enter a list')\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {l1[i]: l2[i] for i in range(len(l1))}\n    dictionary.update({l3[i]: l1[i] for i in range(len(l3))})\n    return dictionary\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==0:\n        return 0\n    elif n%2 ==0:\n        return (get_max_sum(n//2)) + n\n    elif n%3 ==0:\n        return (get_max_sum(n//3)) + n\n    elif n%4 ==0:\n        return (get_max_sum(n//4)) + n\n    elif n%5 ==0:\n        return (get_max_sum(n//5)) + n\n    else:\n        return (n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    result = None\n    if n >= 1:\n        result = max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n    return result\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # max_sum = (n / 2) + (n / 3) + (n / 4) + (n / 5)\n    # max_sum = 10 + 15 + 20 + 25\n    \n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # max_sum = 10 + 15 + 20 + 25\n    \n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    # max_sum = (n / 2) + (n / 3) + (n / 4) + (n / 5)\n    \n    # n = int(input())\n    n = 10\n    max_sum = 0\n    max_sum = (n / 2) + (n / 3) + (n / 4) + (n / 5)\n    \n    return max_sum\n    \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum_helper(n):\n        if n == 0 or n == 1:\n            return n\n        else:\n            return max(max_sum_helper(n//2) + max_sum_helper(n//3) + max_sum_helper(n//4) + max_sum_helper(n//5), n)\n    \n    return max_sum_helper(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # The maximum sum (up to 10)\n    #The maximum sum is equal to the sum of the fibonacci sequence\n    #So we can use the same algorithm\n    n = 10\n    sequence = [0]*n\n    sequence[0] = 0\n    sequence[1] = 1\n    for i in range(2, n):\n        sequence[i] = max(sequence[i-2] + sequence[i-1], i)\n    return sequence[n-1]\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return max(get_max_sum(n/2), get_max_sum(n/3)) + n\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3)) + n*2\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 4\n    if n==5:\n        return 5\n    \n    return max(get_max_sum(n//2),get_max_sum(n//3),get_max_sum(n//4),get_max_sum(n//5))+n\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # if len(input_list) == 0:\n    #     return -1\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_list = input_list[i]\n    \n    print('Max length list = ', max_length_list)\n    print('Max length = ', max_length)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_max = max(input_list, key = lambda x : len(x))\n    print(\"max_length_list: \", list_max)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(0, len(input_list)):\n        cur_length = len(input_list[i])\n        if cur_length > max_length:\n            max_length = cur_length\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Your Code Here\n    max_length = 0\n    for value in input_list:\n        if len(value) > max_length:\n            max_length = len(value)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #if len(input_list) == 0:\n    #    return None\n    #else:\n    if not input_list:\n        return None\n    else:\n        current_list = input_list\n        while len(current_list)!= 1:\n            for element in current_list:\n                for next_element in current_list:\n                    if element == next_element:\n                        continue\n                    else:\n                        return current_list\n            current_list = current_list[1:]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for each in input_list:\n        if len(each) > max_length:\n            max_length = len(each)\n    for each in range(max_length):\n        for element in input_list:\n            if len(element) < max_length:\n                element += \" \"\n    return max_length, input_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return -1\n    elif len(input_list) == 1:\n        return 0\n    else:\n        smallest_list = input_list.copy()\n        smallest_list.remove(max(smallest_list))\n        if len(smallest_list) == 0:\n            return len(input_list)\n        elif len(smallest_list) == 1:\n            return len(input_list) - 1\n        else:\n            return max_length_list(smallest_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) >= max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #print(test_tup)\n    if len(test_tup) > 2 and len(set(test_tup)) == len(test_tup):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    dictionary = {}\n    for item in test_tup:\n        if item in dictionary:\n            return False\n        else:\n            dictionary[item] = 1\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count_dict = dict()\n    for index,val in enumerate(test_tup):\n        if val in count_dict.keys():\n            return False\n        else:\n            count_dict[val] = index\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    a = list(test_tup)\n    a = set(a)\n    if len(a) == len(test_tup):\n        print(\"Tuple is distinct.\")\n    else:\n        print(\"Tuple contains duplicates.\")\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        print('All items in tuple are distinct')\n        return True\n    else:\n        print('All items in tuple are not distinct')\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for x in test_tup:\n        if test_tup.count(x) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    s = set()\n    for i in test_tup:\n        if i in s:\n            return False\n        else:\n            s.add(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    x = set()\n    if len(test_tup) == len(x):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Your code here\n    if len(test_tup) == len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # list_str1 = list(str1)\n    # for i in range(len(list_str1)):\n    #     list_str1[i] = list_str1[i].lower()\n    # for i in range(len(list_str1)):\n    #     if list_str1[i] in list_str1[0:i]:\n    #         if list_str1[i] == list_str1[i-1]:\n    #             break\n    #         else:\n    #             continue\n    #     else:\n    #         return list_str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    letter_list = list(str1)\n    for i in range(len(letter_list)):\n        if letter_list.count(letter_list[i]) == 1:\n            return letter_list[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n    \n    for char in str1:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    \n    for char in str1:\n        if chars[char] == 1:\n            return char\n            \n            \n    return \"No First Non-Repeated Character\"\n    \nprint(first_non_repeating_character(\"abcd\")) # d\nprint(first_non_repeating_character(\"aabccd\")) # c\nprint(first_non_repeating_character(\"abccdefff\")) # No First Non-Repeated Character\nprint(first_non_repeating_character(\"asfgsfhgdghhjgfghg\")) # f\nprint(first_non_repeating_character(\"asfgsfhgdghhjgfghg\")) # No First Non-Repeated Character\nprint(first_non_repeating_character(\"asdfghjkdghhgjhgfghghjhgf\")) # h\nprint(first_non_repeating_character(\"asdfghjkdghhgjhgfghghjhgf\")) # No First Non-Repeated Character\nprint(first_non_repeating_character(\"kghfhgfggfg\")) # g\nprint(first_non_repeating_character(\"\")) # No First Non-Repeated Character\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # take the first character\n    # loop through each character in the string\n    # if that character is equal to the first character\n    # check if that character was seen before\n    # if the character was seen before, stop the loop\n    # else, move to the next character in the string\n    # if the character was not seen before, return the character\n    \n    # create a list to store the characters\n    # create a variable to store the value of the first character\n    # loop through the string\n    # if the character is already stored in the list, stop the loop\n    # if the character is not stored in the list, add it\n    # return the value of the first character\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    else:\n        return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n    for char in str1:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    for char in chars:\n        if chars[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Using a dictionary - O(n) time complexity and O(n) space complexity\n    d = {}\n    for i in str1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] == 1:\n            return i\n    return'' # if nothing is found\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    occ_counter = dict()\n    for char in str1:\n        if char not in occ_counter:\n            occ_counter[char] = 1\n        else:\n            occ_counter[char] += 1\n    for char in str1:\n        if occ_counter[char] == 1:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_occurence = {}\n    for i in str1:\n        if i not in first_occurence:\n            first_occurence[i] = 1\n        else:\n            first_occurence[i] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_data = str1.replace(' ', '').lower()\n    \n    for i in range(len(str_data)):\n        # print(i, str_data[i])\n        if str_data.count(str_data[i]) == 1:\n            return str_data[i]\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return(re.search(regex,string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code here\n    if not re.search(regex,string):\n        print(\"Invalid string\")\n        return\n    if (string[0]==string[-1]):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string) is not None:\n        return True\n    else:\n        return False\n        \n        \n        \n        \nprint(\"<--1-\")    \nprint(check_char('abcd')) # True\nprint(check_char('abc')) # False\nprint(check_char('ab')) # False\nprint(check_char('')) # False\nprint(\"<--2-\")    \nprint(check_char('Abc')) # False\nprint(check_char('abc')) # True\nprint(check_char('abcdef')) # True\nprint(check_char('')) # False\nprint(\"<--3-\")    \nprint(check_char('Abc')) # False\nprint(check_char('abc')) # True\nprint(check_char('abcdef')) # True\nprint(check_char('abcdefgh')) # False\nprint(\"<--4-\")    \nprint(check_char('ab')) # False\nprint(check_char('b')) # False\nprint(check_char('a')) # True\nprint(check_char('A')) # True\nprint(check_char('')) # False\nprint(\"<--5-\")    \nprint(check_char('AB')) # True\nprint(check_char('Ab')) # True\nprint(check_char('abc')) # True\nprint(check_char('abcde')) # False\nprint(check_char('abcd')) # True\nprint(check_char('abcdA')) # False\nprint(check_char('aab')) # False\nprint(\"<--6-\")    \nprint(check_char('abcba')) # True\nprint(check_char('abcbc')) # False\nprint(check_char('aabcbc')) # False\nprint(check_char('abcbcde')) # False\nprint(check_char('abcbcdef')) # False\nprint(check_char('abcbcdeaa')) # True\nprint(check_char('abcbcdeab')) # False\nprint(check_char('abcbcde')) # False\nprint(check_char('abcbcdef')) # False\nprint(check_char('abcbcde')) # False\nprint(check_char('abcbcdef')) # False\nprint(check_char('')) # False\nprint(\"<--7-\")    \nprint(check_char('abc')) # True\nprint(check_char('abcdefg')) # False\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdef')) # True\nprint(check_char('abcdef')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg')) # True\nprint(check_char('abcdefg"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #If match is found return true\n    if re.match(regex,string) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = '^[a-z]$|^([a-z]).*\\1$'\n    if re.match(pattern,string):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return 'true'\n    else:\n        return 'false'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    return True if match else False\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples'))\nprint(check_char('apples"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = input()\n    print(True if (string[0] == string[-1]) else False)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(\"\\n-------- String Regex Check --------\")\n    if re.search(regex,string):\n        print(\"True\")\n    else:\n        print(\"False\")\n    print(\"\\n-----------------------------------------\")\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    def median_of_list(arr):\n        arr.sort()\n        if len(arr)%2 == 0:\n            return (arr[len(arr)//2-1] + arr[len(arr)//2])/2\n        else:\n            return arr[len(arr)//2]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = (a+b+c)/2\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[length//2] + numbers[length//2-1])/2\n    else:\n        median = numbers[length//2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b > c:\n        print(c)\n    elif a > c > b:\n        print(b)\n    elif a > b > c:\n        print(a)\n    else:\n        print(a)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return(sorted([a,b,c])[1])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    return(a+b+c) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return a,b,c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a<b<c:\n        return (b+c)/2\n    if b<a<c:\n        return (a+c)/2\n    if c<a<b:\n        return (a+b)/2\n    if a==b==c:\n        return a\n    if a==b==c:\n        return b\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c:\n        return c\n    if a==b==c"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n    \ndef count_tens(nums):\n    '''\n    Write a function to count the occurrence of each tens digit in a given list.\n    '''\n    pass\n    \ndef repeat_digits(nums):\n    '''\n    Write a function to find all the repeating numbers of a given list.\n    '''\n    pass\n    \ndef count_negatives(nums):\n    '''\n    Write a function to count the occurrence of each negative number in a given list.\n    '''\n    pass\n    \ndef sum_in_order(nums):\n    '''\n    Write a function to find the sum of all the digits in a given list.\n    '''\n    pass\n    \ndef count_sevens(nums):\n    '''\n    Write a function to count the occurrence of each 7 digit number in a given list.\n    '''\n    pass\n    \ndef count_zeroes(nums):\n    '''\n    Write a function to count the occurrence of each 0 digit number in a given list.\n    '''\n    pass\n    \ndef is_power(nums):\n    '''\n    Write a function to check if a given list contains a power of 5 or not.\n    '''\n    pass\n    \ndef sum_of_digits_in_order(nums):\n    '''\n    Write a function to find the sum of all the digits in a given list in the given order.\n    '''\n    pass\n    \ndef sum_of_digits_with_no_zeros(nums):\n    '''\n    Write a function to find the sum of all the digits in a given list.\n    '''\n    pass\n    \ndef max_digit(nums):\n    '''\n    Write a function to find the maximum digit in a given list.\n    '''\n    pass\n    \ndef count_digits(nums):\n    '''\n    Write a function to count the occurrence of each digit in a given list.\n    '''\n    pass\n    \ndef sum_of_digits_in_order_except_twos(nums):\n    '''\n    Write a function to find the sum of all the digits in a given list.\n    '''\n    pass\n    \ndef sum_of_digits_with_no_zeros_except_threes(nums):\n    '''\n    Write a function to find the sum of all the digits in a given list.\n    '''\n    pass\n    \ndef sum_of_digits_with_no_zeros_except_threes(nums):\n    '''\n    Write a function to find the sum of all the digits in a given list.\n    '''\n    pass\n    \ndef is_palindrome(nums):\n    '''\n    Write a function to check if a given list is a palindrome or not.\n    '''\n    pass\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two given strings are anagram or not.\n    '''\n    pass\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two given strings are anagram or not.\n    '''\n    pass\n    \ndef remove_k_digits(num, k):\n    '''\n    Write a function to remove k digits from a given number and return the number formed after removing the k digits.\n    '''\n    pass\n    \ndef count_negatives_in_range(start, stop):\n    '''\n    Write a function to count the occurrence of each negative number in a given range.\n    '''\n    pass\n    \ndef has_seven(nums):\n    '''\n    Write a function to check if a given list contains any 7 digit number.\n    '''\n    pass\n    \ndef reverse_list(nums):\n    '''\n    Write a function to reverse a given list.\n    '''\n    pass\n    \ndef is_palindrome_sorting(nums):\n    '''\n    Write a function to check if a given list is a palindrome or not.\n    '''\n    pass\n    \ndef factorial(num):\n    '''\n    Write a function to find the factorial of a given number.\n    '''\n    pass\n    \ndef count_evens(nums):\n    '''\n    Write a function to count the occurrence of each even number in a given list.\n    '''\n    pass\n    \ndef count_odds(nums):\n    '''\n    Write a function to count the occurrence of each odd number in a given list.\n    '''\n    pass\n    \ndef remove_all(nums, val):\n    '''\n    Write a function to remove all occurrences of a value in a given list.\n    '''\n    pass\n    \ndef remove_all_three_times(nums):\n    '''\n    Write a function to remove all occurrences of a given value in a given list.\n    '''\n    pass\n    \ndef remove_duplicates(nums):\n    '''\n    Write a function to remove all duplicate elements in a given list.\n    '''\n    pass\n    \ndef count_negatives(nums):\n    '''\n    Write a function to count the occurrence of each negative number in a given list.\n    '''\n    pass\n    \ndef count_negatives(nums):\n    '''\n    Write a function to count the occurrence of each negative number in a given list.\n    '''\n    pass\n    \ndef count_negatives(nums):\n    '''\n    Write a function to count the occurrence of each negative number in a given list.\n    '''\n    pass\n    \ndef sum_of_negatives(nums):\n    '''\n    Write a function to find the sum of all the negative numbers in a given list.\n    '''\n    pass\n    \ndef count_substrings(str, ch):\n    '''\n    Write a function to find the count of all the substrings of given length in a given string.\n    '''\n    pass\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    pass\n    \ndef count_pairs(nums):\n    '''\n    Write a function to find the count of all the pairs in a given list.\n    '''\n    pass\n    \ndef replace_digits(nums, replace_with):\n    '''\n    Write a function to replace all the digits in a given list with another value.\n    '''\n    pass\n    \ndef replace_negative(nums, replace_with):\n    '''\n    Write a function to replace all negative values in a given list with another value.\n    '''\n    pass\n    \ndef remove_every_other(nums):\n    '''\n    Write a function to remove all occurrences of an even number from a given list.\n    '''\n    pass\n    \ndef count_values(nums, target):\n    '''\n    Write a function to count the occurrence of each value in a given list.\n    '''\n    pass\n    \ndef count_values(nums, target):\n    '''\n    Write a function to count the occurrence of each value in a given list.\n    '''\n    pass\n    \ndef find_lowest_value(nums):\n    '''\n    Write a function to find the lowest value in a given list.\n    '''\n    pass\n    \ndef find_lowest_value(nums):\n    '''\n    Write a function to find the lowest value in a given list.\n    '''\n    pass\n    \ndef count_occurrences(nums, val):\n    '''\n    Write a function to count the occurrence of each value in a given list.\n    '''\n    pass\n    \ndef find_highest_value(nums):\n    '''\n    Write a function to find the highest value in a given list.\n    '''\n    pass\n    \ndef count_positives_and_zeros(nums):\n    '''\n    Write a function to count the occurrence of each value in a given list.\n    '''\n    pass\n    \ndef count_positives_and_zeros(nums):\n    '''\n    Write a function to count the occurrence of each value in a given list.\n    '''\n    pass\n    \ndef sum_of_values(nums):\n    '''\n    Write a function to sum all the values in a given list.\n    '"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(n) for n in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # # return [int(n) for n in str(sum([int(n) for n in nums]))]\n    return sum([int(n) for n in str(sum(nums))])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums.sort()\n    total = 0\n    for num in nums:\n        total += int(num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #return sum(map(int, str(n)))\n    return sum(list(map(int, list(str(n)))))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = 0\n    for num in nums:\n        sums += num % 10\n    return sums\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += sum_of_digits_helper(num)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    num_sum = 0\n    for num in nums:\n        num_sum += sum_digits(num)\n    return num_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum_of_digits_recursive(num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum_of_digits_helper(num)\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return(test_tup1[0] ^ test_tup1[1], test_tup2[0] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Intializing the tuples\n    int_tup1, int_tup2 = map(int, (test_tup1, test_tup2))\n    res = int_tup1 ^ int_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    print(test_tup1, ': ', test_tup1 ^ test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (tuple(map(operator.xor, test_tup1, test_tup2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1], test_tup1[2] ^ test_tup2[2])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return result_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (int(test_tup1[0]) ^ int(test_tup2[0]), int(test_tup1[1]) ^ int(test_tup2[1]))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #your code here\n    \n    #using the Counter class\n    from collections import Counter\n    test_set = Counter(test_list)\n    return len(test_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count_tup = 0\n    for i in range(0,len(test_list)):\n        tup = test_list[i]\n        if len(tup) == 1:\n            count_tup += 1\n        if len(tup) > 1:\n            count_tup += 1\n    return count_tup\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    sorted_list = []\n    for item in test_list:\n        if item not in sorted_list:\n            sorted_list.append(item)\n    return len(sorted_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(sorted(test_list)) for test_list in test_list))\n    \ndef multiply_lists(test_list1, test_list2):\n    '''\n    Write a function to multiply the given list of numbers.\n    '''\n    return [(x,y) for x in test_list1 for y in test_list2]\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = dict()\n    for i in test_list:\n        if i in freq_dict.keys():\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    print(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        freq[item] = freq.get(item, 0) + 1\n    return freq\n    \n    \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i], )\n    return result_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    sum_tup = []\n    for i in range(len(test_tup1)):\n        sum_tup.append(tuple([test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]]))\n    \n    return sum_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return list(map(lambda x, y: x + y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1 = len(test_tup1)\n    l2 = len(test_tup2)\n    if l1!= l2:\n        print('Lengths of both the tuples are not equal')\n        return None\n    else:\n        result = ()\n        for i in range(l1):\n            result = result + (test_tup1[i] + test_tup2[i],)\n        return result\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_list = list(zip(test_tup1, test_tup2))\n    test_list.sort()\n    # print(test_list)\n    first_tuple = []\n    second_tuple = []\n    \n    for i in range(len(test_list)):\n        # print(test_list[i][0], test_list[i][1])\n        if test_list[i][0]!= 0:\n            first_tuple.append(test_list[i][0])\n        if test_list[i][1]!= 0:\n            second_tuple.append(test_list[i][1])\n    \n    # print(first_tuple, second_tuple)\n    result = (first_tuple, second_tuple)\n    print(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #Test Cases\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    print(test_list1)\n    print(test_list2)\n    for i in range(0, len(test_list1)):\n        test_list1[i] += test_list2[i]\n    print(test_list1)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(sum, zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    index_num1 = 0\n    index_num2 = 0\n    test_tup3 = []\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Accessing elements of the given tuples with index\n    # time complexity = O(n)\n    # space complexity = O(n)\n    # for tup1 in tup1:\n    #     for tup2 in tup2:\n    #         print(tup1, tup2)\n    #         print(tup1 + tup2)\n    return tuple(tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    #return tuple(tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = tuple(map(lambda x, y: x + y, test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif b<a:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        print(\"{} is greater than {}\".format(a,b))\n    elif a==b:\n        print(\"Both are same\")\n    else:\n        print(\"{} is less than {}\".format(a,b))\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<=b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        print(a)\n    else:\n        print(b)\nminimum(2,7)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \ndef minimum(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return min(min(a,b),c)\n    \ndef minimum(a,b,c,d):\n    '''\n    Write a python function to find the minimum of four numbers.\n    '''\n    return min(min(min(a,b),c),d)\n    \ndef minimum(a,b,c,d,e):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return min(min(min(a,b),c),d,e)\n    \ndef minimum(a,b,c,d,e,f):\n    '''\n    Write a python function to find the minimum of six numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f)\n    \ndef minimum(a,b,c,d,e,f,g):\n    '''\n    Write a python function to find the minimum of seven numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g)\n    \ndef minimum(a,b,c,d,e,f,g,h):\n    '''\n    Write a python function to find the minimum of eight numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h)\n    \ndef minimum(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a python function to find the minimum of nine numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a python function to find the minimum of ten numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a python function to find the minimum of eleven numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a python function to find the minimum of twelve numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m):\n    '''\n    Write a python function to find the minimum of thirteen numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n):\n    '''\n    Write a python function to find the minimum of fourteen numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o):\n    '''\n    Write a python function to find the minimum of fifteen numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p):\n    '''\n    Write a python function to find the minimum of sixteen numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o,p)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q):\n    '''\n    Write a python function to find the minimum of seventeen numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o,p,q)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r):\n    '''\n    Write a python function to find the minimum of eighteen numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o,p,q,r)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s):\n    '''\n    Write a python function to find the minimum of nineteen numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t):\n    '''\n    Write a python function to find the minimum of twenty numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u):\n    '''\n    Write a python function to find the minimum of twenty-one numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v):\n    '''\n    Write a python function to find the minimum of twenty-two numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w):\n    '''\n    Write a python function to find the minimum of twenty-three numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x):\n    '''\n    Write a python function to find the minimum of twenty-four numbers.\n    '''\n    return min(min(min(a,b),c),d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return (a+b+abs(a-b))/4\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex)!= len(tuple1):\n        return False\n    for i in range(len(tuplex)):\n        if tuplex[i]!= tuple1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\ndef check_tuple(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuple1)):\n        if tuplex == tuple1[i]:\n            return True\n    return False\ndef list_intersection(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    list_intersection = list(set(list1) & set(list2))\n    return list_intersection\ndef list_intersection2(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_intersection3(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_intersection4(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_intersection5(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_union(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n    for j in range(0,len(list2)):\n        if list2[j] not in new_list:\n            new_list.append(list2[j])\n    return new_list\ndef list_union2(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n    for j in range(0,len(list2)):\n        if list2[j] not in new_list:\n            new_list.append(list2[j])\n    return new_list\ndef list_union3(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n    for j in range(0,len(list2)):\n        if list2[j] not in new_list:\n            new_list.append(list2[j])\n    return new_list\ndef list_union4(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n    for j in range(0,len(list2)):\n        if list2[j] not in new_list:\n            new_list.append(list2[j])\n    return new_list\ndef list_union5(list1,list2):\n    '''\n    Write a function to find the common elements between two lists.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in new_list:\n            new_list.append(list1[i])\n    for j in range(0,len(list2)):\n        if list2[j] not in new_list:\n            new_list.append(list2[j])\n    return new_list\ndef list_difference(list1,list2):\n    '''\n    Write a function to find the elements that are present in the first list but not in the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_difference2(list1,list2):\n    '''\n    Write a function to find the elements that are present in the first list but not in the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_difference3(list1,list2):\n    '''\n    Write a function to find the elements that are present in the first list but not in the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_difference4(list1,list2):\n    '''\n    Write a function to find the elements that are present in the first list but not in the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_difference5(list1,list2):\n    '''\n    Write a function to find the elements that are present in the first list but not in the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_difference_intersect(list1,list2):\n    '''\n    Write a function to find the elements that are present in the first list but not in the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_difference_intersect2(list1,list2):\n    '''\n    Write a function to find the elements that are present in the first list but not in the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_difference_intersect3(list1,list2):\n    '''\n    Write a function to find the elements that are present in the first list but not in the second list.\n    '''\n    new_list = []\n    for i in range(0,len(list1)):\n        if list1[i] not in list2:\n            new_list.append(list1[i])\n    return new_list\ndef list_difference_intersect4(list1,list2):\n    '''\n    Write a function to find the elements that are present in the first lis"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i==tuple1:\n            print('Found it')\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        assert len(tuplex)==len(tuple1)\n        assert sorted(tuplex)==sorted(tuple1)\n    except AssertionError:\n        print('Check Tuple Function Error: Different Length or Tuple')\n    except:\n        print('Check Tuple Function Error: Something else')\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    flag = 0\n    if tuplex == tuple1:\n        flag = 1\n    return flag\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1: \n        if i == tuplex: \n            return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuple1)):\n        if tuplex == tuple1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        print(\"even\")\n    else:\n        print(\"odd\")\n    \n    return \n    \nif __name__ == '__main__': \n    x = int(input())\n    find_Parity(x)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x % 2 == 0):\n        return True\n    else:\n        return False\n        \ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x % 2 == 0):\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    a = x % 2\n    if a == 0:\n        print(a)\n    else:\n        print(a)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x & 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    str_n = sorted(str_n)\n    result = int(''.join(str_n))\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    if len(n) == 1:\n        return int(n)\n    n = int(n)\n    i = 0\n    while i < len(n) - 1:\n        if n[i] > n[i + 1]:\n            return int(''.join([str(i) for i in sorted(list(n), reverse=True)]))\n        i += 1\n    return int(''.join([str(i) for i in sorted(list(n), reverse=True)]))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # get a sorted version of the original number\n    n = str(n)\n    n = sorted(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n<10:\n        return n\n    \n    # add 0 to end\n    num = str(n)\n    while(len(num)<3):\n        num += str(0)\n    \n    # first digit must be bigger\n    num = str(int(num[0])+1) + num[1:]\n    return int(num)\n    "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    list_num = list(num)\n    for i in range(len(list_num)):\n        if list_num[i] == '0':\n            continue\n        elif int(list_num[i]) <= int(list_num[i-1]):\n            list_num[i] = list_num[i] + list_num[i-1]\n            list_num[i-1] = '0'\n            num = ''.join(list_num)\n            list_num = list(num)\n            \n    return int(num)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # if the number is negative or 0, return -1\n    if n <= 0 or n == 0:\n        return -1\n    # convert the number to a list, sort the list, and return the head of the list\n    # for example if the given number is 1234567, and we want the bigger number, we have 123456\n    num = list(str(n))\n    num.sort()\n    return int(''.join(num))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)):\n        if n[i] == '9':\n            if n[i-1] == '0':\n                return '9' + '0' + '9' + '0'\n            else:\n                return int(n[:i]) + '0' + n[i:]\n        elif n[i] == '0':\n            if n[i-1]!= '9':\n                return n[:i] + '1' + n[i:]\n            else:\n                return n[:i] + '0' + n[i:]\n        else:\n            pass\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_num = str(n)\n    len_num = len(str_num)\n    bigger = 0\n    for i in range(len_num):\n        if i == 0 and int(str_num[i]) == 9:\n            bigger = int(str_num[i]) + 1\n        else:\n            break\n    for i in range(len_num - 1, -1, -1):\n        if int(str_num[i]) == 9:\n            bigger = int(str_num[i]) + 1\n        else:\n            break\n    if int(bigger) == 0:\n        return bigger\n    else:\n        return int(str(bigger) + str_num[:len_num - 1])\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = list(str(n))\n    count = 0\n    for i in range(len(l)):\n        if(l[i]!= '0'):\n            count += 1\n    if(count == len(l)):\n        return n\n    for i in range(len(l) - 1, -1, -1):\n        if(l[i]!= '0'):\n            break\n    if(i == 0):\n        return '0'\n    l[i] = str(int(l[i]) - 1)\n    for j in range(i + 1, len(l)):\n        l[j] = str(int(l[j]) + 1)\n    return int(''.join(l))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    string_n = str(n)\n    list_n = list(string_n)\n    for i in range(len(list_n)-1):\n        if int(list_n[i]) > int(list_n[i+1]):\n            temp = int(list_n[i])\n            list_n[i] = int(list_n[i+1])\n            list_n[i+1] = temp\n    string_n = \"\".join(list_n)\n    return int(string_n)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    '''\n    https://www.geeksforgeeks.org/k-smallest-pairs-in-two-sorted-arrays/\n    '''\n    '''\n    Time complexity: O(n*m)\n    Space complexity: O(n)\n    '''\n    n = len(nums1)\n    m = len(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    heap = []\n    pq = [(nums1[0] + nums2[0], 0, 0)]\n    c = 0\n    res = []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    res = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i], nums2[j])\n            if len(heap) < k:\n                heapq.heappush(heap, pair)\n            elif heap[0][0] > pair[0]:\n                heapq.heappushpop(heap, pair)\n    for item in heap:\n        res.append(item)\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_pairs = []\n    if nums1 and nums2:\n        n1, n2 = len(nums1), len(nums2)\n        if n1 == n2:\n            if k <= 0:\n                return []\n            heapq.heappush(smallest_pairs, (nums1[0] + nums2[0], (nums1[0], nums2[0])))\n            smallest_pairs.sort(key = lambda x: x[0])\n            for _ in range(1, k):\n                _, (a, b) = heapq.heappop(smallest_pairs)\n                heapq.heappush(smallest_pairs, (a + b, (a, b)))\n            return list(map(lambda x: x[1], smallest_pairs))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a dictionary to map each array element to its count and sort the dictionary using heapq.\n    d = {}\n    for i in range(len(nums1)):\n        d[nums1[i]] = d.get(nums1[i], 0) + 1\n    for i in range(len(nums2)):\n        d[nums2[i]] = d.get(nums2[i], 0) + 1\n    d = {k: v for k, v in sorted(d.items(), key=lambda item: item[1])}\n    # Heapify the sorted dictionary and return top k elements\n    return heapq.nsmallest(k, d, key=lambda k: d[k])\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k < 0:\n        return []\n    if k > len(nums1) * len(nums2):\n        return []\n    # get the smallest elements in the first array\n    # m = len(nums1)\n    # heap = []\n    # for i in range(m):\n    #     heapq.heappush(heap, (nums1[i], i))\n    # res = []\n    # # get the smallest pairs\n    # for j in range(k):\n    #     v, i = heapq.heappop(heap)\n    #     res.append((nums1[i], v))\n    # return res\n    \n    # get the smallest elements in the first array\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    k = min(k, len(nums1))\n    if k == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a dictionary to hold the frequencies of each element\n    n = len(nums1)\n    f = {}\n    for e in nums1:\n        if e in f:\n            f[e] += 1\n        else:\n            f[e] = 1\n    # Now find the second dictionary which holds the frequencies of the elements in the second array\n    m = len(nums2)\n    s = {}\n    for e in nums2:\n        if e in s:\n            s[e] += 1\n        else:\n            s[e] = 1\n    # Now we have to find all the pairs in the second dictionary and create a priority queue out of the frequencies\n    pq = []\n    for e in s:\n        heapq.heappush(pq, (s[e], e))\n    # Now we have to check the frequencies of the elements in the first array and find the number of pairs which need to be compared\n    ans = 0\n    while pq and k > 0:\n        # Pop the top element from the priority queue\n        e1 = heapq.heappop(pq)[1]\n        # Find the frequency of the element in the first array\n        f1 = f[e1]\n        # Pop the top element from the priority queue\n        e2 = heapq.heappop(pq)[1]\n        # Find the frequency of the element in the second array\n        f2 = s[e2]\n        # print(e1, e2)\n        if f1 <= f2:\n            # Check if the frequency of the elements in the first array is less than or equal to the second array\n            k -= 1\n            # If they are equal then add the pair to the list of pairs\n            ans += 1\n            # Add the frequency of the element in the first array to the dictionary so that it will be counted again\n            f[e1] += 1\n            # Add the frequency of the element in the second array to the dictionary so that it will be counted again\n            f[e2] += 1\n        # Add the element in the first array to the priority queue\n        heapq.heappush(pq, (f1, e1))\n        # Add the element in the second array to the priority queue\n        heapq.heappush(pq, (f2, e2))\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    m, n = len(nums1), len(nums2)\n    if m * n <= k:\n        return []\n    for i in range(m):\n        heapq.heappush(heap, (nums1[i] + nums2[0], nums1[i], nums2[0]))\n    for _ in range(k - 1):\n        _, a, b = heapq.heappop(heap)\n        heapq.heappush(heap, (nums1[a] + nums2[n - 1], a, nums2[n - 1]))\n    ans = []\n    for i in range(k):\n        _, a, b = heapq.heappop(heap)\n        ans.append([a, b])\n    return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    idx1 = idx2 = 0\n    n = len(nums1)\n    m = len(nums2)\n    while idx1 < n and idx2 < m:\n        if nums1[idx1] < nums2[idx2]:\n            pairs.append([nums1[idx1], nums2[idx2]])\n            idx1 += 1\n        else:\n            idx2 += 1\n    return pairs[:k]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = float('inf')\n    for t1, t2 in list1:\n        prod = t1 * t2\n        if prod < min_prod:\n            min_prod = prod\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in list1:\n        min_product = i[0] * i[1]\n        if min_product < min_product:\n            min_product = i[0] * i[1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        if list1[i][0] * list1[i][1] < min_product:\n            min_product = list1[i][0] * list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0]\n    min_product_index = 0\n    for i in range(len(list1)):\n        if min_product > list1[i]:\n            min_product = list1[i]\n            min_product_index = i\n    return min_product_index, min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Your Code Here\n    l=list1\n    l.sort()\n    return (l[0][0]*l[0][1])\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]\n    for i in range(1, len(list1)):\n        if min_product > list1[i][0]:\n            min_product = list1[i][0]\n    for i in range(1, len(list1)):\n        if min_product > list1[i][1]:\n            min_product = list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x:x[0])\n    # print(list1)\n    min_product = list1[0]\n    if len(list1) == 0:\n        return 0\n    for i in range(0,len(list1)):\n        if i == 0:\n            temp = list1[i]\n        else:\n            if temp[0] > list1[i][0]:\n                temp = list1[i]\n        if temp[0] < min_product[0]:\n            min_product = temp\n        if i == len(list1)-1:\n            return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1)\n    product = 1\n    for i in range(len(list1)):\n        product = product*list1[i][1]\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initiate min product to be the largest\n    min_product = float('inf')\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            a, b = list1[i]\n            c, d = list1[j]\n            min_product = min(min_product, (a * b) * (c * d))\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for x in listval:\n        if x < min_val:\n            min_val = x\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for val in listval:\n        if val < min_value:\n            min_value = val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    #code here\n    min_val = min(listval)\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = listval\n    m = l[0]\n    for i in range(1,len(l)):\n        if l[i] < m:\n            m = l[i]\n    return m\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=9999999\n    for i in range(len(listval)):\n        if(listval[i]<min):\n            min=listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    \n    min_val = listval[0]\n    \n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # if len(listval) == 0:\n    #     return None\n    # elif len(listval) == 1:\n    #     return listval[0]\n    # else:\n    #     listval.sort()\n    #     return listval[0]\n    return min(listval)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = ''\n    if word[0].isupper() and word[1].islower():\n        for i in range(len(word)):\n            if word[i].islower():\n                s += word[i].upper()\n            else:\n                s += word[i]\n        return s\n    else:\n        return word\ndef snake_to_camel_no_upper(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = ''\n    for i in range(len(word)):\n        if word[i].islower():\n            s += word[i].upper()\n        else:\n            s += word[i]\n    return s\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    s = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            s += word[i].lower()\n        else:\n            s += word[i]\n    return s\ndef camel_to_snake_no_upper(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    s = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            s += word[i].lower()\n        else:\n            s += word[i]\n    return s\nclass DataType:\n    def __init__(self):\n        self.data = {}\n    def getData(self):\n        return self.data\n    def getDataKey(self):\n        return self.data.keys()\n    def setData(self, key, value):\n        self.data[key] = value\n    def setDataValue(self, key, value):\n        if key in self.getDataKey():\n            self.data[key] = value\n        else:\n            raise Exception('Invalid key')\n    def getDataValue(self, key):\n        if key in self.getDataKey():\n            return self.data[key]\n        else:\n            raise Exception('Invalid key')\n    def isKeyInData(self, key):\n        if key in self.getDataKey():\n            return True\n        else:\n            return False\n    def checkIfKeyInData(self, key):\n        if key in self.getDataKey():\n            return True\n        else:\n            return False\n    def deleteKey(self, key):\n        if self.isKeyInData(key):\n            self.data.pop(key)\n        else:\n            raise Exception('Key doesn\\'t exist')\n    def deleteValue(self, key):\n        if self.checkIfKeyInData(key):\n            self.data.pop(key)\n        else:\n            raise Exception('Key doesn\\'t exist')\n    def setKey(self, key, value):\n        self.setData(key, value)\n    def getKey(self, key):\n        return self.getDataValue(key)\n    def hasKey(self, key):\n        if key in self.getDataKey():\n            return True\n        else:\n            return False\n    def hasValue(self, value):\n        if value in self.getDataValue():\n            return True\n        else:\n            return False\n    def hasValueInData(self, value):\n        if value in self.getDataValue():\n            return True\n        else:\n            return False\n    def deleteKeyInData(self, key):\n        if self.checkIfKeyInData(key):\n            self.data.pop(key)\n        else:\n            raise Exception('Key doesn\\'t exist')\n    def deleteValueInData(self, value):\n        if self.hasValueInData(value):\n            self.data.pop(value)\n        else:\n            raise Exception('Value doesn\\'t exist')\n    def deleteAllData(self):\n        self.data.clear()\n    def checkIfValueInData(self, value):\n        if value in self.getDataValue():\n            return True\n        else:\n            return False\n    def addValue(self, key, value):\n        self.setDataValue(key, value)\n    def getValue(self, key):\n        if self.hasKey(key):\n            return self.getDataValue(key)\n        else:\n            return False\n    def getValueInData(self, value):\n        if self.hasValueInData(value):\n            return self.getDataValueInData(value)\n        else:\n            return False\n    def getDataValueInData(self, value):\n        return self.getDataValue(value)\n    def addKey(self, key, value):\n        self.setKey(key, value)\n    def getKey(self, key):\n        if self.hasKey(key):\n            return self.getDataValue(key)\n        else:\n            return False\n    def getKeyInData(self, key):\n        if self.hasKey(key):\n            return self.getDataKey(key)\n        else:\n            return False\n    def checkIfKey(self, key):\n        if self.hasKey(key):\n            return True\n        else:\n            return False\n    def checkIfValue(self, value):\n        if self.hasValue(value):\n            return True\n        else:\n            return False\n    def removeValue(self, value):\n        if self.checkIfValue(value):\n            self.deleteValue(value)\n        else:\n            raise Exception('Value doesn\\'t exist')\n    def deleteValueInData(self, value):\n        if self.checkIfValueInData(value):\n            self.deleteValueInData(value)\n        else:\n            raise Exception('Value doesn\\'t exist')\n    def removeValueInData(self, value):\n        if self.checkIfValueInData(value):\n            self.deleteValue(value)\n        else:\n            raise Exception('Value doesn\\'t exist')\n    def deleteAllValueInData(self):\n        self.deleteAllValuesInData()\n    def deleteAllValuesInData(self):\n        self.data.clear()\n    def getAllValueInData(self):\n        return self.getAllValuesInData()\n    def getAllValuesInData(self):\n        return self.getAllValues()\n    def getAllValues(self):\n        return self.getAllValues()\n    def getAllKeys(self):\n        return self.getAllKeys()\n    def getAllKeys(self):\n        return self.getAllKeys()\n    def getAll(self):\n        return self.getAll()\n    def getAll(self):\n        return self.getAll()\n    def findData(self, key, value):\n        if self.hasKey(key):\n            if self.getKey(key) == value:\n                return True\n            else:\n                return False\n        else:\n            return False\n    def findValue(self, value):\n        if self.hasValue(value):\n            return True\n        else:\n            return False\n    def findValueInData(self, value):\n        if self.hasValueInData(value):\n            return True\n        else:\n            return False\n    def findKey(self, key):\n        if self.hasKey(key):\n            return True\n        else:\n            return False\n    def findKeys(self, key):\n        if self.hasKey(key):\n            return True\n        else:\n            return False\n    def findValues(self, value):\n        if self.hasValue(value):\n            return True\n        else:\n            return False\n    def findValueInData(self, value):\n        if self.hasValueInData(value):\n            return True\n        else:\n            return False\n    def findKeysInData(self, key):\n        if self.hasKeyInData(key):\n            return True\n        else:\n            return False\n    def findValuesInData(self, value):\n        if self.hasValueInData(value):\n            return True\n        else:\n            return False\n    def findAllKeys(self):\n        return self.getAllKeys()\n    def findAllKeys(self):\n        return self.getAllKeys()\n    def findAllValues(self):\n        return self.getAllValues()\n    def findAllValues(self):\n        return self.getAllValues()\n    def findAll(self):\n        return self.getAll("
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    str_camel = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            str_camel += word[i]\n        else:\n            str_camel += word[i].capitalize()\n    return str_camel\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = ''.join(map(lambda x: x.title(), word.split('_')))\n    return s\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    print(words)\n    print(words[0].title())\n    return words[0].title()+''.join([w.title() for w in words[1:]])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([x.title() for x in word.split('_')])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    \n    # def snake_to_camel(word):\n    #     s = word.split('_')\n    #     return s[0] + ''.join(x.title() for x in s[1:])\n    # return snake_to_camel(word)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            result += word[i]\n        else:\n            result += word[i].lower()\n        if i < len(word)-1 and not word[i+1].isupper():\n            result += '_'\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    res = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            res += word[i].lower()\n        else:\n            res += word[i]\n    return res\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    '''\n    Here is a simple case of invalid input\n    '''\n    \n    word = word.split('_')\n    word = word[0] + ''.join(x.title() for x in word[1:])\n    \n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_list = re.sub(\"_\", \" \", word).split(\" \")\n    return word_list[0] + \"\".join(word.title() for word in word_list[1:])\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if (i % 2) == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_nums = []\n    for num in l:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    print(odd_nums)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = [1,2,3,4,5,6]\n    print(l)\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            l.remove(l[i])\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    n = 0\n    new_list = []\n    for i in l:\n        if (n+1)%2 == 0:\n            new_list.append(i)\n        n += 1\n    print(new_list)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l == []:\n        return l\n    if l[0] % 2!= 0:\n        l.pop(0)\n    for i in range(1,len(l)):\n        if l[i] % 2!= 0:\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if(l[i]%2==0):\n            continue\n        else:\n            l.pop(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # list_copy = l.copy()\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    # print(list_copy)\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n - 1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        return list1[n-1][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp_list = []\n    for i in range(n):\n        temp_list.append(list1[i])\n    return temp_list\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n <= 0:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = []\n    for i in range(n):\n        nth_element.append(list1[i])\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n:\n            return list1[i][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1 = list1[:n]\n    return list1\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    if list1 == [] or list2 == []:\n        return False\n    else:\n        \n        for i in list1:\n            if i in list2:\n                return True\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return i\n    return None\nlist1 = [4,7,5,2]\nlist2 = [2,7,5]\nprint(\"The element in list2 is:\",overlapping(list1,list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    a=list1\n    b=list2\n    for i in a:\n        if i in b:\n            return True\n    return False\n    "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # for i in range(0,len(list1)):\n    #     for j in range(0,len(list2)):\n    #         if list1[i]==list2[j]:\n    #             return True\n    #         else:\n    #             return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    n1 = len(list1)\n    n2 = len(list2)\n    for i in range(n1):\n        for j in range(n2):\n            if list1[i] == list2[j]:\n                return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlap=False\n    for value in list1:\n        if value in list2:\n            overlap=True\n            return overlap\n    return overlap\n            \noverlap=overlapping([1,4,7,9],[1,4,7,9,11])\nif overlap:\n    print(\"overlapping\")\nelse:\n    print(\"no overlap\")\n    \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in list1:\n        if i in list2:\n            print(True)\n        else:\n            print(False)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                print(i)\n    \noverlapping([10,20,30,40],[5,6,7,8])"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            print(f\"{value} is present in both list1 and list2\")\n            break\n        else:\n            print(f\"{value} is not present in both list1 and list2\")\n            continue\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    l = 0\n    r = len(arr)-1\n    maxProd = arr[l]*arr[r]\n    if(l==r):\n        return arr[0]\n    while l<r:\n        if(arr[l]*arr[r]>maxProd):\n            maxProd = arr[l]*arr[r]\n        if arr[l]<arr[r]:\n            l+=1\n        else:\n            r-=1\n    return maxProd\n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    arr = list(map(int, input().split()))\n    maxProd = max_Product(arr)\n    print(maxProd)"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m = arr[0]\n    for i in arr:\n        if m < i:\n            m = i\n    return m*arr[0]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    s = sorted(arr)\n    x = 0\n    y = 0\n    m = 0\n    for i in range(len(s)):\n        if m<s[i]*s[i]:\n            m = s[i]*s[i]\n            x = i\n            y = i\n    print(arr[x],arr[y])\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort() \n    n = len(arr) \n    ans = 0\n    for i in range(n): \n        ans = max(ans, arr[i] * arr[i + 1]) \n    return ans \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr = sorted(arr, reverse = True)\n    max_prod = 1\n    i = 0\n    j = 1\n    while(j < len(arr)):\n        if(arr[i] * arr[j] > max_prod):\n            max_prod = arr[i] * arr[j]\n            i = i + 1\n            j = j + 1\n        else:\n            j = j + 1\n    print(max_prod)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return -1\n    \n    arr.sort()\n    \n    max_prod = arr[0]*arr[1]\n    \n    for i in range(len(arr)-1):\n        curr = arr[i]*arr[i+1]\n        if curr > max_prod:\n            max_prod = curr\n            \n    return max_prod\n    \nif __name__ == '__main__':\n    \n    arr = [1, 2, 3, 4, 6]\n    max_Product(arr)"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    Max = arr[0]*arr[1] \n    i = 0\n    j = 1\n    while i < len(arr): \n        if arr[i] > Max: \n            Max = arr[i]\n            i = i+1\n        else: \n            if arr[j] > Max: \n                Max = arr[j]\n                j = j+1\n            else: \n                i = i+1\n                j = i+1\n    print(\"The highest product is : \",Max) \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]*arr[1]\n    for i in range(2,len(arr)):\n        if max_product < arr[i]*arr[i]:\n            max_product = arr[i]*arr[i]\n    return max_product\n        \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    ans = 0\n    if n == 0:\n        return 0\n    for i in range(n):\n        for j in range(i+1,n):\n            product = arr[i] * arr[j]\n            if product > ans:\n                ans = product\n    return ans\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    ans = []\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    '''\n    Input: [('a', 1), ('a', 2), ('b', 1), ('b', 2)]\n    Output: 'a'\n    '''\n    '''\n    1) create a dictionary to store the first element and its count.\n    2) iterate the input list and check if the first element in the tuple is already in the dict.\n    3) return the first element of the input tuple which is in the dictionary.\n    '''\n    dict1 = {}\n    for i in Input:\n        if i[0] in dict1:\n            dict1[i[0]] += 1\n        else:\n            dict1[i[0]] = 1\n    for j in Input:\n        if dict1[j[0]] == 1:\n            return j[0]\n            break\n    '''\n    Output: 'a'\n    '''\n    '''\n    2) use set and find the element which appears only once.\n    '''\n    #s = set()\n    #for i in Input:\n    #    s.add(i)\n    #for i in s:\n    #    if s.count(i) == 1:\n    #        return i\n    '''\n    3) create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Output: 'a'\n    #for i in range(len(Input)):\n    #    for j in range(i, len(Input)):\n    #        if Input[i][0] == Input[j][0]:\n    #            Input[i], Input[j] = Input[j], Input[i]\n    #Output: 'a'\n    '''\n    4) Using map and lambda function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #l = map(lambda x: (x[0], x[1]), Input)\n    #l = sorted(l, key=lambda x:x[1], reverse = True)\n    #for i in l:\n    #    if i[1] == 1:\n    #        return i[0]\n    '''\n    5) Using filter and lambda function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #l = filter(lambda x: x[0] == 'a', Input)\n    #l = sorted(l, key=lambda x:x[1], reverse = True)\n    #for i in l:\n    #    if i[1] == 1:\n    #        return 'a'\n    '''\n    6) Using map and lambda function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #l = map(lambda x: (x[0], x[1]), Input)\n    #l = sorted(l, key=lambda x: x[1], reverse=True)\n    #for i in l:\n    #    if i[1] == 1:\n    #        return i[0]\n    '''\n    7) Using reduce and lambda function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #from functools import reduce\n    #l = reduce(lambda x, y: x + y, Input)\n    #l = sorted(l, key=lambda x: x[1], reverse=True)\n    #for i in l:\n    #    if i[1] == 1:\n    #        return i[0]\n    '''\n    8) Using sort and lambda function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    9) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    10) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    11) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    12) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    13) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    14) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    15) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    16) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    17) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    18) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    19) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:\n    #        return Input[i][0]\n    '''\n    20) Using sorted function, create a list of tuple with the count of the element and sort them with the count.\n    '''\n    #Input.sort(key=lambda x: x[1], reverse=True)\n    #for i in range(len(Input)):\n    #    if Input[i][1] == 1:"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    try:\n        common = []\n        for i in Input:\n            common.append(i[0])\n        common = set(common)\n        return common\n    except:\n        print(\"Please pass a list of tuple\")\n        return None\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    from collections import Counter \n    a = Counter(Input)\n    for key, value in a.items(): \n        if value == 1: \n            return key\nInput = [('sagar',2),('Sagar',2),('amit',1),('amity',1)]\nprint(group_tuples(Input)) \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Writing the code for finding common first element in a given list of tuple\n    def common_first_element_in_list(input_list):\n        if input_list == []:\n            return \"List is empty.\"\n        if len(input_list) == 1:\n            return input_list[0][0]\n        else:\n            return common_first_element_in_list(filter(lambda x: x[0] == x[1], input_list))\n    # Reading the input from the user\n    Input = input(\"Enter the list of tuple:\\n\").split(',')\n    Input = list(map(lambda x: x.split(), Input))\n    # Printing the original input\n    print(\"The original input is:\")\n    for i in Input:\n        print(i)\n    # Printing the common first element\n    print(\"The common first element of the input is:\", common_first_element_in_list(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    A = []\n    for i in range(len(Input)):\n        A.append(list(Input[i]))\n    Common = []\n    for i in range(len(A)):\n        Common.append(A[i][0])\n    Common = set(Common)\n    Common = list(Common)\n    Common = sorted(Common)\n    Common = list(set(Common))\n    return Common\n    \nif __name__ == \"__main__\":\n    Input = [['a', 'b'], ['b', 'c'], ['a', 'c'], ['c', 'a']]\n    print(group_tuples(Input))"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return list(set.intersection(*map(set, Input)))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    #sort the tuple on the first element of each tuple and return the sorted list\n    Input = sorted(Input, key=lambda x: x[0])\n    i = 0\n    while i < len(Input)-1:\n        if Input[i][0] == Input[i+1][0]:\n            Output.append(Input[i])\n        i += 1\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    common = Input[0]\n    for i in range(len(Input)):\n        if Input[i][0]!= common[0]:\n            common = common[1:]\n        else:\n            common = common[1:] + Input[i][1]\n            break\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import numpy as np \n    a = np.array(Input)\n    com_1 = np.unique(np.asarray(Input[:,0]))\n    return com_1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # dictionary = {}\n    # for i in Input:\n    #     if i not in dictionary:\n    #         dictionary[i] = 1\n    #     else:\n    #         dictionary[i] += 1\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max(lst,key = len)\n    print(max_length)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_element = lst[i]\n            max_length = len(lst[i])\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in lst:\n        if len(i) > m:\n            m = len(i)\n    for i in lst:\n        if len(i) == m:\n            return i\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = lst[0]['len']\n    max_element = lst[0]\n    for element in lst:\n        if element['len'] > max_len:\n            max_len = element['len']\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_idx = 0\n    for i in range(0, len(lst)):\n        if len(lst[i])> max_len:\n            max_len = len(lst[i])\n            max_idx = i\n    return max_idx\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    Max = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) > len(Max):\n            Max = lst[i]\n    return Max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    mx = 0\n    for i in lst:\n        if len(i) > mx:\n            mx = len(i)\n    return mx\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = 0\n    for i in range(0,len(lst)):\n        if len(lst[i])>max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element\n    \n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = sorted(lst, key = len, reverse = True)\n    print(lst)\n    maxlen = len(lst[0])\n    for i in range(0, len(lst)):\n        if len(lst[i]) == maxlen:\n            print('maximum is:', lst[i])\n            return lst[i]\n        else:\n            continue\n    else:\n        print('no element found')\n    return lst[0]\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = 0\n    for i in range(len(lst)): \n        if len(lst[i]) > max_len: \n            max_len = len(lst[i])\n            max_ele = lst[i]\n    return max_ele\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return round(sum(list1),1)*len(list1)\n    \nround_and_sum([1.3,2.2,3.4,4.3,5.2])\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        total = total + round(list1[i])\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        total += round(item)\n    total *= len(list1)\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    # set a variable to store the sum of the list\n    sum = 0\n    # set a variable to store the length of the list\n    length = 0\n    \n    # loop through the list\n    for i in list1:\n        # round the number and add it to the total sum\n        sum += round(i)\n        # increase the length by 1\n        length += 1\n    # print the sum multiplied by the length\n    print(sum*length)\n    "
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for element in list1:\n        sum += round(element)\n        print(round(element))\n    print(sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = list(map(float, list1))\n    print(sum(list1) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = list(map(int,list1))\n    return sum(map(lambda x: round(x, 2),list1))*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #print(sum(list1))\n    print(sum([round(i) for i in list1])*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 2)\n    print(sum(list1) * len(list1))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1_round = []\n    for i in list1:\n        i = int(i)\n        i = round(i)\n        list1_round.append(i)\n    sum = 0\n    for i in list1_round:\n        sum += i\n    length = len(list1_round)\n    print(f\"The total sum of the list is {sum} multiplied by the length of the list is {sum * length}\")\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result = result + i ** 3\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    return sum(n**3 for n in range(1,n+1) if n%2==0)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Complete the function by filling in the missing lines\n    return\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    print(cube_sum)\n    \ncube_Sum(2) # Expected output: 6\ncube_Sum(3) # Expected output: 18\ncube_Sum(4) # Expected output: 24\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    x = 0\n    for i in range(1,n+1):\n        x = i**3\n    print(\"Cube sum of first\",n,\"natural numbers is :\",x)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubesum = 0\n    for i in range(1,n+1):\n        cubesum = cubesum + i**3\n        \n    return cubesum\n    \n    \ncube_Sum(10)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    cub_sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            cub_sum += i**3\n    return cub_sum\n        \n    "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    c=0\n    for i in range(1,n+1):\n        if(i%2==0):\n            c=c+i**3\n    return(c)\n    \ndef Sum_of_Squares(n):\n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s=s+i**2\n    return(s)\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of given natural number.\n    '''\n    if(n==0):\n        return(1)\n    return(n*factorial(n-1))\n    \ndef factorial_rec(n):\n    '''\n    Write a python function to compute the factorial of given natural number using recursion.\n    '''\n    if(n==0):\n        return(1)\n    return(n*factorial_rec(n-1))\n    \ndef fibo_rec(n):\n    '''\n    Write a python function to compute the fibonacci sequence for given input number.\n    '''\n    if(n<=1):\n        return(n)\n    return(fibo_rec(n-1)+fibo_rec(n-2))\n    \ndef Fibonacci(n):\n    '''\n    Write a python function to compute the Fibonacci sequence for given input number.\n    '''\n    a=0\n    b=1\n    if(n==0):\n        return(a)\n    elif(n==1):\n        return(b)\n    else:\n        for i in range(2,n+1):\n            c=a+b\n            a=b\n            b=c\n        return(c)\n    \ndef Pow(x,y):\n    '''\n    Write a python function to compute the power x^y.\n    '''\n    if(x==0 and y==0):\n        return(1)\n    if(x==0):\n        return(1)\n    if(y==0):\n        return(1)\n    if(y==1):\n        return(x)\n    elif(y>1):\n        return(Pow(x,y-1)*x)\n    \ndef Power(n,x):\n    '''\n    Write a python function to compute the power x^n.\n    '''\n    if(x==0):\n        return(1)\n    if(x==1):\n        return(n)\n    elif(x>1):\n        return(n*Power(n,x-1))\n    \ndef fact_generator(n):\n    '''\n    Write a python generator function to compute the factorial of given natural number.\n    '''\n    a=1\n    if(n==0):\n        yield(a)\n    elif(n==1):\n        yield(a)\n    else:\n        for i in range(1,n+1):\n            a=a*i\n            yield(a)\n    \ndef fact_generator_rec(n):\n    '''\n    Write a python generator function to compute the factorial of given natural number using recursion.\n    '''\n    a=1\n    if(n==0):\n        yield(a)\n    elif(n==1):\n        yield(a)\n    else:\n        for i in range(1,n+1):\n            a=a*i\n            yield(a)\n    \ndef fact_calc(n):\n    '''\n    Write a python function to compute the factorial of given natural number.\n    '''\n    fact=1\n    if(n==0):\n        return(fact)\n    elif(n==1):\n        return(fact)\n    else:\n        for i in range(1,n+1):\n            fact=fact*i\n        return(fact)\n    \ndef fact_calc_rec(n):\n    '''\n    Write a python function to compute the factorial of given natural number using recursion.\n    '''\n    if(n==0):\n        return(1)\n    if(n==1):\n        return(1)\n    else:\n        return(n*fact_calc_rec(n-1))\n    \ndef Prime_Num(n):\n    '''\n    Write a python function to find prime number in given range.\n    '''\n    s=set(range(2,n+1))\n    return(sum(i for i in range(2,n+1) if i not in s))\n    \ndef Prime_Num_rec(n):\n    '''\n    Write a python function to find prime number in given range using recursion.\n    '''\n    s=set(range(2,n+1))\n    return(sum(i for i in range(2,n+1) if i not in s))\n    \ndef Sum_Divisors(n):\n    '''\n    Write a python function to find sum of all divisors of given number.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            s=s+i\n    return(s)\n    \ndef Sum_Divisors_rec(n):\n    '''\n    Write a python function to find sum of all divisors of given number using recursion.\n    '''\n    if(n==1):\n        return(1)\n    return(n+Sum_Divisors_rec(n-1))\n    \ndef Sum_Divisors_using_list(n):\n    '''\n    Write a python function to find sum of all divisors of given number using list.\n    '''\n    s=[]\n    for i in range(1,n+1):\n        if(n%i==0):\n            s.append(i)\n    return(sum(s))\n    \ndef Sum_Divisors_using_list_rec(n):\n    '''\n    Write a python function to find sum of all divisors of given number using list using recursion.\n    '''\n    if(n==1):\n        return(1)\n    return(n+Sum_Divisors_using_list_rec(n-1))\n    \ndef Factorial_Using_Generator(n):\n    '''\n    Write a python function to compute the factorial using generator.\n    '''\n    return(fact_generator(n))\n    \ndef Factorial_Using_Generator_rec(n):\n    '''\n    Write a python function to compute the factorial using generator using recursion.\n    '''\n    return(fact_generator_rec(n))\n    \ndef Factorial_Using_For_loop(n):\n    '''\n    Write a python function to compute the factorial using for loop.\n    '''\n    fact=1\n    for i in range(2,n+1):\n        fact=fact*i\n    return(fact)\n    \ndef Factorial_Using_For_loop_rec(n):\n    '''\n    Write a python function to compute the factorial using for loop using recursion.\n    '''\n    fact=1\n    for i in range(2,n+1):\n        fact=fact*i\n    return(fact)\n    \ndef Fibonacci_Using_For_loop(n):\n    '''\n    Write a python function to compute the Fibonacci using for loop.\n    '''\n    a=0\n    b=1\n    if(n==0):\n        return(a)\n    elif(n==1):\n        return(b)\n    else:\n        for i in range(2,n+1):\n            c=a+b\n            a=b\n            b=c\n        return(c)\n    \ndef Fibonacci_Using_For_loop_rec(n):\n    '''\n    Write a python function to compute the Fibonacci using for loop using recursion.\n    '''\n    a=0\n    b=1\n    if(n==0):\n        return(a)\n    elif(n==1):\n        return(b)\n    else:\n        for i in range(2,n+1):\n            c=a+b\n            a=b\n            b=c\n        return(c)\n    \ndef Fibonacci_Using_While_loop(n):\n    '''\n    Write a python functio"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result=0\n    for i in range(n):\n        if i%2==0:\n            result+=i**3\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat = ','.join(test_tup)\n    return concat\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) > 1:\n        return '-'.join(test_tup)\n    else:\n        return test_tup[0]\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = ''.join(test_tup)\n    return output\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = \"\"\n    for i in test_tup:\n        res = res + str(i) + \" \"\n    return res\n    \ndef find_common_keys(dict1, dict2):\n    '''\n    Write a function to find the common keys between two dictionaries.\n    '''\n    res = []\n    for i in dict1.keys():\n        if i in dict2.keys():\n            res.append(i)\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i*i*i\n    average = total / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Solution-1\n    result = 0\n    for i in range(n):\n        result += i**3\n    print(\"Average of cubes of first n natural numbers is:\", result/n)\n    #Solution-2\n    print(\"Average of cubes of first n natural numbers is:\", (n*(n+1)*(2*n+1))/6)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n        \n    average = sum / n\n    return average\n        \n    \ndef find_Average_Of_First_N_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n Fibonacci numbers.\n    '''\n    \n    n1, n2 = 0, 1\n    sum = 0\n    count = 0\n    while count < n:\n        sum += n1\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        count += 1\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Square(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 2\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Cube(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    n1, n2 = 0, 1\n    sum = 0\n    while n1 <= n:\n        sum += n1\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Square(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 2\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Cube(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    n1, n2 = 0, 1\n    sum = 0\n    while n1 <= n:\n        sum += n1\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Square(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 2\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Cube(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    n1, n2 = 0, 1\n    sum = 0\n    while n1 <= n:\n        sum += n1\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Square(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 2\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Cube(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    n1, n2 = 0, 1\n    sum = 0\n    while n1 <= n:\n        sum += n1\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Square(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 2\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Cube(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    n1, n2 = 0, 1\n    sum = 0\n    while n1 <= n:\n        sum += n1\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Square(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 2\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Cube(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    n1, n2 = 0, 1\n    sum = 0\n    while n1 <= n:\n        sum += n1\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Square(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 2\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Cube(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n        \n    average = sum / n\n    return average\n    \n    \ndef find_Average_Of_First_N_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    n1, n2 = 0, 1\n    sum = 0\n    while n1 <= n:\n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum=0\n    for i in range(n):\n        sum=sum+i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += i ** 3\n    print(result / n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum/n\nprint(find_Average_Of_Cube(5)"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n\n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        raise ValueError(\"Input should be an integer greater than zero\")\n    summ = 0\n    for i in range(1,n+1):\n        summ += i**3\n    return summ/n\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(elem[-1] for elem in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple_list = []\n    for i in range(len(test_tuple)):\n        list_1 = list(test_tuple[i])\n        list_1.reverse()\n        list_2 = \"\".join(list_1)\n        tuple_list.append(list_2)\n    return tuple_list\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(0,len(test_tuple)):\n        s = test_tuple[i]\n        for j in range(len(s)-1,0,-1):\n            rear_list.append(s[j])\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in range(len(test_tuple)):\n        test_tuple[i] = test_tuple[i][len(test_tuple[i]) - 1]\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if len(test_tuple) == 0:\n        return []\n    elif len(test_tuple) == 1:\n        return test_tuple\n    else:\n        return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    def extract_rear(input_tuple):\n        return tuple(item[-1] for item in input_tuple)\n    return extract_rear\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    l = []\n    for string in test_tuple:\n        l.append(string[-1])\n    return l\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    if list1[0] == x:\n        return 1\n    else:\n        return count_element_in_list(list1[1:], x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return list1.count(x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if x == list1[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for n in nums:\n        if n % 2!= 0:\n            odds.append(n)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            print(nums[i])\n        else:\n            continue\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num%2!=0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num%2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda n: n % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num % 2 == 1, nums))\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    days = dt[0]\n    months = dt[1]\n    years = dt[2]\n    month_dict = {'01':'January', '02':'February', '03':'March', '04':'April', '05':'May', '06':'June', '07':'July',\n        '08':'August', '09':'September', '10':'October', '11':'November', '12':'December'}\n    months_dict = {'01':'January', '02':'February', '03':'March', '04':'April', '05':'May', '06':'June', '07':'July',\n        '08':'August', '09':'September', '10':'October', '11':'November', '12':'December'}\n    if(days == '0'):\n        months_dict[months] = str(int(months) + 1)\n        return years + '-' + months_dict[months] + '-' + days\n    return days + '-' + months + '-' + years\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.findall(r'[0-9]+', dt)[0]\n    year = dt[:4]\n    month = dt[4:6]\n    day = dt[6:]\n    return f'{day}-{month}-{year}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list=dt.split(\"-\")\n    #print(dt_list)\n    dt_new=\"\".join(dt_list)\n    dt_new=dt_new[:-2]+\"-\"+dt_new[-2:]+\"-\"+dt_new[-4:]\n    #print(dt_new)\n    return dt_new\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month_list = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"]\n    dt = str(dt)\n    split_date = dt.split('-')\n    dd = split_date[2]\n    mm = split_date[1]\n    yyyy = split_date[0]\n    return dd+'-'+month_list[int(mm)-1]+'-'+yyyy\ndef find_adjacent(s, pattern):\n    result = []\n    pat_len = len(pattern)\n    s_len = len(s)\n    i = 0\n    while i < s_len - pat_len + 1:\n        if re.search(pattern, s[i:i+pat_len])!= None:\n            result.append(i)\n        i += 1\n    return result\ndef find_adjacent_match(s, pattern):\n    result = []\n    pat_len = len(pattern)\n    s_len = len(s)\n    i = 0\n    while i < s_len - pat_len + 1:\n        if re.search(pattern, s[i:i+pat_len])!= None:\n            result.append(s[i:i+pat_len])\n        i += 1\n    return result\ndef split_data_by_none(data):\n    result = []\n    temp = []\n    for s in data:\n        if type(s) == type([]):\n            temp = s\n        else:\n            temp.append(s)\n        if len(temp) == 4:\n            result.append(temp)\n            temp = []\n    if len(temp) > 0:\n        result.append(temp)\n    return result\ndef add_years(d, years):\n    '''\n    Write a function that adds `years` to the year stored in the datetime object `d`.\n    '''\n    d = d.replace(year = d.year + years)\n    return d\ndef delete_months(d, months):\n    '''\n    Write a function that removes `months` from the date stored in the datetime object `d`.\n    '''\n    d = d.replace(day = d.day - months + 1)\n    return d\ndef add_months(d, months):\n    '''\n    Write a function that adds `months` to the date stored in the datetime object `d`.\n    '''\n    d = d.replace(day = d.day + months)\n    return d\ndef add_days(d, days):\n    '''\n    Write a function that adds `days` to the date stored in the datetime object `d`.\n    '''\n    d = d.replace(day = d.day + days)\n    return d\ndef date_diff(d1, d2):\n    '''\n    Write a function that returns the number of days between two dates.\n    '''\n    d1 = d1.split('-')\n    d2 = d2.split('-')\n    d1 = datetime(int(d1[0]), int(d1[1]), int(d1[2]))\n    d2 = datetime(int(d2[0]), int(d2[1]), int(d2[2]))\n    return abs((d1-d2).days)\ndef check_file_existence(file_name):\n    result = True\n    try:\n        open(file_name, \"r\")\n    except IOError:\n        result = False\n    return result\ndef check_int_range(min_value, max_value, val):\n    '''\n    Write a function that returns whether `val` is in the range of minimum value `min_value` and maximum value `max_value`.\n    '''\n    result = False\n    if min_value <= val <= max_value:\n        result = True\n    return result\ndef get_nth_element(data, n):\n    '''\n    Write a function that returns the nth element of the sequence.\n    '''\n    return data[n]\ndef get_all_nth_elements(data, n):\n    '''\n    Write a function that returns all the nth elements of the sequence.\n    '''\n    return data[n:]\ndef remove_duplicates(data):\n    '''\n    Write a function that removes the duplicates from the sequence.\n    '''\n    return data\ndef check_element_in_array(data, val):\n    '''\n    Write a function that returns whether `val` is present in the sequence `data`.\n    '''\n    result = False\n    if val in data:\n        result = True\n    return result\ndef remove_specific_element_from_array(data, val):\n    '''\n    Write a function that removes `val` from the sequence `data`.\n    '''\n    if val in data:\n        data.remove(val)\n    return data\ndef get_frequency_of_elements_in_array(data):\n    '''\n    Write a function that returns a dictionary mapping each element from the sequence `data` to its frequency.\n    '''\n    result = {}\n    for val in data:\n        if val in result.keys():\n            result[val] += 1\n        else:\n            result[val] = 1\n    return result\ndef get_frequency_of_each_element_in_array(data):\n    '''\n    Write a function that returns a dictionary mapping each element from the sequence `data` to its frequency.\n    '''\n    result = {}\n    for val in data:\n        if val in result.keys():\n            result[val] += 1\n        else:\n            result[val] = 1\n    return result\ndef get_unique_elements_in_array(data):\n    '''\n    Write a function that returns a list of unique elements in the sequence `data`.\n    '''\n    result = []\n    for val in data:\n        if val not in result:\n            result.append(val)\n    return result\ndef get_all_occurrences_in_array(data, val):\n    '''\n    Write a function that returns a list of tuples containing the element `val` and all occurrences of it in the sequence `data`.\n    '''\n    result = []\n    for idx, val in enumerate(data):\n        if val == val:\n            result.append((val, idx))\n    return result\ndef get_all_occurrences_of_element_in_array(data, val):\n    '''\n    Write a function that returns a list of tuples containing all occurrences of the element `val` in the sequence `data`.\n    '''\n    result = []\n    for idx, val in enumerate(data):\n        if val == val:\n            result.append((val, idx))\n    return result\ndef get_count_of_occurrences_of_element_in_array(data, val):\n    '''\n    Write a function that returns the number of occurrences of the element `val` in the sequence `data`.\n    '''\n    result = 0\n    for val in data:\n        if val == val:\n            result += 1\n    return result\ndef get_count_of_all_occurrences_in_array(data, val):\n    '''\n    Write a function that returns the number of all occurrences of the element `val` in the sequence `data`.\n    '''\n    result = 0\n    for val in data:\n        if val == val:\n            result += 1\n    return result\ndef get_count_of_elements_that_appear_twice_in_array(data):\n    '''\n    Write a function that returns a dictionary mapping each element from the sequence `data` to the number of occurrences of that element in the sequence.\n    '''\n    result = {}\n    for val in data:\n        if val in result.keys():\n            result[val] += 1\n        else:\n            result[val] = 1\n    return result\ndef get_count_of_elements_that_appear_twice_in_array_with_order(data):\n    '''\n    Write a function that returns a dictionary mapping each element from the sequence `data` to the number of occurrences of that element in the sequence.\n    '''\n    result = {}\n    for val in data:\n        if val in result.keys():\n            result[val] += "
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #\n    # Write your code here.\n    #\n    #\n    # format=\"%Y-%m-%d\"\n    dt = dt.split(\"-\")\n    # print(dt)\n    date = \"\"\n    for i in range(len(dt)):\n        if(i == 1 or i==2):\n            date += dt[i] + \"-\"\n        elif(i==0):\n            date += dt[i]\n        else:\n            date += str(dt[i]) + \"-\"\n    date = date[:-1]\n    date = date[:-4]+\"-\"+date[-4:]\n    # print(date)\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})',r'\\2/\\3/\\1',dt)\n    return date_format\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    if len(d) == 3:\n        d = '-'.join(d[::-1])\n        return d[:10] + '-' + d[10:] + '-' + d[:4]\n    return ''\ndef convert_to_list(string):\n    '''\n    Write a function to convert a string into a list of words.\n    '''\n    l = []\n    for i in string.split():\n        l.append(i)\n    return l\ndef reverse_words_in_sentence(string):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = string.split()\n    s = s[::-1]\n    return''.join(s)\ndef reverse_words_in_sentence_rec(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    l = len(string)\n    if index >= l:\n        return string\n    else:\n        string = reverse_words_in_sentence_rec(string, index + 1)\n        string = string[:index] + string[index:][::-1] + string[index:]\n        return string\ndef reverse_words_in_sentence_rec2(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    if index >= len(string):\n        return string\n    else:\n        string = reverse_words_in_sentence_rec2(string, index + 1)\n        if string[index] =='':\n            string = string[:index] + string[index:][::-1] + string[index:]\n        return string\ndef reverse_words_in_sentence_rec3(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    if index >= len(string):\n        return string\n    else:\n        s = ''\n        while index < len(string):\n            s += string[index]\n            index += 1\n        return s\ndef reverse_words_in_sentence_rec4(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    return s\ndef reverse_words_in_sentence_rec5(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    return s[::-1]\ndef reverse_words_in_sentence_rec6(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    if index >= len(string):\n        return string\n    else:\n        s = ''\n        while index < len(string):\n            s += string[index]\n            index += 1\n        s = s[::-1]\n        return s + string[index:]\ndef reverse_words_in_sentence_rec7(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec8(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string\ndef reverse_words_in_sentence_rec9(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec10(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec11(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec12(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec13(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec14(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec15(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec16(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec17(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec18(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n    return s + string[index:]\ndef reverse_words_in_sentence_rec19(string, index):\n    '''\n    Write a function to reverse the words in a given sentence (without changing the spacing between words).\n    '''\n    s = ''\n    while index < len(string):\n        s += string[index]\n        index += 1\n    s = s[::-1]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dd, mm, yyyy = dt.split('-')\n    return f'{dd}.{mm}.{yyyy}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    temp=re.sub('[-]', '/', dt)\n    new_date=temp[:-4]\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    date_format = date[0]+'-'+date[1]+'-'+date[2]\n    return date_format\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list)==1:\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    h = 1\n    while h <= size/3:\n        h = 3 * h + 1\n    while h > 1:\n        for i in range(h, size):\n            j = i\n            while j >= h and my_list[j] < my_list[j - h]:\n                my_list[j], my_list[j - h] = my_list[j - h], my_list[j]\n                j -= h\n        h = h // 3\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # We would normally use the middle index in the array.\n    # This can be done to avoid as many iterations as possible.\n    # In this case, we keep the index of the last element as pivot.\n    pivot = n - 1\n    # We will be using the gap size k\n    k = 3\n    while k > 0:\n        # Gaps are filled as far as they can be.\n        for i in range(k, n):\n            j = i\n            # Finding the position of the element to be placed\n            while j >= k and my_list[j] < my_list[j-k]:\n                my_list[j], my_list[j-k] = my_list[j-k], my_list[j]\n                j -= k\n        # Re-arranging the elements in the gap position\n        for i in range(n-k, k, -1):\n            j = i\n            while j >= k and my_list[j] < my_list[j-k]:\n                my_list[j], my_list[j-k] = my_list[j-k], my_list[j]\n                j -= k\n        # Increasing the gap size by 2\n        k = k * 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    k = len(my_list)\n    gap = 1\n    \n    while(gap <= k):\n        gap = gap * 3 + 1\n        \n    while(gap > 0):\n        for i in range(gap, k):\n            j = i - gap\n            temp = my_list[i]\n            while(j >= 0 and my_list[j] > temp):\n                my_list[j + gap] = my_list[j]\n                j -= gap\n            my_list[j + gap] = temp\n        gap = gap // 3\n        \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    if n <= 1:\n        return my_list\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    step = n//2\n    while step > 0:\n        for i in range(step,n):\n            j = i\n            while j >= step and my_list[j-step] > my_list[j]:\n                my_list[j],my_list[j-step] = my_list[j-step],my_list[j]\n                j = j-step\n        step = step // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = int(n / 2)\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap / 2)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    if size <= 1:\n        return\n    \n    step = size // 2\n    while step:\n        for i in range(step, size):\n            j = i\n            while j >= step and my_list[j] < my_list[j-step]:\n                my_list[j], my_list[j-step] = my_list[j-step], my_list[j]\n                j -= step\n    step = step // 2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup_1 = list(test_tup1)\n    test_tup_2 = list(test_tup2)\n    # result = []\n    # for item_tup1 in test_tup_1:\n    #     for item_tup2 in test_tup_2:\n    #         result.append(item_tup1 and item_tup2)\n    # return tuple(result)\n    return tuple(item1 and item2 for item1, item2 in zip(test_tup_1, test_tup_2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    x, y = test_tup1\n    z, w = test_tup2\n    return (x & y) == z, (x & w) == z, (y & w) == z\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # return tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n    return tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n    \nprint(and_tuples((1,2,3,4),(1,2,3,4)))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (a and b) for (a,b) in zip(test_tup1, test_tup2)\n    \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 and tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    return (tup1, tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1, test_tup2, map(lambda x: x[0] and x[1], zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 and tup2) for tup1, tup2 in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    x = a*a*a\n    y = b*b\n    z = c*c*c\n    \n    # x^2 - (b*y + c*z) = 0\n    # z^2 - (a*x + c*y) = 0\n    # x^2 - 2*(a*x + c*y) = 0\n    # 2*x*y = z\n    # y = -2*x/z\n    # x = -1/z\n    #\n    # -2*x/z = -1/z = x/z = -b/2*z\n    # b = -2*x/z\n    \n    x_directrix = -(a/(2*z))\n    y_directrix = -(2*x_directrix/z)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*a*b - 2*a*c, a*b*b - 2*a*c\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (b * b - 4 * a * c) >= 0:\n        d = math.sqrt(b * b - 4 * a * c)\n        u = (-b + d) / (2 * a)\n        v = (-b - d) / (2 * a)\n        return (u, v)\n    else:\n        return (None, None)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**.5)/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * b ** 2 / c\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    fx = -2 * a * a + b * b + c * c\n    while fx > 0:\n        x += 0.1\n        fx = -2 * a * x * x + b * b + c * c\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = 2*a**2 + 4*b**2 - 4*c**2\n    x_1 = (-b+math.sqrt(d))/(2*a)\n    x_2 = (-b-math.sqrt(d))/(2*a)\n    return x_1, x_2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x0 = 0\n    a2 = 2*a\n    b2 = 2*b\n    c2 = 2*c\n    d2 = b2**2 - 4*a*c\n    if d2 > 0:\n        x1 = (-b2 - math.sqrt(d2))/(2*a)\n        x2 = (-b2 + math.sqrt(d2))/(2*a)\n        return(x0, x1, x2)\n    elif d2 == 0:\n        x1 = (-b2)/(2*a)\n        x2 = (b2)/(2*a)\n        return(x0, x1, x2)\n    elif d2 < 0:\n        return('No directrix')\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = a * a - 4 * b * c\n    if discriminant > 0:\n        x1 = (-a + sqrt(discriminant)) / (2 * b)\n        x2 = (-a - sqrt(discriminant)) / (2 * b)\n        return(x1, x2)\n    elif discriminant == 0:\n        x1 = (-a + sqrt(discriminant)) / (2 * b)\n        return(x1)\n    else:\n        print(\"no solution\")\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = (c*c) - (a*a)\n    return (a, -c, a*c - b*c) if d > 0 else (a, -c, a*c - b*c)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    n = len(list1)\n    m = len(list2)\n    for i in range(n):\n        for j in range(m):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\nprint(common_element([1,2,3,4], [2,3,4]))\nprint(common_element([1,2,3,4], []))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for el1 in list1:\n        if el1 in list2:\n            common.append(el1)\n    if len(common) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    for x in list1:\n        for y in list2:\n            if x == y:\n                common += 1\n                if common > 1:\n                    return True\n    return False\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    \n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    \n    if len(common_elements)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                common.append(list1[i])\n    if len(common) == 0:\n        return False\n    else:\n        return common\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                common += 1\n    if common!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    trapezium = 0.5*(base1+base2)\n    if height>0:\n        trapezium+=height/2\n    return trapezium\nprint(median_trapezium(3,7,6))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if(base1>base2):\n        base1,base2=base2,base1\n    height1,height2=height,height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base3 = base1+base2\n    sides = sorted([base1,base2,base3])\n    return ((sides[2]-sides[0])+(sides[1]-sides[0])+height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2.0 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # a = (1/2) * (base1 + base2)\n    # h = (height/2)\n    # a = h + (a/2)\n    # print(a)\n    # return a\n    return ((base1 + base2)/2) + (height/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1,base2,height = float(base1),float(base2),float(height)\n    if base1 < base2:\n        aux = base1\n        base1 = base2\n        base2 = aux\n    a = float(base1)\n    b = float(base2)\n    c = float(height)\n    area = a + b + (2 * c)\n    return area / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    h = float(height)/2\n    return (base1 + base2 + 2*h)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = 0\n    for i in range(len(arr)):\n        if number > arr[i]:\n            greater += 1\n    if greater == 0:\n        return 'No, Entered number is not greater than the number of element of the array'\n    else:\n        return 'Yes, Entered number is greater than the number of element of the array'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number >= arr\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for item in arr:\n        if number > item:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # A flag for the boolean result\n    result = False\n    # Iterate through the array and check whether the number is greater than each element.\n    for elem in arr:\n        # If the number is greater than the element, then flag it as true and break the loop.\n        if number > elem:\n            result = True\n            break\n    return result\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if x > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Iterating through the array.\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] <= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    if re.search(r'a+b', text):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab',text)\n    return match\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'a(.*?)b',text):\n        print(re.search(r'a(.*?)b',text).group())\n    else:\n        print('There is no a followed by one or more b')\n    return None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.match(r\"^a\",text)\n    return match\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern=re.compile(r\"ab\")\n    print(pattern.search(text))\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    pattern=re.compile(r\"a+b\")\n    print(pattern.search(text))\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    pattern=re.compile(r\"a{3}b\")\n    print(pattern.search(text))\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four or more b's.\n    '''\n    pattern=re.compile(r\"a{4}b\")\n    print(pattern.search(text))\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by at least two b's\n    but no more than four b's.\n    '''\n    pattern=re.compile(r\"a{2,4}b\")\n    print(pattern.search(text))\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's\n    but no more than four a's.\n    '''\n    pattern=re.compile(r\"a{2,4}a\")\n    print(pattern.search(text))\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by at least four b's\n    but no more than eight a's.\n    '''\n    pattern=re.compile(r\"a{4,8}a\")\n    print(pattern.search(text))\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by four to eight b's.\n    '''\n    pattern=re.compile(r\"a{4,8}b\")\n    print(pattern.search(text))\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one to three b's.\n    '''\n    pattern=re.compile(r\"a{1,3}b\")\n    print(pattern.search(text))\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one to four b's.\n    '''\n    pattern=re.compile(r\"a{1,4}b\")\n    print(pattern.search(text))\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by five to seven b's.\n    '''\n    pattern=re.compile(r\"a{5,7}b\")\n    print(pattern.search(text))\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by eight to ten b's.\n    '''\n    pattern=re.compile(r\"a{8,10}b\")\n    print(pattern.search(text))\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by two to five b's.\n    '''\n    pattern=re.compile(r\"a{2,5}b\")\n    print(pattern.search(text))\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by six to seven b's.\n    '''\n    pattern=re.compile(r\"a{6,7}b\")\n    print(pattern.search(text))\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by four to six b's.\n    '''\n    pattern=re.compile(r\"a{4,6}b\")\n    print(pattern.search(text))\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by five to eight b's.\n    '''\n    pattern=re.compile(r\"a{5,8}b\")\n    print(pattern.search(text))\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seven to ten b's.\n    '''\n    pattern=re.compile(r\"a{7,10}b\")\n    print(pattern.search(text))\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by four to seven b's.\n    '''\n    pattern=re.compile(r\"a{4,7}b\")\n    print(pattern.search(text))\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three to five b's.\n    '''\n    pattern=re.compile(r\"a{3,5}b\")\n    print(pattern.search(text))\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by six to ten b's.\n    '''\n    pattern=re.compile(r\"a{6,10}b\")\n    print(pattern.search(text))\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by seven to ten b's.\n    '''\n    pattern=re.compile(r\"a{7,10}b\")\n    print(pattern.search(text))\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by four to six b's.\n    '''\n    pattern=re.compile(r\"a{4,6}b\")\n    print(pattern.search(text))\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by five to seven b's.\n    '''\n    pattern=re.compile(r\"a{5,7}b\")\n    print(pattern.search(text))\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by six to eight b's.\n    '''\n    pattern=re.compile(r\"a{6,8}b\")\n    print(pattern.search(text))\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by four to seven b's.\n    '''\n    pattern=re.compile(r\"a{4,7}b\")\n    print(pattern.search(text))\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by seven to eight b's.\n    '''\n    pattern=re.compile(r\"a{7,8}b\")\n    print(pattern.search(text))\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by four to six b's.\n    '''\n    pattern=re.compile(r\"a{4,6}b\")\n    print(pattern.search(text))\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by four to five b's.\n    '''\n    pattern=re.compile(r\"a{4,5}b\")\n    print(pattern.search(text))\ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by four to five b's.\n    '''\n    pattern=re.compile(r\"a{4,5}b\")\n    print(pattern.search(text))\ndef text_match_thirty(text):\n    '''\n    Write a function that matches "
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    matches = re.findall(r'ab+', text)\n    return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"^a+b\"\n    pattern = re.compile(pattern)\n    text = re.sub(\"[^a]\", \"\", text)\n    return bool(pattern.match(text))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'(ab)+',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"a+b\")\n    match = pattern.search(text)\n    return match\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    print(n%10)\n    return\ndef square(n):\n    '''\n    Write a python function to compute the square of the given number.\n    '''\n    print(n**2)\n    return\ndef reverse(n):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    print(n[::-1])\n    return\ndef isPalindrome(n):\n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    print(n == int(str(n)[::-1]))\n    return\ndef is_Prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            print(\"Not a prime\")\n            return False\n    print(\"Prime\")\n    return True\ndef main():\n    '''\n    Write a python function to find the lowest common multiple of two numbers.\n    '''\n    a = int(input())\n    b = int(input())\n    \n    for i in range(1,10):\n        if a%i==0 and b%i==0:\n            print(i)\n            break\n    return\ndef sumOfDigits(n):\n    '''\n    Write a python function to find the sum of the digits in a given number.\n    '''\n    print(sum(list(map(int,list(str(n)))))\n    return\ndef threeNumberSum(arr,sum):\n    '''\n    Write a python function to find three numbers whose sum is equal to a given number.\n    '''\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                if arr[i]+arr[j]+arr[k]==sum:\n                    print(arr[i],arr[j],arr[k])\n                    return\n    return\ndef twoNumberSum(arr,sum):\n    '''\n    Write a python function to find two numbers whose sum is equal to a given number.\n    '''\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                print(arr[i],arr[j])\n                return\n    return\ndef isSubset(arr1,arr2):\n    '''\n    Write a python function to check if arr1 is subset of arr2 or not.\n    '''\n    if len(arr1)!=len(arr2):\n        return False\n    for i in range(0,len(arr1)):\n        if arr1[i] not in arr2:\n            return False\n    return True\ndef main1():\n    '''\n    Write a python function to find the maximum number of elements in a list.\n    '''\n    def max_elements(arr):\n        '''\n        Write a python function to find the maximum number of elements in a list.\n        '''\n        max=0\n        for i in range(0,len(arr)):\n            if len(arr[i])>max:\n                max=len(arr[i])\n        return max\n    # arr = [[10, 20, 30, 40], ['a', 'b', 'c', 'd'], ['A', 'B', 'C', 'D']]\n    # for i in range(0,len(arr)):\n    #     print(max_elements(arr[i]))\n    return\ndef main2():\n    '''\n    Write a python function to print the number of words present in a given sentence.\n    '''\n    s=input(\"Enter the sentence:\")\n    s=s.split(\" \")\n    print(len(s))\n    return\ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    ans=0\n    while n>0:\n        ans=ans+n%10\n        n=n//10\n    return ans\ndef main3():\n    '''\n    Write a python function to find the sum of digits in the given numbers.\n    '''\n    n1=int(input())\n    n2=int(input())\n    n3=int(input())\n    print(sum_of_digits(n1))\n    print(sum_of_digits(n2))\n    print(sum_of_digits(n3))\n    return\ndef main4():\n    '''\n    Write a python function to find the n-th term of fibonacci series.\n    '''\n    n=int(input())\n    if n==1:\n        print(1)\n    elif n==2:\n        print(1)\n    elif n>2:\n        a=1\n        b=1\n        for i in range(3,n+1):\n            c=a+b\n            a=b\n            b=c\n            print(c)\n    return\ndef main5():\n    '''\n    Write a python function to find the n-th term of the fibonacci series.\n    '''\n    n=int(input())\n    if n==1:\n        print(0)\n    elif n==2:\n        print(1)\n    elif n>2:\n        a=0\n        b=1\n        for i in range(3,n+1):\n            c=a+b\n            a=b\n            b=c\n            print(c)\n    return\ndef main6():\n    '''\n    Write a python function to find the n-th term of the fibonacci series.\n    '''\n    n=int(input())\n    if n==1:\n        print(0)\n    elif n==2:\n        print(1)\n    elif n>2:\n        a=0\n        b=1\n        for i in range(3,n+1):\n            c=a+b\n            a=b\n            b=c\n            print(c)\n    return\ndef main7():\n    '''\n    Write a python function to find the sum of even numbers in a given range.\n    '''\n    n=int(input())\n    sum=0\n    for i in range(0,n):\n        if i%2==0:\n            sum=sum+i\n    print(sum)\n    return\ndef main8():\n    '''\n    Write a python function to check whether a given number is a prime number or not.\n    '''\n    n=int(input())\n    for i in range(2,n):\n        if n%i==0:\n            print(\"Not a prime\")\n            return False\n    print(\"Prime\")\n    return True\ndef main9():\n    '''\n    Write a python function to print the prime numbers in a given range.\n    '''\n    n=int(input())\n    for i in range(2,n):\n        if is_Prime(i):\n            print(i)\n    return\ndef main10():\n    '''\n    Write a python function to print the prime numbers in a given range.\n    '''\n    n=int(input())\n    for i in range(2,n):\n        if is_Prime(i):\n            print(i)\n    return\ndef is_Prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef main11():\n    '''\n    Write a python function to find the largest number in a given list.\n    '''\n    n=int(input())\n    arr=list(map(int,input().split()))\n    print(max(arr))\n    return\ndef main12():\n    '''\n    Write a python function to find the largest number in a given list.\n    '''\n    n=int(input())\n    arr=list(map(int,input().split()))\n    print(min(arr))\n    return\ndef main13():\n    '''\n    Write a python function to find the largest number in a given list.\n    '''\n    n=int(input())\n    arr=list(map(int,input().split()))\n    print(arr)\n    for i in range("
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)) :\n        if i == 0 :\n            last_digit = n[i]\n        else :\n            if n[i] == last_digit :\n                break\n            else :\n                last_digit = n[i]\n    return int(last_digit)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while(n>0):\n        dig=n%10\n        n=n//10\n        if(dig==n):\n            return dig\n    return dig\ndef is_Prime(n) :\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    while(n>1):\n        dig=last_Digit(n)\n        if(dig==0 or n%dig==0):\n            return False\n        n=n//10\n    return True\n    \ndef is_palindrome(num):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    num=str(num)\n    i=0\n    j=len(num)-1\n    while(i<j):\n        if(num[i]!=num[j]):\n            return False\n        i=i+1\n        j=j-1\n    return True\n    \ndef check_palindrome(num):\n    '''\n    Write a python function to check whether a given number is palindrome or not.\n    '''\n    if(is_Palindrome(num)):\n        print('YES')\n    else:\n        print('NO')\ndef is_Ugly(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(n<=0):\n        return False\n    while(n>1):\n        if(is_Prime(n)):\n            return True\n        n=n//2\n    return False\n    \ndef is_Ugly(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    while(num>1):\n        if(is_Prime(num)):\n            return True\n        num=num//2\n    return False\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    while(num>1):\n        if(is_Perfect(num)):\n            return True\n        num=num-1\n    return False\ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    while(num>1):\n        if(is_Perfect(num)):\n            return True\n        num=num-1\n    return False\ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(num<=1):\n        return False\n    i=2\n    while(i*i<=num):\n        if(num%i==0):\n            return False\n        i=i+1\n    return True\n    \ndef is_Perfect(num):\n    '"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x = n%10\n    return x\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    return int(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 0 :\n        print(\"Error\")\n    else :\n        i = 1\n        while n > 0 :\n            n = n//10\n            i = i*10\n        print(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x = n % 10\n    n = n//10\n    if n!= 0 :\n        return last_Digit(n)\n    else :\n        return x\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for num in list1:\n        new_list.append(-num)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(-1*i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # your code here\n    #initializing an empty list\n    neg_nos_list = []\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    n = []\n    for i in list1:\n        if i > 0:\n            n.append(i)\n    return n\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in list1:\n        l.append(-i)\n    return l\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # remove all negative numbers\n    n_list = []\n    for i in list1:\n        if i > 0:\n            n_list.append(i)\n    return n_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list=[]\n    for i in list1:\n        if i<0:\n            negative_list.append(i)\n    return negative_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i=0\n    list_temp=[]\n    for i in range(len(list1)):\n        if(list1[i]<0):\n            list_temp.append(list1[i])\n    return list_temp\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]!='':\n            str1 = str1.replace(str1[i],'',1)\n        else:\n            break\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Fill this in.\n    for i in range(len(str1)):\n        if str1[i]%2 == 1:\n            str1 = str1[:i] + str1[i+1:]\n            return str1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\"o\", \"\")\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i.isdigit()])\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.split()\n    str2 = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    print(str2)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    newstr = \"\"\n    for i in range(len(str1)):\n        if(i%2 == 0):\n            newstr += str1[i]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Using two variables to track indexes for the odd and even characters\n    odd = 0\n    even = 0\n    # Create an empty string\n    str2 = \"\"\n    # Iterate through the string\n    for x in range(len(str1)):\n        # If the index is an even character, append the character to the even string\n        if x % 2 == 0:\n            str2 += str1[x]\n        # If the index is an odd character, append the character to the odd string\n        else:\n            str2 += str1[x-1]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for c in str1:\n        if ord(c) % 2!= 0:\n            odd_chars.append(c)\n    \n    return \"\".join(odd_chars)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    output = \"\"\n    for char in str1:\n        if char not in (\"0\", \"1\"):\n            output += char\n    return output\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if (i[0] < j[0]) and (i[1] > j[1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    if len(test_list) <= 1:\n        return 0\n    \n    count = 0\n    \n    for i in range(len(test_list) - 1):\n        if (test_list[i][0] < test_list[i+1][0]) and (test_list[i][1] < test_list[i+1][1]):\n            count += 1\n    \n    return count\n    \n    \n    \ntest_list = [(1,5),(3,7),(4,10),(10,15),(12,18)]\nresult = count_bidirectional(test_list)\nprint(result)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] + test_list[j] == (test_list[j] + test_list[i]):\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your code here\n    # A list of tuples\n    # Initialize dictionary\n    # Initialize dictionary\n    # Iterate through the list\n    # if tuple1[0] == tuple2[-1] or tuple1[-1] == tuple2[0]:\n    #     print('found')\n    # return count\n    dict1 = {}\n    dict2 = {}\n    count = 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    ans = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] < test_list[j][0]:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    d = {}\n    res = 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # Initilize counter\n    counter = 0\n    \n    # Iterate through the list\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            \n            # If the element in the first index of the tuple is equal to the second element in the second index of the tuple\n            if test_list[i][0] == test_list[j][1]:\n                counter += 1\n                \n    return counter\n    \n    \n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    answer = 0\n    i = 0\n    while i < len(test_list) - 1:\n        if isinstance(test_list[i], tuple) and isinstance(test_list[i + 1], tuple):\n            test_list[i] = (test_list[i][0] + test_list[i + 1][0], test_list[i][1] + test_list[i + 1][1])\n            answer += 1\n        i += 1\n    return answer\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(test_list) - len(set(tuple(zip(*test_list))[0]) | set(zip(*test_list))[1])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(reduce(lambda x,y : str(x) + str(y), L))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    i = 0\n    while i < len(L):\n        total += L[i]\n        i += 1\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result + (L[i] * (10**i))\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not isinstance(L,list) or not isinstance(L[0], int):\n        print('You have to enter a list of integers.')\n        return None\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # l = list(map(int,L))\n    # return(sum(l))\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L is None or len(L) == 0:\n        return None\n    else:\n        m = 0\n        for i in L:\n            m = m + i\n        return m\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    return sum(L) + multiple_to_single(L[:-1])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(L[0])\n    #return L\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Solution 1:\n    # for n in L:\n    #     if n == None or type(n)!= int:\n    #         print(\"error\")\n    #     else:\n    #         L = sum(L)\n    # return L\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    print(\"\\n\",find_adverb_position.__doc__,\"\\n\")\n    position=0\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] =='verb':\n            position +=1\n            print('Verb found at position',position)\n            for j in range(i+1,len(text_list)):\n                if text_list[j] == 'and':\n                    position +=1\n                    print('and found at position',position)\n                    return position\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    r = re.search(r'([^a-zA-Z]|[^.!])\\s([A-Z]+)', text)\n    # print(r.group(1))\n    # print(r.group(2))\n    # print('found:',r.group(0))\n    if r:\n        print(f'ADVERB: {r.group(2)}')\n        print(f'START: {r.span()[0] + 1}')\n        print(f'END: {r.span()[1] - 1}')\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\bADV\\b'\n    text = text.lower()\n    #pattern = re.compile(r'\\bADV\\b')\n    result = re.findall(pattern, text)\n    result = set(result)\n    #print(result)\n    if result:\n        return result\n    else:\n        return []\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = 'ADV'\n    pattern = re.compile(adverb)\n    result = pattern.finditer(text)\n    list_result = list(result)\n    list_positions = []\n    for i in range(0, len(list_result)):\n        result = list_result[i]\n        list_positions.append(result.start(0))\n    return list_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    verb_start_indexes = []\n    adverb_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z]\",sentence[i])):\n            verb_start_indexes.append(i)\n    for j in range(len(verb_start_indexes)):\n        adverb_indexes.append(verb_start_indexes[j]+1)\n        for k in range(len(verb_start_indexes)-1):\n            if(adverb_indexes[k] == verb_start_indexes[k+1]):\n                adverb_indexes.pop(k)\n                break\n    return adverb_indexes\ndef find_first_apposition_position(text):\n    '''\n    Write a function to find the first apposition and their positions in a given sentence.\n    '''\n    verb_start_indexes = []\n    apposition_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z]\",sentence[i])):\n            verb_start_indexes.append(i)\n    for j in range(len(verb_start_indexes)):\n        apposition_indexes.append(verb_start_indexes[j]+1)\n        for k in range(len(verb_start_indexes)-1):\n            if(apposition_indexes[k] == verb_start_indexes[k+1]):\n                apposition_indexes.pop(k)\n                break\n    return apposition_indexes\ndef find_first_plural_index(text):\n    '''\n    Write a function to find the first plural noun and its positions in a given sentence.\n    '''\n    verb_start_indexes = []\n    plural_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z].*[A-Z]\",sentence[i])):\n            verb_start_indexes.append(i)\n    for j in range(len(verb_start_indexes)):\n        plural_indexes.append(verb_start_indexes[j]+1)\n        for k in range(len(verb_start_indexes)-1):\n            if(plural_indexes[k] == verb_start_indexes[k+1]):\n                plural_indexes.pop(k)\n                break\n    return plural_indexes\ndef find_verb_position(text):\n    '''\n    Write a function to find the verb and its positions in a given sentence.\n    '''\n    verb_start_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z].*[A-Z]\",sentence[i])):\n            verb_start_indexes.append(i)\n    return verb_start_indexes\ndef find_verb_start_indexes(text):\n    '''\n    Write a function to find the verb start indexes in a given sentence.\n    '''\n    verb_start_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z].*[A-Z]\",sentence[i])):\n            verb_start_indexes.append(i)\n    return verb_start_indexes\ndef find_verb_end_indexes(text):\n    '''\n    Write a function to find the verb end indexes in a given sentence.\n    '''\n    verb_start_indexes = []\n    verb_end_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z].*[A-Z]\",sentence[i])):\n            verb_start_indexes.append(i)\n    for j in range(len(verb_start_indexes)-1):\n        verb_end_indexes.append(verb_start_indexes[j]+1)\n        for k in range(len(verb_start_indexes)-1):\n            if(verb_end_indexes[k] == verb_start_indexes[k+1]):\n                verb_end_indexes.pop(k)\n                break\n    return verb_end_indexes\ndef find_verb_end_indexes2(text):\n    '''\n    Write a function to find the verb end indexes in a given sentence.\n    '''\n    verb_start_indexes = []\n    verb_end_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z].*[A-Z]\",sentence[i])):\n            verb_start_indexes.append(i)\n    for j in range(len(verb_start_indexes)-1):\n        verb_end_indexes.append(verb_start_indexes[j]+1)\n        for k in range(len(verb_start_indexes)-1):\n            if(verb_end_indexes[k] == verb_start_indexes[k+1]):\n                verb_end_indexes.pop(k)\n                break\n    return verb_end_indexes\ndef find_noun_position(text):\n    '''\n    Write a function to find the noun and its positions in a given sentence.\n    '''\n    verb_start_indexes = []\n    noun_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z].*[A-Z]\",sentence[i])):\n            verb_start_indexes.append(i)\n    for j in range(len(verb_start_indexes)):\n        noun_indexes.append(verb_start_indexes[j]+1)\n        for k in range(len(verb_start_indexes)-1):\n            if(noun_indexes[k] == verb_start_indexes[k+1]):\n                noun_indexes.pop(k)\n                break\n    return noun_indexes\ndef find_adverb_position2(text):\n    '''\n    Write a function to find the adverb and its positions in a given sentence.\n    '''\n    verb_start_indexes = []\n    adverb_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z].*[A-Z]\",sentence[i])):\n            verb_start_indexes.append(i)\n    for j in range(len(verb_start_indexes)):\n        adverb_indexes.append(verb_start_indexes[j]+1)\n        for k in range(len(verb_start_indexes)-1):\n            if(adverb_indexes[k] == verb_start_indexes[k+1]):\n                adverb_indexes.pop(k)\n                break\n    return adverb_indexes\ndef find_noun_position2(text):\n    '''\n    Write a function to find the noun and its positions in a given sentence.\n    '''\n    verb_start_indexes = []\n    noun_indexes = []\n    sentence = text.split('.')\n    # print(sentence)\n    for i in range(len(sentence)):\n        if(re.findall(\"[A-Z].*[A-Z]"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    listOfAdverbs = [\"adj\", \"ad\", \"adv\"]\n    for word in listOfAdverbs:\n        for i in range(len(text)):\n            if (text[i].endswith(word)):\n                print(\"Adverb position:\", i)\n                print(\"Adverb:\", text[i])\n                break\n            if (text[i] == \".\"):\n                print(\"Adverb position:\", i)\n                print(\"Adverb:\", text[i])\n                break\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if (text[i] == \"the\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\n        if (text[i] == \"a\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\n        if (text[i] == \"an\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\n    for i in range(len(text)):\n        if (text[i] == \"the\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\n        if (text[i] == \"a\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\n        if (text[i] == \"an\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Noun position:\", i)\n            print(\"Noun:\", text[i])\n            break\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if (text[i] == \"the\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\n        if (text[i] == \"a\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\n        if (text[i] == \"an\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\n    for i in range(len(text)):\n        if (text[i] == \"the\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\n        if (text[i] == \"a\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\n        if (text[i] == \"an\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Adjective position:\", i)\n            print(\"Adjective:\", text[i])\n            break\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"a\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"an\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n    for i in range(len(text)):\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"a\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"an\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n    for i in range(len(text)):\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"a\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"an\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n    for i in range(len(text)):\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"a\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"an\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\n        if (text[i] == \"the\"):\n            print(\"Verb position:\", i)\n            print(\"Verb:\", text[i])\n            break\ndef find_object_position(text):\n    '''\n    Write a function to find the first object and their positions in a given sentence.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if (text[i] == \"the\"):\n            prin"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #s = re.findall(r'ADV\\s(.*)', text)\n    #return s\n    text = re.split(r'(ADV\\s)(.*)', text)\n    pos = 1\n    for i in range(1,len(text)):\n        pos += 1\n        if text[i][0] == 'ADV':\n            print(f'The word {text[i][1]} appears in position {pos}')\n            break\n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    x = re.finditer(r'\\w*[\\'\u2019]{1}n?t?\\w*', text)\n    for i in x:\n        if i.group() in [\"n't\",\"'n't\"]:\n            return True, i.start()\n    return False, 0\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text is None:\n        return None\n    text = text.lower()\n    regex_adverb_1 = '(?i)and|for|on|of|by|in|to|'\n    regex_adverb_2 = 'to|of|in|'\n    adverb_1 = re.findall(regex_adverb_1, text)\n    adverb_2 = re.findall(regex_adverb_2, text)\n    if len(adverb_1) > 0:\n        return {'adverb_1': adverb_1[0], 'pos_1': len(text) - len(adverb_1[0]) - len(adverb_2[0])}\n    elif len(adverb_2) > 0:\n        return {'adverb_2': adverb_2[0], 'pos_2': len(text) - len(adverb_2[0])}\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\w*ad|\\w*ly',text)\n    return_dict = {}\n    for index, word in enumerate(adverbs):\n        return_dict[word] = index\n    return return_dict\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n    \nprint(\"Surface area of a cube of size 5 is: \" + str(surfacearea_cube(5)))\nprint(\"Surface area of a cube of size 20 is: \" + str(surfacearea_cube(20)))\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 2*l**2\ndef num_keys(d):\n    '''\n    Given a dictionary with integer values, print out a sorted list of its key, value pairs.\n    '''\n    for k,v in d.items():\n        print(k,v)\ndef sort_list(l):\n    '''\n    Given a list, sort the list in-place using bubble sort algorithm.\n    '''\n    for i in range(len(l)):\n        for j in range(len(l)-1):\n            if l[j] > l[j+1]:\n                l[j],l[j+1] = l[j+1],l[j]\ndef reverse_dict(d):\n    '''\n    Given a dictionary, print out a dictionary with the keys and values of the original dictionary in reverse order.\n    '''\n    newd = {}\n    for k,v in d.items():\n        newd[v] = k\n    return newd\ndef palindrome_dict(d):\n    '''\n    Given a dictionary, print out a new dictionary with all keys of the original dictionary, except the ones that are not palindromes.\n    '''\n    newd = {}\n    for k,v in d.items():\n        if k == v:\n            newd[k] = v\n        else:\n            pal = k+v\n            if pal == pal[::-1]:\n                newd[k] = v\n    return newd\ndef sorted_pairs(l):\n    '''\n    Given a list, return a new sorted list of tuples. Each tuple consists of a value from the original list and the index of that value in the original list.\n    '''\n    tup = []\n    newtup = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            tup.append((l[i],j))\n    tup.sort()\n    for t in tup:\n        newtup.append(t[1])\n    return newtup\ndef check_palindrome_dict(d):\n    '''\n    Given a dictionary, print out a new dictionary with all keys of the original dictionary, except the ones that are not palindromes.\n    '''\n    newd = {}\n    for k,v in d.items():\n        if k == v:\n            newd[k] = v\n        else:\n            pal = k+v\n            if pal == pal[::-1]:\n                newd[k] = v\n    return newd\ndef mutate_string(s):\n    '''\n    Given a string, return a new string where each character in the original string is repeated exactly twice.\n    '''\n    return s*2\ndef factors(n):\n    '''\n    Given a number, return a sorted list of factors of that number.\n    '''\n    ans = []\n    for i in range(1,n):\n        if n % i == 0:\n            ans.append(i)\n    return ans\ndef get_last_n_months(n):\n    '''\n    Given an integer, return a list of the last n months of stock price data.\n    '''\n    ans = []\n    months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    for i in range(n):\n        ans.append(months[-i-1])\n    return ans\ndef common_elements(l1,l2):\n    '''\n    Given two lists, return a sorted list of the common elements between the lists.\n    '''\n    ans = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            ans.append(l1[i])\n    return ans\ndef num_pos_numbers(l):\n    '''\n    Given a list of numbers, print out a new list with the sum of the even numbers and the sum of the odd numbers.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even = even + l[i]\n        else:\n            odd = odd + l[i]\n    return even,odd\ndef print_sorted_in_reverse(l):\n    '''\n    Given a list, sort the list in-place in reverse order, then print out the list.\n    '''\n    l.sort()\n    l.reverse()\n    return l\ndef is_palindrome(s):\n    '''\n    Given a string, return True if it is a palindrome, False otherwise.\n    '''\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i]!= s[-i-1]:\n            return False\n    return True\ndef front_back(s):\n    '''\n    Given a string, return a new string where the first and last characters have been exchanged.\n    '''\n    ans = s[0] + s[-1] + s[1:-1] + s[0]\n    return ans\ndef rotate_letter(letter,n):\n    '''\n    Given a letter and a number, return a string that contains the letter shifted n characters to the right.\n    '''\n    ans = \"\"\n    for i in range(n):\n        ans = ans + letter\n    return ans\ndef replace_all(s,replace_str,replace_with):\n    '''\n    Given a string and a replacement, replace each occurrence of the replacement with the string in the original.\n    '''\n    ans = s.replace(replace_str,replace_with)\n    return ans\ndef find_sum(n,lst):\n    '''\n    Given a number n, and a list, return a new list with all elements less than or equal to n in the original list appended to the end.\n    '''\n    newlst = []\n    for i in range(len(lst)):\n        if lst[i] <= n:\n            newlst.append(lst[i])\n    return newlst\ndef sum_elements(l):\n    '''\n    Given a list of numbers, return the sum of all of the numbers in the list.\n    '''\n    ans = 0\n    for i in range(len(l)):\n        ans = ans + l[i]\n    return ans\ndef find_leap_years(a):\n    '''\n    Given a list of integers, return a new list with the integer entries in the original list in the same order, except with any February 29th entries removed.\n    '''\n    ans = []\n    for i in range(len(a)):\n        if a[i] % 4!= 0:\n            ans.append(a[i])\n    return ans\ndef find_longest_word(s):\n    '''\n    Given a string, return the length of the longest word in the string.\n    '''\n    ans = \"\"\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if len(s[i:j+1]) > len(ans) and s[i:j+1]!= ans:\n                ans = s[i:j+1]\n    return len(ans)\ndef is_there_anagram(s1,s2):\n    '''\n    Given two strings, return True if one is an anagram of the other, False otherwise.\n    '''\n    s1 = s1.replace(\" \",\"\").lower()\n    s2 = s2.replace(\" \",\"\").lower()\n    if len(s1)!= len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for i in range(len(s1)):\n        if s1[i] not in s1_dict:\n            s1_dict[s1[i]] = 1\n        else:\n            s1_dict[s1[i]] += 1\n        if s2[i] not in s2_dict:\n            s2_dict[s2[i]] = 1\n        else:\n            s2_dict[s2[i]] += 1\n    for k,v in s1_dict.items():\n        if k not in s2_dict:\n            return False\n        if v!= s2_dict[k]:\n            return False\n    return True\ndef is_symmetric(s1,s2):\n    '''\n    Given two strings, return True if the"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2*6\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l * l * l\n    return a\nprint(surfacearea_cube(5))\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l==1:\n        return 4\n    elif l==2:\n        return 6\n    elif l==3:\n        return 6*4\n    else:\n        return 6*4*3\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return l*l*6\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i >= 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return (len(nums)-nums.count(0))/len(nums)\ndef max_count(nums):\n    '''\n    Write a function to find the largest positive number in an array of integers.\n    '''\n    max = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n    return max\ndef sum_count(nums):\n    '''\n    Write a function to find the sum of all the positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in nums:\n        if i > 0:\n            sum += i\n    return sum\ndef is_anagram(s1,s2):\n    '''\n    Write a function that checks if two strings are anagrams of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    a = sorted(s1)\n    b = sorted(s2)\n    for i in range(len(s1)):\n        if a[i]!= b[i]:\n            return False\n    return True\ndef fizz_buzz(n):\n    '''\n    Write a program that prints each number from 1 to n on a new line.\n    '''\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print('fizzbuzz')\n        elif i % 3 == 0:\n            print('fizz')\n        elif i % 5 == 0:\n            print('buzz')\n        else:\n            print(i)\ndef num_count(nums):\n    '''\n    Write a program that prints the number of negative numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count\ndef add_count(nums):\n    '''\n    Write a program that prints the number of positives and negatives in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for i in nums:\n        if i > 0:\n            positive += 1\n        elif i < 0:\n            negative += 1\n    return (positive,negative)\ndef new_count(nums):\n    '''\n    Write a program that prints the numbers in an array of integers that are divisible by 2 and 5.\n    '''\n    arr = []\n    for i in nums:\n        if i % 2 == 0 and i % 5 == 0:\n            arr.append(i)\n    print(arr)\ndef num_set(nums):\n    '''\n    Write a program that prints the numbers in an array of integers that are divisible by 2 and 5.\n    '''\n    num_set = set(nums)\n    for i in num_set:\n        if i % 2 == 0 and i % 5 == 0:\n            print(i)\ndef change_sum(nums):\n    '''\n    Write a program that prints the sum of the numbers in an array of integers that are divisible by 3 and 5.\n    '''\n    for i in nums:\n        if i % 3 == 0 and i % 5 == 0:\n            print(i)\ndef sum_divisible(nums):\n    '''\n    Write a program that prints the sum of the numbers in an array of integers that are divisible by 3 and 5.\n    '''\n    total = 0\n    for i in nums:\n        if i % 3 == 0 and i % 5 == 0:\n            total += i\n    return total\ndef sum_even(nums):\n    '''\n    Write a program that prints the sum of the numbers in an array of integers that are divisible by 2 and 5.\n    '''\n    total = 0\n    for i in nums:\n        if i % 2 == 0:\n            total += i\n    return total\ndef is_prime(num):\n    '''\n    Write a program that prints the number of prime numbers in an array of integers.\n    '''\n    if num < 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\ndef count_prime(nums):\n    '''\n    Write a program that prints the number of prime numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i < 1:\n            continue\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\ndef check_prime(nums):\n    '''\n    Write a program that prints all the prime numbers in an array of integers.\n    '''\n    nums_prime = []\n    for i in range(2,nums):\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            nums_prime.append(i)\n    print(nums_prime)\ndef get_num(nums):\n    '''\n    Write a program that prints the sum of the numbers in an array of integers.\n    '''\n    total = 0\n    for i in nums:\n        total += i\n    return total\ndef find_num(nums):\n    '''\n    Write a program that prints the number in an array of integers that is the largest.\n    '''\n    max = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n    return max\ndef count_num(nums):\n    '''\n    Write a program that prints the number of integers in an array of integers that are even.\n    '''\n    count = 0\n    for i in nums:\n        if i % 2 == 0:\n            count += 1\n    return count\ndef divisible(nums):\n    '''\n    Write a program that prints the numbers in an array of integers that are divisible by 3 and 5.\n    '''\n    for i in nums:\n        if i % 3 == 0 and i % 5 == 0:\n            print(i)\ndef even_num(nums):\n    '''\n    Write a program that prints the numbers in an array of integers that are divisible by 3 and 5.\n    '''\n    count = 0\n    for i in nums:\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n    return count\ndef star_count(str):\n    '''\n    Write a program that prints the number of stars in an array of integers.\n    '''\n    star = 0\n    for i in range(len(str)):\n        if str[i] == \"*\":\n            star += 1\n    return star\ndef num_stars(str):\n    '''\n    Write a program that prints the numbers in an array of integers that are divisible by 3 and 5.\n    '''\n    count = 0\n    for i in str:\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n    return count\ndef star_num(str):\n    '''\n    Write a program that prints the numbers in an array of integers that are divisible by 3 and 5.\n    '''\n    count = 0\n    for i in str:\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n    return count\ndef add_char(str):\n    '''\n    Write a program that prints the numbers in an array of integers that are divisible by 3 and 5.\n    '''\n    str = str.upper()\n    for i in str:\n        if i == \"A\" or i == \"B\" or i == \"C\" or i == \"D\" or i == \"E\" or i == \"F\" or i == \"G\" or i == \"H\" or i == \"I\" or i == \"J\" or i == \"K\" or i == \"L\" or i == \"M\" or i == \"N\" or i == \"O\" or i == \"P\" or i == \"Q\" or i == \"R\" or i == \"S\" or i == \"T\" or i == \"U\" or i == \"V\" or i == \"W\" or i == \"X\" or i == \"Y\" or i == \"Z\":\n            print(i)\ndef count_char(str):\n    '''\n    Write a program that prints the numbers in an array of integers that are divisible by 3 and 5.\n    '''\n    str "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    sum_pos = 0\n    for i in nums:\n        if i > 0:\n            sum_pos += 1\n    return sum_pos/n\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = array('i', nums)\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\nprint(positive_count([-8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    negatives = 0\n    positives = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negatives += 1\n        elif nums[i] > 0:\n            positives += 1\n    return positives/(positives + negatives)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for i in nums:\n        if i > 0:\n            pos_count += 1\n        elif i < 0:\n            neg_count += 1\n    return pos_count / (pos_count + neg_count)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i > 0:\n            pos += 1\n    return pos/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_value = 0\n    for i in list1:\n        if(i<0):\n            if(i>max_value):\n                max_value = i\n    return max_value\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_value = -999999\n    for i in range(0,len(list1)):\n        if list1[i] < 0 and list1[i] > max_value:\n            max_value = list1[i]\n    return max_value\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort(reverse=True)\n    return list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -9999999\n    for i in list1:\n        if(i < 0):\n            if(max < i):\n                max = i\n    return max\n    \nprint(largest_neg([]))\nprint(largest_neg([-2, -4, -5, -6]))\nprint(largest_neg([-7, -3, -5, -5]))\nprint(largest_neg([-1, -2, -3, -4, -5]))\nprint(largest_neg([-5, -4, -3, -2, -1]))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            largest = max(list1[i], largest)\n    print('Largest negative number in given list:', largest)\n    return\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -1\n    for num in list1:\n        if num < 0:\n            if num > largest_neg:\n                largest_neg = num\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    largest = 0\n    \n    for x in list1:\n        if x < 0 and x > largest:\n            largest = x\n            \n    return largest\n    \nlist1 = [-1,2,3,4,5,6,7,8,-100,0,0,-11,2,-6,9,10,0]\nprint(largest_neg(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_n = list1\n    list_n.sort(reverse=True)\n    print(list_n)\n    list_n = list(map(abs, list_n))\n    print(list_n)\n    max_n = max(list_n)\n    print(max_n)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    max = list1[0]\n    for i in list1:\n        if i < 0:\n            if i > max:\n                max = i\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return max(list2)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    k_elem = []\n    for i in test_list:\n        if len(i) == K:\n            k_elem.append(i)\n    return k_elem\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(K):\n        test_list = list(filter(lambda x: x[i]!= i, test_list))\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(tuple(t[:K]), t[-1]) for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    output = []\n    for item in test_list:\n        output.append(item[:K])\n    return output\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        t = test_list[i]\n        if len(t) < K:\n            test_list[i] = t + tuple([0]*(K-len(t)))\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i] = test_list[i][:j] + test_list[i][j + K:]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n        \n    return test_list\n        \ndef get_category(test_list):\n    '''\n    Write a function to get the category of a list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == 1:\n                test_list[i] = 'Positive'\n            else:\n                test_list[i] = 'Negative'\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list = list(test_list)\n    test_list = list(filter(lambda x: x[K]!= None, test_list))\n    return tuple(test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    i = 0\n    tup_size = len(test_tup1)\n    tup_2_size = len(test_tup2)\n    while i < tup_size and i < tup_2_size:\n        tup_1_val = test_tup1[i]\n        tup_2_val = test_tup2[i]\n        product = tup_1_val * tup_2_val\n        print(tup_1_val, \"*\", tup_2_val, \"=\", product)\n        i += 1\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1,test_tup2\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(tup1[idx]*tup2[idx] for idx in range(len(tup1)))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # print(\"In index_multiplication\")\n    result_tup = ()\n    for i in range(0,len(test_tup1)):\n        result_tup += (test_tup1[i]*test_tup2[i],)\n    # print(result_tup)\n    return result_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (tuple(i*j for i, j in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        return None\n    temp_tup = ()\n    for i in range(len(test_tup1)):\n        temp_tup = temp_tup + (test_tup1[i] * test_tup2[i],)\n    return temp_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    '''\n    def index_multiplication(test_tup1, test_tup2):\n    '''\n    tup1 = (3, 5, 7, 9)\n    tup2 = (2, 4, 6, 8)\n    result = (3, 10, 27, 63)\n    \n    print(index_multiplication(tup1, tup2))\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for x in range(len(test_tup1)):\n        result = result + (test_tup1[x] * test_tup2[x],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x*y,test_tup1,test_tup2))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for i in tup:\n        for j in lst:\n            if i == j:\n                cnt = cnt+1\n    return cnt"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if tup[i] in lst:\n            new_lst.append(tup[i])\n    return new_lst\ndef isPrime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for i in range(len(tup)): \n        if tup[i] in lst: \n            cnt += 1\n    return cnt \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(Counter(lst))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for i in lst:\n        count_lst.append(tup.count(i))\n    return count_lst\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).items()\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = lst.split()\n    tup = tup.split()\n    lst = [int(i) for i in lst]\n    tup = [int(i) for i in tup]\n    new_tup = (tuple(set(lst) & set(tup)))\n    new_tup = list(new_tup)\n    return Counter(new_tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = []\n    for i in lst:\n        res.append((i,tup.count(i)))\n    return res\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = {}\n    for i in range(len(lst)):\n        occurence[lst[i]] = 0\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_lst = []\n    for el in tup:\n        count = 0\n        for i in range(len(lst)):\n            if lst[i] == el:\n                count+=1\n        count_lst.append(count)\n    return count_lst\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num*num*num)\n    return res\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for n in nums:\n        print('%s^3' % n)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in nums:\n        cube_list.append(i**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for n in nums:\n        cube_nums.append(n**3)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        assert isinstance(num, int), 'nums must be a list of integers'\n        assert num >= 0, 'nums must be positive'\n        \n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n    \n    \ndef cube_nums_no_listcomp(nums):\n    '''\n    Write a function to find cubes of individual elements in a list without using listcomprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        assert isinstance(num, int), 'nums must be a list of integers'\n        assert num >= 0, 'nums must be positive'\n        \n    cube = []\n    for num in nums:\n        cube.append(num**3)\n    return cube\n    \n    \ndef cube_nums_nested_listcomp(nums):\n    '''\n    Write a function to find cubes of individual elements in a list without using listcomprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        assert isinstance(num, int), 'nums must be a list of integers'\n        assert num >= 0, 'nums must be positive'\n        \n    cube = [[num**3 for num in nums]]\n    return cube\n    \n    \ndef cube_nums_nested_listcomp_short(nums):\n    '''\n    Write a function to find cubes of individual elements in a list without using listcomprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        assert isinstance(num, int), 'nums must be a list of integers'\n        assert num >= 0, 'nums must be positive'\n        \n    cube = [[num**3 for num in nums]]\n    return cube\n    \n    \ndef cube_nums_short(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using list comprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    cube = []\n    for num in nums:\n        cube.append(num**3)\n    return cube\n    \n    \ndef cube_nums_short_using_map(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using map and lambda.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    cube = map(lambda num: num**3, nums)\n    return list(cube)\n    \n    \ndef cube_nums_short_using_filter(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using filter and lambda.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    cube = filter(lambda num: num**3, nums)\n    return list(cube)\n    \n    \ndef cube_nums_short_using_filter_on_map(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using filter and map and lambda.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    cube = map(lambda num: num**3, filter(lambda num: num**3, nums))\n    return list(cube)\n    \n    \ndef cube_nums_short_using_filter_on_map_on_map(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using filter, map and map and lambda.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    cube = map(lambda num: num**3, filter(lambda num: num**3, map(lambda num: num, nums)))\n    return list(cube)\n    \n    \ndef cube_nums_no_map(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using list comprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        assert isinstance(num, int), 'nums must be a list of integers'\n        assert num >= 0, 'nums must be positive'\n        \n    cube = []\n    for num in nums:\n        cube.append(num**3)\n    return cube\n    \n    \ndef cube_nums_no_map_short(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using list comprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        assert isinstance(num, int), 'nums must be a list of integers'\n        assert num >= 0, 'nums must be positive'\n        \n    cube = nums**3\n    return cube\n    \n    \ndef cube_nums_no_listcomp_short(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using list comprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        assert isinstance(num, int), 'nums must be a list of integers'\n        assert num >= 0, 'nums must be positive'\n        \n    cube = [num**3 for num in nums]\n    return cube\n    \n    \ndef cube_nums_no_listcomp_short_using_map(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using list comprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        assert isinstance(num, int), 'nums must be a list of integers'\n        assert num >= 0, 'nums must be positive'\n        \n    cube = map(lambda num: num**3, nums)\n    return list(cube)\n    \n    \ndef cube_nums_no_listcomp_short_using_map_on_map(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using list comprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        assert isinstance(num, int), 'nums must be a list of integers'\n        assert num >= 0, 'nums must be positive'\n        \n    cube = map(lambda num: num**3, nums)\n    cube = map(lambda num: num**3, map(lambda num: num, nums))\n    return list(cube)\n    \n    \ndef cube_nums_no_map_short_using_filter(nums):\n    '''\n    Write a function to find cubes of individual elements in a list using list comprehension.\n    '''\n    assert isinstance(nums, list), 'nums must be a list'\n    assert nums!= [], 'cannot have an empty list'\n    \n    for num in nums:\n        asser"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for i in nums:\n        cube.append(i**3)\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num ** 3)\n    return cube_nums\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return int(str(n).replace(\"-\",\"\")*(2/3))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def sum_odd_even(n):\n        sum=0\n        for i in range(1,n+1):\n            if i%2==0:\n                sum+=i\n            else:\n                sum+=i*2\n        return sum\n    return sum_odd_even(n)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return n\n    return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return n\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    while n >= 1:\n        s += n\n        n = n - 2\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # 1st method:\n    if n == 1:\n        return 1\n    else:\n        return n+cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def sum(n):\n        total = 0\n        i = 1\n        while i <= n:\n            if n % i == 0:\n                total += i\n            i += 1\n        return total\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    if n == 0: \n        return 0\n    if n < 0:\n        return -1\n    for i in range(n):\n        sum += i\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str = str.split(' ')\n    i = 0\n    while i < l:\n        s = str[i]\n        if len(s) > l:\n            return s[:l]\n        i += 1\n    return ''.join(str[i])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < l:\n        return \"\"\n    else:\n        return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(l):\n        #print(new_list)\n        if len(str) > 0:\n            new_list.append(str[0])\n            str.remove(str[0])\n    return new_list\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        return str[:l]\n    else:\n        return str\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    s_list = []\n    for i in str:\n        if len(s) < l:\n            s = s+i\n        else:\n            s_list.append(s)\n            s = i\n    s_list.append(s)\n    return s_list\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    n = len(str)\n    for i in range(0, n):\n        l.append(str[i][:l])\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for x in range(0, len(str)):\n        if x % l == 0:\n            str_list.append(str[x])\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return''.join(str[i:i+l] for i in range(0, len(str), l))\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    lst = text1.strip().split(\" \")\n    print(lst)\n    return lst\ndef replace_whitespaces(text1):\n    '''\n    Write a function to replace all whitespaces in the given string with given character.\n    '''\n    lst = text1.replace(\" \", \",\")\n    print(lst)\n    return lst\ndef remove_parenthesis(text2):\n    '''\n    Write a function to remove the parenthesis from the given string.\n    '''\n    str = text2.replace('(', '')\n    str = str.replace(')', '')\n    print(str)\n    return str\ndef all_upper(text3):\n    '''\n    Write a function to check if all the words in the given string are in upper case or not.\n    '''\n    lst = text3.split(' ')\n    lst = list(map(lambda x: x.upper(), lst))\n    print(lst)\n    if ''.join(lst).isupper():\n        print(\"true\")\n        return True\n    else:\n        print(\"false\")\n        return False\ndef all_lower(text4):\n    '''\n    Write a function to check if all the words in the given string are in lower case or not.\n    '''\n    lst = text4.split(' ')\n    lst = list(map(lambda x: x.lower(), lst))\n    print(lst)\n    if ''.join(lst).islower():\n        print(\"true\")\n        return True\n    else:\n        print(\"false\")\n        return False\ndef swap_characters(text5):\n    '''\n    Write a function to swap the first two characters from the given string.\n    '''\n    lst = list(text5)\n    lst[0], lst[1] = lst[1], lst[0]\n    print(''.join(lst))\n    return ''.join(lst)\ndef is_palindrome(text6):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    lst = list(text6)\n    i = 0\n    j = len(lst)-1\n    while i < j:\n        if lst[i]!= lst[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef reverse_word_order(text7):\n    '''\n    Write a function to reverse the order of the words in the given string.\n    '''\n    text = text7.split(' ')\n    lst = list(map(lambda x: x[::-1], text))\n    print(lst)\n    return''.join(lst)\ndef swap_case(text8):\n    '''\n    Write a function to swap the case of all the words in the given string.\n    '''\n    lst = text8.split(' ')\n    lst = list(map(lambda x: x.swapcase(), lst))\n    print(lst)\n    return''.join(lst)\ndef split_words(text9):\n    '''\n    Write a function to split the given string into words using space delimiter.\n    '''\n    lst = text9.split(' ')\n    return lst\ndef display_first_and_last_letter(text10):\n    '''\n    Write a function to display the first and last character in the given string.\n    '''\n    text = list(text10)\n    print(text[0], text[-1])\n    return text[0], text[-1]\ndef display_first_and_last_number(text11):\n    '''\n    Write a function to display the first and last number in the given string.\n    '''\n    text = text11.split(' ')\n    lst = list(map(lambda x: int(x), text))\n    lst.sort()\n    print(lst[0], lst[-1])\n    return lst[0], lst[-1]\ndef replace_all_values(text12):\n    '''\n    Write a function to replace all the occurrence of a pattern in the given string.\n    '''\n    text = text12.replace('[','(',1)\n    text = text.replace(']',' )',1)\n    print(text)\n    return text\ndef count_occurrences(text13):\n    '''\n    Write a function to count the occurrences of a pattern in the given string.\n    '''\n    lst = text13.split(' ')\n    lst = list(map(lambda x: x.count(x), lst))\n    print(lst)\n    return lst\ndef reverse_sentence(text14):\n    '''\n    Write a function to reverse the sentence in the given string.\n    '''\n    text = text14.split(' ')\n    text = list(map(lambda x: x[::-1], text))\n    text =''.join(text)\n    print(text)\n    return text\ndef count_even_odd_occurrences(text15):\n    '''\n    Write a function to count even and odd numbers in the given string.\n    '''\n    lst = text15.split(' ')\n    lst = list(map(lambda x: int(x), lst))\n    lst = list(map(lambda x: x % 2 == 0, lst))\n    print(lst)\n    return lst\ndef count_vowels(text16):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    lst = list(text16)\n    lst = list(map(lambda x: x.lower(), lst))\n    lst = list(map(lambda x: x in ('a', 'e', 'i', 'o', 'u'), lst))\n    print(lst)\n    return lst\ndef count_vowels_in_lowercase(text17):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    lst = list(text17.lower())\n    lst = list(map(lambda x: x in ('a', 'e', 'i', 'o', 'u'), lst))\n    print(lst)\n    return lst\ndef count_vowels_in_uppercase(text18):\n    '''\n    Write a function to count the number of vowels in the given string.\n    '''\n    lst = list(text18.lower())\n    lst = list(map(lambda x: x in ('a', 'e', 'i', 'o', 'u'), lst))\n    print(lst)\n    return lst\ndef count_digits(text19):\n    '''\n    Write a function to count the number of digits in the given string.\n    '''\n    lst = list(text19)\n    lst = list(map(lambda x: x in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), lst))\n    print(lst)\n    return lst\ndef count_digits_in_lowercase(text20):\n    '''\n    Write a function to count the number of digits in the given string.\n    '''\n    lst = list(text20.lower())\n    lst = list(map(lambda x: x in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), lst))\n    print(lst)\n    return lst\ndef count_digits_in_uppercase(text21):\n    '''\n    Write a function to count the number of digits in the given string.\n    '''\n    lst = list(text21.lower())\n    lst = list(map(lambda x: x in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), lst))\n    print(lst)\n    return lst\ndef count_letters(text22):\n    '''\n    Write a function to count the number of letters in the given string.\n    '''\n    lst = list(text22)\n    lst = list(map(lambda x: x.isalpha(), lst))\n    print(lst"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', \"\", text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # first get the length of the string\n    length = len(text1)\n    # loop through the string\n    for i in range(length):\n        # if this is a whitespace, remove it\n        if text1[i] == \" \":\n            text1 = text1[:i] + text1[i+1:]\n    return text1\n    \n    \ndef remove_nonalphanumeric(text2):\n    '''\n    Write a function to remove all non-alphanumeric characters from the given string.\n    '''\n    # first get the length of the string\n    length = len(text2)\n    # loop through the string\n    for i in range(length):\n        # if this is a non-alphanumeric character, remove it\n        if not re.match(r'^[0-9a-zA-Z]*$', text2[i]):\n            text2 = text2[:i] + text2[i+1:]\n    return text2\n    \ndef remove_all_but_ascii(text3):\n    '''\n    Write a function to remove all characters that are not ascii characters from the given string.\n    '''\n    # first get the length of the string\n    length = len(text3)\n    # loop through the string\n    for i in range(length):\n        # if this is a non-ascii character, remove it\n        if not 32 <= ord(text3[i]) <= 126:\n            text3 = text3[:i] + text3[i+1:]\n    return text3\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\ndef remove_prefix(text1):\n    '''\n    Write a function to remove the given prefix from the given string.\n    '''\n    text1 = re.sub(r'\\s+',' ',text1)\n    return text1\ndef remove_suffix(text1):\n    '''\n    Write a function to remove the given suffix from the given string.\n    '''\n    text1 = re.sub(r'\\s+',' ',text1)\n    return text1\ndef remove_double_spaces(text1):\n    '''\n    Write a function to remove the given double spaces in the given string.\n    '''\n    text1 = re.sub(r'\\s+',' ',text1)\n    return text1\ndef remove_dash(text1):\n    '''\n    Write a function to remove the given dashes in the given string.\n    '''\n    text1 = re.sub(r'-',' ',text1)\n    return text1\ndef remove_parenthesis(text1):\n    '''\n    Write a function to remove the given parenthesis in the given string.\n    '''\n    text1 = re.sub(r'\\(',' ',text1)\n    return text1\ndef remove_apostrophe(text1):\n    '''\n    Write a function to remove the given apostrophe in the given string.\n    '''\n    text1 = re.sub(r'\\'',' ',text1)\n    return text1\ndef remove_invisible(text1):\n    '''\n    Write a function to remove the invisible characters in the given string.\n    '''\n    text1 = re.sub(r'[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]','',text1)\n    return text1\ndef remove_special_characters(text1):\n    '''\n    Write a function to remove the special characters in the given string.\n    '''\n    text1 = re.sub(r'[^a-zA-Z0-9 ]+','',text1)\n    return text1\ndef remove_emails(text1):\n    '''\n    Write a function to remove the emails in the given string.\n    '''\n    text1 = re.sub(r'\\w+@\\w+','',text1)\n    return text1\ndef remove_phone_numbers(text1):\n    '''\n    Write a function to remove the phone numbers in the given string.\n    '''\n    text1 = re.sub(r'\\d{10}','',text1)\n    return text1\ndef remove_url(text1):\n    '''\n    Write a function to remove the url's in the given string.\n    '''\n    text1 = re.sub(r'\\w+:\\/\\/.*','',text1)\n    return text1\ndef remove_html_tags(text1):\n    '''\n    Write a function to remove the html tags in the given string.\n    '''\n    text1 = re.sub(r'<.*?>','',text1)\n    return text1\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove multiple spaces in the given string.\n    '''\n    text1 = re.sub(r'\\s+',' ',text1)\n    return text1\ndef remove_special_characters1(text1):\n    '''\n    Write a function to remove the special characters in the given string.\n    '''\n    text1 = re.sub(r'[^\\w ]+','',text1)\n    return text1\ndef remove_uppercase(text1):\n    '''\n    Write a function to remove the uppercase in the given string.\n    '''\n    text1 = re.sub(r'[A-Z]+','',text1)\n    return text1\ndef remove_special_characters2(text1):\n    '''\n    Write a function to remove the special characters in the given string.\n    '''\n    text1 = re.sub(r'[^a-zA-Z0-9 ]+','',text1)\n    return text1\ndef remove_special_characters3(text1):\n    '''\n    Write a function to remove the special characters in the given string.\n    '''\n    text1 = re.sub(r'\\W+','',text1)\n    return text1\ndef remove_special_characters4(text1):\n    '''\n    Write a function to remove the special characters in the given string.\n    '''\n    text1 = re.sub(r'\\w+','',text1)\n    return text1\ndef remove_digits(text1):\n    '''\n    Write a function to remove the digits in the given string.\n    '''\n    text1 = re.sub(r'\\d+','',text1)\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove the punctuations in the given string.\n    '''\n    text1 = re.sub(r'[^\\w ]+','',text1)\n    return text1\ndef remove_accented_characters(text1):\n    '''\n    Write a function to remove the accented characters in the given string.\n    '''\n    text1 = re.sub(r'[\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u0107\u010d\u00e7\u00e9\u00e8\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff]+','',text1)\n    return text1\ndef remove_special_characters5(text1):\n    '''\n    Write a function to remove the special characters in the given string.\n    '''\n    text1 = re.sub(r'[^a-zA-Z0-9 ]+','',text1)\n    return text1\ndef remove_special_characters6(text1):\n    '''\n    Write a function to remove the special characters in the given string.\n    '''\n    text1 = re.sub(r'\\W+','',text1)\n    return text1\ndef remove_whitespace(text1):\n    '''\n    Write a function to remove the extra whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\ndef remove_special_characters7(text1):\n    '''\n    Write a function to remove the special characters in the given string.\n    '''\n    text1 = re.sub(r'\\W+','',text1)\n    return text1\ndef remove_special_characters8(text1):\n    '''\n    Write a function to remove the special characters in the given string.\n    '''\n    text1 = re.sub(r'[^a-zA-Z0-9 ]+','',text1)\n    return text1\ndef remove_urls(text1):\n    '''\n    Write a function to remove the urls in the given string.\n    '''\n    text1 = re.sub(r'http[s]?://\\S+','',text1)\n    return text1\ndef remove_parenthesis1(text1):\n    '''\n    Write a function to remove the parenthesis in the given string.\n    '''\n    text1 = re.sub(r'\\(.*?\\)|\\*|\\+|\\-|\\?|\\.','',text1)\n    return text1\ndef remove_parenthesis2(text1):\n    '''\n    Write a function to remove the parenthesis in the given string.\n    '''\n    text1 = re.sub(r'\\(.*?\\)|\\*|\\+|\\-|\\?|\\.','',text1)\n    return text1\ndef remove_parenthesis3(text1):\n    '''\n    Write a function to remove the parenthesis in the given string.\n    '''\n    text1 = re.sub(r'\\(.*?\\)|\\*|\\+|\\-|\\?|\\.','',text1)\n    return text1\ndef remove_parenthesis4(text1):\n    '''\n    Write a function to remove the parenthesis in the given string.\n    '''\n    text1 = re.sub(r'\\(.*?\\)|\\*|\\+|\\-|\\?|\\.','',text1)\n    return text1\nde"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(\"\\s+\")\n    result = pattern.sub(\"\", text1)\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.strip()\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    text1 = text1.replace(\" \", \"\")\n    text1 = text1.replace(\"\\t\", \"\")\n    return text1\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount :\n        print('No Loss')\n    else:\n        print(sale_amount - actual_cost)\n    \n    \ndef loss_percentage(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss percentage on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount :\n        print('No Loss')\n    else:\n        print((sale_amount - actual_cost) * 100 / actual_cost)\n    \n    \ndef purchase_and_sell(actual_cost,sale_amount): \n    '''\n    Write a function that gives purchase and sell on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount :\n        print('Purchase')\n        print('Sell')\n    else:\n        print('Purchase')\n        print('No Sale')\n    \n    \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount: \n        return actual_cost-sale_amount\n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return 0\n    else: \n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return (sale_amount - actual_cost)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Program to find the sum of divisors. \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    while n > 1 : \n        if (n % 2 == 0): \n            sum += n \n        n = n // 2\n    return sum \ndef factorize(n) : \n    '''\n    Write a python function to factorize a given number \n    '''\n    if (n == 1) : \n        return None\n    temp = n \n    fact = [] \n    i = 2\n    while i <= math.sqrt(n): \n        if temp % i == 0: \n            while temp % i == 0: \n                temp /= i \n            fact.append(i) \n        i += 1\n    if temp > 1: \n        fact.append(temp)\n    return fact \ndef countDivisors(n) : \n    '''\n    Write a python function to count the total number of divisors of a given number. \n    '''\n    div = 0\n    if n == 1:\n        return 1\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            div+=1\n    if(int(math.sqrt(n))+1)**2 > n:\n        div+=1\n    return div\ndef checkPrime(n) : \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef primeFactors(n) : \n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    prime_factors = []\n    for i in range(1,n):\n        if checkPrime(i) == True:\n            if (n%i) == 0:\n                prime_factors.append(i)\n    return prime_factors\ndef gcd(a, b) : \n    '''\n    Write a python function to find the GCD of two numbers. \n    '''\n    while(b): \n        a, b = b, a % b \n    return a \ndef gcdIter(a, b) : \n    '''\n    Write a python function to find the GCD of two numbers using iterative function.\n    '''\n    while(b): \n        a, b = b, a % b \n    return a \ndef minSubarray(a, n) : \n    '''\n    Write a python function to find the minimum size subarray which sums to a given value.\n    '''\n    subarray = []\n    for i in range(n):\n        subarray.append(0)\n    start = 0\n    end = 0\n    total = 0\n    while total <= a :\n        if end == n:\n            break\n        total += subarray[end]\n        if total > a:\n            if end!= start:\n                subarray[start] = subarray[end]\n            start += 1\n            end = start\n        else:\n            end += 1\n    if end - start!= 0:\n        return end - start\n    else:\n        return -1\ndef findDuplicates(nums) : \n    '''\n    Write a python function to find all duplicates in a given array.\n    '''\n    nums_set = set(nums)\n    nums_list = list(nums_set)\n    duplicates = []\n    for i in range(len(nums_list)):\n        if nums_list[i] in nums_set:\n            duplicates.append(nums_list[i])\n    return duplicates\ndef findAnagrams(s, p) : \n    '''\n    Write a python function to find all anagrams in a given string.\n    '''\n    n = len(s)\n    m = len(p)\n    if n == 0 or m == 0:\n        return []\n    result = []\n    sub_string = s[:m]\n    hash_map = {}\n    hash_map_s = {}\n    for i in range(m):\n        hash_map[sub_string[i]] = hash_map.get(sub_string[i], 0) + 1\n        hash_map_s[sub_string[i]] = hash_map_s.get(sub_string[i], 0) + 1\n    for i in range(m, n):\n        sub_string = s[i - m: i]\n        hash_map[sub_string] = hash_map.get(sub_string, 0) + 1\n        hash_map_s[sub_string] = hash_map_s.get(sub_string, 0) + 1\n        if hash_map == hash_map_s:\n            result.append(i - m)\n        hash_map[sub_string] = hash_map.get(sub_string, 0) - 1\n        if hash_map[sub_string] == 0:\n            del hash_map[sub_string]\n        hash_map_s[sub_string] = hash_map_s.get(sub_string, 0) - 1\n        if hash_map_s[sub_string] == 0:\n            del hash_map_s[sub_string]\n    return result \ndef numDecodings(s) : \n    '''\n    Write a python function to find the number of ways to decode a given string.\n    '''\n    if s == \"\":\n        return 1\n    n = len(s)\n    dp = [0] * n\n    dp[0] = 1\n    if s[0]!= \"0\":\n        dp[1] = 1\n    if s[1]!= \"0\":\n        dp[1] = 2\n    for i in range(2, n):\n        if s[i]!= \"0\":\n            dp[i] = dp[i-1]\n        if 10 <= int(s[i-2:i]) <= 26:\n            dp[i] += dp[i-2]\n    return dp[n-1]\ndef findMaxRepeating(s) : \n    '''\n    Write a python function to find the longest repeating substring.\n    '''\n    if s == \"\":\n        return \"\"\n    n = len(s)\n    dp = [[0] * n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    max_str = s[0]\n    curr_len = dp[0][n-1]\n    i = 1\n    while i <= curr_len:\n        if dp[0][i-1] == curr_len:\n            max_str = s[0:i]\n        i += 1\n    return max_str\ndef kthSmallest(arr, n, k) : \n    '''\n    Write a python function to find the kth smallest element in an array.\n    '''\n    i = 0\n    j = n - 1\n    while i < j:\n        mid = math.floor((i + j) / 2)\n        if arr[mid] > arr[j]:\n            i = mid + 1\n        else:\n            j = mid\n    return arr[i]\ndef hIndex(arr, n):\n    '''\n    Write a python function to find the h-index of an array.\n    '''\n    arr.sort()\n    for i in range(n):\n        if arr[i] >= n:\n            return n\n    return n - 1\ndef insertionSort(a):\n    '''\n    Write a python function to sort an array using insertion sort algorithm.\n    '''\n    for i in range(1, len(a)):\n        curr = a[i]\n        j = i - 1\n        while j >= 0 and a[j] > curr:\n            a[j + 1] = a[j]\n            j -= 1\n        a[j + "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            sum_of_factors += i\n    return sum_of_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n%i==0):\n            if(i%2==0):\n                s=s+i\n            else:\n                s=s+i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(range(1,n+1))\n    \nprint(sumofFactors(10))"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while n!= 1 : \n        if n%i == 0:\n            sum += i\n        i += 2\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if(n%i == 0):\n            s += i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==1:\n        return n\n    else:\n        return n + sumofFactors(math.floor(n/2))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while(n!=0):\n        if(n%2==0):\n            sum += n\n        n = n // 2\n    print(sum)\n    return sum\ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    sum = 0\n    while(n!=0):\n        if(n%2!=0):\n            sum += n\n        n = n // 2\n    print(sum)\n    return sum\ndef sumofFactors3(n):\n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    sum = 0\n    while(n!=0):\n        if(n%2!=0):\n            sum += n\n        n = n // 2\n    print(sum)\n    return sum\ndef sumofFactors4(n):\n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    sum = 0\n    while(n!=0):\n        if(n%2==0):\n            sum += n\n        n = n // 2\n    print(sum)\n    return sum\ndef squareRoot(n):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    epsilon = 0.001\n    guess = n / 2\n    while abs(guess**2 - n) >= epsilon:\n        guess = (guess + n / guess) / 2\n    print(guess)\ndef palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    reversed = 0\n    while(n!=0):\n        reminder = n%10\n        reversed = reversed*10 + reminder\n        n = n//10\n    if(reversed == n):\n        print(True)\n    else:\n        print(False)\ndef palindrome2(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    reversed = 0\n    while(n!=0):\n        reminder = n%10\n        reversed = reversed*10 + reminder\n        n = n//10\n    if(reversed == n):\n        print(True)\n    else:\n        print(False)\ndef palindrome3(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    reversed = 0\n    while(n!=0):\n        reminder = n%10\n        reversed = reversed*10 + reminder\n        n = n//10\n    if(reversed == n):\n        print(True)\n    else:\n        print(False)\ndef palindrome4(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    reversed = 0\n    while(n!=0):\n        reminder = n%10\n        reversed = reversed*10 + reminder\n        n = n//10\n    if(reversed == n):\n        print(True)\n    else:\n        print(False)\ndef powerOfTwo(n):\n    '''\n    Write a python function to check whether a number is power of two or not.\n    '''\n    while(n!=0):\n        if(n%2==1):\n            print(False)\n            break\n        n = n // 2\n    else:\n        print(True)\ndef powerOfTwo2(n):\n    '''\n    Write a python function to check whether a number is power of two or not.\n    '''\n    while(n!=0):\n        if(n%2==1):\n            print(False)\n            break\n        n = n // 2\n    else:\n        print(True)\ndef powerOfTwo3(n):\n    '''\n    Write a python function to check whether a number is power of two or not.\n    '''\n    while(n!=0):\n        if(n%2==1):\n            print(False)\n            break\n        n = n // 2\n    else:\n        print(True)\ndef powerOfTwo4(n):\n    '''\n    Write a python function to check whether a number is power of two or not.\n    '''\n    while(n!=0):\n        if(n%2==1):\n            print(False)\n            break\n        n = n // 2\n    else:\n        print(True)\ndef isPrime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if(n==1):\n        print(False)\n    elif(n==2):\n        print(True)\n    elif(n%2==0):\n        print(False)\n    else:\n        for i in range(2,(n//2)+1):\n            if(n%i==0):\n                print(False)\n                break\n        else:\n            print(True)\ndef isPrime2(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if(n==1):\n        print(False)\n    elif(n==2):\n        print(True)\n    elif(n%2==0):\n        print(False)\n    else:\n        for i in range(2,int((n**0.5)+1)):\n            if(n%i==0):\n                print(False)\n                break\n        else:\n            print(True)\ndef isPrime3(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if(n==1):\n        print(False)\n    elif(n==2):\n        print(True)\n    elif(n%2==0):\n        print(False)\n    else:\n        for i in range(2,(n//2)+1):\n            if(n%i==0):\n                print(False)\n                break\n        else:\n            print(True)\ndef isPrime4(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if(n==1):\n        print(False)\n    elif(n==2):\n        print(True)\n    elif(n%2==0):\n        print(False)\n    else:\n        for i in range(2,int((n**0.5)+1)):\n            if(n%i==0):\n                print(False)\n                break\n        else:\n            print(True)\ndef isPrime5(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if(n==1):\n        print(False)\n    elif(n==2):\n        print(True)\n    elif(n%2==0):\n        print(False)\n    else:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if(n%i==0):\n                print(False)\n                break\n        else:\n            print(True)\ndef isPrime6(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if(n==1):\n        print(False)\n    elif(n==2):\n        print(True)\n    elif(n%2==0):\n        print(False)\n    else:\n        for i in range(2,(n**0.5)+1):\n            if(n%i==0):\n                print(False)\n                break\n        else:\n            print(True)\ndef isPrime7(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if(n==1):\n        print(False)\n    elif(n==2):\n        print(True)\n    elif(n%2==0):\n        print(False)\n    else:\n        for i in range(2,int(math.sqrt(n)+1)):\n            if(n%i==0):\n                print(False)\n                break\n    "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            sum += i\n    return sum\ndef nthRoot(n):\n    if n == 1:\n        return 1\n    if n < 1:\n        return -1\n    c = 1\n    while c < n:\n        c = c*3+1\n    return math.ceil(n**0.5)/2\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.search(\"z\", text)\n    if word:\n        print(word.group())\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.findall('z',text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r\"\\bz\\b\",text):\n        print(\"\\nThe word 'z' is in the text\")\n    else:\n        print(\"\\nThe word 'z' is not in the text\")\n    return\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    import re\n    z_regex = re.compile(r'z')\n    z_matches = z_regex.finditer(text)\n    return [group[0] for group in z_matches]\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def z_match(match):\n        return match.group() == \"z\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z.*z'\n    result = re.match(pattern, text)\n    return result\n    \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'z(?:[\\W_0-9])?', text)\n    return match.group()\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 31:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 4 == 0 and monthnum2 % 100!= 0:\n        print('31 days in the month')\n    elif monthnum2 % 4!= 0 and monthnum2 % 100 == 0:\n        print('31 days in the month')\n    elif monthnum2 % 4!= 0 and monthnum2 % 100!= 0:\n        print('30 days in the month')\n    else:\n        print('31 days in the month')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 <= 0 or monthnum2 > 12):\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4) == 0:\n            if (year % 100) == 0:\n                if (year % 400) == 0:\n                    return 29\n                else:\n                    return 28\n            else:\n                return 29\n        else:\n            return 28\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 31\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return True if monthnum2 in [1,3,5,7,8,10,12] else False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2!= 0:\n        return False\n    else:\n        if monthnum2 == 2:\n            if 31 <= daynum <= 29:\n                return True\n            else:\n                return False\n        elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            if 31 <= daynum <= 30:\n                return True\n            else:\n                return False\n        elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            if 31 <= daynum <= 31:\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_string_list = []\n    for word in stringlist:\n        reversed_string_list.append(word[::-1])\n    return reversed_string_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # your code here\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = list(stringlist)\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    str_list = []\n    for val in stringlist:\n        str_list.append(val[::-1])\n    return str_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    l = len(stringlist)\n    for i in range(l):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist.reverse()\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        print(stringlist[i])\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    return stringlist[::-1]\n    \nstring_list = ['a','b','c']\nprint(reverse_string_list(string_list))\n    \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    i = 0\n    while i < len(stringlist):\n        stringlist[i] = stringlist[i][::-1]\n        i += 1\n    return stringlist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    mini=len(lst[0])\n    min_idx=-1\n    for i in range(len(lst)):\n        if len(lst[i])<mini:\n            mini=len(lst[i])\n            min_idx=i\n    return lst[min_idx]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = 0\n    for i in range(1,len(lst)):\n        if(len(lst[i])<=len(lst[minimum])):\n            minimum=i\n    return minimum\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_len = len(lst)\n    minimum = lst_len\n    temp = lst_len\n    i = 0\n    while(temp > 0):\n        i = 0\n        while(i < minimum and i < temp):\n            if(lst[i] < lst[minimum]):\n                minimum = i\n            i = i+1\n        temp = temp - 1\n    return lst[minimum]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n            key = i\n    return lst[key]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    mini = lst[0]\n    for i in range(1,len(lst)):\n        if(len(lst[i]) < len(mini)):\n            mini = lst[i]\n    return mini\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_size = len(lst[0])\n    min_size = min(min_size, len(lst[1]), len(lst[2]))\n    min_size = min(min_size, len(lst[3]))\n    min_size = min(min_size, len(lst[4]))\n    \n    return min_size\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1=[]\n    lst2=[]\n    lst3=[]\n    min_length = len(min(lst, key=len)) \n    for i in range(0, len(lst)): \n        lst1.append(lst[i][:min_length])\n    for i in lst1: \n        if i not in lst2: \n            lst2.append(i)\n    lst2.sort()\n    for i in lst2: \n        lst3.append(i)\n    return lst3 \n    \nprint(Find_Min(test_list)"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sub_lst = None\n    for l in lst:\n        if(len(l)<min_length):\n            min_length = len(l)\n            min_sub_lst = l\n    return min_sub_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = []\n    min_count = 0\n    min_sublist = []\n    for i in lst:\n        if i not in min_lst:\n            min_lst.append(i)\n    for j in min_lst:\n        if len(j) == min_count:\n            min_sublist.append(j)\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    min_length = length\n    min_sublist = None\n    for i in range(length):\n        for j in range(length-i):\n            sublist = lst[i:i+j+1]\n            if len(sublist) < min_length and len(sublist) > 0:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(area)\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l*b\n    print(a)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = r\"[A-Z]\"\n    match = re.finditer(regex, str1)\n    list1 = list(match)\n    for item in list1:\n        str1 = re.sub(r\"[A-Z]\", \"\", str1)\n    return str1\n    \ndef find_anagrams(str1,str2):\n    '''\n    Write a function to find all the anagrams of a given string from another string.\n    '''\n    dict = {}\n    dict2 = {}\n    for item in str1:\n        if item not in dict:\n            dict[item] = 1\n        else:\n            dict[item] += 1\n    for item in str2:\n        if item not in dict2:\n            dict2[item] = 1\n        else:\n            dict2[item] += 1\n    common = \"\"\n    for item in str1:\n        if item in dict2:\n            if item not in common:\n                common += item\n    return common\n    \ndef find_anagrams(str1,str2):\n    '''\n    Write a function to find all the anagrams of a given string from another string.\n    '''\n    dict = {}\n    dict2 = {}\n    for item in str1:\n        if item not in dict:\n            dict[item] = 1\n        else:\n            dict[item] += 1\n    for item in str2:\n        if item not in dict2:\n            dict2[item] = 1\n        else:\n            dict2[item] += 1\n    common = \"\"\n    for item in dict:\n        if item in dict2:\n            if item not in common:\n                common += item\n    return common\n    \ndef find_anagrams(str1,str2):\n    '''\n    Write a function to find all the anagrams of a given string from another string.\n    '''\n    dict = {}\n    dict2 = {}\n    for item in str1:\n        if item not in dict:\n            dict[item] = 1\n        else:\n            dict[item] += 1\n    for item in str2:\n        if item not in dict2:\n            dict2[item] = 1\n        else:\n            dict2[item] += 1\n    common = \"\"\n    for item in dict:\n        if item in dict2:\n            if item not in common:\n                common += item\n    return common\n    \ndef find_anagrams(str1,str2):\n    '''\n    Write a function to find all the anagrams of a given string from another string.\n    '''\n    common = \"\"\n    if len(str1) == len(str2):\n        for i in range(len(str1)):\n            if str1[i] in str2:\n                common += str1[i]\n            else:\n                common += str2[i]\n    else:\n        return \"\"\n    return common\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    str1 = str1.swapcase()\n    return str1\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a function that swap case works on a given string.\n    '''\n    return str1.swapcase()\n    \ndef swap_case(str1):\n    '''\n    Write a functio"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = ''\n    for c in str1:\n        if c.islower():\n            res += c\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    if len(str1) == 1:\n        return str1.lower()\n    if len(str1) == 2:\n        return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    new_str = str1.lower()\n    return new_str.replace(new_str.upper(),\"\")\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    sub_str = \"\"\n    for i in range(len(str1)):\n        if not str1[i].isupper():\n            sub_str += str1[i]\n    return sub_str\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = r'[A-Z]*'\n    return re.sub(regex, '', str1)\n    \ndef remove_spaces(str1):\n    '''\n    Write a function that takes a string and removes all spaces.\n    '''\n    return str1.replace(' ', '')\n    \ndef remove_spaces(str1):\n    '''\n    Write a function that takes a string and returns a string where all whitespace is removed.\n    '''\n    return str1.strip()\n    \ndef count_spaces(str1):\n    '''\n    Write a function that takes a string and returns the number of spaces inside the string.\n    '''\n    return str1.count(' ')\n    \ndef get_length_of_longest_word(words):\n    '''\n    Write a function that takes a list of words and returns the length of the longest word.\n    '''\n    #base case\n    if len(words) == 0:\n        return 0\n    if len(words) == 1:\n        return len(words[0])\n    if len(words) == 2:\n        return len(words[0]) + len(words[1])\n    \n    #recursive case\n    if len(words[0]) > len(words[1]):\n        return len(words[0])\n    if len(words[0]) < len(words[1]):\n        return len(words[1])\n    return len(words[0]) + get_length_of_longest_word(words[1:])\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to see if a string is a palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    return False\n    \ndef is_palindrome_regex(str1):\n    '''\n    Write a regex to see if a string is a palindrome or not.\n    '''\n    regex = r'^[a-zA-Z0-9]*[a-zA-Z0-9]*$'\n    return bool(re.match(regex, str1))\n    \ndef is_palindrome_regex(str1):\n    '''\n    Write a regex to see if a string is a palindrome or not.\n    '''\n    #if the string length is less than 2\n    if len(str1) < 2:\n        return True\n    #if the last 2 characters are not the same\n    if str1[0]!= str1[-1]:\n        return False\n    \n    #keep looping while index < length-2\n    while True:\n        #if the first character is not equal to the last one\n        if str1[0]!= str1[-1]:\n            return False\n        #the first character and last character are equal\n        else:\n            str1 = str1[1:-1]\n    return True\n    \ndef remove_characters(str1, characters):\n    '''\n    Write a function that takes a string and an array of characters and returns a string with the characters from the array removed.\n    '''\n    for character in characters:\n        str1 = str1.replace(character, '')\n    return str1\n    \ndef remove_characters_regex(str1, characters):\n    '''\n    Write a regex to remove characters from a given string.\n    '''\n    #if the string is empty\n    if str1 == '':\n        return ''\n    #if the first character is not in the array\n    if str1[0] not in characters:\n        return remove_characters_regex(str1[1:], characters) + str1[0]\n    \n    #if the first character in the array is in the string\n    for character in characters:\n        str1 = str1.replace(character, '')\n    return str1\n    \ndef remove_characters_regex(str1, characters):\n    '''\n    Write a regex to remove characters from a given string.\n    '''\n    #if the string is empty\n    if str1 == '':\n        return ''\n    #if the first character is not in the array\n    if str1[0] not in characters:\n        return remove_characters_regex(str1[1:], characters) + str1[0]\n    \n    #if the first character in the array is in the string\n    for character in characters:\n        while character in str1:\n            str1 = str1.replace(character, '')\n    return str1\n    \ndef remove_characters_regex(str1, characters):\n    '''\n    Write a regex to remove characters from a given string.\n    '''\n    #if the string is empty\n    if str1 == '':\n        return ''\n    #if the first character is not in the array\n    if str1[0] not in characters:\n        return remove_characters_regex(str1[1:], characters) + str1[0]\n    \n    #if the first character in the array is in the string\n    for character in characters:\n        while character in str1:\n            str1 = str1.replace(character, '')\n    return str1\n    \ndef remove_doubles(str1):\n    '''\n    Write a function that takes a string and returns a string with all the same characters that are not in a given set.\n    '''\n    #if the string is empty\n    if str1 == '':\n        return ''\n    #if the set is empty\n    if len(set(str1)) == 0:\n        return ''\n    \n    #create a set of the set\n    set1 = set(str1)\n    #create an empty string\n    str2 = ''\n    #loop through the string\n    for character in str1:\n        #if the character is in the set\n        if character in set1:\n            #add it to the string\n            str2 = str2 + character\n    return str2\n    \ndef remove_doubles_regex(str1):\n    '''\n    Write a regex to remove doubles from a given string.\n    '''\n    #if the string is empty\n    if str1 == '':\n        return ''\n    \n    #create a set of the set\n    set1 = set(str1)\n    #create an empty string\n    str2 = ''\n    #loop through the string\n    for character in str1:\n        #if the character is in the set\n        if character in set1:\n            #add it to the string\n            str2 = str2 + character\n    return str2\n    \ndef remove_letters_from_end(str1, length):\n    '''\n    Write a function that takes a string and a length and returns a string where all the characters from the end of the string are removed.\n    '''\n    #if the string is empty\n    if len(str1) == 0:\n        return ''\n    #if the length is 0\n    if length == 0:\n        return str1\n    \n    #keep looping while length > 0\n    while length > 0:\n        #remove the character from the end of the string\n        str1 = str1[:-1]\n        #decrease length by 1\n        length -= 1\n    return str1\n    \ndef remove_letters_from_end_regex(str1, length):\n    '''\n    Write a regex to remove letters from the end of a string.\n    '''\n    #if the string is empty\n    if len(str1) == 0:\n        return ''\n    #if the length is 0\n    if length == 0:\n        return str1\n    \n    #keep looping while length > 0\n    while length > 0:\n        #remove the character from the end of the string\n        str1 = re.sub(r'\\w{1}', '', str1)\n        #decrease length by 1\n        length -= 1\n    return str1\n    \ndef remove_letters_from_end_regex(str1, length):\n    '''\n    Write a regex to remove letters from the end of a string.\n    '''\n    #if the string is empty\n    if len(str1) == 0:\n        return ''\n    #if the length is 0\n    if length == 0:\n        return str1\n    \n    #keep looping while length > 0\n    while length > 0:\n        #remove the character from the end of the string\n        str1 = re.sub(r'\\w"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]')\n    output = pattern.sub('', str1)\n    return output\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if type(lst[i])==list:\n            lst[i]=Extract(lst[i])\n    if len(lst)==1:\n        return lst[0]\n    else:\n        return lst\n    \n    "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if type(i) == list:\n            result.append(Extract(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # code here\n    return (lst[0] if isinstance(lst,list) else None)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [j for i in lst for j in i]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elem = []\n    for i in range(len(lst)):\n        first_elem.append(lst[i][0])\n    return first_elem\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # lst = [[10,20], [30, 40], [50,60]]\n    # Expected output: (10, 20) (30, 40) (50, 60)\n    return map(lambda x: x[0], lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print(i[0])\n        \n    return\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x : x[0], lst))\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0:\n        return []\n    return list(map(lambda x: x[0],lst))\n    \ndef Extract_Rec(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return list(lst[0])\n    else:\n        lst[0] = lst[0][0]\n        return lst\n    \ndef Extract_Rec2(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        lst = lst[0]\n        return lst\n    \ndef Extract_Rec3(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return list(lst[0])\n    else:\n        return lst[0]\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    res = 0\n    for i in str:\n        if i.isupper():\n            res += 1\n    return res\n        \nprint(upper_ctr(\"abCdEf\"))"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    d = {}\n    for i in str:\n        if i.isupper():\n            d[i] = d.get(i,0) + 1\n    print(d)\n    \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count +=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    no_upper = 0\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n            no_upper = no_upper + 1\n    return no_upper,count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count +=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('A')\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        return [[i] + j for i in list1 for j in combinations_list(list1 - {i})]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return [[list1[0]]]\n    result = []\n    for idx in range(len(list1)):\n        tmp = combinations_list(list1[:idx] + list1[idx + 1:])\n        for j in tmp:\n            result.append([list1[idx]] + j)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combinations_recursive(list1, new_list, combination, length):\n        if length == len(new_list):\n            combinations.append(new_list)\n        else:\n            for i in range(0, len(list1)):\n                if list1[i] in new_list:\n                    continue\n                new_list.append(list1[i])\n                combinations_recursive(list1, new_list, combination, length + 1)\n                new_list.pop()\n    combinations = []\n    combinations_recursive(list1, [], [], 0)\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [(list1[0],)]\n    if len(list1) == 2:\n        return [(list1[0], list1[1]), (list1[0], list1[1])]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if len(list1) > 0:\n            list2.append([list1[i]])\n            list3 = list1[i + 1:]\n            for j in combinations_list(list3):\n                list2.append(list1[i:i + 1] + j)\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combo = []\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            temp = list1[i:j+1]\n            if temp not in combo:\n                combo.append(temp)\n    return combo\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # Base condition\n    if len(list1) <= 1:\n        return [list1]\n    \n    # Recursive call\n    combinations = []\n    \n    # Get all combinations of elements of the list \n    # left and right \n    left = list1[:-1]\n    right = list1[-1:]\n    \n    # Iterate over all elements of the list\n    # left\n    for i in left:\n        combinations.append([i])\n        combinations += combinations_list(left)\n        \n    # Iterate over all elements of the list\n    # right\n    for i in right:\n        combinations.append([i])\n        combinations += combinations_list(right)\n        \n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n    if len(list1) == 1:\n        combinations_list.append(list1)\n    else:\n        for i in range(len(list1)):\n            for j in range(i + 1, len(list1)):\n                combinations_list.append([list1[i], list1[j]])\n        if len(combinations_list) == 0:\n            combinations_list.append([list1[i]])\n    return combinations_list\n    \ndef permutation_list(list1):\n    '''\n    Write a function to find all possible permutations of a given list.\n    '''\n    permutation_list = []\n    if len(list1) == 1:\n        permutation_list.append(list1)\n    else:\n        for i in range(len(list1)):\n            for j in range(i, len(list1)):\n                if list1[j] not in list1[:i]:\n                    temp = list1[:i] + [list1[j]] + list1[i:]\n                    permutation_list.append(temp)\n    return permutation_list\n    \ndef combination_with_repetition_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list\n    such that the elements of the combination are unique.\n    '''\n    combination_with_repetition_list = []\n    if len(list1) == 1:\n        combination_with_repetition_list.append(list1)\n    else:\n        for i in range(len(list1)):\n            for j in range(i, len(list1)):\n                if list1[j] not in list1[:i]:\n                    temp = list1[:i] + [list1[j]] + list1[i:]\n                    if len(temp) == len(set(temp)):\n                        combination_with_repetition_list.append(temp)\n    return combination_with_repetition_list\n    \ndef subsets_with_duplicates_list(list1):\n    '''\n    Write a function to find all subsets (without duplicates) of a given list.\n    '''\n    subsets_with_duplicates_list = []\n    if len(list1) == 0:\n        subsets_with_duplicates_list.append([])\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list1)):\n                if i!= j:\n                    temp = list1[:i] + [list1[j]] + list1[i:]\n                    if len(temp) == len(set(temp)):\n                        subsets_with_duplicates_list.append(temp)\n    return subsets_with_duplicates_list\n    \ndef palindrome_permutation_list(list1):\n    '''\n    Write a function to check if a given string is a permutation of a palindrome.\n    '''\n    palindrome_permutation_list = []\n    if len(list1) == 1:\n        if list1 == list1[::-1]:\n            palindrome_permutation_list.append(True)\n        else:\n            palindrome_permutation_list.append(False)\n    else:\n        for i in range(len(list1)):\n            for j in range(i, len(list1)):\n                if list1[i:j+1] == list1[i:j+1][::-1]:\n                    palindrome_permutation_list.append(True)\n                    break\n                else:\n                    palindrome_permutation_list.append(False)\n    return palindrome_permutation_list\n    \ndef count_binary_substrings_v1(string):\n    '''\n    Write a function that returns the number of binary substrings of a given string.\n    '''\n    count_binary_substrings_v1 = 0\n    if len(string) == 0:\n        count_binary_substrings_v1 = 0\n    elif len(string) == 1:\n        count_binary_substrings_v1 = 1\n    else:\n        for i in range(len(string)):\n            for j in range(len(string)):\n                if i + j < len(string) and string[i] == '1' and string[j] == '1':\n                    count_binary_substrings_v1 += 1\n    return count_binary_substrings_v1\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # print([x for x in combinations(list1,2)])\n    # print([x for x in combinations(list1,3)])\n    # print([x for x in combinations(list1,4)])\n    # print([x for x in combinations(list1,5)])\n    # print([x for x in combinations(list1,6)])\n    # print([x for x in combinations(list1,7)])\n    return [x for x in combinations(list1,7)]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    if n == 0:\n        return []\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return []\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(current_product, max_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    ans = -1\n    for i in range(n):\n        for j in range(i, n):\n            tmp = arr[i:j+1]\n            tmp.sort(reverse=True)\n            if tmp[0] == 0:\n                continue\n            curr = tmp[0]\n            tmp.remove(curr)\n            prod = curr * tmp[0]\n            if ans < prod:\n                ans = prod\n    return ans\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    subarray_start = 0\n    subarray_end = 0\n    subarray_start_index = 0\n    subarray_end_index = 0\n    for i in range(0, len(arr)):\n        if max_product < arr[i]:\n            max_product = arr[i]\n        else:\n            continue\n        if max_product * arr[i] > max_product:\n            subarray_start = subarray_start_index\n            subarray_end = i\n            max_product = arr[i]\n    return subarray_start, subarray_end, max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Best case of subarray size 0\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -999999999999999999999999999999999999999999\n    current_product = 1\n    start = 0\n    end = 0\n    for index in range(len(arr)):\n        current_product = arr[index] * current_product\n        if current_product > max_product:\n            max_product = current_product\n            start = index\n            end = index\n        elif current_product < 0:\n            current_product = 1\n    return max_product, start, end\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    curr_product = arr[0]\n    for i in range(1, len(arr)):\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_max = -99999999999999\n    max_product = 0\n    for i in range(len(arr)):\n        # calculate the product of the current element\n        curr_prod = curr_max * arr[i]\n        # update curr_max\n        curr_max = max(curr_max, arr[i])\n        # update max_product\n        max_product = max(max_product, curr_prod)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return None\n    curr_max = arr[0]\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max * arr[i])\n        if curr_max > max_prod:\n            max_prod = curr_max\n    return max_prod\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict)==1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    if len(dict) == 1:\n        return True\n    if len(dict) > 1 and n not in dict:\n        return False\n    if len(dict) > 1 and n in dict:\n        return check_value(dict[n], n)\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    flag = 0\n    for i in dict:\n        if dict[i]!= n:\n            flag = 1\n    if flag == 1:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not n:\n        return None\n    if len(n) == 1:\n        return True\n    return all(n[i] == n[0] for i in range(1, len(n)))\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    print(n)\n    for i in dict.values():\n        if i == n:\n            print(True)\n            return True\n        else:\n            print(False)\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict.values() == n\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    assert isinstance(dict, dict), 'Dict required'\n    assert isinstance(n, int), 'Integer required'\n    assert n>=1, 'Invalid value'\n    for i in dict.values():\n        assert isinstance(i, int), 'Value required'\n    count = 0\n    for i in dict.values():\n        if i == n:\n            count += 1\n    return count == len(dict)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) > 1:\n        for i in dict:\n            if dict[i]!= dict[n]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {k:v for (k,v) in dict1.items() if v}\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    \n    \n    # Task\n    # You need to write a function to drop empty items from a given dictionary\n    #\n    # Input\n    # dictionary\n    #\n    # Output\n    # dictionary\n    #\n    # Example\n    # Input : {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    # Output : {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    #\n    # Input : {'a': 1, 'b': 2, 'c': 3}\n    # Output : {'a': 1, 'b': 2, 'c': 3}\n    \n    # Solution\n    \n    # In[ ]:\n    \n    \n    # Solution \n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n    # DROP EMPTY\n    \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = []\n    for val in dict1:\n        if dict1[val]:\n            result.append(val)\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1:\n        if not dict1[i]:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, val in dict1.items():\n        if val == {}:\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    keys = set()\n    for item in dict1.values():\n        keys.add(item)\n    return dict((k,v) for k,v in dict1.items() if v in keys)\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_dict = {}\n    empty_keys = []\n    for key, val in dict1.items():\n        if not val:\n            empty_dict[key] = val\n    for key, val in empty_dict.items():\n        empty_keys.append(key)\n    for key in empty_keys:\n        del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    return dict((k,v) for k,v in dict1.items() if v)\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    elif len(arr) == 1:\n        return arr[0]\n    \n    else:\n        curr_max = arr[0]\n        curr_min = arr[0]\n        \n        for i in range(1, len(arr)):\n            curr_max = max(curr_max, curr_min * arr[i], arr[i])\n            curr_min = min(curr_min, curr_max * arr[i], arr[i])\n        \n        return curr_max"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    curr = arr[0]\n    max_prod = curr\n    for i in range(1, n):\n        curr = max(arr[i], curr*arr[i])\n        if curr > max_prod:\n            max_prod = curr\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_p = -1\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)-1):\n            for k in range(j+1, len(arr)):\n                max_p = max(max_p, arr[i]*arr[j]*arr[k])\n    return max_p\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    if n==1:\n        return arr[0]\n    start = 1\n    end = n-2\n    m = 1\n    while start<=end:\n        print(start, end)\n        if arr[start-1]<arr[end+1]:\n            m = max(m, (arr[start-1]*arr[start])*(arr[start+1]*arr[end+1]))\n        else:\n            m = max(m, (arr[start]*arr[end+1])*(arr[start-1]*arr[end]))\n        start+=1\n        end-=1\n    return m\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # range(start,end,step)\n    n = len(arr)\n    # print(n)\n    if n < 2:\n        return -1\n    # to keep track of the current maximum\n    max_product = -1\n    # to store the maximum product so far\n    max_current_product = 1\n    # current maximum is equal to the current maximum\n    current_max = -1\n    # to store the maximum product so far\n    max_product_so_far = -1\n    # current maximum is equal to the current maximum\n    current_max_so_far = -1\n    # iterate over the array\n    for i in range(0,n):\n        # if the current number is equal to the current maximum\n        if arr[i] == current_max:\n            # then multiply the current maximum product with the current product\n            current_max_so_far *= max_current_product\n            # the current maximum product so far is equal to the current product\n            current_max_product = max_current_product\n        else:\n            # if the current number is not equal to the current maximum\n            current_max = arr[i]\n            # then multiply the current maximum product with the current product\n            current_max_product = max_product_so_far\n            # then update the maximum product so far\n            max_product_so_far = max_current_product\n            # reset the current maximum product so far\n            max_current_product = 1\n        # update the maximum product so far\n        max_product_so_far = max(max_product_so_far,current_max_so_far)\n        # update the maximum product\n        max_product = max(max_product,max_product_so_far)\n    # return the maximum product\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    global result\n    if len(arr) == 1:\n        result = max(result, arr[0])\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] >= arr[i+1]:\n                result = max(result, arr[i]*arr[i+1])\n            else:\n                result = max(result, arr[i]*arr[i+1]*arr[i+2])\n                \n    return result\n    \narr = [0, -2, 0, -2]\nresult = 0\nprint(\"Max product:\", max_product(arr))"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        min_so_far = min(min_ending_here, min_so_far)\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    max = -9999\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max = max if max>arr[i]*arr[j] else arr[i]*arr[j]\n    return max\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Similar idea as max_subarray. We can get max product from the left and right sides of the array.\n    # Now we will get the maximum product from the left and right of the array.\n    # We can find max product from left side and then from right side.\n    # i and j are the current indexes, and m and n are the left and right indexes.\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #initializing starting and ending index\n    start = 0\n    end = 1\n    \n    #initializing the maximum product found so far\n    max_product = arr[start] * arr[end]\n    \n    #traversing the array to find the maximum product\n    for i in range(start + 1, len(arr)):\n        if arr[i] > arr[end]:\n            max_product = max(arr[start] * arr[end], max_product)\n            start += 1\n        else:\n            end += 1\n    return max_product\n    \n    \ndef max_product_memoization(arr, dp):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #initializing the starting and ending index\n    start = 0\n    end = 1\n    \n    #initializing the maximum product found so far\n    max_product = arr[start] * arr[end]\n    \n    #traversing the array to find the maximum product\n    for i in range(start + 1, len(arr)):\n        if arr[i] > arr[end]:\n            #finding the maximum product obtained so far\n            max_product = max(arr[start] * arr[end], max_product)\n            #updating the starting and ending indices to include the new element in the subsequence\n            start = i\n            end += 1\n        else:\n            end += 1\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return False\n    else:\n        return tuple(map(lambda x: x + x, test_tup))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a,b = test_tup\n    return (a,b,a+b)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    import math\n    add_tup = test_tup\n    for i in range(len(test_tup) - 1):\n        add_tup = (add_tup[0] + add_tup[1],add_tup[1])\n    return add_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)==0:\n        return None\n    if len(test_tup)==1:\n        return (test_tup[0], test_tup[0])\n    if len(test_tup)==2:\n        return (test_tup[0]+test_tup[1],test_tup[1]+test_tup[0])\n    if len(test_tup)==3:\n        return (test_tup[0]+test_tup[1],test_tup[1]+test_tup[2],test_tup[2]+test_tup[0])\n    if len(test_tup)==4:\n        return (test_tup[0]+test_tup[1],test_tup[1]+test_tup[2],test_tup[2]+test_tup[3],test_tup[3]+test_tup[0])\n    if len(test_tup)==5:\n        return (test_tup[0]+test_tup[1],test_tup[1]+test_tup[2],test_tup[2]+test_tup[3],test_tup[3]+test_tup[4],test_tup[4]+test_tup[0])\n    if len(test_tup)==6:\n        return (test_tup[0]+test_tup[1],test_tup[1]+test_tup[2],test_tup[2]+test_tup[3],test_tup[3]+test_tup[4],test_tup[4]+test_tup[5],test_tup[5]+test_tup[0])\n    if len(test_tup)==7:\n        return (test_tup[0]+test_tup[1],test_tup[1]+test_tup[2],test_tup[2]+test_tup[3],test_tup[3]+test_tup[4],test_tup[4]+test_tup[5],test_tup[5]+test_tup[6],test_tup[6]+test_tup[0])\n    if len(test_tup)==8:\n        return (test_tup[0]+test_tup[1],test_tup[1]+test_tup[2],test_tup[2]+test_tup[3],test_tup[3]+test_tup[4],test_tup[4]+test_tup[5],test_tup[5]+test_tup[6],test_tup[6]+test_tup[7],test_tup[7]+test_tup[0])\n    if len(test_tup)==9:\n        return (test_tup[0]+test_tup[1],test_tup[1]+test_tup[2],test_tup[2]+test_tup[3],test_tup[3]+test_tup[4],test_tup[4]+test_tup[5],test_tup[5]+test_tup[6],test_tup[6]+test_tup[7],test_tup[7]+test_tup[8],test_tup[8]+test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup[0]\n    # using zip() and list() to zip the elements of the list with the elements of the second list.\n    print(tup, end = \" \")\n    list_1 = list(tup)\n    #print(list_1)\n    list_1_len = len(list_1)\n    for i in range(list_1_len):\n        for j in range(i + 1, list_1_len):\n            list_1[i] = list_1[i] + list_1[j]\n    print(list_1)\n    # using zip() and list() to zip the elements of the list with the elements of the second list.\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # print(test_tup)\n    # print(type(test_tup))\n    # print(test_tup[1:3])\n    \n    try:\n        # print(test_tup[1:3])\n        # print(type(test_tup[1:3]))\n        \n        return test_tup[1:3] + test_tup[0:1]\n    except TypeError:\n        return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = list(test_tup)\n    new_tup = []\n    for i in range(len(tup)):\n        if i % 2 == 0:\n            new_tup.append(tup[i]+tup[i+1])\n    return tuple(new_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if i!=j:\n                test_tup[i] += test_tup[j]\n    return test_tup\n    \n    \ntest_list = []\nfor i in range(1,6):\n    test_list.append(i)\nprint(test_list)\ntest_list1 = add_pairwise(test_list)\nprint(test_list1)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    from collections import deque\n    test_tup_2 = deque(test_tup)\n    test_tup_2.rotate(-1)\n    d = 0\n    for i in range(len(test_tup)):\n        test_tup_2.rotate(d)\n        d = d+1\n    tup_2 = tuple(test_tup_2)\n    return(tup_2)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize result. \n    result = 1\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    for x in arr:\n        product = product * x\n    product = product % n\n    \n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return (np.prod([arr[i] for i in range(n)])%n)\n    \n    \n    \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    s = 1\n    for i in arr:\n        s *= i\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for i in arr:\n        ans *= i \n    return ans % n \n    \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = product*arr[i]%n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for num in arr:\n        total = total * num % n\n    return total\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    print(arr)\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n    print(product)\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0:\n        raise ValueError(\"N must be non-zero\")\n    if arr == None or len(arr) == 0:\n        raise ValueError(\"Array must not be empty\")\n    if n < 1:\n        raise ValueError(\"N must be a positive integer\")\n    if not isinstance(arr, (list, tuple, np.ndarray)):\n        raise TypeError(\"The array must be of type list\")\n    if not isinstance(n, (int, np.integer)):\n        raise TypeError(\"The N must be of type int\")\n    arr = np.array(arr)\n    product = 1\n    for i in arr:\n        product = product * i\n    return product % n\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    result = False\n    for i in range(len(l)):\n        if i+1 < len(l):\n            if l[i] + 1 == l[i+1]:\n                result = True\n    return result\n    \n    \ndef check_Consecutive_Sum(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers and their sum is not zero.\n    '''\n    result = False\n    for i in range(len(l)):\n        if i+1 < len(l):\n            if l[i] + 1 == l[i+1]:\n                if l[i]!= 0:\n                    result = True\n    return result\n    \n    \ndef get_Consecutive_sum(l):\n    '''\n    Write a python function to get the consecutive numbers and their sum.\n    '''\n    result = []\n    for i in range(len(l)):\n        if i+1 < len(l):\n            if l[i] + 1 == l[i+1]:\n                result.append(l[i] + l[i+1])\n    return result\n    \n    \ndef check_Consecutive_sum_and_Unique(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers and their sum is not zero and also the given list contains only unique numbers.\n    '''\n    result = False\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result = True\n    return result\n    \n    \ndef get_Consecutive_sum_and_Unique(l):\n    '''\n    Write a python function to get the consecutive numbers and their sum.\n    '''\n    result = []\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result.append(sum(con_sum_l))\n        for i in range(len(con_sum_l)):\n            result.append(con_sum_l[i])\n    return result\n    \n    \ndef check_Consecutive_sum_and_Unique_2(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers and their sum is not zero and also the given list contains only unique numbers.\n    '''\n    result = False\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result = True\n    return result\n    \n    \ndef get_Consecutive_sum_and_Unique_2(l):\n    '''\n    Write a python function to get the consecutive numbers and their sum.\n    '''\n    result = []\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result.append(sum(con_sum_l))\n        for i in range(len(con_sum_l)):\n            result.append(con_sum_l[i])\n    return result\n    \n    \ndef check_Consecutive_sum_and_Unique_3(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers and their sum is not zero and also the given list contains only unique numbers.\n    '''\n    result = False\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result = True\n    return result\n    \n    \ndef get_Consecutive_sum_and_Unique_3(l):\n    '''\n    Write a python function to get the consecutive numbers and their sum.\n    '''\n    result = []\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result.append(sum(con_sum_l))\n        for i in range(len(con_sum_l)):\n            result.append(con_sum_l[i])\n    return result\n    \n    \ndef check_Consecutive_sum_and_Unique_4(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers and their sum is not zero and also the given list contains only unique numbers.\n    '''\n    result = False\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result = True\n    return result\n    \n    \ndef get_Consecutive_sum_and_Unique_4(l):\n    '''\n    Write a python function to get the consecutive numbers and their sum.\n    '''\n    result = []\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result.append(sum(con_sum_l))\n        for i in range(len(con_sum_l)):\n            result.append(con_sum_l[i])\n    return result\n    \n    \ndef check_Consecutive_sum_and_Unique_5(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers and their sum is not zero and also the given list contains only unique numbers.\n    '''\n    result = False\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result = True\n    return result\n    \n    \ndef get_Consecutive_sum_and_Unique_5(l):\n    '''\n    Write a python function to get the consecutive numbers and their sum.\n    '''\n    result = []\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result.append(sum(con_sum_l))\n        for i in range(len(con_sum_l)):\n            result.append(con_sum_l[i])\n    return result\n    \n    \ndef check_Consecutive_sum_and_Unique_6(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers and their sum is not zero and also the given list contains only unique numbers.\n    '''\n    result = False\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result = True\n    return result\n    \n    \ndef get_Consecutive_sum_and_Unique_6(l):\n    '''\n    Write a python function to get the consecutive numbers and their sum.\n    '''\n    result = []\n    con_sum_l = get_Consecutive_sum(l)\n    if len(con_sum_l) == len(set(con_sum_l)) and sum(con_sum_l)!= 0:\n        result.append(sum(con_sum_l))\n        for i in range(len(con_sum_l)):\n            result.append(con_sum_l[i])\n    return result\n    \n    \ndef check_Consecutive_sum_and_Unique_7(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers and their sum is not zero and also the given list contains only unique numbers.\n    '''\n    result = False\n    con_sum_l = get_Consecutive_sum(l)\n    i"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    num=[]\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]==l[j]:\n                return False\n            else:\n                num.append(l[i])\n    return num\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #initializing a variable to store the maximum element of the list.\n    maxi=0\n    #initializing a variable to store the minimum element of the list.\n    mini=0\n    #initializing a variable to store the list.\n    list1=[]\n    #initializing a variable to store the flag.\n    flag=0\n    #initializing a variable to store the first element of the list.\n    first=0\n    #iterating through the given list to find the maximum and minimum element.\n    for i in l:\n        #if the maximum element is greater than the minimum element then the list is not consecutive.\n        if(i>maxi or i<mini):\n            flag=0\n        #if the maximum element is equal to the minimum element then the list is consecutive.\n        elif(i==mini or i==maxi):\n            flag=1\n        #if the maximum element is smaller than the minimum element then the list is not consecutive.\n        if(i<maxi):\n            if(flag==0):\n                mini=i\n            else:\n                flag=0\n                list1.append(mini)\n                mini=i\n        #if the maximum element is greater than the minimum element then the list is not consecutive.\n        if(i>mini):\n            if(flag==0):\n                maxi=i\n            else:\n                flag=0\n                list1.append(maxi)\n                maxi=i\n    #returning the list of consecutive numbers.\n    return list1\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n=0\n    for i in range(len(l)-1):\n        if(l[i+1]-l[i]==1):\n            n+=1\n            \n    if(n==len(l)-1):\n        return True\n    else:\n        return False\n    \nif __name__ == \"__main__\":\n    l = list(map(int, input().split()))\n    if(check_Consecutive(l)):\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n<=1:\n        return False\n    for i in range(1,n):\n        if l[i]-l[i-1]!= 1:\n            return False\n    return True\ndef check_Consecutive_3(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n<=1:\n        return False\n    for i in range(1,n):\n        if l[i]-l[i-1]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            print(\"consecutive\")\n        else:\n            print(\"not consecutive\")\n            return\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] == l[j]:\n                print(l[i], \"is consecutive\")\n                print(\"\\n\")\n                break\n            else:\n                print(l[i], \"is not consecutive\\n\")\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            return False\n    return True\n    \ndef check_Palindrome(l): \n    '''\n    Write a python function to check whether the given list is a Palindrome or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i]!= l[len(l) - 1]:\n            return False\n    return True\n    \ndef check_Pairs(l): \n    '''\n    Write a python function to check whether the given list contains a pair of numbers or not.\n    '''\n    s = set()\n    for i in range(len(l)):\n        if l[i] in s:\n            return False\n        s.add(l[i])\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for elem in test_list1:\n        if elem in test_list2:\n            new_list.append(elem)\n    return new_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # your code here\n    return []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0 or len(test_list2) == 0:\n        return tuple()\n    else:\n        temp_list = []\n        for i in range(len(test_list1)):\n            if test_list1[i] in test_list2:\n                temp_list.append(test_list1[i])\n        return tuple(temp_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    return test_list1.intersection(test_list2)\n    \nprint('Input the first list')\ntest_list1 = eval(input())\nprint('Input the second list')\ntest_list2 = eval(input())\nprint('The Intersection of the given tuple list is:',tuple_intersection(test_list1, test_list2))"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your code here\n    test_list = list(test_list1)\n    for i in range(0, len(test_list2)):\n        test_list.append(test_list2[i])\n    return tuple(test_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_set = set(test_list1 + test_list2)\n    return tuple_set\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Iterate through each tuple in the tuple list and check if there is any element in the other list\n    # If there is an element in the other list then remove the element from the other list\n    # Finally check the remaining elements in the other list\n    # Finally return the intersection of the given lists\n    for i in test_list1:\n        if i in test_list2:\n            test_list2.remove(i)\n    return test_list2\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Approach 1 (using sets)\n    # TC: O(n)\n    # SC: O(n)\n    # set1 = set(test_list1)\n    # set2 = set(test_list2)\n    # return set1.intersection(set2)\n    \n    # Approach 2 (using map and tuples)\n    # TC: O(n)\n    # SC: O(1)\n    return tuple(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        if i in test_list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    str1 = \"\".join(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    index = 0\n    for i in range(0,len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str1=str1[:i]+newch+str1[i+1:]\n    return str1\nprint(replace_char(\"Hello World\",'o','O'))\n'''\n2) Write a function to find the first occurrence of a target string in a given string. \n    If there are no occurrences, return -1.\n    Eg: \n    1) Input = \"hello\", target = \"world\", return 0\n    2) Input = \"hello world\", target = \"hello\", return 0\n    3) Input = \"hello\", target = \"world\", return -1\n    4) Input = \"hello world\", target = \"hello\", return 0\n    5) Input = \"hello world\", target = \"hello world\", return -1\n'''"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    list1=[]\n    for i in str1:\n        if i==ch:\n            list1.append(newch)\n        else:\n            list1.append(i)\n    print(''.join(list1))\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # list1 = list(dict1.items())\n    # list1.sort(key=lambda x: x[1])\n    # return list1\n    return sorted(sorted(dict1.items(), key=lambda kv: kv[1]), key=lambda kv: kv[0])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x:x[1])\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    d1 = dict1.items()\n    d1 = sorted(d1,key=lambda x: x[1],reverse=True)\n    return dict(d1)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    res = [(k,v) for k,v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)]\n    return res\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    items = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return items\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=lambda k: dict1[k], reverse=True)\ndef subtract_counter(dict1, dict2):\n    '''\n    Write a function to subtract one dictionary from another.\n    The resulting dictionary should be in the form:\n    {key: value,...}\n    '''\n    dict_sub = {}\n    for i in dict1.keys():\n        if i in dict2:\n            dict_sub[i] = dict1[i]-dict2[i]\n        else:\n            dict_sub[i] = dict1[i]\n    return dict_sub\ndef first_n_occurrences(string, substring, n):\n    '''\n    Write a function that returns a list of the first n\n    occurrences of a substring within a larger string.\n    '''\n    first_n = []\n    substr = string.find(substring)\n    while substr!= -1:\n        first_n.append(substring)\n        substr = string.find(substring, substr+1)\n    if len(first_n) < n:\n        for i in range(n-len(first_n)):\n            first_n.append(string[0])\n    return first_n\ndef find_word(word, sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    if word in sentence:\n        return sentence.find(word)\n    else:\n        return -1\ndef remove_word(word, sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence.replace(word, \"\")\ndef remove_word(word, sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence.replace(word, \"\")\ndef remove_word(word, sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence.replace(word, \"\")\ndef find_word(word, sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    if word in sentence:\n        return sentence.find(word)\n    else:\n        return -1\ndef is_first_char_upper(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].isupper()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_upper(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].isupper()\ndef is_first_char_upper(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].isupper()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_upper(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].isupper()\ndef is_first_char_upper(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].isupper()\ndef is_first_char_upper(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].isupper()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence.\n    '''\n    return sentence[0].islower()\ndef is_first_char_lower(sentence):\n    '''\n    Write a function that finds the first instance of the\n    input word within the input sentence."
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_list = sorted(dict1.items(), key=lambda kv: kv[1])\n    return sort_list\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # BigSum\n    # large_num = 0\n    # small_num = 0\n    # for num in nums:\n    #     if num > large_num:\n    #         large_num = num\n    #     if num < small_num:\n    #         small_num = num\n    # return large_num + small_num\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Code here\n    # Remove pass and write the logic to find the sum of the largest and smallest value in a given array.\n    nums_sum = sum(nums)\n    largest = max(nums)\n    smallest = min(nums)\n    return nums_sum, largest, smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    print(f\"The largest value in the array is {max_val} and the smallest value in the array is {min_val}\")\n    \n    return max_val + min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    def sum_max_min(nums):\n        '''\n        Function to find the sum of the largest and smallest value in a given array.\n        '''\n        max_num = max(nums)\n        min_num = min(nums)\n        total = sum(nums)\n        return total, max_num, min_num\n        \n    total, max_num, min_num = sum_max_min(nums)\n    return total, max_num, min_num\n    \n    \ndef factorial(num):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    \n    def fact(num):\n        '''\n        Function to compute the factorial of a given number.\n        '''\n        fact_num = 1\n        for i in range(1, num + 1):\n            fact_num *= i\n        return fact_num\n        \n    fact_num = fact(num)\n    return fact_num\n        \n    \ndef reverse(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    \n    def reverse_str(str):\n        '''\n        Function to reverse a given string.\n        '''\n        reverse_str = str[::-1]\n        return reverse_str\n        \n    reverse_str = reverse_str(str)\n    return reverse_str\n        \n    \ndef is_prime(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    \n    def is_prime_no_for(num):\n        '''\n        Function to check if a given number is prime or not.\n        '''\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n        \n    if is_prime_no_for(num):\n        return True\n    else:\n        return False\n    \n    \ndef prime_factorization(num):\n    '''\n    Write a python function to compute the prime factorization of a given number.\n    '''\n    \n    def prime_factorization_no_for(num):\n        '''\n        Function to compute the prime factorization of a given number.\n        '''\n        factor = []\n        for i in range(2, num):\n            while num % i == 0:\n                num = num // i\n                factor.append(i)\n        return factor\n        \n    prime_factorization = prime_factorization_no_for(num)\n    return prime_factorization\n    \n    \ndef fibonacci(num):\n    '''\n    Write a python function to compute the fibonacci sequence of a given number.\n    '''\n    \n    def fib(num):\n        '''\n        Function to compute the fibonacci sequence of a given number.\n        '''\n        n1 = 0\n        n2 = 1\n        for i in range(2, num + 1):\n            next = n1 + n2\n            n1 = n2\n            n2 = next\n        return next\n    \n    fib_num = fib(num)\n    return fib_num\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    \n    def is_palindrome_no_for(str):\n        '''\n        Function to check if a given string is a palindrome or not.\n        '''\n        rev_str = str[::-1]\n        if str == rev_str:\n            return True\n        return False\n    \n    if is_palindrome_no_for(str):\n        return True\n    else:\n        return False\n    \n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check if two given strings are anagram or not.\n    '''\n    \n    def is_anagram_no_for(str1, str2):\n        '''\n        Function to check if two given strings are anagram or not.\n        '''\n        str1_char_count = {}\n        str2_char_count = {}\n        \n        for char in str1:\n            if char in str1_char_count:\n                str1_char_count[char] += 1\n            else:\n                str1_char_count[char] = 1\n                \n        for char in str2:\n            if char in str2_char_count:\n                str2_char_count[char] += 1\n            else:\n                str2_char_count[char] = 1\n                \n        for k, v in str1_char_count.items():\n            if k not in str2_char_count:\n                return False\n            if v!= str2_char_count[k]:\n                return False\n        return True\n        \n    if is_anagram_no_for(str1, str2):\n        return True\n    else:\n        return False\n    \n    \ndef distinct(str):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    \n    def distinct_no_for(str):\n        '''\n        Function to check if the given string is palindrome or not.\n        '''\n        for i in range(len(str)):\n            if str[i] in str[i + 1:]:\n                return False\n        return True\n    \n    if distinct_no_for(str):\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    \n    def is_palindrome_no_for(str):\n        '''\n        Function to check if the given string is palindrome or not.\n        '''\n        rev_str = str[::-1]\n        if str == rev_str:\n            return True\n        return False\n    \n    if is_palindrome_no_for(str):\n        return True\n    else:\n        return False\n    \n    \ndef triple_double(num):\n    '''\n    Write a python function to find out the number of times the number is tripled and then doubled.\n    '''\n    \n    def triple_double_no_for(num):\n        '''\n        Function to find out the number of times the number is tripled and then doubled.\n        '''\n        num = num * 3\n        num = num + num\n        return num\n    \n    num = triple_double_no_for(num)\n    return num\n    \n    \ndef compare_strings(str1, str2):\n    '''\n    Write a python function to find out the number of times the number is multiplied and then doubled.\n    '''\n    \n    def compare_strings_no_for(str1, str2):\n        '''\n        Function to find out the number of times the number is multiplied and then doubled.\n        '''\n        str1 = str1 +'' + str1\n        str2 = str2 +'' + str2\n        count = 0\n        for i in range(len(str1)):\n            if str1[i] == str2[i]:\n                count += 1\n        return count\n    \n    num = compare_strings_no_for(str1, str2)\n    return num\n    \n    \ndef reverse_substring(str, k):\n    '''\n    Write a python function to find out the number of times the number is multiplied and then doubled.\n    '''\n    \n    def reverse_substring_no_for(str, k):\n        '''\n        Function to find out the number of times the number is multiplied and then doubled.\n        '''\n        start_index = 0\n        end_index = start_index + k\n        \n        while end_index <= len(str):\n            str = str[:start_index] + str[end_index:len(str)]\n            start_index += 1\n            end_index += 1\n        return str\n    \n    num = reverse_substring_no_for(str, k)\n    return num\n    \n    \ndef reverse_substring_with_split(str, k):\n    '''\n    Write a python function to find out the number of times the number is multiplied and then doubled.\n    '''\n    \n    def reverse_substring_with_split_no_for"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    max_ = nums[0]\n    min_ = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] > max_:\n            max_ = nums[i]\n        if nums[i] < min_:\n            min_ = nums[i]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    max_value = nums[0]\n    min_value = nums[0]\n    for i in nums:\n        if i > max_value:\n            max_value = i\n        elif i < min_value:\n            min_value = i\n    return max_value+min_value\n        \n    \ndef reverse_words(string):\n    '''\n    Write a python function to reverse the words in a given sentence.\n    '''\n    string = string.split()\n    string = string[::-1]\n    string =''.join(string)\n    return string\n    \n    \ndef count_chars(string):\n    '''\n    Write a python function to count the number of characters (character counts) in a given string.\n    '''\n    count = 0\n    for i in string:\n        count += 1\n    return count\n        \n        \ndef sum_odd_numbers(nums):\n    '''\n    Write a python function to find the sum of all the odd numbers in a given array.\n    '''\n    if len(nums)==0:\n        return 0\n    for i in range(0,len(nums),2):\n        nums[i] = 2*nums[i]\n    return sum(nums)\n        \n        \ndef binary_search(nums, item):\n    '''\n    Write a python function to find the first index of a given item in a given array.\n    '''\n    if len(nums)==0:\n        return -1\n    if len(nums)==1:\n        return 0 if nums[0]==item else -1\n    if nums[0]==item:\n        return 0\n    if nums[-1]==item:\n        return len(nums)-1\n    mid = len(nums)//2\n    if nums[mid]==item:\n        return mid\n    if nums[mid]>item:\n        return binary_search(nums[:mid], item)\n    if nums[mid]<item:\n        return binary_search(nums[mid+1:], item)\n    \n    \ndef find_missing_letter(string):\n    '''\n    Write a python function to check if a string contains an anagram of a palindrome.\n    '''\n    if len(string)<2:\n        return -1\n    string = sorted(string)\n    string = ''.join(string)\n    string = sorted(string)\n    string = ''.join(string)\n    return string[::-1]\n        \n        \ndef is_pallindrome(string):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    if len(string)<2:\n        return True\n    string = sorted(string)\n    string = ''.join(string)\n    string = sorted(string)\n    string = ''.join(string)\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome(num):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    if num < 0:\n        return False\n    reversed_num = 0\n    while(num>reversed_num):\n        rem = num%10\n        reversed_num = reversed_num*10 + rem\n        num = num//10\n    if num == reversed_num:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_v2(num):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    return num == num[::-1]\n    \n        \ndef max_numbers(nums):\n    '''\n    Write a python function to find the maximum and minimum numbers in a given array.\n    '''\n    if len(nums)==0:\n        return 0,0\n    max_num = nums[0]\n    min_num = nums[0]\n    for i in nums:\n        if i > max_num:\n            max_num = i\n        elif i < min_num:\n            min_num = i\n    return max_num,min_num\n        \n        \ndef is_power_of_2(num):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    if num <= 0:\n        return False\n    while(num>=1):\n        if num%2==0:\n            num = num/2\n        else:\n            return False\n    if num==1:\n        return True\n    else:\n        return False\n        \n    \ndef is_power_of_2_v2(num):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    return num>0 and num & (num - 1) == 0\n    \n    \ndef is_power_of_3(num):\n    '''\n    Write a python function to check if a given number is power of 3 or not.\n    '''\n    if num <= 0:\n        return False\n    while(num>=1):\n        if num%3==0:\n            num = num/3\n        else:\n            return False\n    if num==1:\n        return True\n    else:\n        return False\n        \n    \ndef is_power_of_3_v2(num):\n    '''\n    Write a python function to check if a given number is power of 3 or not.\n    '''\n    return num>0 and ((num%3==0 and num!=1) or (num%5==0 and num!=1))\n        \n    \ndef is_power_of_5(num):\n    '''\n    Write a python function to check if a given number is power of 5 or not.\n    '''\n    if num <= 0:\n        return False\n    while(num>=1):\n        if num%5==0:\n            num = num/5\n        else:\n            return False\n    if num==1:\n        return True\n    else:\n        return False\n    \n    \ndef is_power_of_5_v2(num):\n    '''\n    Write a python function to check if a given number is power of 5 or not.\n    '''\n    return num>0 and ((num%5==0 and num!=1) or (num%3==0 and num!=1))\n        \n    \ndef calculate_x(a,b):\n    '''\n    Write a python function to calculate the sum of natural numbers (x+1).\n    '''\n    x = 0\n    while a<=b:\n        x += a\n        a+=1\n    return x\n    \n    \ndef calculate_x_v2(a,b):\n    '''\n    Write a python function to calculate the sum of natural numbers (x+1).\n    '''\n    return (b+1)-a\n    \n    \ndef sum_array(nums):\n    '''\n    Write a python function to find the sum of array elements.\n    '''\n    if len(nums)==0:\n        return 0\n    sum = 0\n    for i in range(0,len(nums)):\n        sum = sum + nums[i]\n    return sum\n    \n        \ndef sum_array_v2(nums):\n    '''\n    Write a python function to find the sum of array elements.\n    '''\n    if len(nums)==0:\n        return 0\n    sum = 0\n    nums = sorted(nums)\n    nums = list(nums)\n    for i in range(0,len(nums)):\n        sum = sum + nums[i]\n    return sum\n        \n        \ndef sum_array_v3(nums):\n    '''\n    Write a python function to find the sum of array elements.\n    '''\n    if len(nums)==0:\n        return 0\n    sum = 0\n    nums = sorted(nums)\n    nums = list(nums)\n    for i in range(0,len(nums)):\n        sum = sum + nums[i]\n    return sum\n        \n        \ndef is_rotated"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    arr = nums\n    n = len(arr)\n    maxi = arr[0]\n    mini = arr[0]\n    for i in range(1, n):\n        if(maxi < arr[i]):\n            maxi = arr[i]\n        if(mini > arr[i]):\n            mini = arr[i]\n    return maxi+mini\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    str = \"\"\n    for i in string:\n        if i.isupper():\n            str += i.lower()\n        else:\n            str += i\n    return str\n    \nprint(is_lower(\"HAiY2w3r\"))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    s = string.lower()\n    return s\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    result = ''\n    for i in string:\n        if i.isupper():\n            i = i.lower()\n        result = result + i\n    return result\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lowercase = \"\"\n    for i in string:\n        if i.isupper():\n            lowercase = lowercase + i.lower()\n    print(lowercase)\n    return lowercase\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef upper(string):\n    return string.upper()\n    \ndef join_string(string):\n    return '-'.join(string)\n    \ndef remove_space(string):\n    return string.strip()\n    \ndef reverse_string(string):\n    return string[::-1]\n    \ndef is_palindrome(string):\n    if string == reverse_string(string):\n        return True\n    else:\n        return False\n    \ndef factorial(n):\n    return 1 if n < 2 else n * factorial(n-1)\n    \ndef is_power(num,p):\n    return num**p == 1\n    \ndef is_prime(num):\n    if num == 1:\n        return False\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n    \ndef prime_factors(num):\n    if num == 1:\n        return []\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return prime_factors(num//i)+[i]\n    return prime_factors(num)\n    \ndef is_prime2(num):\n    if num == 1:\n        return False\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n    \ndef is_power2(num):\n    if num == 1:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n    \ndef fibonacci(n):\n    return (((1+5**0.5)/2)**n-((1-5**0.5)/2)**n)/5**0.5\n    \ndef sum_of_n_numbers(num):\n    return 5**num-4\n    \ndef is_perfect(num):\n    return num == 6 * sum_of_n_numbers(1) + sum_of_n_numbers(2) + sum_of_n_numbers(3)\n    \ndef is_perfect2(num):\n    return num == int(sum_of_n_numbers(1) * 6 + sum_of_n_numbers(2) * 5 + sum_of_n_numbers(3) * 4)\n    \ndef is_palindrome(string):\n    return string == reverse_string(string)\n    \ndef find_longest_word(words):\n    max = 0\n    for i in range(len(words)):\n        if len(words[i]) > max:\n            max = len(words[i])\n    return max\n    \ndef binary_search(arr, l, r, x): \n    while l <= r: \n        mid = int(l + (r - l)/2) \n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            l = mid + 1\n        else: \n            r = mid - 1\n    return -1\n    \ndef largest(arr):\n    max = 0\n    for i in range(len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n    \ndef largest2(arr):\n    return sorted(arr, reverse=True)[0]\n    \ndef minimum(arr):\n    min = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n    return min\n    \ndef minimum2(arr):\n    return min(arr)\n    \ndef smallest(arr):\n    min = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < min:\n            min = arr[i]\n    return min\n    \ndef smallest2(arr):\n    return min(arr)\n    \ndef find_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            if arr[i] == arr[arr[i]]:\n                return arr[i]\n    return -1\n    \ndef find_duplicate2(arr):\n    for i in range(len(arr)):\n        while arr[i]!= i:\n            if arr[i] == arr[arr[i]]:\n                return arr[i]\n            arr[arr[i]], arr[i] = arr[i], arr[arr[i]]\n    return -1\n    \ndef remove_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            arr[i], arr[arr[i]] = arr[arr[i]], arr[i]\n    return arr\n    \ndef remove_duplicate2(arr):\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            arr[i], arr[arr[i]] = arr[arr[i]], arr[i]\n    return arr\n    \ndef integer_to_string(num):\n    s = str(num)\n    return s\n    \ndef string_to_integer(string):\n    if string.startswith('-'):\n        return int(string[1:])*(-1)\n    else:\n        return int(string)\n    \ndef is_prime_string(string):\n    if len(string) == 1:\n        return True\n    else:\n        return False\n    \ndef prime_string(string):\n    if string == 'a' or string == 'e' or string == 'i' or string == 'o' or string == 'u':\n        return False\n    else:\n        return True\n    \ndef decode_string(string):\n    string = string.lower()\n    s = list(string)\n    for i in range(len(s)):\n        if s[i] == 'a':\n            s[i] = '2'\n        elif s[i] == 'b':\n            s[i] = '2'\n        elif s[i] == 'c':\n            s[i] = '2'\n        elif s[i] == 'd':\n            s[i] = '3'\n        elif s[i] == 'e':\n            s[i] = '3'\n        elif s[i] == 'f':\n            s[i] = '3'\n        elif s[i] == 'g':\n            s[i] = '4'\n        elif s[i] == 'h':\n            s[i] = '4'\n        elif s[i] == 'i':\n            s[i] = '5'\n        elif s[i] == 'j':\n            s[i] = '5'\n        elif s[i] == 'k':\n            s[i] = '6'\n        elif s[i] == 'l':\n            s[i] = '6'\n        elif s[i] =='m':\n            s[i] = '7'\n        elif s[i] == 'n':\n            s[i] = '7'\n        elif s[i] == 'o':\n            s[i] = '8'\n        elif s[i] == 'p':\n            s[i] = '8'\n        elif s[i] == 'q':\n            s[i] = '9'\n        elif s[i] == 'r':\n            s[i] = '9'\n        elif s[i] =='s':\n            s[i] = '0'\n        elif s[i] == 't':\n            s[i] = '0'\n        elif s[i] == 'u':\n            s[i] = '0'\n        elif s[i] == 'v':\n            s[i] = '0'\n        elif s[i] == 'w':\n            s[i] = '0'\n        elif s[i] == 'x':\n            s[i] = '0'\n        elif s[i] == 'y':\n            s[i] = '0'\n        elif s[i] == 'z':\n            s[i] = '0'\n        elif s[i] == 'a' or s[i] == 'e' o"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    l = []\n    for i in string:\n        if i.isalpha():\n            l.append(i.lower())\n    return ''.join(l)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # str1 = input()\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace('a','').replace('b','').replace('c','').replace('d','').replace('e','').replace('f','').replace('g','').replace('h','').replace('i','').replace('j','').replace('k','').replace('l','').replace('m','').replace('n','').replace('o','').replace('p','').replace('q','').replace('r','').replace('s','').replace('t','').replace('u','').replace('v','').replace('w','').replace('x','').replace('y','').replace('z','')\n    \ndef remove_numbers(str1):\n    '''\n    Write a function to remove numeric substrings from a given string.\n    '''\n    return str1.replace('1','').replace('2','').replace('3','').replace('4','').replace('5','').replace('6','').replace('7','').replace('8','').replace('9','').replace('0','')\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[a-z]')\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1.islower():\n        return str1.upper()\n    else:\n        return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # make the string lowercase\n    str1=str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #Solution 1\n    #str1=str1.lower()\n    #return str1\n    \n    #Solution 2\n    if len(str1)>0:\n        str1=str1.replace('a',' ')\n        str1=str1.replace('b',' ')\n        str1=str1.replace('c',' ')\n        str1=str1.replace('d',' ')\n        str1=str1.replace('e',' ')\n        str1=str1.replace('f',' ')\n        str1=str1.replace('g',' ')\n        str1=str1.replace('h',' ')\n        str1=str1.replace('i',' ')\n        str1=str1.replace('j',' ')\n        str1=str1.replace('k',' ')\n        str1=str1.replace('l',' ')\n        str1=str1.replace('m',' ')\n        str1=str1.replace('n',' ')\n        str1=str1.replace('o',' ')\n        str1=str1.replace('p',' ')\n        str1=str1.replace('q',' ')\n        str1=str1.replace('r',' ')\n        str1=str1.replace('s',' ')\n        str1=str1.replace('t',' ')\n        str1=str1.replace('u',' ')\n        str1=str1.replace('v',' ')\n        str1=str1.replace('w',' ')\n        str1=str1.replace('x',' ')\n        str1=str1.replace('y',' ')\n        str1=str1.replace('z',' ')\n        \n    return str1\n    \n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all the punctuations from a given string.\n    '''\n    #Solution 1\n    #str1=str1.replace('!','')\n    #str1=str1.replace('.','')\n    #str1=str1.replace('(','')\n    #str1=str1.replace(')','')\n    #str1=str1.replace(';','')\n    #str1=str1.replace(':','')\n    #str1=str1.replace('?','')\n    #str1=str1.replace('\\n','')\n    #str1=str1.replace('\\t','')\n    \n    #Solution 2\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    str1=str1.replace('\\n',' ')\n    str1=str1.replace('\\t',' ')\n    for x in str1:\n        if x in punctuations:\n            str1=str1.replace(x,'')\n    return str1\n    \n    \ndef normalize_string(str1):\n    '''\n    Write a function to normalize the given string by removing\n    lowercase and uppercase characters and numbers from it.\n    '''\n    #Solution 1\n    str1=remove_lowercase(str1)\n    str1=remove_punctuation(str1)\n    \n    #Solution 2\n    #str1 = re.sub(r'[^\\w\\s]', '', str1)\n    \n    return str1\n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    #Solution 1\n    #str1=str1.lower()\n    #str1=str1.replace(' ','')\n    #print(str1)\n    #str1=str1.replace('',' ')\n    #print(str1)\n    #str1=str1.replace('',' ')\n    #print(str1)\n    #str1=str1.replace('',' ')\n    #print(str1)\n    \n    #Solution 2\n    #str1 = str1.lower()\n    #str1 = str1.replace(' ','')\n    #print(str1)\n    \n    #Solution 3\n    #new_str1 = ''\n    #for c in str1:\n        #if c not in ('a','e','i','o','u'):\n            #new_str1 = new_str1 + c\n    \n    #print(new_str1)\n    \n    \n    #Solution 4\n    #new_str1 = ''\n    #for c in str1:\n        #if c.isalpha():\n            #new_str1 = new_str1 + c\n            \n    #print(new_str1)\n    \n    #Solution 5\n    #str1=str1.lower()\n    #str1=str1.replace(' ','')\n    #print(str1)\n    \n    #Solution 6\n    #str1 = re.sub(r'[^\\w\\s]', '', str1)\n    #print(str1)\n    #str1 = str1.replace('',' ')\n    #print(str1)\n    \n    #Solution 7\n    #for c in str1:\n        #if c.isalpha():\n            #str1=str1.replace(c,'')\n    \n    #print(str1)\n    \n    #Solution 8\n    #for c in str1:\n        #if c.isalpha() or c.isdigit():\n            #str1=str1.replace(c,'')\n    \n    #print(str1)\n    \n    return new_str1==str1\n    \n    \ndef reverse(str1):\n    '''\n    Write a function that reverses the string.\n    '''\n    #Solution 1\n    \n    #Solution 2\n    #str1 = str1[::-1]\n    \n    #Solution 3\n    #str1 = ''\n    #for i in range(len(str1)):\n        #str1 = str1 + str1[len(str1)-1-i]\n    \n    #Solution 4\n    #str1 = ''\n    #for i in str1:\n        #str1 = i + str1\n    \n    #Solution 5\n    #str1 = ''\n    #for i in range(len(str1)):\n        #str1 = str1 + str1[-i-1]\n    \n    #Solution 6\n    #str1 = ''\n    #for i in range(len(str1)):\n        #str1 = str1 + str1[-i-1]\n        \n    #Solution 7\n    #str1 = str1[::-1]\n    \n    #Solution 8\n    #str1 = str1[::-1]\n    \n    #Solution 9\n    #str1 = str1[::-1]\n    \n    return str1\n    \n    \ndef capitalize(str1):\n    '''\n    Write a function that capitalizes the first character of the string.\n    '''\n    #Solution 1\n    str1 = str1.capitalize()\n    \n    #Solution 2\n    #str1 = str1[0].capitalize()\n    \n    #Solution 3\n    #str1 = str1.capitalize()\n    \n    #Solution 4\n    #str1 = str1.title()\n    \n    #Solution 5\n    #str1 = str1.title()\n    \n    #Solution 6\n    #str1 = str1.title()\n    \n    #Solution 7\n    #str1 = str1.title()\n    \n    #Solution 8\n    #str1 = str1.title()\n    \n    #Solution 9\n    #str1 = str1.title()\n    \n    return str1\n    \n    \ndef swap_case(str1):\n    '''\n    Write a function that swaps lowercase letters with uppercase letters and vice versa.\n    '''\n    #Solution 1\n    str1 = str1.swapcase()\n    \n    #Solution 2\n    #str1 = str1.upper()\n    #str1 = str1.lower()\n    \n    #Solution 3\n    #str1 = str1.swapcase()\n    \n    #Solution 4\n    #str1 = str1.lower()\n    #str1 = str1.upper()\n    \n    #Solution 5\n    #str1 = str1.swapcase()\n    \n    #Solutio"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace('i','o').replace('o','i')\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]','',str1)\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub('\\d','',str1)\n    \ndef find_anagram(str1,str2):\n    '''\n    Write a function to find anagrams of a given word from another word.\n    '''\n    str2 = remove_lowercase(str2)\n    str2 = remove_digits(str2)\n    str2 = ''.join(sorted(str2))\n    \n    def is_anagram(str1,str2):\n        if len(str1)!= len(str2):\n            return False\n        dict1 = {}\n        for i in str1:\n            if i not in dict1:\n                dict1[i] = 1\n            else:\n                dict1[i] += 1\n                \n        for i in str2:\n            if i not in dict1:\n                return False\n            elif dict1[i]!= 1:\n                return False\n        return True\n        \n    def sub_anagrams(str1,str2,dict1,ans):\n        if str1 == str2:\n            ans.append(str1)\n            return\n        if str1 in dict1:\n            if dict1[str1] == 1:\n                return\n            dict1[str1] -= 1\n            sub_anagrams(str2,str1,dict1,ans)\n            dict1[str1] += 1\n        return\n    ans = []\n    if is_anagram(str1,str2):\n        sub_anagrams(str1,str2,dict1,ans)\n    return ans\n    \ndef split_words(str1):\n    '''\n    Write a function to split a string into words. Words should be in lowercase.\n    '''\n    str1 = str1.lower()\n    return re.split('[ ]+',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.replace(\"a\",\"\")\n    str1 = str1.replace(\"e\",\"\")\n    str1 = str1.replace(\"i\",\"\")\n    str1 = str1.replace(\"o\",\"\")\n    str1 = str1.replace(\"u\",\"\")\n    str1 = str1.replace(\"A\",\"\")\n    str1 = str1.replace(\"E\",\"\")\n    str1 = str1.replace(\"I\",\"\")\n    str1 = str1.replace(\"O\",\"\")\n    str1 = str1.replace(\"U\",\"\")\n    return str1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n :\n        n, digit = divmod(n, 10)\n        if digit :\n            return digit\n    return digit\nprint(first_Digit(1234))\nprint(first_Digit(123))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//1%10\ndef is_prime(n) :\n    '''\n    Write a python function to check whether the given number is a prime or not.\n    '''\n    n=abs(n)\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i=i+1\n    return True\ndef palindrome(string):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    if(string==string[::-1]):\n        return True\n    else:\n        return False\ndef is_rotation(str1, str2):\n    '''\n    Write a python function to check whether the given strings are rotations of each other or not.\n    '''\n    if len(str1) == len(str2) and len(str1) == len(str1) :\n        if str1 == str2:\n            return True\n    return False\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # your code here\n    return\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n) % 10"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while (n > 0):\n        if (n % 10 == 0):\n            return 0\n        else:\n            n = n // 10\n    if n == 0:\n        return 1\n        \ndef last_Digit(n) : \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n % 10 == 0):\n        return 0\n    else:\n        return (10 - (n % 10))\n        \ndef convert_to_Binary(n) : \n    '''\n    Write a python function to convert a number to its binary equivalent.\n    '''\n    while (n > 0):\n        if (n % 2 == 0):\n            print(0,end = \"\")\n        else :\n            print(1,end = \"\")\n        n = n // 2\n    \ndef to_Binary(n) :\n    '''\n    Write a python function to convert a number to its decimal equivalent.\n    '''\n    while (n > 0):\n        if (n % 2 == 0):\n            n = n // 2\n        else :\n            n = n // 2 + 1\n    return n\n        \ndef to_Binary_without_Negative(n) :\n    '''\n    Write a python function to convert a number to its decimal equivalent.\n    '''\n    if n < 0 :\n        return -(to_Binary_without_Negative(n - 1))\n    elif (n % 2 == 0):\n        return 0\n    else :\n        return 1\n        \ndef is_PowerOf_2(n) :\n    '''\n    Write a python function to check whether a given number is a power of 2 or not.\n    '''\n    if n < 0 :\n        return False\n    elif (n % 2 == 0):\n        return True\n    else :\n        return is_PowerOf_2(n // 2)\n        \ndef digit(n) :\n    '''\n    Write a python function to find the index of a digit in a given number.\n    '''\n    index = 0\n    while (n > 0):\n        if (n % 10 == 0):\n            return (index)\n        else :\n            n = n // 10\n            index = index + 1\n    \ndef count_Digits(n) :\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    count = 0\n    while (n > 0):\n        if (n % 10 == 0):\n            count = count + 1\n        else :\n            return (count)\n            \ndef is_Palindrome(str) :\n    '''\n    Write a python function to check whether a string is a Palindrome or not.\n    '''\n    str = str.lower()\n    str = str.replace(\" \",\"\")\n    if (str == str[::-1]):\n        print(\"Palindrome\")\n    else :\n        print(\"Not a Palindrome\")\n        \ndef sum_of_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits in a given number.\n    '''\n    sum = 0\n    while (n > 0):\n        if (n % 10 == 0):\n            sum = sum + n % 10\n        else :\n            return sum\n            \ndef to_Decimal(n) :\n    '''\n    Write a python function to convert a binary number to its decimal equivalent.\n    '''\n    while (n > 0):\n        if (n % 10 == 0):\n            n = n // 10\n        else :\n            return n\n            \ndef has_Zeros(n) :\n    '''\n    Write a python function to find whether the given number has zeros in it.\n    '''\n    while (n > 0):\n        if (n % 10 == 0):\n            return 0\n        else :\n            return 1\n            \ndef to_Binary(n) :\n    '''\n    Write a python function to convert a number to its binary equivalent.\n    '''\n    while (n > 0):\n        if (n % 2 == 0):\n            n = n // 2\n        else :\n            n = n // 2 + 1\n    return n\n        \ndef to_Binary_without_Negative(n) :\n    '''\n    Write a python function to convert a number to its decimal equivalent.\n    '''\n    if n < 0 :\n        return -(to_Binary_without_Negative(n - 1))\n    elif (n % 2 == 0):\n        return 0\n    else :\n        return 1\n        \ndef is_Palindrome_using_Stack(str) :\n    '''\n    Write a python function to check whether a string is a Palindrome or not.\n    '''\n    str = str.lower()\n    str = str.replace(\" \",\"\")\n    stack = []\n    n = 0\n    while (n < len(str)) :\n        if str[n] not in stack :\n            stack.append(str[n])\n            n = n + 1\n        else :\n            return \"Not a Palindrome\"\n            \ndef num_of_even_digits(n) :\n    '''\n    Write a python function to count the number of even digits in a given number.\n    '''\n    count = 0\n    while (n > 0):\n        if (n % 10 % 2 == 0):\n            count = count + 1\n        else :\n            return count\n            \ndef is_palindrome_using_Stack(str) :\n    '''\n    Write a python function to check whether a string is a Palindrome or not.\n    '''\n    str = str.lower()\n    str = str.replace(\" \",\"\")\n    stack = []\n    n = 0\n    while (n < len(str)) :\n        if (str[n] not in stack):\n            stack.append(str[n])\n            n = n + 1\n        else :\n            return \"Not a Palindrome\"\n            \ndef Reverse_String(str) :\n    '''\n    Write a python function to reverse a given string.\n    '''\n    s = \"\"\n    for i in str:\n        s = i + s\n    return s\n        \ndef three_Sum(n) :\n    '''\n    Write a python function to find all triplets such that sum is equal to given number.\n    '''\n    n = int(n)\n    triplets = []\n    for i in range(1,n//2):\n        if n - i in range(0,n//2):\n            triplets.append([i,n-i,n])\n    return triplets\n        \ndef threeSum_with_Index(n) :\n    '''\n    Write a python function to find all triplets such that sum is equal to given number.\n    '''\n    n = int(n)\n    triplets = []\n    for i in range(0,n//2):\n        if n - i in range(0,n//2):\n            if n - i!= n - (n - i):\n                triplets.append([i,n-i,n])\n            else :\n                triplets.append([i,n-i,n-i])\n    return triplets\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    import math\n    return int(math.log10(n))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        n = int(input(\"Enter the number : \"))\n        print(n, \"has first digit as : \",n//1%10)\n    except ValueError:\n        print(\"No integer entered! Please try again\")\n        first_Digit(n)\n    except ZeroDivisionError:\n        print(\"Please enter a valid number!!\")\n        first_Digit(n)\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = n - int(n)\n    return int(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n%10)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            odd_list.append(list[i])\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [l for l in list if l % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for i in range(len(list)): \n        if i % 2!= 0: \n            odd_list.append(list[i]) \n    return odd_list \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    i=0\n    lst=[]\n    while i<len(list):\n        if list[i]%2!=0:\n            lst.append(list[i])\n        i+=1\n    print(lst)\n    \ndef Oddlist(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    i=0\n    lst=[]\n    while i<len(list):\n        if list[i]%2==0:\n            lst.append(list[i])\n        i+=1\n    print(lst)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    even = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n        else:\n            even.append(i)\n    return odd, even\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for item in list:\n        if item % 2 == 0:\n            odd.append(item)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list2 = []\n    for i in list:\n        if i%2!= 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    res = []\n    for i in list:\n        if i%2!= 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #a = (i for i in list if i%2!= 0)\n    a = filter(lambda x: x % 2, list)\n    return list(a)\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_nums = list[::2]\n    return odd_nums\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #our output\n    output = 0\n    # getting the sum of the first n natural numbers.\n    sum_n = sum(range(1,n+1))\n    # getting the sum of the first n natural numbers.\n    sum_n2 = (n*(n+1))/2\n    # finding the difference.\n    output = sum_n2 - sum_n\n    return output\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Python program to find the sum of cubes of the first n natural numbers\n    \n    # initializing sum of first n natural numbers\n    sum_of_first_n = 0\n    \n    # printing sum of first n natural numbers\n    print('Sum of first',n,'numbers is :',sum_of_first_n)\n    \n    # calculating sum of cubes of first n natural numbers\n    for i in range(1,n+1):\n        sum_of_first_n = sum_of_first_n + i**3\n    \n    # printing sum of cubes of first n natural numbers\n    print('Sum of cubes of first',n,'numbers is :',sum_of_first_n)\n    \n    # calculating difference between sum of cubes of first n natural numbers\n    # and sum of first n natural numbers\n    difference = sum_of_first_n - (n*(n+1)//2)\n    \n    # printing difference between sum of cubes of first n natural numbers\n    # and sum of first n natural numbers\n    print('Difference between sum of cubes of first',n,'numbers and sum of first',n,'natural numbers is :',difference)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(range(1,n+1))**3 - sum(range(1,n+1))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = n * (n + 1) ** 2 / 2\n    return abs(result - sum(range(1, n + 1)))\n    \n    \ndef checkio(n):\n    '''\n    You are given an integer,. Your task is to print an alphabet rangoli of size. (Rangoli is a form of Indian folk art based on creation of patterns.)\n    \n    Different sizes of the alphabet rangoli are shown below:\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)//6\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import math\n    def sum_of_cubes(n):\n        n = int(n)\n        s = 0\n        for i in range(1, n+1):\n            s += (i**3)\n        return(s)\n    \n    diff = sum_of_cubes(n)-(math.pow(sum_of_cubes(n), 3))\n    print(\"Difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers : \", diff)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cube = 0\n    sum_of_numbers = 0\n    i = 1\n    while i <= n :\n        sum_of_cube += i**3\n        sum_of_numbers += i\n        i += 1\n    return sum_of_numbers**3 - sum_of_cube\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += pow(i,3)\n    return result - n*(n+1)*(2*n+1)//6\n    \n    \n    \ndef difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += pow(i,3)\n    return result - n*(n+1)*(2*n+1)//6\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n=int(n)\n    print(\"the difference is\")\n    print(pow(n,3)-sum(range(1,n+1)))\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if A[i] == A[j] :\n                continue\n            if (A[i] ^ A[j])%2 == 1 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                odd_pair += 1\n                break\n    return odd_pair\n        \ndef find_Odd_Pair2(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                odd_pair += 1\n                break\n    return odd_pair\n    \ndef main():\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A = [0, 1, 2, 4, 8, 15, 16, 32, 64, 128, 256]\n    N = len(A)\n    print(find_Odd_Pair(A, N))\n    print(find_Odd_Pair2(A, N))\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    for i in range(0,N-1,2) :\n        if (A[i] ^ A[i+1])%2!= 0 :\n            odd_pair += 1\n    return odd_pair\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N) : \n        count = count + A[i] ^ A[i - 1] \n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if ( A[i] ^ A[j]) % 2 == 1:\n                count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!= 0:\n                count = count + 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if(N<2): \n        return 0\n    A.sort()\n    i = 0\n    count = 0\n    while i<N-1:\n        j = i+1\n        while j<N:\n            x = A[i] ^ A[j]\n            if x%2!= 0:\n                count = count+1\n            j=j+1\n        i=i+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N):\n        for j in range(i,N+1):\n            if (A[i]^A[j])%2 == 1:\n                count = count+1\n    print(count)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j])%2!= 0 :\n                count += 1\n    return count\n    \nif __name__ == '__main__' : \n    A = [4,5,6,7,8,9] \n    N = len(A) \n    print(\"The number of odd pairs in array A = \" + str(find_Odd_Pair(A,N))) \n    A = [1,2,3,4,5,6,7,8,9] \n    N = len(A) \n    print(\"The number of odd pairs in array A = \" + str(find_Odd_Pair(A,N)))"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lower = 'lower'\n    upper = 'upper'\n    return lower if string.islower() else upper"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string_lower = string.lower()\n    string_upper = string_lower.upper()\n    return string_upper\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            new_string += string[i].lower()\n        else:\n            new_string += string[i].upper()\n    return new_string\n    \n    "
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print(string.swapcase())\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string[0].islower():\n        return string.upper()\n    else:\n        return string.lower()\n    \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # method 1\n    # new_str = ''\n    # for c in string:\n    #     if c.isupper():\n    #         new_str += c.lower()\n    #     else:\n    #         new_str += c.upper()\n    # return new_str\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 10:\n        return 0\n    return (n2 - n1) % 10 + digit_distance_nums(n1 // 10, n2 // 10)\n    \n    \ndef sum_distance(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return n1 + n2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        n1, n2 = n2, n1\n    return sum(abs(n1-n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = str(n1)\n    num2 = str(n2)\n    total_sum = 0\n    for i in range(len(num1)):\n        total_sum += abs(int(num1[i]) - int(num2[i]))\n    return total_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if type(n1)!= int or type(n2)!= int:\n        raise TypeError(\"Only integers are allowed.\")\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_n1 = 0\n    diff_n2 = 0\n    for i in range(len(str(n1))):\n        n1_digit = int(str(n1)[i])\n        n2_digit = int(str(n2)[i])\n        diff_n1 = diff_n1 + abs(n1_digit - n2_digit)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    result = 0\n    for i in range(10):\n        result += abs(n1-n2)\n    return result\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Write your code here\n    # print(n1, n2)\n    # for i in range(len(n1)):\n    #     print(i, n1[i], n2[i])\n    if len(n1) > len(n2):\n        temp_n1 = n1[0:len(n2)]\n        temp_n2 = n2\n    else:\n        temp_n1 = n1\n        temp_n2 = n2[0:len(n1)]\n    \n    sum_of_distance = 0\n    for i in range(len(temp_n1)):\n        sum_of_distance = sum_of_distance + abs(int(temp_n1[i]) - int(temp_n2[i]))\n    return sum_of_distance\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = abs(n1), abs(n2)\n    dist = 0\n    while n1 > 0:\n        n1, dist = n1 // 10, dist + (n1 % 10 - n2 % 10)\n    return dist\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0 and n2 == 0:\n        return 0\n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = {0:1, 1:1, 2:3, 3:5, 4:7, 5:9, 6:12, 7:15, 8:18, 9:21}\n    d2 = {0:1, 1:1, 2:3, 3:5, 4:7, 5:9, 6:12, 7:15, 8:18, 9:21}\n    ans = 0\n    for i in range(10):\n        ans += abs(n1-n2)\n    return ans\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    print(a, size)\n    if size < 1:\n        return 0\n    max_sub_array_sum = -99999999\n    current_max = 0\n    current_min = 0\n    current_sum = 0\n    for i in range(size):\n        current_max = max(a[i], current_max)\n        current_min = min(a[i], current_min)\n        current_sum += a[i]\n        max_sub_array_sum = max(max_sub_array_sum, current_sum - current_max - current_min)\n        current_sum = 0\n    return max_sub_array_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -999\n    for i in range(size):\n        curr_sum = 0\n        for j in range(i, size):\n            curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = -1e6\n    sub_sum = 0\n    for i in range(size):\n        sub_sum += a[i]\n        if sub_sum > max_sub_sum:\n            max_sub_sum = sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    i = 1\n    while i < size:\n        if current_sum > 0:\n            current_sum += a[i]\n        else:\n            current_sum = a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        i += 1\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    prev_max = 0\n    for i in range(0, size):\n        curr_max = max(a[i], a[i] + prev_max)\n        if curr_max > max_sum:\n            max_sum = curr_max\n        prev_max = max_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    for i in range(size):\n        curr_sum = 0\n        for j in range(i, size):\n            curr_sum += a[j]\n            max_sum = max(curr_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum+a[i])\n        max_sum = max(curr_sum, max_sum)\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_2(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_3(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_4(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \n    \ndef max_sub_array_sum_5(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_6(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_7(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_8(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_9(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_10(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_11(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_12(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_13(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_14(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_ending_here, max_so_far)\n        \n    return max_so_far\n    \ndef max_sub_array_sum_15(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    fo"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return 0\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    return tup1 | tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1_elements = sorted(test_tup1)\n    test_tup2_elements = sorted(test_tup2)\n    union_tuple = []\n    i = 0\n    j = 0\n    while i < len(test_tup1_elements) and j < len(test_tup2_elements):\n        if test_tup1_elements[i] == test_tup2_elements[j]:\n            union_tuple.append(test_tup1_elements[i])\n            i += 1\n            j += 1\n        elif test_tup1_elements[i] < test_tup2_elements[j]:\n            union_tuple.append(test_tup1_elements[i])\n            i += 1\n        else:\n            union_tuple.append(test_tup2_elements[j])\n            j += 1\n    if i!= len(test_tup1_elements):\n        while i < len(test_tup1_elements):\n            union_tuple.append(test_tup1_elements[i])\n            i += 1\n    if j!= len(test_tup2_elements):\n        while j < len(test_tup2_elements):\n            union_tuple.append(test_tup2_elements[j])\n            j += 1\n    return union_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n    for tup_1 in test_tup1:\n        if tup_1 not in test_tup2:\n            result.append(tup_1)\n    for tup_2 in test_tup2:\n        if tup_2 not in test_tup1:\n            result.append(tup_2)\n    result.sort()\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list()\n    for i in test_tup1:\n        if i not in union_list:\n            union_list.append(i)\n    for i in test_tup2:\n        if i not in union_list:\n            union_list.append(i)\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1 + test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    return union_set\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = []\n    union_tuple = set(test_tup1) | set(test_tup2)\n    print(\"Union of the elements of two given tuples are : {}\".format(sorted(union_tuple)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    import itertools as itr\n    lst_len = [len(list(itr.chain.from_iterable(lst))) for lst in lst]\n    print(max(lst_len))\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #initialise max as 0\n    max = 0\n    #loop through the list\n    for i in lst:\n        #if the length of the list is greater than max, update the max\n        if len(i)>max:\n            max = len(i)\n    #return max\n    return max\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max=0\n    for i in range(len(lst)):\n        length=len(lst[i])\n        if length>max:\n            max=length\n    print(max)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count_max = 0\n    for i in range(len(lst)):\n        cur_len = 0\n        for j in range(i, len(lst)):\n            if lst[j] == 1:\n                cur_len += 1\n            else:\n                break\n        if cur_len > count_max:\n            count_max = cur_len\n    return count_max\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxi = 0\n    for i in lst:\n        maxi = max(maxi, len(i))\n    return maxi\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    lst1 = sorted(lst)\n    for i in range(1, len(lst1)):\n        if (lst1[i] - lst1[i - 1]) == 1:\n            max_length = max(max_length, 1 + Find_Max_Length(lst[i + 1:]))\n        else:\n            max_length = max(max_length, Find_Max_Length(lst[i + 1:]))\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # start with a base case\n    if len(lst) == 1:\n        return len(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for item in lst:\n        max_len = max(max_len,len(item))\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst = list(lst)\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            current_length = len(lst[i:j+1])\n            if current_length > max_length:\n                max_length = current_length\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    if len(lst)==1:\n        return 1\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            curr_len = len(lst[i:j])\n            max_len = max(max_len, curr_len)\n    return max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Extract the value in square brackets\n    # value = re.findall(r'\"[^\"]*\"', text)\n    # Extract value between single quotes\n    # value = re.findall(r\"'[^']*'\", text)\n    # Extract value between double quotes\n    value = re.findall(r'\"[^\"]*\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile(r'(?<=\\\")[\\s\\S]*?(?=\\\")')\n    m = p.findall(text)\n    return m\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"[^\"]*\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #value = re.findall('\"(.*?)\"',text)\n    value = re.findall(r'\"(.*?)\"',text)\n    return value\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    temp = re.findall(r\"\\\"\\w+\\\"\", text)\n    for i in temp:\n        values.append(i.replace('\\\"', ''))\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"[^\"]+\"',text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    start_quotes = re.search(r'(?<=\\\")(.*?)(?=\\\")', text)\n    if start_quotes:\n        return start_quotes.group(0)\n    return ''\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    index_of_quotation_marks = text.find(\"\\\"\")\n    index_of_second_quotation_marks = text.find(\"\\\"\", index_of_quotation_marks + 1)\n    index_of_third_quotation_marks = text.find(\"\\\"\", index_of_second_quotation_marks + 1)\n    return text[index_of_quotation_marks + 1 : index_of_second_quotation_marks]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    extracted_values = re.findall(r\"\\\".*?\\\"\", text)\n    extracted_values = re.findall(r\"\\'.*?\\'\", text)\n    return extracted_values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"[^\"]+\"', text)\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j] and (i+1)!=j:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j] :\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    for i in range(0,n):\n        \n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count+=1\n    return count\n    \n    \ndef count_Pairs_2(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    \n    for i in range(0,n):\n        \n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count+=1\n    return count\n    \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    arr.sort()\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count +1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict={}\n    for i in arr:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    l=[]\n    for i in arr:\n        if i*i in dict:\n            l.append([i,i*i])\n    return len(l)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr)<2:\n        return 0\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                print(arr[i],arr[j])\n                break\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    l = len(arr)\n    count = 0\n    for i in range(l):\n        for j in range(i+1,l):\n            if arr[i] == arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                ans+=1\n    return ans \nprint(count_Pairs([1,2,3,4],4))\nprint(count_Pairs([1,2,3,4,5],5))\nprint(count_Pairs([5,6,7,8,9,10],6))\nprint(count_Pairs([6,7,8,9,10,11],6))\nprint(count_Pairs([11,12,13,14,15,16],5))\nprint(count_Pairs([11,12,13,14,15,16],6))\nprint(count_Pairs([11,12,13,14,15,16],7))\nprint(count_Pairs([11,12,13,14,15,16],8))\nprint(count_Pairs([11,12,13,14,15,16],9))\nprint(count_Pairs([11,12,13,14,15,16],10))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    # Write a python function to remove all white spaces from a string.\n    # Remove all the leading and trailing spaces from the string.\n    # Remove all leading and trailing spaces from the string.\n    # Remove all leading and trailing spaces from the string.\n    # Write a python function to remove all the white spaces from a string.\n    # Write a python function to check if a string contains any alphanumeric characters.\n    # Write a python function to check if a string contains any alphabetical characters.\n    # Write a python function to check if a string contains any digits.\n    # Write a python function to check if a string contains any lowercase characters.\n    # Write a python function to check if a string contains any uppercase characters.\n    # Write a python function to check if a string contains any special characters.\n    # Write a python function to check if a string contains any alphabets.\n    # Write a python function to check if a string contains any numeric characters.\n    # Write a python function to check if a string contains any spaces.\n    # Write a python function to remove all the white spaces from a string.\n    # Write a python function to remove all the spaces from a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of words in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in a string.\n    # Write a python function to count the number of characters in "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return(list(word))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \ndef isPalindrome(word): \n    '''\n    Write a python function to check whether a word or a sentence is a palindrome or not.\n    '''\n    a = split(word) \n    reversed_word = \"\".join(reversed(a)) \n    if (word == reversed_word): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    result = n % 10\n    return result + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    num = int(n)\n    \n    total = 0\n    \n    while num > 0:\n        total += num % 10\n        num //= 10\n        \n    return total\n    \nprint(sum_digits(1234))\nprint(sum_digits(123))\nprint(sum_digits(12))\nprint(sum_digits(1))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while(n>0):\n        sum += n%10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n_str = str(n)\n    if n < 0:\n        raise ValueError('N must be positive integer')\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i=0\n    l=len(list1)\n    while(i<l):\n        for j in range(i+1,l):\n            if list1[i]>list1[j]:\n                return False\n        i+=1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #Checking whether the list is sorted or not.\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    flag = True\n    for i in range(1, n):\n        if list1[i] < list1[i - 1]:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #Sort a list and return True if sorted, False if not sorted\n    #O(n) time and O(1) space\n    if len(list1) <= 1:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #Test Cases\n    testcase1 = [4,5,3]\n    testcase2 = [3,2,4]\n    testcase3 = []\n    testcase4 = [1,3,5]\n    testcase5 = [4,5,1]\n    testcase6 = [1,3,5,2,4]\n    \n    #Actual logic\n    if sorted(list1) == list1:\n        print(\"The list is sorted.\")\n    else:\n        print(\"The list is not sorted.\")\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Your code here\n    l=len(list1)\n    for i in range(l):\n        if(i+1!=l):\n            if(list1[i]>list1[i+1]):\n                return False\n            else:\n                continue\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i]<list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    dummy = {}\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dummy)\n        \n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    list_of_dictionaries = []\n    for i in range(length):\n        list_of_dictionaries.append({})\n        \n    return list_of_dictionaries\n    \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n    \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_list = []\n    for sub_list in list1:\n        sub_list.sort()\n    print(sub_list)\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[0])\n    #x[0] is the element at index 0\n    #x[1] is the element at index 1\n    #x[2] is the element at index 2\n    #x[3] is the element at index 3\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(sorted(i))\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Take a list of lists. Sort each list of strings in the list.\n    #\n    # Input: [['a', 'b', 'c', 'd'], ['1', '2', '3', '4'], ['aa', 'bb', 'cc', 'dd']]\n    # Output: [['aa', 'bb', 'cc', 'dd'], ['1', '2', '3', '4'], ['a', 'b', 'c', 'd']]\n    #\n    # Input: [['a', 'b', 'c', 'd'], ['1', '2', '3', '4'], ['aa', 'bb', 'cc', 'dd']]\n    # Output: [['a', 'aa', 'bb', 'cc'], ['b', '1', '2', '3'], ['d', '4', '3', '2'], ['c', 'd', '1', '2']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    sublist_count = 0\n    for i in range(len(list1)):\n        if sublist_count == len(list1[i]):\n            new_list.append(list1[i])\n            sublist_count = 0\n        else:\n            sublist_count += 1\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(lst):\n        '''\n        This function sorts each sublist in the list of lists, lst.\n        '''\n        def sort_sublist_helper(lst):\n            '''\n            Helper function to sort each sublist.\n            '''\n            if not lst:\n                return []\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n = len(list1)\n    for i in range(0, n-1):\n        j = i+1\n        while j < n:\n            if len(list1[i]) > len(list1[j]):\n                temp = list1[i]\n                list1[i] = list1[j]\n                list1[j] = temp\n            j+=1\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        for i in range(len(list1)):\n            if isinstance(list1[i],list) == True:\n                list1[i] = sort_sublists(list1[i])\n        return list(chain.from_iterable(list1))\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n        print(i)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result_list = []\n    for item in nums:\n        if item not in result_list:\n            result_list.append(item)\n    return result_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    from collections import Counter\n    nums_set = set(nums)\n    for num in nums_set:\n        print(num, end=' ')\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #check if length of lists is the same\n    if len(nums)!= len(set(nums)):\n        return \"lists are not of the same length\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    output = []\n    for num in nums:\n        if num not in output:\n            output.append(num)\n    return output\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    nums_list = []\n    for num in nums:\n        nums_set.add(num)\n        nums_list.append(num)\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(len(nums)):\n        nums[i].sort()\n        for j in range(len(nums[i])):\n            if j == 0:\n                continue\n            elif nums[i][j]!= nums[i][j-1]:\n                nums[i].remove(nums[i][j-1])\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(nums)\n    nums.sort()\n    for i in range(1,len(nums)):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n    return(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return len(set(nums)) == len(nums)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    set_data= set(list_data)\n    # print(set_data)\n    return 1 if set_data == set([]) else reduce(lambda x, y: x * y, set_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    count = {}\n    for x in list_data:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n    res = 1\n    for k, v in count.items():\n        res *= k ** v\n    return res\n    \n    \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for i in range(len(list_data)):\n        if list_data.count(list_data[i]) == 1:\n            return list_data[i] * list_data.count(list_data[i])\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # list_data = list(map(int, input(\"Enter the numbers: \").split()))\n    # unique_list = []\n    # for i in range(len(list_data)):\n    #     if list_data[i] not in unique_list:\n    #         unique_list.append(list_data[i])\n    # print(unique_list)\n    # product = 1\n    # for i in range(len(unique_list)):\n    #     product = product*unique_list[i]\n    # return product\n    \n    # Code with dict\n    # d = dict()\n    # for i in range(len(list_data)):\n    #     if list_data[i] not in d:\n    #         d[list_data[i]] = 1\n    #     else:\n    #         d[list_data[i]] += 1\n    # for i in d:\n    #     d[i] = d[i]*d[i]\n    # return d\n    \n    # Code without dict\n    # unique_list = []\n    # for i in range(len(list_data)):\n    #     if list_data[i] not in unique_list:\n    #         unique_list.append(list_data[i])\n    # product = 1\n    # for i in range(len(unique_list)):\n    #     product = product*unique_list[i]\n    # return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    l =[]\n    for i in range(len(list_data)):\n        if list_data[i] not in l:\n            l.append(list_data[i])\n    return l\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print('Calculating product of unique numbers in a given list')\n    lst = []\n    for i in list_data:\n        if i in lst:\n            continue\n        else:\n            lst.append(i)\n    prod = 1\n    for i in lst:\n        prod = prod * i\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_product = 1\n    for i in list_data:\n        if list_data.count(i) == 1:\n            list_product = list_product * i\n    print(list_product)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return 1 if len(list_data) == 0 else 1*(reduce(lambda x,y: x*y, set(list_data)))\nprint(unique_product([1,2,3,4,5,6,1,2,3]))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_of_data = list_data\n    list_of_data.sort()\n    unique_list = []\n    unique_list.append(list_of_data[0])\n    for i in range(1, len(list_of_data)):\n        if list_of_data[i] == list_of_data[i-1]:\n            unique_list.append(list_of_data[i])\n    return (product(unique_list))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    my_set = set()\n    for i in list_data:\n        my_set.add(i)\n    print(f\"The product of the unique numbers in the list is {my_set}\")\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r>=0 and h>=0:\n        return 2*pi*r*h + 2*pi*r*2*h\n    else:\n        return 'Error: r and h should be non-negative'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * (r**2 + h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # r is radius\n    # h is height\n    s = 2 * 3.14 * (r * r + h * h)\n    s = round(s, 3)\n    return s\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi,sqrt,pow\n    # Create variable to store the surface area\n    area = pi*r*r\n    # Define function to find the surface area of the cylinder\n    def surfacearea_cylinder(r,h):\n        '''\n        Write a function to find the surface area of a cylinder.\n        '''\n        from math import pi,sqrt,pow\n        # Define variable to store the surface area\n        area = pi*r*r\n        # Define function to find the surface area of the cylinder\n        def surfacearea_cylinder(r,h):\n            '''\n            Write a function to find the surface area of a cylinder.\n            '''\n            from math import pi,sqrt,pow\n            # Define variable to store the surface area\n            area = pi*r*r\n            # Define function to find the surface area of the cylinder\n            def surfacearea_cylinder(r,h):\n                '''\n                Write a function to find the surface area of a cylinder.\n                '''\n                from math import pi,sqrt,pow\n                # Define variable to store the surface area\n                area = pi*r*r\n                # Define function to find the surface area of the cylinder\n                def surfacearea_cylinder(r,h):\n                    '''\n                    Write a function to find the surface area of a cylinder.\n                    '''\n                    from math import pi,sqrt,pow\n                    # Define variable to store the surface area\n                    area = pi*r*r\n                    # Define function to find the surface area of the cylinder\n                    def surfacearea_cylinder(r,h):\n                        '''\n                        Write a function to find the surface area of a cylinder.\n                        '''\n                        from math import pi,sqrt,pow\n                        # Define variable to store the surface area\n                        area = pi*r*r\n                        # Define function to find the surface area of the cylinder\n                        def surfacearea_cylinder(r,h):\n                            '''\n                            Write a function to find the surface area of a cylinder.\n                            '''\n                            from math import pi,sqrt,pow\n                            # Define variable to store the surface area\n                            area = pi*r*r\n                            # Define function to find the surface area of the cylinder\n                            def surfacearea_cylinder(r,h):\n                                '''\n                                Write a function to find the surface area of a cylinder.\n                                '''\n                                from math import pi,sqrt,pow\n                                # Define variable to store the surface area\n                                area = pi*r*r\n                                # Define function to find the surface area of the cylinder\n                                def surfacearea_cylinder(r,h):\n                                    '''\n                                    Write a function to find the surface area of a cylinder.\n                                    '''\n                                    from math import pi,sqrt,pow\n                                    # Define variable to store the surface area\n                                    area = pi*r*r\n                                    # Define function to find the surface area of the cylinder\n                                    def surfacearea_cylinder(r,h):\n                                        '''\n                                        Write a function to find the surface area of a cylinder.\n                                        '''\n                                        from math import pi,sqrt,pow\n                                        # Define variable to store the surface area\n                                        area = pi*r*r\n                                        # Define function to find the surface area of the cylinder\n                                        def surfacearea_cylinder(r,h):\n                                            '''\n                                            Write a function to find the surface area of a cylinder.\n                                            '''\n                                            from math import pi,sqrt,pow\n                                            # Define variable to store the surface area\n                                            area = pi*r*r\n                                            # Define function to find the surface area of the cylinder\n                                            def surfacearea_cylinder(r,h):\n                                                '''\n                                                Write a function to find the surface area of a cylinder.\n                                                '''\n                                                from math import pi,sqrt,pow\n                                                # Define variable to store the surface area\n                                                area = pi*r*r\n                                                # Define function to find the surface area of the cylinder\n                                                def surfacearea_cylinder(r,h):\n                                                    '''\n                                                    Write a function to find the surface area of a cylinder.\n                                                    '''\n                                                    from math import pi,sqrt,pow\n                                                    # Define variable to store the surface area\n                                                    area = pi*r*r\n                                                    # Define function to find the surface area of the cylinder\n                                                    def surfacearea_cylinder(r,h):\n                                                        '''\n                                                        Write a function to find the surface area of a cylinder.\n                                                        '''\n                                                        from math import pi,sqrt,pow\n                                                        # Define variable to store the surface area\n                                                        area = pi*r*r\n                                                        # Define function to find the surface area of the cylinder\n                                                        def surfacearea_cylinder(r,h):\n                                                            '''\n                                                            Write a function to find the surface area of a cylinder.\n                                                            '''\n                                                            from math import pi,sqrt,pow\n                                                            # Define variable to store the surface area\n                                                            area = pi*r*r\n                                                            # Define function to find the surface area of the cylinder\n                                                            def surfacearea_cylinder(r,h):\n                                                                '''\n                                                                Write a function to find the surface area of a cylinder.\n                                                                '''\n                                                                from math import pi,sqrt,pow\n                                                                # Define variable to store the surface area\n                                                                area = pi*r*r\n                                                                # Define function to find the surface area of the cylinder\n                                                                def surfacearea_cylinder(r,h):\n                                                                    '''\n                                                                    Write a function to find the surface area of a cylinder.\n                                                                    '''\n                                                                    from math import pi,sqrt,pow\n                                                                    # Define variable to store the surface area\n                                                                    area = pi*r*r\n                                                                    # Define function to find the surface area of the cylinder\n                                                                    def surfacearea_cylinder(r,h):\n                                                                        '''\n                                                                        Write a function to find the surface area of a cylinder.\n                                                                        '''\n                                                                        from math import pi,sqrt,pow\n                                                                        # Define variable to store the surface area\n                                                                        area = pi*r*r\n                                                                        # Define function to find the surface area of the cylinder\n                                                                        def surfacearea_cylinder(r,h):\n                                                                        '''\n                                                                        Write a function to find the surface area of a cylinder.\n                                                                        '''\n                                                                        from math import pi,sqrt,pow\n                                                                        # Define variable to store the surface area\n                                                                        area = pi*r*r\n                                                                        # Define function to find the surface area of the cylinder\n                                                                        def surfacearea_cylinder(r,h):\n                                                                            '''\n                                                                            Write a function to find the surface area of a cylinder.\n                                                                            '''\n                                                                            from math import pi,sqrt,pow\n                                                                            # Define variable to store the surface area\n                                                                            area = pi*r*r\n                                                                            # Define function to find the surface area of the cylinder\n                                                                            def surfacearea_cylinder(r,h):\n                                                                                '''\n                                                                                Write a function to find the surface area of a cylinder.\n                                                                                '''\n                                                                                from math import pi,sqrt,pow\n                                                                                # Define variable to store the surface area\n                                                                                area = pi*r*r\n                                                                                # Define function to find the surface area of the cylinder\n                                                                                def surfacearea_cylinder(r,h):\n                                                                                    '''\n                                                                                    Write a function to find the surface area of a cylinder.\n                                                                                    '''\n                                                                                    from math import pi,sqrt,pow\n                                                                                    # Define variable to store the surface area\n                                                                                    area = pi*r*r\n                                                                                    # Define function to find the surface area of the cylinder\n                                                                                    def surfacearea_cylinder(r,h):\n                                                                                        '''\n                                                                                        Write a function t"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14159265\n    return (2*pi*r*h+2*pi*r*2*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14\n    surfacearea=pi*(r**2)*(h)\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    pi3 = pi/3\n    return pi3*r**2*h + 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*3.14*r*h)+(2*3.14*r)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    lst_len = len(B)\n    for i in range(0,len(A)):\n        for j in range(0,lst_len):\n            if A[i] == B[j]:\n                break\n        if j==lst_len-1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(i in A for i in B)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if (B[i] in A) == False:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = 0\n    length = len(A)\n    if length <= len(B):\n        for i in range(length):\n            if A[i]!= B[i]:\n                flag = 1\n                break\n        return flag\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        sub_list = []\n        for j in range(len(A)):\n            sub_list.append(A[i:j+1])\n        if B in sub_list:\n            print(\"True\")\n            break\n    else:\n        print(\"False\")\n        "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    if len(A) == len(B) and A == B:\n        return True\n    else:\n        i = 0\n        while i < len(A):\n            if i >= len(B):\n                return False\n            else:\n                if A[i] == B[i]:\n                    i += 1\n                else:\n                    i += 1\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # if len(A) > len(B):\n    #     return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    while i<len(A):\n        for j in range(i,len(B)):\n            if A[i]==B[j]:\n                i+=1\n                break\n    if i==len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    lst1=list(A)\n    for i in lst1:\n        if i in B:\n            flag=1\n    if flag==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        raise ValueError(\"n must be positive\")\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact*i\n    return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = abs(int(n))\n    if n == 0: \n        return 1\n    else:\n        return (n % 10) * last_Digit_Factorial(int(n / 10)) \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num = 1\n    for i in range(1,n+1):\n        num = num*i\n    return num%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 0\n    while n//(10**i) >= 1:\n        i += 1\n    return i\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial(n-1))\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (last_Digit_Factorial("
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        print(\"invalid input\")\n        return\n    else:\n        i = 1\n        while i <= n:\n            i = i*10\n        return i/10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    last = fact % 10\n    return last\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial_Digit = 1\n    while(n >= 1):\n        factorial_Digit *= n\n        n -= 1\n    return(factorial_Digit % 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n < 0: \n        raise ValueError('Factorial can not be negative') \n    if n == 0: \n        return 1\n    else: \n        return n % 10 * last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    if n<0:\n        return -1\n    num=1\n    for i in range(1,n+1):\n        num*=i\n    return num%10"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n        list3.append(list3[i])\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [[list1[i], list2[i], list3[i]] for i in range(0, len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result += list1[i]\n        result += list2[i]\n        result += list3[i]\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1+list2+list3\n    \ndef interleave_dict(list1,list2,list3):\n    '''\n    Write a function to interleave 3 dictionaries of the same length into a single flat\n    dictionary.\n    '''\n    d = {}\n    for i in list1:\n        d.update({i:list1[i]})\n    for i in list2:\n        d.update({i:list2[i]})\n    for i in list3:\n        d.update({i:list3[i]})\n    return d\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert len(list1) == len(list2) and len(list1) == len(list3), 'One of the lists is not the same length as the other.'\n    x = 0\n    y = 0\n    z = 0\n    result = []\n    while(x < len(list1)):\n        result.append(list1[x])\n        result.append(list2[y])\n        result.append(list3[z])\n        x += 1\n        y += 1\n        z += 1\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # if length of both lists are not equal, throw an error\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"Error: the lists are of different length\")\n        return\n    # create empty list\n    new_list = []\n    # interleave using the length of the lists\n    for i in range(0,len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    for i in range(len(list1)):\n        final_list.append(list1[i])\n        final_list.append(list2[i])\n        final_list.append(list3[i])\n    return final_list\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diss_el = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diss_el.append(test_tup1[i])\n    return diss_el\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in range(0, len(test_tup1)):\n        if test_tup1[element]!= test_tup2[element]:\n            dissimilar_elements.append(test_tup1[element])\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n    return dissimilar_set\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code here\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    test_tup1.sort()\n    test_tup2.sort()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return test_tup1[i]\n    return -1\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    print(test_tup1, test_tup2)\n    return (test_tup1[i] for i in range(len(test_tup1)) if test_tup1[i]!= test_tup2[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        print(\"Both the tuples are empty\")\n    else:\n        list1 = list(test_tup1)\n        list2 = list(test_tup2)\n        set1 = set(list1)\n        set2 = set(list2)\n        dissimilar = set1.difference(set2)\n        print(dissimilar)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set_one = set()\n    set_two = set()\n    for i in range(0, len(test_tup1)):\n        set_one.add(test_tup1[i])\n    for i in range(0, len(test_tup2)):\n        set_two.add(test_tup2[i])\n    return set_one - set_two\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return (list(set(test_tup1) & set(test_tup2)))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            res.append(test_tup1[i])\n    return res\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(0, len(test_tuple)):\n        if type(test_tuple[i])!= tuple:\n            if test_tuple[i] % 2 == 0:\n                test_tuple[i] = even_fnc(test_tuple[i])\n        else:\n            even_ele(test_tuple[i], even_fnc)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for n,element in enumerate(test_tuple):\n        if isinstance(element,tuple) or isinstance(element,list):\n            if len(element) % 2!= 0:\n                test_tuple[n] = even_ele(element, even_fnc)\n        else:\n            if even_fnc(element):\n                test_tuple[n] = even_fnc(element)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: x%2==0, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple((even_fnc(i) for i in test_tuple))\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def fun(test_tuple):\n        return tuple([even_fnc(i) if i%2==0 else i for i in test_tuple])\n    return fun(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    new_list2 = []\n    for i in test_tuple:\n        if even_fnc(i) == True:\n            new_list.append(i)\n        elif even_fnc(i) == False:\n            new_list2.append(i)\n    test_tuple = tuple(new_list + new_list2)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_ele(i, even_fnc)\n        else:\n            if i % 2 == 0:\n                even_fnc(i)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    i = 0\n    for j in range(len(test_tuple)): \n        if test_tuple[j] % 2 == 0:\n            test_tuple[j] = even_fnc(test_tuple[j])\n        else:\n            test_tuple[j] = even_fnc(test_tuple[j])\n            \n    return test_tuple \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    S = (b * s) / 2\n    print(\"Surface Area of the square pyramid is \",S) \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b*s*s)/2\n    return surface_area\n    \n    \n    \n    \n    \ndef rectangle_Area(w,l):\n    '''\n    Write a python function to find the area of a rectangle with a given length and width.\n    '''\n    area = w * l\n    return area\n    \n    \ndef Square(a):\n    '''\n    Write a python function to find the area of a square with the length and width equal to a given number.\n    '''\n    area = a**2\n    return area\n    \n    \ndef Triangle(a,h):\n    '''\n    Write a python function to find the area of a triangle with a given base and height.\n    '''\n    area = 0.5 * a * h\n    return area\n    \n    \n    \n    \ndef circle_Area(radius):\n    '''\n    Write a python function to find the area of a circle with a given radius.\n    '''\n    area = 3.14 * radius**2\n    return area\n    \n    \n    \n    \ndef polygon_Area(n,radius):\n    '''\n    Write a python function to find the area of a polygon with n vertices and radius.\n    '''\n    area = (n*radius**2)/(4*3.14)\n    return area\n    \n    \n    \n    \ndef largest_digit(number):\n    '''\n    Write a python function to find the largest digit of an integer.\n    '''\n    largest_digit = max(str(number))\n    return largest_digit\n    \n    \n    \n    \ndef sum_digits(number):\n    '''\n    Write a python function to sum the digits of a given integer.\n    '''\n    sum_digits = sum(list(map(int,str(number))))\n    return sum_digits\n    \n    \n    \n    \ndef avg_digits(number):\n    '''\n    Write a python function to find the average of the digits of an integer.\n    '''\n    avg_digits = sum_digits(number)/len(str(number))\n    return avg_digits\n    \n    \n    \ndef game_master(word):\n    '''\n    Write a python function to play the game \"Guess The Word\", using the given word and the user's guess.\n    '''\n    guess = input('Please enter your guess: ')\n    guess_bool = False\n    if guess == word:\n        guess_bool = True\n    return guess_bool\n    \n    \n    \n    \n    \ndef checksum(text):\n    '''\n    Write a python function to calculate the checksum of a given string.\n    '''\n    count = 0\n    for char in text:\n        if char.isupper():\n            count += 1\n    return count\n    \n    \n    \n    \ndef encrypt_message(plain_text, shift_no):\n    '''\n    Write a python function to encrypt the given string using the Caesar Cipher.\n    '''\n    encrypt = []\n    for letter in plain_text:\n        if letter.isalpha():\n            if letter.isupper():\n                num = ord(letter) - ord('A') + shift_no\n                if num > ord('Z'):\n                    num = num - ord('Z') + ord('A') - 1\n                encrypt.append(chr(num))\n            else:\n                num = ord(letter) - ord('a') + shift_no\n                if num > ord('z'):\n                    num = num - ord('z') + ord('a') - 1\n                encrypt.append(chr(num))\n        else:\n            encrypt.append(letter)\n    return ''.join(encrypt)\n    \n    \n    \n    \ndef decrypt_message(cipher_text, shift_no):\n    '''\n    Write a python function to decrypt the given string using the Caesar Cipher.\n    '''\n    decrypt = []\n    for letter in cipher_text:\n        if letter.isalpha():\n            if letter.isupper():\n                num = ord(letter) - ord('A') - shift_no\n                if num < ord('A'):\n                    num = num + ord('Z') - ord('A') + 1\n                decrypt.append(chr(num))\n            else:\n                num = ord(letter) - ord('a') - shift_no\n                if num < ord('a'):\n                    num = num + ord('z') - ord('a') + 1\n                decrypt.append(chr(num))\n        else:\n            decrypt.append(letter)\n    return ''.join(decrypt)\n    \n    \n    \n    \ndef is_palindrome(text):\n    '''\n    Write a python function to find whether a string is a palindrome or not.\n    '''\n    text_list = list(text)\n    reversed_text_list = list(text_list)\n    reversed_text_list.reverse()\n    if reversed_text_list == text_list:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether a given number is a prime or not.\n    '''\n    is_prime = False\n    if num > 1:\n        for i in range(2,num):\n            if num % i == 0:\n                is_prime = False\n                break\n            else:\n                is_prime = True\n    else:\n        is_prime = False\n    return is_prime\n    \n    \n    \n    \ndef is_prime_v2(num):\n    '''\n    Write a python function to check whether a given number is a prime or not.\n    '''\n    is_prime = True\n    if num > 1:\n        for i in range(2,num):\n            if num % i == 0:\n                is_prime = False\n                break\n    else:\n        is_prime = False\n    return is_prime\n    \n    \n    \n    \ndef is_prime_v3(num):\n    '''\n    Write a python function to check whether a given number is a prime or not.\n    '''\n    is_prime = True\n    if num > 1:\n        for i in range(2,num):\n            if num % i == 0:\n                is_prime = False\n                break\n        else:\n            is_prime = True\n    else:\n        is_prime = False\n    return is_prime\n    \n    \n    \n    \ndef get_len_str(string):\n    '''\n    Write a python function to count the length of a given string.\n    '''\n    len_str = len(string)\n    return len_str\n    \n    \n    \ndef factorial(num):\n    '''\n    Write a python function to find the factorial of a given integer.\n    '''\n    factorial = 1\n    if num > 0:\n        for i in range(1,num+1):\n            factorial = factorial*i\n    else:\n        factorial = 1\n    return factorial\n    \n    \n    \ndef find_factors(num):\n    '''\n    Write a python function to find the factors of a given integer.\n    '''\n    factors = []\n    for i in range(1,num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n    \n    \n    \ndef is_divisible_by_n(num,n):\n    '''\n    Write a python function to find whether a number is divisible by a given number.\n    '''\n    is_divisible = False\n    if num % n == 0:\n        is_divisible = True\n    else:\n        is_divisible = False\n    return is_divisible\n    \n    \n    \ndef is_divisible_by_n_v2(num,n):\n    '''\n    Write a python function to find whether a number is divisible by a given number.\n    '''\n    is_divisible = False\n    if num % n == 0:\n        is_divisible = True\n    else:\n        is_divisible = False\n    return is_divisible\n    \n    \n    \n    \ndef is_divisible_by_n_v3(num,n):\n    '''\n    Write a python function to find whether a number is divisible by a given number.\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Base of the square pyramid\n    l = b*s\n    #Calculating surface area of square pyramid\n    a = b*(b+s)\n    return a + l*2\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = b*s\n    print('\\n\\tSurface Area of the Pyramid\\n')\n    print('Base edge : ',b)\n    print('Height : ',s)\n    print('Surface area : ',s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (1/2)*b*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b+s)*(s+b) + 2*(s**2) + 2*(s*b)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #h = float(input('Enter the height of the square pyramid:'))\n    #b = float(input('Enter the base edge of the square pyramid:'))\n    h = 5\n    b = 5\n    area = h*b*2\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = (b * s) / 2.0\n    print(A)\ndef cv_caller(name):\n    '''\n    Write a python function to find the perimeter of a triangle with a given base length,\n    base length, and a given height.\n    '''\n    base_length = int(input(\"Enter the base length: \"))\n    base_length2 = int(input(\"Enter the base length again: \"))\n    height = int(input(\"Enter the height: \"))\n    perimeter = base_length+base_length2+height\n    print(perimeter)\n    def cv_function(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        width = int(input(\"Enter the width: \"))\n        length = int(input(\"Enter the length: \"))\n        area = length * width\n        print(area)\n    def triangle(name):\n        '''\n        Write a python function to find the area of a triangle with a given base length and\n        the height.\n        '''\n        base_length = int(input(\"Enter the base length: \"))\n        height = int(input(\"Enter the height: \"))\n        area = 0.5 * base_length * height\n        print(area)\n    def calcs(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = length * width\n        print(area)\n    def pythag(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width)/2\n        print(area)\n    def hypotenuse(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = length * width\n        print(area)\n    def side_area(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = length * width\n        print(area)\n    def slope_area(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = length * width\n        print(area)\n    def right(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def right_triangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def right_triangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_triangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area = (length * width) / 2\n        print(area)\n    def area_rectangle(name):\n        '''\n        Write a python function to find the area of a rectangle with a given length and width.\n        '''\n        length = int(input(\"Enter the length: \"))\n        width = int(input(\"Enter the width: \"))\n        area "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Input/Ouput Format:\n    # Input:\n    # Base edge: 5\n    # Height: 6\n    # Output:\n    # Surface area = 40.0\n    # \n    # Input:\n    # Base edge: 15\n    # Height: 10\n    # Output:\n    # Surface area = 990.0\n    # \n    # Input:\n    # Base edge: 2\n    # Height: 7\n    # Output:\n    # Surface area = 772.0\n    # \n    # Input:\n    # Base edge: 1\n    # Height: 10\n    # Output:\n    # Surface area = 0.0\n    \n    \n    \n    # Base edge(b) > height(s)\n    if b>s:\n        A = b*s\n        return A\n    \n    \n    # Base edge(b) <= height(s)\n    if b<=s:\n        A = s*s\n        return A\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = (b**2)*math.sqrt(3)/4\n    return s\n'''\nc = surface_Area(10,12)\nprint(c)\n'''\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \nprint(my_dict(dict1)"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('true')\n    else:\n        print('false')\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('The dictionary is empty')\n    else:\n        print('The dictionary is not empty')\n    \nmy_dict({})\nmy_dict({1:1})\nmy_dict({1:1,2:2,3:3,4:4})\nmy_dict({1:1,2:2,3:3})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    my_dict = {}\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n    \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    empty = True\n    if len(dict1) == 0:\n        empty = False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    x = 0\n    for i in range(num):\n        x += (1/(i+1))*(2**i)\n    return x"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num==1:\n        return 1\n    if num==2:\n        return 2\n    catalan_num = 0\n    for i in range(1,num):\n        catalan_num+=factorial(2*i)//(factorial(i)*factorial(i+1))\n    return catalan_num\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    catalan = [0 for i in range(num + 1)]\n    catalan[1] = 1\n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    catal = 0\n    for i in range(1,num+1):\n        catal += i * catalan_number(num - i)\n    return catal\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #return n*(n-1)*catalan_number(n-1)/2\n    n = 0\n    ans = 1\n    while n < num:\n        ans = ans*(n+1)*(n+2)/2\n        n+=1\n    return ans\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = [0]*num\n    result[0]=1\n    for i in range(1,num):\n        for j in range(i,0,-1):\n            result[j] = result[j-1]*(i-j+1)\n    return result[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_number_array = []\n    for i in range(0, num+1):\n        catalan_number_array.append([])\n        for j in range(0, num+1):\n            catalan_number_array[i].append(0)\n    for i in range(0, num+1):\n        catalan_number_array[0][i] = 1\n    for i in range(1, num+1):\n        for j in range(1, i+1):\n            catalan_number_array[i][j] = catalan_number_array[i-1][j-1] + catalan_number_array[i-1][j]\n    return catalan_number_array[num][num]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    \n    catalan = 0\n    i = 1\n    while i <= num:\n        j = num\n        k = 0\n        while j > 0:\n            k += catalan\n            j -= 1\n        catalan = k\n        i += 1\n    return catalan\n    \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    catalan_nums = []\n    \n    for i in range(1, num + 1):\n        catalan_nums.append((catalan_number(i-1))*(catalan_number(i)))\n    \n    return catalan_nums[num-1]\n    \n    \nprint(catalan_number(4))"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    result = 0\n    for i in range(0, num + 1):\n        result += math.factorial(2*i)//(math.factorial(i)*math.factorial(i+1))\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    return re.findall('ly([^ ]+)',text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_pattern = re.compile('[ly]$')\n    adverbs = []\n    for i, word in enumerate(text.split()):\n        if re.search(ly_pattern, word):\n            adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    return re.findall(r'(?<=ly )\\w+',text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    text = text.lower()\n    for i in range(len(text)-1):\n        if text[i:i+4] == 'ly':\n            adverbs.append(text[i:i+4])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\s[ly]\\s', text)\n    print(adverbs)\n    # YOUR CODE HERE\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    words = text.split()\n    for word in words:\n        if word.endswith('ly'):\n            result.append((word,len(word)))\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    positions = []\n    for i in range(0,len(text)):\n        if text[i] == 'ly' and text[i-1] =='':\n            positions.append(i)\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    line_list = text.split('\\n')\n    ad_list = []\n    for i in range(len(line_list)):\n        text = line_list[i]\n        line_list[i] = line_list[i].strip()\n        for j in range(len(line_list[i])):\n            if line_list[i][j] == 'ly':\n                ad_list.append(line_list[i][j-1:j+1])\n    return ad_list\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r'([A-Z].+ly)'\n    pos = re.finditer(regex,text)\n    return pos\n    \n    "
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.search(r'ly|very', text)\n    if match is not None:\n        print(match.group())\n        # print(match.start())\n        # print(match.end())\n        # print(match.span())\n    # print(\"\\n\")\n    return match\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n=n\n    elem=[]\n    for i in items:\n        elem.append((i,items[i]))\n    \n    elem.sort(key=lambda x: x[1])\n    return elem[:n]\n    \n    \n    \ndef read_file(file):\n    '''\n    Write a function to read the contents of a text file.\n    '''\n    data=[]\n    with open(file) as f:\n        lines=f.readlines()\n        for line in lines:\n            data.append(int(line.strip()))\n    return data\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    expensive = []\n    c = 0\n    for i in items:\n        c+=i\n        if c>=n:\n            break\n        expensive.append(i)\n    return expensive\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    #initialize heap and store the items in it\n    expensive_items_heap = []\n    \n    for i in range(len(items)):\n        expensive_items_heap.append((items[i],i))\n    \n    \n    \n    #pop the item with the minimum price and add it to the result array\n    result = []\n    for i in range(n):\n        item = expensive_items_heap.pop(0)\n        result.append(item[1])\n        expensive_items_heap.append(item)\n        \n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    expensive_items = []\n    while items:\n        heapq.heapify(expensive_items)\n        heapq.heappush(expensive_items,(-items[0][1],items[0][0]))\n        if len(expensive_items) > n:\n            heapq.heappop(expensive_items)\n        items = items[1:]\n    expensive_items = sorted(expensive_items,reverse=True)\n    return expensive_items\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    d = {}\n    for item in items:\n        if item[1] not in d.keys():\n            d[item[1]] = 0\n        d[item[1]] += item[0]\n    return heapq.nlargest(n,d.items(),key=lambda x:x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    temp = []\n    for item in items:\n        if item[2] > n:\n            temp.append(item)\n    temp = sorted(temp, key=lambda x: x[2], reverse=True)\n    return temp\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for x in items:\n        if len(heap)<n:\n            heapq.heappush(heap,-x)\n        else:\n            if x>heap[0]:\n                heapq.heapreplace(heap, -x)\n    return heap\nprint(expensive_items([1,5,3,10,2,1,1],2)"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    pq = []\n    for i in items:\n        heapq.heappush(pq, i[1])\n        if len(pq) > n:\n            heapq.heappop(pq)\n    return [i[0] for i in pq]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_tuples = []\n    for item in items:\n        items_tuples.append((item, items[item]))\n    heapq.heapify(items_tuples)\n    return heapq.nlargest(n,items_tuples)\n    \nprint(expensive_items({'a': 2, 'b': 3, 'c': 4, 'd': 5, 'e': 2, 'f': 1, 'g': 1}, 2))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_frequencies = {}\n    for item in items:\n        if item in item_frequencies:\n            item_frequencies[item] += 1\n        else:\n            item_frequencies[item] = 1\n    \n    sorted_item_frequencies = sorted(item_frequencies.items(), key = lambda kv: kv[1], reverse = True)\n    print(sorted_item_frequencies[:n])\n    "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first, *rest, last = l\n    return [first] + rest[:n] + rest[n + 1:] + [last]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if(len(l)%n==0):\n        n=n\n    else:\n        n=n-len(l)%n\n    l1 = l[:n]\n    l2 = l[n:]\n    l = l1 + l2\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return (l[:n]+l[n+1:])\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    return a + b\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return l\n    start = 0\n    end = len(l) - 1\n    while start <= end:\n        mid = start + (end - start)//2\n        if l[mid] < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return l[:start] + l[start:start+1] + l[start:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # l = [1,2,3,4,5,6,7,8,9]\n    # n = 4\n    # return l[n:] + l[:n]\n    # return [l[i:i+n] for i in range(0, len(l), n)]\n    return l[n:] + l[:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    result = []\n    for i in range(len(l)):\n        if i!= n:\n            result.append(l[i])\n    result.append(l[n])\n    return result\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = []\n    for i in range(0,len(l)):\n        if i == n:\n            x = x + l[:n]\n            x.append(l[n])\n        else:\n            x = x + l[i]\n    return x\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 0 or n == 0:\n        return []\n    if n >= len(l):\n        return l\n    return [l[0]] + split_Arr(l[1:], n)\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l)%n == 0:\n        n = len(l)//n\n    else:\n        n = len(l)//n+1\n    split_Arr = []\n    for i in range(len(l)-n+1):\n        split_Arr.append(l[i:i+n])\n    return split_Arr\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(\"Input:\", listx)\n    tuplex = tuple(listx)\n    print(\"Output:\", tuplex)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple1 = tuple(listx)\n    return tuple1\nprint(list_tuple(['a', 'b', 'c']))\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = nums[0]\n    small = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > big:\n            big = nums[i]\n        if nums[i] < small:\n            small = nums[i]\n    return small - big\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    s_low = None\n    s_high = None\n    for i in nums:\n        if s_low == None or i < s_low:\n            s_low = i\n        elif s_high == None or i > s_high:\n            s_high = i\n    return s_high - s_low\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = len(nums)\n    max_num = nums[0]\n    min_num = nums[0]\n    for i in range(l):\n        if max_num < nums[i]:\n            max_num = nums[i]\n        if min_num > nums[i]:\n            min_num = nums[i]\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for i in nums:\n        if i > largest:\n            largest = i\n        elif i < smallest:\n            smallest = i\n    return abs(largest - smallest)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 0:\n        maxi = max(nums)\n        mini = min(nums)\n        diff = maxi - mini\n    else:\n        diff = 0\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    biggest = nums[0]\n    smallest = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > biggest:\n            biggest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return biggest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    for i in range(a, b+1):\n        square = i**2\n        if square > b:\n            break\n        if square == b:\n            print(i)\n            break\ndef is_prime(num):\n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\ndef sub_sets(list):\n    '''\n    Write a function that takes in a non-empty array and returns an array of all possible sub-arrays.\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return sum([i for i in range(a,b+1) if i**0.5==int(i**0.5)])\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(a, b+1) if i**2 == i]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # let x be the largest perfect square and\n    # y be the smallest perfect square.\n    #   y = (a + b) // 2\n    # x = y + 1\n    x = (a+b) // 2\n    y = x + 1\n    while x*x <= b:\n        if x*x == b:\n            return x\n        x += 1\n    while y*y <= a:\n        if y*y == a:\n            return y\n        y += 1\n    return None\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # x = int(input(\"Please enter the lower bound:\"))\n    # y = int(input(\"Please enter the upper bound:\"))\n    for n in range(a, b+1):\n        if n**2 == a:\n            print(\"The perfect square is: {}\".format(n))\n            break\n        elif n**2 > a and n**2 < b:\n            print(\"The perfect square is: {}\".format(n))\n            break\n        elif n**2 > b:\n            continue\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = b - a\n    for i in range(int(math.sqrt(n))):\n        if i ** 2 == n:\n            print(a + i)\n            break\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**2 == a**2 + b**2:\n            squares.append(num)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    ans = []\n    for i in range(a, b+1):\n        if int(math.sqrt(i))**2 == i:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    while a <= b:\n        if a ** 2 == a:\n            res.append(a)\n        a += 1\n    return res\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return (a ** 2 == b) or (b ** 2 == a)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if type(x)==complex:\n        r = x.real\n        theta = x.imag\n        print(r)\n        print(theta)\n    else:\n        r = float(x)\n        theta = float(y)\n        print(r)\n        print(theta)\n    print(\"The polar coordiantes are : \",r,\" and \",theta)\n    r = abs(r)\n    theta = cmath.phase(r)\n    print(r,\" and \",theta)\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    print(\"the x coordinate is \",x)\n    print(\"the y coordinate is \",y)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*x+y*y, x, y\ndef polar_rect_ar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x, y\ndef rect_polar(r, x, y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r*r+x*x+y*y, x, y\ndef rect_polar_ar(r, x, y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r, x, y\ndef polar_rect_circle(x,y,r):\n    '''\n    Write a function to convert polar coordinates to circle coordinates.\n    '''\n    return x+r, y+r, x-r, y-r\ndef polar_rect_circle_ar(x,y,r):\n    '''\n    Write a function to convert polar coordinates to circle coordinates.\n    '''\n    return x, y, x+r, y+r, x-r, y-r\ndef rect_polar_circle(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to circle coordinates.\n    '''\n    return x-r, y-r, x+r, y+r\ndef rect_polar_circle_ar(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to circle coordinates.\n    '''\n    return x, y, x+r, y+r, x-r, y-r\ndef circle_polar_rect(r,x,y):\n    '''\n    Write a function to convert circle coordinates to rectangular coordinates.\n    '''\n    return x-r, y-r, x+r, y+r\ndef circle_polar_rect_ar(r,x,y):\n    '''\n    Write a function to convert circle coordinates to rectangular coordinates.\n    '''\n    return x, y, x+r, y+r, x-r, y-r\ndef polar_rect_circle_sq(x,y,r):\n    '''\n    Write a function to convert polar coordinates to square coordinates.\n    '''\n    return x+r*r, y+r*r, x-r*r, y-r*r\ndef polar_rect_circle_sq_ar(x,y,r):\n    '''\n    Write a function to convert polar coordinates to square coordinates.\n    '''\n    return x, y, x+r*r, y+r*r, x-r*r, y-r*r\ndef rect_polar_circle_sq(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to square coordinates.\n    '''\n    return x+r*r, y+r*r, x-r*r, y-r*r\ndef rect_polar_circle_sq_ar(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to square coordinates.\n    '''\n    return x, y, x+r*r, y+r*r, x-r*r, y-r*r\ndef circle_polar_rect_sq(r,x,y):\n    '''\n    Write a function to convert circle coordinates to square coordinates.\n    '''\n    return x+r*r, y+r*r, x-r*r, y-r*r\ndef circle_polar_rect_sq_ar(r,x,y):\n    '''\n    Write a function to convert circle coordinates to square coordinates.\n    '''\n    return x, y, x+r*r, y+r*r, x-r*r, y-r*r\ndef rect_polar_rect_rect_sq(x,y,r):\n    '''\n    Write a function to convert rectangular coordinates to square coordinates.\n    '''\n    return x+r*r, y+r*r, x-r*r, y-r*r\ndef rect_polar_rect_rect_sq_ar(x,y,r):\n    '''\n    Write a function to convert rectangular coordinates to square coordinates.\n    '''\n    return x, y, x+r*r, y+r*r, x-r*r, y-r*r\ndef rect_rect_polar(x,y,r):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x+r, y+r, x-r, y-r\ndef rect_rect_polar_ar(x,y,r):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x, y, x+r, y+r, x-r, y-r\ndef polar_rect_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*x+y*y, x, y\ndef polar_rect_rect_ar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x, y, x*x+y*y\ndef rect_polar_rect_rect(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r*r+x*x+y*y, x, y\ndef rect_polar_rect_rect_ar(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r, x, y\ndef rect_rect_polar_rect(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r*r+x*x+y*y, x, y\ndef rect_rect_polar_rect_ar(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r, x, y\ndef rect_rect_polar(x,y,r):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r*r+x*x+y*y, x, y\ndef rect_rect_polar_ar(x,y,r):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r, x, y\ndef polar_rect_rect(x,y,r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return r*r+x*x+y*y, x, y\ndef polar_rect_rect_ar(x,y,r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return r, x, y\ndef rect_polar_rect_rect(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r*r+x*x+y*y, x, y\ndef rect_polar_rect_rect_ar(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r, x, y\ndef rect_rect_polar_rect(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r*r+x*x+y*y, x, y\ndef rect_rect_polar_rect_ar(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r, x, y\ndef rect_rect_polar(x,y,r):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r*r+x*x+y*y, x, y\ndef rect_rect_polar_ar(x,y,r):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r, x, y\ndef rect_rect_polar(r,x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return r*r+x*x+y*y, x, y\ndef rect_rect_polar"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=y\n    theta = x\n    x = r * cos(theta)\n    y = r * sin(theta)\n    return x,y\ndef polar_rect2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    y = r * sin(theta)\n    x = r * cos(theta)\n    return x,y\ndef two_polar_rect(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    x = r * cos(theta)\n    y = r * sin(theta)\n    z = r2 * sin(theta)\n    return x,y,z\ndef two_polar_rect2(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    y = r * sin(theta)\n    x = r * cos(theta)\n    z = r2 * sin(theta)\n    return x,y,z\ndef polar_rect3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = x\n    r = y\n    x = r * cos(theta)\n    y = r * sin(theta)\n    return x,y\ndef polar_rect4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    y = r * sin(theta)\n    x = r * cos(theta)\n    return x,y\ndef two_polar_rect3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = x\n    r = y\n    r2 = z\n    x = r * cos(theta)\n    y = r * sin(theta)\n    z = r2 * sin(theta)\n    return x,y,z\ndef two_polar_rect4(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    theta = x\n    r = y\n    r2 = z\n    y = r * sin(theta)\n    x = r * cos(theta)\n    z = r2 * sin(theta)\n    return x,y,z\ndef rect2polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = r * r\n    return r2,theta\ndef rect2polar2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = r * r\n    return r2,theta\ndef two_rect2polar(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    return r2,theta\ndef two_rect2polar2(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    return r2,theta\ndef polar_rect3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r * cos(theta)\n    y = r * sin(theta)\n    return x,y\ndef polar_rect4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    y = r * sin(theta)\n    x = r * cos(theta)\n    return x,y\ndef two_polar_rect3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    x = r * cos(theta)\n    y = r * sin(theta)\n    z = r2 * sin(theta)\n    return x,y,z\ndef two_polar_rect4(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    y = r * sin(theta)\n    x = r * cos(theta)\n    z = r2 * sin(theta)\n    return x,y,z\ndef rect2polar3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = r * r\n    return r2,theta\ndef rect2polar4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = r * r\n    return r2,theta\ndef two_rect2polar3(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    return r2,theta\ndef two_rect2polar4(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    return r2,theta\ndef rect_polar2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = r * r\n    return r2,theta\ndef rect_polar4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = r * r\n    return r2,theta\ndef two_rect_polar2(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    return r2,theta\ndef two_rect_polar4(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    return r2,theta\ndef rect_polar3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = r * r\n    return r2,theta\ndef rect_polar4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = r * r\n    return r2,theta\ndef two_rect_polar3(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    return r2,theta\ndef two_rect_polar4(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = z\n    return r2,theta\ndef rect_polar2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x\n    theta = y\n    r2 = r * r\n    return r2,theta\ndef rect_polar4(x,"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\n    \ndef rotate(point, angle):\n    '''\n    Write a function to rotate a point counterclockwise by a given angle around a given origin.\n    '''\n    x,y = point\n    angle = cmath.rect(1,angle)\n    return complex(x*angle.real - y*angle.imag,y*angle.real + x*angle.imag)\n    \ndef rotate_point(point, angle):\n    '''\n    Write a function that, given a point and an angle in degrees, returns a new point\n    that is the result of rotating the given point counterclockwise by the given angle around the origin.\n    '''\n    return point\n    \ndef lerp(start, end, time):\n    '''\n    Write a function to linearly interpolate between two values.\n    '''\n    return start + (end - start)*time\n    \ndef lerp_point(start, end, time):\n    '''\n    Write a function that, given a start point and an end point, and a time, returns a new point\n    that is the result of linearly interpolating between the start point and the end point,\n    by the given time.\n    '''\n    return end\n    \ndef cross(p1,p2):\n    '''\n    Write a function that, given two points p1 and p2 on the complex plane,\n    returns the point formed by the line segment connecting p1 to p2.\n    '''\n    return p1\n    \ndef length(point):\n    '''\n    Write a function that, given a point, returns the length of that point.\n    '''\n    return cmath.hypot(point[0],point[1])\n    \ndef length_sq(point):\n    '''\n    Write a function that, given a point, returns the square of the length of that point.\n    '''\n    return complex(point[0]**2,point[1]**2)\n    \ndef dot(p1,p2):\n    '''\n    Write a function that, given two points p1 and p2 on the complex plane,\n    returns the scalar product of p1 and p2.\n    '''\n    return p1[0]*p2[0] + p1[1]*p2[1]\n    \ndef dist(p1,p2):\n    '''\n    Write a function that, given two points on the complex plane,\n    returns the Euclidean distance between them.\n    '''\n    return cmath.hypot(p1[0] - p2[0],p1[1] - p2[1])\n    \ndef dist_sq(p1,p2):\n    '''\n    Write a function that, given two points on the complex plane,\n    returns the square of the Euclidean distance between them.\n    '''\n    return (p1[0]-p2[0])**2 + (p1[1]-p2[1])**2\n    \ndef is_inf(p):\n    '''\n    Write a function that, given a point p on the complex plane,\n    returns True iff p is infinite (i.e. +-inf).\n    '''\n    return p[0] == -1 and p[1] == -1\n    \ndef is_eq(p1,p2):\n    '''\n    Write a function that, given two points p1 and p2 on the complex plane,\n    returns True iff p1 and p2 are the same point.\n    '''\n    return p1 == p2\n    \ndef is_zero(p):\n    '''\n    Write a function that, given a point p on the complex plane,\n    returns True iff p is zero.\n    '''\n    return p[0] == 0 and p[1] == 0\n    \ndef is_in_circle(p,center,radius):\n    '''\n    Write a function that, given a point p on the complex plane and a center c\n    and a radius r, returns True iff p is in the circle with center c and radius r.\n    '''\n    return cmath.hypot(p[0]-center[0],p[1]-center[1]) < radius\n    \ndef angle(p1,p2):\n    '''\n    Write a function that, given two points p1 and p2 on the complex plane,\n    returns the angle (in degrees) formed by the line segment connecting p1 to p2.\n    '''\n    x = p1[0] - p2[0]\n    y = p1[1] - p2[1]\n    return cmath.degrees(cmath.atan2(y,x))\n    \ndef angle_sq(p1,p2):\n    '''\n    Write a function that, given two points p1 and p2 on the complex plane,\n    returns the square of the angle formed by the line segment connecting p1 to p2.\n    '''\n    x = p1[0] - p2[0]\n    y = p1[1] - p2[1]\n    return cmath.hypot(x,y)**2\n    \ndef clip(p,start,end):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the point resulting from clipping p with the line segment formed by the\n    four coordinates start and end.\n    '''\n    return p\n    \ndef clip_point(p,start,end):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the new point resulting from clipping p with the line segment formed by the\n    four coordinates start and end.\n    '''\n    return p\n    \ndef rect_clip(p,start,end):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the point resulting from clipping p with the rectangular region formed by the\n    four coordinates start and end.\n    '''\n    return p\n    \ndef rect_clip_point(p,start,end):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the new point resulting from clipping p with the rectangular region formed by the\n    four coordinates start and end.\n    '''\n    return p\n    \ndef rotate_rect(p,start,end,angle):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the point resulting from rotating the rectangle formed by the coordinates start\n    and end around the point p by the given angle.\n    '''\n    return p\n    \ndef rotate_rect_point(p,start,end,angle):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the new point resulting from rotating the rectangle formed by the coordinates start\n    and end around the point p by the given angle.\n    '''\n    return p\n    \ndef x_rotate_rect(p,start,end,angle):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the point resulting from rotating the rectangle formed by the coordinates start\n    and end around the point p by the given angle, counterclockwise.\n    '''\n    return p\n    \ndef x_rotate_rect_point(p,start,end,angle):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the new point resulting from rotating the rectangle formed by the coordinates start\n    and end around the point p by the given angle, counterclockwise.\n    '''\n    return p\n    \ndef y_rotate_rect(p,start,end,angle):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the point resulting from rotating the rectangle formed by the coordinates start\n    and end around the point p by the given angle, clockwise.\n    '''\n    return p\n    \ndef y_rotate_rect_point(p,start,end,angle):\n    '''\n    Write a function that, given a point p and four coordinates start and end,\n    returns the new point resulting from rotating the rectangle formed by the coordinates start\n    and end around the point p by the given angle, clockwise.\n    '''\n    return p"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(x/r)\n    return (int(r*math.cos(theta)),int(r*math.sin(theta)))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    if r == 0:\n        return None\n    else:\n        angle = cmath.phase(x+1j*y)\n        return (int(r**0.5), int(angle*180/3.1415))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x*x + y*y\n    theta = cmath.acos(y/r)\n    return (r,theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.sqrt(x**2+y**2)\n    angle=cmath.phase(x)+cmath.pi\n    return (angle,r)\ndef polar_rect_reverse(angle,r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=r*cmath.exp(1j*angle)\n    y=r\n    return (x,y)\ndef polar_rect_a(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\ndef polar_rect_b(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (y,x)\ndef polar_rect_c(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (y/x,x)\ndef polar_rect_d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (y/x,x/y)\ndef polar_rect_e(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (y/x,x/y)\ndef polar_rect_f(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_g(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_h(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_i(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (y/x,x/y)\ndef polar_rect_j(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_k(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (y/x,x/y)\ndef polar_rect_l(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_m(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_n(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_o(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_p(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_q(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_r(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_s(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_t(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_u(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_v(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_w(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_x(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_y(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_z(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a1(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\ndef polar_rect_a2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (y,x)\ndef polar_rect_a3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (y/x,x/y)\ndef polar_rect_a4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a5(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a6(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a7(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a9(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a10(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a11(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a12(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a13(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a14(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a15(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a16(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x/y,y/x)\ndef polar_rect_a17(x,y):\n    '''\n    Write a function t"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = x**2 + y**2, 2*math.acos(x/math.sqrt(x**2 + y**2))\n    return (r,theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #convert polar to rectangular\n    return x*math.cos(y), y*math.sin(y)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    # Finding length of list\n    l = n-1\n    # Starting from second index and swapping it with\n    # last element.\n    for i in range(1, l+1):\n        newList[i], newList[l] = newList[l], newList[i]\n        l = l-1\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length == 0:\n        return newList\n    temp = newList[0]\n    newList[0] = newList[length - 1]\n    newList[length - 1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    mid_index = len(newList) // 2\n    newList[0], newList[mid_index] = newList[mid_index], newList[0]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum=0\n    if n<=0 or k<=0:\n        return None\n    if k==0 or k==n:\n        return 1\n    for i in range(n,k):\n        sum=sum+i\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n    else:\n        return (binomial_coeff(n-1,k-1)*k)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial_coeff(n,k):\n        if (n == k):\n            return 1\n        else:\n            return (n*(n-1)) // k\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    return sum(pow(i,n) for i in range(1,k+1)) \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total_prod = 1\n    curr = 1\n    \n    while(k>=curr):\n        total_prod = total_prod * curr\n        curr += 1\n    \n    return total_prod\n    \nprint(binomial_Coeff(7,5))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    l=[]\n    for i in range(n):\n        l.append(math.factorial(n)/math.factorial(n-i))\n    for i in range(n):\n        l[i]=l[i]/math.factorial(k)\n    return sum(l)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def fact(n):\n        if n==1:\n            return 1\n        else:\n            return n*fact(n-1)\n    def binom(n, k): \n        '''\n        returns product of nCk, given n and k.\n        '''\n        if n < 0: \n            return 0\n        if n == 0: \n            return 1\n        if k == 0 or k == n: \n            return 1\n        return binom(n - 1, k) + binom(n - 1, k - 1) \n    def binom_coef_sum(n,k):\n        '''\n        returns the sum of the product of the first k binomial coefficients of n\n        '''\n        return fact(n)//(fact(k)*fact(n-k))\n    return binom_coef_sum(n,k)\n    \n    \ndef test_binomial_Coeff():\n    assert(binomial_Coeff(10,2)==36)\n    assert(binomial_Coeff(7,3)==21)\n    assert(binomial_Coeff(20,5)==139)\n    print(\"success\")\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (n+1)*(n-1)/2*k\ndef binomial_Combination(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial combination.\n    '''\n    return binomial_Coeff(n+k,k)+binomial_Coeff(n-k,k)\ndef binomial_Combination_Sum(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial combination.\n    '''\n    binomial_value_table = []\n    for k in range(0,n+1):\n        binomial_value_table.append(binomial_Combination(n,k))\n    return sum(binomial_value_table)\ndef main():\n    n=8\n    print(binomial_Combination_Sum(n))\nmain("
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    b = n+k\n    s = 1\n    s1 = 1\n    for i in range(n,n+k+1):\n        s *=i\n        s1 *=i+1\n    return s/s1\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(len(ip) <= 0):\n        return None\n    if(ip[0] == \"0\"):\n        return None\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    ip = ip.split('.')\n    for i in range(len(ip)):\n        if int(ip[i]) == 0:\n            ip[i] = '0'\n    return '.'.join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.match(r'^\\d+$',ip).group()\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('\\d+\\.\\d+\\.\\d+\\.\\d+', '.', ip)\n    \ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from an port number.\n    '''\n    return re.sub('\\d+', '', port)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == \"0.0.0.0\":\n        return \"0.0.0.0\"\n    elif ip == \"0.0.0.0.\":\n        return \"0.0.0.0\"\n    elif ip == \"0.0.0.0.0\":\n        return \"0.0.0.0\"\n    elif ip == \"0.0.0.0.0.\":\n        return \"0.0.0.0\"\n    return ip.lstrip(\"0.\")\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) < 4:\n        return ip\n    return ip[0] + str(int(ip[1:])).zfill(3)\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    return int(port)\ndef isport(port):\n    '''\n    Write a function to check if a port number is valid or not.\n    '''\n    return port.isdigit() and 0<=int(port)<=65535\ndef to_int(data):\n    '''\n    Write a function to convert a string to an integer\n    '''\n    return int(data)\ndef to_str(data):\n    '''\n    Write a function to convert an integer to a string\n    '''\n    return str(data)\ndef s_to_i(string):\n    '''\n    Write a function to convert a string to integer\n    '''\n    return int(string)\ndef s_to_b(string):\n    '''\n    Write a function to convert a string to binary\n    '''\n    return format(s_to_i(string),'b')\ndef s_to_h(string):\n    '''\n    Write a function to convert a string to hexadecimal\n    '''\n    return format(s_to_i(string),'x')\ndef s_to_d(string):\n    '''\n    Write a function to convert a string to double\n    '''\n    return float(string)\ndef s_to_f(string):\n    '''\n    Write a function to convert a string to float\n    '''\n    return float(string)\ndef s_to_a(string):\n    '''\n    Write a function to convert a string to ascii\n    '''\n    return ord(string)\ndef s_to_l(string):\n    '''\n    Write a function to convert a string to lower case\n    '''\n    return string.lower()\ndef s_to_u(string):\n    '''\n    Write a function to convert a string to upper case\n    '''\n    return string.upper()\ndef s_to_c(string):\n    '''\n    Write a function to convert a string to capitalize\n    '''\n    return string.capitalize()\ndef s_to_v(string):\n    '''\n    Write a function to convert a string to vertically stacked\n    '''\n    return string.center(12,'-')\ndef s_to_n(string):\n    '''\n    Write a function to convert a string to normalized\n    '''\n    return string.strip().replace(' ','-')\ndef s_to_r(string):\n    '''\n    Write a function to convert a string to right justified\n    '''\n    return string.rjust(12,'-')\ndef s_to_l(string):\n    '''\n    Write a function to convert a string to left justified\n    '''\n    return string.ljust(12,'-')\ndef s_to_m(string):\n    '''\n    Write a function to convert a string to invert\n    '''\n    return string.maketrans('abc','cba')\ndef s_to_d(string):\n    '''\n    Write a function to convert a string to dict\n    '''\n    return eval('dict('+string+')')\ndef s_to_dic(string):\n    '''\n    Write a function to convert a string to dictionary\n    '''\n    return eval('dict('+string+')')\ndef s_to_class(string):\n    '''\n    Write a function to convert a string to class\n    '''\n    return eval('type('+string+')')\ndef s_to_list(string):\n    '''\n    Write a function to convert a string to list\n    '''\n    return eval('list('+string+')')\ndef s_to_set(string):\n    '''\n    Write a function to convert a string to set\n    '''\n    return eval('set('+string+')')\ndef s_to_tuple(string):\n    '''\n    Write a function to convert a string to tuple\n    '''\n    return eval('tuple('+string+')')\ndef s_to_nested(string):\n    '''\n    Write a function to convert a string to nested\n    '''\n    return eval('nested('+string+')')\ndef s_to_dic_nested(string):\n    '''\n    Write a function to convert a string to dictionary with nested\n    '''\n    return eval('dic_nested('+string+')')\ndef s_to_dict_nested(string):\n    '''\n    Write a function to convert a string to dictionary with nested\n    '''\n    return eval('dict_nested('+string+')')\ndef s_to_json(string):\n    '''\n    Write a function to convert a string to json\n    '''\n    return eval('json('+string+')')\ndef s_to_json_object(string):\n    '''\n    Write a function to convert a string to json object\n    '''\n    return eval('json_object('+string+')')\ndef s_to_json_array(string):\n    '''\n    Write a function to convert a string to json array\n    '''\n    return eval('json_array('+string+')')\ndef s_to_json_dict(string):\n    '''\n    Write a function to convert a string to json dict\n    '''\n    return eval('json_dict('+string+')')\ndef s_to_json_array_dict(string):\n    '''\n    Write a function to convert a string to json array dict\n    '''\n    return eval('json_array_dict('+string+')')\ndef s_to_json_object_dict(string):\n    '''\n    Write a function to convert a string to json object dict\n    '''\n    return eval('json_object_dict('+string+')')\ndef s_to_json_number(string):\n    '''\n    Write a function to convert a string to json number\n    '''\n    return eval('json_number('+string+')')\ndef s_to_json_string(string):\n    '''\n    Write a function to convert a string to json string\n    '''\n    return eval('json_string('+string+')')\ndef s_to_xml(string):\n    '''\n    Write a function to convert a string to xml\n    '''\n    return eval('xml('+string+')')\ndef s_to_xml_element(string):\n    '''\n    Write a function to convert a string to xml element\n    '''\n    return eval('xml_element('+string+')')\ndef s_to_xml_text(string):\n    '''\n    Write a function to convert a string to xml text\n    '''\n    return eval('xml_text('+string+')')\ndef s_to_xml_attribute(string):\n    '''\n    Write a function to convert a string to xml attribute\n    '''\n    return eval('xml_attribute('+string+')')\ndef s_to_xml_elements(string):\n    '''\n    Write a function to convert a string to xml elements\n    '''\n    return eval('xml_elements('+string+')')\ndef s_to_xml_child_element(string):\n    '''\n    Write a function to convert a string to xml child element\n    '''\n    return eval('xml_child_element('+string+')')\ndef s_to_xml_text_child_element(string):\n    '''\n    Write a function to convert a string to xml child element text\n    '''\n    return eval('xml_text_child_element('+string+')')\ndef s_to_xml_child_attrib(string):\n    '''\n    Write a function to convert a string to xml child attribute\n    '''\n    return eval('xml_child_attrib('+string+')')\ndef s_to_xml_child_elements(string):\n    '''\n    Write a function to convert a string to xml child elements\n    '''\n    return eval('xml_child_elements('+string+')')\ndef s_to_xml_child_element_text(string):\n    '''\n    Write a function to convert a string to xml child element text\n    '''\n    return eval('xml_child"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.split(\".\")\n    ip=list(map(str,ip))\n    ip[0]=ip[0].lstrip('0')\n    if ip[0]==\"\":\n        ip[0]=\"0\"\n    ip='.'.join(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=str(ip)\n    sip=list(ip)\n    for i in range(len(sip)):\n        if sip[i]=='0':\n            sip.remove('0')\n            break\n    ip=''.join(sip)\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 'The given list is empty.'\n    elif len(list1) == 1:\n        if list1[0]%2 == 0:\n            return list1[0]\n        else:\n            return 'There is no even number in the given list.'\n    elif len(list1) == 2:\n        if list1[0]%2 == 0:\n            return abs(list1[1]-list1[0])\n        else:\n            return 'There is no even number in the given list.'\n    elif len(list1) > 2:\n        list1.sort()\n        if list1[0]%2 == 0:\n            if list1[1]%2 == 0:\n                return abs(list1[2]-list1[0])\n            elif list1[2]%2 == 0:\n                return abs(list1[1]-list1[0])\n            else:\n                return 'There is no even number in the given list.'\n        else:\n            if list1[1]%2 == 0:\n                return 'There is no even number in the given list.'\n            elif list1[2]%2 == 0:\n                return abs(list1[1]-list1[0])\n            else:\n                return abs(list1[2]-list1[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list[0] - odd_list[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return abs(even[0]-odd[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # if len(list1) < 2:\n    #     return 0\n    if len(list1) == 2:\n        return abs(list1[0] - list1[1])\n    elif len(list1) == 3:\n        return abs(list1[0] - list1[2])\n    return abs(list1[0] - list1[1]) + abs(list1[0] - list1[2])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 1:\n        return None\n    list1_even = []\n    list1_odd = []\n    for i in list1:\n        if i % 2 == 0:\n            list1_even.append(i)\n        else:\n            list1_odd.append(i)\n    diff = abs(list1_odd[0] - list1_even[0])\n    for i in range(len(list1_odd)):\n        if i == 0:\n            continue\n        diff = abs(list1_odd[i] - list1_even[i-1])\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = odd - even\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = False\n    odd = False\n    difference = 0\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            if even == True:\n                difference += abs(list1[i] - list1[i-1])\n            else:\n                even = True\n        else:\n            if odd == True:\n                difference += abs(list1[i] - list1[i-1])\n            else:\n                odd = True\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even = even + num\n        else:\n            odd = odd + num\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] - list1[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    length = len(list1)\n    if length == 0:\n        return []\n    if length == 1:\n        return list1\n    even_index = 0\n    odd_index = 0\n    even = list1[even_index]\n    odd = list1[odd_index]\n    for i in range(length-1):\n        if i % 2 == 0:\n            if even!= list1[i]:\n                even = list1[i]\n                even_index = i\n        else:\n            if odd!= list1[i]:\n                odd = list1[i]\n                odd_index = i\n    if even_index!= 0:\n        diff = even - list1[0]\n    else:\n        diff = list1[length-1] - odd\n    return diff\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # change string to binary and use as a hashmap to count the number of changes \n    hashmap = {}\n    for s in str1:\n        hashmap[s] = 0\n    for s in str2:\n        hashmap[s] = 1\n    \n    diff = 0\n    for key in hashmap.keys():\n        if key!= '0' and key!= '1':\n            diff += 1\n    return diff\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    length = len(str1)\n    \n    for i in range(length):\n        if str1[i]!= str2[i]:\n            str1, str2 = str2, str1\n            count += 1\n    return count \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(0,len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Converting string to an array of characters\n    arr1 = list(str1)\n    arr2 = list(str2)\n    \n    # Creating a dictionary with the characters and their corresponding indexes \n    d = {}\n    for i in range(len(arr1)):\n        d[arr1[i]] = i\n    \n    # Creating a dictionary with the characters and their corresponding indexes \n    d2 = {}\n    for i in range(len(arr2)):\n        d2[arr2[i]] = i\n    \n    # Checking if the characters are equal\n    if d.keys()!= d2.keys():\n        return -1\n    \n    # Getting the values for the keys\n    for key in d:\n        if key in d2:\n            \n            # Creating the values array for both the dictionary\n            values = []\n            values2 = []\n            \n            # Checking if the values are equal for the keys\n            if d[key]!= d2[key]:\n                for val in arr1:\n                    values.append(d[val])\n                for val2 in arr2:\n                    values2.append(d2[val2])\n                    \n                # Finding the elements that are not matching\n                mismatch = set(values) ^ set(values2)\n                \n                # Finding the indices of the elements that are not matching\n                indices_mismatch = []\n                for val in values:\n                    if val in mismatch:\n                        indices_mismatch.append(values.index(val))\n                \n                # Finding the indices of the elements that are matching\n                indices_match = []\n                for val2 in values2:\n                    if val2 in mismatch:\n                        indices_match.append(values2.index(val2))\n                \n                # Finding the number of times each element is not matching\n                count_mismatch = []\n                for i in range(len(indices_mismatch)):\n                    count_mismatch.append(indices_mismatch.count(indices_mismatch[i]))\n                \n                # Finding the number of times each element is not matching\n                count_match = []\n                for i in range(len(indices_match)):\n                    count_match.append(indices_match.count(indices_match[i]))\n                    \n                # Finding the number of elements that are not matching\n                number_of_mismatch = len(indices_mismatch)\n                \n                # Finding the number of elements that are matching\n                number_of_match = len(indices_match)\n                \n                # Checking if the numbers are equal\n                if number_of_match == 0:\n                    return -1\n                elif number_of_mismatch == 0:\n                    return -1\n                else:\n                    # Finding the common elements\n                    common = list(set(indices_match) & set(indices_mismatch))\n                    common.sort()\n                    \n                    # Finding the difference between the two\n                    diff = set(indices_mismatch) ^ set(indices_match)\n                    diff.discard(common[0])\n                    diff = len(diff)\n                    \n                    # Finding the number of swaps required\n                    num_swaps = number_of_mismatch + (number_of_match - 1) + (diff * 2)\n                    \n                    # Returning the minimum number of swaps\n                    return num_swaps\n        \n    # If the strings are equal then the common characters are empty\n    return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    no_of_swaps = 0\n    # complete the function\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            no_of_swaps+=1\n    return no_of_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    string1 = str1\n    string2 = str2\n    \n    n = len(string1)\n    index1 = 0\n    index2 = 0\n    min_swaps = 0\n    \n    while index1 < n or index2 < n:\n        if string1[index1]!= string2[index2]:\n            if string1[index1] == '1':\n                string1 = string1[:index1] + string2[index2] + string1[index1+1:]\n            else:\n                string1 = string1[:index2] + string2[index1] + string1[index2+1:]\n            index2 += 1\n            min_swaps += 1\n        else:\n            index1 += 1\n            index2 += 1\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #print(str1,str2)\n    \n    # converting string to int\n    a = int(str1,2)\n    b = int(str2,2)\n    \n    # initialize\n    swap1,swap2 = 0,0\n    \n    # comparing and swapping\n    while a!= b:\n        if a < b:\n            a = a + 2**swap1\n            swap1 += 1\n        else:\n            b = b + 2**swap2\n            swap2 += 1\n            \n    # returning number of swaps\n    return swap1,swap2\n    \n    \ndef min_Swaps_1(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # converting string to int\n    a = int(str1,2)\n    b = int(str2,2)\n    \n    # initialize\n    swap1,swap2 = 0,0\n    \n    # finding min\n    while a!= b:\n        if a < b:\n            a = a + 2**swap1\n            swap1 += 1\n        else:\n            b = b + 2**swap2\n            swap2 += 1\n    \n    # returning number of swaps\n    return swap1,swap2\n    \n    \ndef min_Swaps_2(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # converting string to int\n    a = int(str1,2)\n    b = int(str2,2)\n    \n    # initialize\n    swap1,swap2 = 0,0\n    \n    # finding min\n    while a!= b:\n        if a < b:\n            a = a + 2**swap1\n            swap1 += 1\n        else:\n            b = b + 2**swap2\n            swap2 += 1\n    \n    # returning number of swaps\n    return swap1,swap2\n    \n    \ndef min_Swaps_3(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # converting string to int\n    a = int(str1,2)\n    b = int(str2,2)\n    \n    # initialize\n    swap1,swap2 = 0,0\n    \n    # finding min\n    while a!= b:\n        if a < b:\n            a = a + 2**swap1\n            swap1 += 1\n        else:\n            b = b + 2**swap2\n            swap2 += 1\n    \n    # returning number of swaps\n    return swap1,swap2\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # time complexity = o(n)\n    # space complexity = o(1)\n    # n = len(str1)\n    # m = len(str2)\n    # output = 0\n    # for i in range(n) :\n    #     if str1[i]!= str2[i] :\n    #         if str1[i] == '0' :\n    #             str2 = str2[:i]+'1'+str2[i+1:]\n    #         else :\n    #             str2 = str2[:i]+'0'+str2[i+1:]\n    #         output += 1\n    # return output\n    #\n    # time complexity = o(n)\n    # space complexity = o(1)\n    # n = len(str1)\n    # m = len(str2)\n    # output = 0\n    # i,j = 0,0\n    # while i < n and j < m:\n    #     if str1[i]!= str2[j]:\n    #         if str1[i] == '0':\n    #             str2 = str2[:i]+'1'+str2[i+1:]\n    #         else :\n    #             str2 = str2[:i]+'0'+str2[i+1:]\n    #         output += 1\n    #     i+=1\n    #     j+=1\n    # return output\n    #\n    # time complexity = o(n+m)\n    # space complexity = o(1)\n    # n = len(str1)\n    # m = len(str2)\n    # output = 0\n    # for i in range(n):\n    #     if str1[i]!= str2[i]:\n    #         # str2 = str2[:i]+str2[i+1:]\n    #         if str1[i] == '0':\n    #             str1 = str1[:i]+'1'+str1[i+1:]\n    #         else :\n    #             str1 = str1[:i]+'0'+str1[i+1:]\n    #         output += 1\n    # return output\n    #\n    # time complexity = o(n+m)\n    # space complexity = o(1)\n    # n = len(str1)\n    # m = len(str2)\n    # output = 0\n    # for i in range(m):\n    #     if str1[i]!= str2[i]:\n    #         # str2 = str2[:i]+str2[i+1:]\n    #         if str1[i] == '0':\n    #             str1 = str1[:i]+'1'+str1[i+1:]\n    #         else :\n    #             str1 = str1[:i]+'0'+str1[i+1:]\n    #         output += 1\n    # return output\n    #\n    # time complexity = o(n+m)\n    # space complexity = o(1)\n    # n = len(str1)\n    # m = len(str2)\n    # output = 0\n    # j = 0\n    # for i in range(n):\n    #     if str1[i]!= str2[j]:\n    #         if str1[i] == '0':\n    #             str1 = str1[:i]+'1'+str1[i+1:]\n    #         else :\n    #             str1 = str1[:i]+'0'+str1[i+1:]\n    #         output += 1\n    #     j+=1\n    # return output\n    #\n    # time complexity = o(n+m)\n    # space complexity = o(1)\n    # n = len(str1)\n    # m = len(str2)\n    # output = 0\n    # j = 0\n    # for i in range(m):\n    #     if str1[i]!= str2[j]:\n    #         if str1[i] == '0':\n    #             str1 = str1[:i]+'1'+str1[i+1:]\n    #         else :\n    #             str1 = str1[:i]+'0'+str1[i+1:]\n    #         output += 1\n    #     j+=1\n    # return output\n    #\n    # time complexity = o(n+m)\n    # space complexity = o(1)\n    # n = len(str1)\n    # m = len(str2)\n    # output = 0\n    # i = 0\n    # for j in range(m):\n    #     if str1[i]!= str2[j]:\n    #         if str1[i] == '0':\n    #             str1 = str1[:i]+'1'+str1[i+1:]\n    #         else :\n    #             str1 = str1[:i]+'0'+str1[i+1:]\n    #         output += 1\n    #     i+=1\n    # return output\n    \n    # time complexity = o(n+m)\n    # space complexity = o(1)\n    # n = len(str1)\n    # m = len(str2)\n    # output = 0\n    # i = 0\n    # j = 0\n    # while i < n and j < m:\n    #     if str1[i]!= str2[j]:\n    #         if str1[i] == '0':\n    #             str1 = str1[:i]+'1'+str1[i+1:]\n    #         else :\n    #             str1 = str1[:i]+'0'+str1[i+1:]\n    #         output += 1\n    #     i+=1\n    #     j+=1\n    # return output\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m_count = 0\n    for i in range(0, len(str1)) :\n        if str1[i]!= str2[i] :\n            m_count += 1\n            if str1[i] == '1' :\n                str1 = str1[:i] + '0' + str1[i + 1:]\n            else :\n                str1 = str1[:i] + '1' + str1[i + 1:]\n    print(\"Minimum number of swaps required : \", m_count)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_bytes=0\n    for i in range(len(tuple_list)):\n        tuple_bytes += sys.getsizeof(tuple_list[i])\n    return tuple_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    def size(tuple_list):\n        return sys.getsizeof(tuple_list)\n    return size(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # YOUR CODE HERE\n    return sys.getsizeof(tuple_list)\ndef is_even(num):\n    '''\n    Write a function to check if given number is even.\n    '''\n    # YOUR CODE HERE\n    return num % 2 == 0\ndef is_divisible_by_2_and_5(num):\n    '''\n    Write a function to check if given number is divisible by 2 and 5.\n    '''\n    # YOUR CODE HERE\n    return num % 5 == 0 and num % 2 == 0\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for tup in tuple_list:\n        tuple_size += sys.getsizeof(tup)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for item in tuple_list:\n        if type(item) == str:\n            tuple_size = tuple_size + len(item) + 1\n        else:\n            tuple_size = tuple_size + sys.getsizeof(item)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    list_size = sys.getsizeof(tuple_list)\n    print(f\"List: {list_size}\")\n    tuple_size = sys.getsizeof(tuple_list[0])\n    for t in tuple_list:\n        tuple_size = tuple_size + sys.getsizeof(t)\n    print(f\"Tuple: {tuple_size}\")\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # YOUR CODE HERE\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    l = 0\n    r = n1\n    while l < r:\n        mid = (l+r) // 2\n        if arr1[mid] < arr2[0]:\n            l = mid + 1\n        else:\n            r = mid\n    return arr1[l] if l < k else arr2[0]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    kth_index_1 = 0\n    kth_index_2 = 0\n    kth_index = 0\n    \n    # kth_index_1 = len(arr1) - k\n    # kth_index_2 = len(arr2) - k\n    \n    # while kth_index_1!= kth_index_2:\n    while kth_index_1!= len(arr1):\n        if arr1[kth_index_1] < arr2[kth_index_2]:\n            kth_index_1 += 1\n            kth_index += 1\n        else:\n            kth_index_2 += 1\n            kth_index += 1\n    \n    return arr1[kth_index]\n    "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Use the range function to find the range of array1\n    # Since range is 0 based, add 1\n    # Use the range function to find the range of array2\n    # Since range is 0 based, add 1\n    # Since the array1 is sorted, we can find the range using the kth element in array2\n    # Use the range function to find the range of array2\n    # Since range is 0 based, add 1\n    # Use the range function to find the range of array1\n    # Since range is 0 based, add 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # ********** Attempt 1 - Linear Approach ***********\n    # while len(arr1)!= 0 and len(arr2)!= 0:\n    #     if arr1[0] == arr2[0]:\n    #         print(arr1.pop(0), arr2.pop(0))\n    #     elif arr1[0] > arr2[0]:\n    #         print(arr1.pop(0), arr2.pop(0))\n    #     elif arr1[0] < arr2[0]:\n    #         print(arr1.pop(0), arr2.pop(0))\n    #     if len(arr1) == 0 and len(arr2)!= 0:\n    #         print(arr2.pop(0))\n    #     if len(arr1)!= 0 and len(arr2) == 0:\n    #         print(arr1.pop(0))\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # 1) Normal way of finding the element\n    # for i in range(min(len(arr1),len(arr2))):\n    #     if (arr1[i] < arr2[i]):\n    #         return arr1[i]\n    #     else:\n    #         return arr2[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 == 0 and n2 == 0:\n        return -1\n    if k == 0:\n        return -1\n    if n1 == 0:\n        return arr2[k - 1]\n    if n2 == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    if k == n1 + n2:\n        return max(arr1[n1 - 1], arr2[n2 - 1])\n    left = 0\n    right = n1\n    while left < right:\n        mid = (left + right) // 2\n        if arr1[mid] < arr2[k - 1 - mid]:\n            right = mid\n        else:\n            left = mid + 1\n    return arr1[left - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # start with index = 0, 1, 2,...\n    idx1 = 0\n    idx2 = 0\n    # compare each element of arr1 with each element of arr2\n    # until find the kth element\n    while idx1 < len(arr1) and idx2 < len(arr2):\n        if arr1[idx1] < arr2[idx2]:\n            # if arr1[idx1] is smaller than arr2[idx2], move the index to the right\n            idx1 += 1\n        else:\n            # else, move the index to the left\n            idx2 += 1\n    # find kth element\n    # if k is greater than the length of the shorter array,\n    # the return value should be the kth element of the longer array\n    if k > len(arr1):\n        # arr2 is longer than arr1, so return the kth element of arr2\n        return arr2[idx2]\n    else:\n        # else, return the kth element of arr1\n        return arr1[idx1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # len(arr1) - k\n    # len(arr2) - k\n    # total = len(arr1) + len(arr2)\n    # len(arr2) - k\n    # len(arr1) - k - len(arr2)\n    # total - k - len(arr1)\n    # len(arr1) - k - len(arr2) + 1\n    # total - k\n    # total + k\n    # (len(arr1) + len(arr2)) - k\n    # (len(arr1) + len(arr2)) - k - 1\n    # (len(arr1) + len(arr2)) - k + 1\n    # (len(arr1) + len(arr2)) - k + 2\n    # total + k + 1\n    # total + k - 1\n    # k - total - 1\n    # k - total\n    # k - total + 1\n    # k - total + 2\n    # k - total + 3\n    # k - total + 4\n    # k - total + 5\n    # k - total + 6\n    # k - total + 7\n    # k - total + 8\n    # k - total + 9\n    # k - total + 10\n    # k - total + 11\n    # k - total + 12\n    # k - total + 13\n    # k - total + 14\n    # k - total + 15\n    # k - total + 16\n    # k - total + 17\n    # k - total + 18\n    # k - total + 19\n    # k - total + 20\n    # k - total + 21\n    # k - total + 22\n    # k - total + 23\n    # k - total + 24\n    # k - total + 25\n    # k - total + 26\n    # k - total + 27\n    # k - total + 28\n    # k - total + 29\n    # k - total + 30\n    # k - total + 31\n    # k - total + 32\n    # k - total + 33\n    # k - total + 34\n    # k - total + 35\n    # k - total + 36\n    # k - total + 37\n    # k - total + 38\n    # k - total + 39\n    # k - total + 40\n    # k - total + 41\n    # k - total + 42\n    # k - total + 43\n    # k - total + 44\n    # k - total + 45\n    # k - total + 46\n    # k - total + 47\n    # k - total + 48\n    # k - total + 49\n    # k - total + 50\n    # k - total + 51\n    # k - total + 52\n    # k - total + 53\n    # k - total + 54\n    # k - total + 55\n    # k - total + 56\n    # k - total + 57\n    # k - total + 58\n    # k - total + 59\n    # k - total + 60\n    # k - total + 61\n    # k - total + 62\n    # k - total + 63\n    # k - total + 64\n    # k - total + 65\n    # k - total + 66\n    # k - total + 67\n    # k - total + 68\n    # k - total + 69\n    # k - total + 70\n    # k - total + 71\n    # k - total + 72\n    # k - total + 73\n    # k - total + 74\n    # k - total + 75\n    # k - total + 76\n    # k - total + 77\n    # k - total + 78\n    # k - total + 79\n    # k - total + 80\n    # k - total + 81\n    # k - total + 82\n    # k - total + 83\n    # k - total + 84\n    # k - total + 85\n    # k - total + 86\n    # k - total + 87\n    # k - total + 88\n    # k - total + 89\n    # k - total + 90\n    # k - total + 91\n    # k - total + 92\n    # k - total + 93\n    # k - total + 94\n    # k - total + 95\n    # k - total + 96\n    # k - total + 97\n    # k - total + 98\n    # k - total + 99\n    # k - total + 100\n    # k - total + 101\n    # k - total + 102\n    # k - total + 103\n    # k - total + 104\n    # k - total + 105\n    # k - total + 106\n    # k - total + 107\n    # k - total + 108\n    # k - total + 109\n    # k - total + 110\n    # k - total + 111\n    # k - total + 112\n    # k - total + 113\n    # k - total + 114\n    # k - total + 115\n    # k - total + 116\n    # k - total + 117\n    # k - total + 118\n    # k - total + 119\n    # k - total + 120\n    # k - total + 121\n    # k - total + 122\n    # k - total + 123\n    # k - total + 124\n    # k - total + 125\n    # k - total + 126\n    # k - total + 127\n    # k - total + 128\n    # k - total + 129\n    # k - total + 130\n    # k - total + 131\n    # k - total + 132\n    # k - total + 133\n    # k - total + 134\n    # k - total + 135\n    # k - total + 136\n    # k - total + 137\n    # k - total + 138\n    # k - total + 139\n    # k - total + 140\n    # k - total + 141\n    # k - total + 142\n    # k - total + 143\n    # k - total + 144\n    # k - total + 145\n    # k - total + 146\n    # k - total + 147\n    # k - total + 148\n    # k - total + 149\n    # k - total + 150\n    # k - total + 151\n    # k - total + 152\n    # k - total + 153\n    # k - total + 154\n    # k - total + 155\n    # k - total + 156\n    # k - total + 157\n    # k - total + 158\n    # k - total + 159\n    # k - total + 160\n    # k - total + 161\n    # k - total + 162\n    # k - total + 163\n    # k - total + 164\n    # k - total + 165\n    # k - total + 166\n    # k - total + 167\n    # k - total + 168\n    # k - total + 169\n    # k - total + 170\n    # k - total + 171\n    # k - total + 172\n    # k - total + 173\n    # k - total + 174\n    # k - total + 175\n    # k - total + 176\n    # k - total + 177\n    # k - total + 178\n    # k - total + 179\n    # k - total + 180\n    # k - total + 181\n    # k - total + 182\n    # k - total + 183\n    # k - total + 184\n    # k - total + 185\n    # k - total + 186\n    # k - total + 187\n    # k - total + 188\n    # k - total + 189\n    # k - total + 190\n    # k - total + 191\n    # k - total + 192\n    # k - total + 193\n    # k - total + 194\n    # k - total + 195\n    # k - total + 196\n    # k - total + 197\n    # k - total + 198\n    # k - total + 199\n    # k - total + 200\n    # k - total + 201\n    # k - total + 202\n    # k - total + 203\n    # k - total + 204\n    # k - total + 205\n    # k - total + 206\n    # k - total + 207\n    # k - total + 208\n    # k - total + 209\n    # k - total + 210\n    # k - total + 211\n    # k - total + 212\n    # k - total + 213\n    # k - total + 214\n    # k - total + 215\n    # k - total + 216\n    # k - total + 217\n    # k - total + 218\n    # k - total + 219\n    # k - total + 220\n    # k - total + 221\n    # k - total + 222\n    # k - total + 223\n    # k - total + 224\n    # k - total + 225"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # O(logk) for sorting, since we need to divide the array into two halves\n    # and then use a single iteration to find kth element.\n    # Time: O(logk)\n    # Space: O(1)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == len(arr1):\n        return arr2[j + k - 1]\n    if j == len(arr2):\n        return arr1[i + k - 1]\n    return 0\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number <= 0:\n        return False\n    number_sum = 0\n    number_length = len(str(number))\n    while number > 0:\n        number_sum = number_sum + number % 10**number_length\n        number = number // 10\n        number_length = number_length - 1\n    return number == number_sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    while (n > 0):\n        digit = n % 10\n        sum += digit ** 3\n        n = n // 10\n    if(sum == number):\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if (number<100):\n        number=number**3\n        return number\n    else:\n        number=number%100\n        number=number**3\n        if (number==number+100):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summation = 0\n    while number > 0:\n        summation += number % 10\n        number = number // 10\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while number > 0:\n        rem = number % 10\n        sum += (rem ** 3)\n        number = number // 10\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum = sum + digit ** 3\n        temp = temp // 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp!= 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp = temp // 10\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    length = len(number_str)\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n=number\n    sum=0\n    while(n>0):\n        digit=n%10\n        sum+=digit**3\n        n=n//10\n    if(n==0):\n        if(sum==number):\n            print(\"number is armstrong\")\n        else:\n            print(\"number is not armstrong\")\n    else:\n        print(\"number is not armstrong\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    while (num > 0):\n        digit = num % 10\n        sum = sum + digit ** 3\n        num = num // 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # sum = 0\n    # for i in range(1, number + 1):\n    #     sum += i\n    # average = sum/number\n    # return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num = 0\n    avg = 0\n    for i in range(1,number+1):\n        num = num + i\n    avg = num/number\n    print(num,avg)\n    return(num,avg)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += i\n    return total, total/number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        return \"Numbers should be greater than 0\"\n    sum = 0\n    for i in range(number):\n        sum += i\n    return sum, sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    print(f\"sum of first {number} natural numbers: {sum}\")\n    print(f\"average of first {number} natural numbers: {sum / number}\")\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #using if-else structure\n    sum = 0\n    if number < 0:\n        print(\"Sorry, the number must be positive!\")\n    elif number == 0:\n        sum = 0\n    elif number == 1:\n        sum = 1\n    else:\n        for i in range(number):\n            sum += i + 1\n    return sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    number = int(number)\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # number = int(input())\n    # sum = 0\n    # for i in range(1,number+1):\n    #     sum += i\n    # print(sum)\n    # return sum\n    return sum(range(1,number+1))/number\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        print(\"Number %d is even\" %n) \n    else: \n        print(\"Number %d is odd\" %n)\n    return\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # code here\n    return (n % 2) == 0"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i] == str1[j] and str1[i]!= \" \":\n                return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return None\n    count = {}\n    for char in str1:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    for char in str1:\n        if count[char] > 1:\n            return char\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for x in str1:\n        if str1.count(x) > 1:\n            return x\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    count = 1\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            count = count + 1\n        else:\n            count = 1\n    if count > 1:\n        return str1[0]\n    else:\n        return 'None'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) > 1:\n        for i in range(len(str1)):\n            if str1.count(str1[i]) > 1:\n                return i\n    else:\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return 'No repeated char'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict = {}\n    for c in str1:\n        if c not in dict:\n            dict[c] = 1\n        else:\n            return c\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # traverse through the given string\n    for i in range(len(str1)):\n        # if the character is seen for the first time\n        if str1.count(str1[i]) == 1:\n            # return the first occurring character\n            return str1[i]\n        \n    # if no repeated character is found\n    return 'No repeated character found'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #str1 = input(\"Enter string: \")\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] > 1:\n            print(\"The first repeated character in the string is {} and its count is {}\".format(i,freq[i]))\n            break\n    else:\n        print(\"None of the characters repeats in the given string.\")\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return i\n    else:\n        return -1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1,n+1):\n        if 'l' in str(i) and 'd' in str(i) and 'i' in str(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(n):\n        l.append(i)\n    \n    for i in range(len(l)):\n        if (is_lucid(l[i])):\n            l.remove(l[i])\n            \n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for n in range(1,n):\n        s = str(n)\n        if n < 9:\n            if s[-1] == '1' and s[-2] == '6' and s[-3] == '9':\n                lucid.append(n)\n        else:\n            if s[-1] == '4' and s[-2] == '9' and s[-3] == '6':\n                lucid.append(n)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    #TODO\n    #using recursion\n    #1. start with a list of numbers\n    #2. for each number in the list:\n    #3.    check if it's a number larger than n\n    #    if it is, add it to the end of the list\n    #4. if it is not, call get_ludic() on it\n    return []\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    for i in range(1, n):\n        if is_ludicrous(i):\n            print(i)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    if n == 1:\n        ludic_nums.append(1)\n        return ludic_nums\n    for i in range(1, n):\n        for j in range(i, n):\n            if i + j == n:\n                ludic_nums.append(i)\n                ludic_nums.append(j)\n                break\n    return ludic_nums\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n<=0:\n        return set()\n    ludics = {1}\n    for i in range(2, n):\n        if i in ludics:\n            ludics.update(set(range(i*i, n+1, i)))\n        else:\n            ludics.add(i)\n    return ludics\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        return 0\n    ludic = []\n    while n:\n        if not len(ludic) or n % 10 == lucid[-1]:\n            ludic.append(n)\n        n //= 10\n    return sum(ludic)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    a,b=0,1\n    for i in range(n):\n        a,b=b,(a+b)\n    return b\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if (i+1)**2 == i:\n            ludic.append(i)\n    return lucid\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    words = s.split()\n    return \" \".join(words[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words_reversed = words[::-1]\n    return \" \".join(words_reversed)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    return''.join(words[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split(' ')[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if type(s)!= str:\n        return None\n    words = s.split(' ')\n    new_words = words[::-1]\n    return''.join(new_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    words = s.split(' ')\n    new_words = []\n    for word in words:\n        word = word[::-1]\n        new_words.append(word)\n    new_string =''.join(new_words)\n    return new_string\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(f\"{num} is not a prime number\")\n                break\n        else:\n            print(f\"{num} is a prime number\")\n    else:\n        print(f\"{num} is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num<2:\n        return False\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n       for i in range(2, num):\n          if (num % i) == 0:\n             print(f'{num} is not a prime number')\n             break\n       else:\n          print(f'{num} is a prime number')\n    else:\n       print(f'{num} is not a prime number')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num == 1 or num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num) + 1), 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    is_prime = True\n    if num < 2:\n        is_prime = False\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                is_prime = False\n                break\n    return is_prime\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num in range(2, 6):\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num) + 1), 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree*(math.pi/180)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef sqrt(x):\n    '''\n    Write a function to calculate the square root of a number.\n    '''\n    return math.sqrt(x)\ndef cos(x):\n    '''\n    Write a function to calculate the cosine of a number.\n    '''\n    return math.cos(x)\ndef sin(x):\n    '''\n    Write a function to calculate the sine of a number.\n    '''\n    return math.sin(x)\ndef tan(x):\n    '''\n    Write a function to calculate the tangent of a number.\n    '''\n    return math.tan(x)\ndef asin(x):\n    '''\n    Write a function to calculate the arc sine of a number.\n    '''\n    return math.asin(x)\ndef acos(x):\n    '''\n    Write a function to calculate the arc cosine of a number.\n    '''\n    return math.acos(x)\ndef atan(x):\n    '''\n    Write a function to calculate the arc tangent of a number.\n    '''\n    return math.atan(x)\ndef ceil(x):\n    '''\n    Write a function to calculate the ceiling of a number.\n    '''\n    return math.ceil(x)\ndef floor(x):\n    '''\n    Write a function to calculate the floor of a number.\n    '''\n    return math.floor(x)\ndef log10(x):\n    '''\n    Write a function to calculate the base-10 logarithm of a number.\n    '''\n    return math.log10(x)\ndef log(x, y):\n    '''\n    Write a function to calculate the base-x logarithm of a number.\n    '''\n    return math.log(x, y)\ndef exp(x):\n    '''\n    Write a function to calculate the exponential of a number.\n    '''\n    return math.exp(x)\ndef pow(x, y):\n    '''\n    Write a function to calculate the x raised to the y power.\n    '''\n    return math.pow(x, y)\ndef sqrt(x):\n    '''\n    Write a function to calculate the square root of a number.\n    '''\n    return math.sqrt(x)\ndef log2(x):\n    '''\n    Write a function to calculate the logarithm of 2 of a number.\n    '''\n    return math.log(x, 2)\ndef log10(x):\n    '''\n    Write a function to calculate the base-10 logarithm of a number.\n    '''\n    return math.log10(x)\ndef log(x, y):\n    '''\n    Write a function to calculate the base-x logarithm of a number.\n    '''\n    return math.log(x, y)\ndef ln(x):\n    '''\n    Write a function to calculate the natural logarithm of a number.\n    '''\n    return math.log(x)\ndef log2(x):\n    '''\n    Write a function to calculate the logarithm of 2 of a number.\n    '''\n    return math.log(x, 2)\ndef log10(x):\n    '''\n    Write a function to calculate the base-10 logarithm of a number.\n    '''\n    return math.log10(x)\ndef log(x, y):\n    '''\n    Write a function to calculate the base-x logarithm of a number.\n    '''\n    return math.log(x, y)\ndef log2(x):\n    '''\n    Write a function to calculate the logarithm of 2 of a number.\n    '''\n    return math.log(x, 2)\ndef log10(x):\n    '''\n    Write a function to calculate the base-10 logarithm of a number.\n    '''\n    return math.log10(x)\ndef log(x, y):\n    '''\n    Write a function to calculate the base-x logarithm of a number.\n    '''\n    return math.log(x, y)\ndef exp(x):\n    '''\n    Write a function to calculate the exponential of a number.\n    '''\n    return math.exp(x)\ndef pow(x, y):\n    '''\n    Write a function to calculate the x raised to the y power.\n    '''\n    return math.pow(x, y)\ndef pi(x):\n    '''\n    Write a function to calculate the value of Pi.\n    '''\n    return math.pi\ndef e(x):\n    '''\n    Write a function to calculate the value of e.\n    '''\n    return math.e\ndef degrees(x):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return math.degrees(x)\ndef radians(x):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(x)\ndef sin(x):\n    '''\n    Write a function to calculate the sine of a number.\n    '''\n    return math.sin(x)\ndef cos(x):\n    '''\n    Write a function to calculate the cosine of a number.\n    '''\n    return math.cos(x)\ndef tan(x):\n    '''\n    Write a function to calculate the tangent of a number.\n    '''\n    return math.tan(x)\ndef arcsin(x):\n    '''\n    Write a function to calculate the arc sine of a number.\n    '''\n    return math.asin(x)\ndef arccos(x):\n    '''\n    Write a function to calculate the arc cosine of a number.\n    '''\n    return math.acos(x)\ndef arctan(x):\n    '''\n    Write a function to calculate the arc tangent of a number.\n    '''\n    return math.atan(x)\ndef arctan2(x, y):\n    '''\n    Write a function to calculate the arc tangent of two numbers.\n    '''\n    return math.atan2(x, y)\ndef fabs(x):\n    '''\n    Write a function to calculate the absolute value of a number.\n    '''\n    return math.fabs(x)\ndef factorial(x):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    return math.factorial(x)\ndef pi():\n    '''\n    Write a function to calculate Pi.\n    '''\n    return math.pi\ndef e():\n    '''\n    Write a function to calculate e.\n    '''\n    return math.e\ndef degrees(x):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return math.degrees(x)\ndef radians(x):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(x)\ndef sin(x):\n    '''\n    Write a function to calculate the sine of a number.\n    '''\n    return math.sin(x)\ndef cos(x):\n    '''\n    Write a function to calculate the cosine of a number.\n    '''\n    return math.cos(x)\ndef tan(x):\n    '''\n    Write a function to calculate the tangent of a number.\n    '''\n    return math.tan(x)\ndef arcsin(x):\n    '''\n    Write a function to calculate the arc sine of a number.\n    '''\n    return math.asin(x)\ndef arccos(x):\n    '''\n    Write a function to calculate the arc cosine of a number.\n    '''\n    return math.acos(x)\ndef arctan(x):\n    '''\n    Write a function to calculate the arc tangent of a number.\n    '''\n    return math.atan(x)\ndef arctan2(x, y):\n    '''\n    Write a function to calculate the arc tangent of two numbers.\n    '''\n    return math.atan2(x"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    result = pattern.search(text)\n    if result:\n        sub = result.group(0)\n        start = result.start()\n        end = result.end()\n        return sub, start, end\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    l = pattern.split()\n    text = text.split()\n    \n    for i in l:\n        if i not in text:\n            return False\n    \n    if l[0] == text[0]:\n        return l[0], 1, l[1] + 1\n    \n    else:\n        l = find_literals(text[1:], l[1])\n        return l[0], l[1] + 1, l[2] + 1\n    \n    \ndef find_all_captures(pattern, text):\n    '''\n    Write a function to search a string for a regex pattern. The function should return a list of tuples containing the matching strings, a start index and an end index.\n    '''\n    l = pattern.split()\n    \n    if l[0] == text[0]:\n        return [l]\n    else:\n        l = find_all_captures(l[1], text[1:])\n        return l + [text[0]]\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result is not None:\n        return result.group(1)\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # pattern = re.compile(pattern)\n    # p = re.search(pattern, text)\n    # if p:\n    #     match = p.group(0)\n    #     start = p.start(0)\n    #     end = p.end(0)\n    # else:\n    #     match = None\n    #     start = 0\n    #     end = 0\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #pattern = r\"\\d{1,3}\"\n    regex = re.compile(pattern)\n    match = regex.search(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if re.search(pattern, text) == None:\n        return None\n    else:\n        return (re.search(pattern, text).group(), re.search(pattern, text).start(), re.search(pattern, text).end())\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        return re.search(pattern, text).span()\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    result = pattern.findall(text)\n    if result:\n        return result[0]\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    l = 0\n    n = 0\n    index = 0\n    index_end = 0\n    while n < len(text):\n        if text[n] == pattern[l]:\n            l += 1\n            if l == len(pattern):\n                index_end = n\n                index = n\n                return text[index:index_end], index, index_end\n        else:\n            l = 0\n        n += 1\n    return -1, -1, -1\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    sum = 1\n    for i in range(1,n+1):\n        sum = sum*i\n    return sum\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (bell_Number(n-1)+1)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #function to calculate the bell number\n    def bell_number(n):\n        result = 0\n        for i in range(1,n+1):\n            result += i*(i+1)//2\n        return result\n    #iterate over bell_number\n    if n == 1:\n        return 1\n    return bell_number(n-1)+1\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    res = 1\n    for i in range(1, n+1):\n        res = res * (n-i+1) / i\n    return int(res)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a=0\n    for i in range(1,n+1):\n        a=a+1/i\n    return a\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def be(n):\n        if n == 0:\n            return 1\n        else:\n            return be(n-1)+be(n-2)\n    return be(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = []\n    bell.append(0)\n    bell.append(1)\n    for i in range(2,n+1):\n        bell.append(bell[i-1]+bell[i-2])\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 1: \n        return 1\n    else: \n        return bell_Number(n - 1) + bell_Number(n - 2) + 1\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if(n<=1): \n        return 1\n    else: \n        return (n * bell_Number(n - 1)) \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]+list1[L:]\n    \n    \ndef smallest_of_list(list1):\n    '''\n    Write a python function which returns the smallest element in the list.\n    '''\n    return min(list1)\n    \n    \ndef find_second_min(list1):\n    '''\n    Write a python function which returns the smallest element in the list.\n    '''\n    return list(list1)[::2]\n    \n    \ndef find_third_max(list1):\n    '''\n    Write a python function which returns the largest element in the list.\n    '''\n    return max(list1)\n    \n    \ndef find_mean(list1):\n    '''\n    Write a python function which returns the mean of the elements in the list.\n    '''\n    return sum(list1) / len(list1)\n    \n    \ndef find_count_negative(list1):\n    '''\n    Write a python function which returns the number of negative numbers in the list.\n    '''\n    count = 0\n    for i in list1:\n        if i < 0:\n            count = count + 1\n    return count\n    \n    \ndef find_count_positive(list1):\n    '''\n    Write a python function which returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for i in list1:\n        if i > 0:\n            count = count + 1\n    return count\n    \n    \ndef find_count_even(list1):\n    '''\n    Write a python function which returns the number of even numbers in the list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count = count + 1\n    return count\n    \n    \ndef find_count_odd(list1):\n    '''\n    Write a python function which returns the number of odd numbers in the list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2!= 0:\n            count = count + 1\n    return count\n    \n    \ndef find_count_zero(list1):\n    '''\n    Write a python function which returns the number of zeros in the list.\n    '''\n    count = 0\n    for i in list1:\n        if i == 0:\n            count = count + 1\n    return count\n    \n    \ndef find_count_non_zero(list1):\n    '''\n    Write a python function which returns the number of non-zeros in the list.\n    '''\n    count = 0\n    for i in list1:\n        if i!= 0:\n            count = count + 1\n    return count\n    \n    \ndef add_10_to_each_element(list1):\n    '''\n    Write a python function which adds 10 to each element of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i] + 10\n    return list1\n    \n    \ndef find_the_number_with_maximum_occurence(list1):\n    '''\n    Write a python function which returns the maximum occurance of a number in the list.\n    '''\n    max = 0\n    for i in list1:\n        if list1.count(i) > max:\n            max = list1.count(i)\n    return max\n    \n    \ndef is_even_or_odd(list1):\n    '''\n    Write a python function which returns true if the list contains an even number of elements, otherwise returns false.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count = count + 1\n    if count == len(list1):\n        return True\n    else:\n        return False\n    \n    \ndef find_largest_and_second_smallest(list1):\n    '''\n    Write a python function which returns the maximum element and second largest element in the list.\n    '''\n    max = list1[0]\n    for i in range(len(list1)):\n        if list1[i] > max:\n            max = list1[i]\n    min = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < min:\n            min = list1[i]\n    return max, min\n    \n    \ndef find_max_and_min_in_list(list1):\n    '''\n    Write a python function which returns the maximum and minimum element in the list.\n    '''\n    max = list1[0]\n    for i in list1:\n        if i > max:\n            max = i\n    min = list1[0]\n    for i in list1:\n        if i < min:\n            min = i\n    return max, min\n    \n    \ndef find_max_and_min_even_or_odd(list1):\n    '''\n    Write a python function which returns the maximum and minimum element in the list if they are even or odd.\n    '''\n    max = list1[0]\n    min = list1[0]\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if list1[i] > max:\n                max = list1[i]\n            if list1[i] < min:\n                min = list1[i]\n        else:\n            if list1[i] > max:\n                max = list1[i]\n            if list1[i] < min:\n                min = list1[i]\n    return max, min\n    \n    \ndef find_index_of_first_element(list1):\n    '''\n    Write a python function which returns the index of the first element in the list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == list1[0]:\n            return i\n    return -1\n    \n    \ndef find_index_of_last_element(list1):\n    '''\n    Write a python function which returns the index of the last element in the list.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] == list1[len(list1)-1]:\n            return i\n    return -1\n    \n    \ndef sum_of_list_elements(list1):\n    '''\n    Write a python function which returns the sum of all the elements in the list.\n    '''\n    s = 0\n    for i in list1:\n        s = s + i\n    return s\n    \n    \ndef sum_of_list_elements_except_first_and_last_element(list1):\n    '''\n    Write a python function which returns the sum of all the elements except the first and last element in the list.\n    '''\n    s = 0\n    for i in range(1, len(list1)-1):\n        s = s + list1[i]\n    return s\n    \n    \ndef sum_of_list_elements_except_last_element_to_first_element(list1):\n    '''\n    Write a python function which returns the sum of all the elements except the last element to the first element in the list.\n    '''\n    s = 0\n    for i in range(len(list1)-2):\n        s = s + list1[i]\n    return s\n    \n    \ndef sum_of_list_elements_with_index(list1, k):\n    '''\n    Write a python function which returns the sum of all the elements in the list except the k'th element.\n    '''\n    s = 0\n    for i in range(0, k):\n        s = s + list1[i]\n    for i in range(k+1, len(list1)):\n        s = s + list1[i]\n    return s\n    \n    \ndef sum_of_list_elements_with_index_1(list1, k):\n    '''\n    Write a python function which returns the sum of all the elements in the list except the k'th element.\n    '''\n    s = 0\n    for i in range(0, k):\n        s = s + list1[i]\n    for i in range(k+1, len(list1)):\n        s = s + list1"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i=1\n    for x in range(len(list1)-1):\n        if i!= L:\n            list1[x]=list1[x+1]\n        i+=1\n    del list1[len(list1)-1]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1)):\n        if i == L-1:\n            continue\n        else:\n            list1[i] = list1[i+1]\n    return list1[:-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    l = list(list1)\n    del l[L]\n    return l\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.pop(L.index(L[k-1]))\n    return L\n    \nlist1 = [1,2,3,4,5]\nk = 5\nremove_kth_element(list1, k)\nprint(list1)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # return list1[:k] + list1[k+1:]\n    # return list1[:k] + list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #Initialize the variables\n    first_index = 0\n    last_index = len(list1)-1\n    mid_index = (first_index + last_index) // 2\n    found = False\n    kth_element_index = 0\n    \n    #As long as the list is not empty and the mid index is not the kth element, keep searching\n    while (first_index <= last_index) and not found:\n        if (mid_index == L):\n            found = True\n        elif (mid_index > L):\n            last_index = mid_index - 1\n        else:\n            first_index = mid_index + 1\n        mid_index = (first_index + last_index) // 2\n    \n    #Find the correct index for the element that should be removed\n    if found:\n        #If the element is found, remove it\n        if mid_index == L:\n            return list1[:mid_index] + list1[mid_index+1:]\n        else:\n            kth_element_index = mid_index\n    return list1[:kth_element_index] + list1[kth_element_index+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k-1]+list1[k:]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = list(test_list[0])\n    for i in range(N):\n        for j in range(len(max)):\n            if max[j] < test_list[i][j]:\n                max[j] = test_list[i][j]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N >= len(test_list):\n        return False\n    else:\n        test_max = 0\n        for i in range(len(test_list)):\n            test_max = max(test_max, test_list[i][N])\n        return test_max\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #Solution 1 - Using max\n    #max_nth = []\n    #for i in range(N):\n    #    max_nth.append(max(test_list[i]))\n    #return max_nth\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # print(test_list)\n    cols = len(test_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(sum([l[i] for i in range(len(l)) if i<=N], []))\n    \n    \ndef find_max(lst, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # lst = max_of_nth(lst, N)\n    # print(lst)\n    return max(lst)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j < N - 1:\n                continue\n            else:\n                return test_list[i][j]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    import numpy as np\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = []\n    for i in range(len(test_list)):\n        max_col.append(max(test_list[i][N]))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[N-1])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    for i in range(len(lst)):\n        lst[i].insert(0,lst[i][0])\n        lst[i].insert(1,lst[i][1])\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    for i in range(len(lst)):\n        if len(lst[i]) == 1:\n            lst[i] = lst[i] + lst[i]\n        elif len(lst[i]) == 2:\n            lst[i].reverse()\n            lst[i] = lst[i] + lst[i]\n        else:\n            lst[i].reverse()\n            lst[i] = lst[i]\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst == []:\n        return []\n    first = lst[0]\n    rest = merge(lst[1:])\n    return [[first[0],first[1]],rest]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return_lst = []\n    for lst_1 in lst:\n        for lst_2 in lst:\n            if lst_1[0] == lst_2[0]:\n                lst_1.append(lst_2[1])\n                lst_2.clear()\n                break\n            else:\n                pass\n        return_lst.append(lst_1)\n    return return_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append(lst[i][0])\n        merged_list.append(lst[i][1])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append(sublist[0])\n        merged_list.append(sublist[1])\n    return merged_list\n    \n    \nmerge_example = [[1,2],[3,4],[5,6],[7,8]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[a[0] for a in lst],[a[1] for a in lst]]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_lst = []\n    for item in range(len(lst)):\n        lst_lst.append([lst[item][0], lst[item][1]])\n    return lst_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst.sort()\n    merged_lst = []\n    for i in range(len(lst)):\n        if i == 0:\n            merged_lst.append(lst[i])\n        else:\n            if lst[i][0] <= lst[i - 1][0]:\n                merged_lst.append(lst[i])\n    return merged_lst\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        result += test_list[i]\n        print(result)\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i)\n    if len(new_list) == 0:\n        return []\n    if len(new_list) == 1:\n        return new_list\n    new_list = sorted(new_list)\n    if new_list[0] == 0:\n        return new_list\n    else:\n        new_list = list(new_list)\n        i = 0\n        while i < len(new_list):\n            if i == 0:\n                new_list[i] = new_list[i] + new_list[i + 1]\n            elif i == len(new_list) - 1:\n                new_list[i] = new_list[i] + new_list[i - 1]\n            else:\n                new_list[i] = new_list[i] + new_list[i + 1] + new_list[i - 1]\n            i += 1\n        return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(1,len(test_list)):\n        result.append(sum(test_list[:i+1]))\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    tuple_list=[]\n    for i in range(0,len(test_list)):\n        total=0\n        for j in range(0,i+1):\n            total=total+test_list[j]\n            tuple_list.append(total)\n    print(tuple_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum_list = []\n    cummulative_sum_list.append(0)\n    for i in test_list:\n        cummulative_sum_list.append(cummulative_sum_list[-1] + i)\n    return cummulative_sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your Code Here\n    # for example:\n    # if test_list == ['I','L','D','V','I','X']:\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','X'])\n    #     print(['I','L','D','V','I','"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    tup = (1,2,3,4)\n    cummulative = 0\n    for i in range(len(tup)):\n        cummulative = cummulative + tup[i]\n    return cummulative\n    \nprint(cummulative_sum(tup))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    lst = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-1,0,-1):\n            if test_list[j] > test_list[j-1]:\n                lst.append(test_list[j])\n                break\n            else:\n                lst.append(test_list[j-1])\n    return lst\nprint(\"Test 1: \", cummulative_sum([2, 1, 3, 5, 7]))\nprint(\"Test 2: \", cummulative_sum([3, 4, 1, 2]))\nprint(\"Test 3: \", cummulative_sum([1, 2, 3, 4, 5]))\nprint(\"Test 4: \", cummulative_sum([-10, -5, -3, -2]))\nprint(\"Test 5: \", cummulative_sum([1, -2, -3, -4]))\nprint(\"Test 6: \", cummulative_sum([]))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for item in test_list:\n        total_sum = total_sum + item\n        return total_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    avg_list = []\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    average_list = []\n    for num in nums:\n        total += num[0]\n        count += 1\n    average_list.append(total/count)\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_tuple = tuple(map(sum, nums))\n    avg_list = []\n    for i in range(len(new_tuple)):\n        if len(new_tuple) == 0:\n            avg_list = []\n            return avg_list\n        avg_list.append(new_tuple[i] / len(new_tuple))\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for i in nums:\n        tuple_list.append(i)\n    new_tuple = tuple(tuple_list)\n    average_tuple_list = []\n    for i in new_tuple:\n        if type(i)!= list:\n            continue\n        for j in i:\n            if type(j)!= int:\n                continue\n        total = 0\n        for k in i:\n            total += k\n        average = total/len(i)\n        average_tuple_list.append(average)\n    return average_tuple_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    newList = []\n    for x in nums:\n        newList.append(sum(x)/len(x))\n    return newList\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in range(len(nums)):\n        average.append(sum(nums[i])/len(nums[i]))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in range(len(nums)):\n        total.append(sum(nums[i])/len(nums[i]))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums = [n for n in nums if len(n) > 0]\n    return [(i, sum(j)/len(j)) for i, j in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x:sum(x)/len(x),nums))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = tuple(map(int, test_tup1))\n    test_tup2 = tuple(map(int, test_tup2))\n    return tuple(map(lambda i: i % test_tup2[i], range(len(test_tup1))))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (tup1[i] % tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if type(test_tup1) is not tuple:\n        raise ValueError('First argument must be a tuple')\n    if type(test_tup2) is not tuple:\n        raise ValueError('Second argument must be a tuple')\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must be of equal length')\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x,y:x % y, test_tup1, test_tup2))\n    else:\n        raise ValueError('Both tuples must have the same length')\n    \n    \ndef cube_sum(test_num):\n    '''\n    Write a function which takes a single number and squares it and then sums all of the cubes of each digit of the number.\n    '''\n    if isinstance(test_num, int):\n        return sum(map(lambda x: x**3, range(10)))\n    else:\n        raise TypeError(\"'test_num' should be an integer\")\n    \ndef sum_digits(test_num):\n    '''\n    Write a function which takes a single number and returns the sum of all of the digits.\n    '''\n    if isinstance(test_num, int):\n        return sum(map(int, str(test_num)))\n    else:\n        raise TypeError(\"'test_num' should be an integer\")\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return(tuple(x%y for x, y in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Brute force \n    ans = []\n    for i in range(len(test_tup1)):\n        ans.append((test_tup1[i]%test_tup2[i]) + 0)\n    return tuple(ans)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Your code here\n    test_res = []\n    for i in range(len(test_tup1)):\n        test_res.append(test_tup1[i]%test_tup2[i])\n    return test_res\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    if n == 0: \n        return 0\n    dp = [0] * n \n    dp[0] = 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 1\n    while(i <= steps):\n        if(i > 0):\n            if(d >= (i-1)):\n                d = d - i\n                jumps = jumps + 1\n            else:\n                d = 0\n                i = i + 1\n        else:\n            d = d\n            i = i + 1\n    return jumps\n    \ndef min_Jumps2(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 1\n    while(i <= steps):\n        if(i > 0):\n            if(d >= (i-1)):\n                d = d - i\n                jumps = jumps + 1\n            else:\n                d = 0\n                i = i + 1\n        else:\n            d = d\n            i = i + 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps <= 0): \n        return -1\n    j = 1\n    for i in range(1, steps): \n        if (i + d <= steps and i - d >= 0): \n            j += 1\n    return j \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(1, steps + 1):\n        if (i >= d):\n            count += 1\n    return count\n    \nprint(min_Jumps(4, 4))"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_step = 0\n    while current_step <= steps:\n        current_step += d\n        jumps += 1\n        if current_step == 0:\n            break\n        if current_step >= steps:\n            break\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Create a set to store elements\n    # Create a queue and enqueue a tuple (0,0)\n    # if the difference between the current point and (0,0) is smaller than steps, enqueue a tuple (0,1)\n    # if it is bigger than steps, enqueue a tuple (1,0)\n    # if the difference is equal to steps, then if it is greater than 0, enqueue a tuple (1,1)\n    # if the difference is equal to 0, then enqueue a tuple (2,0)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return 0\n    else:\n        if (d == 0):\n            return steps\n        else:\n            if (d == 1):\n                return steps + 1\n            else:\n                return min(steps + 1, min_Jumps(steps - 1, d - 1) + 1, min_Jumps(steps - 1, d) + 1)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def is_reachable(steps): \n        if steps >= d: \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    def find_min_jumps(cur_pos, steps, d, path, jumps): \n        min_jumps = 0\n        \n        if cur_pos == (d, 0): \n            min_jumps = jumps + 1\n            \n        else: \n            if (cur_pos[0] + 1) < d: \n                path.append((cur_pos[0] + 1, 0))\n                min_jumps = find_min_jumps(cur_pos=(cur_pos[0] + 1, 0), steps=steps - 1, d=d, path=path, jumps=jumps + 1) \n                path.pop()\n            \n            if (cur_pos[1] + 1) < d: \n                path.append((cur_pos[1] + 1, 0))\n                min_jumps = find_min_jumps(cur_pos=(cur_pos[1] + 1, 0), steps=steps - 1, d=d, path=path, jumps=jumps + 1) \n                path.pop()\n            \n            if (cur_pos[0] - 1) >= 0: \n                path.append((cur_pos[0] - 1, 0))\n                min_jumps = find_min_jumps(cur_pos=(cur_pos[0] - 1, 0), steps=steps - 1, d=d, path=path, jumps=jumps + 1) \n                path.pop()\n            \n            if (cur_pos[1] - 1) >= 0: \n                path.append((cur_pos[1] - 1, 0))\n                min_jumps = find_min_jumps(cur_pos=(cur_pos[1] - 1, 0), steps=steps - 1, d=d, path=path, jumps=jumps + 1) \n                path.pop()\n        \n        return min_jumps\n    \n    #find min jumps \n    jumps = find_min_jumps((0, 0), steps, d, [], 0)\n    print(jumps)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    while steps > d:\n        steps -= d\n        jumps += 1\n    return jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1=nums1[:];\n    nums2=nums2[:];\n    nums1.extend(nums2);\n    return nums1;\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [a/b for a,b in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1,num2 in zip(nums1,nums2):\n        result.append(num1/num2)\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [i/j for i,j in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]//nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_nums = []\n    for i in range(len(nums1)):\n        try:\n            div_nums.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            pass\n        except TypeError:\n            pass\n        except ValueError:\n            pass\n        else:\n            div_nums.append(nums1[i] / nums2[i])\n    return div_nums\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]/nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i = 0\n    j = 0\n    len1 = len(nums1)\n    len2 = len(nums2)\n    new_list = []\n    while i < len1 and j < len2:\n        if nums1[i] % 2 == 0:\n            new_list.append(nums1[i])\n        if nums2[j] % 2 == 1:\n            new_list.append(nums2[j])\n        i += 1\n        j += 1\n    while i < len1:\n        new_list.append(nums1[i])\n        i += 1\n    while j < len2:\n        new_list.append(nums2[j])\n        j += 1\n    return new_list\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) == 0:\n        return \"\"\n    else:\n        pass\n    \ndef write_file(filename, file_content):\n    '''\n    Write the file_content to the given filename.\n    '''\n    if len(file_content) == 0:\n        pass\n    else:\n        f = open(filename, \"w\")\n        f.write(file_content)\n        f.close()\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return ''\n    \n    s = list(test_str)\n    end = 0\n    start = 0\n    while start < len(s):\n        try:\n            idx = s.index(s[start], end)\n            end = idx + 1\n        except ValueError:\n            end = start\n            break\n        start += 1\n    \n    while end < len(s):\n        s.insert(start, s[end])\n        start += 1\n        end += 1\n    \n    return ''.join(s)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = test_str.split()\n    for i in range(len(numbers)):\n        if numbers[i].isdigit():\n            numbers.append(numbers.pop(i))\n    return \" \".join(numbers)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    others = []\n    for c in test_str:\n        if c.isnumeric():\n            nums.append(c)\n        else:\n            others.append(c)\n    return \"\".join(nums + others)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s_list = list(test_str)\n    for i in range(len(s_list)):\n        if s_list[i].isnumeric():\n            s_list.pop(i)\n            s_list.append(s_list[i])\n    return ''.join(s_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = list(test_str)\n    num_list = []\n    for item in str_list:\n        if item.isdigit():\n            num_list.append(item)\n    num_list.reverse()\n    for item in num_list:\n        str_list.remove(item)\n        str_list.append(item)\n    return ''.join(str_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split(' ')\n    temp = test_str[0]\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_str[i] = temp\n            temp = test_str[i]\n    return''.join(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return test_str\n    result = []\n    number = []\n    for i in test_str:\n        if i.isnumeric():\n            number.append(i)\n        else:\n            if number:\n                result += number\n                number = []\n            result.append(i)\n    if number:\n        result += number\n    return ''.join(result)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # arr = [int(i) for i in test_str if i.isnumeric()]\n    # if arr:\n    #     return ''.join(sorted(test_str, key=lambda x: int(x)))\n    # else:\n    #     return '0'\n    return ''.join(sorted([x for x in test_str if x.isnumeric()], key=int))\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    final_str = ''\n    for i in test_str:\n        if i.isdigit():\n            final_str += i\n    return final_str + test_str[:len(test_str)-len(final_str)]\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_len = 0\n    for i in range(n-1):\n        j = i+1\n        while j < n:\n            if a[i]%a[j] == 0:\n                if j-i > max_len:\n                    max_len = j-i\n            j = j+1\n    return max_len\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    arr = []\n    i = 1\n    n = len(a)\n    while i < n:\n        if a[i] % a[i - 1]!= 0:\n            arr.append(a[i])\n            i += 1\n        else:\n            i += 1\n    return len(arr)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a)<=0:\n        return []\n    \n    if len(a)==1:\n        return a\n    if len(a)==2:\n        return max(a)\n    \n    if a[0]%a[1]==0:\n        return a\n    \n    smaller = a[1:]\n    new_list = []\n    for i in smaller:\n        if i%a[0]==0:\n            new_list.append(i)\n    return max(a+new_list)\n    \n    \ndef get_nth_number(n):\n    '''\n    Write a function to find the nth number from the end of a given array.\n    '''\n    if n<=0:\n        return []\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    \n    if n>=3:\n        if n%2==0:\n            return n+1\n        else:\n            return n-1\n    \n    if n%2!=0:\n        return n-2\n    \ndef get_odd_count(a):\n    '''\n    Write a function that returns the count of odd numbers in an array.\n    '''\n    if len(a)<=0:\n        return 0\n    if len(a)==1:\n        return 1 if a[0]%2!=0 else 0\n    if len(a)==2:\n        return 1 if a[0]%2!=0 else 1\n    \n    if a[0]%2!=0:\n        return 1+get_odd_count(a[1:])\n    else:\n        return get_odd_count(a[1:])\n    \ndef get_common_characters(a,b):\n    '''\n    Write a function that accepts 2 arrays of strings and returns a string containing the characters they share.\n    '''\n    if len(a)<=0 or len(b)<=0:\n        return \"\"\n    if len(a)==1 and len(b)==1:\n        return a[0]+b[0]\n    if len(a)<=len(b):\n        return get_common_characters(a[1:],b)\n    if len(a)>len(b):\n        return get_common_characters(a,b[1:])\n    if a[0]==b[0]:\n        return a[0]+get_common_characters(a[1:],b[1:])\n    \ndef find_first_duplicate_value(a):\n    '''\n    Write a function that accepts an array and returns the first duplicate value in the array.\n    '''\n    if len(a)<=0:\n        return -1\n    if len(a)==1:\n        return 0 if a[0]==a[0] else -1\n    \n    if a[0]==a[1]:\n        return find_first_duplicate_value(a[2:])\n    if a[0]!=a[1]:\n        return find_first_duplicate_value(a[1:])\n    \ndef is_unique_array(a):\n    '''\n    Write a function that accepts an array and returns true if it is a unique array and false if it contains duplicate values.\n    '''\n    if len(a)<=0:\n        return True\n    if len(a)==1:\n        return True if a[0]!=a[0] else False\n    \n    if a[0]==a[1]:\n        return False\n    if a[0]!=a[1]:\n        return is_unique_array(a[1:])\n    \ndef longest_consecutive_sequence(a):\n    '''\n    Write a function that accepts an array and returns the length of the longest consecutive sequence.\n    '''\n    if len(a)<=0:\n        return 0\n    if len(a)==1:\n        return 1\n    \n    if a[0]==a[1]:\n        return 1+longest_consecutive_sequence(a[1:])\n    else:\n        return max(longest_consecutive_sequence(a[1:]),1+longest_consecutive_sequence(a[2:]))\n    \ndef get_largest_number(a):\n    '''\n    Write a function to find the largest number from an array of numbers.\n    '''\n    if len(a)<=0:\n        return []\n    if len(a)==1:\n        return a[0]\n    if a[0]<a[1]:\n        return max(a[1],get_largest_number(a[2:]))\n    else:\n        return get_largest_number(a[1:])\n    \ndef reverse_number(a):\n    '''\n    Write a function that reverses a number.\n    '''\n    if len(a)<=0:\n        return 0\n    if len(a)==1:\n        return a[0]\n    if a[0]>=0:\n        return reverse_number(a[1:])+a[0]\n    else:\n        return -reverse_number(a[1:])+a[0]\n    \ndef reverse_list(a):\n    '''\n    Write a function that reverses a list of numbers.\n    '''\n    if len(a)<=0:\n        return []\n    if len(a)==1:\n        return a\n    if a[0]>=0:\n        return a[0]+reverse_list(a[1:])\n    else:\n        return -reverse_list(a[1:])+a[0]\n    \ndef is_list_palindrome(a):\n    '''\n    Write a function that returns true if a list of numbers is a palindrome.\n    '''\n    if len(a)<=0:\n        return False\n    if len(a)==1:\n        return True\n    if a[0]==a[-1]:\n        return is_list_palindrome(a[1:-1])\n    else:\n        return False\n    \ndef find_max_sub_array(a):\n    '''\n    Write a function that takes a list of numbers and returns the maximum sum of any contiguous subarray.\n    '''\n    if len(a)<=0:\n        return 0\n    if len(a)==1:\n        return a[0]\n    if a[0]>a[1]:\n        return find_max_sub_array(a[1:])\n    else:\n        return max(a[0],find_max_sub_array(a[1:]))\n    \ndef find_max_sum_subarray(a):\n    '''\n    Write a function that takes a list of numbers and returns the maximum sum of any contiguous subarray.\n    '''\n    if len(a)<=0:\n        return 0\n    if len(a)==1:\n        return a[0]\n    if a[0]>a[1]:\n        return find_max_sum_subarray(a[1:])\n    else:\n        return max(a[0],find_max_sum_subarray(a[1:]))\n    \ndef get_sorted_list(a):\n    '''\n    Write a function that returns a sorted list of numbers from an unsorted list.\n    '''\n    if len(a)<=0:\n        return []\n    if len(a)==1:\n        return a\n    \n    if a[0]<=a[1]:\n        return get_sorted_list(a[1:])+a[0]\n    else:\n        return get_sorted_list(a[1:])+a[0]\n    \ndef find_index_of_value_in_sorted_list(a,v):\n    '''\n    Write a function that finds the index of a value in a sorted array of numbers.\n    '''\n    if len(a)<=0 or a[0]>a[-1]:\n        return -1\n    if a[0]==v:\n        return 0\n    \n    if a[0]<v:\n        return find_index_of_value_in_sorted_list(a[1:],v)\n    if a[0]>v:\n        return find_index_of_value"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a)==0:\n        return 0\n    if len(a)==1:\n        return 1\n    if len(a)==2:\n        if (a[0]*2==a[1]) or (a[1]*2==a[0]):\n            return 2\n        return 1\n    max_length=1\n    for i in range(len(a)-1):\n        if (a[i]*2==a[i+1]) or (a[i+1]*2==a[i]):\n            length=2\n            for j in range(i+2,len(a)):\n                if (a[i]*2==a[j]) or (a[j]*2==a[i]):\n                    length+=1\n            max_length=max(max_length,length)\n    return max_length\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    res = []\n    n = len(a)\n    dp = [[0 for _ in range(n+1)] for _ in range(n)]\n    dp[0][1] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i]%a[j] == 0:\n                dp[i][j+1] = dp[i-1][j] + 1\n            else:\n                dp[i][j+1] = max(dp[i-1][j+1], dp[i][j])\n    return max(dp[n-1])\n    \nprint(largest_subset([10, 3, 4, 8, 1]))\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_divisible_subset(a):\n        n=len(a)\n        s={}\n        def max_value_subset(a,s,n):\n            if s=={}:\n                if n==0:\n                    s[0]=0\n                else:\n                    s[0]=1\n                return 1\n            if a[0]%s[0]==0:\n                s[0]=1\n                return 1\n            if s[0]==0:\n                s[0]=0\n                return 0\n            if a[0]%s[0]==1:\n                s[0]=0\n                return 0\n            if a[0]%s[0]==2:\n                s[0]=1\n                return 0\n            for i in range(1,n):\n                if s[i-1]==0:\n                    s[i]=0\n                elif s[i-1]==1:\n                    s[i]=1\n                elif a[i]%s[i-1]==0:\n                    s[i]=1\n                elif a[i]%s[i-1]==1:\n                    s[i]=0\n                elif a[i]%s[i-1]==2:\n                    s[i]=1\n            return s[n-1]\n        for i in range(1,n):\n            s[i]=max_value_subset(a,s,i)\n        return max_value_subset(a,s,n)\n    return largest_divisible_subset(a)\n    \n    \ndef largest_divisible_subset_2(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_divisible_subset(a):\n        n=len(a)\n        s={}\n        def max_value_subset(a,s,n):\n            if s=={}:\n                if n==0:\n                    s[0]=0\n                else:\n                    s[0]=1\n                return 1\n            if a[0]%s[0]==0:\n                s[0]=1\n                return 1\n            if s[0]==0:\n                s[0]=0\n                return 0\n            if a[0]%s[0]==1:\n                s[0]=0\n                return 0\n            if a[0]%s[0]==2:\n                s[0]=1\n                return 0\n            for i in range(1,n):\n                if s[i-1]==0:\n                    s[i]=0\n                elif s[i-1]==1:\n                    s[i]=1\n                elif a[i]%s[i-1]==0:\n                    s[i]=1\n                elif a[i]%s[i-1]==1:\n                    s[i]=0\n                elif a[i]%s[i-1]==2:\n                    s[i]=1\n            return max(s)\n        for i in range(1,n):\n            s[i]=max_value_subset(a,s,i)\n        return max(s)\n    return largest_divisible_subset(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_len = 0\n    max_set = []\n    for i in range(0, len(a)):\n        for j in range(i+1, len(a)):\n            subset = a[i] + a[j]\n            if subset % 2!= 0:\n                if subset > max_len:\n                    max_len = subset\n                    max_set = [a[i], a[j]]\n    print(max_set)\n    return max_len\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    largest_size = 0\n    curr_size = 0\n    for i in range(0,len(a)):\n        for j in range(i+1,len(a)):\n            curr_size = a[i] / a[j]\n            if curr_size == int(curr_size):\n                curr_size = int(curr_size)\n                if curr_size > largest_size:\n                    largest_size = curr_size\n    return largest_size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #Sort the array\n    a.sort()\n    \n    #Use a set\n    n = len(a)\n    set = set()\n    #Initialize size and end to 0\n    size = 0\n    end = 0\n    \n    #Loop over the range of 2 to n\n    for i in range(2,n+1):\n        #Store the first element\n        first = i\n        \n        #Check if it is divisible by any element in the subset\n        for j in set:\n            if a[i-1]%j == 0:\n                first = j\n                break\n        \n        #If the first element is not divisible by any element in the subset, add it to the subset\n        if first!= i:\n            set.add(i)\n        \n        #If this subset has size 2, increase the size\n        if len(set) == 2:\n            size = max(size,2)\n            end = i\n        \n    #Return the size\n    return size\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a)==0:\n        return 0\n    a.sort()\n    sum=0\n    temp=0\n    for i in range(0,len(a)):\n        if i==0 or a[i]%a[i-1]==0:\n            sum+=1\n            temp=a[i]\n        else:\n            break\n    sum+=1\n    return sum,temp\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n    elif n == 1:\n        if arr1[0] < arr2[0]:\n            return arr1[0]\n        else:\n            return arr2[0]\n    elif n == 2:\n        if arr1[0] < arr2[0]:\n            return min(arr1[0], arr2[0])\n        else:\n            return max(arr1[0], arr2[0])\n    if n == 3:\n        return sorted(arr1 + arr2)[1]\n    else:\n        if arr1[n//2] < arr2[n//2]:\n            return get_median(arr1[:n//2], arr2[:n//2], n//2)\n        else:\n            return get_median(arr1[n//2:], arr2[n//2:], n//2)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # in case the lists are empty.\n    if len(arr1) == 0:\n        return arr2[(n-1)//2]\n    if len(arr2) == 0:\n        return arr1[(n-1)//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1, l2 = 0, 0\n    for i in range(n):\n        if arr1[i] < arr2[i]:\n            l1 += 1\n        else:\n            l2 += 1\n    if l1 > l2:\n        return arr1[l1//2]\n    else:\n        return arr2[l2//2]\n    "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m1 = m2 = 0\n    for i in range(n):\n        if arr1[i] <= arr2[m2]:\n            m1 += 1\n            m2 += 1\n        else:\n            m1 += 1\n            m2 += 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # arr1 = sorted(arr1)\n    # arr2 = sorted(arr2)\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    mid = int(n/2)\n    if n % 2 == 1:\n        return arr1[mid]\n    else:\n        return (arr1[mid-1]+arr1[mid])/2\n    # return (arr1[mid-1]+arr1[mid])/2 if (n%2==1) else (arr1[mid]+arr1[mid-1])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1_index = int(n/2) - 1\n    arr2_index = int(n/2)\n    if arr1[arr1_index] < arr2[arr2_index]:\n        return arr1[arr1_index]\n    return arr2[arr2_index]\n    "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        return (arr1[n//2] + arr2[n//2 -1])/2\n    else:\n        return (arr1[n//2] + arr2[n//2])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if n == 0 or n == 1:\n        return (0,0)\n    if n == 2:\n        if arr1[0] > arr2[0]:\n            return (arr2[0], arr2[1])\n        else:\n            return (arr1[0], arr1[1])\n    for i in range(n-1):\n        if arr1[i] > arr2[n-1-i]:\n            return (arr2[n-1-i], arr2[n-1])\n        else:\n            return (arr1[i], arr1[n-1-i])\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1_size = len(arr1)\n    arr2_size = len(arr2)\n    total_size = arr1_size + arr2_size\n    # print('arr1_size :', arr1_size)\n    # print('arr2_size :', arr2_size)\n    # print('total_size :', total_size)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    n_nums = []\n    for num in nums:\n        n_nums.append(num**n)\n    return n_nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums = list(map(lambda x: x ** n, nums))\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    return nth_nums(nums,n-1) + [x*n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    for i in range(0,len(nums)):\n        nums[i]=nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n <= 0:\n        return []\n    if n == 1:\n        return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    result = []\n    for i in range(len(nums)):\n        result.append(n ** i)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert len(nums) == len(n)\n    if n[0]==0:\n        return [0]\n    out = [0]*len(n)\n    out[0] = 1\n    for i in range(1,len(n)):\n        if n[i-1]==0:\n            out[i]=1\n        else:\n            out[i] = out[i-1] * n[i-1]\n    return out\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_copy = nums.copy()\n    for i in range(len(nums_copy)):\n        nums_copy[i] = nums_copy[i]**n\n    return nums_copy\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    \n    result = ''\n    for i in string:\n        if i.isupper():\n            result += i.upper()\n        else:\n            result += i\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #Input from user\n    #string = input('Enter the string to be converted in upper case: ')\n    \n    #Converting string into uppercase\n    string = string.upper()\n    \n    #printing the final output\n    print('Upper case string:', string)\n    \n    "
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # your code here\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n    \ndef new_List_to_another(newList): \n    '''\n    Write a python function to concatenate two lists.\n    '''\n    newList = newList + newList\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    swap_List = newList[-1] + newList[1:len(newList)] + newList[0:1]\n    return swap_List\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if(len(newList)>1):\n        return newList[-1:]+newList[:-1]\n    else:\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    if len(newList) == 0:\n        return\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1: \n        temp = newList[0] \n        newList[0] = newList[len(newList)-1] \n        newList[len(newList)-1] = temp \n    return newList \n        \nprint(\"Output of'swap_List' function is : \", swap_List([1,2,3]))\nprint(\"Output of'swap_List' function is : \", swap_List([10,20,30]))\nprint(\"Output of'swap_List' function is : \", swap_List([10,20,30,40,50]))\nprint(\"Output of'swap_List' function is : \", swap_List(['a','b','c']))\nprint(\"Output of'swap_List' function is : \", swap_List([1,'2',3]))\nprint(\"Output of'swap_List' function is : \", swap_List([1,2,'3']))\nprint(\"Output of'swap_List' function is : \", swap_List(['a','b','c']))\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    temp=newList[0]\n    newList[0]=newList[length-1]\n    newList[length-1]=temp\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    length=len(newList)\n    for i in range(0,length//2):\n        temp=newList[i]\n        newList[i]=newList[length-1-i]\n        newList[length-1-i]=temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList ==[]:\n        print(\"Empty list\")\n    else:\n        # print(\"Before swapping:\",newList)\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # print(\"After swapping:\",newList)\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    last = newList[-1]\n    newList.remove(last)\n    newList.insert(0, last)\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r*r*math.sqrt(3)\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi * r * r\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (math.pi * (r * r))\n    print('the area of the largest inscribed triangle is:', area)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    import random\n    print (\"\\nEnter the radius: \")\n    R = float(input())\n    #Calculate the area\n    area_s = pi*R**2\n    area_n = 0.5*pi*R**2\n    area = max(area_s,area_n)\n    return (area)\ndef triangle_area_p_squared(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    import random\n    print (\"\\nEnter the radius: \")\n    R = float(input())\n    #Calculate the area\n    area_s = pi*R**2\n    area_n = 0.5*pi*R**2\n    area = max(area_s,area_n)\n    return (area**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def calculate_area(r,n):\n        area=r*(r+n)*math.sqrt(3)/2\n        return round(area,4)\n    def solve_triangle(r,n):\n        a=(r*r+n*n)/2\n        b=r*n*math.sqrt(3)/2\n        c=a+b\n        print(\"The area of the triangle is\",calculate_area(r,n))\n        print(\"The area of the triangle is\",calculate_area(a,b))\n        print(\"The area of the triangle is\",calculate_area(b,c))\n    solve_triangle(r,n)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    import numpy as np\n    r = int(r)\n    a = 2*r*math.sin(math.pi/3)\n    for i in range(0,r) :\n        x = r*math.cos(math.pi/3)\n        y = r*math.sin(math.pi/3)\n        print(x,y)\n        # if abs(x-x2)<=1 and abs(y-y2)<=1 :\n        #     a += 2*r*math.sin(math.pi/3)\n        #     print(a)\n        # else :\n        #     a += 2*r*math.sin(math.pi/3)\n    # return a/2\n    return math.pi*r*r\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # A = area_of_a_triangle\n    # R = radius\n    \n    import math\n    def area_of_a_triangle(R) :\n        '''\n        A = area_of_a_triangle\n        R = radius\n        '''\n        # R = radius\n        # A = math.pi * (R ** 2)\n        A = (R * R) * math.sqrt(3) / 4\n        # A = 2 * R * math.sqrt(3) / 4\n        return A\n    \n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle(R)\n    # print(A)\n    \n    # A = area_of_a_triangle"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # return ((3*(r*r)))/2\n    \n    # 4*(r*r)/2\n    # 4*(r*r*r)/2\n    # ((3*r*r*r)/2) - ((3*r*r)/2)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # define the constants\n    PI = 3.14159265359\n    r *= PI\n    \n    # compute the surface area\n    area = (r**2)*(3**0.5)\n    \n    # compute the volume\n    volume = PI*(r**2)\n    \n    # print the area of the triangle\n    print('The area of the largest triangle that can be inscribed in a semicircle with radius = {} is {:.2f}'.format(r, area))\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (r**2) * math.sqrt(3)/4\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start > end:\n        return 0\n    if start == end:\n        if array[start]!= start+1:\n            return start+1\n        else:\n            return None\n    if array[start] == start+1:\n        return find_First_Missing(array,start+1,end)\n    if array[start]!= start+1:\n        return find_First_Missing(array,start+1,end)\n    if array[end] == end:\n        return find_First_Missing(array,start,end-1)\n    if array[end]!= end:\n        return find_First_Missing(array,start,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return \n    if start==end:\n        if array[start]==start:\n            return start+1\n        else:\n            return start\n    else:\n        middle=int((start+end)/2)\n        if array[middle]==middle:\n            return find_First_Missing(array,start,middle-1)\n        elif array[middle]==end:\n            return find_First_Missing(array,middle+1,end)\n        elif array[middle]>middle:\n            return find_First_Missing(array,start,middle-1)\n        else:\n            return find_First_Missing(array,middle+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    \n    if end == None:\n        end = len(array)\n        \n    if end-start == 0:\n        return start\n    \n    mid = int((start+end)/2)\n    if array[mid] == mid:\n        return mid\n    if array[mid] == mid-1:\n        return find_First_Missing(array,start,mid-1)\n    if array[mid] == mid+1:\n        return find_First_Missing(array,mid+1,end)\n    \n    #print(array)\n    return find_First_Missing(array,start,mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start>end:\n        return None\n    if end is None:\n        end=len(array)-1\n    if start<end:\n        middle=start+(end-start)//2\n        if array[middle]==middle:\n            start=middle+1\n        elif array[middle]>middle:\n            return find_First_Missing(array,start,middle-1)\n        else:\n            return find_First_Missing(array,middle+1,end)\n    return middle+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    if start > end:\n        return -1\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid+1:\n        return find_First_Missing(array,start,mid-1)\n    \n    if array[mid] > mid+1:\n        return find_First_Missing(array,mid+1,end)\n    \n    if array[mid] < mid+1:\n        return mid + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        return None\n    if start==end:\n        return start+1\n    mid= (start+end)//2\n    if array[mid]==mid+1:\n        return find_First_Missing(array,mid+1,end)\n    if array[mid]==mid-1:\n        return find_First_Missing(array,start,mid-1)\n    if array[mid]==mid:\n        return find_First_Missing(array,start,end)\n    return mid+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if array[start]==0 and array[end]==len(array)-1:\n        return array[start]\n    elif array[start]==array[end]:\n        return find_First_Missing(array,start+1,end-1)\n    elif array[start]<array[end]:\n        mid = (start+end)//2\n        return find_First_Missing(array,start,mid)\n    else:\n        return find_First_Missing(array,mid+1,end)"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    start = int(start)\n    end = int(end)\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if i!=array[i]:\n            return i\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start==end:\n        return end+1\n    if array[start]==array[end]:\n        return find_First_Missing(array,start,end-1)\n    else:\n        pivot=array[start]\n        i=start\n        j=end\n        while i<=j:\n            if array[i]<pivot and array[j]>pivot:\n                array[i],array[j]=array[j],array[i]\n            if array[i]<pivot:\n                i+=1\n            if array[j]>pivot:\n                j-=1\n        pivot_index=i\n        if pivot_index==start:\n            return find_First_Missing(array,pivot_index+1,end)\n        elif pivot_index==end:\n            return find_First_Missing(array,start,pivot_index-1)\n        else:\n            return pivot_index\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    # Loop to replace spaces\n    for i in range(len(string)):\n        if string[i] =='':\n            string = string.replace(string[i],'%20')\n        else:\n            continue\n    return string\n    \n    \ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Function to replace spaces\n    def replace_spaces(string):\n        for i in range(len(string)):\n            if string[i] =='':\n                string = string.replace(string[i],'%20')\n            else:\n                continue\n        return string\n    \n    # Return function\n    return replace_spaces(string)\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(\" \", \"%20\")\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i] =='':\n            string[i] = '%20'\n    string = ''.join(string)\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \",\"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    print(\"Even numbers from a list : \", end = \" \") \n    for i in list: \n        if i%2 == 0: \n            print(i, end = \" \") \n    print() \n    \ndef main(): \n    '''\n    Write a python function to find odd numbers from a list of numbers. \n    '''\n    list1 = [ ] \n    n = int(input(\"Enter number of elements : \")) \n    for i in range(0, n): \n        list1.append(int(input())) \n    print(\"List of elements : \", end = \" \") \n    for i in list1: \n        print(i, end = \" \") \n    print() \n    \n    Split(list1) \n    \n    \nif __name__ == \"__main__\": \n    main() "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    odd_num = []\n    \n    for i in list:\n        if i%2==0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    print(even_num)\n    print(odd_num)\n    \nSplit([1,2,3,4,5,6,7,8,9,10,11,12,13])\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    odd_numbers = []\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l=[]\n    for i in range(0,len(list)):\n        if list[i]%2==0:\n            l.append(list[i])\n    return l\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list = list\n    for i in range(len(list)):\n        if i % 2 == 0:\n            print(list[i], end = \" \")\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    odd_numbers = []\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l = list(list)\n    n = len(l)\n    for i in range(n):\n        if (l[i] % 2) == 0:\n            l[i] = 0\n    for i in range(n):\n        if (l[i]!= 0):\n            l[i] = 1\n    return l\nlst = [4, 7, 8, 10, 11, 12]\nprint(Split(lst))\nprint(list(filter(lambda x: x%2==0, lst)))\nprint(list(filter(lambda x: x%2!= 0, lst)))\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (1, 1):\n        return (1, 0), (0, 1), (2, 0), (2, 1)\n    if ele == (1, 2):\n        return (1, 1), (2, 1)\n    if ele == (1, 3):\n        return (1, 2), (2, 2)\n    if ele == (1, 4):\n        return (1, 3), (2, 3)\n    if ele == (1, 5):\n        return (1, 4), (2, 4)\n    if ele == (1, 6):\n        return (1, 5), (2, 5)\n    if ele == (1, 7):\n        return (1, 6), (2, 6)\n    if ele == (1, 8):\n        return (1, 7), (2, 7)\n    if ele == (2, 1):\n        return (2, 0), (2, 1), (2, 2), (3, 0)\n    if ele == (2, 2):\n        return (2, 1), (3, 1)\n    if ele == (2, 3):\n        return (2, 2), (3, 2)\n    if ele == (2, 4):\n        return (2, 3), (3, 3)\n    if ele == (2, 5):\n        return (2, 4), (3, 4)\n    if ele == (2, 6):\n        return (2, 5), (3, 5)\n    if ele == (2, 7):\n        return (2, 6), (3, 6)\n    if ele == (2, 8):\n        return (2, 7), (3, 7)\n    if ele == (3, 1):\n        return (3, 0), (3, 1), (3, 2), (3, 3)\n    if ele == (3, 2):\n        return (3, 1), (3, 2)\n    if ele == (3, 3):\n        return (3, 2), (3, 3)\n    if ele == (3, 4):\n        return (3, 3), (3, 4)\n    if ele == (3, 5):\n        return (3, 4), (3, 5)\n    if ele == (3, 6):\n        return (3, 5), (3, 6)\n    if ele == (3, 7):\n        return (3, 6), (3, 7)\n    if ele == (3, 8):\n        return (3, 7), (3, 8)\n    if ele == (4, 1):\n        return (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)\n    if ele == (4, 2):\n        return (4, 1), (4, 2)\n    if ele == (4, 3):\n        return (4, 2), (4, 3)\n    if ele == (4, 4):\n        return (4, 3), (4, 4)\n    if ele == (4, 5):\n        return (4, 4), (4, 5)\n    if ele == (4, 6):\n        return (4, 5), (4, 6)\n    if ele == (4, 7):\n        return (4, 6), (4, 7)\n    if ele == (4, 8):\n        return (4, 7), (4, 8)\n    if ele == (5, 1):\n        return (5, 0), (5, 1), (5, 2), (5, 3), (5, 4)\n    if ele == (5, 2):\n        return (5, 1), (5, 2)\n    if ele == (5, 3):\n        return (5, 2), (5, 3)\n    if ele == (5, 4):\n        return (5, 3), (5, 4)\n    if ele == (5, 5):\n        return (5, 4), (5, 5)\n    if ele == (5, 6):\n        return (5, 5), (5, 6)\n    if ele == (5, 7):\n        return (5, 6), (5, 7)\n    if ele == (5, 8):\n        return (5, 7), (5, 8)\n    if ele == (6, 1):\n        return (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6)\n    if ele == (6, 2):\n        return (6, 1), (6, 2)\n    if ele == (6, 3):\n        return (6, 2), (6, 3)\n    if ele == (6, 4):\n        return (6, 3), (6, 4)\n    if ele == (6, 5):\n        return (6, 4), (6, 5)\n    if ele == (6, 6):\n        return (6, 5), (6, 6)\n    if ele == (6, 7):\n        return (6, 6), (6, 7)\n    if ele == (6, 8):\n        return (6, 7), (6, 8)\n    if ele == (7, 1):\n        return (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7)\n    if ele == (7, 2):\n        return (7, 1), (7, 2)\n    if ele == (7, 3):\n        return (7, 2), (7, 3)\n    if ele == (7, 4):\n        return (7, 3), (7, 4)\n    if ele == (7, 5):\n        return (7, 4), (7, 5)\n    if ele == (7, 6):\n        return (7, 5), (7, 6)\n    if ele == (7, 7):\n        return (7, 6), (7, 7)\n    if ele == (7, 8):\n        return (7, 7), (7, 8)\n    if ele == (8, 1):\n        return (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7)\n    if ele == (8, 2):\n        return (8, 1), (8, 2)\n    if ele == (8, 3):\n        return (8, 2), (8, 3)\n    if ele == (8, 4):\n        return (8, 3), (8, 4)\n    if ele == (8, 5):\n        return (8, 4), (8, 5)\n    if ele == (8, 6):\n        return (8, 5), (8, 6)\n    if ele == (8, 7):\n        return (8, 6), (8, 7)\n    if ele == (8, 8):\n        return (8, 7), (8, 8)\n    \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0]+1<5 and (ele[1]+1, ele[0]+1) not in sub:\n        sub.append((ele[1]+1, ele[0]+1))\n    if ele[0]-1>=0 and (ele[1]-1, ele[0]-1) not in sub:\n        sub.append((ele[1]-1, ele[0]-1))\n    if ele[1]+1<5 and (ele[1]+1, ele[0]) not in sub:\n        sub.append((ele[1]+1, ele[0]))\n    if ele[1]-1>=0 and (ele[1]-1, ele[0]) not in sub:\n        sub.append((ele[1]-1, ele[0]))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele[0], ele[1]\n    if x > 0:\n        sub.append((x-1, y))\n    if x < len(matrix) - 1:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < len(matrix) - 1:\n        sub.append((x, y+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    ele = list(ele)\n    ele.extend(sub)\n    return tuple(ele)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(-1, 2): \n        for j in range(-1, 2): \n            if not (i == 0 and j == 0): \n                if i == 0 and j == 1 or j == 0 and i == -1: \n                    continue\n                yield ele[0] + i, ele[1] + j \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1, y))\n    if x < 9:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < 9:\n        sub.append((x, y+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        sub.remove(ele)\n    if ele[0] < 0:\n        sub.append((abs(ele[0]), ele[1]))\n    if ele[0] == 0:\n        if ele[1] < 0:\n            sub.append((0, abs(ele[1])))\n        if ele[1] == 0:\n            return sub\n        else:\n            return\n    if ele[1] < 0:\n        sub.append((ele[0], abs(ele[1])))\n    if ele[1] == 0:\n        return sub\n    sub.append(ele)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele) == tuple:\n        sub.append(ele)\n        return sub\n    else:\n        return ele\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(tuple(ele))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x == 0:\n        return sub + [(1, y), (0, y + 1), (0, y - 1), (0, y)]\n    elif x == n - 1:\n        return sub + [(x - 1, y), (x + 1, y), (x, y + 1), (x, y - 1)]\n    elif y == 0:\n        return sub + [(x, 1), (x - 1, 1), (x + 1, 1), (x, y + 1)]\n    elif y == m - 1:\n        return sub + [(x, m - 2), (x - 1, m - 1), (x + 1, m - 1), (x, m - 2)]\n    else:\n        return sub + [(x, y + 1), (x - 1, y + 1), (x + 1, y + 1), (x, y - 1), (x - 1, y - 1), (x + 1, y - 1)]\n    \n    \ndef isSafe(x, y, ele, sub):\n    '''\n    Check whether the destination coordinate is safe or not.\n    '''\n    x, y = ele\n    for i in sub:\n        if x == i[0]:\n            if y == i[1]:\n                return False\n    return True\n    \ndef checkPath(ele, path):\n    '''\n    Check whether the path is a valid solution or not.\n    '''\n    x, y = ele\n    if x == 0 or x == n - 1 or y == 0 or y == m - 1:\n        return False\n    for i in path:\n        if i[0] == x or i[1] == y:\n            return False\n    return True\n    \ndef printPath(path):\n    '''\n    Print the path from source to destination.\n    '''\n    path.append((n - 1, m - 1))\n    while len(path)!= 0:\n        x, y = path.pop()\n        print(x, y)\n    \ndef findAllPossiblePaths(source, destination, maze):\n    '''\n    Find all the possible paths from the given source to the destination.\n    '''\n    global visited\n    if source == destination:\n        return [source]\n    \n    # find all the possible adjacent coordinates\n    sub = adjac(destination, [])\n    sub = list(filter(isSafe, sub))\n    \n    # mark the path\n    for i in sub:\n        visited[i] = True\n    \n    # find all the paths from the source to destination\n    paths = []\n    for i in sub:\n        if checkPath(i, paths):\n            paths.append(i)\n    \n    # find all the possible paths from the source to destination\n    if len(paths) == 0:\n        return paths\n    \n    # find the path from the source to the destination\n    path = []\n    for i in paths:\n        visited[i] = True\n        if checkPath(i, path):\n            path.append(i)\n    \n    return path\n    \n        \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    # Write your code here\n    for i in text.split():\n        if len(i)>1:\n            result += \"_\"+i.strip()+\"_\"\n        else:\n            result += i+\"_\"\n    return result[:-1]\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = text.strip()\n    result = result.replace(\" \", \"_\")\n    result = result.replace(\"_\", \" \")\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \"\".join([\"_\" if x == \" \" else x for x in text]).upper()\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('_',' ')\n    print(text)\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if len(text) == 0:\n        return ''\n    elif len(text) == 1:\n        return text\n    else:\n        if text[-1] =='':\n            text = text[:-1] + '_'\n            return replace_spaces(text)\n        elif text[0] =='':\n            text = '_' + text[1:]\n            return replace_spaces(text)\n        else:\n            return text\n        \n    "
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \"\".join([c if c!= \" \" else \"_\" for c in text])\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1):\n        if num_list[i]!= 0:\n            num_list[i],num_list[i+1]=num_list[i+1],num_list[i]\n            count +=1\n    print(\"\\nMoved all zeroes to the end :\",count)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    list1 = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            list1.append(num_list[i])\n        else:\n            list1.append(0)\n    return list1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return num_list\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n            continue\n        else:\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n    for i in range(zero_count):\n        num_list.remove(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Your Code Here\n    i=0\n    l=len(num_list)\n    while i < l:\n        if num_list[i]!= 0:\n            i = i+1\n            break\n        elif i == l:\n            i = i+1\n    print(num_list)\n    while i < l:\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n        i = i+1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pos = 0\n    for x in num_list:\n        if x!= 0:\n            num_list[pos], num_list[pos + 1] = num_list[pos + 1], num_list[pos]\n            pos += 2\n        else:\n            pos += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == []:\n        return num_list\n    \n    i = 0\n    while i < len(num_list) and num_list[i] == 0:\n        i += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp_list = []\n    for i in num_list:\n        if i!= 0:\n            temp_list.append(i)\n    \n    for i in range(len(temp_list)):\n        if i == 0:\n            continue\n        else:\n            num_list[i], num_list[0] = num_list[0], num_list[i]\n    return num_list\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = []\n    for index, value in enumerate(num_list):\n        if value == 0:\n            zero_indices.append(index)\n    for index in range(len(num_list)-len(zero_indices)):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_loc = 0\n    list_len = len(num_list)\n    while zero_loc < list_len:\n        if num_list[zero_loc] == 0:\n            num_list.pop(zero_loc)\n            num_list.append(0)\n        else:\n            zero_loc += 1\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if arr is None or len(arr) == 0:\n        return 0\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            x = x ^ arr[i] ^ arr[j]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            sum = sum + (arr[i] ^ arr[j])\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += (arr[i] ^ arr[j])\n    return res\n    \n    # iterative solution\n    # n = len(arr)\n    # ans = 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         ans += arr[i] ^ arr[j]\n    # return ans\n    \n    #recursive solution\n    # if n == 0:\n    #     return 0\n    # return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n    \n    #another recursion solution\n    # if n == 0:\n    #     return 0\n    # return pair_xor_Sum(arr[1:],n-1) ^ arr[0]\n    \n    #another iterative solution\n    # if n == 0:\n    #     return 0\n    # ans = 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         ans += arr[i] ^ arr[j]\n    # return ans\n    \n    \n    \n    \n    \n    \n    \ndef pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += (arr[i] ^ arr[j])\n    return res\n    \n    # iterative solution\n    # if n == 0:\n    #     return 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         res += (arr[i] ^ arr[j])\n    # return res\n    \n    #recursive solution\n    # if n == 0:\n    #     return 0\n    # return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n    \n    #another recursion solution\n    # if n == 0:\n    #     return 0\n    # ans = 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         ans += arr[i] ^ arr[j]\n    # return ans\n    \n    \n    \n    \n    \n    \n    \ndef pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += (arr[i] ^ arr[j])\n    return res\n    \n    # iterative solution\n    # if n == 0:\n    #     return 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         res += (arr[i] ^ arr[j])\n    # return res\n    \n    #recursive solution\n    # if n == 0:\n    #     return 0\n    # return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n    \n    #another recursion solution\n    # if n == 0:\n    #     return 0\n    # ans = 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         ans += arr[i] ^ arr[j]\n    # return ans\n    \n    \n    \n    \n    \n    \ndef pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += (arr[i] ^ arr[j])\n    return res\n    \n    # iterative solution\n    # if n == 0:\n    #     return 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         res += (arr[i] ^ arr[j])\n    # return res\n    \n    #recursive solution\n    # if n == 0:\n    #     return 0\n    # return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n    \n    #another recursion solution\n    # if n == 0:\n    #     return 0\n    # ans = 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         ans += arr[i] ^ arr[j]\n    # return ans\n    \n    \n    \n    \n    \n    \n    \ndef pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += (arr[i] ^ arr[j])\n    return res\n    \n    # iterative solution\n    # if n == 0:\n    #     return 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         res += (arr[i] ^ arr[j])\n    # return res\n    \n    #recursive solution\n    # if n == 0:\n    #     return 0\n    # return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n    \n    #another recursion solution\n    # if n == 0:\n    #     return 0\n    # ans = 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         ans += arr[i] ^ arr[j]\n    # return ans\n    \n    \n    \n    \n    \n    \ndef pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += (arr[i] ^ arr[j])\n    return res\n    \n    # iterative solution\n    # if n == 0:\n    #     return 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         res += (arr[i] ^ arr[j])\n    # return res\n    \n    #recursive solution\n    # if n == 0:\n    #     return 0\n    # return arr[0] ^ pair_xor_Sum(arr[1:],n-1)\n    \n    #another recursion solution\n    # if n == 0:\n    #     return 0\n    # ans = 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         ans += arr[i] ^ arr[j]\n    # return ans\n    \n    \n    \n    \n    \n    \ndef pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += (arr[i] ^ arr[j])\n    return res\n    \n    # iterative solution\n    # if n == 0:\n    #     return 0\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         res += (arr[i] ^ arr[j])\n    # return res\n    \n    #recursive solution\n    # if n == 0:\n    #     return 0\n    # return arr[0] ^ pair_xor_Sum"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n-1) : \n        for j in range(i+1,n) :\n            if (arr[i] == arr[j]) :\n                sum = sum + 0\n            else :\n                sum = sum + arr[i] ^ arr[j]\n    return sum\n    \n    \n    \n    \n    \n    \ndef pair_xor_Sum_Optimized(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n-1):\n        sum = sum ^ arr[i]\n        j = i+1\n        while j<n:\n            sum = sum ^ arr[j]\n            j += 1\n    return sum\n    \ndef count_smallest_n(arr,n):\n    '''\n    Write a python function to count the number of elements which are smaller than given number in the given list.\n    '''\n    count = 0\n    i = 0\n    while i<n:\n        if arr[i] < n:\n            count += 1\n        i += 1\n    return count\n    \n    \n    \n    \n    \n    \ndef count_smallest_n_Optimized(arr,n):\n    '''\n    Write a python function to count the number of elements which are smaller than given number in the given list.\n    '''\n    count = 0\n    i = 0\n    while i<n:\n        if arr[i] < n:\n            count += 1\n        i += 1\n    return count\n    \ndef count_missing_element(arr,n):\n    '''\n    Write a python function to count the number of elements which are missing in the given list.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if (i not in arr):\n            count += 1\n    return count\n    \ndef count_missing_element_Optimized(arr,n):\n    '''\n    Write a python function to count the number of elements which are missing in the given list.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if i not in arr:\n            count += 1\n    return count\n    \ndef count_missing_element_Optimized_1(arr,n):\n    '''\n    Write a python function to count the number of elements which are missing in the given list.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if i not in arr:\n            count += 1\n    return count\n    \n    \n    \n    \n    \ndef Count_missing_element(arr,n):\n    '''\n    Write a python function to count the number of elements which are missing in the given list.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if (i not in arr):\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \ndef Sum_Subarray(arr,n):\n    '''\n    Write a python function to find the sum of all subarrays having sum equal to k.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + arr[i]\n    return sum\n    \n    \n    \n    \n    \ndef Sum_Subarray_Optimized(arr,n):\n    '''\n    Write a python function to find the sum of all subarrays having sum equal to k.\n    '''\n    sum = 0\n    sum = sum + sum + arr[0]\n    for i in range(1,n):\n        sum = sum + arr[i]\n    return sum\n    \ndef Sum_Subarray_Optimized_1(arr,n):\n    '''\n    Write a python function to find the sum of all subarrays having sum equal to k.\n    '''\n    sum = 0\n    sum = sum + arr[0]\n    for i in range(1,n):\n        sum = sum + arr[i]\n    return sum\n    \ndef array_sum_segment(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + arr[i]\n    return sum\n    \n    \n    \n    \n    \ndef array_sum_segment_Optimized(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + arr[i]\n    return sum\n    \ndef array_sum_segment_Optimized_1(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + arr[i]\n    return sum\n    \n    \n    \n    \ndef array_sum_segment_Optimized_2(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    while (n>0):\n        sum = sum + arr[n-1]\n        n = n-1\n    return sum\n    \n    \n    \n    \n    \ndef array_sum_segment_Optimized_3(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    while (n>0):\n        sum = sum + arr[n-1]\n        n = n-1\n    return sum\n    \n    \n    \n    \n    \ndef array_sum_segment_Optimized_4(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    while (n>0):\n        sum = sum + arr[n-1]\n        n = n-1\n    return sum\n    \n    \n    \n    \n    \ndef array_sum_segment_Optimized_5(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    while (n>0):\n        sum = sum + arr[n-1]\n        n = n-1\n    return sum\n    \n    \n    \n    \n    \ndef array_sum_segment_Optimized_6(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    while (n>0):\n        sum = sum + arr[n-1]\n        n = n-1\n    return sum\n    \n    \n    \n    \n    \ndef array_sum_segment_Optimized_7(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    while (n>0):\n        sum = sum + arr[n-1]\n        n = n-1\n    return sum\n    \n    \n    \n    \n    \ndef array_sum_segment_Optimized_8(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    while (n>0):\n        sum = sum + arr[n-1]\n        n = n-1\n    return sum\n    \n    \n    \n    \n    \ndef array_sum_segment_Optimized_9(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    while (n>0):\n        sum = sum + arr[n-1]\n        n = n-1\n    return sum\n    \n    \n    \n    \n    \ndef array_sum_segment_Optimized_10(arr,n):\n    '''\n    Write a python function to find the sum of each segment in the given array.\n    '''\n    sum = 0\n    while ("
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            xor += arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    arr.sort()\n    for i in range(n) : \n        sum += arr[i] ^ arr[n-i-1] \n    return sum \n    #code here\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #code here\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum+=arr[i]^arr[j]\n    return sum\n    \n    \n    \ndef pair_xor_Sum_optimized(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_2(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        if(xor & arr[i]):\n            ans = ans + xor\n            xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_3(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        if(xor & arr[i]):\n            ans = ans + xor\n            xor = xor ^ arr[i]\n    return ans\n    \n    \n    \n    \ndef pair_xor_Sum_optimized_4(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_5(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_6(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_7(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_8(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_9(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_10(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_11(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_12(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_13(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_14(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_15(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor_Sum_optimized_16(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n    for i in range(n):\n        ans = ans + xor\n        xor = xor ^ arr[i]\n    return ans\n    \n    \n    \ndef pair_xor"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Iterate through the list to get the number of elements in the list.\n    Create a two-dimensional list for pairwise xor sum of list.\n    Iterate through the list to get the index for the range of list.\n    Using the given index and calculate the value of xor sum.\n    Convert the value to integer and add it to the sum.\n    '''\n    s = 0\n    for i in range(n):\n        s += (int(arr[i]) ^ int(arr[i+1]))\n    return(s)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    hq.heapify(heap)\n    for i in iterable:\n        heapq.heappush(heap, i)\n    for i in range(len(heap)):\n        iterable[i] = heapq.heappop(heap)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        iterable[0] = iterable[-1]\n        iterable.pop()\n        hq.heapify(iterable)\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    list_numbers = list(iterable)\n    for i in range(len(list_numbers)):\n        if i < len(list_numbers):\n            hq.heappush(list_numbers, list_numbers[i])\n    sorted_list = []\n    while len(list_numbers) > 0:\n        sorted_list.append(hq.heappop(list_numbers))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # heapify\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [x for x in iterable]\n    "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    for _ in range(len(iterable)):\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    temp = []\n    for i in iterable:\n        hq.heappush(temp,i)\n    return temp\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [i for i in iterable]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    nums = iterable\n    hq.heapify(nums)\n    return nums\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    noloss_flag = True\n    profit_flag = False\n    \n    if actual_cost >= 0:\n        if sale_amount > actual_cost:\n            noloss_flag = False\n        else:\n            noloss_flag = True\n            \n    if noloss_flag == True:\n        if sale_amount > actual_cost:\n            profit_flag = True\n    \n    if profit_flag == True:\n        return 'No profit or loss'\n    else:\n        return 'No profit or loss'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return 'No Profit, No Loss'\n    else:\n        profit = actual_cost - sale_amount\n        if profit >= 0:\n            return 'Profit = {profit}'.format(profit=profit)\n        else:\n            return 'Loss = {loss}'.format(loss=abs(profit))\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return 'No Profit'\n    elif actual_cost>sale_amount:\n        return 'Loss'\n    else:\n        return 'Profit'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"No profit and loss\")\n    else:\n        print(\"No profit and loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Checking whether the actual cost is more than the sale amount\n    if actual_cost > sale_amount:\n        print(\"NO Profit and Loss\")\n    #Checking whether the actual cost is less than the sale amount\n    elif actual_cost < sale_amount:\n        print(\"NO Profit and Loss\")\n    #Checking whether the actual cost is equal to the sale amount\n    elif actual_cost == sale_amount:\n        print(\"No Profit and Loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\nprint(noprofit_noloss(2,2))\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    if actual_cost > 0:\n        if actual_cost < sale_amount:\n            return False\n    if actual_cost > sale_amount:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=float(v)\n    t=float(t)\n    wci=37.4 + 0.6215*t -11.37*math.pow(v,0.16) +0.3965*math.pow(v,0.16) *math.pow(t,0.16)\n    return round(wci)\n    \ndef is_prime(n):\n    '''\n    Write a function to return true if the given number is prime, else return false.\n    '''\n    if n==1:\n        return False\n    elif n<=3:\n        return True\n    elif n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 35.74 + 0.6215*v - 35.75*math.pow(t,0.16) + 0.4275*t*math.pow(t,0.16) - 0.00000008*v*math.pow(t,0.16)\nprint(wind_chill(70,20))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v == 0:\n        return 0\n    if t == 0:\n        return 0\n    chill = 35.74 + 0.6215 * t - 35.75 * math.pow(v, 0.16) + 0.4275 * t * math.pow(v, 0.16)\n    if t > 20:\n        chill -= 13.12 * math.pow(t, 0.16)\n    return round(chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return (35.74 + (0.6215 * t) - (35.75 * (v ** 0.16)) + (0.4275 * t * (v ** 0.16)));\ndef day_length(v,t):\n    '''\n    Write a function to calculate the day length given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -17.0 or t > 101.0:\n        raise ValueError('Temperature out of range:', t)\n    elif v < 1.0 or v > 100.0:\n        raise ValueError('Wind speed out of range:', v)\n    else:\n        d = -1.833 + 2.049 * t + 1.330 * (t ** 2) - 1.104 * (t ** 3) + 0.37 * v ** 0.16\n        if d < -18.0:\n            return 0\n        elif d >= -18.0 and d < -12.0:\n            return 3600\n        elif d >= -12.0 and d <= 0.0:\n            return 86400\n        elif d > 0.0 and d <= 12.0:\n            return 2592000\n        else:\n            return 3575904\ndef day_length_c(v,t):\n    '''\n    Write a function to calculate the day length given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -17.0 or t > 101.0:\n        raise ValueError('Temperature out of range:', t)\n    elif v < 1.0 or v > 100.0:\n        raise ValueError('Wind speed out of range:', v)\n    else:\n        d = -1.833 + 2.049 * t + 1.330 * (t ** 2) - 1.104 * (t ** 3) + 0.37 * v ** 0.16\n        if d < -18.0:\n            return 0\n        elif d >= -18.0 and d < -12.0:\n            return 3600\n        elif d >= -12.0 and d <= 0.0:\n            return 86400\n        elif d > 0.0 and d <= 12.0:\n            return 2592000\n        else:\n            return 3575904\ndef day_length_f(v,t):\n    '''\n    Write a function to calculate the day length given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -17.0 or t > 101.0:\n        raise ValueError('Temperature out of range:', t)\n    elif v < 1.0 or v > 100.0:\n        raise ValueError('Wind speed out of range:', v)\n    else:\n        d = -1.833 + 2.049 * t + 1.330 * (t ** 2) - 1.104 * (t ** 3) + 0.37 * v ** 0.16\n        if d < -18.0:\n            return 0\n        elif d >= -18.0 and d < -12.0:\n            return 3600\n        elif d >= -12.0 and d <= 0.0:\n            return 86400\n        elif d > 0.0 and d <= 12.0:\n            return 2592000\n        else:\n            return 3575904\ndef day_length_k(v,t):\n    '''\n    Write a function to calculate the day length given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -17.0 or t > 101.0:\n        raise ValueError('Temperature out of range:', t)\n    elif v < 1.0 or v > 100.0:\n        raise ValueError('Wind speed out of range:', v)\n    else:\n        d = -1.833 + 2.049 * t + 1.330 * (t ** 2) - 1.104 * (t ** 3) + 0.37 * v ** 0.16\n        if d < -18.0:\n            return 0\n        elif d >= -18.0 and d < -12.0:\n            return 3600\n        elif d >= -12.0 and d <= 0.0:\n            return 86400\n        elif d > 0.0 and d <= 12.0:\n            return 2592000\n        else:\n            return 3575904\ndef c_to_f(temp):\n    '''\n    Write a function to convert a given temperature in Celsius to fahrenheit.\n    '''\n    return temp * 9/5 + 32\ndef c_to_k(temp):\n    '''\n    Write a function to convert a given temperature in Celsius to kelvin.\n    '''\n    return temp + 273.15\ndef f_to_c(temp):\n    '''\n    Write a function to convert a given temperature in fahrenheit to Celsius.\n    '''\n    return (temp - 32) * 5/9\ndef f_to_k(temp):\n    '''\n    Write a function to convert a given temperature in fahrenheit to kelvin.\n    '''\n    return temp + 459.67\ndef k_to_f(temp):\n    '''\n    Write a function to convert a given temperature in kelvin to fahrenheit.\n    '''\n    return (temp - 273.15) * 9/5 + 32\ndef k_to_c(temp):\n    '''\n    Write a function to convert a given temperature in kelvin to Celsius.\n    '''\n    return temp - 273.15\ndef mph_to_kph(velocity):\n    '''\n    Write a function to convert a given wind velocity in miles per hour to kph.\n    '''\n    return velocity * 1.60934\ndef kph_to_mph(velocity):\n    '''\n    Write a function to convert a given wind velocity in kph to mph.\n    '''\n    return velocity / 1.60934\ndef windchill_kph(speed,temp):\n    '''\n    Write a function to calculate the wind chill index given a speed and a temperature.\n    '''\n    return (35.74 + (0.6215 * temp) - (35.75 * (speed ** 0.16)) + (0.4275 * temp * (speed ** 0.16)));\ndef windchill_mph(speed,temp):\n    '''\n    Write a function to calculate the wind chill index given a speed and a temperature.\n    '''\n    return windchill_kph(speed,c_to_f(temp))\ndef windchill_mph_kph(speed,temp):\n    '''\n    Write a function to calculate the wind chill index given a speed and a temperature.\n    '''\n    return windchill_mph(mph_to_kph(speed),c_to_f(temp))\ndef windchill_f_kph(speed,temp):\n    '''\n    Write a function to calculate the wind chill index given a speed and a temperature.\n    '''\n    return windchill_kph(kph_to_mph(speed),f_to_c(temp))\ndef windchill_f_mph_kph(speed,temp):\n    '''\n    Write a function to calculate the wind chill index given a speed and a temperature.\n    '''\n    return windchill_f_kph(mph_to_kph(speed),f_to_c(temp))\ndef windchill_f_mph_kph(speed,temp):\n    '''\n    Write a function to calculate the wind chill index given a speed and a temperature.\n    '''\n    return windchill_f_kph(kph_to_mph(speed),f_to_c(temp))\ndef windchill_f_mph_kph(speed,temp):\n    '''\n    Write a function to calculate the wind chill index given a speed and a temperature.\n    '''\n    return windchill_f_kph(kph_to_mph(speed),f_to_c(temp))\ndef windchill_kph_mph(speed,temp):\n    '''\n    Write a function to calculate the wind chill index given a speed and a temperature.\n    '''\n    return windchill_mph(mph_to_kph(speed),c_to_f(temp))\ndef windchill_kph_mph_f(speed,temp):\n    '''\n    Write a function to calculate the wind chill inde"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = float(t)\n    wind_speed = float(v)\n    if wind_speed >= 66:\n        t_wind = t + 1.333 * (wind_speed - 64)\n    else:\n        t_wind = t + 0.833 * (wind_speed - 32)\n    wind_speed_in_kph = wind_speed * 1.60934\n    chill = t_wind - 0.0012 * wind_speed_in_kph * (t_wind ** 0.16)\n    return int(chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = t + 0.1*(v**3)\n    b = v*math.sqrt(0.622 + (0.6215 * c))\n    wc = 35.74 + (0.4275 * c) - (35.75 * b) + (0.1422 * b * b)\n    return int(round(wc))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    windchill = a + (b * t) + (c * v**0.16) + (d * v**0.16 * t)\n    return windchill\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.B7 * t + 32\n    f = v ** 0.16\n    g = 0.6215 * math.exp(c / t)\n    h = f * (7.5 + 0.6215 * e - 6.1 * (f ** 0.16))\n    if h < -50:\n        h = -50\n    i = a + b * h + d * (math.pow(t, 0.16) - 1)\n    wind_chill = i * (10)\n    return int(wind_chill)\ndef temperature_conversion(unit,temp_in):\n    if unit == 'f':\n        temperature = (temp_in - 32) * (5 / 9)\n        return temperature\n    elif unit == 'c':\n        temperature = (temp_in + 459.67) * (5 / 9)\n        return temperature\n    else:\n        return temp_in\ndef convert_unit(unit,temp_in):\n    if unit == 'f':\n        if temp_in >= 32:\n            return 'c'\n        else:\n            return 'f'\n    elif unit == 'c':\n        if temp_in <= 32:\n            return 'f'\n        else:\n            return 'c'\n    else:\n        return unit\ndef menu():\n    '''\n    Write a function called menu that prints out the menu for the calculator. The menu should contain a prompt, and then a numbered menu. Each number should correspond to a function that will be called when that item is selected. The menu should end with a return (this is done so that your program will end when you choose to quit).\n    '''\n    print('\\n\\n')\n    print('Welcome to the weather calculator!')\n    print('\\n\\n')\n    print('1 - Calculate windchill')\n    print('2 - Convert units between f/c and c/f')\n    print('3 - Calculate wind gusts')\n    print('4 - Calculate the wind velocity')\n    print('5 - Calculate the wind power')\n    print('6 - Calculate the wind chill')\n    print('7 - Exit')\n    print('\\n\\n')\n    return input('Enter a number to select a menu item: ')\ndef windchill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.B7 * t + 32\n    f = v ** 0.16\n    g = 0.6215 * math.exp(c / t)\n    h = f * (7.5 + 0.6215 * e - 6.1 * (f ** 0.16))\n    if h < -50:\n        h = -50\n    i = a + b * h + d * (math.pow(t, 0.16) - 1)\n    wind_chill = i * (10)\n    return int(wind_chill)\ndef temperature_conversion(unit,temp_in):\n    if unit == 'f':\n        temperature = (temp_in - 32) * (5 / 9)\n        return temperature\n    elif unit == 'c':\n        temperature = (temp_in + 459.67) * (5 / 9)\n        return temperature\n    else:\n        return temp_in\ndef convert_unit(unit,temp_in):\n    if unit == 'f':\n        if temp_in >= 32:\n            return 'c'\n        else:\n            return 'f'\n    elif unit == 'c':\n        if temp_in <= 32:\n            return 'f'\n        else:\n            return 'c'\n    else:\n        return unit\ndef menu():\n    '''\n    Write a function called menu that prints out the menu for the calculator. The menu should contain a prompt, and then a numbered menu. Each number should correspond to a function that will be called when that item is selected. The menu should end with a return (this is done so that your program will end when you choose to quit).\n    '''\n    print('\\n\\n')\n    print('Welcome to the weather calculator!')\n    print('\\n\\n')\n    print('1 - Calculate windchill')\n    print('2 - Convert units between f/c and c/f')\n    print('3 - Calculate wind gusts')\n    print('4 - Calculate the wind velocity')\n    print('5 - Calculate the wind power')\n    print('6 - Calculate the wind chill')\n    print('7 - Exit')\n    print('\\n\\n')\n    return input('Enter a number to select a menu item: ')\ndef windchill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.B7 * t + 32\n    f = v ** 0.16\n    g = 0.6215 * math.exp(c / t)\n    h = f * (7.5 + 0.6215 * e - 6.1 * (f ** 0.16))\n    if h < -50:\n        h = -50\n    i = a + b * h + d * (math.pow(t, 0.16) - 1)\n    wind_chill = i * (10)\n    return int(wind_chill)\ndef temperature_conversion(unit,temp_in):\n    if unit == 'f':\n        temperature = (temp_in - 32) * (5 / 9)\n        return temperature\n    elif unit == 'c':\n        temperature = (temp_in + 459.67) * (5 / 9)\n        return temperature\n    else:\n        return temp_in\ndef convert_unit(unit,temp_in):\n    if unit == 'f':\n        if temp_in >= 32:\n            return 'c'\n        else:\n            return 'f'\n    elif unit == 'c':\n        if temp_in <= 32:\n            return 'f'\n        else:\n            return 'c'\n    else:\n        return unit\ndef menu():\n    '''\n    Write a function called menu that prints out the menu for the calculator. The menu should contain a prompt, and then a numbered menu. Each number should correspond to a function that will be called when that item is selected. The menu should end with a return (this is done so that your program will end when you choose to quit).\n    '''\n    print('\\n\\n')\n    print('Welcome to the weather calculator!')\n    print('\\n\\n')\n    print('1 - Calculate windchill')\n    print('2 - Convert units between f/c and c/f')\n    print('3 - Calculate wind gusts')\n    print('4 - Calculate the wind velocity')\n    print('5 - Calculate the wind power')\n    print('6 - Calculate the wind chill')\n    print('7 - Exit')\n    print('\\n\\n')\n    return input('Enter a number to select a menu item: ')\ndef windchill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.B7 * t + 32\n    f = v ** 0.16\n    g = 0.6215 * math.exp(c / t)\n    h = f * (7.5 + 0.6215 * e - 6.1 * (f ** 0.16))\n    if h < -50:\n        h = -50\n    i = a + b * h + d * (math.pow(t, 0.16) - 1)\n    wind_chill = i * (10)\n    return int(wind_chill)\ndef temperature_conversion(unit,temp_in):\n    if unit == 'f':\n        temperature = "
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f = (c * e) / (d + e)\n    #g = c * f ** (0.16)\n    #return g\n    \n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #C = 32.0 \n    #a = 0.6215\n    #b = 237.7\n    #c = (t + 459.67) / (c + 237.7)\n    #d = math.sqrt(v ** 2 + (2.0 * t) / c)\n    #e = a * d ** 0.16\n    #f "
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 35.74 + 0.6215 * t - 35.75 * pow(v,0.16) + 0.4275 * math.pow(t,0.16)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_set = []\n    name_list = []\n    for i in sample_names:\n        name_set.append(i.strip())\n    for i in range(len(name_set)):\n        if name_set[i][0].islower():\n            name_list.append(name_set[i])\n    return len(name_list)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    res = 0\n    for s in sample_names:\n        if s[0].islower():\n            res += len(s)\n    return res\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def nam(sample_names):\n        length = 0\n        for i in sample_names:\n            if i[0].isupper():\n                sample_names.remove(i)\n            length += len(i)\n        return length\n    return nam(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #your code here\n    count = 0\n    for i in range(len(sample_names)):\n        if not sample_names[i].islower():\n            count += len(sample_names[i])\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # print(sample_names)\n    # print(\"---\")\n    sample_names_filtered = []\n    for sample_name in sample_names:\n        if sample_name[0].isalpha():\n            sample_names_filtered.append(sample_name)\n    # print(sample_names_filtered)\n    # print(\"---\")\n    return len(sample_names_filtered)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = 0\n    n_list = []\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        n += len(name)\n        n_list.append(name)\n    return n, n_list\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = 0\n    n_list = []\n    for name in sample_names:\n        n += len(name)\n        n_list.append(name)\n    return n, n_list\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names.split(\",\")\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            sample_names[i] = sample_names[i].replace(sample_names[i][0].lower(), \"\")\n        else:\n            sample_names[i] = sample_names[i]\n    return sum([len(i) for i in sample_names])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].islower())\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    num = 0\n    for i in sample_names:\n        if i[0].isupper() == False:\n            num += len(i)\n    return num\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_names = []\n    for name in sample_names:\n        if not name.startswith('lowercase'):\n            new_names.append(name)\n    return new_names\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]+\\)')\n    items = pattern.sub('',items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_regex = re.compile(\"[()]\")\n    item_list = items.split(\" \")\n    new_item_list = []\n    for item in item_list:\n        if parenthesis_regex.search(item) == None:\n            new_item_list.append(item)\n    return \" \".join(new_item_list)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items[items.index('(') + 1: items.index(')')]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 0:\n        return items\n    if items[0] == '(' and items[-1] == ')':\n        return items[1:-1]\n    if items[0] == '(' and items[1] == ')':\n        return items[2:-1]\n    if items[0] == '(' and items[1] == '(':\n        return items[2:-2]\n    if items[0] == '(' and items[1] == ')':\n        return items[2:-2]\n    if items[0] == '(' and items[1] == ')':\n        return items[2:-2]\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^()]+\\)', \"\", items)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) < 2:\n        return items\n    else:\n        return items[0] + remove_parenthesis(items[1:])\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items == '':\n        return items\n    else:\n        if items[0] == '(' and items[len(items)-1] == ')':\n            return items[1:len(items)-1]\n        else:\n            return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if items is None:\n        return None\n    result = \"\"\n    for item in items:\n        if item == \")\":\n            result += item\n        if item == \"(\":\n            result += item\n        if item == \")\":\n            result += item\n        if item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" or item == \"(\" o"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    final = []\n    for i in items:\n        temp = i.split()\n        if temp:\n            final.append(temp[0])\n        else:\n            final.append(i)\n    return final\n    \n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #items=items.split()\n    #items = map(lambda s:s.replace('(', ''), items)\n    #items = map(lambda s:s.replace(')', ''), items)\n    items = map(lambda s:s.replace('(', ''), items)\n    items = map(lambda s:s.replace(')', ''), items)\n    items = map(lambda s:s.replace('\u201c', ''), items)\n    items = map(lambda s:s.replace('\u201d', ''), items)\n    items = map(lambda s:s.replace('\u2026', ''), items)\n    items = map(lambda s:s.replace('\u2019', ''), items)\n    items = map(lambda s:s.replace('\u2026', ''), items)\n    items = map(lambda s:s.replace('[', ''), items)\n    items = map(lambda s:s.replace(']', ''), items)\n    items = map(lambda s:s.replace(']', ''), items)\n    items = map(lambda s:s.replace('{', ''), items)\n    items = map(lambda s:s.replace('}', ''), items)\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n + 1\n    if n % 2 == 0:\n        n = n + 1\n    return n\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # code here\n    ans = 1\n    i = 1\n    while i < n:\n        ans = ans + i\n        i = i + 1\n    return ans\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    i = 0\n    while i < n:\n        i += 1\n        n -= 1\n    return n\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # edge case\n    if n==0:\n        return 0\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)*(2*n+1)/6\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n * (n+1)/2)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_to_search = text\n    first_word = re.search(r\"\\b\\w+\", text_to_search).group(0)\n    text_to_search = re.sub(first_word, \" \", text_to_search)\n    text_to_search = re.sub(\"\\s\\s+\", \" \", text_to_search)\n    #print(text_to_search)\n    middle_word = re.search(r\"\\w+\", text_to_search).group(0)\n    return (middle_word)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_splitted = text.split()\n    text_list = []\n    for word in text_splitted:\n        if word[0].lower() == 'z' and word[-1].lower() == 'z':\n            pass\n        else:\n            text_list.append(word)\n    text =''.join(text_list)\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = re.split(r'\\s+',text)\n    if(len(text) == 0):\n        return False\n    z = \"z\"\n    for i in text:\n        if(z in i):\n            if(i.startswith('z')):\n                i = i[1:]\n            else:\n                i = i[0:len(i)-1]\n            if(i.endswith('z')):\n                i = i[0:len(i)-1]\n            else:\n                i = i[0:len(i)]\n            if(i!= z):\n                return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('\\Az', text):\n        return 'word_contains_z_at_the_start'\n    elif re.search('z\\Z', text):\n        return 'word_contains_z_at_the_end'\n    else:\n        return 'word_does_not_contain_z'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text.startswith('z'):\n        text = text[1:]\n    if text.endswith('z'):\n        text = text[:-1]\n    return 'z' in text\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    def text_match_wordz_middle2(text):\n        text = text.lower()\n        if text[0] == 'z' or text[-1] == 'z':\n            return False\n        else:\n            return True\n    \n    text = text.split(' ')\n    lst = []\n    for i in text:\n        if text_match_wordz_middle2(i):\n            lst.append(i)\n    return''.join(lst)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    found_match = re.search(\"\\w*z\\w*\", text)\n    return found_match\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    pattern = re.compile(r'^z|z$')\n    m = pattern.search(text)\n    \n    return True if m else False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z',text) and re.search('z',text[1:len(text)-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.findall(\"\\sz\", text)\ndef text_match_wordz_full(text):\n    '''\n    Write a function that checks if a string contains 'z' at each character.\n    '''\n    return re.findall(\"z\", text)\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at each end of the word.\n    '''\n    return re.findall(\"z\\s\", text)\ndef text_match_wordz_both(text):\n    '''\n    Write a function that checks if a string contains 'z' at each end of the word and at the start of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_at_start(text):\n    '''\n    Write a function that checks if a string contains 'z' at the start of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_at_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the end of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_both_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' at the end of the word and at the start of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_at_start_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' at the start of the word and at the end of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_at_end_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' at the end of the word and at the start of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_at_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the start of the word and at the end of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the end of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_at_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the start of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_at_start(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the end of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the start of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_at_start_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the start of the word and the middle of the word and at the end of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_at_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and the middle of the word and at the end of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_at_middle_middle_at_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and the middle of the word and at the start of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_at_start_middle_end_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' at the start of the word and the middle of the word and at the end of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_end_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the end of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_end_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the end of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the middle of the word and at the end of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the middle of the word and at the start of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the middle of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the middle of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_middle_middle(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the middle of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_middle_middle_start(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the middle of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the middle of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the middle of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middle_middle_middle_end(text):\n    '''\n    Write a function that checks if a string contains 'z' at the middle of the word and at the middle of the word and at the middle of the word.\n    '''\n    return re.findall(\"z\\sz\", text)\ndef text_match_wordz_middl"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    k = k + 1\n    for i in range(k//2):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    i = 0\n    while(i < len(input)):\n        if(k <= i):\n            arr.append(input[len(input) - i - 1])\n            break\n        arr.append(input[len(input) - i - 1])\n        i += 1\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # your code here\n    # initialize i and length of array\n    i = 0\n    length = len(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # i = 0\n    # rev_arr = []\n    # while i < k: \n    #     rev_arr.append(input[i])\n    #     i += 1\n    # rev_arr = rev_arr + input[k:]\n    # return rev_arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    for x in range(0, k):\n        arr.append(input[len(input) - 1 - x])\n    \n    for x in range(0, len(input) - k):\n        arr.append(input[x])\n    \n    print(arr)\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input.copy()\n    arr.sort()\n    output = arr[:k]\n    for i in range(k, len(arr)):\n        output.append(arr[i])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return False\n    else:\n        input[k:] = input[-k:]\n        input[:k] = input[:-k]\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input[:]\n    n = len(arr) \n    start = 0\n    end = n-1\n    while(start <= end): \n        while(start <= end and arr[start] <= k): \n            start += 1\n        while(start <= end and arr[end] >= k): \n            end -= 1\n        if (start <= end): \n            arr[start], arr[end] = arr[end], arr[start] \n            start += 1\n            end -= 1\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    a = input[:k]\n    a.reverse()\n    return a + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == len(input):\n        return input\n    else:\n        return reverse_Array_Upto_K(input, k + 1) + input[0:k]\n        \nif __name__ == \"__main__\": \n    input_str = input()\n    k = int(input())\n    print(reverse_Array_Upto_K(input_str, k))"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict, )\n    return test_tup\n    \n    \ndef remove_values_from_tuple(test_tup, value):\n    '''\n    Write a function to remove a value from a tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup[:value] + test_tup[value+1:]\n    return test_tup\n    \n    \ndef tuple_slice(test_tup, start_index, end_index):\n    '''\n    Write a function to get a slice from a tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup[start_index:end_index]\n    return new_tup\n    \n    \ndef extend_tuple(test_tup, new_tuple):\n    '''\n    Write a function to add a tuple to the end of a tuple. The output should be a tuple.\n    '''\n    test_tup += new_tuple\n    return test_tup\n    \n    \ndef count_occurences(test_tup, value):\n    '''\n    Write a function to count the number of times a value appears in a tuple.\n    '''\n    return test_tup.count(value)\n    \n    \ndef sort_tuple(test_tup):\n    '''\n    Write a function to sort a tuple.\n    '''\n    test_tup.sort()\n    return test_tup\n    \n    \ndef get_first_n_elements(test_tup, n):\n    '''\n    Write a function to get the first n elements of a tuple.\n    '''\n    new_tup = test_tup[:n]\n    return new_tup\n    \n    \ndef get_last_n_elements(test_tup, n):\n    '''\n    Write a function to get the last n elements of a tuple.\n    '''\n    new_tup = test_tup[-n:]\n    return new_tup\n    \n    \ndef get_middle_n_elements(test_tup, n):\n    '''\n    Write a function to get the last n elements of a tuple.\n    '''\n    new_tup = test_tup[n:-n]\n    return new_tup\n    \n    \ndef get_index_n_elements(test_tup, n):\n    '''\n    Write a function to get the last n elements of a tuple.\n    '''\n    new_tup = test_tup[n]\n    return new_tup\n    \n    \ndef reverse_tuple(test_tup):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    new_tup = test_tup[::-1]\n    return new_tup\n    \n    \ndef tuple_without_first_and_last_elements(test_tup):\n    '''\n    Write a function to remove the first and last elements of a tuple.\n    '''\n    new_tup = test_tup[1:-1]\n    return new_tup\n    \n    \ndef tuple_length(test_tup):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    return len(test_tup)\n    \n    \ndef tuple_concatenation(first_tup, second_tup):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    concat_tup = first_tup + second_tup\n    return concat_tup\n    \n    \ndef tuple_join(first_tup, second_tup):\n    '''\n    Write a function to join two tuples.\n    '''\n    new_tup = first_tup + second_tup\n    return new_tup\n    \n    \ndef tuple_addition(first_tup, second_tup):\n    '''\n    Write a function to add two tuples.\n    '''\n    new_tup = first_tup + second_tup\n    return new_tup\n    \n    \ndef tuple_index(test_tup, index):\n    '''\n    Write a function to return the value of an index in a tuple.\n    '''\n    return test_tup[index]\n    \n    \ndef tuple_add(first_tup, second_tup):\n    '''\n    Write a function to add two tuples.\n    '''\n    new_tup = first_tup + second_tup\n    return new_tup\n    \n    \ndef tuple_subtract(first_tup, second_tup):\n    '''\n    Write a function to subtract two tuples.\n    '''\n    new_tup = first_tup - second_tup\n    return new_tup\n    \n    \ndef tuple_multiply(first_tup, second_tup):\n    '''\n    Write a function to multiply two tuples.\n    '''\n    new_tup = first_tup * second_tup\n    return new_tup\n    \n    \ndef tuple_divide(first_tup, second_tup):\n    '''\n    Write a function to divide two tuples.\n    '''\n    new_tup = first_tup / second_tup\n    return new_tup\n    \n    \ndef tuple_reverse(test_tup):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    new_tup = test_tup[::-1]\n    return new_tup\n    \n    \ndef tuple_sort(test_tup):\n    '''\n    Write a function to sort a tuple.\n    '''\n    new_tup = sorted(test_tup)\n    return new_tup\n    \n    \ndef tuple_insert(test_tup, index, value):\n    '''\n    Write a function to insert an element in a tuple at an index.\n    '''\n    test_tup = test_tup[:index] + (value, ) + test_tup[index:]\n    return test_tup\n    \n    \ndef tuple_reverse_insert(test_tup, value, index):\n    '''\n    Write a function to insert an element in a tuple at an index.\n    '''\n    new_tup = test_tup[:index] + (value, ) + test_tup[index+1:]\n    return new_tup\n    \n    \ndef tuple_concatenation_with_list(test_tup, new_list):\n    '''\n    Write a function to concatenate a tuple and a list.\n    '''\n    new_tup = test_tup + new_list\n    return new_tup\n    \n    \ndef tuple_index_with_list(test_tup, index):\n    '''\n    Write a function to index a tuple.\n    '''\n    return test_tup[index]\n    \n    \ndef tuple_concatenation_with_set(test_tup, new_set):\n    '''\n    Write a function to concatenate a tuple and a set.\n    '''\n    new_tup = test_tup + new_set\n    return new_tup\n    \n    \ndef tuple_insert_with_set(test_tup, new_set, index):\n    '''\n    Write a function to insert an element in a tuple at an index.\n    '''\n    new_tup = test_tup[:index] + (new_set, ) + test_tup[index:]\n    return new_tup\n    \n    \ndef tuple_reverse_insert_with_set(test_tup, new_set, index):\n    '''\n    Write a function to insert an element in a tuple at an index.\n    '''\n    new_tup = test_tup[:index] + (new_set, ) + test_tup[index+1:]\n    return new_tup\n    \n    \ndef tuple_length_with_set(test_tup):\n    '''\n    Write a function to return the length of a tuple.\n    '''\n    return len(test_tup)\n    \n    \ndef tuple_index_with_list(test_"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup)):\n        new_tuple = new_tuple + (test_tup[i],)\n    for k, v in test_dict.items():\n        new_tuple = new_tuple + (v,)\n    return new_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    final_tup = test_tup\n    if test_tup:\n        for each_key in test_dict:\n            final_tup = final_tup + (test_dict[each_key], )\n        return final_tup\n    else:\n        return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1].update(test_dict))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #tup = test_tup + (test_dict,)\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_test = test_tup + (test_dict,)\n    return tuple_test\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup\n    for key in test_dict:\n        new_tup = new_tup + (key, test_dict[key])\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = test_tup + (test_dict,)\n    return tup\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    for i in range(n-2, -1, -1):\n        for j in range(n):\n            dp[i][j] = cost[i][j] + max(dp[i+1][j], dp[i+1][j+1])\n    return (max(dp[0]))//(n)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Logic\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] for k in range(i+1, n))\n            dp[i][j] += cost[i][j]\n    # Output\n    return (max(max(row) for row in dp)) / (n * n)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    #base case\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n    for i in range(1, n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i][j-1], dp[i-1][j])\n    return max(dp[n-1])/n\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[-1 for i in range(n)] for j in range(n)]\n    \n    # base case: when there is only 1 cell left\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = cost[i][j]\n    \n    # initialize top row\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    \n    # initialize left column\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[-1][-1] / (n * n)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if (i == 0 and j == 0):\n                dp[i][j] = cost[i][j]\n            else:\n                if (i == 0):\n                    dp[i][j] = dp[i][j-1] + cost[i][j]\n                elif (j == 0):\n                    dp[i][j] = dp[i-1][j] + cost[i][j]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1]/len(dp[n-1])\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n    m = len(cost[0])\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = cost[i][0] + dp[i - 1][0]\n    for j in range(1, m):\n        dp[0][j] = cost[0][j] + dp[0][j - 1]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    return (sum(dp[n - 1]) / len(dp[n - 1]))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row, col = len(cost), len(cost[0])\n    \n    # initialize cost to infinity\n    minCost = inf\n    maxCost = 0\n    \n    # initialize maxCost for top right cell\n    maxCost = cost[0][col-1]\n    \n    # initialize minCost for bottom left cell\n    minCost = cost[row-1][0]\n    \n    # initialize cost to zero for bottom right cell\n    for i in range(row-1, -1, -1):\n        for j in range(col-1, -1, -1):\n            # update minCost and maxCost\n            if minCost > cost[i][j]:\n                minCost = cost[i][j]\n            if maxCost < cost[i][j]:\n                maxCost = cost[i][j]\n    \n    # check to see if minCost and maxCost were updated\n    if maxCost > minCost:\n        return maxCost\n    else:\n        return minCost\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    \n    #initializing dp array\n    dp = [[None]*n for _ in range(n)]\n    \n    #setting the dp array with the first row and first column being 0\n    for i in range(n):\n        dp[0][i] = 0\n    for i in range(n):\n        dp[i][0] = 0\n    \n    #setting the dp array with the first row and first column being 0\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = cost[i][j] + min(dp[i][j-1], dp[i-1][j])\n    return dp[n-1][n-1] / (n*n)\n    \n    \n    \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # for every row in cost\n    for row in range(1,len(cost)):\n        # for every column in cost\n        for column in range(1,len(cost[row])):\n            # find the max average for the cell\n            cost[row][column] += max(cost[row][column-1],cost[row-1][column])\n    return max(cost[len(cost)-1])/len(cost)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = []\n    for key in students.keys():\n        if students[key][0] > h and students[key][1] > w:\n            res.append(key)\n    return res\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # list of tuples containing height,weight\n    students_with_height_below_min = []\n    for student in students:\n        # height,weight\n        height_weight = students[student]\n        # check if height is lower than min\n        if height_weight[0] < h:\n            students_with_height_below_min.append(student)\n    # check if weight is lower than min\n    for student in students_with_height_below_min:\n        weight = students[student][1]\n        if weight < w:\n            students_with_height_below_min.remove(student)\n    # return filtered list\n    return students_with_height_below_min\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    return {student_name:student_data for student_name, student_data in students.items() if student_data[0] >= h and student_data[1] >= w}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for student, values in students.items():\n        if h<values[0] and w<values[1]:\n            new_students[student] = values\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = []\n    if(students):\n        for k in students:\n            if(students[k][0]>h and students[k][1]>w):\n                result.append(students[k])\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = []\n    for student in students.keys():\n        if students[student][0]>h and students[student][1]>w:\n            res.append(student)\n    return res\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    tuple_1=()\n    list_1=list(students.keys())\n    for i in range(0,len(list_1)):\n        list_1[i]=list_1[i].split()\n        list_1[i]=tuple(list_1[i])\n        if h<=float(list_1[i][1])<=w:\n            tuple_1+=[list_1[i]]\n    return tuple_1\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter function\n    def filter(h,w,students):\n        for key in students.keys():\n            if students[key][0] > h and students[key][1] > w:\n                yield students[key]\n    # Main function\n    def main(h,w):\n        students = {key:students[key] for key in students.keys()}\n        for value in filter(h,w,students):\n            print(value)\n    # Calling the function        \n    main(h,w)\n    \nstudents = {\n    'Harry': (170, 80),\n    'Rohan': (180, 75),\n    'Harsh': (182, 75),\n    'Karan': (171, 80),\n    'Akash': (180, 85),\n    'Harshal': (181, 75),\n}"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filtered = {}\n    for i in range(len(students)):\n        students_filtered[students[i][0]] = students[i][1]\n    \n    if (h >= students_filtered[\"student_height\"] and w >= students_filtered[\"student_weight\"]):\n        return students_filtered\n    \n    return students_filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    if(students is not None):\n        return{name:data for name, data in students.items() if data[0] > h and data[1] > w}\n    else:\n        print(\"No students in data\")\n        \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    c = 0\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            c += 1\n    return c\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(1 for i, j in zip(nums1, nums2) if i == j)\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Your code here\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    a = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            a += 1\n    return a\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pairs_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1)!= len(nums2):\n        return count\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) for x in str(base**power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    \n    for i in range(1, power + 1):\n        power_sum = power_sum + int(base) ** i\n    \n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    sum = 0\n    for i in range(len(base)):\n        sum += int(base[i])**power\n        power -= 1\n    return sum\n    "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for digit in range(1, power + 1):\n        base_sum += int(base) ** digit\n    return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_num = str(base)\n    power_num = str(power)\n    base_nums = list(base_num)\n    power_nums = list(power_num)\n    power_sum = 0\n    for i in range(0, len(base_nums)):\n        power_sum += int(base_nums[i])**int(power_nums[i])\n    print(f'The sum of digits in {base}^{power} is {power_sum}.')\n    \n    \n    \npower_base_sum(13,2)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    res = 1\n    for i in range(1, power + 1):\n        res *= base\n    return res\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Your code goes here\n    return sum([int(i) for i in str(base**power)])\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base = str(base)\n    for i in range(len(base)):\n        sum += int(base[i]) ** power\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    base_string = str(base)\n    power_string = str(power)\n    \n    final = []\n    for i in range(len(base_string)):\n        final.append(base_string[i])\n        for j in range(len(power_string)):\n            final.append(base_string[i])\n            final.append(power_string[j])\n    return int(\"\".join(final))\n    \n    \ndef reverse_string(my_string):\n    '''\n    Write a function that takes a string as an argument and reverse the given string.\n    '''\n    my_string = my_string[::-1]\n    return my_string\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if not text1:\n        return \"\"\n    else:\n        #matching = re.findall(\"\\\"\\\"\",text1)\n        matching = re.findall(\"\\\"[^\\\"]*\\\"\",text1)\n        #print(matching)\n        if matching:\n            text1 = text1.replace(matching[0],\"\")\n            return text1.replace('\"',\"\")\n        else:\n            return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # \" \" - 1\n    # \" \" - 1\n    # \"\" - 2\n    # \"\" - 2\n    #'' - 3\n    # \" \" - 4\n    # \" \" - 4\n    # \" \" - 5\n    # \"\" - 6\n    #'' - 7\n    # \"\" - 8\n    # \"\" - 8\n    #'' - 9\n    # \"\" - 10\n    #'' - 11\n    # \"\" - 12\n    # \" \" - 13\n    # \"\" - 14\n    # \"\" - 14\n    # \"\" - 15\n    # \" \" - 16\n    # \"\" - 17\n    # \"\" - 18\n    # \"\" - 18\n    # \"\" - 19\n    # \"\" - 20\n    # \"\" - 21\n    # \"\" - 22\n    # \"\" - 23\n    # \"\" - 24\n    # \"\" - 25\n    # \"\" - 26\n    # \"\" - 27\n    # \"\" - 28\n    # \"\" - 29\n    # \"\" - 30\n    # \"\" - 31\n    # \"\" - 32\n    # \"\" - 33\n    # \"\" - 34\n    # \"\" - 35\n    # \"\" - 36\n    # \"\" - 37\n    # \"\" - 38\n    # \"\" - 39\n    # \"\" - 40\n    # \"\" - 41\n    # \"\" - 42\n    # \"\" - 43\n    # \"\" - 44\n    # \"\" - 45\n    # \"\" - 46\n    # \"\" - 47\n    # \"\" - 48\n    # \"\" - 49\n    # \"\" - 50\n    # \"\" - 51\n    # \"\" - 52\n    # \"\" - 53\n    # \"\" - 54\n    # \"\" - 55\n    # \"\" - 56\n    # \"\" - 57\n    # \"\" - 58\n    # \"\" - 59\n    # \"\" - 60\n    # \"\" - 61\n    # \"\" - 62\n    # \"\" - 63\n    # \"\" - 64\n    # \"\" - 65\n    # \"\" - 66\n    # \"\" - 67\n    # \"\" - 68\n    # \"\" - 69\n    # \"\" - 70\n    # \"\" - 71\n    # \"\" - 72\n    # \"\" - 73\n    # \"\" - 74\n    # \"\" - 75\n    # \"\" - 76\n    # \"\" - 77\n    # \"\" - 78\n    # \"\" - 79\n    # \"\" - 80\n    # \"\" - 81\n    # \"\" - 82\n    # \"\" - 83\n    # \"\" - 84\n    # \"\" - 85\n    # \"\" - 86\n    # \"\" - 87\n    # \"\" - 88\n    # \"\" - 89\n    # \"\" - 90\n    # \"\" - 91\n    # \"\" - 92\n    # \"\" - 93\n    # \"\" - 94\n    # \"\" - 95\n    # \"\" - 96\n    # \"\" - 97\n    # \"\" - 98\n    # \"\" - 99\n    # \"\" - 100\n    # \"\" - 101\n    # \"\" - 102\n    # \"\" - 103\n    # \"\" - 104\n    # \"\" - 105\n    # \"\" - 106\n    # \"\" - 107\n    # \"\" - 108\n    # \"\" - 109\n    # \"\" - 110\n    # \"\" - 111\n    # \"\" - 112\n    # \"\" - 113\n    # \"\" - 114\n    # \"\" - 115\n    # \"\" - 116\n    # \"\" - 117\n    # \"\" - 118\n    # \"\" - 119\n    # \"\" - 120\n    # \"\" - 121\n    # \"\" - 122\n    # \"\" - 123\n    # \"\" - 124\n    # \"\" - 125\n    # \"\" - 126\n    # \"\" - 127\n    # \"\" - 128\n    # \"\" - 129\n    # \"\" - 130\n    # \"\" - 131\n    # \"\" - 132\n    # \"\" - 133\n    # \"\" - 134\n    # \"\" - 135\n    # \"\" - 136\n    # \"\" - 137\n    # \"\" - 138\n    # \"\" - 139\n    # \"\" - 140\n    # \"\" - 141\n    # \"\" - 142\n    # \"\" - 143\n    # \"\" - 144\n    # \"\" - 145\n    # \"\" - 146\n    # \"\" - 147\n    # \"\" - 148\n    # \"\" - 149\n    # \"\" - 150\n    # \"\" - 151\n    # \"\" - 152\n    # \"\" - 153\n    # \"\" - 154\n    # \"\" - 155\n    # \"\" - 156\n    # \"\" - 157\n    # \"\" - 158\n    # \"\" - 159\n    # \"\" - 160\n    # \"\" - 161\n    # \"\" - 162\n    # \"\" - 163\n    # \"\" - 164\n    # \"\" - 165\n    # \"\" - 166\n    # \"\" - 167\n    # \"\" - 168\n    # \"\" - 169\n    # \"\" - 170\n    # \"\" - 171\n    # \"\" - 172\n    # \"\" - 173\n    # \"\" - 174\n    # \"\" - 175\n    # \"\" - 176\n    # \"\" - 177\n    # \"\" - 178\n    # \"\" - 179\n    # \"\" - 180\n    # \"\" - 181\n    # \"\" - 182\n    # \"\" - 183\n    # \"\" - 184\n    # \"\" - 185\n    # \"\" - 186\n    # \"\" - 187\n    # \"\" - 188\n    # \"\" - 189\n    # \"\" - 190\n    # \"\" - 191\n    # \"\" - 192\n    # \"\" - 193\n    # \"\" - 194\n    # \"\" - 195\n    # \"\" - 196\n    # \"\" - 197\n    # \"\" - 198\n    # \"\" - 199\n    # \"\" - 200\n    # \"\" - 201\n    # \"\" - 202\n    # \"\" - 203\n    # \"\" - 204\n    # \"\" - 205\n    # \"\" - 206\n    # \"\" - 207\n    # \"\" - 208\n    # \"\" - 209\n    # \"\" - 210\n    # \"\" - 211\n    # \"\" - 212\n    # \"\" - 213\n    # \"\" - 214\n    # \"\" - 215\n    # \"\" - 216\n    # \"\" - 217\n    # \"\" - 218\n    # \"\" - 219\n    # \"\" - 220\n    # \"\" - 221\n    # \"\" - 222\n    # \"\" - 223\n    # \"\" - 224\n    # \"\" - 225\n    # \"\" - 226\n    # \"\" - 227\n    # \"\" - 228\n    # \"\" - 229\n    # \"\" - 230\n    # \"\" - 231\n    # \"\" - 232\n    # \"\" - 233\n    # \"\" - 234\n    # \"\" - 235\n    # \"\" - 236\n    # \"\" - 237\n    # \"\" - 238\n    # \"\" - 239\n    # \"\" - 240\n    # \"\" - 241\n    # \"\" - 242\n    # \"\" - 243\n    # \"\" - 244\n    # \"\" - 245\n    # \"\" - 246\n    # \"\" - 247\n    # \"\" - 248\n    # \"\" - 249\n    # \"\" - 250\n    # \"\" - 251\n    # \"\" - 252\n    # \"\" - 253\n    # \"\" - 254\n    # \"\" - 255\n    # \"\" - 256\n    # \"\" - 257\n    # \"\" - 258\n    # \"\" - 259\n    # \"\" - 260\n    # \"\" - 261\n    # \"\" - 262\n    # \"\" - 263\n    # \"\" - 264\n    # \"\" - 265\n    # \"\" - 266\n    # \"\" - 267\n    # \"\" - 268\n    # \"\" - 269\n    # \"\" - 270\n    # \"\" - 271\n    # \"\" - 272\n    # \"\" - 273\n    # \"\" - 274\n    # \"\" - 275\n    # \"\" - 276\n    # \"\" - 277\n    # \"\" - 278\n    # \"\" - 279\n    # \"\" - 280\n    # \"\" - 281\n    # \"\" - 282\n    # \"\" - 283\n    # \"\" - 284\n    # \"\" - 285\n    # \"\" - 286\n    # \"\" - 287\n    # \"\" - 288\n    # \"\" - 289\n    # \"\" - 290\n    # \"\" - 291\n    # \"\" - 292\n    # \"\" - 293\n    # \"\" - 294\n    # \"\" - 295\n    # \"\" - 296\n    # \"\" - 297\n    # \"\" - 298\n    # \"\" - 299\n    # \"\" - 300\n    # \"\" - 301\n    # \"\" - 302\n    # \"\" - 303\n    # \"\" - 304\n    # \"\" - 305\n    # \"\" - 306\n    # \"\" - 307\n    # \"\" - 308\n    # \"\" - 309\n    # \"\" - 310\n    # \"\" - 311\n    # \"\" - 312\n    # \"\" - 313\n    # \"\" - 314\n    # \"\" - 315\n    # \"\" - 316\n    # \"\" - 317\n    # \"\" - 318\n    # \"\" - 319\n    # \"\" - 320\n    # \"\" - 321\n    # \"\" - 322\n    # \"\" - 323\n    # \"\" - 324\n    # \"\" - 325\n    # \"\" - 326\n    # \"\" - 327"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = text1.lower()\n    if ('\"' in text2):\n        text2 = text2.replace('\"', \"\")\n        text2 = text2.replace(' ', \"\")\n        text2 = text2.replace('\\n', \"\")\n        text2 = text2.replace('\\t', \"\")\n        text2 = text2.replace('\\r', \"\")\n        text2 = text2.replace('-', \"\")\n        text2 = text2.replace('\u2013', \"\")\n        text2 = text2.replace('_', \"\")\n        text2 = text2.replace('`', \"\")\n        text2 = text2.replace('\\'', \"\")\n        text2 = text2.replace('\u00ab', \"\")\n        text2 = text2.replace('\u00bb', \"\")\n        text2 = text2.replace('\u2019', \"\")\n        text2 = text2.replace('\u201c', \"\")\n        text2 = text2.replace('\u201d', \"\")\n        text2 = text2.replace('\u00b0', \"\")\n        text2 = text2.replace('\u2032', \"\")\n        text2 = text2.replace('\u2033', \"\")\n        text2 = text2.replace('\u00b7', \"\")\n        text2 = text2.replace('+', \"\")\n        text2 = text2.replace('-', \"\")\n        text2 = text2.replace('\u00f7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00f7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace('\u00d7', \"\")\n        text2 = text2.replace("
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    p1 = re.compile(r'\"(.*)\"')\n    match = p1.findall(text1)\n    print(match)\n    return match\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    if \" \" in text1:\n        text = text1.split(\" \")\n        for i in range(len(text)):\n            if \" \" in text[i]:\n                first_quote = i\n                break\n    else:\n        first_quote = 0\n    for i in range(len(text)-1):\n        if \" \" in text[i]:\n            second_quote = i\n            break\n    return (text[first_quote+1:second_quote])\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    q = re.search(r'\\\".*\\\"',text1)\n    if q == None:\n        return ''\n    else:\n        return q.group(0)[1:-1]\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    quotation_pattern = r'\\\"[^\\\"]+\\\"'\n    try:\n        re.findall(quotation_pattern, text1)\n    except TypeError as e:\n        print(e)\n    \n    result = re.findall(quotation_pattern, text1)\n    \n    if result:\n        print(\"Extracted Quotation:\")\n        for i in result:\n            print(i)\n    else:\n        print(\"No Quotation Found\")\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Your code here\n    if(text1):\n        pattern = re.compile(r\"\\\"\")\n        result = re.findall(pattern,text1)\n        if(result):\n            return result\n        else:\n            return 'NULL'\n    else:\n        return 'NULL'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return text1.split(\" \")[1]\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if not text1:\n        return []\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (x*(x+1) for x in t_1)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = tuple(test_tup)\n    return tuple(test_tup[i]*(test_tup[i+1]) for i in range(len(test_tup)-1))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x,y: x * y, test_tup, range(1, len(test_tup)+1)))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = (t_i * (t_i + 1) for t_i in test_tup)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    out = []\n    for i in range(len(test_tup)-1):\n        out.append(test_tup[i] * test_tup[i + 1])\n    return tuple(out)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    tuple = tuple(test_tup)\n    for i in range(n):\n        tuple = tuple + (tuple[i] * (tuple[i+1]))\n    return tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    c = test_tup[2]\n    d = test_tup[3]\n    e = test_tup[4]\n    tup = (a*b, a*c, a*d, a*e)\n    return tup\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i + 1])\n    result.append(test_tup[-1])\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = []\n    res_i = 0\n    for i in range(len(lst1)):\n        res.append(lst1[i] + lst2[i])\n    return res\nprint(sum_list([1,2,3],[4,5,6]))\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list=[]\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i]+lst2[i])\n    return sum_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summ = []\n    for i in range(len(lst1)):\n        summ.append(lst1[i]+lst2[i])\n    return summ\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(0, len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # YOUR CODE HERE\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i]+lst2[i])\n    return new_list\n    \ndef list_diff(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a new list that is comprised of all the elements of the \n    first list that are not in the second list, namely, [a_1, a_2,..., a_n] is returned.\n    '''\n    # YOUR CODE HERE\n    new_list = []\n    for i in range(len(lst1)):\n        if lst1[i] not in lst2:\n            new_list.append(lst1[i])\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(nums)\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.remove(nums[i])\n        i += 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # for i in range(len(nums)-1, -1, -1):\n    #     if nums[i] == nums[i-1]:\n    #         nums.pop(i)\n    # return len(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == 0:\n            continue\n        yield key, list(group)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for group,grp in groupby(nums):\n        grp = list(grp)\n        if len(grp) >= 2:\n            return grp[0:1] + grp[2:]\n    return []\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        print(key)\n        print(list(group))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    consecutive = []\n    for k, g in groupby(nums):\n        consecutive.append(list(g))\n    print(consecutive)\n    new = []\n    for i in range(len(consecutive)):\n        if len(consecutive[i]) == 1:\n            new.append(consecutive[i][0])\n        elif len(consecutive[i]) > 1:\n            if consecutive[i][0]!= consecutive[i][1]:\n                new.append(consecutive[i][0])\n    return new\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == None:\n            continue\n        else:\n            yield key\ndef remove_all_duplicates(nums):\n    '''\n    Write a function to remove all duplicates from an unsorted linked list.\n    '''\n    curr = nums\n    prev = None\n    while curr:\n        if prev == None:\n            prev = curr\n            curr = curr.next\n        else:\n            if curr.data == prev.data:\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n    return nums\ndef find_element(nums, x):\n    '''\n    Write a function to find the position of an element in a singly linked list.\n    '''\n    curr = nums\n    pos = 0\n    while curr:\n        if curr.data == x:\n            return pos\n        else:\n            curr = curr.next\n        pos += 1\n    return -1\ndef swap_nodes(nums, x, y):\n    '''\n    Write a function to swap two nodes in a singly linked list.\n    '''\n    curr = nums\n    if x == y:\n        return\n    else:\n        if x > y:\n            while curr:\n                if curr.next == nums and curr.next == x:\n                    curr.next = y\n                    break\n                elif curr.next == nums and curr.next == y:\n                    curr.next = x\n                    break\n                else:\n                    curr = curr.next\n        else:\n            while curr:\n                if curr.next == nums and curr.next == y:\n                    curr.next = x\n                    break\n                elif curr.next == nums and curr.next == x:\n                    curr.next = y\n                    break\n                else:\n                    curr = curr.next\ndef partition(nums, x):\n    '''\n    Write a function to partition a linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to x.\n    '''\n    curr = nums\n    lst = []\n    while curr:\n        if curr.data < x:\n            lst.append(curr)\n        else:\n            curr = curr.next\n    curr = nums\n    while curr:\n        if curr.data == x:\n            lst.append(curr)\n        else:\n            curr = curr.next\n    for i in range(len(lst)):\n        if i == 0:\n            temp = lst[i]\n            lst[i] = lst[i+1]\n            lst[i+1] = temp\n    return lst\ndef partition_around_middle(nums, x):\n    '''\n    Write a function to partition a linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to x.\n    '''\n    curr = nums\n    left_lst = []\n    right_lst = []\n    while curr:\n        if curr.data < x:\n            left_lst.append(curr)\n        else:\n            right_lst.append(curr)\n        curr = curr.next\n    # move left partition into middle\n    for i in range(len(left_lst)//2):\n        temp = left_lst[i]\n        left_lst[i] = left_lst[i+len(left_lst)//2]\n        left_lst[i+len(left_lst)//2] = temp\n    # move right partition into middle\n    for i in range(len(right_lst)//2):\n        temp = right_lst[i]\n        right_lst[i] = right_lst[i+len(right_lst)//2]\n        right_lst[i+len(right_lst)//2] = temp\n    # merge left partition and right partition\n    curr = nums\n    for i in range(len(left_lst)+len(right_lst)):\n        if i < len(left_lst):\n            curr.next = left_lst[i]\n            curr = curr.next\n        if i < len(right_lst):\n            curr.next = right_lst[i]\n            curr = curr.next\n    return nums\ndef addTwoNumbers(l1, l2):\n    '''\n    Write a function that adds two numbers represented as linked lists.\n    '''\n    curr1, curr2 = l1, l2\n    carry = 0\n    lst = []\n    while curr1 or curr2 or carry:\n        a = 0 if not curr1 else curr1.data\n        b = 0 if not curr2 else curr2.data\n        s = a + b + carry\n        carry = s // 10\n        s = s % 10\n        lst.append(s)\n        curr1 = curr1.next if curr1 else None\n        curr2 = curr2.next if curr2 else None\n    return lst\ndef addTwoNumbers2(l1, l2):\n    '''\n    Write a function that adds two numbers represented as linked lists.\n    '''\n    curr1, curr2 = l1, l2\n    carry = 0\n    lst = []\n    while curr1 or curr2 or carry:\n        a = 0 if not curr1 else curr1.data\n        b = 0 if not curr2 else curr2.data\n        s = a + b + carry\n        carry = s // 10\n        s = s % 10\n        lst.append(s)\n        curr1 = curr1.next if curr1 else None\n        curr2 = curr2.next if curr2 else None\n    lst.reverse()\n    return lst\ndef remove_duplicates(nums):\n    '''\n    Write a function that takes a sorted linked list and returns a new sorted linked list with all duplicate values removed.\n    '''\n    curr = nums\n    prev = None\n    while curr:\n        if prev == None:\n            prev = curr\n            curr = curr.next\n        else:\n            if curr.data == prev.data:\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n    return nums\ndef mergeTwoLists(l1, l2):\n    '''\n    Write a function that takes in two singly linked lists and returns a singly linked list that contains all the elements of the first two lists.\n    '''\n    curr1, curr2 = l1, l2\n    while curr1 and curr2:\n        if curr1.data <= curr2.data:\n            curr1 = curr1.next\n        else:\n            temp = curr2\n            curr2 = curr2.next\n            curr1.next = temp\n            curr1 = curr1.next\n    if curr1 == None:\n        curr2.next = curr1\n    return l1\ndef mergeTwoLists2(l1, l2):\n    '''\n    Write a function that takes in two singly linked lists and returns a singly linked list that contains all the elements of the first two lists.\n    '''\n    curr1, curr2 = l1, l2\n    while curr1 and curr2:\n        if curr1.data <= curr2.data:\n            curr1 = curr1.next\n        else:\n            temp = curr2\n            curr2 = curr2.next\n            curr1.next = temp\n            curr1 = curr1.next\n    if curr1 == None:\n        curr2.next = curr1\n    return l1\ndef reverse_linked_list(head):\n    '''\n    Write a function that takes in a Singly Linked List and reverses the linked list in place.\n    '''\n    curr = head\n    while curr:\n        temp = curr.next\n        curr.next = None\n        curr = tem"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    length = len(nums)\n    i = 0\n    while i < length:\n        if i!= length - 1 and nums[i] == nums[i+1]:\n            nums.pop(i)\n        else:\n            i += 1\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.append(list(group))\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralsurface=math.pi*math.pow(r,2)*h\n    return lateralsurface\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    area = 2*pi*(r**2)*(h/2)\n    return area\n    \n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area = 2*pi*(r**2)*h\n    return area\n    \n    \ndef lateralsurface_cube(s):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length s.\n    '''\n    area = 6*s**2\n    return area\n    \n    \ndef lateralsurface_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid given its height h and its base length l.\n    '''\n    area = (2*h)*l\n    return area\n    \n    \ndef lateralsurface_rightpyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a right pyramid given its height h and its base length l.\n    '''\n    area = (2*h)*l\n    return area\n    \n    \ndef lateralsurface_rightpyramid2(h,l):\n    '''\n    Write a function to find the lateral surface area of a right pyramid given its height h and its base length l.\n    '''\n    area = (2*h)*l\n    return area\n    \n    \ndef lateralsurface_triangle(s):\n    '''\n    Write a function to find the lateral surface area of a triangle given its side length s.\n    '''\n    area = (s**2)/2\n    return area\n    \n    \ndef lateralsurface_triangle2(s):\n    '''\n    Write a function to find the lateral surface area of a triangle given its side length s.\n    '''\n    area = (s**2)/2\n    return area\n    \n    \ndef lateral_surface_difference(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference2(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference3(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference4(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference5(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference6(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference7(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference8(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference9(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference10(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference11(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference12(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference13(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference14(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference15(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_rightpyramid2(h,l1)\n    return area\n    \n    \ndef lateral_surface_difference16(l1,l2,h):\n    '''\n    Write a function to find the lateral surface area difference of two shapes given the height h and the length l1 and l2.\n    '''\n    area = lateralsurface_rightpyramid2(h,l2) - lateralsurface_righ"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    area = pi*r**2*h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(math.pi*r*r*h)\n    return(math.pi*r*r*h)\nlateralsurface_cone(3,4)\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder given radius r and the height h.\n    '''\n    print(2*math.pi*r*h)\n    return(2*math.pi*r*h)\nsurface_area_cylinder(3,4)\ndef surface_area_cylinder2(r):\n    '''\n    Write a function to find the surface area of a cylinder given radius r.\n    '''\n    print(2*math.pi*r*math.pi)\n    return(2*math.pi*r*math.pi)\nsurface_area_cylinder2(3)\ndef surface_area_cylinder3(r):\n    '''\n    Write a function to find the surface area of a cylinder given radius r.\n    '''\n    print(2*math.pi*r*math.pi)\n    return(2*math.pi*r*math.pi)\nsurface_area_cylinder3(3)\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    print(math.pi*r**2*h)\n    return(math.pi*r**2*h)\nvolume_of_cylinder(3,4)\ndef volume_of_cylinder2(r):\n    '''\n    Write a function to find the volume of a cylinder given radius r.\n    '''\n    print(math.pi*r**2*math.pi)\n    return(math.pi*r**2*math.pi)\nvolume_of_cylinder2(3)\ndef volume_of_cylinder3(r):\n    '''\n    Write a function to find the volume of a cylinder given radius r.\n    '''\n    print(math.pi*r**2*math.pi)\n    return(math.pi*r**2*math.pi)\nvolume_of_cylinder3(3)\ndef surface_area_of_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given three sides a, b and c.\n    '''\n    print((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\n    return((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\nsurface_area_of_triangle(3,4,5)\ndef surface_area_of_triangle2(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given three sides a, b and c.\n    '''\n    print((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\n    return((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\nsurface_area_of_triangle2(3,4,5)\ndef surface_area_of_triangle3(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given three sides a, b and c.\n    '''\n    print((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\n    return((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\nsurface_area_of_triangle3(3,4,5)\ndef surface_area_of_triangle4(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given three sides a, b and c.\n    '''\n    print((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\n    return((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\nsurface_area_of_triangle4(3,4,5)\ndef surface_area_of_triangle5(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given three sides a, b and c.\n    '''\n    print((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\n    return((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\nsurface_area_of_triangle5(3,4,5)\ndef surface_area_of_triangle6(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given three sides a, b and c.\n    '''\n    print((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\n    return((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\nsurface_area_of_triangle6(3,4,5)\ndef surface_area_of_triangle7(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given three sides a, b and c.\n    '''\n    print((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\n    return((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\nsurface_area_of_triangle7(3,4,5)\ndef surface_area_of_triangle8(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given three sides a, b and c.\n    '''\n    print((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\n    return((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\nsurface_area_of_triangle8(3,4,5)\ndef surface_area_of_triangle9(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle given three sides a, b and c.\n    '''\n    print((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\n    return((a+b+c)/2*math.sqrt((a*a+b*b-c*c)/2))\nsurface_area_of_triangle9(3,4,5)\ndef surface_area_of_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle given the length of each side a and b.\n    '''\n    print(a*b)\n    return(a*b)\nsurface_area_of_rectangle(3,4)\ndef surface_area_of_rectangle2(a,b):\n    '''\n    Write a function to find the surface area of a rectangle given the length of each side a and b.\n    '''\n    print(a*b)\n    return(a*b)\nsurface_area_of_rectangle2(3,4)\ndef surface_area_of_rectangle3(a,b):\n    '''\n    Write a function to find the surface area of a rectangle given the length of each side a and b.\n    '''\n    print(a*b)\n    return(a*b)\nsurface_area_of_rectangle3(3,4)\ndef surface_area_of_rectangle4(a,b):\n    '''\n    Write a function to find the surface area of a rectangle given the length of each side a and b.\n    '''\n    print(a*b)\n    return(a*b)\nsurface_area_of_rectangle4(3,4)\ndef surface_area_of_rectangle5(a,b):\n    '''\n    Write a function to find the surface area o"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #create a function to find the surface of a cone\n    def surface_cone(r,h):\n        return math.pi*r*h/3\n    return surface_cone(r,h)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h\n    \n    \ndef cone_height(r,l):\n    '''\n    Write a function to find the height of a cone given radius r and length l.\n    '''\n    return l/r\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 0.5*r*h\n    return area\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef lateral_surface_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the height h and the length l.\n    '''\n    area = h*l\n    return area\ndef lateral_surface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    area = 4*math.pi*r*r\n    return area\ndef lateral_surface_pyramid_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the height h and the length l.\n    '''\n    area = 2*h*l\n    return area\ndef lateral_surface_cone_pyramid(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r, the height h and the length l.\n    '''\n    area = 0.5*r*h*l\n    return area\ndef lateral_surface_cube(h):\n    '''\n    Write a function to find the lateral surface area of a cube given the height h.\n    '''\n    area = 6*h\n    return area\ndef lateral_surface_sphere_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    area = 4*math.pi*r*r\n    return area\ndef lateral_surface_cube_sphere(h):\n    '''\n    Write a function to find the lateral surface area of a cube given the height h.\n    '''\n    area = 6*h\n    return area\ndef lateral_surface_cylinder_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef lateral_surface_cube_cylinder(h,l):\n    '''\n    Write a function to find the lateral surface area of a cube given the height h and the length l.\n    '''\n    area = 2*h*l\n    return area\ndef lateral_surface_cube_cone(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cube given the radius r, the height h and the length l.\n    '''\n    area = 2*h*l\n    return area\ndef lateral_surface_cube_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a cube given the height h and the length l.\n    '''\n    area = 2*h*l\n    return area\ndef lateral_surface_sphere_cone(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r, the height h and the length l.\n    '''\n    area = 4*math.pi*r*r\n    return area\ndef lateral_surface_cube_pyramid(h,l):\n    '''\n    Write a function to find the lateral surface area of a cube given the height h and the length l.\n    '''\n    area = 6*h\n    return area\ndef lateral_surface_sphere_cylinder(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r, the height h and the length l.\n    '''\n    area = 4*math.pi*r*r\n    return area\ndef lateral_surface_sphere_cone(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r, the height h and the length l.\n    '''\n    area = 4*math.pi*r*r\n    return area\ndef lateral_surface_sphere_pyramid(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r, the height h and the length l.\n    '''\n    area = 4*math.pi*r*r\n    return area\ndef lateral_surface_cylinder_sphere(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r, the height h and the length l.\n    '''\n    area = 4*math.pi*r*h\n    return area\ndef lateral_surface_sphere_cube(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r, the height h and the length l.\n    '''\n    area = 4*math.pi*r*r\n    return area\ndef lateral_surface_cylinder_cone(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r, the height h and the length l.\n    '''\n    area = 2*math.pi*r*l\n    return area\ndef lateral_surface_cylinder_pyramid(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r, the height h and the length l.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef lateral_surface_cylinder_sphere(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r, the height h and the length l.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef lateral_surface_sphere_cylinder(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r, the height h and the length l.\n    '''\n    area = 4*math.pi*r*h\n    return area\ndef lateral_surface_cylinder_cone(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r, the height h and the length l.\n    '''\n    area = 2*math.pi*r*l\n    return area\ndef lateral_surface_cylinder_pyramid(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r, the height h and the length l.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef lateral_surface_cylinder_sphere(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r, the height h and the length l.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef lateral_surface_cylinder_cube(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r, the height h and the length l.\n    '''\n    area = 2*math.pi*r*h\n    return area\ndef lateral_surface_cone_cylinder(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r, the height h and the length l.\n    '''\n    area = math.pi*r*h\n    return area\ndef lateral_surface_cone_pyramid(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r, the height h and the length l.\n    '''\n    area = math.pi*r*h\n    return area\ndef lateral_surface_cone_cube(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r, the height h and the length l.\n    '''\n    area = math.pi*r*r\n    return area\ndef lateral_surface_cube_cylinder(r,h,l):\n    '''\n    Write a function to find the lateral surface area of a cube given the radius r, the height h and the length l.\n    '''\n    area = 6*math.pi*r*r\n    retur"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2) * (h/2)\ndef lateralsurface_pyramid(a,b):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the base and height a and b.\n    '''\n    return (a*b)/2\ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the length and width a and b.\n    '''\n    return a*b\ndef lateralsurface_triangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a triangle given the base and height a and b.\n    '''\n    return a*b/2\ndef lateralsurface_polygon(a):\n    '''\n    Write a function to find the lateral surface area of a polygon given the length of the sides a.\n    '''\n    return sum(a)*2\ndef lateralsurface_squared_rightangled_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a square right-angled rectangle given the length and width a and b.\n    '''\n    return a**2\ndef lateralsurface_rhombus(a,b):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the length and height a and b.\n    '''\n    return a*b/2\ndef lateralsurface_square(a):\n    '''\n    Write a function to find the lateral surface area of a square given the length of the sides a.\n    '''\n    return a**2\ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the length and height a and b.\n    '''\n    return a*b\ndef lateralsurface_trapezoid_parallelogram(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid parallelogram given the length and width a and height h.\n    '''\n    return (a+b)*h\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and height a and b.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_parallelogram(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid parallelogram given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid given the length and width a and height h.\n    '''\n    return (a+b)*h/2\ndef lateralsurface_trapezoid_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid trapezoid give"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*r*math.pi*math.asin(h/r)\n    return s\ndef lateralsurface_pyramid(base,height):\n    '''\n    Write a function to find the lateral surface area of a pyramid given base and height.\n    '''\n    s = 2*(base*height)*math.pi\n    return s\ndef lateralsurface_sphere(radius):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius.\n    '''\n    s = 4*math.pi*radius*radius\n    return s\ndef lateralsurface_cylinder(radius,height):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius and height.\n    '''\n    s = 2*math.pi*radius*height\n    return s\ndef area_circ(radius):\n    '''\n    Write a function to find the area of a circle given its radius.\n    '''\n    A = math.pi*radius*radius\n    return A\ndef area_rect(l,w):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    A = l*w\n    return A\ndef area_rectangle_ugly_algo(l,w):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    area = l*w\n    return area\ndef area_rectangle_dp(l,w):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    area = l*w\n    return area\ndef area_rectangle_recursive(l,w):\n    '''\n    Write a function to find the area of a rectangle given its length and width.\n    '''\n    if l==0 and w==0:\n        return 0\n    elif l==0:\n        return w*area_rectangle_recursive(w,w)\n    elif w==0:\n        return l*area_rectangle_recursive(l,w)\n    else:\n        return (l*w) + area_rectangle_recursive(l,w-1) + area_rectangle_recursive(l-1,w)\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle given three angles.\n    '''\n    s = (a+b+c)/2\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid given the base,height and the length.\n    '''\n    area = (a+b+h)/2\n    return area\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram given its base and height.\n    '''\n    area = b*h\n    return area\ndef area_square(a):\n    '''\n    Write a function to find the area of a square given its side length.\n    '''\n    area = a*a\n    return area\ndef area_square_ugly_algo(l):\n    '''\n    Write a function to find the area of a square given its side length.\n    '''\n    area = l*l\n    return area\ndef area_square_dp(l):\n    '''\n    Write a function to find the area of a square given its side length.\n    '''\n    area = l*l\n    return area\ndef area_square_recursive(l):\n    '''\n    Write a function to find the area of a square given its side length.\n    '''\n    if l == 0:\n        return 0\n    else:\n        return l*l\ndef area_trapezoid_ugly_algo(a,h):\n    '''\n    Write a function to find the area of a trapezoid given its base and height.\n    '''\n    area = (a+h)/2\n    return area\ndef area_trapezoid_dp(a,h):\n    '''\n    Write a function to find the area of a trapezoid given its base and height.\n    '''\n    area = (a+h)/2\n    return area\ndef area_trapezoid_recursive(a,h):\n    '''\n    Write a function to find the area of a trapezoid given its base and height.\n    '''\n    if a==0 and h==0:\n        return 0\n    elif h==0:\n        return a*area_trapezoid_recursive(a,a)\n    elif a==0:\n        return h*area_trapezoid_recursive(h,h)\n    else:\n        return (a+h)/2*(a+h)\ndef area_trapezoid_solver(a,h):\n    '''\n    Write a function to find the area of a trapezoid given its base and height.\n    '''\n    if h==0 and a==0:\n        return 0\n    elif h==0:\n        return a*a\n    elif a==0:\n        return h*h\n    else:\n        area = (a+h)/2*(a+h)\n        return area\ndef area_trapezoid_recursive_ugly_algo(a,h):\n    '''\n    Write a function to find the area of a trapezoid given its base and height.\n    '''\n    if a==0 and h==0:\n        return 0\n    elif h==0:\n        return a*a\n    elif a==0:\n        return h*h\n    else:\n        area = (a+h)/2*(a+h)\n        return area\ndef area_trapezoid_recursive_dp(a,h):\n    '''\n    Write a function to find the area of a trapezoid given its base and height.\n    '''\n    if a==0 and h==0:\n        return 0\n    elif h==0:\n        return a*a\n    elif a==0:\n        return h*h\n    else:\n        area = (a+h)/2*(a+h)\n        return area\ndef area_trapezoid_recursive_solver(a,h):\n    '''\n    Write a function to find the area of a trapezoid given its base and height.\n    '''\n    if h==0 and a==0:\n        return 0\n    elif h==0:\n        return a*a\n    elif a==0:\n        return h*h\n    else:\n        area = (a+h)/2*(a+h)\n        return area\ndef area_rhombus(b,h):\n    '''\n    Write a function to find the area of a rhombus given its base and height.\n    '''\n    area = b*h\n    return area\ndef area_rhombus_ugly_algo(b,h):\n    '''\n    Write a function to find the area of a rhombus given its base and height.\n    '''\n    area = b*h\n    return area\ndef area_rhombus_dp(b,h):\n    '''\n    Write a function to find the area of a rhombus given its base and height.\n    '''\n    area = b*h\n    return area\ndef area_rhombus_recursive(b,h):\n    '''\n    Write a function to find the area of a rhombus given its base and height.\n    '''\n    if b==0 and h==0:\n        return 0\n    elif b==0:\n        return h*h\n    elif h==0:\n        return b*b\n    else:\n        area = (b+h)/2*(b+h)\n        return area\ndef area_rhombus_solver(b,h):\n    '''\n    Write a function to find the area of a rhombus given its base and height.\n    '''\n    if b==0 and h==0:\n        return 0\n    elif b==0:\n        return h*h\n    elif h==0:\n        return b*b\n    else:\n        area = (b+h)/2*(b+h)\n    "
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_characters = [' ',',','.']\n    for i in special_characters:\n        text = text.replace(i, \":\")\n    return text\ndef check_variable(text):\n    '''\n    Write a function to check if a variable is of type integer, float, or string.\n    '''\n    int_float_string = re.compile('^\\d*\\.?\\d+|^\\d+$|^\\\".*\\\"$')\n    text = int_float_string.findall(text)\n    return text\ndef check_condition(text):\n    '''\n    Write a function to check if a condition is of type ==, <, <=,!=, >=, >=.\n    '''\n    special_characters = ['==', '<', '<=', '!=', '>', '>=']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_function_call(text):\n    '''\n    Write a function to check if a function call is of type print, print, printf, printf, or putchar.\n    '''\n    special_characters = ['print', 'printf', 'putchar']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_assignment_operator(text):\n    '''\n    Write a function to check if an assignment operator is =, +=, -=, *=, /=, %=, &&, ||, ==,!=, >=, <=, >, <.\n    '''\n    special_characters = ['=', '+=', '-=', '*=', '/=', '%=', '&&', '||', '==', '!=', '>=', '<=', '>', '<']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_bitwise_operator(text):\n    '''\n    Write a function to check if an operator is &, |, ^, <<, >>.\n    '''\n    special_characters = ['&', '|', '^', '<<', '>>']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_logical_operator(text):\n    '''\n    Write a function to check if an operator is =, <, <=,!=, >=, >=.\n    '''\n    special_characters = ['=', '<', '<=', '!=', '>', '>=']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_multiplication_operator(text):\n    '''\n    Write a function to check if an operator is *, +, -, *.\n    '''\n    special_characters = ['*', '+', '-', '*.']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_semicolon(text):\n    '''\n    Write a function to check if a semicolon is ;, {, {.\n    '''\n    special_characters = [';', '{', '{.']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_parenthesis(text):\n    '''\n    Write a function to check if an parenthesis is (, ).\n    '''\n    special_characters = ['(', ')', '.']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_double_quote(text):\n    '''\n    Write a function to check if a quote is \".\n    '''\n    special_characters = ['.']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_function(text):\n    '''\n    Write a function to check if a function is of type write, read, or printf.\n    '''\n    special_characters = ['write','read', 'printf']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_characters(text):\n    '''\n    Write a function to check if a variable is of type character, string, or double.\n    '''\n    special_characters = ['char','string', 'double']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_int_float(text):\n    '''\n    Write a function to check if a variable is of type integer, float, or double.\n    '''\n    int_float = re.compile('^\\d*\\.?\\d+|^\\d+$|^\\\".*\\\"$')\n    text = int_float.findall(text)\n    return text\ndef check_char(text):\n    '''\n    Write a function to check if a variable is of type character, string, or double.\n    '''\n    special_characters = ['char','string', 'double']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_print(text):\n    '''\n    Write a function to check if an expression is of type print.\n    '''\n    special_characters = ['print', 'printf', 'putchar']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_variable_or_function(text):\n    '''\n    Write a function to check if a variable or function is of type integer, float, or double.\n    '''\n    special_characters = ['char','string', 'double']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_operator_or_chars(text):\n    '''\n    Write a function to check if an operator or characters is of type =, +, -, *, /, %, &&, ||, ==,!=, >=, <=, >, <, >, <.\n    '''\n    special_characters = ['=', '+', '-', '*', '/', '%', '&&', '||', '==', '!=', '>', '<', '>', '<']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_bitwise_operator(text):\n    '''\n    Write a function to check if an operator is of type &, |, ^, <<, >>.\n    '''\n    special_characters = ['&', '|', '^', '<<', '>>']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_logical_operator(text):\n    '''\n    Write a function to check if an operator is of type =, <, <=,!=, >=, >=.\n    '''\n    special_characters = ['=', '<', '<=', '!=', '>', '>=']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_multiplication_operator(text):\n    '''\n    Write a function to check if an operator is of type *, +, -, *.\n    '''\n    special_characters = ['*', '+', '-', '*.']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_semicolon(text):\n    '''\n    Write a function to check if a semicolon is ;, {, {.\n    '''\n    special_characters = [';', '{', '{.']\n    for i in special_characters:\n        text = text.replace(i, \" \")\n    return text\ndef check_parenthesis(text):\n    '''\n    Write a function to check if an parenthesis is (, ).\n    '''\n    special_characters = ['(', ')', '.']\n    for i in special_characters:\n        text = text.replace("
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = text.replace(' ',':')\n    new_text = new_text.replace(',',':')\n    new_text = new_text.replace('.',':')\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]+',':',text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\")\ndef find_last(text, char):\n    '''\n    Write a function to find the last occurrence of a specified character in a string.\n    '''\n    return re.search(char, text).end()\ndef replace_char(text, rep, before, after):\n    '''\n    Write a function to replace a specified character in a string.\n    '''\n    if rep == before:\n        return text.replace(before, after)\n    return text.replace(before, rep)\ndef join_strings(text, delimiter):\n    '''\n    Write a function to join a list of strings with the delimiter character.\n    '''\n    return delimiter.join(text)\ndef replace_words(text, old, new, count):\n    '''\n    Write a function to replace all occurrences of words within a string.\n    '''\n    if count > 0:\n        return re.sub(old, new, text, count)\n    return re.sub(old, new, text)\ndef repeat_word(text, rep, before, after):\n    '''\n    Write a function to replace a specified number of times a specified word in a string.\n    '''\n    word = re.sub(before, after, text)\n    return rep * word.count(before)\ndef new_line_break(text, count):\n    '''\n    Write a function to insert a new line in the string at the given index position.\n    '''\n    return '\\n'.join(text.split('\\n')[count:])\ndef replace_words(text, old, new, count):\n    '''\n    Write a function to replace all occurrences of words within a string.\n    '''\n    if count > 0:\n        return re.sub(old, new, text, count)\n    return re.sub(old, new, text)\ndef find_first(text, char):\n    '''\n    Write a function to find the first occurrence of a specified character in a string.\n    '''\n    return text.find(char)\ndef find_last(text, char):\n    '''\n    Write a function to find the last occurrence of a specified character in a string.\n    '''\n    return text.rfind(char)\ndef find_between(text, first, last):\n    '''\n    Write a function to find the first occurrence of a specified character in a string.\n    '''\n    return text[text.find(first) + 1:text.find(last)]\ndef replace_all(text, old, new):\n    '''\n    Write a function to replace all occurrences of a specified character in a string.\n    '''\n    return re.sub(old, new, text)\ndef replace_all_indexes(text, old, new):\n    '''\n    Write a function to replace all occurrences of a specified character in a string.\n    '''\n    return re.subn(old, new, text)\ndef replace_specialchar(text, rep):\n    '''\n    Write a function to replace all occurrences of the special character in a string.\n    '''\n    return re.sub(rep, \"\", text)\ndef replace_words(text, old, new, count):\n    '''\n    Write a function to replace all occurrences of a specified number of occurrences of a specified word in a string.\n    '''\n    if count > 0:\n        return re.sub(old, new, text, count)\n    return re.sub(old, new, text)\ndef get_n_grams(text, n):\n    '''\n    Write a function to create ngrams from a string.\n    '''\n    return re.findall(r\"(\\w*\\s){%d}\" % n, text)\ndef sort_string(text):\n    '''\n    Write a function to sort a string.\n    '''\n    return ''.join(sorted(text))\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all the punctuation in a string.\n    '''\n    return re.sub('[^\\w ]', '', text)\ndef remove_specialchar(text):\n    '''\n    Write a function to remove all the special characters in a string.\n    '''\n    return re.sub('\\W+', '', text)\ndef sort_word(text):\n    '''\n    Write a function to sort a string by decreasing order.\n    '''\n    return re.findall(r'[\\w]+', text, re.IGNORECASE)[::-1]\ndef print_first_5_elements(text):\n    '''\n    Write a function to print the first 5 elements of a list.\n    '''\n    return list(text)[:5]\ndef remove_non_ascii(text):\n    '''\n    Write a function to remove all non ASCII characters from a string.\n    '''\n    return text.encode('ascii', errors='ignore').decode()\ndef find_all(text, sub):\n    '''\n    Write a function to find all occurrences of a specified character in a string.\n    '''\n    return re.findall(sub, text)\ndef find_all_indexes(text, sub):\n    '''\n    Write a function to find all occurrences of a specified character in a string.\n    '''\n    return re.findall(sub, text)\ndef replace_all_indexes(text, old, new):\n    '''\n    Write a function to replace all occurrences of a specified character in a string.\n    '''\n    return re.sub(old, new, text)\ndef replace_specialchar(text, rep):\n    '''\n    Write a function to replace all occurrences of the special character in a string.\n    '''\n    return re.sub(rep, \"\", text)\ndef contains_no_vowels(text):\n    '''\n    Write a function to check if a string has no vowels.\n    '''\n    return 'aeiou' not in text\ndef count_no_vowels(text):\n    '''\n    Write a function to count the number of occurrences of the special character in a string.\n    '''\n    return text.count('aeiou')\ndef count_no_vowels(text):\n    '''\n    Write a function to count the number of occurrences of the special character in a string.\n    '''\n    return text.count('aeiou')\ndef get_n_grams(text, n):\n    '''\n    Write a function to create ngrams from a string.\n    '''\n    return re.findall(r\"(\\w*\\s){%d}\" % n, text)\ndef string_to_float(text):\n    '''\n    Write a function to convert the string to float.\n    '''\n    return float(text)\ndef remove_stopwords(text, stopwords):\n    '''\n    Write a function to remove stopwords in a string.\n    '''\n    return re.sub(r'\\b(' + '|'.join(stopwords) + r')\\b', '', text)\ndef get_n_grams(text, n):\n    '''\n    Write a function to create ngrams from a string.\n    '''\n    return re.findall(r\"(\\w*\\s){%d}\" % n, text)\ndef get_n_grams(text, n):\n    '''\n    Write a function to create ngrams from a string.\n    '''\n    return re.findall(r\"(\\w*\\s){%d}\" % n, text)\ndef remove_words(text, word):\n    '''\n    Write a function to remove a specified word in a string.\n    '''\n    return re.sub(r'\\b' + word + r'\\b', '', text)\ndef remove_words(text, word):\n    '''\n    Write a function to remove a specified word in a string.\n    '''\n    return re.sub(r'\\b' + word + r'\\b', '', text)\ndef swap_words(text):\n    '''\n    Write a function to swap the words in a string.\n    '''\n    return re.sub(r'(\\w+)', lambda x: r'\\2', text)\ndef swap_words(text):\n    '''\n    Write a function to swap the words in a string.\n    '''\n    return re.sub(r'(\\w+)', lambda x: r'"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\",\",\":\").replace(\".\",\":\").replace(\" \",\":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,. ]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\")\n    #return re.sub(r\"[,.]\", \":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    print(\"Your Text: \", text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'[\\,\\.]+', '.', text)\n    print(\"Your Text: \", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(\" \",\":\")\n    text=text.replace(\",\",\":\")\n    text=text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    mid = high//2\n    while low < high:\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid\n            mid = (low + high)//2\n        else:\n            low = mid + 1\n            mid = (low + high)//2\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # O(log N)\n    if len(A) == 0:\n        return -1\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return find_first_occurrence_with_cumsum(A, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A)-1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if x < A[mid]:\n            hi = mid - 1\n        elif x > A[mid]:\n            lo = mid + 1\n        else:\n            if mid == 0 or x!= A[mid-1]:\n                return mid\n            else:\n                hi = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    lo, hi = 0, n-1\n    while lo <= hi:\n        mid = lo + (hi-lo)//2\n        if A[mid] > x:\n            hi = mid - 1\n        elif A[mid] < x:\n            lo = mid + 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] > x:\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            return mid\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A)\n    while lo < hi:\n        mid = (lo + hi)//2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    p = 1\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            p *= arr[j]\n            s += p\n            p = 1\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    size = len(arr)\n    # edge cases\n    if size == 0:\n        return 0\n    if size == 1:\n        return arr[0]\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    products = []\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)+1):\n            products.append(arr[i:j])\n    sum_of_products = 0\n    for p in products:\n        if(len(p) > 0):\n            p = 1\n            for i in range(0,len(p)):\n                p = p * p\n            sum_of_products = sum_of_products + p\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    if len(arr) == 3:\n        return arr[0] * arr[1] * arr[2]\n    ans = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        ans = ans + arr[i]\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            prod *= arr[i+j]\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sum += (arr[i]*arr[j])\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_products = 1\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum_products *= arr[i:j+1]\n    return sum_products\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                res = res + (arr[i]*arr[j]*arr[k])\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    total = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                total += arr[i]*arr[j]*arr[k]\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod *= arr[j]\n    return prod\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n << 1) | (n >> 1)\n    \n    \n    \n    \ndef swap_first_last_bits(n):\n    '''\n    Write a python function to swap the first and last bit of an integer. https://www.geeksforgeeks.org/swap-first-and-last-bit-of-integer/\n    '''\n    return (n << 1) | (n >> 1)\n    \n    \n    \n    \ndef swap_every_two_bits(n):\n    '''\n    Write a python function to swap every other bit of an integer. https://www.geeksforgeeks.org/swap-every-other-bit-of-an-integer/\n    '''\n    return n & 0b10101\n    \n    \n    \n    \ndef two_last_bits(n):\n    '''\n    Write a python function to return the last two bits of the integer. https://www.geeksforgeeks.org/return-last-two-bits-of-the-number/\n    '''\n    return n & 0b1111\n    \n    \n    \n    \ndef odd_even_bits(n):\n    '''\n    Write a python function to return the bit pattern of an integer. https://www.geeksforgeeks.org/return-bit-pattern-of-an-integer/\n    '''\n    return (n & 0b1100) | ((n & 0b1010) << 1) | ((n & 0b0110) << 2) | ((n & 0b0010) << 3) | ((n & 0b0001) << 4) | ((n & 0b0001) << 5) | ((n & 0b0010) << 6) | ((n & 0b0100) << 7) | ((n & 0b1000) << 8) | ((n & 0b0100) << 9) | ((n & 0b0010) << 10) | ((n & 0b0001) << 11) | ((n & 0b0000) << 12) | ((n & 0b0000) << 13) | ((n & 0b0000) << 14) | ((n & 0b0000) << 15) | ((n & 0b0000) << 16) | ((n & 0b0000) << 17) | ((n & 0b0000) << 18) | ((n & 0b0000) << 19) | ((n & 0b0000) << 20) | ((n & 0b0000) << 21) | ((n & 0b0000) << 22) | ((n & 0b0000) << 23) | ((n & 0b0000) << 24) | ((n & 0b0000) << 25) | ((n & 0b0000) << 26) | ((n & 0b0000) << 27) | ((n & 0b0000) << 28) | ((n & 0b0000) << 29) | ((n & 0b0000) << 30) | ((n & 0b0000) << 31) | ((n & 0b0000) << 32) | ((n & 0b0000) << 33) | ((n & 0b0000) << 34) | ((n & 0b0000) << 35) | ((n & 0b0000) << 36) | ((n & 0b0000) << 37) | ((n & 0b0000) << 38) | ((n & 0b0000) << 39) | ((n & 0b0000) << 40) | ((n & 0b0000) << 41) | ((n & 0b0000) << 42) | ((n & 0b0000) << 43) | ((n & 0b0000) << 44) | ((n & 0b0000) << 45) | ((n & 0b0000) << 46) | ((n & 0b0000) << 47) | ((n & 0b0000) << 48) | ((n & 0b0000) << 49) | ((n & 0b0000) << 50) | ((n & 0b0000) << 51) | ((n & 0b0000) << 52) | ((n & 0b0000) << 53) | ((n & 0b0000) << 54) | ((n & 0b0000) << 55) | ((n & 0b0000) << 56) | ((n & 0b0000) << 57) | ((n & 0b0000) << 58) | ((n & 0b0000) << 59) | ((n & 0b0000) << 60) | ((n & 0b0000) << 61) | ((n & 0b0000) << 62) | ((n & 0b0000) << 63) | ((n & 0b0000) << 64) | ((n & 0b0000) << 65) | ((n & 0b0000) << 66) | ((n & 0b0000) << 67) | ((n & 0b0000) << 68) | ((n & 0b0000) << 69) | ((n & 0b0000) << 70) | ((n & 0b0000) << 71) | ((n & 0b0000) << 72) | ((n & 0b0000) << 73) | ((n & 0b0000) << 74) | ((n & 0b0000) << 75) | ((n & 0b0000) << 76) | ((n & 0b0000) << 77) | ((n & 0b0000) << 78) | ((n & 0b0000) << 79) | ((n & 0b0000) << 80) | ((n & 0b0000) << 81) | ((n & 0b0000) << 82) | ((n & 0b0000) << 83) | ((n & 0b0000) << 84) | ((n & 0b0000) << 85) | ((n & 0b0000) << 86) | ((n & 0b0000) << 87) | ((n & 0b0000) << 88) | ((n & 0b0000) << 89) | ((n & 0b0000) << 90) | ((n & 0b0000) << 91) | ((n & 0b0000) << 92) | ((n & 0b0000) << 93) | ((n & 0b0000) << 94) | ((n & 0b0000) << 95) | ((n & 0b0000) << 96) | ((n & 0b0000) << 97) | ((n & 0b0000) << 98) | ((n & 0b0000) << 99) | ((n & 0b0000) << 100) | ((n & 0b0000) << 101) | ((n & 0b0000) << 102) | ((n & 0b0000) << 103) | ((n & 0b0000) << 104) | ((n & 0b0000) << 105) | ((n & 0b0000) << 106) | ((n & 0b0000) << 107) | ((n & 0b0000) << 108) | ((n & 0b0000) << 109) | ((n & 0b0000) << 110) | ((n & 0b0000) << 111) | ((n & 0b0000) << 112) | ((n & 0b0000) << 113) | ((n & 0b0000) << 114) | ((n & 0b0000) << 115) | ((n & 0b0000) << 116) | ((n & 0b0000) << 117) | ((n & 0b0000) << 118) | ((n & 0b0000) << 119) | ((n & 0b0000) << 120) | ((n & 0b0000) << 121) | ((n & 0b0000) << 122) | ((n & 0b0000) << 123) | ((n & 0b0000) << 124) | ((n & 0b0000) << 125) | ((n & 0b0000) << 126) | ((n & 0b0000) << 127) | ((n & 0b0000) << 128) | ((n & 0b0000) << 129) | ((n & 0b0000) << 130) | ((n & 0b0000) << 131) | ((n & 0b0000) << 132) | ((n & 0b0000) << 133) | ((n & 0b0000) << 134) | ((n & 0b0000) << 135) | ((n & 0b0000) << 136) | ((n & 0b0000) << 137) | ((n & 0b0000) << 138) | ((n & 0b0000) << 139) | ((n & 0b0000) << 140) | ((n & 0b0000) << 141) | ((n & 0b0000) << 142) | ((n & 0b0000) << 143) | ((n & 0b0000) << 144) | ((n & 0b0000) << 145) | ((n & 0b0000) << 146) | ((n & 0b0000) << 147) | ((n & 0b0000) << 148) | ((n & 0b0000) << 149) | ((n & 0b0000) << 150) | ((n & 0"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    mid = (n >> 1) & 0b111111111111111111111111111111\n    return ((n & ~mid) | mid)  \n    \nif __name__ == \"__main__\":\n    print(set_middle_bits(11))\n    print(set_middle_bits(11000))\n    print(set_middle_bits(55))"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n\n    return n ^ n >> 1\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & ~(1 << (n.bit_length()-1))\n    n = n | (1 << (n.bit_length()-1))\n    return n\n    "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0xFFFFFFFF\n    return ((n & mask) >> 1) | ((n & mask) << 31)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit_mask = ~((~0) << 1)\n    return n | bit_mask\n    "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(2**n-1)\n    return mask\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if (n >> 1) == 0:\n        return n | (1 << 1)\n    else:\n        return n & ~(1 << 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n >> 1) ^ (n >> 2) ^ (n >> 4) ^ (n >> 8) ^ (n >> 16)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # n = int(input(\"Enter a number: \"))\n    # n = 3\n    n = int(n)\n    print(n)\n    \n    #toggle first and last bit\n    n = n ^ ((1 << n.bit_length()) - 1)\n    \n    #toggle middle bits\n    n = n >> 1\n    n = n ^ ((1 << n.bit_length()) - 1)\n    print(bin(n))\n    \n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # find insertion point\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return None\n    else:\n        return left\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left_pos = bisect.bisect_left(a,x)\n    if left_pos == len(a):\n        return 0\n    elif a[left_pos] == x:\n        return left_pos\n    else:\n        return left_pos\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif a[i - 1] == x:\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0:\n        return 0\n    elif a[i-1] == x:\n        return i-1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        if a[0] >= x:\n            return 0\n        else:\n            for i in range(1, len(a)):\n                if a[i-1] >= x and a[i] < x:\n                    return i\n                elif a[i-1] > x:\n                    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i+1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a,x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] > x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    if a[i-1] == x:\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n    mid = (lo + hi) // 2\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x > a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if (pattern.match(string)):\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \n    \n    \nif __name__ == '__main__':\n    string = input()\n    res = check_str(string)\n    print(res"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex_pattern = re.compile(regex) \n    match = regex_pattern.search(string) \n    if match: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try:\n        return bool(re.match(regex,string.lower()))\n    except:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex,string)\n    print(match)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    x = re.match(regex, string)\n    if(x):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)!= None\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        print('Yes') \n    else: \n        print('No') \nstring = 'AEDAI'\ncheck_str(string) \nstring = 'abc'\ncheck_str(string) \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    assert n>=1\n    if n==1:\n        return 1\n    return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 0\n    return (1/n)*(1 + geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return geometric_sum(n-1) * (1 + (n-1) * geometric_sum(n-1)) / (1 - (1 / n))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n-1)*(n-2)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    else:\n        return n * (n - 1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    n_digits = int(math.log(n, 10))\n    i = 0\n    while i < n_digits:\n        i += 1\n        n = int(n*(10**(i-1)))\n    return n\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #code here\n    l=1\n    r=int(math.sqrt(n))\n    while(l<r):\n        x=(l+r)//2\n        y=(l+r+1)//2\n        if n==x**2+y**2:\n            return l\n        if n<x**2+y**2:\n            r=x\n        else:\n            l=y\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg_neg(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg_neg_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg_neg_neg(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg_neg_neg_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg_neg_neg_neg(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg_neg_neg_neg_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg_neg_neg_neg_neg(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0: \n        return 0\n    return int(n*(n+1)/2) \n    \ndef find_Index_neg_neg_neg_neg_neg_neg_neg_neg_neg_recursive(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = 1\n    r = n\n    while (r > l):\n        m = (l + r) // 2\n        if (is_triangular(m) == True):\n            r = m\n        else:\n            l = m + 1\n    return l\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    while(n > 0): \n        count += (n - 1) \n        n = n - 1\n    return count \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 1:\n        raise ValueError('Input must be greater than 0')\n    s = math.sqrt(n*(n+1)/2)\n    return int(s)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n=n-1\n    for i in range(1,n):\n        m=1\n        for j in range(i,n):\n            m*=j+1\n        if m>n:\n            return i\nprint(\"n=\",find_Index(2))\nprint(\"n=\",find_Index(4))\nprint(\"n=\",find_Index(8))\nprint(\"n=\",find_Index(12))\nprint(\"n=\",find_Index(16))\nprint(\"n=\",find_Index(20))\nprint(\"n=\",find_Index(24))\nprint(\"n=\",find_Index(28))\nprint(\"n=\",find_Index(32))\nprint(\"n=\",find_Index(36))\nprint(\"n=\",find_Index(40))\nprint(\"n=\",find_Index(44))\nprint(\"n=\",find_Index(48))\nprint(\"n=\",find_Index(52))\nprint(\"n=\",find_Index(56))\nprint(\"n=\",find_Index(60))\nprint(\"n=\",find_Index(64))\nprint(\"n=\",find_Index(68))\nprint(\"n=\",find_Index(72))\nprint(\"n=\",find_Index(76))\nprint(\"n=\",find_Index(80))\nprint(\"n=\",find_Index(84))\nprint(\"n=\",find_Index(88))\nprint(\"n=\",find_Index(92))\nprint(\"n=\",find_Index(96))\nprint(\"n=\",find_Index(100))\nprint(\"n=\",find_Index(104))\nprint(\"n=\",find_Index(108))\nprint(\"n=\",find_Index(112))\nprint(\"n=\",find_Index(116))\nprint(\"n=\",find_Index(120))\nprint(\"n=\",find_Index(124))\nprint(\"n=\",find_Index(128))\nprint(\"n=\",find_Index(132))\nprint(\"n=\",find_Index(136))\nprint(\"n=\",find_Index(140))\nprint(\"n=\",find_Index(144))\nprint(\"n=\",find_Index(148))\nprint(\"n=\",find_Index(152))\nprint(\"n=\",find_Index(156))\nprint(\"n=\",find_Index(160))\nprint(\"n=\",find_Index(164))\nprint(\"n=\",find_Index(168))\nprint(\"n=\",find_Index(172))\nprint(\"n=\",find_Index(176))\nprint(\"n=\",find_Index(180))\nprint(\"n=\",find_Index(184))\nprint(\"n=\",find_Index(188))\nprint(\"n=\",find_Index(192))\nprint(\"n=\",find_Index(196))\nprint(\"n=\",find_Index(200))\nprint(\"n=\",find_Index(204))\nprint(\"n=\",find_Index(208))\nprint(\"n=\",find_Index(212))\nprint(\"n=\",find_Index(216))\nprint(\"n=\",find_Index(220))\nprint(\"n=\",find_Index(224))\nprint(\"n=\",find_Index(228))\nprint(\"n=\",find_Index(232))\nprint(\"n=\",find_Index(236))\nprint(\"n=\",find_Index(240))\nprint(\"n=\",find_Index(244))\nprint(\"n=\",find_Index(248))\nprint(\"n=\",find_Index(252))\nprint(\"n=\",find_Index(256))\nprint(\"n=\",find_Index(260))\nprint(\"n=\",find_Index(264))\nprint(\"n=\",find_Index(268))\nprint(\"n=\",find_Index(272))\nprint(\"n=\",find_Index(276))\nprint(\"n=\",find_Index(280))\nprint(\"n=\",find_Index(284))\nprint(\"n=\",find_Index(288))\nprint(\"n=\",find_Index(292))\nprint(\"n=\",find_Index(296))\nprint(\"n=\",find_Index(300))\nprint(\"n=\",find_Index(304))\nprint(\"n=\",find_Index(308))\nprint(\"n=\",find_Index(312))\nprint(\"n=\",find_Index(316))\nprint(\"n=\",find_Index(320))\nprint(\"n=\",find_Index(324))\nprint(\"n=\",find_Index(328))\nprint(\"n=\",find_Index(332))\nprint(\"n=\",find_Index(336))\nprint(\"n=\",find_Index(340))\nprint(\"n=\",find_Index(344))\nprint(\"n=\",find_Index(348))\nprint(\"n=\",find_Index(352))\nprint(\"n=\",find_Index(356))\nprint(\"n=\",find_Index(360))\nprint(\"n=\",find_Index(364))\nprint(\"n=\",find_Index(368))\nprint(\"n=\",find_Index(372))\nprint(\"n=\",find_Index(376))\nprint(\"n=\",find_Index(380))\nprint(\"n=\",find_Index(384))\nprint(\"n=\",find_Index(388))\nprint(\"n=\",find_Index(392))\nprint(\"n=\",find_Index(396))\nprint(\"n=\",find_Index(400))\nprint(\"n=\",find_Index(404))\nprint(\"n=\",find_Index(408))\nprint(\"n=\",find_Index(412))\nprint(\"n=\",find_Index(416))\nprint(\"n=\",find_Index(420))\nprint(\"n=\",find_Index(424))\nprint(\"n=\",find_Index(428))\nprint(\"n=\",find_Index(432))\nprint(\"n=\",find_Index(436))\nprint(\"n=\",find_Index(440))\nprint(\"n=\",find_Index(444))\nprint(\"n=\",find_Index(448))\nprint(\"n=\",find_Index(452))\nprint(\"n=\",find_Index(456))\nprint(\"n=\",find_Index(460))\nprint(\"n=\",find_Index(464))\nprint(\"n=\",find_Index(468))\nprint(\"n=\",find_Index(472))\nprint(\"n=\",find_Index(476))\nprint(\"n=\",find_Index(480))\nprint(\"n=\",find_Index(484))\nprint(\"n=\",find_Index(488))\nprint(\"n=\",find_Index(492))\nprint(\"n=\",find_Index(496))\nprint(\"n=\",find_Index(500))\nprint(\"n=\",find_Index(504))\nprint(\"n=\",find_Index(508))\nprint(\"n=\",find_Index(512))\nprint(\"n=\",find_Index(516))\nprint(\"n=\",find_Index(520))\nprint(\"n=\",find_Index(524))\nprint(\"n=\",find_Index(528))\nprint(\"n=\",find_Index(532))\nprint(\"n=\",find_Index(536))\nprint(\"n=\",find_Index(540))\nprint(\"n=\",find_Index(544))\nprint(\"n=\",find_Index(548))\nprint(\"n=\",find_Index(552))\nprint(\"n=\",find_Index(556))\nprint(\"n=\",find_Index(560))\nprint(\"n=\",find_Index(564))\nprint(\"n=\",find_Index(568))\nprint(\"n=\",find_Index(572))\nprint(\"n=\",find_Index(576))\nprint(\"n=\",find_Index(580))\nprint(\"n=\",find_Index(584))\nprint(\"n=\",find_Index(588))\nprint(\"n=\",find_Index(592))\nprint(\"n=\",find_Index(596))\nprint(\"n=\",find_Index(600))\nprint(\"n=\",find_Index(604))\nprint(\"n=\",find_Index(608))\nprint(\"n=\",find_Index(612))\nprint(\"n=\",find_Index(616))\nprint(\"n=\",find_Index(620))\nprint(\"n=\",find_Index(624))\nprint(\"n=\",find_Index(628))\nprint(\"n=\",find_Index(632))\nprint(\"n=\",find_Index(636))\nprin"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest_triangular_number_with_n_digits = int(math.pow(10,n)-1)\n    for i in range(2,n+1):\n        print(i)\n        print(smallest_triangular_number_with_n_digits)\n        smallest_triangular_number_with_n_digits *= int(math.pow(10,n-i))\n        print(smallest_triangular_number_with_n_digits)\n    if smallest_triangular_number_with_n_digits < int(math.pow(10,n)):\n        print(smallest_triangular_number_with_n_digits)\n        print(smallest_triangular_number_with_n_digits%(10**(n-1)))\n    return smallest_triangular_number_with_n_digits%(10**(n-1))\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Your code here\n    # 1.\n    for i in range(1,n):\n        number=int(math.pow(10,i))\n        if number>=n:\n            return i-1\n    # 2.\n    # for i in range(1,n):\n    #     number=int(math.pow(10,i))\n    #     if number>=n:\n    #         return i-1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 1\n    sum = 1\n    while True:\n        sum = sum + count\n        count = count + 1\n        if (sum == n):\n            return sum\n        elif (sum > n):\n            sum = sum - count\n            count = count - 1\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    keys = {}\n    for i in range(len(test_tup)-1):\n        keys[test_tup[i]] = test_tup[i+1]\n    return keys\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for k in range(len(test_tup)):\n        if k == len(test_tup) - 1:\n            result[k] = test_tup[k]\n        else:\n            result[k] = (test_tup[k], test_tup[k + 1])\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dct = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            dct[test_tup[i]] = test_tup[i+1]\n    return dct\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {k: v for k, v in zip(test_tup[::2], test_tup[1::2])}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {tup[i]:tup[i+1] for i in range(0,len(tup)-1,2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i, j in enumerate(test_tup):\n        d[i] = j\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(0,len(test_tup),2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_tup.update({key:value})\n    return dict_tup\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return True if len(set(s)) == 1 else False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    chars = []\n    for i in range(len(s)):\n        if s[i] not in chars:\n            chars.append(s[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s=set(s)\n    return len(s) == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)!= 0 :\n        if s[0] == s[-1] :\n            return all_Characters_Same(s[1:-1])\n        else :\n            return False\n    else :\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if(s[i]!=s[i+1]) :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 : return False\n    return s[0] == s[-1]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == len(set(s)) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.isalpha()\nprint(all_Characters_Same(\"KiKi\"))\nprint(all_Characters_Same(\"AbcAbc\"))\nprint(all_Characters_Same(\"qwertyu\"))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side*(side-1)*(side+1))/6\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/2)*(side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side * side * math.sqrt(3) / 4\n    return a\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    a = side * side * side / 3\n    return a\ndef area_cuboid(side_a, side_b):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    a = side_a * side_b\n    return a\ndef volume_cuboid(side_a, side_b):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    a = side_a * side_b * side_a * side_b\n    return a\ndef area_cylinder(radius):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    a = math.pi * radius ** 2\n    return a\ndef volume_cylinder(radius):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    a = radius * math.pi * radius\n    return a\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    a = (4/3) * math.pi * radius ** 3\n    return a\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    a = (4/3) * math.pi * radius ** 3 * radius\n    return a\ndef area_torus(radius_1, radius_2):\n    '''\n    Write a function to caluclate the area of a torus.\n    '''\n    a = (2*math.pi*radius_2 * radius_1**2) / (2*math.pi*radius_1**2 + 2*math.pi*radius_2**2)\n    return a\ndef volume_torus(radius_1, radius_2):\n    '''\n    Write a function to caluclate the volume of a torus.\n    '''\n    a = math.pi * radius_1**2 * radius_2 / 2\n    return a\ndef area_cone(radius_1, radius_2):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    a = math.pi * radius_2 * radius_1**2 / 2\n    return a\ndef volume_cone(radius_1, radius_2):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    a = math.pi * radius_2 * radius_1**2 * radius_1\n    return a\ndef area_heptagon(radius):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    a = (math.sqrt(3)/2) * radius * radius * math.sqrt(3)\n    return a\ndef volume_heptagon(radius):\n    '''\n    Write a function to caluclate the volume of a heptagon.\n    '''\n    a = (math.sqrt(3)/2) * radius * radius * radius * radius * math.sqrt(3)\n    return a\ndef area_hexagon(radius):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    a = 6 * math.sqrt(3) / 4 * radius * radius\n    return a\ndef volume_hexagon(radius):\n    '''\n    Write a function to caluclate the volume of a hexagon.\n    '''\n    a = 6 * math.sqrt(3) / 4 * radius * radius * radius * math.sqrt(3)\n    return a\ndef area_icosahedron(radius):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    a = 6 * math.sqrt(5) / 20 * math.sqrt(5) * radius * radius\n    return a\ndef volume_icosahedron(radius):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    a = 6 * math.sqrt(5) / 20 * math.sqrt(5) * radius * radius * radius * radius * math.sqrt(5)\n    return a\ndef area_octahedron(radius):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    a = radius * radius * math.sqrt(3) / 4\n    return a\ndef volume_octahedron(radius):\n    '''\n    Write a function to caluclate the volume of an octahedron.\n    '''\n    a = radius * radius * radius * radius * math.sqrt(3) / 8\n    return a\ndef area_dodecahedron(radius):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    a = 3 * radius * radius * radius * radius * math.sqrt(3)\n    return a\ndef volume_dodecahedron(radius):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    a = 3 * radius * radius * radius * radius * radius * math.sqrt(3) * radius\n    return a\ndef area_icosahedron(radius):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    a = 6 * math.sqrt(5) * math.sqrt(5) / 20 * math.sqrt(5) * radius * radius\n    return a\ndef volume_icosahedron(radius):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    a = 6 * math.sqrt(5) * math.sqrt(5) / 20 * math.sqrt(5) * radius * radius * radius * radius * math.sqrt(5)\n    return a\ndef area_dodecahedron(radius):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    a = 3 * math.sqrt(5) * math.sqrt(5) * math.sqrt(5) / 16 * radius * radius * radius * radius\n    return a\ndef volume_dodecahedron(radius):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    a = 3 * math.sqrt(5) * math.sqrt(5) * math.sqrt(5) / 16 * radius * radius * radius * radius * radius * math.sqrt(5)\n    return a\ndef area_icosahedron(radius):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    a = (1/2) * 6 * math.sqrt(5) * math.sqrt(5) * radius * radius\n    return a\ndef volume_icosahedron(radius):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    a = (1/2) * 6 * math.sqrt(5) * math.sqrt(5) * radius * radius * radius * radius * radius * math.sqrt(5)\n    return a\ndef area_octahedron(radius):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    a = (4/3) * math.sqrt(5) * math.sqrt(5) * radius * radius\n    return a\ndef volume_octahedron(radius):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    a = (4/3) * math.sqrt(5) * math.sqrt(5) * radius * radius * radius * radius * radius * math.sqrt(5)\n    return a\ndef area_dodecahedron(radius):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    ''"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Your code here\n    return (side * side * side / 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = side\n    return (1/6) * side * side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # define constants\n    A = 0.25*side**2\n    B = side**2\n    C = (0.25*side**2)/2\n    \n    #define function\n    def area_tetrahedron(side):\n        '''\n        Write a function to caluclate the area of a tetrahedron.\n        '''\n        # define constants\n        A = 0.25*side**2\n        B = side**2\n        C = (0.25*side**2)/2\n        \n        # define function\n        def area_tetrahedron(side):\n            '''\n            Write a function to caluclate the area of a tetrahedron.\n            '''\n            # define constants\n            A = 0.25*side**2\n            B = side**2\n            C = (0.25*side**2)/2\n            \n            # define function\n            def area_tetrahedron(side):\n                '''\n                Write a function to caluclate the area of a tetrahedron.\n                '''\n                # define constants\n                A = 0.25*side**2\n                B = side**2\n                C = (0.25*side**2)/2\n                \n                # define function\n                def area_tetrahedron(side):\n                    '''\n                    Write a function to caluclate the area of a tetrahedron.\n                    '''\n                    # define constants\n                    A = 0.25*side**2\n                    B = side**2\n                    C = (0.25*side**2)/2\n                    \n                    # define function\n                    def area_tetrahedron(side):\n                        '''\n                        Write a function to caluclate the area of a tetrahedron.\n                        '''\n                        # define constants\n                        A = 0.25*side**2\n                        B = side**2\n                        C = (0.25*side**2)/2\n                        \n                        # define function\n                        def area_tetrahedron(side):\n                            '''\n                            Write a function to caluclate the area of a tetrahedron.\n                            '''\n                            # define constants\n                            A = 0.25*side**2\n                            B = side**2\n                            C = (0.25*side**2)/2\n                            \n                            # define function\n                            def area_tetrahedron(side):\n                                '''\n                                Write a function to caluclate the area of a tetrahedron.\n                                '''\n                                # define constants\n                                A = 0.25*side**2\n                                B = side**2\n                                C = (0.25*side**2)/2\n                                \n                                # define function\n                                def area_tetrahedron(side):\n                                    '''\n                                    Write a function to caluclate the area of a tetrahedron.\n                                    '''\n                                    # define constants\n                                    A = 0.25*side**2\n                                    B = side**2\n                                    C = (0.25*side**2)/2\n                                    \n                                    # define function\n                                    def area_tetrahedron(side):\n                                        '''\n                                        Write a function to caluclate the area of a tetrahedron.\n                                        '''\n                                        # define constants\n                                        A = 0.25*side**2\n                                        B = side**2\n                                        C = (0.25*side**2)/2\n                                        \n                                        # define function\n                                        def area_tetrahedron(side):\n                                            '''\n                                            Write a function to caluclate the area of a tetrahedron.\n                                            '''\n                                            # define constants\n                                            A = 0.25*side**2\n                                            B = side**2\n                                            C = (0.25*side**2)/2\n                                            \n                                            # define function\n                                            def area_tetrahedron(side):\n                                                '''\n                                                Write a function to caluclate the area of a tetrahedron.\n                                                '''\n                                                # define constants\n                                                A = 0.25*side**2\n                                                B = side**2\n                                                C = (0.25*side**2)/2\n                                                \n                                                # define function\n                                                def area_tetrahedron(side):\n                                                    '''\n                                                    Write a function to caluclate the area of a tetrahedron.\n                                                    '''\n                                                    # define constants\n                                                    A = 0.25*side**2\n                                                    B = side**2\n                                                    C = (0.25*side**2)/2\n                                                    \n                                                    # define function\n                                                    def area_tetrahedron(side):\n                                                        '''\n                                                        Write a function to caluclate the area of a tetrahedron.\n                                                        '''\n                                                        # define constants\n                                                        A = 0.25*side**2\n                                                        B = side**2\n                                                        C = (0.25*side**2)/2\n                                                        \n                                                        # define function\n                                                        def area_tetrahedron(side):\n                                                            '''\n                                                            Write a function to caluclate the area of a tetrahedron.\n                                                            '''\n                                                            # define constants\n                                                            A = 0.25*side**2\n                                                            B = side**2\n                                                            C = (0.25*side**2)/2\n                                                            \n                                                            # define function\n                                                            def area_tetrahedron(side):\n                                                                '''\n                                                                Write a function to caluclate the area of a tetrahedron.\n                                                                '''\n                                                                # define constants\n                                                                A = 0.25*side**2\n                                                                B = side**2\n                                                                C = (0.25*side**2)/2\n                                                                \n                                                                # define function\n                                                                def area_tetrahedron(side):\n                                                                    '''\n                                                                    Write a function to caluclate the area of a tetrahedron.\n                                                                    '''\n                                                                    # define constants\n                                                                    A = 0.25*side**2\n                                                                    B = side**2\n                                                                    C = (0.25*side**2)/2\n                                                                    \n                                                                    # define function\n                                                                    def area_tetrahedron(side):\n                                                                        '''\n                                                                        Write a function to caluclate the area of a tetrahedron.\n                                                                        '''\n                                                                        # define constants\n                                                                        A = 0.25*side**2\n                                                                        B = side**2\n                                                                        C = (0.25*side**2)/2\n                                                                        \n                                                                        # define function\n                                                                        def area_tetrahedron(side):\n                                                                            '''\n                                                                            Write a function to caluclate the area of a tetrahedron.\n                                                                            '''\n                                                                            # define constants\n                                                                            A = 0.25*side**2\n                                                                            B = side**2\n                                                                            C = (0.25*side**2)/2\n                                                                            \n                                                                            # define function\n                                                                            def area_tetrahedron(side):\n                                                                                '''\n                                                                                Write a function to caluclate the area of a tetrahedron.\n                                                                                '''\n                                                                                # define constants\n                                                                                A = 0.25*side**2\n                                                                                B = side**2\n                                                                                C = (0.25*side**2)/2\n                                                                                \n                                                                                # define function\n                                                                                def area_tetrahedron(side):\n                                                                                    '''\n                                                                                    Write a function to caluclate the area of a tetrahedron.\n                                                                                    '''\n                                                                                    # define constants\n                                                                                    A = 0.25*side**2\n                                                                                    B = side**2\n                                                                                    C = (0.25*side**2)/2\n                                                                                    \n                                                                                    # define function\n                                                                                    def area_tetrahedron(side):\n                                                                                        '''\n                                                                                        Write a function to caluclate the area of a tetrahedron.\n                                                                                        '''\n                                                                                        # define constants\n                                                                                        A = "
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    a = 4 * math.sqrt(s * (s - 1))\n    return a\nprint(area_tetrahedron(5))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side * side * side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2) / 6\n    \n    \n    \ndef are_equal(numbers):\n    '''\n    Write a function which takes a list of four numbers (between -100 and 100)\n    and determines whether they form a square or not\n    '''\n    \n    return numbers[0] == numbers[1] and numbers[1] == numbers[2] and numbers[1] == numbers[3]\n    \n    \n    \ndef sum_pairs(nums):\n    '''\n    Write a function which takes a list of numbers and returns \n    the sum of all pairs of numbers that sum to zero.\n    '''\n    if len(nums) < 4:\n        return 0\n    sum = 0\n    for num in nums:\n        for num1 in nums:\n            sum += num + num1\n            if num + num1 == 0:\n                return sum\n    return sum\n    \n    \n    \ndef sum_pairs_iter(nums):\n    '''\n    Write a function which takes a list of numbers and returns \n    the sum of all pairs of numbers that sum to zero.\n    '''\n    sum = 0\n    nums_copy = nums.copy()\n    for i in range(len(nums_copy)):\n        num = nums_copy.pop(0)\n        if num == 0:\n            return sum\n        for j in range(i+1, len(nums_copy)):\n            sum += num + nums_copy.pop(0)\n            if num + nums_copy[0] == 0:\n                return sum\n    return sum\n    \n    \ndef is_prime(number):\n    '''\n    Write a function which takes a number and returns true if it is prime\n    and false if it is not prime.\n    '''\n    if number < 2:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    if number < 11:\n        return True\n    if number % 3 == 0:\n        return False\n    if number % 5 == 0:\n        return False\n    if number % 7 == 0:\n        return False\n    if number % 11 == 0:\n        return False\n    i = 1\n    while i < math.ceil(number / 2):\n        if number % (i + 2) == 0:\n            return False\n        i += 1\n    return True\n    \n    \ndef is_prime_iter(number):\n    '''\n    Write a function which takes a number and returns true if it is prime\n    and false if it is not prime.\n    '''\n    if number < 2:\n        return False\n    for i in range(2, math.ceil(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef lcm(a, b):\n    '''\n    Write a function which takes two positive integers and returns the least common multiple\n    '''\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 or b == 0:\n        return 0\n    if a > b:\n        return lcm(b, a)\n    else:\n        return lcm(a, b)\n        \n    \ndef lcm_iter(a, b):\n    '''\n    Write a function which takes two positive integers and returns the least common multiple\n    '''\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 or b == 0:\n        return 0\n    if a > b:\n        while a % b!= 0:\n            a = a - b\n        return a\n    else:\n        while b % a!= 0:\n            b = b - a\n        return b\n    \n    \ndef lcm_recursive(a, b):\n    '''\n    Write a function which takes two positive integers and returns the least common multiple\n    '''\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 or b == 0:\n        return 0\n    if a > b:\n        return lcm(a, lcm_recursive(b, a - b))\n    else:\n        return lcm(b, lcm_recursive(a, b - a))\n    \n    \ndef lcm_recursive_iter(a, b):\n    '''\n    Write a function which takes two positive integers and returns the least common multiple\n    '''\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 or b == 0:\n        return 0\n    if a > b:\n        return lcm_recursive(a, lcm_recursive_iter(b, a - b))\n    else:\n        return lcm_recursive(b, lcm_recursive_iter(a, b - a))\n    \n    \ndef list_product(nums):\n    '''\n    Write a function which takes a list of numbers and returns the product\n    '''\n    if len(nums) < 1:\n        return 0\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n    \n    \ndef list_product_iter(nums):\n    '''\n    Write a function which takes a list of numbers and returns the product\n    '''\n    product = 1\n    for num in nums:\n        product *= num\n    return product\n    \n    \ndef list_length(nums):\n    '''\n    Write a function which takes a list of numbers and returns the length\n    '''\n    return len(nums)\n    \n    \ndef list_length_iter(nums):\n    '''\n    Write a function which takes a list of numbers and returns the length\n    '''\n    length = 0\n    for num in nums:\n        length += 1\n    return length\n    \n    \ndef list_length_recursive(nums):\n    '''\n    Write a function which takes a list of numbers and returns the length\n    '''\n    if len(nums) < 1:\n        return 0\n    return 1 + list_length_recursive(nums[1:])\n    \n    \ndef list_length_recursive_iter(nums):\n    '''\n    Write a function which takes a list of numbers and returns the length\n    '''\n    length = 0\n    for num in nums:\n        length += 1\n    return length\n    \n    \ndef list_length_compressed(nums):\n    '''\n    Write a function which takes a list of numbers and returns the length\n    '''\n    if len(nums) < 1:\n        return 0\n    first = nums[0]\n    last = nums[-1]\n    count = 1\n    while count < len(nums):\n        if nums[count] == last:\n            last = nums[count + 1]\n        count += 1\n    return count + 1\n    \n    \ndef list_length_compressed_iter(nums):\n    '''\n    Write a function which takes a list of numbers and returns the length\n    '''\n    length = 0\n    count = 1\n    while count < len(nums):\n        if nums[count] == nums[count - 1]:\n            count += 1\n            continue\n        length += 1\n        count += 1\n    return length\n    \n    \ndef list_even(nums):\n    '''\n    Write a function which takes a list of numbers and returns a list of numbers\n    which are even\n    '''\n    if len(nums) < 1:\n        return []\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n    \n    \ndef list_even_iter(nums):\n    '''\n    Write a function which takes a list of numbers and returns a list of numbers\n    which are even\n    '''\n    if len(nums) < 1:\n        return []\n    result = []\n    count = 1\n    while count < len(nums):\n        if nums[count] % 2 == 0:\n            result.append(nums[count])\n        count += 1\n    return result\n    \n    \ndef list_even_compressed(nums):\n    '''\n    Write a function which takes a list of numbers and returns a list of numbers\n    which are even\n    '''\n    if len(nums) < 1:\n        return []\n    if nums[0"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((side**2)/3)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list)==0:\n        return \n    list.insert(0,list[-1])\n    del list[-1]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    i = 0\n    j = len(list) - m\n    while(i < j):\n        temp = list[i]\n        list[i] = list[j]\n        list[j] = temp\n        i += 1\n        j -= 1\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_copy = list.copy()\n    n = len(list_copy)\n    count = 0\n    while count < m:\n        list_copy.insert(0,list_copy.pop())\n        count += 1\n    return list_copy\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.insert(0, list.pop())\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # get the length of the list\n    n = len(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[m:]\n    return temp + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n    else:\n        l = len(list)\n        for i in range(m):\n            current = list[i]\n            next = list[i+1]\n            list[i+1] = current\n            list[i] = next\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n - 1, m - 1, -1):\n        list[i] = list[i - 1]\n    list[0] = list[m - 1]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return list\n    if m == 0:\n        return list\n    if len(list) == 1 and m == 1:\n        return list\n    if len(list) == 1 and m == 0:\n        return list\n    a = list.pop(0)\n    # print(a)\n    list.append(a)\n    return rotate_right(list, m-1)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.append(list.pop(0))\n    return list\n    \nif __name__ == \"__main__\":\n    # You can change the input arrays\n    list1 = [2, 2, 3, 4, 5, 5, 5, 6, 6, 6, 6]\n    m = 7\n    print(\"List:\", list1)\n    print(\"Rotate by\", m)\n    print(\"Right Rotated List:\", rotate_right(list1, m))\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    result = any(item == None for item in test_tup)\n    return result\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None or test_tup[1] is None:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert type(test_tup) == tuple, \"Input is not a tuple\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert type(test_tup) == tuple\n    for item in test_tup:\n        assert type(item) == int or float\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return False if None in test_tup else True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(value is None for value in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return not bool(any(test_tup))\n    # return False\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(x%int(i)==0 for i in str(x)), range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum <= endnum:\n        return [i for i in range(startnum, endnum+1) if all(i%x for x in range(2,9))]\n    else:\n        return []\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    list1 = list(range(startnum, endnum))\n    newlist = []\n    for i in list1:\n        newlist.append(i)\n    for j in newlist:\n        if j%int(list(filter(str.isdigit, str(j))))==0:\n            print(j)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    from itertools import count, takewhile\n    def divisible_by_digits(startnum, endnum):\n        return list(takewhile(lambda x: x % startnum == 0, range(startnum, endnum + 1)))\n    print(divisible_by_digits(1,10))\n    print(divisible_by_digits(1,100))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible = []\n    for num in range(startnum, endnum):\n        if (num%10 == 0):\n            for i in range(0,10):\n                if (num%(i+1)!= 0):\n                    divisible.append(False)\n                else:\n                    divisible.append(True)\n        else:\n            divisible.append(True)\n    return divisible\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    l = list(range(startnum, endnum + 1))\n    for i in l:\n        print(f'{i}')\n        for j in str(i):\n            if i % int(j)!= 0:\n                print(f'{i} is not divisible by {j}')\n                break\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum+1) if all(map(lambda x: i%int(x) == 0, str(i))) ]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum+1))\n    \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for x in range(startnum, endnum+1):\n        if all(i % j == 0 for i, j in zip(x, range(1,10))):\n            print(x)\ndivisible_by_digits(21,31)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = range(startnum, endnum)\n    for num in numbers:\n        if all(num % i == 0 for i in range(1, 10)):\n            print(num)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    else:\n        return (r**2*math.sin(a*math.pi/180))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r >= 0 and a >= 0 and r < a:\n        if a%360 == 0:\n            return (math.pi * r**2)\n        elif a%360 == 90:\n            return (math.pi * a * r)\n        elif a%360 == 180:\n            return (math.pi * r**2)\n        elif a%360 == 270:\n            return (math.pi * a * r)\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    r = r*math.pi/180\n    a = a*math.pi/180\n    return r**2*math.sin(a)*2\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r == None or a == None:\n        return None\n    elif a < 0 or a > 360:\n        return None\n    else:\n        return (2*math.pi*r)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    else:\n        area = math.pi*(r**2)*(a/360)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return (r*r)*math.pi/4*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a > 360):\n        return None\n    a = math.radians(a)\n    r = math.radians(r)\n    return math.pi * r**2 * math.sin(a) / 2\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*a/360\n    # Write your function here\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        return None\n    return r**2*math.sin(math.radians(a))/math.tan(math.radians(a))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    return math.pi * (r * r * (a/180))\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp_table = [[0 for x in range(n+1)] for x in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    continue\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp_table[i][j] = 1+dp_table[i-1][j-1]\n                else:\n                    dp_table[i][j] = max(dp_table[i][j], dp_table[i-1][j], dp_table[i][j-1])\n    return dp_table[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs_helper(X, Y, Z, m, n, o, mem): \n    \n        # base cases \n        if (m == 0 or n == 0 or o == 0): \n            return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z): \n        return lcs_of_three(Y, X, Z) \n    \n    # create a table to store results of subproblems \n    \n    # entries in table:  \n    # a  b  c\n    # x  0  0  \n    # y  0  0  \n    # z  0  0  \n    # a  0  0  \n    # b  0  0  \n    # c  0  0  \n    \n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    table = list(map(list, [[0 for i in range(n+1)] for j in range(m+1)]))\n    \n    \n    # Fill the entries in table using optimal substructure method \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    table[i][j] = 0\n                elif X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]: \n                    table[i][j] = 1 + table[i-1][j-1] \n                else: \n                    table[i][j] = max(table[i-1][j], table[i][j-1]) \n    \n    \n    # Fill the entries in table using recurrence relation \n    result = \"\"\n    i = m \n    j = n \n    k = o \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]: \n            result = X[i-1] + result \n            i -= 1\n            j -= 1\n            k -= 1\n        \n        elif table[i][j] == table[i-1][j]: \n            i -= 1\n        else: \n            j -= 1\n            \n    return result \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    DP = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    # DP[i][j][k] is the max LCS of X[0..i-1] and Y[0..j-1] and Z[0..k-1]. It is also the max LCS for X[0..i-1] and Z[0..k-1].\n    # So DP[i][j][k] = max(DP[i-1][j][k], DP[i][j-1][k], DP[i][j][k-1]) + 1 if X[i] == Y[j] == Z[k]\n    # So DP[i][j][k] = DP[i-1][j][k] + 1 if X[i] == Y[j]\n    # So DP[i][j][k] = DP[i][j-1][k] + 1 if X[i] == Z[k]\n    # So DP[i][j][k] = DP[i][j-1][k-1] + 1 if Y[j] == Z[k]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    DP[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    DP[i][j][k] = max(DP[i-1][j][k], DP[i][j-1][k], DP[i][j][k-1]) + 1\n                elif X[i-1] == Y[j-1]:\n                    DP[i][j][k] = DP[i-1][j][k] + 1\n                elif X[i-1] == Z[k-1]:\n                    DP[i][j][k] = DP[i][j-1][k] + 1\n                else:\n                    DP[i][j][k] = DP[i][j-1][k] + 1\n    return DP[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[None] * (o + 1) for i in range(n+1)] \n    \n    for i in range(n+1): \n        for j in range(o+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] or X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i][j-1], L[i-1][j]) \n    return L[m][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if X == None or Y == None or Z == None or len(X) < 1 or len(Y) < 1 or len(Z) < 1:\n        return\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    dp = [[0 for x in range(o+1)] for y in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j] = 1 + dp[i-1][j-1]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n, m, k = len(X), len(Y), len(Z)\n    dp = [[[0 for i in range(k+1)] for j in range(m+1)] for l in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            for k in range(1,k+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n                else:\n                    dp[i][j][k] = max(dp[i][j-1][k],dp[i-1][j][k],dp[i][j-1][k-1])\n    return dp[n][m][k]\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    string=str1.split()\n    capital=[]\n    for word in string:\n        if word[0].isupper():\n            capital.append(word)\n        else:\n            capital.append(word+\" \")\n    return \"\".join(capital)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    import re\n    str1 = re.sub('\\s+',' ', str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('\\W',' ',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pass\n    print(re.sub('([A-Z][a-z]+)',' \\\\1',str1))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = re.sub(r'([a-z])([A-Z])', r' \\1 \\2', str1)\n    print(new_str)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #split the string and put each word into a list\n    list_words = str1.split()\n    #change the list to upper case\n    list_words = [w.upper() for w in list_words]\n    #join the list\n    str1 =''.join(list_words)\n    return str1\n    \ndef camelcase(str1):\n    '''\n    Write a function to convert a camelcase string to snake_case.\n    Example: camelcase(\"CamelCase\") => snake_case(\"camelcase\")\n    '''\n    #put each word in lower case and splite them in the new list\n    list_words = str1.split()\n    #convert the list to lower case\n    list_words = [w.lower() for w in list_words]\n    #join the list\n    str1 =''.join(list_words)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(\"(?:^| )[A-Z]\", r' \\1', str1).strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r\"\\b[A-Z][a-z]*\\b\", lambda x: x.group(0).capitalize(), str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s=str1.split()\n    l=[]\n    for i in s:\n        if len(i)>0:\n            if i[0].islower():\n                l.append(i+' ')\n            else:\n                l.append(i)\n        else:\n            l.append(i)\n    return''.join(l)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #split string into words and then make each word capitalized\n    #put spaces between each capitalized word\n    #join all the words back in a new string\n    str1 = str1.split()\n    str1 =''.join(map(lambda x: x.capitalize(), str1))\n    return str1\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x:int(x))\n    \ndef sort_names(names_list):\n    '''\n    Write a function to sort a given list of strings in the alphabetical order. https://www.geeksforgeeks.org/sort-list-strings-alphabetically/\n    '''\n    return sorted(names_list, key=str.lower)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        nums.append(int(num))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    nums = re.findall('[0-9]+', nums_str)\n    nums = [int(i) for i in nums]\n    return sorted(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=float)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # your code here\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [nums_str[i] for i in range(len(nums_str))]\n    nums_str = sorted(nums_str, key=lambda i: float(i))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        nums.append(float(num))\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split(',')\n    nums_str = list(map(int, nums_str))\n    nums_str.sort()\n    print(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: float(x.split('.')[0]))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n    \n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #the tuple should not contain any element that is already in the list.\n    for tup in test_list:\n        if(test_tup in test_list):\n            return test_list\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] == test_tup:\n            return test_list\n    else:\n        test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if (isinstance(test_list, list)):\n        if (isinstance(test_tup, tuple)):\n            test_list.append(test_tup)\n    else:\n        print(\"Please enter a list.\")\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] > arr[i+1]:\n        return False\n    return check_min_heap_helper(arr, i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Corner cases\n    if i == 0:\n        return True\n    if i == 1:\n        return arr[0] < arr[1]\n    # General case\n    # a left child node exists\n    if 2 * i < len(arr):\n        if arr[i] < arr[2 * i]:\n            return False\n    # a right child node exists\n    if 2 * i + 1 < len(arr):\n        if arr[i] < arr[2 * i + 1]:\n            return False\n    # Check if the root is greater than its child node\n    if 2 * i + 2 < len(arr):\n        if arr[i] < arr[2 * i + 2]:\n            return False\n    # See if we can continue to the next level\n    if 2 * i + 1 < len(arr):\n        return check_min_heap_helper(arr, 2 * i + 1)\n    if 2 * i + 2 < len(arr):\n        return check_min_heap_helper(arr, 2 * i + 2)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = i * 2 + 1\n    right_child = i * 2 + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    size = len(arr)\n    # Min Heap\n    if (size % 2 == 0) and (size == i) and (arr[i//2] >= arr[i]):\n        return True\n    if (size % 2 == 0) and (size!= i) and (arr[i//2] <= arr[i]):\n        return False\n    if (size % 2!= 0) and (size!= i):\n        return False\n    # if size is even\n    if (size % 2 == 0):\n        if (arr[i] <= arr[i//2]):\n            return True\n        return False\n    if (size % 2!= 0):\n        if (arr[i] >= arr[i//2]):\n            return True\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if arr[i] has a child.\n    if (i * 2) + 1 < len(arr):\n        # Check if arr[i] is greater than its child.\n        if arr[i] < arr[i * 2 + 1]:\n            return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr)-1:\n        return True\n    else:\n        if arr[i] > arr[i+1]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    # check if all nodes from i-1 to 1st node are greater than its children\n    for i in range(i, n):\n        if arr[i] > arr[i // 2]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if not arr:\n        return True\n    if arr[0] < arr[i]:\n        return False\n    return check_min_heap_helper(arr[1:], i)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if not arr:\n        return False\n    # Base cases\n    if len(arr) == 1:\n        return True\n    if i == 0:\n        return False\n    if arr[0] < arr[i]:\n        return False\n    return check_min_heap_helper(arr[1:i], i-1) and check_min_heap_helper(arr[i+1:], i-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    size = len(arr)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 9\n    lucas = 0\n    sthal = 0\n    cnt = 1\n    while cnt < n:\n        sthal = sthal + lucas\n        lucas = sthal - lucas\n        cnt += 1\n    return sthal\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    res = {0: 0, 1: 1}\n    for i in range(2, n+1):\n        res[i] = (i*res[i-1] + res[i-2])%1000000007\n    return res[n]\n    \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 1\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 3\n    if n == 4: return 5\n    if n == 5: return 8\n    if n == 6: return 13\n    if n == 7: return 22\n    if n == 8: return 29\n    if n == 9: return 47\n    if n == 10: return 68\n    if n == 11: return 109\n    if n == 12: return 177\n    if n == 13: return 265\n    if n == 14: return 414\n    if n == 15: return 647\n    if n == 16: return 983\n    if n == 17: return 1723\n    if n == 18: return 3785\n    if n == 19: return 4861\n    if n == 20: return 68809\n    if n == 21: return 113943\n    if n == 22: return 193439\n    if n == 23: return 361727\n    if n == 24: return 497781\n    if n == 25: return 738237\n    if n == 26: return 1167691\n    if n == 27: return 2178263\n    if n == 28: return 3741723\n    if n == 29: return 5232939\n    if n == 30: return 8970027\n    if n == 31: return 13698431\n    if n == 32: return 27726507\n    if n == 33: return 45275253\n    if n == 34: return 76873817\n    if n == 35: return 119006761\n    if n == 36: return 264048791\n    if n == 37: return 454455631\n    if n == 38: return 819342981\n    if n == 39: return 141840837\n    if n == 40: return 286912813\n    if n == 41: return 488585667\n    if n == 42: return 807962721\n    if n == 43: return 151502567\n    if n == 44: return 310877039\n    if n == 45: return 486177487\n    if n == 46: return 829244531\n    if n == 47: return 162964361\n    if n == 48: return 351855651\n    if n == 49: return 513594773\n    if n == 50: return 899069933\n    if n == 51: return 160566003\n    if n == 52: return 351528203\n    if n == 53: return 515878575\n    if n == 54: return 906175427\n    if n == 55: return 181893173\n    if n == 56: return 359576479\n    if n == 57: return 549678841\n    if n == 58: return 897152531\n    if n == 59: return 181813397\n    if n == 60: return 374427487\n    if n == 61: return 549185811\n    if n == 62: return 906318571\n    if n == 63: return 181603169\n    if n == 64: return 357288943\n    if n == 65: return 550339537\n    if n == 66: return 906402843\n    if n == 67: return 181262159\n    if n == 68: return 358353749\n    if n == 69: return 550465959\n    if n == 70: return 905752073\n    if n == 71: return 180937963\n    if n == 72: return 358262937\n    if n == 73: return 549386031\n    if n == 74: return 905882813\n    if n == 75: return 180720709\n    if n == 76: return 358243793\n    if n == 77: return 550302733\n    if n == 78: return 905773393\n    if n == 79: return 180679093\n    if n == 80: return 358164021\n    if n == 81: return 550239699\n    if n == 82: return 905856411\n    if n == 83: return 180513863\n    if n == 84: return 358107541\n    if n == 85: return 550244537\n    if n == 86: return 906333863\n    if n == 87: return 180326363\n    if n == 88: return 358121533\n    if n == 89: return 550431089\n    if n == 90: return 906195311\n    if n == 91: return 180602913\n    if n == 92: return 358102649\n    if n == 93: return 550455579\n    if n == 94: return 906362467\n    if n == 95: return 180095741\n    if n == 96: return 359633893\n    if n == 97: return 550487567\n    if n == 98: return 906604897\n    if n == 99: return 180108749\n    if n == 100: return 359958507\n    if n == 101: return 550542423\n    if n == 102: return 906609791\n    if n == 103: return 180055453\n    if n == 104: return 359992197\n    if n == 105: return 550597813\n    if n == 106: return 906297543\n    if n == 107: return 180076691\n    if n == 108: return 359986837\n    if n == 109: return 550686037\n    if n == 110: return 906387929\n    if n == 111: return 180058473\n    if n == 112: return 359979677\n    if n == 113: return 550835235\n    if n == 114: return 906413927\n    if n == 115: return 180098789\n    if n == 116: return 359973611\n    if n == 117: return 550831125\n    if n == 118: return 907896639\n    if n == 119: return 180091691\n    if n == 120: return 359979265\n    if n == 121: return 550838123\n    if n == 122: return 907727633\n    if n == 123: return 180109786\n    if n == 124: return 359971137\n    if n == 125: return 550840949\n    if n == 126: return 907787937\n    if n == 127: return 180094901\n    if n == 128: return 359958563\n    if n == 129: return 550841761\n    if n == 130: return 907645389\n    if n == 131: return 180272873\n    if n == 132: return 359937471\n    if n == 133: return 550845225\n    if n == 134: return 907787781\n    if n == 135: return 180109412\n    if n == 136: return 359928759\n    if n == 137: return 550847257\n    if n == 138: return 907624681\n    if n == 139: return 180110251\n    if n == 140: return 359919533\n    if n == 141: return 550848585\n    if n == 142: return 907692761\n    if n == 143: return 180109232\n    if n == 144: return 359937947\n    if n == 145: return 550848505\n    if n == 146: return 907706033\n    if n == 147: return 180108758\n    if n == 148: return 359952187\n    if n == 149: return 550849501\n    if n == 150: return 907706437\n    if n == 151: return 180105876\n    if n == 152: return 359940537\n    if n == 153: return 550850482\n    if n == 154: return 907724099\n    if n == 155: return 180097921\n    if n == 156: return 359945499\n    if n == 157: return 550852179\n    if n == 158: return 907667063\n    if n == 159: return 180093469\n    if n == 160: return 35993483\n    if n == 161: return 550859411\n    if n == 162: return 907731581\n    if n == 163: return 180087486\n    if n == 164: return 359924607\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int((n*(n+1))/2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = 0\n    h = 1\n    j = 0\n    # using a while loop\n    while j < n:\n        l, h = h, l + h\n        j += 1\n    return l\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    nums = [1, 0]\n    #nums[0] = 1, nums[1] = 0\n    i = 2\n    while i <= n: \n        #print(nums)\n        nums.append(nums[i - 1] + nums[i - 2])\n        #print(nums)\n        i += 1\n    return nums[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = 0\n    i = 0\n    while num < n:\n        num = ((1 + 1.1 ** i) * (1 - 0.1 ** i)) / (i * (i + 1))\n        i += 1\n    return num\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n    while(n > 0):\n        a, b = b, (a + b) % n\n        n -= 1\n    return b\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = [0,1]\n    for i in range(2,n+1):\n        l.append(l[i-1]+l[i-2])\n    return l[n]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_val = 0\n    min_tup = None\n    for val in test_list:\n        if val[2] < min_val:\n            min_val = val[2]\n            min_tup = val\n    print(min_tup)\n    return min_tup\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code here\n    # if we have an empty list, return\n    if len(test_list) == 0:\n        return\n    # compare the first element with first element of the rest\n    if test_list[0] < test_list[1]:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    smallest_list = list(test_list)\n    smallest_list = sorted(smallest_list, key=lambda tup: tup[2])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key = lambda x: x[0])\n    test_list.sort(key = lambda x: x[1])\n    test_list.sort(key = lambda x: x[2])\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Code here\n    return min(test_list, key=lambda item: item[K])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = test_list[0]\n    minimum_count = 0\n    for i in range(len(test_list)):\n        if test_list[i] < minimum:\n            minimum = test_list[i]\n            minimum_count = i\n    if minimum_count == K-1:\n        return minimum_count + 1\n    else:\n        return minimum_count\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sorting is faster than min_k_util\n    test_list.sort()\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    for i in range(len(test_list) - K + 1):\n        min_k.append(test_list[i])\n        for j in range(K):\n            min_k.pop()\n    return min_k\nprint(min_k([(1,2,3),(2,3,4),(3,4,5)],3))\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # get the number of records to be returned\n    n = int(input(\"Enter number of records to be returned: \"))\n    # initialize list\n    min_k_list = []\n    # initialize variables\n    count = 0\n    min = 10000\n    # iterate for all records\n    for i in range(len(test_list)):\n        # get a record\n        record = test_list[i]\n        # if count is less than n, add record\n        if count < n:\n            min_k_list.append(record)\n            count += 1\n        # if record is less than min, replace the record\n        elif record < min:\n            min = record\n            min_k_list = []\n            min_k_list.append(record)\n            count = 1\n        # if record is equal to min, add record to min_k_list\n        elif record == min:\n            min_k_list.append(record)\n            count += 1\n    # return result\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    m = test_list[0][0]\n    l = 0\n    r = len(test_list) - 1\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n    common_elements = l1_set.intersection(l2_set, l3_set)\n    common_elements = list(common_elements)\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n        else:\n            if l1[i] in l2:\n                index_list.append(i)\n            if l1[i] in l3:\n                index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_list = []\n    l2_list = []\n    l3_list = []\n    l1_copy = l1.copy()\n    l2_copy = l2.copy()\n    l3_copy = l3.copy()\n    l1_list = list(dict.fromkeys(l1))\n    l2_list = list(dict.fromkeys(l2))\n    l3_list = list(dict.fromkeys(l3))\n    #print(l1_list)\n    #print(l2_list)\n    #print(l3_list)\n    common_list = []\n    for i in l1_list:\n        if i in l2_list and i in l3_list:\n            common_list.append(i)\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    assert l1.__class__ is list and len(l1) > 0, 'Error: list 1 does not contain any elements.'\n    assert l2.__class__ is list and len(l2) > 0, 'Error: list 2 does not contain any elements.'\n    assert l3.__class__ is list and len(l3) > 0, 'Error: list 3 does not contain any elements.'\n    \n    # fill this in\n    lst = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    lst.append(l1[i])\n    return lst\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_indexes = []\n    for i, el in enumerate(l1):\n        if el in l2 and el in l3:\n            common_indexes.append(i)\n    return common_indexes\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    out_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j] and l1[i] == l3[j] and l1[i] not in out_list:\n                out_list.append(l1[i])\n    return out_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1)!= len(l2) or len(l2)!= len(l3) or len(l1)!= len(l3):\n        raise ValueError(\"Three lists must have the same length\")\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(0,len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    else:\n        min_num = min(numbers)\n        numbers.remove(min_num)\n        min_num_2 = min(numbers)\n        return min_num_2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n    \ndef second_smallest2(numbers):\n    '''\n    Given a list of numbers, return the second smallest number in the list.\n    '''\n    numbers.sort()\n    return numbers[1]\n    \ndef first_bigger(numbers, target):\n    '''\n    Write a function that returns the indices of the first value of each pair of values in numbers that are larger than target.\n    For example, given the array [5, 15, 10, 5, 5, 7] and a target of 14, you should return an array with the indices of the values 1, 4 and 6.\n    '''\n    index = 0\n    while index < len(numbers):\n        if numbers[index] > target:\n            return numbers.index(numbers[index])\n        else:\n            index += 1\n            \ndef first_bigger2(numbers, target):\n    '''\n    Write a function that returns the indices of the first value of each pair of values in numbers that are larger than target.\n    For example, given the array [5, 15, 10, 5, 5, 7] and a target of 14, you should return an array with the indices of the values 1, 4 and 6.\n    '''\n    index = 0\n    while index < len(numbers):\n        if numbers[index] > target:\n            return numbers.index(numbers[index])\n        else:\n            index += 1\n    \ndef max_diff(numbers):\n    '''\n    Write a function that finds the maximum difference between any pair of sequential numbers in a list.\n    '''\n    result = numbers[0] - numbers[1]\n    index = 2\n    while index < len(numbers):\n        result = max(result, numbers[index] - numbers[index - 1])\n        index += 1\n    return result\n    \ndef max_diff2(numbers):\n    '''\n    Write a function that finds the maximum difference between any pair of sequential numbers in a list.\n    '''\n    result = numbers[0] - numbers[1]\n    index = 2\n    while index < len(numbers):\n        result = max(result, numbers[index] - numbers[index - 1])\n        index += 1\n    return result\n    \ndef sum_first_n_evens(n):\n    '''\n    Write a function that returns the sum of the first n even numbers in a list.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2 == 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_evens2(n):\n    '''\n    Write a function that returns the sum of the first n even numbers in a list.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2 == 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_odds(n):\n    '''\n    Write a function that returns the sum of the first n odd numbers in a list.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2!= 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_odds2(n):\n    '''\n    Write a function that returns the sum of the first n odd numbers in a list.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2!= 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_evens_indexed(n):\n    '''\n    Write a function that returns the sum of the first n even numbers in a list.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2 == 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_evens_indexed2(n):\n    '''\n    Write a function that returns the sum of the first n even numbers in a list.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2 == 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_odds_indexed(n):\n    '''\n    Write a function that returns the sum of the first n odd numbers in a list.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2!= 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_odds_indexed2(n):\n    '''\n    Write a function that returns the sum of the first n odd numbers in a list.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2!= 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_evens_sorted(n):\n    '''\n    Write a function that returns the sum of the first n even numbers in a list, where n is sorted.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    numbers.sort()\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2 == 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_evens_sorted2(n):\n    '''\n    Write a function that returns the sum of the first n even numbers in a list, where n is sorted.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    numbers.sort()\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2 == 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_odds_sorted(n):\n    '''\n    Write a function that returns the sum of the first n odd numbers in a list, where n is sorted.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    numbers.sort()\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2!= 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_odds_sorted2(n):\n    '''\n    Write a function that returns the sum of the first n odd numbers in a list, where n is sorted.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    numbers.sort()\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2!= 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_evens_reverse(n):\n    '''\n    Write a function that returns the sum of the first n even numbers in a list, where n is reversed.\n    '''\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    numbers.reverse()\n    sum = 0\n    for i in range(n):\n        if numbers[i] % 2 == 0:\n            sum += numbers[i]\n    return sum\n    \ndef sum_first_n_evens_reverse2(n):\n    '''\n    Write a function that returns the sum of the first n even numbers i"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = len(numbers)\n    if n < 2:\n        return numbers[0]\n    if n == 2:\n        return sorted(numbers)[1]\n    minimum = numbers[0]\n    second_minimum = minimum\n    for i in range(1, n):\n        if numbers[i] > second_minimum:\n            second_minimum = numbers[i]\n    return second_minimum\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) > 2:\n        # helper function to return the largest number in a list\n        def largest(lst):\n            return max(lst)\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return -1\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    # if first number is the same as the last\n    # return the second-to-last\n    # elif the second to last is the same as the first\n    # return the second-to-last\n    # elif the first to last is the same as the second-to-last\n    # return the second-to-last\n    # elif the first to last is the same as the last\n    # return the last\n    # elif the second to last is the same as the last\n    # return the first\n    # elif the second to last is the same as the first\n    # return the last\n    # elif the first is the same as the second to last\n    # return the first\n    # elif the last is the same as the second to last\n    # return the second\n    # else, return the first\n    if numbers[0] == numbers[-1]:\n        return numbers[-2]\n    elif numbers[1] == numbers[-1]:\n        return numbers[-2]\n    elif numbers[0] == numbers[1]:\n        return numbers[1]\n    elif numbers[-1] == numbers[-2]:\n        return numbers[0]\n    elif numbers[-1] == numbers[-3]:\n        return numbers[-3]\n    elif numbers[0] == numbers[-2]:\n        return numbers[1]\n    elif numbers[0] == numbers[-3]:\n        return numbers[-3]\n    elif numbers[1] == numbers[-2]:\n        return numbers[-2]\n    elif numbers[1] == numbers[-3]:\n        return numbers[-3]\n    else:\n        return numbers[0]\n    \ndef third_largest(numbers):\n    '''\n    Write a function that returns the third largest number in a list.\n    '''\n    numbers.sort()\n    # if the list is empty\n    # return the first\n    # elif the third to last is the same as the last\n    # return the third-to-last\n    # elif the first to last is the same as the third-to-last\n    # return the third-to-last\n    # elif the first to last is the same as the second-to-last\n    # return the second-to-last\n    # elif the first to last is the same as the last\n    # return the last\n    # else, return the first\n    # elif the second to last is the same as the last\n    # return the first\n    # elif the second to last is the same as the first\n    # return the last\n    # elif the first is the same as the second to last\n    # return the first\n    # elif the last is the same as the second to last\n    # return the second\n    # else, return the first\n    if numbers == []:\n        return None\n    elif numbers[1] == numbers[-1]:\n        return numbers[0]\n    elif numbers[2] == numbers[-1]:\n        return numbers[1]\n    elif numbers[0] == numbers[2]:\n        return numbers[2]\n    elif numbers[-1] == numbers[1]:\n        return numbers[0]\n    elif numbers[0] == numbers[-2]:\n        return numbers[1]\n    elif numbers[0] == numbers[-3]:\n        return numbers[-3]\n    elif numbers[1] == numbers[-2]:\n        return numbers[-2]\n    elif numbers[1] == numbers[-3]:\n        return numbers[-3]\n    elif numbers[2] == numbers[-2]:\n        return numbers[-2]\n    elif numbers[2] == numbers[-3]:\n        return numbers[-3]\n    else:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # first = second = numbers[0]\n    # for i in range(1,len(numbers)):\n    #     if numbers[i] < first:\n    #         second = first\n    #         first = numbers[i]\n    #     elif numbers[i] < second:\n    #         second = numbers[i]\n    #     else:\n    #         pass\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    match = re.findall(r'a\\bb',text)\n    if len(match) > 0:\n        print('Match Found')\n    else:\n        print('No Match Found')\ntext_match_zero_one(\"aabbbbaaa\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r\"ab\",text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pat = re.compile(r'(a){1,}b')\n    if re.search(pat, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r\"a+b\", text)\n    if match:\n        return match.group(0)\n    else:\n        return \"\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile(r'a(?=.*b)') # Use?=.* to match a single b\n    if regex.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p = re.compile(r'a+b')\n    if p.search(text):\n        return p.search(text)\n    else:\n        return None\n        \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"ab\"\n    if re.search(pattern, text):\n        return \"a followed by one or more b's\"\n    else:\n        return \"a followed by zero or more b's\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(b+)?')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    return None\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    #Your code here\n    pattern = re.compile(r'a(b)+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab')\n    matches = pattern.finditer(text)\n    print('The matches are', list(matches))\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    s = []\n    s2 = []\n    s = test_list\n    n = len(s)\n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j]:\n                s2.append(s[i])\n                s2.append(s[j])\n                s2.sort()\n                s2 = tuple(s2)\n                s2 = s2[::-1]\n                if s2 in s:\n                    s2 = s2\n                else:\n                    s2 = s2\n                #print(s2)\n                s2 = s2[::-1]\n                #print(s2)\n    print(s2)\n    #print(len(s))\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                total += 1\n    return total\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Write a function to count the pairs of reverse strings in the given strin"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for index in range(len(test_list)):\n        rev = test_list[index][::-1]\n        if rev in test_list:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    1) use the concept of hash table. \n    2) Use the concept of nested loops\n    '''\n    output = {}\n    for i in test_list:\n        rev = i[::-1]\n        if rev not in output:\n            output[rev] = 0\n        output[rev] += 1\n    return len(output)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list)==0:\n        return 0\n    for i in range(len(test_list)-1):\n        if test_list[i]==test_list[i+1]:\n            continue\n        else:\n            return int(((i+1)/2)+(test_list[i+1]))\n    return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # print(test_list)\n    # reverse_pairs = 0\n    # for i in range(0, len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         if test_list[i] == test_list[j][::-1]:\n    #             reverse_pairs += 1\n    # return reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #count_pair = 0\n    #for x in test_list:\n    #    for y in test_list:\n    #        if x!= y:\n    #            if x[::-1] == y:\n    #                count_pair += 1\n    #return count_pair\n    \n    #Alternate solution\n    #count = 0\n    #for i in range(len(test_list)):\n    #    for j in range(i+1,len(test_list)):\n    #        if test_list[i] == test_list[j][::-1]:\n    #            count += 1\n    #return count\n    \n    #Alternate solution\n    count = 0\n    for x in test_list:\n        for y in test_list:\n            if x!= y:\n                if x[::-1] == y:\n                    count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    num_pairs = 0\n    for i in range(len(test_list)):\n        if test_list[i]==test_list[-i-1]:\n            num_pairs += 1\n    return num_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Your code here\n    rev = 0\n    count = 0\n    for i in test_list:\n        if i[::-1] in test_list:\n            rev += 1\n        count += 1\n    print('{} pairs of reverse strings'.format(count))\n    print('{} in total'.format(rev))\n    return count, rev\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in list1:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic_of_lists = {}\n    for list in list1:\n        if list in dic_of_lists:\n            dic_of_lists[list] += 1\n        else:\n            dic_of_lists[list] = 1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #example:\n    #unique_sublists([3, 5, 3, 4, 3, 7, 3])\n    #{\n    #    3: 3,\n    #    5: 1,\n    #    4: 1,\n    #    7: 1\n    #}\n    #3: 1\n    #4: 1\n    #5: 1\n    #7: 1\n    #This function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \n    #Hint: This function should return a dict instead of a list.\n    \n    \n    #start writing your code here\n    res = {}\n    for i in list1:\n        if i not in res:\n            res[i] = 1\n        else:\n            res[i] += 1\n    return res\n    #return res\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        d[tuple(i)] = list1.count(tuple(i))\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    d = {}\n    for i in list1:\n        d[tuple(i)] = list1.count(tuple(i))\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    count = {}\n    for i in list1:\n        if type(i) == list:\n            t = tuple(i)\n            if t in count:\n                count[t] += 1\n            else:\n                count[t] = 1\n    return count\n    \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for l in list1:\n        d[tuple(l)] = l.count(l)\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    result = {}\n    \n    for sublist in list1:\n        if sublist in result.keys():\n            result[sublist] = result[sublist] + 1\n        else:\n            result[sublist] = 1\n    return result\n    \nprint(unique_sublists([[1,2], [3,4], [2,3], [4,5]]))\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_lists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            unique_lists.append(tuple(sorted([list1[i], list1[j]])))\n    return unique_lists\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in list1:\n        count_dict[i] = count_dict.get(i, 0) + 1\n    print(\"Unique sublist: \",count_dict)\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        a = float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_power_of_two(num):\n    '''\n    Write a function to check whether a given integer is a power of two.\n    '''\n    \n    return num > 0 and num & (num - 1) == 0\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == \"\":\n        return False\n    if num[0]!= '.' and num[0].isdigit() and num[1].isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # if len(num) < 10 and num.startswith('0') == False:\n    #     return False\n    # if len(num) < 10 and num.startswith('-') == False:\n    #     return False\n    # if 'e' not in num and 'E' not in num:\n    #     return False\n    # if '+' in num or '-' in num:\n    #     return False\n    # if num.count('.') > 1:\n    #     return False\n    # if 'e' in num or 'E' in num:\n    #     return False\n    # if num.count('.') > 1:\n    #     return False\n    # if len(num) > 10:\n    #     return False\n    # if num.count('.') == 1:\n    #     if num.find('.') == 0:\n    #         return False\n    #     elif num.find('.') == 2:\n    #         return False\n    #     elif num.find('.') == 4:\n    #         return False\n    #     else:\n    #         return False\n    # if num.find('e') > num.find('.') > num.find('-'):\n    #     return False\n    # if num.find('.') > num.find('e') > num.find('-'):\n    #     return False\n    # if num.find('e') > num.find('E') > num.find('-'):\n    #     return False\n    # if num.find('E') > num.find('e') > num.find('-'):\n    #     return False\n    # return True\n    if num.startswith('0') == False:\n        return False\n    if len(num) == 1:\n        return False\n    if num.startswith('-') == False:\n        return False\n    if num.startswith('-.') == False:\n        return False\n    if num.count('.') > 1:\n        return False\n    if 'e' not in num and 'E' not in num:\n        return False\n    if '+' in num or '-' in num:\n        return False\n    if num.count('.') > 1:\n        return False\n    if 'e' in num or 'E' in num:\n        return False\n    if num.count('.') == 1:\n        if num.find('.') == 0:\n            return False\n        elif num.find('.') == 2:\n            return False\n        elif num.find('.') == 4:\n            return False\n        else:\n            return False\n    if num.find('e') > num.find('.') > num.find('-'):\n        return False\n    if num.find('.') > num.find('e') > num.find('-'):\n        return False\n    if num.find('e') > num.find('E') > num.find('-'):\n        return False\n    if num.find('E') > num.find('e') > num.find('-'):\n        return False\n    return True\n    \nprint(is_decimal(\"abc.3\"))\nprint(is_decimal(\"abc.e\"))\nprint(is_decimal(\"abc.3.1.0.5\"))\nprint(is_decimal(\"abc.e.1.0.5\"))\nprint(is_decimal(\"abc.3.e.5\"))\nprint(is_decimal(\"abc.3.e.5.\"))\nprint(is_decimal(\"abc.3e.5.\"))\nprint(is_decimal(\"abc.3.e.5.\"))\nprint(is_decimal(\"abc.3.e.5.6\"))\nprint(is_decimal(\"abc.e.5.6\"))\nprint(is_decimal(\"abc.3.e.5.6.\"))\nprint(is_decimal(\"abc.3.e.5.6.\"))\nprint(is_decimal(\"abc.3.e.5.6.7\"))\nprint(is_decimal(\"abc.3.e.5.6.7.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15.16\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15.16.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15.16.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15.16.17\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15.16.17.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15.16.17.\"))\nprint(is_decimal(\"abc.3.e.5.6.7.8.9.10.11.12.13.14.15.16.17.18\"))\nprint(is_de"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    s = set()\n    for i in arr:\n        if i in s:\n            return False\n        else:\n            s.add(i)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        else:\n            seen.add(num)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l = []\n    for i in arr:\n        if i in l:\n            return False\n        else:\n            l.append(i)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n= len(arr)\n    if n==1:\n        return True\n    else:\n        for i in range(n):\n            for j in range(i+1,n):\n                if arr[i]==arr[j]:\n                    return False\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    s = set(arr)\n    if len(s) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l=set(arr)\n    if len(l)==1:\n        return True\n    else:\n        return False\nprint(\"The answer is \",unique_Element([1,2,3,2,5,6,1,3,2,5]))\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    size=len(arr)\n    count=0\n    for i in range(0,size):\n        if count<2 and arr[i]!=arr[i-1]:\n            count+=1\n    return True if count==1 else False\n    \ndef find_smallest(arr):\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    size=len(arr)\n    smallest=arr[0]\n    for i in range(0,size):\n        if arr[i]<smallest:\n            smallest=arr[i]\n    return smallest\n    \ndef find_second_largest(arr):\n    '''\n    Write a python function to find the second largest element in a list.\n    '''\n    size=len(arr)\n    second_largest=arr[0]\n    for i in range(0,size):\n        if arr[i]>second_largest and second_largest<arr[i]:\n            second_largest=arr[i]\n    return second_largest\n    \ndef largest_num_in_sublist(arr):\n    '''\n    Write a python function to find the largest element in a sublist.\n    '''\n    size=len(arr)\n    largest=arr[0]\n    for i in range(0,size):\n        if arr[i]>largest:\n            largest=arr[i]\n    return largest\n    \ndef count_strings_with_unique_characters(string):\n    '''\n    Write a python function to count the number of substrings that have only unique characters.\n    '''\n    size=len(string)\n    count=0\n    for i in range(0,size):\n        count+=string.count(string[i])\n    return count\n    \ndef find_digits_in_string(string):\n    '''\n    Write a python function to find the digits in a string.\n    '''\n    size=len(string)\n    count=0\n    for i in range(0,size):\n        if string[i]>='0' and string[i]<='9':\n            count+=1\n    return count\n    \ndef find_char_occurrence(string):\n    '''\n    Write a python function to find the number of times a character is repeated in a string.\n    '''\n    size=len(string)\n    count=0\n    for i in range(0,size):\n        count+=string.count(string[i])\n    return count\n    \ndef find_unique_characters(string):\n    '''\n    Write a python function to find the unique characters in a string.\n    '''\n    size=len(string)\n    count=0\n    for i in range(0,size):\n        if string[i] not in string[0:i]:\n            count+=1\n    return count\n    \ndef find_all_palindromic_strings(string):\n    '''\n    Write a python function to find all the palindromic strings in a string.\n    '''\n    size=len(string)\n    count=0\n    for i in range(0,size):\n        if is_palindrome(string[i:size]):\n            count+=1\n    return count\n    \ndef all_substrings_of_a_string(string):\n    '''\n    Write a python function to find all the substrings of a string.\n    '''\n    size=len(string)\n    count=0\n    for i in range(0,size):\n        count+=len(string[i:size])\n    return count\n    \ndef find_substrings(string):\n    '''\n    Write a python function to find all the substrings in a string.\n    '''\n    size=len(string)\n    count=0\n    for i in range(0,size):\n        for j in range(i,size):\n            count+=1\n    return count\n    \ndef find_first_and_last_occurrence(string):\n    '''\n    Write a python function to find the first and last occurence of a given substring in a string.\n    '''\n    size=len(string)\n    i=0\n    j=size-1\n    count=0\n    while i<size and j>=0:\n        if string[i]==string[j]:\n            count+=1\n            i+=1\n            j-=1\n        else:\n            if count==0:\n                i+=1\n            else:\n                j-=1\n    return (i,j+1)\n    \ndef count_words_occurrence(string):\n    '''\n    Write a python function to count the number of words in a string.\n    '''\n    size=len(string)\n    count=0\n    for i in range(0,size):\n        if string[i]==\" \":\n            count+=1\n    return count\n    \ndef find_longest_word_in_a_string(string):\n    '''\n    Write a python function to find the longest word in a string.\n    '''\n    size=len(string)\n    longest=0\n    index=0\n    for i in range(0,size):\n        if string[i]!=' ':\n            index=i\n        else:\n            if longest<index-i+1:\n                longest=index-i+1\n    return longest\n    \ndef count_substring(string,substring):\n    '''\n    Write a python function to find the number of substrings in a string.\n    '''\n    size=len(string)\n    count=0\n    for i in range(size):\n        if string[i:i+len(substring)]==substring:\n            count+=1\n    return count\n    \ndef find_smallest_odd_substring_starting_at_index(string):\n    '''\n    Write a python function to find the smallest substring that starts with an odd number in a string.\n    '''\n    size=len(string)\n    substring=\"\"\n    for i in range(size):\n        if string[i]%2!=0:\n            substring=string[i:]\n    return substring\n    \ndef find_longest_palindrome_substring(string):\n    '''\n    Write a python function to find the longest palindrome substring in a string.\n    '''\n    size=len(string)\n    longest=''\n    for i in range(0,size):\n        for j in range(i,size):\n            if is_palindrome(string[i:j+1]) and len(longest)<len(string[i:j+1]):\n                longest=string[i:j+1]\n    return longest\n    \ndef longest_common_prefix(string_list):\n    '''\n    Write a python function to find the longest common prefix in a list of strings.\n    '''\n    size=len(string_list)\n    if size<1:\n        return ''\n    else:\n        prefix=string_list[0]\n        for i in range(1,size):\n            while len(prefix)>0 and prefix[0]!=string_list[i][0]:\n                prefix=prefix[1:]\n        return prefix\n    \ndef find_next_greatest_palindrome(string):\n    '''\n    Write a python function to find the next largest palindrome after the input string.\n    '''\n    size=len(string)\n    if size==0:\n        return ''\n    else:\n        if is_palindrome(string):\n            return string\n        else:\n            while size>0 and string[size-1]==string[size]:\n                size=size-1\n            prefix=string[size-1]\n            string=string[:size-1]+string[size+1:]\n            suffix=string[:size]\n            while len(prefix)>0 and len(suffix)>0:\n                if prefix==suffix:\n                    return prefix\n                elif prefix>suffix:\n                    prefix=prefix[1:]\n                else:\n                    suffix=suffix[1:]\n    \ndef find_all_unique_substrings(string):\n    '''\n    Write a python function to find all the unique substrings in a string.\n    '''\n    size=len(string)\n    count=0\n    for i in range(size):\n        for j in range(i+1,size):\n            substring=string[i:j"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        else:\n            seen.add(num)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # todo: Write your solution here\n    d = set()\n    for i in range(0,len(arr)):\n        if arr[i] in d:\n            return False\n        else:\n            d.add(arr[i])\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1, 13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        print('The month has 30 days')\n    else:\n        print('The month does not have 30 days')\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    count=0\n    for i in range(1,monthnum3+1):\n        if i in (4,6,9,11):\n            count=count+30\n        else:\n            count=count+31\n    if count==monthnum3:\n        return True\n    else:\n        return False\n    \n    \ndef check_month_year_validity(monthyear3):\n    '''\n    Write a function to check whether the given month year is valid or not. Months are given as number from 1 to 12, and years are given as number from 0 to 99.\n    '''\n    if len(monthyear3)==3:\n        if monthyear3[0]==\"0\" or monthyear3[0]==\"1\" or monthyear3[0]==\"2\" or monthyear3[0]==\"3\" or monthyear3[0]==\"4\" or monthyear3[0]==\"5\" or monthyear3[0]==\"6\" or monthyear3[0]==\"7\" or monthyear3[0]==\"8\" or monthyear3[0]==\"9\" or monthyear3[0]==\"0\":\n            if monthyear3[1]==\"0\" or monthyear3[1]==\"1\" or monthyear3[1]==\"2\" or monthyear3[1]==\"3\" or monthyear3[1]==\"4\" or monthyear3[1]==\"5\" or monthyear3[1]==\"6\" or monthyear3[1]==\"7\" or monthyear3[1]==\"8\" or monthyear3[1]==\"9\" or monthyear3[1]==\"0\":\n                if monthyear3[2]==\"0\" or monthyear3[2]==\"1\" or monthyear3[2]==\"2\" or monthyear3[2]==\"3\" or monthyear3[2]==\"4\" or monthyear3[2]==\"5\" or monthyear3[2]==\"6\" or monthyear3[2]==\"7\" or monthyear3[2]==\"8\" or monthyear3[2]==\"9\" or monthyear3[2]==\"0\":\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef check_day_number(daynum):\n    '''\n    Write a function to check whether the given day number is valid or not.\n    '''\n    if len(daynum)==2:\n        if daynum[0]==\"0\" or daynum[0]==\"1\" or daynum[0]==\"2\" or daynum[0]==\"3\" or daynum[0]==\"4\" or daynum[0]==\"5\" or daynum[0]==\"6\" or daynum[0]==\"7\" or daynum[0]==\"8\" or daynum[0]==\"9\" or daynum[0]==\"0\":\n            if daynum[1]==\"0\" or daynum[1]==\"1\" or daynum[1]==\"2\" or daynum[1]==\"3\" or daynum[1]==\"4\" or daynum[1]==\"5\" or daynum[1]==\"6\" or daynum[1]==\"7\" or daynum[1]==\"8\" or daynum[1]==\"9\" or daynum[1]==\"0\":\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef check_time_24_hour(timenow):\n    '''\n    Write a function to check whether the given time is valid or not. \n    If it is invalid, return an appropriate error.\n    '''\n    if len(timenow)==4:\n        if timenow[0]==\"0\" or timenow[0]==\"1\" or timenow[0]==\"2\" or timenow[0]==\"3\" or timenow[0]==\"4\" or timenow[0]==\"5\" or timenow[0]==\"6\" or timenow[0]==\"7\" or timenow[0]==\"8\" or timenow[0]==\"9\" or timenow[0]==\"0\":\n            if timenow[1]==\"0\" or timenow[1]==\"1\" or timenow[1]==\"2\" or timenow[1]==\"3\" or timenow[1]==\"4\" or timenow[1]==\"5\" or timenow[1]==\"6\" or timenow[1]==\"7\" or timenow[1]==\"8\" or timenow[1]==\"9\" or timenow[1]==\"0\":\n                if timenow[2]==\"0\" or timenow[2]==\"1\" or timenow[2]==\"2\" or timenow[2]==\"3\" or timenow[2]==\"4\" or timenow[2]==\"5\" or timenow[2]==\"6\" or timenow[2]==\"7\" or timenow[2]==\"8\" or timenow[2]==\"9\" or timenow[2]==\"0\":\n                    if timenow[3]==\"0\" or timenow[3]==\"1\" or timenow[3]==\"2\" or timenow[3]==\"3\" or timenow[3]==\"4\" or timenow[3]==\"5\" or timenow[3]==\"6\" or timenow[3]==\"7\" or timenow[3]==\"8\" or timenow[3]==\"9\" or timenow[3]==\"0\":\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef check_time_24_hour2(time):\n    '''\n    Write a function to check whether the given time is valid or not. \n    If it is invalid, return an appropriate error.\n    '''\n    if len(time)==4:\n        if time[0]==\"0\" or time[0]==\"1\" or time[0]==\"2\" or time[0]==\"3\" or time[0]==\"4\" or time[0]==\"5\" or time[0]==\"6\" or time[0]==\"7\" or time[0]==\"8\" or time[0]==\"9\" or time[0]==\"0\":\n            if time[1]==\"0\" or time[1]==\"1\" or time[1]==\"2\" or time[1]==\"3\" or time[1]==\"4\" or time[1]==\"5\" or time[1]==\"6\" or time[1]==\"7\" or time[1]==\"8\" or time[1]==\"9\" or time[1]==\"0\":\n                if time[2]==\"0\" or time[2]==\"1\" or time[2]==\"2\" or time[2]==\"3\" or time[2]==\"4\" or time[2]==\"5\" or time[2]==\"6\" or time[2]==\"7\" or time[2]==\"8\" or time[2]==\"9\" or time[2]==\"0\":\n                    if time[3]==\"0\" or time[3]==\"1\" or time[3]==\"2\" or time[3]==\"3\" or time[3]==\"4\" or time[3]==\"5\" or time[3]==\"6\" or time[3]==\"7\" or time[3]==\"8\" or time[3]==\"9\" or time[3]==\"0\":\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \n    \ndef check_time_24_hour3(time):\n    '''\n    Write a function to check whether the given time i"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%2 == 0:\n        print('30 days')\n    else:\n        print('29 days')\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # monthnum = int(input(\"Enter the month number\"))\n    # if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n    #     print(\"30 days\")\n    # elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n    #     print(\"30 days\")\n    # else:\n    #     print(\"30 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%4==0:\n        return True\n    else:\n        return False\n        \ndef is_leapyear(year_num):\n    '''\n    Write a function to check whether the given year is leap year or not.\n    '''\n    if year_num%4==0:\n        return True\n    else:\n        return False\n        \ndef check_leapyear_number(yearnum4):\n    '''\n    Write a function to check whether the given year number contains 366 days or not. Leap years are every year that is divisible by 4 and not divisible by 100 except for century years, which are divisible by 4.\n    '''\n    if yearnum4%4==0:\n        if yearnum4%100==0:\n            if yearnum4%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef date_to_weekday(date_num5):\n    '''\n    Write a function to convert the given date in dd/mm/yyyy format to weekday number. Weekdays are given as number from 0 to 6, where 0 is Sunday and 6 is Saturday.\n    '''\n    if date_num5[2]=='01':\n        return 0\n    elif date_num5[2]=='02':\n        return 1\n    elif date_num5[2]=='03':\n        return 2\n    elif date_num5[2]=='04':\n        return 3\n    elif date_num5[2]=='05':\n        return 4\n    elif date_num5[2]=='06':\n        return 5\n    elif date_num5[2]=='07':\n        return 6\n    elif date_num5[2]=='08':\n        return 7\n    elif date_num5[2]=='09':\n        return 8\n    elif date_num5[2]=='10':\n        return 9\n    elif date_num5[2]=='11':\n        return 10\n    elif date_num5[2]=='12':\n        return 11\n        \ndef date_to_weekno(date_num6):\n    '''\n    Write a function to convert the given date in dd/mm/yyyy format to week number. Weeks are given as number from 0 to 53, where 0 is Monday and 53 is Sunday.\n    '''\n    if date_num6[0]=='1':\n        return 0\n    elif date_num6[0]=='2':\n        return 1\n    elif date_num6[0]=='3':\n        return 2\n    elif date_num6[0]=='4':\n        return 3\n    elif date_num6[0]=='5':\n        return 4\n    elif date_num6[0]=='6':\n        return 5\n    elif date_num6[0]=='7':\n        return 6\n    elif date_num6[0]=='8':\n        return 7\n    elif date_num6[0]=='9':\n        return 8\n    elif date_num6[0]=='10':\n        return 9\n    elif date_num6[0]=='11':\n        return 10\n    elif date_num6[0]=='12':\n        return 11\n    elif date_num6[0]=='13':\n        return 12\n    elif date_num6[0]=='14':\n        return 13\n    elif date_num6[0]=='15':\n        return 14\n    elif date_num6[0]=='16':\n        return 15\n    elif date_num6[0]=='17':\n        return 16\n    elif date_num6[0]=='18':\n        return 17\n    elif date_num6[0]=='19':\n        return 18\n    elif date_num6[0]=='20':\n        return 19\n    elif date_num6[0]=='21':\n        return 20\n    elif date_num6[0]=='22':\n        return 21\n    elif date_num6[0]=='23':\n        return 22\n    elif date_num6[0]=='24':\n        return 23\n    elif date_num6[0]=='25':\n        return 24\n    elif date_num6[0]=='26':\n        return 25\n    elif date_num6[0]=='27':\n        return 26\n    elif date_num6[0]=='28':\n        return 27\n    elif date_num6[0]=='29':\n        return 28\n    elif date_num6[0]=='30':\n        return 29\n    elif date_num6[0]=='31':\n        return 30\n        \ndef date_to_monthno(date_num7):\n    '''\n    Write a function to convert the given date in dd/mm/yyyy format to month number.\n    '''\n    if date_num7[1]=='01':\n        return 1\n    elif date_num7[1]=='02':\n        return 2\n    elif date_num7[1]=='03':\n        return 3\n    elif date_num7[1]=='04':\n        return 4\n    elif date_num7[1]=='05':\n        return 5\n    elif date_num7[1]=='06':\n        return 6\n    elif date_num7[1]=='07':\n        return 7\n    elif date_num7[1]=='08':\n        return 8\n    elif date_num7[1]=='09':\n        return 9\n    elif date_num7[1]=='10':\n        return 10\n    elif date_num7[1]=='11':\n        return 11\n    elif date_num7[1]=='12':\n        return 12\n        \ndef date_to_yearno(date_num8):\n    '''\n    Write a function to convert the given date in dd/mm/yyyy format to year number.\n    '''\n    if date_num8[2]=='01':\n        return 0\n    elif date_num8[2]=='02':\n        return 1\n    elif date_num8[2]=='03':\n        return 2\n    elif date_num8[2]=='04':\n        return 3\n    elif date_num8[2]=='05':\n        return 4\n    elif date_num8[2]=='06':\n        return 5\n    elif date_num8[2]=='07':\n        return 6\n    elif date_num8[2]=='08':\n        return 7\n    elif date_num8[2]=='09':\n        return 8\n    elif date_num8[2]=='10':\n        return 9\n    elif date_num8[2]=='11':\n        return 10\n    elif date_num8[2]=='12':\n        return 11\n        \ndef date_to_webano(date_num9):\n    '''\n    Write a function to convert the given date in dd/mm/yyyy format to week number and weekday number.\n    '''\n    if date_num9[0]=='1':\n        return 1\n    elif date_num9[0]=='2':\n        return 2\n    elif date_num9[0]=='3':\n        return 3\n    elif date_num9[0]=='4':\n        return 4\n    elif date_num9[0]=='5':\n        return 5\n    elif date_num9[0]=='6':\n        return 6\n    elif date_num9[0]=='7':\n        return 7\n    elif date_num9[0]=='8':\n        return 8\n    elif date_num9[0]=='9':\n        return 9\n    elif date_num9[0]=='10':\n        return 10\n    elif date_num9[0]=='11':\n        return 11\n    elif date_num9[0]=='12':\n        return 12\n    elif date_num9[0]="
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if monthnum3 == 1:\n            print(\"31 days in January\")\n        elif monthnum3 == 2:\n            print(\"28 days in February\")\n        elif monthnum3 == 3:\n            print(\"31 days in March\")\n        elif monthnum3 == 4:\n            print(\"30 days in April\")\n        elif monthnum3 == 5:\n            print(\"31 days in May\")\n        elif monthnum3 == 6:\n            print(\"30 days in June\")\n        elif monthnum3 == 7:\n            print(\"31 days in July\")\n        elif monthnum3 == 8:\n            print(\"31 days in August\")\n        elif monthnum3 == 9:\n            print(\"30 days in September\")\n        elif monthnum3 == 10:\n            print(\"31 days in October\")\n        elif monthnum3 == 11:\n            print(\"30 days in November\")\n        else:\n            print(\"31 days in December\")\n    else:\n        print(\"The month number is out of range\")\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n    print(min_diff)\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n    return min_diff\n    \n    #Time complexity : O(n)\n    #Space complexity : O(1)\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    arr = sorted(arr)\n    \n    return min(arr[i+1]-arr[i] for i in range(n-1))\n    \nif __name__ == '__main__':\n    \n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(find_min_diff(arr,n)"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # code here\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        min_diff = min(min_diff,abs(arr[i]-arr[i+1]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=100000\n    arr.sort()\n    for i in range(0,len(arr)-1):\n        diff=abs(arr[i]-arr[i+1])\n        if min_diff>diff:\n            min_diff=diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            min_diff = min(abs(arr[i]-arr[j]),min_diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    m = len(arr) - 1\n    # print(m)\n    # print(arr)\n    min_diff = 1e9\n    if m<0:\n        return -1\n    for i in range(m):\n        for j in range(i+1,m+1):\n            # print(arr[i],arr[j])\n            # print(arr[i] - arr[j])\n            min_diff = min(min_diff, arr[j] - arr[i])\n    # print(min_diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    n = len(arr)\n    \n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[j] - arr[i] < 0:\n                print(arr[i],arr[j])\n                return\n    \nif __name__ == '__main__': \n    arr = [1, 3, -1, 5, -3, 5, -8, -5] \n    n = len(arr) \n    find_min_diff(arr,n) \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    result = arr[1] - arr[0]\n    for i in range(1,len(arr)-1):\n        if result > (arr[i+1] - arr[i]):\n            result = arr[i+1] - arr[i]\n    return result\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = 0\n    min_diff = float('inf')\n    for i in range(0,len(arr)-1):\n        diff = abs(arr[i+1]-arr[i])\n        min_diff = min(diff,min_diff)\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    lst = ['0','1','2','3','4','5','6','7','8','9']\n    count = 0\n    for i in str:\n        if i in lst:\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n    \ndef number_ctr1(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    import re\n    return len(re.findall(r'\\d',str))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - str.count(' ')\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = list(str)\n    counter = 0\n    for i in l:\n        if i.isdigit():\n            counter += 1\n    print(counter)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num += 1\n    return num"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isdigit()):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if not isinstance(str,str):\n        raise TypeError('Input is not a string')\n    if str=='':\n        return 0\n    return len(str)-(str.count('.')+str.count(' '))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    \n    n_elements = 1\n    polite_index = 0\n    k = 2\n    while n_elements < n:\n        polite_index = k\n        n_elements += 1\n        k += 1\n    \n    return polite_index\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n + 2\n    \ndef is_polite2(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if i * (i + 1) > n:\n            return i\n        else:\n            i += 1\n            \ndef is_polite3(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return math.ceil(n ** (1/2))\n    \ndef is_polite4(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 0\n    while True:\n        if i * (i + 1) > n:\n            return i\n        else:\n            i += 1\n            \ndef is_polite5(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if i * (i + 1) > n:\n            return i\n        elif i * (i + 1) <= n:\n            i += 1\n            \ndef is_polite6(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if i * (i + 1) > n:\n            return i\n        elif i * (i + 1) > n:\n            i += 1\n            \ndef is_polite7(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if i * (i + 1) > n:\n            return i\n        elif i * (i + 1) > n:\n            i += 1\n        else:\n            return i\n        \ndef is_polite8(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if i * (i + 1) > n:\n            return i\n        elif i * (i + 1) > n:\n            i += 1\n        elif i * (i + 1) <= n:\n            return i\n        \ndef is_polite9(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if i * (i + 1) > n:\n            return i\n        elif i * (i + 1) > n:\n            i += 1\n        elif i * (i + 1) <= n:\n            return i\n        elif i * (i + 1) <= n:\n            return i\n        \ndef is_polite10(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    while True:\n        if i * (i + 1) > n:\n            return i\n        elif i * (i + 1) > n:\n            i += 1\n        elif i * (i + 1) <= n:\n            return i\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n            i += 1\n        elif i * (i + 1) <= n:\n        "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return is_polite(n-1) + is_polite(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x = 1\n    k = 2\n    while(k<=n):\n        #print(k)\n        x = (x*2)+1\n        k = k + 1\n    return x\n    \ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 1\n    else:\n        return 2*(is_polite(n-1)) + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n*(2*n-1)//2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    res = 0\n    if n == 1: \n        return 1\n    for i in range(2, n + 1): \n        res = res * i + 1\n    return res \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0:\n        return True\n    else:\n        n_=n-1\n        a=1\n        while n_>0:\n            if a==1 or a==2 or a==3 or a==7:\n                a=1\n            else:\n                a=2\n            n_=n_-1\n        return a==1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite(n): \n        if (n <= 0): \n            return False\n        if (n == 1): \n            return True\n        # floor division \n        num = 10 ** math.floor(math.log(n, 10)) \n        pol_num = (n - (num - 1)) / (num - 1) \n        return pol_num == int(pol_num) \n    if (is_polite(n)): \n        return int(pol_num) \n    return -1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    if n == 1: \n        return True\n    pol_num = 1\n    while n > 1: \n        if (pol_num % 7 == 0) or (pol_num % 5 == 0) or (pol_num % 3 == 0): \n            pol_num += 1\n            n -= 1\n        else: \n            pol_num -= 1\n            n -= 1\n    if pol_num == 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    x=[]\n    i=0\n    j=0\n    while i<len(l1)-1:\n        x.append(l1[i:j+1])\n        i=i+1\n        j=j+1\n    return x\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #print(l1)\n    l2=[]\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return(l2)\n    #return([[x,y] for x in l1 for y in l1[x+1:]])\n    #return([[l1[x],l1[x+1]] for x in range(len(l1)-1)])\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i], l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i],l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # # todo\n    # if len(l1) <= 1:\n    #     return\n    # output = []\n    # for i in range(len(l1)-1):\n    #     output.append((l1[i],l1[i+1]))\n    # return output\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pw = []\n    for i in range(len(l1)-1):\n        pw.append([l1[i], l1[i+1]])\n    return pw\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    start = 0\n    end = 1\n    pairs = []\n    while(end <= len(l1)):\n        pairs.append((l1[start],l1[end]))\n        start += 1\n        end += 1\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            pairs.append([l1[i],l1[j]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l=[]\n    for i in range(len(l1)-1):\n        l.append((l1[i],l1[i+1]))\n    return l\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Define global variables\n    count = 0\n    arr = sorted(arr)\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    l = len(arr)\n    count = 0\n    for i in range(l):\n        for j in range(i+1, l):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n    \ndef get_pairs_count_optimized(arr, sum):\n    '''\n    The same as the above function, but this time we can calculate the sum of the elements in the array without any extra space.\n    '''\n    count = 0\n    n = len(arr)\n    s = sum\n    for i in range(n):\n        if arr[i] >= s/2:\n            break\n        if s - arr[i] in arr:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    if len(arr) < 2:\n        return 0\n    i = 0\n    j = len(arr) - 1\n    count = 0\n    while i < j:\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    l1=[]\n    arr.sort()\n    for i in range(len(arr)):\n        j=i+1\n        while(j<len(arr)):\n            if arr[i]+arr[j]==sum:\n                l1.append([arr[i],arr[j]])\n            j=j+1\n    count=0\n    for i in l1:\n        count=count+1\n    return count\ndef find_pairs_count(arr,sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    l1=[]\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                l1.append([arr[i],arr[j]])\n                count=count+1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    from collections import defaultdict\n    \n    count=0\n    d = defaultdict(list)\n    for i in arr:\n        d[i]\n    for i in d:\n        for j in d:\n            if(i+j==sum):\n                count+=1\n    return count\n    \n    \n    \n    \nif __name__ == '__main__':\n    \n    arr = [3, 5, -4, 8, 11, 1, -1, 6]\n    sum = 10\n    # Expected Output: 4\n    print(get_pairs_count(arr, sum))\n    \n    '''\n    2\n    '''"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    no_of_pairs = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                no_of_pairs +=1\n                print(arr[i],arr[j])\n    return no_of_pairs"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    count = 0\n    arr.sort()\n    n = len(arr)\n    low = 0\n    high = n - 1\n    \n    while(low <= high):\n        if arr[low] + arr[high] == sum:\n            count += 1\n            low += 1\n        elif arr[low] + arr[high] < sum:\n            low += 1\n        else:\n            high -= 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    return(list(set(li1).difference(set(li2))))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    final_list = []\n    for item in li1:\n        if item not in li2:\n            final_list.append(item)\n    return final_list\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1 = list(li1)\n    li2 = list(li2)\n    li3 = li1.copy()\n    for val in li3:\n        if val in li2:\n            li1.remove(val)\n    return li1\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = list(set(li1)-set(li2))\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    for i in li2:\n        if i not in li1:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = []\n    for item in li1:\n        if item not in li2:\n            li_dif.append(item)\n    for item in li2:\n        if item not in li1:\n            li_dif.append(item)\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            li3.append(li1[i])\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = []\n    for i in li1:\n        if i not in li2:\n            li_diff.append(i)\n    return li_diff\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #li1 = set(li1)\n    #li2 = set(li2)\n    #return (li1-li2,li2-li1)\n    return (list(li1-li2),list(li2-li1))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1,n+1,2)])\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        if(i%2!=0):\n            sum=sum+i**4\n    return sum\n    \ndef odd_num_sum_v2(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        if(i%2!=0):\n            sum=sum+i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if (i%2!=0):\n            sum = sum + i**4\n    print(sum)\nodd_num_sum(10)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum = sum + i**4\n    print(sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total=0\n    for i in range(1,n+1,2) :\n        total+=i**4\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    def sum_of_n_odd(n) : \n        '''\n        Write a python function to find sum of nth natural numbers\n        '''\n        n_sum = 0 \n        n = int(input(\"Enter n : \"))\n        for i in range(1,n+1) : \n            if i % 2!= 0 : \n                n_sum += i**2\n        print(f\"Sum of nth natural numbers {n} is : {n_sum}\")\n        return n_sum\n    sum_of_n_odd(n)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = (n*(n+1))//2\n    return odd_num**4\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1) if i%2 == 1])\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    for i in range(1,n+1):\n        if i%2 == 1:\n            odd_nums.append(i)\n    return sum(odd_nums)\nprint(odd_num_sum(5))\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    opening_parenthesis = []\n    closing_parenthesis = []\n    for c in exp:\n        if c == '(':\n            opening_parenthesis.append(c)\n        if c == ')':\n            closing_parenthesis.append(c)\n    \n    if len(opening_parenthesis)!= len(closing_parenthesis):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if not exp: return True\n    queue = deque()\n    for ch in exp:\n        if ch == \"(\": queue.append(ch)\n        elif ch == \")\":\n            if len(queue) == 0: return False\n            queue.pop()\n    return True if len(queue) == 0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    pair = {\n    \"(\": \")\",\n    \"{\": \"}\",\n    \"[\": \"]\",\n    \"<\": \">\"\n    }\n    for i in exp:\n        if i in pair:\n            stack.append(pair[i])\n        elif i in pair.values():\n            if len(stack) == 0:\n                return False\n            if stack[len(stack)-1] == i:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ('(', '{', '['):\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char == ')':\n                if top!= '(':\n                    return False\n            if char == ']':\n                if top!= '[':\n                    return False\n            if char == '}':\n                if top!= '{':\n                    return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    left_par = {'(': 0, '{': 0, '[': 0}\n    right_par = {')': 0, '}': 0, ']': 0}\n    paren_map = {'(': ')', '{': '}', '[': ']',\n                 ')': '(', '}': '{', ']': '['}\n    queue = deque(exp)\n    \n    while queue:\n        t = queue.popleft()\n        if t in '({[':\n            stack.append(t)\n        elif t in ')}]':\n            if len(stack) == 0:\n                return False\n            elif right_par[paren_map[stack.pop()]] == left_par[t]:\n                continue\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    pairs = {'(':')', '{':'}', '[':']'}\n    for c in exp:\n        if c in '({[':\n            stack.append(c)\n        else:\n            if stack and pairs[c] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n    return False if stack else True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    expr_list = []\n    for char in exp:\n        if char in ['(', '{', '[']:\n            expr_list.append(char)\n        else:\n            if len(expr_list) == 0:\n                return False\n            else:\n                expr_list.pop()\n    if len(expr_list) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == \"\":\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    brackets = {'(':')','{':'}','[':']'}\n    for char in exp:\n        if char in brackets.keys():\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if brackets[stack.pop()]!= char:\n                return False\n    return len(stack)==0\ndef check_expression_using_stack(exp):\n    '''\n    We can use stack to check if the expression is balanced or not\n    '''\n    if exp == None or len(exp) == 0:\n        return True\n    stack = deque()\n    brackets = {'(':')','{':'}','[':']'}\n    for char in exp:\n        if char in brackets.keys():\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if brackets[stack.pop()]!= char:\n                return False\n    if len(stack) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left_p = {\"(\":\")\", \"{\":\"}\", \"[\":\"]\"}\n    bracket_pair = {\")\":\"(\", \"}\":\"{\", \"]\":\"[\"}\n    stack = []\n    for i in exp:\n        if i in left_p:\n            stack.append(i)\n        elif i in bracket_pair:\n            if len(stack) == 0 or bracket_pair[i]!= stack.pop():\n                return False\n    return True\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    \n    \n    # i, j = 0, 0\n    # while i < len(test_str):\n    #     j = i\n    #     while j < len(test_str) and len(test_str[i:j+1]) < K:\n    #         j += 1\n    #     if j!= i:\n    #         test_str = test_str[:i] + test_str[j:]\n    #     i = j\n    # return test_str\n    \n    \n    while True:\n        i, j = 0, 0\n        while i < len(test_str):\n            j = i\n            while j < len(test_str) and len(test_str[i:j+1]) < K:\n                j += 1\n            if j!= i:\n                test_str = test_str[:i] + test_str[j:]\n            i = j\n        if i == len(test_str):\n            break\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    #if K == 0:\n        #return test_str\n    #elif len(test_str) > 0:\n        #test_str = test_str.replace(test_str[0:K],\"\")\n        #return remove_length(test_str,K-1)\n    #else:\n        #return \"\"\n    \n    #Solution 2:\n    \n    return test_str[K:] if K < len(test_str) else \"\"\n    \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    if K == 0:\n        return test_str\n    if test_str == \"\":\n        return test_str\n    if len(test_str) > 0:\n        if len(test_str) < K:\n            test_str = test_str.replace(test_str[0:len(test_str)],\"\")\n            return remove_length(test_str,K-1)\n        else:\n            test_str = test_str[0:K]\n            return remove_length(test_str,K-1)\n    else:\n        return \"\"\n    \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    if len(test_str) == 0:\n        return test_str\n    if len(test_str) == 1:\n        return \"\"\n    if len(test_str) > 0 and len(test_str) < K:\n        if len(test_str) == K:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n        else:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n    elif len(test_str) > 0 and len(test_str) == K:\n        return \"\"\n    else:\n        return test_str\n        \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    if len(test_str) == 0:\n        return test_str\n    if len(test_str) == 1:\n        return \"\"\n    if len(test_str) > 0 and len(test_str) < K:\n        if len(test_str) == K:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n        else:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n    elif len(test_str) > 0 and len(test_str) == K:\n        return \"\"\n    else:\n        return test_str\n        \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    if len(test_str) == 0:\n        return test_str\n    if len(test_str) == 1:\n        return \"\"\n    if len(test_str) > 0 and len(test_str) < K:\n        if len(test_str) == K:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n        else:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n    elif len(test_str) > 0 and len(test_str) == K:\n        return \"\"\n    else:\n        return test_str\n        \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    if len(test_str) == 0:\n        return test_str\n    if len(test_str) == 1:\n        return \"\"\n    if len(test_str) > 0 and len(test_str) < K:\n        if len(test_str) == K:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n        else:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n    elif len(test_str) > 0 and len(test_str) == K:\n        return \"\"\n    else:\n        return test_str\n        \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    if len(test_str) == 0:\n        return test_str\n    if len(test_str) == 1:\n        return \"\"\n    if len(test_str) > 0 and len(test_str) < K:\n        if len(test_str) == K:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n        else:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n    elif len(test_str) > 0 and len(test_str) == K:\n        return \"\"\n    else:\n        return test_str\n        \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    if len(test_str) == 0:\n        return test_str\n    if len(test_str) == 1:\n        return \"\"\n    if len(test_str) > 0 and len(test_str) < K:\n        if len(test_str) == K:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n        else:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n    elif len(test_str) > 0 and len(test_str) == K:\n        return \"\"\n    else:\n        return test_str\n        \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    if len(test_str) == 0:\n        return test_str\n    if len(test_str) == 1:\n        return \"\"\n    if len(test_str) > 0 and len(test_str) < K:\n        if len(test_str) == K:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n        else:\n            test_str = test_str.replace(test_str[0:K],\"\")\n            return remove_length(test_str,K-1)\n    elif len(test_str) > 0 and len(test_str) == K:\n        return \"\"\n    else:\n        return test_str\n        \ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #Solution 1:\n    \n    if len(test_str) == 0:\n        return test_str\n    if len(test_str) == 1:\n        return \"\"\n    if len(test_str) > 0 and len(test_str) < K:\n        if len(test_str) == K:\n            test_str = test_str"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split()\n    final_list = []\n    for i in range(0, len(str_list)):\n        if len(str_list[i])!= K:\n            final_list.append(str_list[i])\n    final_str =''.join(final_list)\n    return final_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not test_str or not isinstance(K, int):\n        raise Exception(\"Invalid input\")\n    if K < 0:\n        raise Exception(\"Invalid input\")\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words_copy = words.copy()\n    lengths = {}\n    for word in words:\n        if len(word) in lengths:\n            lengths[len(word)].append(word)\n        else:\n            lengths[len(word)] = [word]\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Return the cleaned string.\n    result = \"\"\n    length = 0\n    for char in test_str:\n        if length < K:\n            if char == \" \":\n                length += 1\n            else:\n                length += 1\n                result += char\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    ans = \"\"\n    for i in test_str.split():\n        if len(i) == K:\n            continue\n        else:\n            ans += i + \" \"\n    return ans\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = test_str.split(' ')\n    new_str = ''\n    for word in word_list:\n        if len(word)!= K:\n            new_str += word +''\n    return new_str.strip()\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    s = ''\n    for w in test_str.split(' '):\n        if len(w)!= K:\n            s += w +''\n    return s.strip()\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    import re\n    test_str = re.sub(r'\\W+','', test_str)\n    test_str = test_str.split()\n    result = []\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            result.append(test_str[i])\n    result =''.join(result)\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurances = re.finditer(pattern,text)\n    for occurance in occurances:\n        print(occurance.start(),\"\\t\",occurance.end(),\"\\t\",occurance.group())\ndef remove_substring(string):\n    '''\n    Write a function to remove a substring from a string, if it exists. Return None if no match.\n    '''\n    print(string[:3] + string[4:] if string.find(\"chick\") > -1 else print(\"No substring found in the string\"))\n    \ndef remove_substring_variant_1(string):\n    '''\n    Write a function to remove a substring from a string, if it exists. Return None if no match.\n    '''\n    if string.find(\"chick\") > -1:\n        return string[:3] + string[4:]\n    else:\n        return None\n    \ndef remove_substring_variant_2(string):\n    '''\n    Write a function to remove a substring from a string, if it exists. Return None if no match.\n    '''\n    if string.find(\"chick\") > -1:\n        return string.replace(\"chick\",\"\")\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern=pattern.strip()\n    pattern=re.escape(pattern)\n    return re.findall(pattern,text)\n    \nprint(occurance_substring(\"abcdabcdabcd\",'ab'))\nprint(occurance_substring(\"abcdefg\",'ab'))\nprint(occurance_substring(\"abcdabcdabcd\",'abcd'))\nprint(occurance_substring(\"abcdabcdabcd\",'ad'))\nprint(occurance_substring(\"abcdabcdabcd\",'d'))\nprint(occurance_substring(\"abcdefgh\",'d'))\nprint(occurance_substring(\"abcdefgh\",'f'))\nprint(occurance_substring(\"abcdefgh\",'g'))\nprint(occurance_substring(\"abcdefgh\",'fgh'))\nprint(occurance_substring(\"abcdefgh\",'gh'))\nprint(occurance_substring(\"abcdefgh\",'b'))\nprint(occurance_substring(\"abcdefgh\",'h'))\nprint(occurance_substring(\"abcdefgh\",'hg'))\nprint(occurance_substring(\"abcdefgh\",'fghg'))\nprint(occurance_substring(\"abcdefgh\",'gfgh'))\nprint(occurance_substring(\"abcdefgh\",'bgh'))\nprint(occurance_substring(\"abcdefgh\",'hgf'))\nprint(occurance_substring(\"abcdefgh\",'hf'))\nprint(occurance_substring(\"abcdefgh\",'efgh'))\nprint(occurance_substring(\"abcdefgh\",'efh'))\nprint(occurance_substring(\"abcdefgh\",'ghf'))\nprint(occurance_substring(\"abcdefgh\",'gh'))\nprint(occurance_substring(\"abcdefgh\",'ghefg'))\nprint(occurance_substring(\"abcdefgh\",'ghfgh'))\nprint(occurance_substring(\"abcdefgh\",'ghgf'))\nprint(occurance_substring(\"abcdefgh\",'ghfghg'))\nprint(occurance_substring(\"abcdefgh\",'ghgfghfgh'))\nprint(occurance_substring(\"abcdefgh\",'ghgfghfghghg'))\nprint(occurance_substring(\"abcdefgh\",'ghgfghfghghghghghghg'))\nprint(occurance_substring(\"abcdefgh\",'ghgfghfghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghg"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=[]\n    i=0\n    j=0\n    while i<len(text) and j<len(pattern):\n        if text[i]==pattern[j]:\n            i+=1\n            j+=1\n        else:\n            j=0\n            i+=1\n        if j==len(pattern):\n            result.append((i-len(pattern),i))\n    return result\ndef first_repeat(text):\n    '''\n    Write a function to find the first occurrence of a substring within a string.\n    Return None if there is no match.\n    '''\n    if not text:\n        return None\n    sub=text[0]\n    i=1\n    while i<len(text):\n        if text[i]==sub:\n            i+=1\n        else:\n            i=0\n        if i==len(text):\n            return sub\n    return None\ndef is_one_away(str1,str2):\n    '''\n    Write a function to check if two strings are one edit distance apart.\n    Return True if they are one edit distance apart, False otherwise.\n    '''\n    if len(str1)==len(str2) and str1==str2:\n        return True\n    if abs(len(str1)-len(str2))==1:\n        return False\n    if len(str1)!=len(str2):\n        return False\n    if str1==str2:\n        return True\n    i=0\n    j=0\n    str1=str1[::-1]\n    str2=str2[::-1]\n    while i<len(str1) and j<len(str2):\n        if str1[i]==str2[j]:\n            i+=1\n            j+=1\n        else:\n            return False\n        if j==len(str2):\n            return True\n    return True\ndef merge_the_tools(string, k):\n    '''\n    Write a function that takes a string and an integer k,\n    and then splits the string into k pieces by inserting k-1 spaces between each piece.\n    For example, if k=3, and the input string is \u201chello world\u201d, the output should be \u201co de wo\u201d\n    '''\n    a=len(string)\n    result=\"\"\n    for i in range(0,a,k):\n        result+=string[i:i+k] + \" \"\n    print(result)\ndef alphanumeric_table(text):\n    '''\n    Write a function to find all the alphanumeric characters and the position of them within a string.\n    The function should return a list of tuples, each tuple containing the alphanumeric character,\n    and its corresponding position in the string.\n    '''\n    result=[]\n    for i in range(len(text)):\n        if re.match(r'[a-zA-Z0-9]',text[i]):\n            result.append((text[i],i))\n    return result\ndef unique_paths(m,n):\n    '''\n    Write a function that finds the unique number of ways you can walk in a grid of m rows and n columns.\n    If the number of rows or the number of columns is not a whole number,\n    then return -1, as there will be problems with the grid.\n    '''\n    if m==0 or n==0:\n        return 0\n    if m%2==0:\n        if n%2==0:\n            return unique_paths(m-1,n) + unique_paths(m,n-1)\n        else:\n            return unique_paths(m-1,n)\n    else:\n        if n%2==0:\n            return unique_paths(m,n-1)\n        else:\n            return unique_paths(m-1,n)\ndef longest_common_prefix(str1,str2):\n    '''\n    Write a function that finds the longest common prefix for two strings.\n    Return an empty string if there is no common prefix.\n    '''\n    if not str1 and not str2:\n        return \"\"\n    if not str1:\n        return str2[0]\n    if not str2:\n        return str1[0]\n    i=0\n    j=0\n    while i<len(str1) and j<len(str2):\n        if str1[i]==str2[j]:\n            i+=1\n            j+=1\n        else:\n            return str1[:i]\n    return str1[:i]\ndef is_binary(num):\n    '''\n    Write a function that takes a number, and return True if the number is a binary number,\n    otherwise return False.\n    '''\n    if num<=0 or num%2==0:\n        return False\n    while num>1:\n        num=num/2\n    return True\ndef sum_the_squares(arr):\n    '''\n    Write a function that takes an array and returns the sum of the squares of each element.\n    '''\n    result=0\n    for i in arr:\n        result+=i**2\n    return result\ndef is_valid(s):\n    '''\n    Write a function that takes a string and returns True if it is a correct password,\n    or False if it is not.\n    '''\n    if len(s)<8 or len(s)>16:\n        return False\n    if s.islower()==False or s.isupper()==False or s.isdigit()==False:\n        return False\n    d={'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for i in s:\n        d[i]=d[i]+1\n    for i in range(len(d)):\n        if d[i]==1:\n            return False\n    return True\ndef is_palindrome(num):\n    '''\n    Write a function that takes a positive integer and returns True if the integer is a palindrome,\n    otherwise return False.\n    '''\n    if num<=0:\n        return False\n    if num<10:\n        return True\n    x=str(num)\n    i=0\n    j=len(x)-1\n    while i<j:\n        if x[i]!=x[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ndef change_numbers(numbers):\n    '''\n    Write a function that takes an array of numbers, and returns the number of pairs of adjacent elements with the same sign.\n    Return 0 if there is no such pair.\n    '''\n    if len(numbers)<=1:\n        return 0\n    if numbers[0]>0 and numbers[-1]<0:\n        return 0\n    count=0\n    i=0\n    j=1\n    while i<len(numbers)-1:\n        if numbers[i]>0 and numbers[j]<0:\n            count+=1\n            i+=1\n            j+=1\n        elif numbers[i]<0 and numbers[j]>0:\n            count+=1\n            i+=1\n            j+=1\n        else:\n            i+=1\n            j+=1\n    return count\ndef single_number(nums):\n    '''\n    Write a function that takes an array of numbers, and returns the single number in that array.\n    Return None if there is no single number in the array.\n    '''\n    if not nums:\n        return None\n    nums.sort()\n    if nums.count(nums[0])==len(nums):\n        return None\n    else:\n        return nums[0]\ndef single_number_2(nums):\n    '''\n    Write a function that takes an array of numbers and returns a sorted list of the unique numbers in the array.\n    Return [] if there are no unique numbers in the array.\n    '''\n    if not nums:\n        return []\n    nums.sort()\n    d={}\n    for i in nums"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_length=len(pattern)\n    for i in range(len(text)-pattern_length+1):\n        if text[i:i+pattern_length]==pattern:\n            return i\n        if i==len(text)-pattern_length:\n            return None\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    result = re.search(pattern,text)\n    if result == None:\n        return None\n    else:\n        \n        return result.span()\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i = 0\n    #pattern_index = len(pattern)\n    #find the index of substring pattern\n    index = -1\n    for i in range(len(text)):\n        j = 0\n        while j < len(pattern):\n            if text[i+j]!= pattern[j]:\n                break\n            j+=1\n            if j == len(pattern):\n                index = i\n                break\n    if index!= -1:\n        return index\n    else:\n        return None\ndef occurance_substring_start(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i = 0\n    #pattern_index = len(pattern)\n    #find the index of substring pattern\n    index = -1\n    for i in range(len(text)):\n        j = 0\n        while j < len(pattern):\n            if text[i+j]!= pattern[j]:\n                break\n            j+=1\n            if j == len(pattern):\n                index = i\n                break\n    if index!= -1:\n        return index\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) < len(pattern):\n        return None\n    m = 0\n    occurences = []\n    count = 0\n    while m < len(text)-len(pattern)+1:\n        if text[m:m+len(pattern)] == pattern:\n            occurences.append(m)\n            m = m+len(pattern)\n        else:\n            m = m+1\n    if len(occurences) == 0:\n        return None\n    else:\n        return occurences\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=[]\n    if not text or not pattern:\n        return result\n    if len(pattern)>len(text):\n        return None\n    start=0\n    while start<len(text):\n        if text.find(pattern,start)==start:\n            result.append([start,start+len(pattern)-1])\n            start+=len(pattern)\n        else:\n            start+=1\n    return result\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    odd_list = []\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            odd_list.append(nums[i])\n    if len(odd_list) == 0:\n        print(\"Given list does not contain odd numbers.\")\n    else:\n        print(odd_list)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(num % 2!= 0 for i, num in enumerate(nums) if i % 2!= 0)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            if nums[i] % 2 == 1:\n                return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # your code here\n    check = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            if nums[i] % 2!= 0:\n                check += 1\n    if check == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if (i%2 == 0):\n            print(nums[i], end=\"\")\n    print()\nodd_position(nums)"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum([1 for i in range(len(test_str)) if test_str[i] in 'aeiouAEIOU'])\n    \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    c = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            for j in range(i + 1, len(test_str)):\n                if test_str[j] == test_str[i]:\n                    c += 1\n    return c\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    d = {}\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in test_str:\n        if i in vowels:\n            d[i] = d.get(i, 0) + 1\n    return d\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    i = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiou':\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in test_str:\n        if i in vowels:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i - 1] in vowels:\n                count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for vowel in vowels:\n        count += test_str.count(vowel)\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    d = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0, 'A': 0, 'E': 0, 'I': 0, 'O': 0, 'U': 0}\n    if len(test_str) < 2:\n        return 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiouAEIOU':\n            d[test_str[i]] += 1\n    return d\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                continue\n            else:\n                return arr[i] + arr[j]\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #Arr = arr.split()\n    #print (Arr)\n    #sum_arr = set(Arr)\n    sum_arr = []\n    for i in arr:\n        if i not in sum_arr:\n            sum_arr.append(i)\n    print(sum(sum_arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    nums = set()\n    for i in arr:\n        if i in nums:\n            continue\n        else:\n            nums.add(i)\n            print(i)\n            \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #code here\n    total = 0\n    set_of_numbers = set()\n    for number in arr:\n        if number in set_of_numbers:\n            continue\n        total += number\n        set_of_numbers.add(number)\n    return total\n    "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = set(arr)\n    n = len(s)\n    return n * (n+1) / 2 - sum(s)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr is None or len(arr) == 0:\n        return None\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n            sum += arr[i]\n    return sum\nprint('Sum of non-repeated elements in a given list:', find_sum([5, 5, 5, 7, 7, 5, 5]))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    # arr = [1, 4, 1, 5, 2, 2, 6, 6]\n    # arr = [1, 1, 1, 1, 1]\n    \n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    arr = [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] == arr[j]:\n                break\n            else:\n                sum = sum + arr[i]\n    print(sum)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if(len(list1) < 2):\n        return list1\n    if(list1[0] == list1[1]):\n        return pack_consecutive_duplicates(list1[1:]) + [[list1[0]]]\n    return pack_consecutive_duplicates(list1[1:]) + [[list1[0]]] + pack_consecutive_duplicates(list1[2:])\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_of_lists = []\n    new_list = []\n    for ele in list1:\n        if ele in new_list:\n            new_list = new_list[1:]\n            list_of_lists.append(new_list)\n            new_list = []\n        else:\n            new_list.append(ele)\n    list_of_lists.append(new_list)\n    return list_of_lists\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    list1.sort()\n    for k,g in groupby(list1):\n        res.append(list(g))\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # i = 0\n    # while i < len(list1) - 1:\n    #     if list1[i] == list1[i+1]:\n    #         i += 1\n    #         continue\n    #     else:\n    #         j = i + 1\n    #         sublist = list1[i]\n    #         while j < len(list1) and list1[j] == sublist:\n    #             j += 1\n    #         sublist_1 = list1[i:j]\n    #         print(sublist_1)\n    #         i = j\n    #         continue\n    i = 0\n    list1 = list(set(list1))\n    while i < len(list1) - 1:\n        sublist = list1[i]\n        j = i + 1\n        while j < len(list1) and list1[j] == sublist:\n            j += 1\n        sublist_1 = list1[i:j]\n        i = j\n        if len(sublist_1) > 1:\n            list1.remove(sublist)\n        else:\n            i += 1\n            continue\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    sublists = []\n    for key, group in groupby(list1):\n        if key == '':\n            result.append(list(group))\n        else:\n            sublists.append(list(group))\n    for i in range(len(sublists)):\n        if i == len(sublists) - 1:\n            result.append(sublists[i])\n        else:\n            result.append(sublists[i])\n            result.append([])\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    ans=[]\n    for k,g in groupby(list1):\n        ans.append(list(g))\n    return ans\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) < 2:\n        return list1\n    else:\n        my_list = []\n        my_list.append(list1[0])\n        my_list.append(list1[1])\n        for i in range(2, len(list1)):\n            if list1[i]!= list1[i-1]:\n                my_list.append(list1[i])\n        return my_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    for key,group in groupby(list1):\n        if key==None:\n            continue\n        if len(list(group)) > 1:\n            yield [key] + list(group)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_final = []\n    for elem,group in groupby(list1):\n        list_final.append(list(group))\n    return list_final\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_2(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_3(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_4(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_5(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_6(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_7(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_8(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_9(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_10(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_11(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_12(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_13(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_14(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_15(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_16(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_17(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    \n    for i in list1:\n        if i not in count.keys():\n            count[i] = 1\n        else:\n            count[i] += 1\n            \n    return count\n    \n    \ndef unique_sublists_18(list"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for item in list1:\n        result[tuple(item)] = result.get(tuple(item), 0) + 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) in result:\n            result[tuple(list1[i])] += 1\n        else:\n            result[tuple(list1[i])] = 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_of_lists = []\n    unique_lists = []\n    dict_list = {}\n    for i in list1:\n        if i not in list_of_lists:\n            list_of_lists.append(i)\n        else:\n            unique_lists.append(i)\n    for unique_list in unique_lists:\n        dict_list[tuple(unique_list)] = list1.count(unique_list)\n    return dict_list\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        d.setdefault(tuple(i), 0)\n        d[tuple(i)] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for i in range(len(list1)):\n        tuple_list = tuple(list1[i])\n        if tuple_list not in dictionary:\n            dictionary[tuple_list] = 1\n        else:\n            dictionary[tuple_list] += 1\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) <= 0:\n        return 0\n    elif len(list1) == 1:\n        return 1\n    else:\n        lst = []\n        for i in range(len(list1)):\n            lst.append(list1[i])\n        tuple_lst = tuple(lst)\n        n = {}\n        for i in range(len(list1)):\n            if tuple_lst not in n:\n                n[tuple_lst] = 1\n            else:\n                n[tuple_lst] += 1\n        return n\nprint(unique_sublists([[1],2,[3],4,5,6,7,8]))"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lst = []\n    for l in list1:\n        if l in lst:\n            lst.append(tuple(l))\n        else:\n            lst.append(tuple(l))\n    dct = {}\n    for x in lst:\n        if x in dct:\n            dct[x] += 1\n        else:\n            dct[x] = 1\n    return dct\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    res = {}\n    for i in list1:\n        res[i] = 0\n        for j in list1:\n            if i == j:\n                res[i] += 1\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # all_combinations = []\n    all_combinations = set()\n    for i in range(1, len(test_list) + 1):\n        all_combinations.update(combinations(test_list, i))\n    print(all_combinations)\n    return all_combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    res = []\n    combs = combinations(test_list,2)\n    # print(combs)\n    for i,j in combs:\n        res.append(tuple([i,j]))\n    # print(res)\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1,len(test_list)+1):\n        combinations(test_list,i)\n    return combinations(test_list,i)\n    \ntest_list = [(10,20,30,40,50),(100,200,300,400,500),(500,600,700,800,900)]\nprint(find_combinations(test_list))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i][1]+test_list[j][1] == 0):\n                combinations.append(sorted([test_list[i][0], test_list[j][0]]))\n    return combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in combinations(test_list, 3):\n        if sum(i)==15:\n            return i\n    return \"no combination found\"\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in combinations(test_list, 3):\n        #print(i)\n        combinations_list.append(i)\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1,len(test_list)):\n        for val in combinations(test_list,i):\n            result.append(val)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # iterate over given list\n    for i in range(len(test_list)):\n        # check if current tuple is a subset of another tuple in the list\n        for j in range(i + 1, len(test_list)):\n            if is_subset(test_list[i], test_list[j]):\n                print(test_list[i], test_list[j])\n                return True\n    return False\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    test_list = [(1,2),(2,3),(4,5),(8,9)]\n    # output = {((1, 2), (2, 3), (4, 5)), ((1, 2), (2, 3)), ((1, 2), (4, 5)), ((1, 2), (4, 5)), ((1, 2), (8, 9)), ((1, 2), (4, 5)), ((1, 4), (2, 3)), ((1, 2), (3, 5)), ((1, 4), (2, 3)), ((1, 4), (3, 5)), ((1, 2), (4, 5)), ((1, 4), (2, 3), (3, 5)), ((1, 2), (3, 5)), ((1, 4), (2, 3)), ((1, 4), (3, 5)), ((1, 2), (4, 5)), ((1, 4), (2, 3), (3, 5)), ((1, 4), (3, 5)), ((1, 2), (4, 5)), ((1, 2), (3, 5)), ((1, 4), (2, 3), (3, 5)), ((1, 4), (3, 5))}\n    return combinations(test_list,2)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) : \n        return False\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            count += 2\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = set()\n    for i in range(1, n) : \n        if n % i == 0 : \n            divisors.add(i) \n    return len(divisors) \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 1\n    for i in range(2,int(math.sqrt(n)+1)) :\n        if n % i == 0 :\n            count += 2\n    if n % 2 == 0 :\n        count -= 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n > 1: \n        num = 1\n        count = 0\n        while num <= n: \n            if n % num == 0: \n                count = count + 1\n            num = num + 1\n        return count\n    else:\n        return 0\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    divisors = 0\n    while i <= math.sqrt(n) :\n        if n%i == 0 :\n            divisors += 1\n            if i == math.sqrt(n):\n                divisors += 1\n            if i!= n:\n                divisors += 2\n        i += 1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = int(math.sqrt(n))\n    divisors = 1\n    for i in range(2,a+1) : \n        if n % i == 0 : \n            divisors += 1\n    return divisors\n    \n    \ndef sum_digit(n) :\n    '''\n    Write a python function to check whether the sum of digits in the given number is odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-22.php\n    '''\n    if n == 0 :\n        return True\n    n = str(n)\n    sum = 0\n    for i in range(len(n)) : \n        sum += int(n[i])\n    if sum % 2 == 0 :\n        return False\n    else :\n        return True\n    \n    \ndef sum_even(n) :\n    '''\n    Write a python function to check whether the sum of even digits in the given number is less than 10. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n == 0 :\n        return True\n    n = str(n)\n    sum = 0\n    for i in range(len(n)) : \n        if int(n[i]) % 2 == 0 : \n            sum += int(n[i])\n    return sum < 10\n    \n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether the given number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 : \n        return False\n    i = 3\n    while i * i <= n : \n        if n % i == 0 : \n            return False\n        i += 2\n    return True\n    \n    \ndef is_prime_v2(n) :\n    '''\n    Write a python function to check whether the given number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n == 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 : \n        return False\n    for i in range(3,math.floor(math.sqrt(n)) + 1,2) : \n        if n % i == 0 : \n            return False\n    return True\n    \n    \ndef count_of_prime_numbers(n) : \n    '''\n    Write a python function to check whether the count of prime numbers in the range 1 to n are even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    cnt = 0\n    for i in range(1,n+1) : \n        if is_prime_v2(i) : \n            cnt += 1\n    return cnt\n    \n    \ndef divisors_sum(n) : \n    '''\n    Write a python function to check whether the sum of the divisors of the given number is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    sum = 1\n    for i in range(2,math.ceil(math.sqrt(n))+1) : \n        if n % i == 0 : \n            sum += i\n            sum += n//i\n    return sum == n\n    \n    \ndef prime_factors(n) : \n    '''\n    Write a python function to find the prime factors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    s = n\n    if s == 1 : \n        return 1\n    i = 2\n    while i * i <= n : \n        if s % i == 0 : \n            while s % i == 0 : \n                s //= i\n            s = s // i\n        i += 1\n    if s > 1 : \n        return s\n    else : \n        return 1\n    \n    \ndef prime_factors_v2(n) : \n    '''\n    Write a python function to find the prime factors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    s = n\n    if s == 1 : \n        return 1\n    while s % 2 == 0 : \n        s = s // 2\n    i = 3\n    while i <= math.floor(math.sqrt(n)) : \n        if i > math.floor(math.sqrt(n)) : \n            return s\n        while n % i == 0 : \n            n = n // i\n        i += 2\n    return s\n    \n    \ndef prime_factors_v3(n) : \n    '''\n    Write a python function to find the prime factors of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    factors = 1\n    while n > 1:\n        prime_factors = prime_factors_v2(n)\n        if prime_factors == 1:\n            factors *= prime_factors\n            break\n        else:\n            factors *= prime_factors\n            n //= prime_factors\n    return factors\n    \n    \ndef k_th_prime(n,k) : \n    '''\n    Write a python function to find the k-th prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    primes = []\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            while n % i == 0:\n                n //= i\n            primes.append(i)\n        i += 1\n    return primes[k-1]\n    \n    \ndef k_th_prime_v2(n,k) : \n    '''\n    Write a python function to find the k-th prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    primes = []\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            while n % i == 0:\n                n //= i\n            primes.append(i)\n        i += 1\n    return primes[k-1]\n    \n    \ndef k_th_prime_v3(n,k) : \n    '''\n    Write a python function to find the k-th prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-39.php\n    '''\n    primes = []\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            while n % i == 0:\n                n //= i\n            primes.append(i)\n        i += 1\n    return primes[k-1]\n    \n    \ndef sum_of_k_primes(n,k) : \n    '''\n    Write a python function to find the sum of the k-th prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-40.php\n    '''\n    primes = []\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            while n % i == 0:\n                n //= i\n            primes.append(i)\n        i += 1\n    return primes[k-1]\n    \n    \ndef sum_of_k_primes_v2(n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) :\n        if n % i == 0 :\n            count = count + 1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for x in range(1, n + 1) : \n        if n % x == 0 : \n            divisors = divisors + 1\n    if divisors == 2 : \n        return True\n    return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1,n):\n        if(n%i==0):\n            sum += i\n    if(sum%2==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #arr = [10, 11, 22, 33]\n    #length = 4\n    #ans = 36\n    #for i in range(1, length):\n    #    ans += arr[i]\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) < 2: return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # code here\n    total=0\n    for i in range(0,len(arr)-2):\n        if(i==0 or arr[i]!=arr[i-1]):\n            for j in range(i+1,len(arr)):\n                if(j==len(arr)-1 or arr[j]!=arr[j+1]):\n                    total+=arr[j]\n    print(total)\nodd_length_sum(arr)"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Python3 code to find sum of all\n    # odd length subarrays\n    def findSum(arr, n):\n        sum = 0\n        for i in range(0, n):\n            sum += arr[i]\n            if i % 2!= 0:\n                continue\n            else:\n                sum += arr[i]\n        return sum\n    \n    \n    # Driver Code\n    arr = [1, 4, 6, 3, 2, 5, 6]\n    n = len(arr)\n    print(\"Sum of all Odd length subarrays:\",\n                    findSum(arr, n))\n    \n    \n    '''\n    Write a python function to sum all the items in the \n    linked list and return the sum.\n    '''\n    # Python3 code to find sum of all\n    # nodes in the linked list\n    # Node class\nclass Node:\n    # Constructor to initialize\n    # the node object\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n    # Function to insert a new node at the beginning\n    def push(self, new_data):\n        # Create a new node\n        new_node = Node(new_data)\n        # Make next of new Node as head\n        new_node.next = self.head\n        # Move the head to point to new Node\n        self.head = new_node\n    # This function is in LinkedList class. Inserts a\n    # new node at the end. This method is  defined inside\n    # LinkedList class shown above */\n    def insert_at_end(self, data):\n        # Create a new node\n        new_node = Node(data)\n        # If linked list is empty, then make the\n        # new node as head\n        if self.head == None:\n            self.head = new_node\n            return\n        # Locate the last node\n        last = self.head\n        while(last.next):\n            last = last.next\n        # Set the next of last node\n        last.next = new_node\n    # Utility function to print the linked LinkedList\n    def printList(self):\n        temp = self.head\n        while(temp):\n            print temp.data,\n            temp = temp.next\n    # Iterative Method to print Linked List\n    def printListIterative(self, node):\n        temp = node\n        while (temp):\n            print temp.data,\n            temp = temp.next\n    # Function to find length of Linked List */\n    def length(self):\n        # Initialize temp\n        temp = self.head\n        # Count the number of nodes\n        count = 0\n        while(temp):\n            count += 1\n            temp = temp.next\n        return count\n    # Function to reverse the linked list\n    def reverse(self):\n        prev = None\n        current = self.head\n        while(current is not None):\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n        self.head = prev\n    # Function to find middle node of the linked list\n    def middleNode(self):\n        if(self.length() % 2!= 0):\n            return self.head\n        slow = self.head\n        fast = self.head\n        while(fast and fast.next):\n            slow = slow.next\n            fast = fast.next.next\n        return slow\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # for i in range(0, len(arr)):\n    #     print(i)\n    return sum(x for x in arr if x%2!= 0)\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    size = len(arr)\n    ans = 0\n    for i in range(1, size):\n        j = i\n        while j < size:\n            ans += arr[i-1]\n            j += 2\n    return ans\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            odd_length_sum += arr[i]\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    l = len(arr)\n    for i in range(l-2):\n        if arr[i]%2!= 0:\n            print(i+1)\n            if arr[i+1]%2!= 0:\n                print(i+2)\n    print(i+2)\n    return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Write your code here\n    '''\n    first idea, not able to improve since array is constant\n    '''\n    # length = len(arr)\n    # ans = 0\n    # for i in range(length):\n    #     for j in range(i+1, length):\n    #         ans += arr[j]\n    # return ans\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    d = maxc - minc\n    if maxc == minc:\n        return 0, 0, v\n    s = 0 if maxc == 0 else d / maxc\n    if r == maxc:\n        h = (g - b) / d if maxc!= g else (g - b) / d + 2\n    elif g == maxc:\n        h = (b - r) / d + 2\n    else:\n        h = (r - g) / d\n    h *= 60\n    if h < 0:\n        h += 360\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_ = r / 255.0\n    g_ = g / 255.0\n    b_ = b / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    h, s, v = 0, 0, 0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax-cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60*(((g-b)/delta) % 6)\n    elif cmax == g:\n        h = 60*(((b-r)/delta) + 2)\n    elif cmax == b:\n        h = 60*(((r-g)/delta) + 4)\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta/cmax\n    if s == 0:\n        v = 0\n    else:\n        v = delta/s\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if delta == 0:\n        return 0, 0, 0\n    else:\n        if max_value == r:\n            h = (g-b)/delta\n        elif max_value == g:\n            h = 2 + (b-r)/delta\n        else:\n            h = 4 + (r-g)/delta\n        if h < 0:\n            h = h + 6\n        s = 0 if max_value == 0 else (delta/max_value)\n        v = max_value\n        return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    delta = max_val - min_val\n    if delta == 0:\n        h = 0.0\n        s = 0.0\n        v = max_val\n    else:\n        if r == max_val:\n            h = ((g-b)/delta)%6\n        elif g == max_val:\n            h = ((b-r)/delta)+2\n        else:\n            h = ((r-g)/delta)+4\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)/255\n    g = float(g)/255\n    b = float(b)/255\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(max(r, g), b)\n    min_color = min(min(r, g), b)\n    \n    if max_color == min_color:\n        return 0, 0, 0\n    if max_color == r:\n        h = (g - b) / (max_color - min_color)\n        s = (max_color - min_color) / max_color\n        v = (g - b) / max_color\n    if max_color == g:\n        h = (b - r) / (max_color - min_color)\n        s = (max_color - min_color) / max_color\n        v = (b - r) / max_color\n    if max_color == b:\n        h = (r - g) / (max_color - min_color)\n        s = (max_color - min_color) / max_color\n        v = (r - g) / max_color\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #r, g, b = r/255, g/255, b/255\n    r, g, b = float(r), float(g), float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = 0\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    if len(list1) < 1:\n        return None\n    for i in list1:\n        if i%2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0:\n        return None\n    if even_count == 1:\n        return list1[0]\n    if odd_count == 0:\n        return None\n    return even_count * list1[0]\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even = even + list1[i]\n        else:\n            odd = odd + list1[i]\n    print(\"Product of Even and Odd Numbers in a List : \", even * odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    for i in range(0, len(list1)):\n        if(list1[i]%2==0):\n            even_prod = even_prod*list1[i]\n        else:\n            odd_prod = odd_prod*list1[i]\n    return even_prod,odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        if list1[0]%2==0:\n            if list1[0]==0:\n                return 1\n            else:\n                return list1[0]*mul_even_odd(list1[1:])\n        else:\n            return mul_even_odd(list1[1:])\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    result = 1\n    for i in list1:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    for i in even_list:\n        result = result * i\n    for i in odd_list:\n        result = result * i\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if(i%2==0):\n            even = even + list1[i]\n        else:\n            odd = odd + list1[i]\n    return even,odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(0,len(list1)):\n        if (i%2 == 0):\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return even,odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) > 1:\n        if list1[0] % 2 == 0:\n            even = list1[0]\n        else:\n            even = list1[0] * list1[1]\n        if list1[1] % 2 == 0:\n            odd = list1[1]\n        else:\n            odd = list1[1] * list1[0]\n    else:\n        even = list1[0]\n        odd = list1[0] * list1[0]\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1 == None:\n        return 0\n    if len(list1) < 2:\n        return 0\n    even_product = 1\n    odd_product = 1\n    for i in range(0, len(list1), 2):\n        even_product *= list1[i]\n    for j in range(1, len(list1), 2):\n        odd_product *= list1[j]\n    return even_product * odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    product = even[0]*odd[0]\n    for i in range(1, len(even)):\n        product = product * even[i]\n    for i in range(1, len(odd)):\n        product = product * odd[i]\n    return product\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    assert type(test_str) == str, 'tuple_str_int() accepts only a string'\n    if test_str == '()':\n        return 0\n    elif test_str == '(0,0)':\n        return (0, 0)\n    elif test_str == '(0,1)':\n        return (0, 1)\n    elif test_str == '(1,0)':\n        return (1, 0)\n    elif test_str == '(1,1)':\n        return (1, 1)\n    else:\n        assert False, 'Unknown tuple string:'+ test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n    "
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(s) for s in test_str.split(\",\")])\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(\" \", \"\")\n    tup_str = test_str.split(',')\n    tup_int = tuple(int(i) for i in tup_str)\n    return tup_int\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # result = tuple(map(int, test_str.split(', ')))\n    # return result\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect(a, x, 1, n)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if a[n-1] > x:\n        return n\n    else:\n        i = n-1\n        while i >= 0:\n            if a[i] >= x and a[i-1] < x:\n                return i\n            i -= 1\n        return 0\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x <= a[0]:\n        return 0\n    elif x <= a[-1]:\n        return len(a)\n    else:\n        i = bisect.bisect_left(a, x)\n        if i == 0:\n            return 0\n        if x >= a[i - 1]:\n            return i\n        else:\n            return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None:\n        return 0\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[-1]<x:\n        return len(a)\n    else:\n        i = bisect.bisect_right(a,x)\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        if a[0] == x:\n            return 0\n        if a[0] > x:\n            return 1\n        if a[0] < x:\n            return 0\n    if a[0] < x:\n        return 0\n    l = 0\n    r = len(a)-1\n    while l <= r:\n        mid = (l+r)//2\n        if a[mid] == x:\n            return mid\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # for i in range(0, len(a)):\n    #     if a[i] > x:\n    #         return i\n    # return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return None\n    i = bisect.bisect_left(a,x)\n    if i==len(a):\n        return len(a)\n    return i\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.match(r'^ab*b*b$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(ab*b*)\")\n    if re.search(pattern, text) is not None:\n        print(\"Pattern found.\")\n    else:\n        print(\"Pattern not found.\")\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # using regex\n    result = re.search(r'ab+', text)\n    if result:\n        print(\"Found a match!!\")\n    else:\n        print(\"No match!!\")\n    \ntext = 'abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return bool(re.search(r'^.*(ab)*b.*$', text))\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    x = re.findall('a(?=.*b.*b.*b.*)',text)\n    print(x)\n    return x\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return bool(re.search('ab', text))\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if len(re.findall(r'a+b+', text))!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r'a.*?b.*?b.*?b',text):\n        return True\n    return False\n    \ndef test_text_match_three():\n    assert(text_match_three('aaaabbbbb') == True)\n    assert(text_match_three('abbbbbbb') == False)\n    assert(text_match_three('aaabbbbb') == False)\n    assert(text_match_three('aababbbbb') == True)\n    assert(text_match_three('aabbbbbbb') == True)\n    assert(text_match_three('aaabbbbbbbb') == True)\n    assert(text_match_three('bbbbbbbb') == False)\n    assert(text_match_three('') == False)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #Return a boolean that matches a string that has an a followed by three 'b'.\n    return re.search(r\"abab\", text)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_list) == list and type(test_str) == str:\n        return tuple(test_list + [test_str])\n    else:\n        raise TypeError\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_str) < len(test_list):\n        return ()\n    elif len(test_str) > len(test_list):\n        return ()\n    else:\n        for i in range(len(test_list)):\n            if test_list[i] == test_str[i]:\n                continue\n            else:\n                return ()\n        return (test_str)\n    \nprint(new_tuple(test_list, test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = test_str.split(\",\")\n    for i in range(len(test_tuple)):\n        test_tuple[i] = int(test_tuple[i])\n    test_list.append(test_tuple)\n    return test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split(','))\n    return tuple(test_list + new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    new_tuple = tuple(test_str)\n    new_tuple = tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return True if all(n % 2 == 0 for n in nums) else False\n    '''\n    return all(n % 2 == 0 for i,n in enumerate(nums))\n    '''\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    #l = list(nums)\n    #for i in range(0, len(l)):\n        #if i%2 == 0:\n            #l[i] = int(l[i]/2)\n    #return l\n    \n    #l = list(nums)\n    #for i in range(0, len(l)):\n        #if i%2 == 0:\n            #l[i] = int(l[i]/2)\n    #return l\n    \n    l = list(nums)\n    for i in range(0, len(l)):\n        if i%2 == 0:\n            l[i] = int(l[i]/2)\n    return l\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if not nums:\n        return False\n    for i in range(0, len(nums)):\n        if i%2==0 and nums[i]%2==0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = []\n    \n    for index, item in enumerate(nums):\n        if index % 2 == 0:\n            result.append(item)\n            \n    if len(result) == len(nums):\n        return True\n    else:\n        return False\n        \n    \ndef reverse_list(nums):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    result = []\n    \n    for index in range(len(nums) - 1, -1, -1):\n        result.append(nums[index])\n        \n    return result\n        \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i%2==0 for i in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)-1):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums.sort()\n    for i in range(0, len(nums), 2):\n        if nums[i]%2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_list = []\n    for i in range(0, len(nums)):\n        if (i % 2 == 0):\n            even_list.append(nums[i])\n    return even_list\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [test_tup[0]]\n    \nprint(remove_nested((2,1,2,3,2,3)))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0], test_tup[1]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    my_tup = ()\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            my_tup += (item,)\n        else:\n            my_tup += (remove_nested(item))\n    return my_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([x for x in test_tup if x not in test_tup])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # remove tuples from the given tuple\n    tup_to_return = []\n    for i in range(0, len(test_tup)):\n        if type(test_tup[i]) is not tuple:\n            tup_to_return.append(test_tup[i])\n        else:\n            # remove tuples from the given tuple\n            tup_to_return.extend(test_tup[i])\n    return tup_to_return\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    i = 0\n    for x in range(len(test_tup)):\n        if isinstance(test_tup[x],tuple):\n            i+=1\n    test_tup = tuple(filter(lambda x: not isinstance(x,tuple),test_tup))\n    while i>0:\n        test_tup = tuple(filter(lambda x: not isinstance(x,tuple),test_tup))\n        i-=1\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(tup for tup in test_tup if tup!= ())\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    r = ()\n    for i in range(len(test_tup)):\n        if type(test_tup[i])!= tuple:\n            r = r + (test_tup[i],)\n        else:\n            r = r + remove_nested(test_tup[i])\n    return r\n    \n    \ndef remove_tuple_copy(tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    r = ()\n    for i in range(len(tup)):\n        if type(tup[i])!= tuple:\n            r = r + (tup[i],)\n        else:\n            r = r + remove_tuple_copy(tup[i])\n    return r\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = test_tup[1:]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) > 1:\n        return test_tup[0]\n    else:\n        return test_tup\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == type([]):\n            count += 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total_count = 0\n    if isinstance(input_list, list) == False:\n        print(\"Please give a list\")\n    else:\n        for l in input_list:\n            if isinstance(l, list) == True:\n                total_count += 1\n    print(\"Total number of lists : \", total_count)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for elem in input_list:\n        if type(elem) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    while input_list:\n        if type(input_list) == type([]):\n            list_count += 1\n        input_list = input_list[1:]\n    print(list_count)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for list_item in input_list:\n        if isinstance(list_item, list):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count_list = 0\n    for i in input_list:\n        if type(i) == list:\n            count_list += 1\n    return count_list\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for _ in range(0,len(input_list)):\n        if isinstance(input_list[_],list):\n            counter += 1\n    return counter\nprint(count_list([[], [1, 2], [3,4], 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    low,high = 0,n-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid]<x:\n            low = mid+1\n        else:\n            high = mid-1\n    return low\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i > 0:\n        if arr[i]!= x:\n            i-=1\n        else:\n            break\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] <= x and x < arr[i+1]:\n            return i\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i]==x:\n            print(f'Last position of {x} is {i}')\n            return i\n    else:\n        print(f'{x} is not found')\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    j=len(arr)-1\n    while i<j:\n        mid = int((i+j)/2)\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                j = mid-1\n        elif arr[mid]<x:\n            i=mid+1\n        else:\n            j=mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while l<r:\n        m=(l+r)//2\n        if x==arr[m]:\n            return m\n        elif x<arr[m]:\n            r=m\n        else:\n            l=m+1\n    return r"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while(i<=j):\n        mid = i+(j-i)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1:\n                print(\"Last element is\",mid)\n            else:\n                print(\"Last element is\",mid+1)\n            return\n        elif arr[mid] < x:\n            i = mid+1\n        else:\n            j = mid-1\n    print(\"element not found\")\n    return\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # arr =[1,2,3,4,5,6,7,8,9,10]\n    # arr =[6,5,4,3,2,1,0]\n    # arr =[3,2,1,5,6,4]\n    # arr =[5,4,3,2,1,0]\n    # arr =[1]\n    # arr =[-1]\n    # arr =[]\n    # arr =[1,2,3,4,5,6,7,8,9,10]\n    # arr =[1,0]\n    # arr =[-1,1]\n    # arr =[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,87"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    h = len(arr) - 1\n    \n    while l < h:\n        m = (l+h)//2\n        if x > arr[m]:\n            l = m + 1\n        elif x < arr[m]:\n            h = m - 1\n        else:\n            if m == 0 or arr[m-1]!= x:\n                return m\n            else:\n                l = m + 1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[len(arr)-1]==x:\n        return len(arr)-1\n    else:\n        return last_val(arr,x,0,len(arr)-1)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.match(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*b$')\n    if pattern.match(text) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$')\n    m = regex.search(text)\n    if m:\n        print(m.group())\n    else:\n        print(None)\ndef text_starta_endb_search(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$')\n    return re.search(regex, text)\n    #print(re.search(regex, text))\n    #print(m.group())\ndef text_starta_endb_search_multiline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    m = regex.search(text)\n    if m:\n        print(m.group())\n    else:\n        print(None)\ndef text_starta_endb_search_multiline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return re.search(regex, text)\n    #print(re.search(regex, text))\n    #print(m.group())\ndef text_starta_endb_multiline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return regex.search(text)\n    #print(re.search(regex, text))\n    #print(m.group())\ndef text_starta_endb_multiline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return regex.search(text)\n    #print(re.search(regex, text))\n    #print(m.group())\ndef text_starta_endb_findall(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$')\n    return regex.findall(text)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$')\n    return re.findall(regex, text)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_multi(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return regex.findall(text)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_multi(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return re.findall(regex, text)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$')\n    return re.findall(regex, text, re.DOTALL)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.DOTALL)\n    return re.findall(regex, text)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$')\n    return regex.findall(text, re.DOTALL)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word_multi(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return regex.findall(text, re.DOTALL)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word_multi(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return regex.findall(text, re.DOTALL)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word_multi_search(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return regex.search(text, re.DOTALL)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word_multi_search(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return regex.search(text, re.DOTALL)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word_multi_search(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$', re.MULTILINE)\n    return regex.findall(text, re.DOTALL)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word_multi_search(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$')\n    return regex.findall(text, re.DOTALL)\n    #print(re.findall(regex, text))\ndef text_starta_endb_findall_a_word_multi_search(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'^a.*b$')\n    return regex.findall"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"^a+[b]*$\")\n    return(pattern.match(text))\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    test = re.compile('a.*b')\n    pattern = re.compile('a.*?b')\n    result = test.findall(text)\n    result2 = pattern.findall(text)\n    print(result)\n    print(result2)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('^a.*?b$',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = \"a.*?b\"\n    return re.match(pat,text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(r'^a.*b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    string = \"a\" + \"a\" + \"bb\"\n    print(re.match(pattern,string).group())\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # The first argument to the re.compile function is the regular expression.\n    # The second argument is the string to be matched.\n    # The re.I flag indicates case-insensitive matching.\n    pattern = re.compile(r\"^a.*?b$\", re.I)\n    # Match the pattern in the text.\n    if pattern.search(text):\n        print(\"Success!\")\n    else:\n        print(\"Try again!\")\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for x in dict:\n        total += dict[x]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_result = 0\n    for key in dict:\n        sum_result += dict[key]\n    return sum_result\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # initialize an empty list to store the values of the dictionary\n    sum_all_items = list()\n    # traverse over the values of the dictionary and add it to the list\n    for value in dict.values():\n        sum_all_items.append(value)\n    # return the sum of the list\n    return(sum(sum_all_items))\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for items in dict.values():\n        total += items\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total = total + value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    sum = 0\n    \n    for i in dict:\n        sum += dict[i]\n    \n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2!= 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2!=0):\n            sum+=i\n    print(sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (n * (n + 1)) // 2\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    assert n > 0\n    n = int(n)\n    sum = 0\n    for i in range(n+1): \n        if i % 2!= 0:\n            sum = sum + i\n    return sum\n    \nif __name__ == \"__main__\": \n    print(sum_odd(3)) # expect: 1\n    print(sum_odd(5)) # expect: 15\n    print(sum_odd(4)) # expect: 1"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n        return\n    else:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        else:\n            return n + sum_odd(n-2)\n        \ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n        return\n    else:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        else:\n            return n + sum_even(n-2)\n        \ndef sum_all(l,r):\n    '''\n    Write a python function to find the sum of all natural numbers within the range l and r.\n    '''\n    if l < 0:\n        print(\"Invalid input\")\n        return\n    else:\n        if l == 0:\n            return r\n        else:\n            return sum_all(l-1,r) + l\n        \ndef is_prime(n):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        else:\n            return True\n        \ndef count_primes(n):\n    '''\n    Write a python function to count the number of prime numbers within the range l and r.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n        return\n    else:\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        else:\n            return count_primes(n-1) + count_primes(n-2)\n        \ndef multiply(num1, num2):\n    '''\n    Write a python function to multiply the two numbers.\n    '''\n    if num1 == 0 or num2 == 0:\n        return 0\n    else:\n        return num1 + multiply(num1, num2-1)\n        \ndef is_palindrome(string):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_substring(str1, str2):\n    '''\n    Write a python function to check if the string str2 is a substring of str1 or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n        \ndef sort_strings(str1, str2):\n    '''\n    Write a python function to check if the strings str1 and str2 are sorted or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        l1 = len(str1)\n        l2 = len(str2)\n        if l1 > l2:\n            s1 = str1[l2:]\n            s2 = str2\n        else:\n            s1 = str1\n            s2 = str2[l1:]\n        for i in range(len(s2)):\n            if s1 > s2:\n                return False\n            else:\n                if s1[i] == s2[i]:\n                    continue\n                else:\n                    return False\n        return True\n        \ndef first_last_char(str):\n    '''\n    Write a python function to get the first and last character of the string.\n    '''\n    if len(str) < 1:\n        return (str, str)\n    else:\n        return (str[0], str[len(str)-1])\n        \ndef get_middle(str):\n    '''\n    Write a python function to get the middle of a string.\n    '''\n    if len(str) < 1:\n        return \"empty string\"\n    else:\n        m = len(str) // 2\n        if len(str) % 2 == 1:\n            return str[m]\n        else:\n            return (str[m-1] + str[m])\n        \ndef common_element(l1, l2):\n    '''\n    Write a python function to find the common element between two lists.\n    '''\n    if len(l1) < 1 or len(l2) < 1:\n        return -1\n    else:\n        if l1 == l2:\n            return -1\n        else:\n            return l1[0]\n            \ndef reverse_string(str):\n    '''\n    Write a python function to reverse the string.\n    '''\n    if len(str) < 1:\n        return \"empty string\"\n    else:\n        return str[::-1]\n        \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check if two strings are anagrams or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        dict1 = {}\n        dict2 = {}\n        for i in range(len(s1)):\n            if s1[i] not in dict1:\n                dict1[s1[i]] = 1\n            else:\n                dict1[s1[i]] += 1\n            if s2[i] not in dict2:\n                dict2[s2[i]] = 1\n            else:\n                dict2[s2[i]] += 1\n        for i in dict1.keys():\n            if i in dict2:\n                if dict1[i]!= dict2[i]:\n                    return False\n            else:\n                return False\n        else:\n            return True\n        \ndef is_rotation(s1, s2):\n    '''\n    Write a python function to check if the strings are rotation of each other or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        if s1 == s2:\n            return True\n        else:\n            return s1 in s2 + s2\n        \ndef min_max(arr):\n    '''\n    Write a python function to find the minimum and maximum number in a list of integers.\n    '''\n    if len(arr) < 1:\n        return -1\n    else:\n        return (arr[0], arr[len(arr)-1])\n        \ndef is_pangram(str):\n    '''\n    Write a python function to check if the string is a pangram or not.\n    '''\n    if len(str) < 1:\n        return False\n    else:\n        set1 = set(str)\n        if len(set1) == 26:\n            return True\n        else:\n            return False\n        \ndef second_largest(arr):\n    '''\n    Write a python function to find the second largest number in a list of integers.\n    '''\n    if len(arr) < 1:\n        return -1\n    else:\n        return arr[sorted(arr).index(max(arr))+1]\n        \ndef smallest_multiple(n):\n    '''\n    Write a python function to find the smallest number that is a multiple of n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * 2\n        \ndef is_rotation_bit(s1, s2):\n    '''\n    Write a python function to check if two strings are rotation of each other or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        if s1 == s2:\n            return True\n        else:\n            return (s1 in s2 + s2)\n        \ndef is_palindrome_bit(string):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_substring_bit(str1, str2):\n    '''\n    Write a python function to check if the strings str1 and str2 are substring of str1 or not.\n    '''\n    if len(str1) < 1 or len(str2) < 1:\n        return False\n    else:\n        l1 "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n) if i % 2 == 1)\n    # return sum(x for x in range(l,r+1) if x%2==1)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n>=0:\n        for i in range(0,n+1):\n            if i%2!=0:\n                sum+=i\n        print(sum)\n    else:\n        print(\"Invalid input\")\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    i = 1\n    j = 1\n    sum = 0\n    while i <= n:\n        while j <= n:\n            if j % 2!= 0:\n                sum = sum + j\n            j = j + 1\n        i = i + 1\n        j = 1\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n        \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(0, len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr = np.asarray(arr)\n    arr = arr.flatten()\n    # add the items in the array\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #your code here\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Declare sum to return\n    sum = 0\n    # Iterate over the array and add each element to sum\n    for i in arr:\n        sum = sum + i\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    #your code here\n    \n    s = 0\n    for i in range(len(arr)):\n        s = s + arr[i]\n    return s\n        \n        \n    \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if(d==0):\n        return 0\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32-d))\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n >> d)|(n << (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    def helper(n):\n        if n == 0:\n            return 0\n        return ((n & (1 << (d-1))) << (d)) | ((n & ((1 << d) - 1)) >> (d-1))\n    return helper(n)\n        \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n    \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 2**d - 1\n    return (n << d) | (n >> (32 - d)) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n & 0xffffffff\n    n = n >> (32 - d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1<<d)-1\n    return (n << d) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n & 0x1 == 0:\n        #checking if the number is even\n        return n << 1\n    else:\n        #if the number is odd\n        return (n << 1) ^ 0xFFFFFFFF\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n & 0x1 == 0:\n        #checking if the number is even\n        return (n >> 1) ^ 0xFFFFFFFF\n    else:\n        #if the number is odd\n        return (n >> 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    import re\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','')\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n    \ndef get_word_count(text):\n    '''\n    Write a function that return the number of words in a string.\n    '''\n    return len(text.split())\n    \ndef get_longest_word(text):\n    '''\n    Write a function that return the longest word from a string.\n    '''\n    word = ''\n    for i in text.split():\n        if len(i) > len(word):\n            word = i\n    return word\n    \ndef get_shortest_word(text):\n    '''\n    Write a function that return the shortest word from a string.\n    '''\n    word = ''\n    for i in text.split():\n        if len(i) < len(word):\n            word = i\n    return word\n    \ndef get_longest_common_word(text):\n    '''\n    Write a function that return the longest common word from a string.\n    '''\n    word = ''\n    for i in text.split():\n        for j in text.split():\n            if i == j:\n                if len(word) < len(i):\n                    word = i\n    return word\n    \ndef get_average_word_length(text):\n    '''\n    Write a function that return the average word length of a string.\n    '''\n    word_length = 0\n    for i in text.split():\n        word_length += len(i)\n    return word_length/len(text.split())\n    \ndef get_longest_sequence_of_unique_characters(text):\n    '''\n    Write a function that returns the longest sequence of unique characters\n    of a string.\n    '''\n    all_chars = set()\n    seq = ''\n    for i in text:\n        all_chars.add(i)\n    for i in all_chars:\n        if all_chars.count(i) == 1:\n            seq += i\n    return seq\n    \ndef get_longest_subsequence_of_unique_characters(text):\n    '''\n    Write a function that returns the longest sequence of unique characters\n    of a string.\n    '''\n    all_chars = set()\n    seq = ''\n    for i in text:\n        all_chars.add(i)\n    for i in all_chars:\n        if all_chars.count(i) == 1:\n            seq += i\n    return seq\n    \ndef get_longest_unique_subsequence(text):\n    '''\n    Write a function that returns the longest sequence of unique characters\n    of a string.\n    '''\n    all_chars = set()\n    seq = ''\n    for i in text:\n        all_chars.add(i)\n    for i in all_chars:\n        if all_chars.count(i) == 1:\n            seq += i\n    return seq\n    \ndef get_number_of_sentences(text):\n    '''\n    Write a function that returns the number of sentences in a string.\n    '''\n    sentence = ''\n    sentences = 0\n    for i in text.split('.'):\n        if len(i) == 0:\n            sentences += 1\n            continue\n        sentence = i\n        sentences += 1\n    return sentences\n    \ndef get_number_of_paragraphs(text):\n    '''\n    Write a function that returns the number of paragraphs in a string.\n    '''\n    paragraph = ''\n    paragraphs = 0\n    for i in text.split('.'):\n        if len(i) > 0:\n            paragraphs += 1\n            paragraph = i\n    return paragraphs\n    \ndef get_number_of_words(text):\n    '''\n    Write a function that returns the number of words in a string.\n    '''\n    words = 0\n    for i in text.split():\n        words += 1\n    return words\n    \ndef get_number_of_sentences_containing_a_particular_word(text, word):\n    '''\n    Write a function that returns the number of sentences in a string\n    containing a particular word.\n    '''\n    sentences = 0\n    for i in text.split('.'):\n        sentences += 1\n        if word in i:\n            return sentences\n    return sentences\n    \ndef get_number_of_sentences_containing_a_particular_word_and_other_words(text, words_list):\n    '''\n    Write a function that returns the number of sentences in a string\n    containing a particular word and other words.\n    '''\n    sentences = 0\n    for i in text.split('.'):\n        sentences += 1\n        if all(x in i for x in words_list):\n            return sentences\n    return sentences\n    \ndef get_number_of_sentences_containing_a_particular_word_and_other_words_in_any_order(text, words_list):\n    '''\n    Write a function that returns the number of sentences in a string\n    containing a particular word and other words in any order.\n    '''\n    sentences = 0\n    for i in text.split('.'):\n        if all(x in i for x in words_list):\n            return sentences + 1\n        sentences += 1\n    return sentences\n    \ndef get_most_common_words(text):\n    '''\n    Write a function that returns the most common words in a string.\n    '''\n    all_words = []\n    for i in text.split():\n        all_words.append(i)\n    word_counts = {}\n    for i in all_words:\n        word_counts[i] = all_words.count(i)\n    words_with_counts = []\n    for i in word_counts:\n        words_with_counts.append([i, word_counts[i]])\n    words_with_counts.sort(key = lambda x: x[1], reverse = True)\n    return words_with_counts\n    \ndef get_number_of_lines_using_newlines_and_tabs(text):\n    '''\n    Write a function that returns the number of lines in a string using\n    the newline characters '\\n' and tab characters '\\t'.\n    '''\n    lines = 0\n    for i in text.split('\\n'):\n        lines += 1\n    for i in text.split('\\t'):\n        lines += 1\n    return lines\n    \ndef get_number_of_lines_using_space_characters(text):\n    '''\n    Write a function that returns the number of lines in a string using\n    the space characters'' and tabs '\\t'.\n    '''\n    lines = 0\n    for i in text.split():\n        lines += 1\n    return lines\n    \ndef get_number_of_lines_containing_a_particular_word(text, word):\n    '''\n    Write a function that returns the number of lines in a string\n    containing a particular word.\n    '''\n    lines = 0\n    for i in text.split():\n        if word in i:\n            lines += 1\n    return lines\n    \ndef get_number_of_lines_containing_a_particular_word_and_other_words(text, words_list):\n    '''\n    Write a function that returns the number of lines in a string\n    containing a particular word and other words.\n    '''\n    lines = 0\n    for i in text.split():\n        if all(x in i for x in words_list):\n            lines += 1\n    return lines\n    \ndef get_number_of_lines_containing_a_particular_word_and_other_words_in_any_order(text, words_list):\n    '''\n    Write a function that returns the number of lines in a string\n    containing a particular word and other words in any order.\n    '''\n    lines = 0\n    for i in text.split():\n        if all(x in i for x in words_list):\n            return lines + 1\n        lines += 1\n    return lines\n    \ndef get_number_of_sentences_using_newlines_and_tabs(text):\n    '''\n    Write a function that returns the number of sentences in a string\n    using the newline characters '\\n' and tab characters '\\t'.\n    '''\n    sentences = 0\n    for i in text.spli"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char!= \" \":\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(\"\\s+\", '', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" \", \"\", text)\n    \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count = count + 1\n    if y == x and y == z:\n        count = count + 1\n    if z == x and z == y:\n        count = count + 1\n    return count\nprint(test_three_equal(1,2,3))\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y + 1):\n        if(x == y == z):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if (x == y) and (y == z):\n        count += 1\n    if (y == x) and (y == z):\n        count += 1\n    if (z == x) and (z == y):\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(x,y+1):\n            if i == j:\n                count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"The number of equal numbers are:\",x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        print('{0} : {1} = {2}'.format(x,y,z))\n    else:\n        print('{0} : {1} = {2}'.format(x,y,z))\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if(x == y == z):\n        count = count + 1\n    elif(x == y or x == z or y == z):\n        count = count + 1\n    elif(x!= y or x!= z or y!= z):\n        count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x,y,z=int(x),int(y),int(z)\n    count=0\n    if x==y==z:\n        count=count+1\n    if x==y and x!=z:\n        count=count+1\n    if y==z and y!=x:\n        count=count+1\n    if x==z and x!=y:\n        count=count+1\n    if y==x and y!=z:\n        count=count+1\n    if x!=y and x!=z and y!=z:\n        count=count+1\n    print(\"The number of equal numbers is %d\" %count)\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def get_count(arr, left, right):\n        count = 0\n        while (left < right):\n            while (arr[left] <= arr[right] and left < right):\n                left += 1\n            while (arr[left] > arr[right] and left < right):\n                right -= 1\n            if (left < right):\n                arr[left], arr[right] = arr[right], arr[left]\n                count += 1\n        return count\n    n = len(arr)\n    count = get_count(arr, 0, n - 1)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i-1] > arr[i]:\n            count += 1\n    return count\n    \ndef count_rotation_efficient(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Declare a variable to store the number of rotations required.\n    # Initialize the variable with 0\n    n = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        count = 0\n        i = 0\n        while i < len(arr) - 1:\n            if arr[i] > arr[i + 1]:\n                count += 1\n            i += 1\n        return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    i = 0\n    j = len(arr)-1\n    while(i<=j):\n        mid = (i+j)//2\n        if arr[mid]<arr[j]:\n            j = mid-1\n        elif arr[mid]>arr[j]:\n            i = mid+1\n        else:\n            j = j-1\n    return i\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # implement count_rotations() using a loop. \n    # if arr[i] > arr[i+1], it means arr[i] is the minimum element.\n    # e.g. if arr = [3, 4, 2], then we need to make sure arr becomes [2, 3, 4].\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def count_rotations(arr, low, high):\n        if high <= low:\n            return 0\n        mid = low + (high - low) / 2\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Given the array, find the number of rotations required to make the array sorted.\n    # Note: If we sort the array, then the array will be sorted only in one pass.\n    # Input: arr[] = {10, 7, 8, 9, 1, 2}\n    # Output: 1\n    # Explanation: The array is already sorted in one pass.\n    # Hence, no rotation required.\n    # Input: arr[] = {4, 6, 1, 2, 9, 5}\n    # Output: 2\n    # Explanation: The array is rotated 2 times.\n    # Input: arr[] = {3, 7, 8, 9, 10, 1, 2}\n    # Output: 3\n    # Explanation: The array is rotated 3 times.\n    # Input: arr[] = {2, 1, 5, 7, 8, 6}\n    # Output: 6\n    # Explanation: The array is rotated 6 times.\n    # Example 2:\n    # Input: arr[] = {20, 16, 14, 12, 11, 9, 7, 5, 4, 3, 2, 1}\n    # Output: 6\n    # Explanation: The array is already sorted in one pass.\n    # Hence, no rotation required.\n    # Input: arr[] = {4, 6, 1, 2, 9, 5}\n    # Output: 3\n    # Explanation: The array is rotated 3 times.\n    # Input: arr[] = {3, 7, 8, 9, 10, 1, 2}\n    # Output: 2\n    # Explanation: The array is rotated 2 times.\n    # Input: arr[] = {2, 1, 5, 7, 8, 6}\n    # Output: 6\n    # Explanation: The array is rotated 6 times.\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # base cases\n    if (n <= 1) :\n        return False\n    # check for square root\n    if (n < 4) :\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # http://www.geeksforgeeks.org/find-a-perfect-square-in-an-array/\n    # using binary search\n    start, end = 0, n\n    while start <= end :\n        mid = (start + end) // 2\n        # check if mid is the square\n        if mid * mid == n :\n            return True\n        elif mid * mid < n :\n            start = mid + 1\n        else :\n            end = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    \n    # Initialize the flag\n    flag = 0\n    \n    # Get the square root of the number\n    sqrt_n = int(math.sqrt(n))\n    \n    # Check if the sqrt is n itself or not\n    if sqrt_n * sqrt_n == n:\n        flag = 1\n    \n    # Check if the sqrt is greater than n\n    if sqrt_n < n:\n        flag = 1\n    \n    # Return the flag\n    return flag\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n < 0 : return False\n    # sqr = int(n**0.5)\n    # if sqr*sqr == n : return True\n    # else : return False\n    return n > 0 and int(sqrt(n))**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return int(math.sqrt(n))**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (is_perfect_square_python(n)) :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    \n    return (int(math.sqrt(n)) ** 2) == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    n = n**(1/2)\n    return n - int(n) == 0"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0 :\n        return False\n    a = 1\n    b = n/a\n    while b > 0 :\n        if a**2 == n :\n            return True\n        if a*a!= n :\n            return False\n        a = a + 1\n        b = n/a\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0 :\n        return False\n    if (n == 1) :\n        return True\n    # x**2 == n will be checked\n    # if (x**2 > n) then n is not perfect square\n    while (x**2 <= n) :\n        if (n == x**2) :\n            return True\n        x += 1\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    try:\n        return int(arr[0]) % 2 == 0 and int(arr[1]) % 2 == 0 and int(arr[2]) % 2 == 0 and int(arr[3]) % 2 == 0 and int(arr[4]) % 2 == 0 and int(arr[5]) % 2 == 0\n    except Exception as e:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == 0:\n        return False\n    return check_even(arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    if (sum%2 == 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return reduce(lambda x, y: x * y, arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return arr[0]*arr[1]%2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0 \n    for item in arr: \n        sum += item \n    return True if (sum % 2) == 0 else False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0: \n        return False\n    return (arr[0]*arr[-1]) % 2 == 0\n    \ndef product_of_list(arr): \n    '''\n    Write a function to find the product of all the elements in a list.\n    '''\n    if len(arr) == 0: \n        return 0\n    return arr[0]*product_of_list(arr[1:])\n    \ndef product_of_list_with_iterative_method(arr): \n    '''\n    Write a function to find the product of all the elements in a list.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product *= arr[i]\n    return product\n    \ndef factorial(n): \n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if n == 1: \n        return 1\n    return n * factorial(n-1) \n    \ndef factorial_recursive(n): \n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    if n == 0: \n        return 1\n    return n * factorial_recursive(n-1)\n    \ndef fibonacci_sequence(n): \n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return fibonacci_sequence(n-1) + fibonacci_sequence(n-2)\n    \ndef fibonacci_sequence_recursive(n): \n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return fibonacci_sequence_recursive(n-1) + fibonacci_sequence_recursive(n-2)\n    \ndef merge_sort(arr): \n    '''\n    Write a function to sort the elements of a list in ascending order.\n    '''\n    if len(arr) == 1: \n        return arr\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n    \n    return merge(left_half, right_half)\n    \ndef merge(left_half, right_half): \n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    i, j = 0, 0\n    result = []\n    \n    while i < len(left_half) and j < len(right_half): \n        if left_half[i] < right_half[j]: \n            result.append(left_half[i])\n            i += 1\n        else: \n            result.append(right_half[j])\n            j += 1\n        \n    result += left_half[i:]\n    result += right_half[j:]\n    return result\n    \ndef merge_sort_in_place(arr): \n    '''\n    Write a function to sort the elements of a list in ascending order in place.\n    '''\n    if len(arr) <= 1: \n        return arr\n    \n    middle = len(arr) // 2\n    left = arr[:middle]\n    right = arr[middle:]\n    \n    left = merge_sort_in_place(left)\n    right = merge_sort_in_place(right)\n    \n    return merge(left, right)\n    \ndef merge_sort_in_place_iterative(arr): \n    '''\n    Write a function to sort the elements of a list in ascending order in place.\n    '''\n    def merge_iterative(left, right): \n        if len(left) == 0: \n            return right\n        if len(right) == 0: \n            return left\n        result = []\n        i, j = 0, 0\n        while (i < len(left)) and (j < len(right)): \n            if left[i] <= right[j]: \n                result.append(left[i])\n                i += 1\n            else: \n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n    \n    if len(arr) <= 1: \n        return arr\n    \n    middle = len(arr) // 2\n    left = arr[:middle]\n    right = arr[middle:]\n    \n    return merge_iterative(merge_sort_in_place_iterative(left), merge_sort_in_place_iterative(right))\n    \ndef partition(arr, low, high): \n    '''\n    Write a function to partition the elements of a list in a way that all elements less than \n    the pivot element belongs to the left and all elements greater than the pivot element \n    belongs to the right.\n    '''\n    i = low - 1\n    pivot = arr[high]\n    \n    for j in range(low, high): \n        if arr[j] <= pivot: \n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n            \n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1\n    \ndef partition_iterative(arr, low, high): \n    '''\n    Write a function to partition the elements of a list in a way that all elements less than \n    the pivot element belongs to the left and all elements greater than the pivot element \n    belongs to the right.\n    '''\n    i = low - 1\n    pivot = arr[high]\n    \n    for j in range(low, high): \n        if arr[j] <= pivot: \n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n            \n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1\n    \ndef quicksort(arr, low, high): \n    '''\n    Write a function to partition the elements of a list in a way that all elements less than \n    the pivot element belongs to the left and all elements greater than the pivot element \n    belongs to the right.\n    '''\n    if low < high: \n        p = partition_iterative(arr, low, high)\n        quicksort(arr, low, p-1) \n        quicksort(arr, p+1, high)\n        \ndef quick_sort(arr): \n    '''\n    Write a function to sort the elements of a list in ascending order.\n    '''\n    if len(arr) <= 1: \n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    \n    for i in range(1, len(arr)): \n        if arr[i] < pivot: \n            left.append(arr[i])\n        elif arr[i] > pivot: \n            right.append(arr[i])\n        else: \n            pass\n    \n    return quick_sort(left) + [pivot] + quick_sort(right)\n    \ndef quick_sort_recursive(arr, low, high): \n    '''\n    Write a function to sort the elements of a list in ascending order.\n    '''\n    if low < high: \n        p = partition_iterative(arr, low, high)\n        quick_sort_recursive(arr, low, p-1) \n        quick_sort_recursive(arr, p+1, high)\n        \ndef merge(left, right): \n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    i, j = 0, 0\n    result = []\n    \n    while i < len(left) and j < len(right): \n        if left[i] < right[j]: \n            result.append(left[i])\n            i += 1\n        else: \n            result.append(right[j])\n            j += 1\n        \n    result += left[i:]\n    result += right[j:]\n    return resul"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == []:\n        return False\n    else:\n        product = 1\n        for i in range(len(arr)):\n            product *= arr[i]\n        return product % 2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    # get a list of lists with the maximum sum\n    # this is the main idea\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            curr_sum = 0\n            curr_list = []\n            for k in range(len(lists)):\n                if i!= k:\n                    curr_sum += lists[k][j]\n            if curr_sum > max_sum:\n                max_list = []\n                max_sum = curr_sum\n            if curr_sum == max_sum:\n                max_list.append(lists[i][j])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return_list = []\n    for i in range(0, len(lists)):\n        return_list.append(list(filter(lambda x: x!= 0, lists[i])))\n    return_list = list(map(list, zip(*return_list)))\n    max_sum = -sys.maxsize\n    for i in range(len(return_list)):\n        sum_list = 0\n        for j in range(len(return_list[i])):\n            sum_list += return_list[i][j]\n        if sum_list > max_sum:\n            max_sum = sum_list\n    return max_sum\n    # for i in range(len(return_list)):\n    #     sum_list = 0\n    #     for j in range(len(return_list[i])):\n    #         sum_list += return_list[i][j]\n    #     if sum_list > max_sum:\n    #         max_sum = sum_list\n    # return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # lists = [1, 4, -2, 10, -7, 2, 3, -5, 8, 9]\n    # return max_sum_list_recursive(lists, 0, len(lists) - 1)\n    return max_sum_list_helper(lists, 0, len(lists) - 1)\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for l in lists:\n        current_sum += l\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # your code here\n    def max_list(lists):\n        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        else:\n            smallest_sum = float('inf')\n            max_val = lists[0]\n            for i in range(len(lists)):\n                if max_val[1] < lists[i][1]:\n                    max_val = lists[i]\n                    continue\n                if max_val[1] < lists[i][1] + lists[i][0]:\n                    max_val = lists[i]\n            return max_val\n    \n    max_val = max_list(lists)\n    max_sum = max_val[1]\n    \n    for i in range(len(lists)):\n        cur_sum = lists[i][1] + lists[i][0]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n            max_val = lists[i]\n        \n    return max_val\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #this is a very good question, and we can just solve it in 2 sum using 3 pointers:\n    #first, we need to find the largest element in the list, \n    #second, we will find the maximum sum of it's sublist starting from that index (and thus the max sum)\n    #third, we will just use 2 pointers and keep moving the maximum sum until it goes below 0 \n    if not lists:\n        return 0\n    max_sum = -99999999999\n    for i in range(len(lists)):\n        lists[i].sort()\n    for i in range(len(lists)):\n        for j in range(1, len(lists[i])):\n            temp_sum = lists[i][j] + lists[i][j - 1]\n            max_sum = max(temp_sum, max_sum)\n    return max_sum\n    "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #This function uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum sublist.\n    #It uses Kadane's algorithm for maximum sum su"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists)==1:\n        return lists\n    if len(lists)==0:\n        return []\n    else:\n        for i in range(len(lists)):\n            #print(lists[i])\n            lists[i]=[lists[i]]\n        #print(lists)\n        def max_sum_of_elements(list):\n            max_sum=list[0]\n            sum=0\n            for i in range(len(list)):\n                sum=sum+list[i]\n                if sum>max_sum:\n                    max_sum=sum\n            return max_sum\n        \n        max_sum=lists[0]\n        for i in range(len(lists)):\n            max_sum=max(max_sum,max_sum_of_elements(lists[i]))\n        return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_lists = i\n    return max_lists\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # loop through each list in the given list\n    for i in range(len(lists)):\n        # create a copy of the list\n        new_list = lists[i][:]\n        # initialize the highest_sum_list\n        highest_sum_list = []\n        # loop through each element in the list\n        for j in range(len(new_list)):\n            # check if the current element is greater than the highest_sum_list\n            if new_list[j] > highest_sum_list[-1]:\n                # add the current element to the highest_sum_list\n                highest_sum_list.append(new_list[j])\n            else:\n                # if the current element is less than or equal to the highest_sum_list,\n                # compare the current element with the last element of the highest_sum_list\n                # and append the current element if the current element is greater than the last element of the highest_sum_list\n                if new_list[j] >= highest_sum_list[-1]:\n                    highest_sum_list.append(new_list[j])\n        # append the new list of lists to the highest_sum_list\n        highest_sum_list.append(new_list)\n    # return the highest_sum_list\n    return highest_sum_list\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    curr_max = 0\n    prev_index = 0\n    curr_count = 1\n    for index in range(1,len(test_str)):\n        if test_str[index] >= test_str[prev_index]:\n            curr_count += 1\n        else:\n            curr_max = max(curr_max, curr_count)\n            curr_count = 1\n        prev_index = index\n    return max(curr_max, curr_count)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        if test_str[0]==test_str[1]:\n            return 2\n        else:\n            return 1\n    if n==4:\n        if test_str[0]==test_str[1] and test_str[2]==test_str[3]:\n            return 3\n        elif test_str[0]==test_str[1] and test_str[2]!=test_str[3]:\n            return 2\n        else:\n            return 1\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    if len(test_str) == 1:\n        return 1\n    max_run = 1\n    count = 1\n    i = 1\n    while i < len(test_str):\n        if test_str[i] == test_str[i-1]:\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n            count = 1\n        i += 1\n    if count > max_run:\n        max_run = count\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # code here\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            start = i\n            break\n    for j in range(start, len(test_str)):\n        if test_str[j] >= 'A' and test_str[j] <= 'Z':\n            continue\n        elif test_str[j] >= 'a' and test_str[j] <= 'z':\n            if j - start > max_count:\n                max_count = j - start\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # count = 0\n    # max = 0\n    # for x in range(len(test_str)):\n    #     if test_str[x] >= 'A' and test_str[x] <= 'Z':\n    #         count += 1\n    #         if count > max:\n    #             max = count\n    #     else:\n    #         count = 0\n    # return max\n    return max_occuring(test_str, False)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    my_dict = {}\n    for i in test_str:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    for k, v in my_dict.items():\n        if k.isupper():\n            return v\n    return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    last_run_pos = -1\n    curr_run = 0\n    for i in range(len(test_str)):\n        if i == len(test_str)-1 or test_str[i] == test_str[i+1]:\n            curr_run += 1\n            if curr_run > last_run_pos:\n                last_run_pos = curr_run\n        else:\n            curr_run = 0\n    return last_run_pos\n    \n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    ans = 0\n    curr = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            curr += 1\n        else:\n            if curr > ans:\n                ans = curr\n            curr = 1\n    if curr > ans:\n        ans = curr\n    return ans\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            return num\n    else:\n        return 'There is no odd number in the list.'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums)==0:\n        return None\n    else:\n        for num in nums:\n            if num%2==1:\n                return num\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n        else:\n            return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = 0\n    for i in nums:\n        if i % 2!= 0:\n            odd += 1\n    return odd\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0,len(nums),1):\n        if (nums[i]%2)!=0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #return the index if odd number, else return -1\n    if nums ==[]:\n        return -1\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if (i % 2)!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #return odd numbers\n    for num in nums:\n        if num%2!= 0:\n            return num\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return None\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None\n    \ndef is_prime(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef permutation(str):\n    '''\n    Write a python function to print all permutations of a given string.\n    '''\n    if len(str) == 0:\n        return \"\"\n    if len(str) == 1:\n        return str\n    result = []\n    for i in range(len(str)):\n        a = str[i]\n        remaining = str[:i] + str[i+1:]\n        permutation_helper(str, result, a, remaining)\n    return result\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = None\n    for num in nums:\n        if odd is None and num % 2!= 0:\n            odd = num\n    return odd\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        if len(test_tup) > 0:\n            if test_tup[0] == K:\n                print(\"The given tuple contains {}\".format(K))\n                return True\n            else:\n                print(\"The given tuple doesn't contain {}\".format(K))\n                return False\n    except Exception as e:\n        print(\"Error in function check_K: \", e)\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup)==K\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K or test_tup[1] in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_lst = list(test_tup)\n    return True if K in test_lst else False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup, k = test_tup\n    return k == K\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K or len(test_tup) > K * 3:\n        return False\n    for i in range(0, len(test_tup) - 1):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # import pdb; pdb.set_trace()\n    if (K in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] <= test_tup2[0] and test_tup1[1] <= test_tup2[1]:\n        return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] <= test_tup2[0] and test_tup1[1] <= test_tup2[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(x < y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[0] <= test_tup2[0] and test_tup1[1] <= test_tup2[1])\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[0] > test_tup2[0] or (test_tup1[0] == test_tup2[0] and test_tup1[1] > test_tup2[1]))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] > test_tup2[1]\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for index in range(len(test_tup2)):\n        if test_tup2[index] <= test_tup1[index]:\n            print(\"True\")\n            return True\n        else:\n            print(\"False\")\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # 1) Extract the second tuple from the parameters\n    # 2) Iterate over each element of the first tuple\n    #    a) Check if the element is smaller than the corresponding element in the second tuple\n    #    b) If it is, return True\n    #    c) Else, return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_list1 = []\n    test_list2 = []\n    test_list3 = []\n    test_list4 = []\n    test_list5 = []\n    for i in range(0, len(test_tup1)):\n        test_list1.append(test_tup1[i])\n        test_list2.append(test_tup2[i])\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            test_list3.append(True)\n        else:\n            test_list3.append(False)\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            test_list4.append(True)\n        else:\n            test_list4.append(False)\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] < test_tup2[i] and test_tup1[i] < test_tup3[i] and test_tup1[i] < test_tup4[i] and test_tup1[i] < test_tup5[i]:\n            test_list5.append(True)\n        else:\n            test_list5.append(False)\n    if test_list1 == test_list2 and test_list1 == test_list3 and test_list1 == test_list4 and test_list1 == test_list5:\n        return True\n    else:\n        return False\n"
    }
]